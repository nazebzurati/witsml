//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace Energistics.Generator.WITSML200 {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ExistenceKind {
        
        /// <remarks/>
        actual,
        
        /// <remarks/>
        planned,
        
        /// <remarks/>
        simulated,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MatrixCementKind {
        
        /// <remarks/>
        ankerite,
        
        /// <remarks/>
        calcite,
        
        /// <remarks/>
        chlorite,
        
        /// <remarks/>
        dolomite,
        
        /// <remarks/>
        illite,
        
        /// <remarks/>
        kaolinite,
        
        /// <remarks/>
        quartz,
        
        /// <remarks/>
        siderite,
        
        /// <remarks/>
        smectite,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MeasureClass {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("absorbed dose")]
        absorbeddose,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activity of radioactivity")]
        activityofradioactivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance")]
        amountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per amount of substance")]
        amountofsubstanceperamountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per area")]
        amountofsubstanceperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per time")]
        amountofsubstancepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per time per area")]
        amountofsubstancepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per volume")]
        amountofsubstancepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per length")]
        angleperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per volume")]
        anglepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular acceleration")]
        angularacceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular velocity")]
        angularvelocity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api gamma ray")]
        apigammaray,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api gravity")]
        apigravity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api neutron")]
        apineutron,
        
        /// <remarks/>
        area,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per amount of substance")]
        areaperamountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per area")]
        areaperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per count")]
        areapercount,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per mass")]
        areapermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per time")]
        areapertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per volume")]
        areapervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation per frequency interval")]
        attenuationperfrequencyinterval,
        
        /// <remarks/>
        capacitance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cation exchange capacity")]
        cationexchangecapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("data transfer speed")]
        datatransferspeed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusion coefficient")]
        diffusioncoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusive time of flight")]
        diffusivetimeofflight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("digital storage")]
        digitalstorage,
        
        /// <remarks/>
        dimensionless,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dipole moment")]
        dipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dose equivalent")]
        doseequivalent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dynamic viscosity")]
        dynamicviscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge")]
        electriccharge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per area")]
        electricchargeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per mass")]
        electricchargepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per volume")]
        electricchargepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductance")]
        electricconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductivity")]
        electricconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current")]
        electriccurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current density")]
        electriccurrentdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric field strength")]
        electricfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric potential difference")]
        electricpotentialdifference,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric resistance")]
        electricresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric resistance per length")]
        electricresistanceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrical resistivity")]
        electricalresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electromagnetic moment")]
        electromagneticmoment,
        
        /// <remarks/>
        energy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per area")]
        energylengthperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per time area temperature")]
        energylengthpertimeareatemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per area")]
        energyperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per length")]
        energyperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per mass")]
        energypermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per mass per time")]
        energypermasspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per volume")]
        energypervolume,
        
        /// <remarks/>
        force,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force area")]
        forcearea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force length per length")]
        forcelengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per force")]
        forceperforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per length")]
        forceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per volume")]
        forcepervolume,
        
        /// <remarks/>
        frequency,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("frequency interval")]
        frequencyinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat capacity")]
        heatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat flow rate")]
        heatflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat transfer coefficient")]
        heattransfercoefficient,
        
        /// <remarks/>
        illuminance,
        
        /// <remarks/>
        inductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("isothermal compressibility")]
        isothermalcompressibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kinematic viscosity")]
        kinematicviscosity,
        
        /// <remarks/>
        length,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per length")]
        lengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per mass")]
        lengthpermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per pressure")]
        lengthperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per temperature")]
        lengthpertemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per time")]
        lengthpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per volume")]
        lengthpervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("light exposure")]
        lightexposure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear acceleration")]
        linearacceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear thermal expansion")]
        linearthermalexpansion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logarithmic power ratio")]
        logarithmicpowerratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logarithmic power ratio per length")]
        logarithmicpowerratioperlength,
        
        /// <remarks/>
        luminance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous efficacy")]
        luminousefficacy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous flux")]
        luminousflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous intensity")]
        luminousintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic dipole moment")]
        magneticdipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic field strength")]
        magneticfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux")]
        magneticflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux density")]
        magneticfluxdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux density per length")]
        magneticfluxdensityperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic permeability")]
        magneticpermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic vector potential")]
        magneticvectorpotential,
        
        /// <remarks/>
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass length")]
        masslength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per area")]
        massperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per energy")]
        massperenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per length")]
        massperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per mass")]
        masspermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time")]
        masspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per area")]
        masspertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per length")]
        masspertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume")]
        masspervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per length")]
        masspervolumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per pressure")]
        masspervolumeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per temperature")]
        masspervolumepertemperature,
        
        /// <remarks/>
        mobility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar energy")]
        molarenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar heat capacity")]
        molarheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar volume")]
        molarvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molecular weight")]
        molecularweight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of force")]
        momentofforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of inertia")]
        momentofinertia,
        
        /// <remarks/>
        momentum,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("normalized power")]
        normalizedpower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability length")]
        permeabilitylength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability rock")]
        permeabilityrock,
        
        /// <remarks/>
        permittivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plane angle")]
        planeangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potential difference per power drop")]
        potentialdifferenceperpowerdrop,
        
        /// <remarks/>
        power,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per area")]
        powerperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per power")]
        powerperpower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per volume")]
        powerpervolume,
        
        /// <remarks/>
        pressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per pressure")]
        pressureperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per time")]
        pressurepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per volume")]
        pressurepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared")]
        pressuresquared,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared per force time per area")]
        pressuresquaredperforcetimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure time per volume")]
        pressuretimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quantity of light")]
        quantityoflight,
        
        /// <remarks/>
        radiance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radiant intensity")]
        radiantintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal area")]
        reciprocalarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal electric potential difference")]
        reciprocalelectricpotentialdifference,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal force")]
        reciprocalforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal length")]
        reciprocallength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal mass")]
        reciprocalmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal mass time")]
        reciprocalmasstime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal pressure")]
        reciprocalpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal time")]
        reciprocaltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal volume")]
        reciprocalvolume,
        
        /// <remarks/>
        reluctance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("second moment of area")]
        secondmomentofarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("signaling event per time")]
        signalingeventpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("solid angle")]
        solidangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific heat capacity")]
        specificheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval")]
        temperatureinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per length")]
        temperatureintervalperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per pressure")]
        temperatureintervalperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per time")]
        temperatureintervalpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductance")]
        thermalconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductivity")]
        thermalconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal diffusivity")]
        thermaldiffusivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal insulance")]
        thermalinsulance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal resistance")]
        thermalresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature")]
        thermodynamictemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature per thermodynamic temperature")]
        thermodynamictemperatureperthermodynamictemperature,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per length")]
        timeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per mass")]
        timepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per time")]
        timepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per volume")]
        timepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vertical coordinate")]
        verticalcoordinate,
        
        /// <remarks/>
        volume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume flow rate per volume flow rate")]
        volumeflowratepervolumeflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per area")]
        volumeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per length")]
        volumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per mass")]
        volumepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per pressure")]
        volumeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per rotation")]
        volumeperrotation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time")]
        volumepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time length")]
        volumepertimelength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per area")]
        volumepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per length")]
        volumepertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per pressure")]
        volumepertimeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per pressure length")]
        volumepertimeperpressurelength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per time")]
        volumepertimepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per volume")]
        volumepertimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per volume")]
        volumepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric heat transfer coefficient")]
        volumetricheattransfercoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric thermal expansion")]
        volumetricthermalexpansion,
        
        /// <remarks/>
        unitless,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LithostratigraphicRank {
        
        /// <remarks/>
        group,
        
        /// <remarks/>
        formation,
        
        /// <remarks/>
        member,
        
        /// <remarks/>
        bed,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum WellboreDatumReference {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ground level")]
        groundlevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kelly bushing")]
        kellybushing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean sea level")]
        meansealevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("derrick floor")]
        derrickfloor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing flange")]
        casingflange,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("crown valve")]
        crownvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rotary bushing")]
        rotarybushing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rotary table")]
        rotarytable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sea floor")]
        seafloor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lowest astronomical tide")]
        lowestastronomicaltide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean higher high water")]
        meanhigherhighwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean high water")]
        meanhighwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean lower low water")]
        meanlowerlowwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean low water")]
        meanlowwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean tide level")]
        meantidelevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kickoff point")]
        kickoffpoint,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum QuantityClassKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("absorbed dose")]
        absorbeddose,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activity of radioactivity")]
        activityofradioactivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance")]
        amountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per amount of substance")]
        amountofsubstanceperamountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per area")]
        amountofsubstanceperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per time")]
        amountofsubstancepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per time per area")]
        amountofsubstancepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance per volume")]
        amountofsubstancepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per length")]
        angleperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per volume")]
        anglepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular acceleration")]
        angularacceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular velocity")]
        angularvelocity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api gamma ray")]
        apigammaray,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api gravity")]
        apigravity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("api neutron")]
        apineutron,
        
        /// <remarks/>
        area,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per amount of substance")]
        areaperamountofsubstance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per area")]
        areaperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per count")]
        areapercount,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per mass")]
        areapermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per time")]
        areapertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per volume")]
        areapervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation per frequency interval")]
        attenuationperfrequencyinterval,
        
        /// <remarks/>
        capacitance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cation exchange capacity")]
        cationexchangecapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("data transfer speed")]
        datatransferspeed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusion coefficient")]
        diffusioncoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusive time of flight")]
        diffusivetimeofflight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("digital storage")]
        digitalstorage,
        
        /// <remarks/>
        dimensionless,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dipole moment")]
        dipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dose equivalent")]
        doseequivalent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dynamic viscosity")]
        dynamicviscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge")]
        electriccharge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per area")]
        electricchargeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per mass")]
        electricchargepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge per volume")]
        electricchargepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductance")]
        electricconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductivity")]
        electricconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current")]
        electriccurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current density")]
        electriccurrentdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric field strength")]
        electricfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric potential difference")]
        electricpotentialdifference,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric resistance")]
        electricresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric resistance per length")]
        electricresistanceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrical resistivity")]
        electricalresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electromagnetic moment")]
        electromagneticmoment,
        
        /// <remarks/>
        energy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per area")]
        energylengthperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per time area temperature")]
        energylengthpertimeareatemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per area")]
        energyperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per length")]
        energyperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per mass")]
        energypermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per mass per time")]
        energypermasspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per volume")]
        energypervolume,
        
        /// <remarks/>
        force,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force area")]
        forcearea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force length per length")]
        forcelengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per force")]
        forceperforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per length")]
        forceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per volume")]
        forcepervolume,
        
        /// <remarks/>
        frequency,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("frequency interval")]
        frequencyinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat capacity")]
        heatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat flow rate")]
        heatflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat transfer coefficient")]
        heattransfercoefficient,
        
        /// <remarks/>
        illuminance,
        
        /// <remarks/>
        inductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("isothermal compressibility")]
        isothermalcompressibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kinematic viscosity")]
        kinematicviscosity,
        
        /// <remarks/>
        length,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per length")]
        lengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per mass")]
        lengthpermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per pressure")]
        lengthperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per temperature")]
        lengthpertemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per time")]
        lengthpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per volume")]
        lengthpervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("light exposure")]
        lightexposure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear acceleration")]
        linearacceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear thermal expansion")]
        linearthermalexpansion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logarithmic power ratio")]
        logarithmicpowerratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logarithmic power ratio per length")]
        logarithmicpowerratioperlength,
        
        /// <remarks/>
        luminance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous efficacy")]
        luminousefficacy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous flux")]
        luminousflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous intensity")]
        luminousintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic dipole moment")]
        magneticdipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic field strength")]
        magneticfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux")]
        magneticflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux density")]
        magneticfluxdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux density per length")]
        magneticfluxdensityperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic permeability")]
        magneticpermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic vector potential")]
        magneticvectorpotential,
        
        /// <remarks/>
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass length")]
        masslength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per area")]
        massperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per energy")]
        massperenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per length")]
        massperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per mass")]
        masspermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time")]
        masspertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per area")]
        masspertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per length")]
        masspertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume")]
        masspervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per length")]
        masspervolumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per pressure")]
        masspervolumeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per temperature")]
        masspervolumepertemperature,
        
        /// <remarks/>
        mobility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar energy")]
        molarenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar heat capacity")]
        molarheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar volume")]
        molarvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molecular weight")]
        molecularweight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of force")]
        momentofforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of inertia")]
        momentofinertia,
        
        /// <remarks/>
        momentum,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("normalized power")]
        normalizedpower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability length")]
        permeabilitylength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability rock")]
        permeabilityrock,
        
        /// <remarks/>
        permittivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plane angle")]
        planeangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potential difference per power drop")]
        potentialdifferenceperpowerdrop,
        
        /// <remarks/>
        power,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per area")]
        powerperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per power")]
        powerperpower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per volume")]
        powerpervolume,
        
        /// <remarks/>
        pressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per pressure")]
        pressureperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per time")]
        pressurepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per volume")]
        pressurepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared")]
        pressuresquared,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared per force time per area")]
        pressuresquaredperforcetimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure time per volume")]
        pressuretimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quantity of light")]
        quantityoflight,
        
        /// <remarks/>
        radiance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radiant intensity")]
        radiantintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal area")]
        reciprocalarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal electric potential difference")]
        reciprocalelectricpotentialdifference,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal force")]
        reciprocalforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal length")]
        reciprocallength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal mass")]
        reciprocalmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal mass time")]
        reciprocalmasstime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal pressure")]
        reciprocalpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal time")]
        reciprocaltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reciprocal volume")]
        reciprocalvolume,
        
        /// <remarks/>
        reluctance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("second moment of area")]
        secondmomentofarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("signaling event per time")]
        signalingeventpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("solid angle")]
        solidangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific heat capacity")]
        specificheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval")]
        temperatureinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per length")]
        temperatureintervalperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per pressure")]
        temperatureintervalperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature interval per time")]
        temperatureintervalpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductance")]
        thermalconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductivity")]
        thermalconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal diffusivity")]
        thermaldiffusivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal insulance")]
        thermalinsulance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal resistance")]
        thermalresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature")]
        thermodynamictemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature per thermodynamic temperature")]
        thermodynamictemperatureperthermodynamictemperature,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per length")]
        timeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per mass")]
        timepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per time")]
        timepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per volume")]
        timepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vertical coordinate")]
        verticalcoordinate,
        
        /// <remarks/>
        volume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume flow rate per volume flow rate")]
        volumeflowratepervolumeflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per area")]
        volumeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per length")]
        volumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per mass")]
        volumepermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per pressure")]
        volumeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per rotation")]
        volumeperrotation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time")]
        volumepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time length")]
        volumepertimelength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per area")]
        volumepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per length")]
        volumepertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per pressure")]
        volumepertimeperpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per pressure length")]
        volumepertimeperpressurelength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per time")]
        volumepertimepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per volume")]
        volumepertimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per volume")]
        volumepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric heat transfer coefficient")]
        volumetricheattransfercoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric thermal expansion")]
        volumetricthermalexpansion,
        
        /// <remarks/>
        unitless,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not a measure")]
        notameasure,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReferenceCondition {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0 degC 1 atm")]
        Item0degC1atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0 degC 1 bar")]
        Item0degC1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15 degC 1 atm")]
        Item15degC1atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("15 degC 1 bar")]
        Item15degC1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20 degC 1 atm")]
        Item20degC1atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("20 degC 1 bar")]
        Item20degC1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("25 degC 1 bar")]
        Item25degC1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60 degF 1 atm")]
        Item60degF1atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("60 degF 30 in Hg")]
        Item60degF30inHg,
        
        /// <remarks/>
        ambient,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LithologyQualifierKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkali feldspar rhyolite")]
        alkalifeldsparrhyolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkali olivine basalt")]
        alkaliolivinebasalt,
        
        /// <remarks/>
        amphibolite,
        
        /// <remarks/>
        amphibolitic,
        
        /// <remarks/>
        andesite,
        
        /// <remarks/>
        andesitic,
        
        /// <remarks/>
        anhydrite,
        
        /// <remarks/>
        anhydritic,
        
        /// <remarks/>
        ankerite,
        
        /// <remarks/>
        ankeritic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("anorthositic rock")]
        anorthositicrock,
        
        /// <remarks/>
        anthracite,
        
        /// <remarks/>
        anthracitic,
        
        /// <remarks/>
        aplite,
        
        /// <remarks/>
        aplitic,
        
        /// <remarks/>
        arenite,
        
        /// <remarks/>
        arenitic,
        
        /// <remarks/>
        argillaceous,
        
        /// <remarks/>
        arkose,
        
        /// <remarks/>
        arkosic,
        
        /// <remarks/>
        barite,
        
        /// <remarks/>
        baritic,
        
        /// <remarks/>
        basalt,
        
        /// <remarks/>
        basaltic,
        
        /// <remarks/>
        basanite,
        
        /// <remarks/>
        basanitic,
        
        /// <remarks/>
        bauxite,
        
        /// <remarks/>
        bauxitic,
        
        /// <remarks/>
        belemnites,
        
        /// <remarks/>
        belemnitic,
        
        /// <remarks/>
        bioturbated,
        
        /// <remarks/>
        bioturbation,
        
        /// <remarks/>
        bitumen,
        
        /// <remarks/>
        bituminous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bituminous coal")]
        bituminouscoal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("blueschist metamorphic rock")]
        blueschistmetamorphicrock,
        
        /// <remarks/>
        boninite,
        
        /// <remarks/>
        breccia,
        
        /// <remarks/>
        brecciated,
        
        /// <remarks/>
        bryozoan,
        
        /// <remarks/>
        bryozoans,
        
        /// <remarks/>
        burrowed,
        
        /// <remarks/>
        burrows,
        
        /// <remarks/>
        calcareous,
        
        /// <remarks/>
        calcite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("calcite concretion")]
        calciteconcretion,
        
        /// <remarks/>
        calcitic,
        
        /// <remarks/>
        carbonaceous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbonate ooze")]
        carbonateooze,
        
        /// <remarks/>
        carbonatite,
        
        /// <remarks/>
        carbonatitic,
        
        /// <remarks/>
        chalk,
        
        /// <remarks/>
        chalky,
        
        /// <remarks/>
        chamosite,
        
        /// <remarks/>
        chamositic,
        
        /// <remarks/>
        chert,
        
        /// <remarks/>
        cherty,
        
        /// <remarks/>
        chlorite,
        
        /// <remarks/>
        chloritic,
        
        /// <remarks/>
        clay,
        
        /// <remarks/>
        claystone,
        
        /// <remarks/>
        coal,
        
        /// <remarks/>
        concretionary,
        
        /// <remarks/>
        concretions,
        
        /// <remarks/>
        conglomerate,
        
        /// <remarks/>
        conglomeratic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coral fragments")]
        coralfragments,
        
        /// <remarks/>
        coralline,
        
        /// <remarks/>
        crinoidal,
        
        /// <remarks/>
        crinoids,
        
        /// <remarks/>
        dacite,
        
        /// <remarks/>
        dacitic,
        
        /// <remarks/>
        diabase,
        
        /// <remarks/>
        diabasic,
        
        /// <remarks/>
        diamictite,
        
        /// <remarks/>
        diamictitic,
        
        /// <remarks/>
        diatomaceous,
        
        /// <remarks/>
        diatoms,
        
        /// <remarks/>
        diorite,
        
        /// <remarks/>
        dioritic,
        
        /// <remarks/>
        dioritoid,
        
        /// <remarks/>
        dioritoidic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("doleritic rock")]
        doleriticrock,
        
        /// <remarks/>
        dolomite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dolomite concretion")]
        dolomiteconcretion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dolomite stringer")]
        dolomitestringer,
        
        /// <remarks/>
        dolomitic,
        
        /// <remarks/>
        eclogite,
        
        /// <remarks/>
        eclogitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exotic alkaline rock")]
        exoticalkalinerock,
        
        /// <remarks/>
        feldspar,
        
        /// <remarks/>
        feldsparic,
        
        /// <remarks/>
        feldspathic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("feldspathic arenite")]
        feldspathicarenite,
        
        /// <remarks/>
        ferruginous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fine grained igneous rock")]
        finegrainedigneousrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid dioritoid")]
        foiddioritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid gabbroid")]
        foidgabbroid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid syenitoid")]
        foidsyenitoid,
        
        /// <remarks/>
        foidite,
        
        /// <remarks/>
        foiditic,
        
        /// <remarks/>
        foiditoid,
        
        /// <remarks/>
        foidolite,
        
        /// <remarks/>
        foidolitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foliated metamorphic rock")]
        foliatedmetamorphicrock,
        
        /// <remarks/>
        foraminifera,
        
        /// <remarks/>
        foraminiferous,
        
        /// <remarks/>
        forams,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fossil fragments")]
        fossilfragments,
        
        /// <remarks/>
        fossiliferous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fossils undifferentiated")]
        fossilsundifferentiated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fragmental igneous rock")]
        fragmentaligneousrock,
        
        /// <remarks/>
        gabbro,
        
        /// <remarks/>
        gabbroic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gabbroic rock")]
        gabbroicrock,
        
        /// <remarks/>
        gabbroid,
        
        /// <remarks/>
        gabbroidic,
        
        /// <remarks/>
        gilsonite,
        
        /// <remarks/>
        gilsonitic,
        
        /// <remarks/>
        glauconite,
        
        /// <remarks/>
        glauconitic,
        
        /// <remarks/>
        gneiss,
        
        /// <remarks/>
        gneissic,
        
        /// <remarks/>
        granite,
        
        /// <remarks/>
        granitic,
        
        /// <remarks/>
        granodiorite,
        
        /// <remarks/>
        granodioritic,
        
        /// <remarks/>
        granofels,
        
        /// <remarks/>
        granulite,
        
        /// <remarks/>
        granulitic,
        
        /// <remarks/>
        gravel,
        
        /// <remarks/>
        gravelly,
        
        /// <remarks/>
        greenstone,
        
        /// <remarks/>
        gumbo,
        
        /// <remarks/>
        gypsiferous,
        
        /// <remarks/>
        gypsum,
        
        /// <remarks/>
        halite,
        
        /// <remarks/>
        halitic,
        
        /// <remarks/>
        hornfels,
        
        /// <remarks/>
        hornfelsic,
        
        /// <remarks/>
        igneous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("igneous rock")]
        igneousrock,
        
        /// <remarks/>
        illite,
        
        /// <remarks/>
        illitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impact generated material")]
        impactgeneratedmaterial,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impure dolomite")]
        impuredolomite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impure limestone")]
        impurelimestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("intrusive rock (plutonic)")]
        intrusiverockplutonic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("iron rich sedimentary rock")]
        ironrichsedimentaryrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kalsilitic and melilitic rocks")]
        kalsiliticandmeliliticrocks,
        
        /// <remarks/>
        kaolinite,
        
        /// <remarks/>
        kaolinitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("komatiitic rock")]
        komatiiticrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("latitic rock")]
        latiticrock,
        
        /// <remarks/>
        lignite,
        
        /// <remarks/>
        lignitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime boundstone")]
        limeboundstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime framestone")]
        limeframestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime grainstone")]
        limegrainstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime mudstone")]
        limemudstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime packstone")]
        limepackstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime wackestone")]
        limewackestone,
        
        /// <remarks/>
        limestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("limestone stringer")]
        limestonestringer,
        
        /// <remarks/>
        lithic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lithic fragments")]
        lithicfragments,
        
        /// <remarks/>
        marble,
        
        /// <remarks/>
        marcasite,
        
        /// <remarks/>
        marcasitic,
        
        /// <remarks/>
        marl,
        
        /// <remarks/>
        marly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("metamorphic rock")]
        metamorphicrock,
        
        /// <remarks/>
        mica,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mica schist")]
        micaschist,
        
        /// <remarks/>
        micaceous,
        
        /// <remarks/>
        microfossiliferous,
        
        /// <remarks/>
        microfossils,
        
        /// <remarks/>
        migmatite,
        
        /// <remarks/>
        migmatitic,
        
        /// <remarks/>
        monzogabbro,
        
        /// <remarks/>
        monzogabbroic,
        
        /// <remarks/>
        mud,
        
        /// <remarks/>
        muddy,
        
        /// <remarks/>
        mudstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mylonitic rock")]
        myloniticrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("no sample")]
        nosample,
        
        /// <remarks/>
        oncolite,
        
        /// <remarks/>
        oncoliths,
        
        /// <remarks/>
        oncolitic,
        
        /// <remarks/>
        ooids,
        
        /// <remarks/>
        ooliths,
        
        /// <remarks/>
        oolitic,
        
        /// <remarks/>
        ooze,
        
        /// <remarks/>
        ophiolite,
        
        /// <remarks/>
        ophiolitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("organic bearing mudstone")]
        organicbearingmudstone,
        
        /// <remarks/>
        ostracodal,
        
        /// <remarks/>
        ostracods,
        
        /// <remarks/>
        peat,
        
        /// <remarks/>
        peaty,
        
        /// <remarks/>
        pebble,
        
        /// <remarks/>
        pebbly,
        
        /// <remarks/>
        pegmatite,
        
        /// <remarks/>
        pegmatitic,
        
        /// <remarks/>
        pelletal,
        
        /// <remarks/>
        pellets,
        
        /// <remarks/>
        peloidal,
        
        /// <remarks/>
        peloids,
        
        /// <remarks/>
        peridotite,
        
        /// <remarks/>
        peridotitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phaneritic igneous rock")]
        phaneriticigneousrock,
        
        /// <remarks/>
        phonolite,
        
        /// <remarks/>
        phonolitic,
        
        /// <remarks/>
        phonolitoid,
        
        /// <remarks/>
        phosphate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phosphate rock")]
        phosphaterock,
        
        /// <remarks/>
        phosphatic,
        
        /// <remarks/>
        phyllite,
        
        /// <remarks/>
        phyllitic,
        
        /// <remarks/>
        pisolite,
        
        /// <remarks/>
        pisoliths,
        
        /// <remarks/>
        pisolitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plant remains")]
        plantremains,
        
        /// <remarks/>
        porphyritic,
        
        /// <remarks/>
        porphyry,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potassium and magnesium salts")]
        potassiumandmagnesiumsalts,
        
        /// <remarks/>
        pyrite,
        
        /// <remarks/>
        pyritic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pyroclastic breccia")]
        pyroclasticbreccia,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pyroclastic rock")]
        pyroclasticrock,
        
        /// <remarks/>
        pyroxenite,
        
        /// <remarks/>
        pyroxenitic,
        
        /// <remarks/>
        quartiferous,
        
        /// <remarks/>
        quartz,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quartz arenite")]
        quartzarenite,
        
        /// <remarks/>
        quartzite,
        
        /// <remarks/>
        quartzitic,
        
        /// <remarks/>
        radiolaria,
        
        /// <remarks/>
        radiolarian,
        
        /// <remarks/>
        rhyolite,
        
        /// <remarks/>
        rhyolitic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rock salt")]
        rocksalt,
        
        /// <remarks/>
        rootlets,
        
        /// <remarks/>
        salty,
        
        /// <remarks/>
        sand,
        
        /// <remarks/>
        sandstone,
        
        /// <remarks/>
        sandy,
        
        /// <remarks/>
        sapropel,
        
        /// <remarks/>
        sapropelic,
        
        /// <remarks/>
        schist,
        
        /// <remarks/>
        schisty,
        
        /// <remarks/>
        sepentinitic,
        
        /// <remarks/>
        serpentinite,
        
        /// <remarks/>
        shale,
        
        /// <remarks/>
        shaly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shell fragments")]
        shellfragments,
        
        /// <remarks/>
        shelly,
        
        /// <remarks/>
        siderite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("siderite concretion")]
        sideriteconcretion,
        
        /// <remarks/>
        sideritic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("siliceous ooze")]
        siliceousooze,
        
        /// <remarks/>
        silt,
        
        /// <remarks/>
        siltstone,
        
        /// <remarks/>
        silty,
        
        /// <remarks/>
        skarn,
        
        /// <remarks/>
        skarny,
        
        /// <remarks/>
        slate,
        
        /// <remarks/>
        slaty,
        
        /// <remarks/>
        smectite,
        
        /// <remarks/>
        smectitic,
        
        /// <remarks/>
        spicular,
        
        /// <remarks/>
        spicules,
        
        /// <remarks/>
        spilite,
        
        /// <remarks/>
        spilitic,
        
        /// <remarks/>
        stylolites,
        
        /// <remarks/>
        stylolitic,
        
        /// <remarks/>
        syenite,
        
        /// <remarks/>
        syenitic,
        
        /// <remarks/>
        syenitoid,
        
        /// <remarks/>
        sylvite,
        
        /// <remarks/>
        sylvitic,
        
        /// <remarks/>
        tarry,
        
        /// <remarks/>
        tephrite,
        
        /// <remarks/>
        tephritic,
        
        /// <remarks/>
        tephritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tholeiitic basalt")]
        tholeiiticbasalt,
        
        /// <remarks/>
        tonalite,
        
        /// <remarks/>
        tonalitic,
        
        /// <remarks/>
        trachyte,
        
        /// <remarks/>
        trachytic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("trachytic rock")]
        trachyticrock,
        
        /// <remarks/>
        trachytoid,
        
        /// <remarks/>
        travertine,
        
        /// <remarks/>
        tuff,
        
        /// <remarks/>
        tuffaceous,
        
        /// <remarks/>
        tuffite,
        
        /// <remarks/>
        tuffitic,
        
        /// <remarks/>
        ultrabasic,
        
        /// <remarks/>
        undifferentiated,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        wacke,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum WellStatus {
        
        /// <remarks/>
        abandoned,
        
        /// <remarks/>
        active,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("active -- injecting")]
        activeinjecting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("active -- producing")]
        activeproducing,
        
        /// <remarks/>
        completed,
        
        /// <remarks/>
        drilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("partially plugged")]
        partiallyplugged,
        
        /// <remarks/>
        permitted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plugged and abandoned")]
        pluggedandabandoned,
        
        /// <remarks/>
        proposed,
        
        /// <remarks/>
        sold,
        
        /// <remarks/>
        suspended,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temporarily abandoned")]
        temporarilyabandoned,
        
        /// <remarks/>
        testing,
        
        /// <remarks/>
        tight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("working over")]
        workingover,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum UnitOfMeasure {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[area]")]
        area,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[mass]")]
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[molar]")]
        molar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[vol]")]
        vol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(bbl/d)/(bbl/d)")]
        bbldbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/d)/(m3/d)")]
        m3dm3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/s)/(m3/s)")]
        m3sm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/ft3")]
        Item0001bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/m3")]
        Item0001bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 d/ft3")]
        Item0001dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/bbl")]
        Item0001galUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/gal[UK]")]
        Item0001galUKgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/bbl")]
        Item0001galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/ft3")]
        Item0001galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/gal[US]")]
        Item0001galUSgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 h/ft")]
        Item0001hft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 kPa2/cP")]
        Item0001kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/bbl")]
        Item0001lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[UK]")]
        Item0001lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[US]")]
        Item0001lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 psi/ft")]
        Item0001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 pt[UK]/bbl")]
        Item0001ptUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 seca")]
        Item0001seca,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 bbl/bbl")]
        Item001bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dega/ft")]
        Item001degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 degF/ft")]
        Item001degFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dm3/km")]
        Item001dm3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 ft/ft")]
        Item001ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 grain/ft3")]
        Item001grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/kg")]
        Item001Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/km")]
        Item001Lkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft")]
        Item001lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft2")]
        Item001lbfft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbm/ft2")]
        Item001lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 psi/ft")]
        Item001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft")]
        Item01ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft[US]")]
        Item01ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 gal[US]/bbl")]
        Item01galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 in")]
        Item01in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 L/bbl")]
        Item01Lbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 lbm/bbl")]
        Item01lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 pt[US]/bbl")]
        Item01ptUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 yd")]
        Item01yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/(kg.s)")]
        Item1kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/16 in")]
        Item116in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ft")]
        Item12ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ms")]
        Item12ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 cm3/min")]
        Item130cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/ft")]
        Item130degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/m")]
        Item130degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 lbf/m")]
        Item130lbfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 m/m")]
        Item130mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 N/m")]
        Item130Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/32 in")]
        Item132in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/64 in")]
        Item164in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/a")]
        Item1a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/angstrom")]
        Item1angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bar")]
        Item1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bbl")]
        Item1bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/cm")]
        Item1cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/d")]
        Item1d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degC")]
        Item1degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degF")]
        Item1degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degR")]
        Item1degR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft")]
        Item1ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft2")]
        Item1ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft3")]
        Item1ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/g")]
        Item1g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[UK]")]
        Item1galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[US]")]
        Item1galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/h")]
        Item1h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/H")]
        Item1H,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/in")]
        Item1in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/K")]
        Item1K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kg")]
        Item1kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/km2")]
        Item1km2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kPa")]
        Item1kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/L")]
        Item1L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbf")]
        Item1lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbm")]
        Item1lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m2")]
        Item1m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m3")]
        Item1m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi")]
        Item1mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi2")]
        Item1mi2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/min")]
        Item1min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mm")]
        Item1mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ms")]
        Item1ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/N")]
        Item1N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/nm")]
        Item1nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/Pa")]
        Item1Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/pPa")]
        Item1pPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/psi")]
        Item1psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/s")]
        Item1s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/upsi")]
        Item1upsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/us")]
        Item1us,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/uV")]
        Item1uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/V")]
        Item1V,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/wk")]
        Item1wk,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/yd")]
        Item1yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 ft")]
        Item10ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 in")]
        Item10in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 km")]
        Item10km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 kN")]
        Item10kN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 Mg/m3")]
        Item10Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ft")]
        Item100ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ka[t]")]
        Item100kat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 km")]
        Item100km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl")]
        Item1000bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl.ft/d")]
        Item1000bblftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl/d")]
        Item1000bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft")]
        Item1000ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/h")]
        Item1000fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/s")]
        Item1000fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3")]
        Item1000ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(d.ft)")]
        Item1000ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(psi.d)")]
        Item1000ft3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/bbl")]
        Item1000ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/d")]
        Item1000ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[UK]")]
        Item1000galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[US]")]
        Item1000galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 lbf.ft")]
        Item1000lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3")]
        Item1000m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(d.m)")]
        Item1000m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(h.m)")]
        Item1000m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/d")]
        Item1000m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/h")]
        Item1000m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/m3")]
        Item1000m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m4/d")]
        Item1000m4d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E12 ft3")]
        Item1E12ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 (ft3/d)/(bbl/d)")]
        Item1E6ft3dbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 acre.ft/bbl")]
        Item1E6acreftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl")]
        Item1E6bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/(acre.ft)")]
        Item1E6bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/acre")]
        Item1E6bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/d")]
        Item1E6bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/ft3")]
        Item1E6bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/m3")]
        Item1E6bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]")]
        Item1E6BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]/h")]
        Item1E6BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3")]
        Item1E6ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/(acre.ft)")]
        Item1E6ft3acreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/bbl")]
        Item1E6ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/d")]
        Item1E6ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 gal[US]")]
        Item1E6galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 lbm/a")]
        Item1E6lbma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3")]
        Item1E6m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.degC)")]
        Item1E6m3m3degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.degF)")]
        Item1E6m3m3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3/d")]
        Item1E6m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-9 1/ft")]
        Item1E91ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 bbl")]
        Item1E9bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 ft3")]
        Item1E9ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 ft")]
        Item30ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 m")]
        Item30m,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.h")]
        Ah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.m2")]
        Am2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s")]
        As,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/kg")]
        Askg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/m3")]
        Asm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/cm2")]
        Acm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/ft2")]
        Aft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m")]
        Am,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m2")]
        Am21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm")]
        Amm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm2")]
        Amm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("a[t]")]
        at,
        
        /// <remarks/>
        acre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acre.ft")]
        acreft,
        
        /// <remarks/>
        ag,
        
        /// <remarks/>
        aJ,
        
        /// <remarks/>
        angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("at")]
        at1,
        
        /// <remarks/>
        atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/ft")]
        atmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/h")]
        atmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/hm")]
        atmhm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/m")]
        atmm,
        
        /// <remarks/>
        b,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B.W")]
        BW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("b/cm3")]
        bcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/m")]
        Bm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/O")]
        BO,
        
        /// <remarks/>
        bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/h")]
        barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/km")]
        barkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/m")]
        barm,
        
        /// <remarks/>
        bar2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar2/cP")]
        bar2cP,
        
        /// <remarks/>
        bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(acre.ft)")]
        bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.acre.ft)")]
        bbldacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.ft)")]
        bbldft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(ft.psi.d)")]
        bblftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(kPa.d)")]
        bblkPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(psi.d)")]
        bblpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/acre")]
        bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/bbl")]
        bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d")]
        bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d2")]
        bbld2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft")]
        bblft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft3")]
        bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h")]
        bblh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h2")]
        bblh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/in")]
        bblin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/m3")]
        bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/mi")]
        bblmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/min")]
        bblmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/psi")]
        bblpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[UK]")]
        bbltonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[US]")]
        bbltonUS,
        
        /// <remarks/>
        Bd,
        
        /// <remarks/>
        bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit/s")]
        bits,
        
        /// <remarks/>
        Bq,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bq/kg")]
        Bqkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]")]
        BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT].in/(h.ft2.degF)")]
        BtuITinhft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft.degF)")]
        BtuIThftdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2)")]
        BtuIThft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.degF)")]
        BtuIThft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.degR)")]
        BtuIThft2degR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3)")]
        BtuIThft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3.degF)")]
        BtuIThft3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.m2.degC)")]
        BtuIThm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(hp.h)")]
        BtuIThph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.degF)")]
        BtuITlbmdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.degR)")]
        BtuITlbmdegR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbmol.degF)")]
        BtuITlbmoldegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2)")]
        BtuITsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2.degF)")]
        BtuITsft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3)")]
        BtuITsft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3.degF)")]
        BtuITsft3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/bbl")]
        BtuITbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/ft3")]
        BtuITft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[UK]")]
        BtuITgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[US]")]
        BtuITgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/h")]
        BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbm")]
        BtuITlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbmol")]
        BtuITlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/min")]
        BtuITmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/s")]
        BtuITs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[th]")]
        Btuth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[UK]")]
        BtuUK,
        
        /// <remarks/>
        @byte,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("byte/s")]
        bytes,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.m")]
        Cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm2")]
        Ccm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm3")]
        Ccm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/g")]
        Cg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/kg")]
        Ckg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m2")]
        Cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m3")]
        Cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm2")]
        Cmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm3")]
        Cmm3,
        
        /// <remarks/>
        ca,
        
        /// <remarks/>
        cA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[IT]")]
        calIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]")]
        calth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(g.K)")]
        calthgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm.degC)")]
        calthhcmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2)")]
        calthhcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2.degC)")]
        calthhcm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm3)")]
        calthhcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(mol.degC)")]
        calthmoldegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm.degC)")]
        calthscmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm2.degC)")]
        calthscm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm3)")]
        calthscm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/cm3")]
        calthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/g")]
        calthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/h")]
        calthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/kg")]
        calthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/lbm")]
        calthlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mL")]
        calthmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mm3")]
        calthmm3,
        
        /// <remarks/>
        cC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ccal[th]")]
        ccalth,
        
        /// <remarks/>
        ccgr,
        
        /// <remarks/>
        cd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cd/m2")]
        cdm2,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        ceV,
        
        /// <remarks/>
        cF,
        
        /// <remarks/>
        cg,
        
        /// <remarks/>
        cgauss,
        
        /// <remarks/>
        cgr,
        
        /// <remarks/>
        cGy,
        
        /// <remarks/>
        cH,
        
        /// <remarks/>
        chain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnA]")]
        chainBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnB]")]
        chainBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Cla]")]
        chainCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Ind37]")]
        chainInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Se]")]
        chainSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[SeT]")]
        chainSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[US]")]
        chainUS,
        
        /// <remarks/>
        cHz,
        
        /// <remarks/>
        Ci,
        
        /// <remarks/>
        cJ,
        
        /// <remarks/>
        cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/a")]
        cma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s")]
        cms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s2")]
        cms2,
        
        /// <remarks/>
        cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/g")]
        cm2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/cm3")]
        cm3cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/g")]
        cm3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/h")]
        cm3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/L")]
        cm3L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/m3")]
        cm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/min")]
        cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/s")]
        cm3s,
        
        /// <remarks/>
        cm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cmH2O[4degC]")]
        cmH2O4degC,
        
        /// <remarks/>
        cN,
        
        /// <remarks/>
        cohm,
        
        /// <remarks/>
        cP,
        
        /// <remarks/>
        cPa,
        
        /// <remarks/>
        crd,
        
        /// <remarks/>
        cS,
        
        /// <remarks/>
        cs,
        
        /// <remarks/>
        cSt,
        
        /// <remarks/>
        ct,
        
        /// <remarks/>
        cT,
        
        /// <remarks/>
        cu,
        
        /// <remarks/>
        cV,
        
        /// <remarks/>
        cW,
        
        /// <remarks/>
        cWb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[UK]")]
        cwtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[US]")]
        cwtUS,
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.ft")]
        Dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.m")]
        Dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/(Pa.s)")]
        DPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/bbl")]
        dbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/cP")]
        DcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/ft3")]
        dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/m3")]
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D[API]")]
        DAPI,
        
        /// <remarks/>
        dA,
        
        /// <remarks/>
        dam,
        
        /// <remarks/>
        daN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daN.m")]
        daNm,
        
        /// <remarks/>
        dAPI,
        
        /// <remarks/>
        dB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.mW")]
        dBmW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.MW")]
        dBMW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.W")]
        dBW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/ft")]
        dBft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/km")]
        dBkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/m")]
        dBm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/O")]
        dBO,
        
        /// <remarks/>
        dC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dcal[th]")]
        dcalth,
        
        /// <remarks/>
        dega,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/ft")]
        degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/h")]
        degah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/m")]
        degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/min")]
        degamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/s")]
        degas,
        
        /// <remarks/>
        degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC.m2.h/kcal[th]")]
        degCm2hkcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/ft")]
        degCft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/h")]
        degCh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/hm")]
        degChm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/km")]
        degCkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/kPa")]
        degCkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/m")]
        degCm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/min")]
        degCmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/s")]
        degCs,
        
        /// <remarks/>
        degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF.ft2.h/Btu[IT]")]
        degFft2hBtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/ft")]
        degFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/h")]
        degFh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/m")]
        degFm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/min")]
        degFmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/psi")]
        degFpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/s")]
        degFs,
        
        /// <remarks/>
        degR,
        
        /// <remarks/>
        dEuc,
        
        /// <remarks/>
        deV,
        
        /// <remarks/>
        dF,
        
        /// <remarks/>
        dgauss,
        
        /// <remarks/>
        dGy,
        
        /// <remarks/>
        dH,
        
        /// <remarks/>
        dHz,
        
        /// <remarks/>
        dJ,
        
        /// <remarks/>
        dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm/s")]
        dms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3")]
        dm31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/(kW.h)")]
        dm3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kg")]
        dm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kmol")]
        dm3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m")]
        dm3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m3")]
        dm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/MJ")]
        dm3MJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s")]
        dm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s2")]
        dm3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/t")]
        dm3t,
        
        /// <remarks/>
        dN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dN.m")]
        dNm,
        
        /// <remarks/>
        dohm,
        
        /// <remarks/>
        dP,
        
        /// <remarks/>
        dPa,
        
        /// <remarks/>
        drd,
        
        /// <remarks/>
        ds,
        
        /// <remarks/>
        dS,
        
        /// <remarks/>
        dT,
        
        /// <remarks/>
        dV,
        
        /// <remarks/>
        dW,
        
        /// <remarks/>
        dWb,
        
        /// <remarks/>
        dyne,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.cm2")]
        dynecm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.s/cm2")]
        dynescm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm")]
        dynecm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm2")]
        dynecm21,
        
        /// <remarks/>
        EA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ea[t]")]
        Eat,
        
        /// <remarks/>
        EC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ecal[th]")]
        Ecalth,
        
        /// <remarks/>
        EEuc,
        
        /// <remarks/>
        EeV,
        
        /// <remarks/>
        EF,
        
        /// <remarks/>
        Eg,
        
        /// <remarks/>
        Egauss,
        
        /// <remarks/>
        EGy,
        
        /// <remarks/>
        EH,
        
        /// <remarks/>
        EHz,
        
        /// <remarks/>
        EJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EJ/a")]
        EJa,
        
        /// <remarks/>
        Em,
        
        /// <remarks/>
        EN,
        
        /// <remarks/>
        Eohm,
        
        /// <remarks/>
        EP,
        
        /// <remarks/>
        EPa,
        
        /// <remarks/>
        Erd,
        
        /// <remarks/>
        erg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/a")]
        erga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm2")]
        ergcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm3")]
        ergcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/g")]
        ergg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/kg")]
        ergkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/m3")]
        ergm3,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        ET,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        eV,
        
        /// <remarks/>
        EW,
        
        /// <remarks/>
        EWb,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("F/m")]
        Fm,
        
        /// <remarks/>
        fa,
        
        /// <remarks/>
        fA,
        
        /// <remarks/>
        fathom,
        
        /// <remarks/>
        fC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fcal[th]")]
        fcalth,
        
        /// <remarks/>
        fEuc,
        
        /// <remarks/>
        feV,
        
        /// <remarks/>
        fF,
        
        /// <remarks/>
        fg,
        
        /// <remarks/>
        fgauss,
        
        /// <remarks/>
        fGy,
        
        /// <remarks/>
        fH,
        
        /// <remarks/>
        fHz,
        
        /// <remarks/>
        fJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[UK]")]
        flozUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[US]")]
        flozUS,
        
        /// <remarks/>
        fm,
        
        /// <remarks/>
        fN,
        
        /// <remarks/>
        fohm,
        
        /// <remarks/>
        footcandle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("footcandle.s")]
        footcandles,
        
        /// <remarks/>
        fP,
        
        /// <remarks/>
        fPa,
        
        /// <remarks/>
        frd,
        
        /// <remarks/>
        fS,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        fT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/bbl")]
        ftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/d")]
        ftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/degF")]
        ftdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft")]
        ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft3")]
        ftft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/gal[US]")]
        ftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/h")]
        fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/in")]
        ftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/lbm")]
        ftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/m")]
        ftm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/mi")]
        ftmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/min")]
        ftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ms")]
        ftms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/psi")]
        ftpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s")]
        fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s2")]
        fts2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/us")]
        ftus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnA]")]
        ftBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnB]")]
        ftBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br36]")]
        ftBr36,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br65]")]
        ftBr65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Cla]")]
        ftCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[GC]")]
        ftGC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind]")]
        ftInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind37]")]
        ftInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind62]")]
        ftInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind75]")]
        ftInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Se]")]
        ftSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[SeT]")]
        ftSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[US]")]
        ftUS,
        
        /// <remarks/>
        ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/in3")]
        ft2in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/lbm")]
        ft2lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(d.ft)")]
        ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(ft.psi.d)")]
        ft3ftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(min.ft2)")]
        ft3minft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(s.ft2)")]
        ft3sft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/bbl")]
        ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d")]
        ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d2")]
        ft3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft")]
        ft3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft2")]
        ft3ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft3")]
        ft3ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h")]
        ft3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h2")]
        ft3h2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/kg")]
        ft3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbm")]
        ft3lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbmol")]
        ft3lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min")]
        ft3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min2")]
        ft3min2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/rad")]
        ft3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s")]
        ft3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s2")]
        ft3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/sack[94lbm]")]
        ft3sack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fur[US]")]
        furUS,
        
        /// <remarks/>
        fV,
        
        /// <remarks/>
        fW,
        
        /// <remarks/>
        fWb,
        
        /// <remarks/>
        g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.ft/(cm3.s)")]
        gftcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.m/(cm3.s)")]
        gmcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm3")]
        gcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm4")]
        gcm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/dm3")]
        gdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[UK]")]
        ggalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[US]")]
        ggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/kg")]
        gkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/L")]
        gL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/m3")]
        gm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/mol")]
        gmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/s")]
        gs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/t")]
        gt,
        
        /// <remarks/>
        GA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ga[t]")]
        Gat,
        
        /// <remarks/>
        Gal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]")]
        galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft)")]
        galUKhft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft2)")]
        galUKhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in)")]
        galUKhin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in2)")]
        galUKhin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft)")]
        galUKminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft2)")]
        galUKminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/d")]
        galUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/ft3")]
        galUKft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h")]
        galUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h2")]
        galUKh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/lbm")]
        galUKlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/mi")]
        galUKmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min")]
        galUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min2")]
        galUKmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]")]
        galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft)")]
        galUShft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft2)")]
        galUShft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in)")]
        galUShin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in2)")]
        galUShin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft)")]
        galUSminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft2)")]
        galUSminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/bbl")]
        galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/d")]
        galUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft")]
        galUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft3")]
        galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h")]
        galUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h2")]
        galUSh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/lbm")]
        galUSlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/mi")]
        galUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min")]
        galUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min2")]
        galUSmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/sack[94lbm]")]
        galUSsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[UK]")]
        galUStonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[US]")]
        galUStonUS,
        
        /// <remarks/>
        gAPI,
        
        /// <remarks/>
        gauss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gauss/cm")]
        gausscm,
        
        /// <remarks/>
        GBq,
        
        /// <remarks/>
        GC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gcal[th]")]
        Gcalth,
        
        /// <remarks/>
        GEuc,
        
        /// <remarks/>
        GeV,
        
        /// <remarks/>
        gf,
        
        /// <remarks/>
        GF,
        
        /// <remarks/>
        Gg,
        
        /// <remarks/>
        Ggauss,
        
        /// <remarks/>
        GGy,
        
        /// <remarks/>
        GH,
        
        /// <remarks/>
        GHz,
        
        /// <remarks/>
        GJ,
        
        /// <remarks/>
        Gm,
        
        /// <remarks/>
        GN,
        
        /// <remarks/>
        gn,
        
        /// <remarks/>
        Gohm,
        
        /// <remarks/>
        gon,
        
        /// <remarks/>
        GP,
        
        /// <remarks/>
        GPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GPa/cm")]
        GPacm,
        
        /// <remarks/>
        GPa2,
        
        /// <remarks/>
        grain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/ft3")]
        grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/gal[US]")]
        graingalUS,
        
        /// <remarks/>
        Grd,
        
        /// <remarks/>
        GS,
        
        /// <remarks/>
        GT,
        
        /// <remarks/>
        GV,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GW.h")]
        GWh,
        
        /// <remarks/>
        GWb,
        
        /// <remarks/>
        Gy,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/ft3")]
        hft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/km")]
        hkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H/m")]
        Hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/m3")]
        hm3,
        
        /// <remarks/>
        ha,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ha.m")]
        ham,
        
        /// <remarks/>
        hbar,
        
        /// <remarks/>
        hg,
        
        /// <remarks/>
        hL,
        
        /// <remarks/>
        hm,
        
        /// <remarks/>
        hN,
        
        /// <remarks/>
        hp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h")]
        hph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/bbl")]
        hphbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/lbm")]
        hphlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/ft3")]
        hpft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/in2")]
        hpin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[elec]")]
        hpelec,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]")]
        hphyd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]/in2")]
        hphydin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric]")]
        hpmetric,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric].h")]
        hpmetrich,
        
        /// <remarks/>
        hs,
        
        /// <remarks/>
        Hz,
        
        /// <remarks/>
        @in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/(in.degF)")]
        inindegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/a")]
        ina,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/min")]
        inmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s")]
        ins,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s2")]
        ins2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in[US]")]
        inUS,
        
        /// <remarks/>
        in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/ft2")]
        in2ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/in2")]
        in2in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in3/ft")]
        in3ft,
        
        /// <remarks/>
        in4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[39degF]")]
        inH2O39degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[60degF]")]
        inH2O60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[32degF]")]
        inHg32degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[60degF]")]
        inHg60degF,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/(s.m2.K)")]
        Jmsm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/m2")]
        Jmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(g.K)")]
        JgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(kg.K)")]
        JkgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(mol.K)")]
        JmolK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(s.m2.degC)")]
        Jsm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/cm2")]
        Jcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/dm3")]
        Jdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/g")]
        Jg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/K")]
        JK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/kg")]
        Jkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m")]
        Jm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m2")]
        Jm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m3")]
        Jm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/mol")]
        Jmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/s")]
        Js,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K.m2/kW")]
        Km2kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K.m2/W")]
        Km2W,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/km")]
        Kkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/m")]
        Km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/Pa")]
        KPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/s")]
        Ks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/W")]
        KW,
        
        /// <remarks/>
        kA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ka[t]")]
        kat,
        
        /// <remarks/>
        kC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]")]
        kcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th].m/cm2")]
        kcalthmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m.degC)")]
        kcalthhmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m2.degC)")]
        kcalthhm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(kg.degC)")]
        kcalthkgdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/cm3")]
        kcalthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/g")]
        kcalthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/h")]
        kcalthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/kg")]
        kcalthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/m3")]
        kcalthm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/mol")]
        kcalthmol,
        
        /// <remarks/>
        kcd,
        
        /// <remarks/>
        kdyne,
        
        /// <remarks/>
        kEuc,
        
        /// <remarks/>
        keV,
        
        /// <remarks/>
        kF,
        
        /// <remarks/>
        kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/cm2")]
        kgmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/s")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(kW.h)")]
        kgkWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m.s)")]
        kgms1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m2.s)")]
        kgm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/d")]
        kgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm3")]
        kgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm4")]
        kgdm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/h")]
        kgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/J")]
        kgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/kg")]
        kgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/L")]
        kgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m")]
        kgm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m2")]
        kgm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3")]
        kgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m4")]
        kgm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/min")]
        kgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/MJ")]
        kgMJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/mol")]
        kgmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/s")]
        kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/sack[94lbm]")]
        kgsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/t")]
        kgt,
        
        /// <remarks/>
        kgauss,
        
        /// <remarks/>
        kgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m")]
        kgfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/cm2")]
        kgfmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/m")]
        kgfmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.s/m2")]
        kgfsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm")]
        kgfcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm2")]
        kgfcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/kgf")]
        kgfkgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/m2")]
        kgfm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/mm2")]
        kgfmm2,
        
        /// <remarks/>
        kGy,
        
        /// <remarks/>
        kH,
        
        /// <remarks/>
        kHz,
        
        /// <remarks/>
        Kibyte,
        
        /// <remarks/>
        kJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ.m/(h.m2.K)")]
        kJmhm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(h.m2.K)")]
        kJhm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kg.K)")]
        kJkgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kmol.K)")]
        kJkmolK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/dm3")]
        kJdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kg")]
        kJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kmol")]
        kJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/m3")]
        kJm3,
        
        /// <remarks/>
        klbf,
        
        /// <remarks/>
        klbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("klbm/in")]
        klbmin,
        
        /// <remarks/>
        klx,
        
        /// <remarks/>
        km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/cm")]
        kmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/dm3")]
        kmdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/h")]
        kmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/L")]
        kmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/s")]
        kms,
        
        /// <remarks/>
        km2,
        
        /// <remarks/>
        km3,
        
        /// <remarks/>
        kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/h")]
        kmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/m3")]
        kmolm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/s")]
        kmols,
        
        /// <remarks/>
        kN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m2")]
        kNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m")]
        kNm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m2")]
        kNm21,
        
        /// <remarks/>
        knot,
        
        /// <remarks/>
        kohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kohm.m")]
        kohmm,
        
        /// <remarks/>
        kP,
        
        /// <remarks/>
        kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa.s/m")]
        kPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/h")]
        kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/hm")]
        kPahm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/m")]
        kPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/min")]
        kPamin,
        
        /// <remarks/>
        kPa2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa2/cP")]
        kPa2cP,
        
        /// <remarks/>
        kpsi,
        
        /// <remarks/>
        kpsi2,
        
        /// <remarks/>
        krad,
        
        /// <remarks/>
        krd,
        
        /// <remarks/>
        kS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kS/m")]
        kSm,
        
        /// <remarks/>
        kT,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h")]
        kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/(kg.degC)")]
        kWhkgdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/dm3")]
        kWhdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/kg")]
        kWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/m3")]
        kWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m2.K)")]
        kWm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m3.K)")]
        kWm3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/cm2")]
        kWcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m2")]
        kWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m3")]
        kWm3,
        
        /// <remarks/>
        kWb,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/(bar.min)")]
        Lbarmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/h")]
        Lh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kg")]
        Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kmol")]
        Lkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m")]
        Lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m3")]
        Lm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/min")]
        Lmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/mol")]
        Lmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s")]
        Ls,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s2")]
        Ls2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/t")]
        Lt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/ton[UK]")]
        LtonUK,
        
        /// <remarks/>
        lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/bbl")]
        lbfftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/gal[US]")]
        lbfftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in")]
        lbfftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in2")]
        lbfftin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/lbm")]
        lbfftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/min")]
        lbfftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/s")]
        lbffts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in/in")]
        lbfinin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in2")]
        lbfin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/ft2")]
        lbfsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/in2")]
        lbfsin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft")]
        lbfft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft2")]
        lbfft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft3")]
        lbfft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/gal[US]")]
        lbfgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/in")]
        lbfin1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/lbf")]
        lbflbf,
        
        /// <remarks/>
        lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft")]
        lbmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft/s")]
        lbmfts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2")]
        lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2/s2")]
        lbmft2s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.h)")]
        lbmfth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.s)")]
        lbmfts1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.h)")]
        lbmft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.s)")]
        lbmft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[UK].ft)")]
        lbmgalUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[US].ft)")]
        lbmgalUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(hp.h)")]
        lbmhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/bbl")]
        lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/d")]
        lbmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft")]
        lbmft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft2")]
        lbmft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft3")]
        lbmft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft4")]
        lbmft4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[UK]")]
        lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[US]")]
        lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/h")]
        lbmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/in3")]
        lbmin3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/lbmol")]
        lbmlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/min")]
        lbmmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/s")]
        lbms,
        
        /// <remarks/>
        lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(h.ft2)")]
        lbmolhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(s.ft2)")]
        lbmolsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/ft3")]
        lbmolft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[UK]")]
        lbmolgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[US]")]
        lbmolgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/h")]
        lbmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/s")]
        lbmols,
        
        /// <remarks/>
        link,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnA]")]
        linkBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnB]")]
        linkBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Cla]")]
        linkCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Se]")]
        linkSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[SeT]")]
        linkSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[US]")]
        linkUS,
        
        /// <remarks/>
        lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm.s")]
        lms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/m2")]
        lmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/W")]
        lmW,
        
        /// <remarks/>
        lx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lx.s")]
        lxs,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/(m.K)")]
        mmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/cm")]
        mcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/d")]
        md,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/h")]
        mh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/K")]
        mK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kg")]
        mkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/km")]
        mkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kPa")]
        mkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m")]
        mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m3")]
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/min")]
        mmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/ms")]
        mms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/Pa")]
        mPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s")]
        ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s2")]
        ms2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m[Ger]")]
        mGer,
        
        /// <remarks/>
        m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(kPa.d)")]
        m2kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(Pa.s)")]
        m2Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/cm3")]
        m2cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/d")]
        m2d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/g")]
        m2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/kg")]
        m2kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m2")]
        m2m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m3")]
        m2m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/mol")]
        m2mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.d)")]
        m3bard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.h)")]
        m3barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.min)")]
        m3barmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(d.m)")]
        m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(h.m)")]
        m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(ha.m)")]
        m3ham,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.d)")]
        m3kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.h)")]
        m3kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kW.h)")]
        m3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(m3.K)")]
        m3m3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(Pa.s)")]
        m3Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(psi.d)")]
        m3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.ft)")]
        m3sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m)")]
        m3sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m2)")]
        m3sm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m3)")]
        m3sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/bbl")]
        m3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d")]
        m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d2")]
        m3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/g")]
        m3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/h")]
        m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/J")]
        m3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kg")]
        m3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/km")]
        m3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kmol")]
        m3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kPa")]
        m3kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m")]
        m3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m2")]
        m3m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m3")]
        m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/min")]
        m3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/mol")]
        m3mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/Pa")]
        m3Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rad")]
        m3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rev")]
        m3rev,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s")]
        m3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s2")]
        m3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/t")]
        m3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[UK]")]
        m3tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[US]")]
        m3tonUS,
        
        /// <remarks/>
        m4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m4/s")]
        m4s,
        
        /// <remarks/>
        mA,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/cm2")]
        mAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/ft2")]
        mAft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ma[t]")]
        Mat,
        
        /// <remarks/>
        mbar,
        
        /// <remarks/>
        MBq,
        
        /// <remarks/>
        mC,
        
        /// <remarks/>
        MC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mC/m2")]
        mCm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mcal[th]")]
        mcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mcal[th]")]
        Mcalth,
        
        /// <remarks/>
        mCi,
        
        /// <remarks/>
        mD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft")]
        mDft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft2/(lbf.s)")]
        mDft2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.in2/(lbf.s)")]
        mDin2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.m")]
        mDm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/(Pa.s)")]
        mDPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/cP")]
        mDcP,
        
        /// <remarks/>
        MEuc,
        
        /// <remarks/>
        mEuc,
        
        /// <remarks/>
        meV,
        
        /// <remarks/>
        MeV,
        
        /// <remarks/>
        MF,
        
        /// <remarks/>
        mF,
        
        /// <remarks/>
        mg,
        
        /// <remarks/>
        Mg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/a")]
        Mga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/d")]
        Mgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/dm3")]
        mgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/g")]
        mgg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/gal[US]")]
        mggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/h")]
        Mgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/in")]
        Mgin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/J")]
        mgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/kg")]
        mgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/L")]
        mgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m2")]
        Mgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/m3")]
        mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m3")]
        Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/min")]
        Mgmin,
        
        /// <remarks/>
        mGal,
        
        /// <remarks/>
        mgauss,
        
        /// <remarks/>
        Mgauss,
        
        /// <remarks/>
        Mgf,
        
        /// <remarks/>
        mgn,
        
        /// <remarks/>
        MGy,
        
        /// <remarks/>
        mGy,
        
        /// <remarks/>
        mH,
        
        /// <remarks/>
        MH,
        
        /// <remarks/>
        mHz,
        
        /// <remarks/>
        MHz,
        
        /// <remarks/>
        mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[UK]")]
        migalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[US]")]
        migalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/h")]
        mih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/in")]
        miin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[naut]")]
        minaut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[nautUK]")]
        minautUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]")]
        miUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]2")]
        miUS2,
        
        /// <remarks/>
        mi2,
        
        /// <remarks/>
        mi3,
        
        /// <remarks/>
        Mibyte,
        
        /// <remarks/>
        mil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mil/a")]
        mila,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mila")]
        mila1,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/ft")]
        minft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/m")]
        minm,
        
        /// <remarks/>
        mina,
        
        /// <remarks/>
        mJ,
        
        /// <remarks/>
        MJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/a")]
        MJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/cm2")]
        mJcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kg")]
        MJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kmol")]
        MJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m")]
        MJm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/m2")]
        mJm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m3")]
        MJm3,
        
        /// <remarks/>
        mL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[UK]")]
        mLgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[US]")]
        mLgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/mL")]
        mLmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm")]
        mm1,
        
        /// <remarks/>
        Mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/(mm.K)")]
        mmmmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/a")]
        mma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/s")]
        mms1,
        
        /// <remarks/>
        mm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/mm2")]
        mm2mm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3")]
        mm31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3/J")]
        mm3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mmHg[0degC]")]
        mmHg0degC,
        
        /// <remarks/>
        mmol,
        
        /// <remarks/>
        MN,
        
        /// <remarks/>
        mN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN.m2")]
        mNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/km")]
        mNkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/m")]
        mNm,
        
        /// <remarks/>
        Mohm,
        
        /// <remarks/>
        mohm,
        
        /// <remarks/>
        mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol.m2/(mol.s)")]
        molm2mols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/(s.m2)")]
        molsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m2")]
        molm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m3")]
        molm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/mol")]
        molmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/s")]
        mols,
        
        /// <remarks/>
        MP,
        
        /// <remarks/>
        mP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa")]
        mPa1,
        
        /// <remarks/>
        MPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa.s")]
        mPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa.s/m")]
        MPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/h")]
        MPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/m")]
        MPam,
        
        /// <remarks/>
        Mpsi,
        
        /// <remarks/>
        Mrad,
        
        /// <remarks/>
        mrad,
        
        /// <remarks/>
        mrd,
        
        /// <remarks/>
        Mrd,
        
        /// <remarks/>
        mrem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mrem/h")]
        mremh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms")]
        ms1,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        mS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/cm")]
        mScm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/cm")]
        mscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/ft")]
        msft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/in")]
        msin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/m")]
        mSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/m")]
        msm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/s")]
        mss,
        
        /// <remarks/>
        mSv,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mSv/h")]
        mSvh,
        
        /// <remarks/>
        mT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mT/dm")]
        mTdm,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/ft")]
        mVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/m")]
        mVm,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h")]
        MWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/kg")]
        MWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/m3")]
        MWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mW/m2")]
        mWm2,
        
        /// <remarks/>
        MWb,
        
        /// <remarks/>
        mWb,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m/m")]
        Nmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.s/m2")]
        Nsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m2")]
        Nm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m3")]
        Nm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/mm2")]
        Nmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/N")]
        NN,
        
        /// <remarks/>
        na,
        
        /// <remarks/>
        nA,
        
        /// <remarks/>
        nAPI,
        
        /// <remarks/>
        nC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ncal[th]")]
        ncalth,
        
        /// <remarks/>
        nCi,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        neV,
        
        /// <remarks/>
        nF,
        
        /// <remarks/>
        ng,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/g")]
        ngg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/mg")]
        ngmg,
        
        /// <remarks/>
        ngauss,
        
        /// <remarks/>
        nGy,
        
        /// <remarks/>
        nH,
        
        /// <remarks/>
        nHz,
        
        /// <remarks/>
        nJ,
        
        /// <remarks/>
        nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nm/s")]
        nms,
        
        /// <remarks/>
        nN,
        
        /// <remarks/>
        nohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mil2/ft")]
        nohmmil2ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mm2/m")]
        nohmmm2m,
        
        /// <remarks/>
        nP,
        
        /// <remarks/>
        nPa,
        
        /// <remarks/>
        nrd,
        
        /// <remarks/>
        ns,
        
        /// <remarks/>
        nS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/ft")]
        nsft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/m")]
        nsm,
        
        /// <remarks/>
        nT,
        
        /// <remarks/>
        nV,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        nWb,
        
        /// <remarks/>
        O,
        
        /// <remarks/>
        Oe,
        
        /// <remarks/>
        ohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.cm")]
        ohmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m2/m")]
        ohmm2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm/m")]
        ohmm1,
        
        /// <remarks/>
        ozf,
        
        /// <remarks/>
        ozm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ozm[troy]")]
        ozmtroy,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        Pa,
        
        /// <remarks/>
        pA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s.m3/kg")]
        Pasm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s/m3")]
        Pasm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s2/m3")]
        Pas2m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/h")]
        Pah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m")]
        Pam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m3")]
        Pam3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/s")]
        Pas1,
        
        /// <remarks/>
        Pa2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa2/(Pa.s)")]
        Pa2Pas,
        
        /// <remarks/>
        pC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcal[th]")]
        pcalth,
        
        /// <remarks/>
        pCi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pCi/g")]
        pCig,
        
        /// <remarks/>
        pdl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.cm2")]
        pdlcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.ft")]
        pdlft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl/cm")]
        pdlcm,
        
        /// <remarks/>
        pEuc,
        
        /// <remarks/>
        peV,
        
        /// <remarks/>
        pF,
        
        /// <remarks/>
        pg,
        
        /// <remarks/>
        pgauss,
        
        /// <remarks/>
        pGy,
        
        /// <remarks/>
        pHz,
        
        /// <remarks/>
        pJ,
        
        /// <remarks/>
        pm,
        
        /// <remarks/>
        pN,
        
        /// <remarks/>
        pohm,
        
        /// <remarks/>
        pP,
        
        /// <remarks/>
        pPa,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[mass]")]
        ppmmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]")]
        ppmvol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/degC")]
        ppmvoldegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/degF")]
        ppmvoldegF,
        
        /// <remarks/>
        prd,
        
        /// <remarks/>
        pS,
        
        /// <remarks/>
        ps,
        
        /// <remarks/>
        psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.d/bbl")]
        psidbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.s")]
        psis,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/ft")]
        psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/h")]
        psih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/m")]
        psim,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/min")]
        psimin,
        
        /// <remarks/>
        psi2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2.d/(cP.ft3)")]
        psi2dcPft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2/cP")]
        psi2cP,
        
        /// <remarks/>
        pT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]")]
        ptUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]/(hp.h)")]
        ptUKhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[US]")]
        ptUS,
        
        /// <remarks/>
        pV,
        
        /// <remarks/>
        pW,
        
        /// <remarks/>
        pWb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[UK]")]
        qtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[US]")]
        qtUS,
        
        /// <remarks/>
        quad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quad/a")]
        quada,
        
        /// <remarks/>
        rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft")]
        radft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft3")]
        radft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m")]
        radm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m3")]
        radm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s")]
        rads,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s2")]
        rads2,
        
        /// <remarks/>
        rd,
        
        /// <remarks/>
        rem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rem/h")]
        remh,
        
        /// <remarks/>
        rev,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/ft")]
        revft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/m")]
        revm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/s")]
        revs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rod[US]")]
        rodUS,
        
        /// <remarks/>
        rpm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rpm/s")]
        rpms,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/cm")]
        scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft")]
        sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft3")]
        sft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/in")]
        sin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/kg")]
        skg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/L")]
        sL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m")]
        sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S/m")]
        Sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m3")]
        sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[UK]")]
        sqtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[US]")]
        sqtUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/s")]
        ss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sack[94lbm]")]
        sack94lbm,
        
        /// <remarks/>
        seca,
        
        /// <remarks/>
        section,
        
        /// <remarks/>
        sr,
        
        /// <remarks/>
        St,
        
        /// <remarks/>
        Sv,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/h")]
        Svh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/s")]
        Svs,
        
        /// <remarks/>
        t,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/a")]
        ta,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/d")]
        td,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/h")]
        th,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T/m")]
        Tm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/m3")]
        tm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/min")]
        tmin,
        
        /// <remarks/>
        TA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ta[t]")]
        Tat,
        
        /// <remarks/>
        TBq,
        
        /// <remarks/>
        TC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tcal[th]")]
        Tcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]")]
        TDAPI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API].m")]
        TDAPIm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]/(Pa.s)")]
        TDAPIPas,
        
        /// <remarks/>
        TEuc,
        
        /// <remarks/>
        TeV,
        
        /// <remarks/>
        TF,
        
        /// <remarks/>
        Tg,
        
        /// <remarks/>
        Tgauss,
        
        /// <remarks/>
        TGy,
        
        /// <remarks/>
        TH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[EC]")]
        thermEC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[UK]")]
        thermUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[US]")]
        thermUS,
        
        /// <remarks/>
        THz,
        
        /// <remarks/>
        TJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TJ/a")]
        TJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tm")]
        Tm1,
        
        /// <remarks/>
        TN,
        
        /// <remarks/>
        Tohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]")]
        tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/a")]
        tonUKa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/d")]
        tonUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/h")]
        tonUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/min")]
        tonUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]")]
        tonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/a")]
        tonUSa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/d")]
        tonUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/ft2")]
        tonUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/h")]
        tonUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/min")]
        tonUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]")]
        tonfUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK].ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft")]
        tonfUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft2")]
        tonfUKft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]")]
        tonfUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft")]
        tonfUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft2")]
        tonfUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi")]
        tonfUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/bbl")]
        tonfUSmibbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/ft")]
        tonfUSmift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft")]
        tonfUSft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft2")]
        tonfUSft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/in2")]
        tonfUSin2,
        
        /// <remarks/>
        tonRefrig,
        
        /// <remarks/>
        torr,
        
        /// <remarks/>
        TP,
        
        /// <remarks/>
        TPa,
        
        /// <remarks/>
        Trd,
        
        /// <remarks/>
        TS,
        
        /// <remarks/>
        TT,
        
        /// <remarks/>
        TV,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TW.h")]
        TWh,
        
        /// <remarks/>
        TWb,
        
        /// <remarks/>
        uA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/cm2")]
        uAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/in2")]
        uAin2,
        
        /// <remarks/>
        ubar,
        
        /// <remarks/>
        uC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]")]
        ucalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/(s.cm2)")]
        ucalthscm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/s")]
        ucalths,
        
        /// <remarks/>
        uCi,
        
        /// <remarks/>
        uEuc,
        
        /// <remarks/>
        ueV,
        
        /// <remarks/>
        uF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uF/m")]
        uFm,
        
        /// <remarks/>
        ug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/cm3")]
        ugcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/g")]
        ugg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/mg")]
        ugmg,
        
        /// <remarks/>
        ugauss,
        
        /// <remarks/>
        uGy,
        
        /// <remarks/>
        uH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uH/m")]
        uHm,
        
        /// <remarks/>
        uHz,
        
        /// <remarks/>
        uJ,
        
        /// <remarks/>
        um,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um/s")]
        ums,
        
        /// <remarks/>
        um2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um2.m")]
        um2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("umHg[0degC]")]
        umHg0degC,
        
        /// <remarks/>
        umol,
        
        /// <remarks/>
        uN,
        
        /// <remarks/>
        uohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/ft")]
        uohmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/m")]
        uohmm,
        
        /// <remarks/>
        uP,
        
        /// <remarks/>
        uPa,
        
        /// <remarks/>
        upsi,
        
        /// <remarks/>
        urad,
        
        /// <remarks/>
        urd,
        
        /// <remarks/>
        us,
        
        /// <remarks/>
        uS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/ft")]
        usft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/in")]
        usin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/m")]
        usm,
        
        /// <remarks/>
        uT,
        
        /// <remarks/>
        uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/ft")]
        uVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/m")]
        uVm,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uW/m3")]
        uWm3,
        
        /// <remarks/>
        uWb,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/B")]
        VB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/dB")]
        VdB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/m")]
        Vm,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W.m2.K/(J.K)")]
        Wm2KJK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.K)")]
        WmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.K)")]
        Wm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.sr)")]
        Wm2sr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m3.K)")]
        Wm3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/cm2")]
        Wcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/K")]
        WK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/kW")]
        WkW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m2")]
        Wm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m3")]
        Wm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/mm2")]
        Wmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/sr")]
        Wsr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/W")]
        WW,
        
        /// <remarks/>
        Wb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb.m")]
        Wbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/m")]
        Wbm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/mm")]
        Wbmm,
        
        /// <remarks/>
        wk,
        
        /// <remarks/>
        yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnA]")]
        ydBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnB]")]
        ydBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Cla]")]
        ydCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind]")]
        ydInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind37]")]
        ydInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind62]")]
        ydInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind75]")]
        ydInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Se]")]
        ydSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[SeT]")]
        ydSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[US]")]
        ydUS,
        
        /// <remarks/>
        yd2,
        
        /// <remarks/>
        yd3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum GeochronologicalRank {
        
        /// <remarks/>
        eon,
        
        /// <remarks/>
        era,
        
        /// <remarks/>
        period,
        
        /// <remarks/>
        epoch,
        
        /// <remarks/>
        age,
        
        /// <remarks/>
        chron,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LithologyKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkali feldspar rhyolite")]
        alkalifeldsparrhyolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("alkali olivine basalt")]
        alkaliolivinebasalt,
        
        /// <remarks/>
        amphibolite,
        
        /// <remarks/>
        andesite,
        
        /// <remarks/>
        anhydrite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("anorthositic rock")]
        anorthositicrock,
        
        /// <remarks/>
        anthracite,
        
        /// <remarks/>
        aplite,
        
        /// <remarks/>
        arenite,
        
        /// <remarks/>
        argillaceous,
        
        /// <remarks/>
        arkose,
        
        /// <remarks/>
        basalt,
        
        /// <remarks/>
        basanite,
        
        /// <remarks/>
        bauxite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bituminous coal")]
        bituminouscoal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("blueschist metamorphic rock")]
        blueschistmetamorphicrock,
        
        /// <remarks/>
        boninite,
        
        /// <remarks/>
        breccia,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbonate ooze")]
        carbonateooze,
        
        /// <remarks/>
        carbonatite,
        
        /// <remarks/>
        chalk,
        
        /// <remarks/>
        chert,
        
        /// <remarks/>
        clay,
        
        /// <remarks/>
        claystone,
        
        /// <remarks/>
        coal,
        
        /// <remarks/>
        conglomerate,
        
        /// <remarks/>
        dacite,
        
        /// <remarks/>
        diabase,
        
        /// <remarks/>
        diamictite,
        
        /// <remarks/>
        diorite,
        
        /// <remarks/>
        dioritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("doleritic rock")]
        doleriticrock,
        
        /// <remarks/>
        dolomite,
        
        /// <remarks/>
        dolomitic,
        
        /// <remarks/>
        eclogite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exotic alkaline rock")]
        exoticalkalinerock,
        
        /// <remarks/>
        feldspar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("feldspathic arenite")]
        feldspathicarenite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fine grained igneous rock")]
        finegrainedigneousrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid dioritoid")]
        foiddioritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid gabbroid")]
        foidgabbroid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foid syenitoid")]
        foidsyenitoid,
        
        /// <remarks/>
        foidite,
        
        /// <remarks/>
        foiditoid,
        
        /// <remarks/>
        foidolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("foliated metamorphic rock")]
        foliatedmetamorphicrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fragmental igneous rock")]
        fragmentaligneousrock,
        
        /// <remarks/>
        gabbro,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gabbroic rock")]
        gabbroicrock,
        
        /// <remarks/>
        gabbroid,
        
        /// <remarks/>
        glauconite,
        
        /// <remarks/>
        gneiss,
        
        /// <remarks/>
        granite,
        
        /// <remarks/>
        granodiorite,
        
        /// <remarks/>
        granofels,
        
        /// <remarks/>
        granulite,
        
        /// <remarks/>
        gravel,
        
        /// <remarks/>
        greenstone,
        
        /// <remarks/>
        gumbo,
        
        /// <remarks/>
        gypsum,
        
        /// <remarks/>
        halite,
        
        /// <remarks/>
        hornfels,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("igneous rock")]
        igneousrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impact generated material")]
        impactgeneratedmaterial,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impure dolomite")]
        impuredolomite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("impure limestone")]
        impurelimestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("intrusive rock (plutonic)")]
        intrusiverockplutonic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("iron rich sedimentary rock")]
        ironrichsedimentaryrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kalsilitic and melilitic rocks")]
        kalsiliticandmeliliticrocks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("komatiitic rock")]
        komatiiticrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("latitic rock")]
        latiticrock,
        
        /// <remarks/>
        lignite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime boundstone")]
        limeboundstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime framestone")]
        limeframestone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime grainstone")]
        limegrainstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime mudstone")]
        limemudstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime packstone")]
        limepackstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime wackestone")]
        limewackestone,
        
        /// <remarks/>
        limestone,
        
        /// <remarks/>
        marble,
        
        /// <remarks/>
        marl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("metamorphic rock")]
        metamorphicrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mica schist")]
        micaschist,
        
        /// <remarks/>
        migmatite,
        
        /// <remarks/>
        monzogabbro,
        
        /// <remarks/>
        mud,
        
        /// <remarks/>
        mudstone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mylonitic rock")]
        myloniticrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("no description")]
        nodescription,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("no sample")]
        nosample,
        
        /// <remarks/>
        ooze,
        
        /// <remarks/>
        ophiolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("organic bearing mudstone")]
        organicbearingmudstone,
        
        /// <remarks/>
        peat,
        
        /// <remarks/>
        pegmatite,
        
        /// <remarks/>
        peridotite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phaneritic igneous rock")]
        phaneriticigneousrock,
        
        /// <remarks/>
        phonolite,
        
        /// <remarks/>
        phonolitoid,
        
        /// <remarks/>
        phosphate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phosphate rock")]
        phosphaterock,
        
        /// <remarks/>
        phyllite,
        
        /// <remarks/>
        porphyry,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potassium and magnesium salts")]
        potassiumandmagnesiumsalts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pyroclastic breccia")]
        pyroclasticbreccia,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pyroclastic rock")]
        pyroclasticrock,
        
        /// <remarks/>
        pyroxenite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quartz arenite")]
        quartzarenite,
        
        /// <remarks/>
        quartzite,
        
        /// <remarks/>
        rhyolite,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rock salt")]
        rocksalt,
        
        /// <remarks/>
        sand,
        
        /// <remarks/>
        sandstone,
        
        /// <remarks/>
        sandy,
        
        /// <remarks/>
        sapropel,
        
        /// <remarks/>
        schist,
        
        /// <remarks/>
        serpentinite,
        
        /// <remarks/>
        shale,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("siliceous ooze")]
        siliceousooze,
        
        /// <remarks/>
        silt,
        
        /// <remarks/>
        siltstone,
        
        /// <remarks/>
        skarn,
        
        /// <remarks/>
        slate,
        
        /// <remarks/>
        spilite,
        
        /// <remarks/>
        syenite,
        
        /// <remarks/>
        syenitoid,
        
        /// <remarks/>
        sylvite,
        
        /// <remarks/>
        tephrite,
        
        /// <remarks/>
        tephritoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tholeiitic basalt")]
        tholeiiticbasalt,
        
        /// <remarks/>
        tonalite,
        
        /// <remarks/>
        trachyte,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("trachytic rock")]
        trachyticrock,
        
        /// <remarks/>
        trachytoid,
        
        /// <remarks/>
        travertine,
        
        /// <remarks/>
        tuff,
        
        /// <remarks/>
        tuffite,
        
        /// <remarks/>
        ultrabasic,
        
        /// <remarks/>
        undifferentiated,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        wacke,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarkerSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreCompletion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCompletion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorTermSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SurveyProgram))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimJobStage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimPerforationCluster))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Risk))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Rig))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RigUtilization))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CuttingsGeologyInterval))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CuttingsGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterpretedGeologyInterval))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(InterpretedGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ShowEvaluationInterval))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ShowEvaluation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreGeology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DepthRegImage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellCMLedger))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OpsReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Trajectory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ToolErrorModel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeComponent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJob))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobEvaluation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Log))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Channel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChannelSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BhaRun))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidsReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DrillReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Tubular))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Attachment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Wellbore))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Well))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GraphicalInformationSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataAssuranceRecord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ActivityTemplate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Activity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKindDictionary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EpcExternalPartReference))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDataObject", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    public abstract partial class AbstractObject {
        
        private ObjectAlias[] aliasesField;
        
        private Citation citationField;
        
        private CustomData customDataField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string objectVersionField;
        
        private string schemaVersionField;
        
        private string uuidField;
        
        private ExistenceKind existenceKindField;
        
        private bool existenceKindFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Aliases")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Aliases", DataType="ObjectAlias")]
        public ObjectAlias[] Aliases {
            get {
                return this.aliasesField;
            }
            set {
                this.aliasesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Citation", DataType="Citation")]
        public Citation Citation {
            get {
                return this.citationField;
            }
            set {
                this.citationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomData", DataType="CustomData")]
        public CustomData CustomData {
            get {
                return this.customDataField;
            }
            set {
                this.customDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("objectVersion", DataType="String64")]
        public string objectVersion {
            get {
                return this.objectVersionField;
            }
            set {
                this.objectVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("schemaVersion", DataType="String64")]
        public string schemaVersion {
            get {
                return this.schemaVersionField;
            }
            set {
                this.schemaVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="UuidString")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A lifecycle state like actual, required, planned, predicted, etc. This is used to qualify any top-level element (from Epicentre 2.1).</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DescriptionAttribute("A lifecycle state like actual, required, planned, predicted, etc. This is used to" +
            " qualify any top-level element (from Epicentre 2.1).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("existenceKind", DataType="ExistenceKind")]
        public ExistenceKind existenceKind {
            get {
                return this.existenceKindField;
            }
            set {
                this.existenceKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool existenceKindSpecified {
            get {
                return this.existenceKindFieldSpecified;
            }
            set {
                this.existenceKindFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ObjectAlias {
        
        private string identifierField;
        
        private string descriptionField;
        
        private string authorityField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Identifier", DataType="String64")]
        public string Identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="String64")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class GravelPackInterval {
        
        private string downholeStringReferenceIdField;
        
        private MdInterval gravelPackMdIntervalField;
        
        private TvdInterval gravelPackTvdIntervalField;
        
        private EventInfo eventHistoryField;
        
        private string[] geologyFeatureReferenceIdField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private IntervalStatusHistory[] statusHistoryField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Reference to the downhole string that denotes the interval of the gravel pack.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the downhole string that denotes the interval of the gravel pack.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DownholeStringReferenceId", DataType="String64")]
        public string DownholeStringReferenceId {
            get {
                return this.downholeStringReferenceIdField;
            }
            set {
                this.downholeStringReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gravel packed measured depth interval for this completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Gravel packed measured depth interval for this completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravelPackMdInterval", DataType="MdInterval")]
        public MdInterval GravelPackMdInterval {
            get {
                return this.gravelPackMdIntervalField;
            }
            set {
                this.gravelPackMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gravel packed true vertical depth interval for this completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Gravel packed true vertical depth interval for this completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravelPackTvdInterval", DataType="TvdInterval")]
        public TvdInterval GravelPackTvdInterval {
            get {
                return this.gravelPackTvdIntervalField;
            }
            set {
                this.gravelPackTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The contactInterval event information.</summary>
        [System.ComponentModel.DescriptionAttribute("The contactInterval event information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventHistory", DataType="EventInfo")]
        public EventInfo EventHistory {
            get {
                return this.eventHistoryField;
            }
            set {
                this.eventHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a geology feature.</summary>
        [System.Xml.Serialization.XmlElementAttribute("GeologyFeatureReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to a geology feature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologyFeatureReferenceId", DataType="String64")]
        public string[] GeologyFeatureReferenceId {
            get {
                return this.geologyFeatureReferenceIdField;
            }
            set {
                this.geologyFeatureReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StatusHistory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusHistory", DataType="IntervalStatusHistory")]
        public IntervalStatusHistory[] StatusHistory {
            get {
                return this.statusHistoryField;
            }
            set {
                this.statusHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of GravelPackInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of GravelPackInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MdInterval {
        
        private LengthMeasure mdTopField;
        
        private LengthMeasure mdBaseField;
        
        private string datumField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdTop", DataType="LengthMeasure")]
        public LengthMeasure MdTop {
            get {
                return this.mdTopField;
            }
            set {
                this.mdTopField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBase", DataType="LengthMeasure")]
        public LengthMeasure MdBase {
            get {
                return this.mdBaseField;
            }
            set {
                this.mdBaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("datum", DataType="String64")]
        public string datum {
            get {
                return this.datumField;
            }
            set {
                this.datumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthMeasure {
        
        private LengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft")]
        Item01ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft[US]")]
        Item01ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 in")]
        Item01in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 yd")]
        Item01yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/16 in")]
        Item116in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ft")]
        Item12ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/32 in")]
        Item132in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/64 in")]
        Item164in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 ft")]
        Item10ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 in")]
        Item10in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 km")]
        Item10km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ft")]
        Item100ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 km")]
        Item100km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft")]
        Item1000ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 ft")]
        Item30ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 m")]
        Item30m,
        
        /// <remarks/>
        angstrom,
        
        /// <remarks/>
        chain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnA]")]
        chainBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnB]")]
        chainBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Cla]")]
        chainCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Ind37]")]
        chainInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Se]")]
        chainSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[SeT]")]
        chainSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[US]")]
        chainUS,
        
        /// <remarks/>
        cm,
        
        /// <remarks/>
        dam,
        
        /// <remarks/>
        dm,
        
        /// <remarks/>
        Em,
        
        /// <remarks/>
        fathom,
        
        /// <remarks/>
        fm,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnA]")]
        ftBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnB]")]
        ftBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br36]")]
        ftBr36,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br65]")]
        ftBr65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Cla]")]
        ftCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[GC]")]
        ftGC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind]")]
        ftInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind37]")]
        ftInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind62]")]
        ftInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind75]")]
        ftInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Se]")]
        ftSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[SeT]")]
        ftSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[US]")]
        ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fur[US]")]
        furUS,
        
        /// <remarks/>
        Gm,
        
        /// <remarks/>
        hm,
        
        /// <remarks/>
        @in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in[US]")]
        inUS,
        
        /// <remarks/>
        km,
        
        /// <remarks/>
        link,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnA]")]
        linkBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnB]")]
        linkBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Cla]")]
        linkCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Se]")]
        linkSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[SeT]")]
        linkSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[US]")]
        linkUS,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m[Ger]")]
        mGer,
        
        /// <remarks/>
        mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[naut]")]
        minaut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[nautUK]")]
        minautUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]")]
        miUS,
        
        /// <remarks/>
        mil,
        
        /// <remarks/>
        mm,
        
        /// <remarks/>
        Mm,
        
        /// <remarks/>
        nm,
        
        /// <remarks/>
        pm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rod[US]")]
        rodUS,
        
        /// <remarks/>
        Tm,
        
        /// <remarks/>
        um,
        
        /// <remarks/>
        yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnA]")]
        ydBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnB]")]
        ydBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Cla]")]
        ydCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind]")]
        ydInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind37]")]
        ydInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind62]")]
        ydInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind75]")]
        ydInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Se]")]
        ydSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[SeT]")]
        ydSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[US]")]
        ydUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TvdInterval {
        
        private LengthMeasure tvdTopField;
        
        private LengthMeasure tvdBaseField;
        
        private string datumField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdTop", DataType="LengthMeasure")]
        public LengthMeasure TvdTop {
            get {
                return this.tvdTopField;
            }
            set {
                this.tvdTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth at the base of the interval</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("True vertical depth at the base of the interval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdBase", DataType="LengthMeasure")]
        public LengthMeasure TvdBase {
            get {
                return this.tvdBaseField;
            }
            set {
                this.tvdBaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("datum", DataType="String64")]
        public string datum {
            get {
                return this.datumField;
            }
            set {
                this.datumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class EventInfo {
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private EventRefInfo beginEventField;
        
        private EventRefInfo endEventField;
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BeginEvent", DataType="EventRefInfo")]
        public EventRefInfo BeginEvent {
            get {
                return this.beginEventField;
            }
            set {
                this.beginEventField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndEvent", DataType="EventRefInfo")]
        public EventRefInfo EndEvent {
            get {
                return this.endEventField;
            }
            set {
                this.endEventField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ExtensionNameValue {
        
        private string nameField;
        
        private StringMeasure valueField;
        
        private MeasureClass measureClassField;
        
        private bool measureClassFieldSpecified;
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private int indexField;
        
        private bool indexFieldSpecified;
        
        private string descriptionField;
        
        /// <remarks/>
        /// <summary>The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  respective SIG Technical Team before use.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  respective SIG Technical Team before use.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value of the extension. This may also include a uom attribute. The content sh" +
            "ould conform to constraints defined by the data type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="StringMeasure")]
        public StringMeasure Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of the measure. For example, "length". This should be specified if the value requires a unit of measure.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind of the measure. For example, \"length\". This should be specified if the v" +
            "alue requires a unit of measure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureClass", DataType="MeasureClass")]
        public MeasureClass MeasureClass {
            get {
                return this.measureClassField;
            }
            set {
                this.measureClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureClassSpecified {
            get {
                return this.measureClassFieldSpecified;
            }
            set {
                this.measureClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date-time associated with the value.</summary>
        [System.ComponentModel.DescriptionAttribute("The date-time associated with the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indexes things with the same name.  That is, 1 indicates the first one, 2 indicates the second one, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Indexes things with the same name.  That is, 1 indicates the first one, 2 indicat" +
            "es the second one, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="int")]
        public int Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                this.indexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the extension.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the extension.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class StringMeasure {
        
        private UnitOfMeasure uomField;
        
        private bool uomFieldSpecified;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="UnitOfMeasure")]
        public UnitOfMeasure uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool uomSpecified {
            get {
                return this.uomFieldSpecified;
            }
            set {
                this.uomFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class EventRefInfo {
        
        private string eventReferenceIdField;
        
        private Energistics.DataAccess.Timestamp eventDateField;
        
        /// <remarks/>
        /// <summary>The referencing eventledger ID.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The referencing eventledger ID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventReferenceId", DataType="String64")]
        public string EventReferenceId {
            get {
                return this.eventReferenceIdField;
            }
            set {
                this.eventReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Install/pull date.</summary>
        [System.ComponentModel.DescriptionAttribute("Install/pull date.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp EventDate {
            get {
                return this.eventDateField;
            }
            set {
                this.eventDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IntervalStatusHistory {
        
        private PhysicalStatus physicalStatusField;
        
        private bool physicalStatusFieldSpecified;
        
        private Energistics.DataAccess.Timestamp startDateField;
        
        private Energistics.DataAccess.Timestamp endDateField;
        
        private MdInterval statusMdIntervalField;
        
        private double allocationFactorField;
        
        private bool allocationFactorFieldSpecified;
        
        private string commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The physical status of an interval (e.g., open, closed, proposed).</summary>
        [System.ComponentModel.DescriptionAttribute("The physical status of an interval (e.g., open, closed, proposed).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhysicalStatus", DataType="PhysicalStatus")]
        public PhysicalStatus PhysicalStatus {
            get {
                return this.physicalStatusField;
            }
            set {
                this.physicalStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhysicalStatusSpecified {
            get {
                return this.physicalStatusFieldSpecified;
            }
            set {
                this.physicalStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The start date of  the status and allocation factor.</summary>
        [System.ComponentModel.DescriptionAttribute("The start date of  the status and allocation factor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The end date of status and allocation factor.</summary>
        [System.ComponentModel.DescriptionAttribute("The end date of status and allocation factor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval over which this status is valid for the given time frame.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval over which this status is valid for the given time frame." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusMdInterval", DataType="MdInterval")]
        public MdInterval StatusMdInterval {
            get {
                return this.statusMdIntervalField;
            }
            set {
                this.statusMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the proportional amount of fluid from the well completion that is flowing through this interval within a wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the proportional amount of fluid from the well completion that is flowing" +
            " through this interval within a wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AllocationFactor", DataType="NonNegativeFraction")]
        public double AllocationFactor {
            get {
                return this.allocationFactorField;
            }
            set {
                this.allocationFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllocationFactorSpecified {
            get {
                return this.allocationFactorFieldSpecified;
            }
            set {
                this.allocationFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks about the interval over this period of time.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks about the interval over this period of time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of IntervalStatusHistory.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of IntervalStatusHistory.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PhysicalStatus {
        
        /// <remarks/>
        closed,
        
        /// <remarks/>
        open,
        
        /// <remarks/>
        proposed,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PerforationStatusHistory {
        
        private PerforationStatus perforationStatusField;
        
        private bool perforationStatusFieldSpecified;
        
        private Energistics.DataAccess.Timestamp startDateField;
        
        private Energistics.DataAccess.Timestamp endDateField;
        
        private MdInterval perforationMdIntervalField;
        
        private TvdInterval perforationTvdIntervalField;
        
        private double allocationFactorField;
        
        private bool allocationFactorFieldSpecified;
        
        private string commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Perforation status.</summary>
        [System.ComponentModel.DescriptionAttribute("Perforation status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationStatus", DataType="PerforationStatus")]
        public PerforationStatus PerforationStatus {
            get {
                return this.perforationStatusField;
            }
            set {
                this.perforationStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PerforationStatusSpecified {
            get {
                return this.perforationStatusFieldSpecified;
            }
            set {
                this.perforationStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The start date of the status.</summary>
        [System.ComponentModel.DescriptionAttribute("The start date of the status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The end date of the status.</summary>
        [System.ComponentModel.DescriptionAttribute("The end date of the status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Overall measured depth interval for this perforated interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Overall measured depth interval for this perforated interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationMdInterval", DataType="MdInterval")]
        public MdInterval PerforationMdInterval {
            get {
                return this.perforationMdIntervalField;
            }
            set {
                this.perforationMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Overall true vertical depth interval for this perforated interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Overall true vertical depth interval for this perforated interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationTvdInterval", DataType="TvdInterval")]
        public TvdInterval PerforationTvdInterval {
            get {
                return this.perforationTvdIntervalField;
            }
            set {
                this.perforationTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the proportional amount of fluid from the well completion that is flowing through this interval within a wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines the proportional amount of fluid from the well completion that is flowing" +
            " through this interval within a wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AllocationFactor", DataType="NonNegativeFraction")]
        public double AllocationFactor {
            get {
                return this.allocationFactorField;
            }
            set {
                this.allocationFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllocationFactorSpecified {
            get {
                return this.allocationFactorFieldSpecified;
            }
            set {
                this.allocationFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about the status.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about the status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of PerforationStatusHistory.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of PerforationStatusHistory.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PerforationStatus {
        
        /// <remarks/>
        open,
        
        /// <remarks/>
        proposed,
        
        /// <remarks/>
        squeezed,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PerforationSetInterval {
        
        private string perforationSetReferenceIdField;
        
        private MdInterval perforationSetMdIntervalField;
        
        private TvdInterval perforationSetTvdIntervalField;
        
        private EventInfo eventHistoryField;
        
        private string[] geologyFeatureReferenceIdField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private PerforationStatusHistory[] perforationStatusHistoryField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Reference to a perforation set.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationSetReferenceId", DataType="String64")]
        public string PerforationSetReferenceId {
            get {
                return this.perforationSetReferenceIdField;
            }
            set {
                this.perforationSetReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Overall measured depth interval for this perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("Overall measured depth interval for this perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationSetMdInterval", DataType="MdInterval")]
        public MdInterval PerforationSetMdInterval {
            get {
                return this.perforationSetMdIntervalField;
            }
            set {
                this.perforationSetMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Overall true vertical depth interval for this perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("Overall true vertical depth interval for this perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationSetTvdInterval", DataType="TvdInterval")]
        public TvdInterval PerforationSetTvdInterval {
            get {
                return this.perforationSetTvdIntervalField;
            }
            set {
                this.perforationSetTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The PerforationSetInterval event information.</summary>
        [System.ComponentModel.DescriptionAttribute("The PerforationSetInterval event information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventHistory", DataType="EventInfo")]
        public EventInfo EventHistory {
            get {
                return this.eventHistoryField;
            }
            set {
                this.eventHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a geology feature.</summary>
        [System.Xml.Serialization.XmlElementAttribute("GeologyFeatureReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to a geology feature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologyFeatureReferenceId", DataType="String64")]
        public string[] GeologyFeatureReferenceId {
            get {
                return this.geologyFeatureReferenceIdField;
            }
            set {
                this.geologyFeatureReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PerforationStatusHistory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationStatusHistory", DataType="PerforationStatusHistory")]
        public PerforationStatusHistory[] PerforationStatusHistory {
            get {
                return this.perforationStatusHistoryField;
            }
            set {
                this.perforationStatusHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of PerforationSetInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of PerforationSetInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class OpenHoleInterval {
        
        private string boreholeStringReferenceIdField;
        
        private MdInterval openHoleMdIntervalField;
        
        private TvdInterval openHoleTvdIntervalField;
        
        private EventInfo eventHistoryField;
        
        private string[] geologyFeatureReferenceIdField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private IntervalStatusHistory[] statusHistoryField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Reference to a borehole (the as-drilled hole through the earth).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a borehole (the as-drilled hole through the earth).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BoreholeStringReferenceId", DataType="String64")]
        public string BoreholeStringReferenceId {
            get {
                return this.boreholeStringReferenceIdField;
            }
            set {
                this.boreholeStringReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Openhole measured depth interval for this completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Openhole measured depth interval for this completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpenHoleMdInterval", DataType="MdInterval")]
        public MdInterval OpenHoleMdInterval {
            get {
                return this.openHoleMdIntervalField;
            }
            set {
                this.openHoleMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Openhole true vertical depth interval for this completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Openhole true vertical depth interval for this completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpenHoleTvdInterval", DataType="TvdInterval")]
        public TvdInterval OpenHoleTvdInterval {
            get {
                return this.openHoleTvdIntervalField;
            }
            set {
                this.openHoleTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The OpenHoleInterval event information.</summary>
        [System.ComponentModel.DescriptionAttribute("The OpenHoleInterval event information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventHistory", DataType="EventInfo")]
        public EventInfo EventHistory {
            get {
                return this.eventHistoryField;
            }
            set {
                this.eventHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a geology feature.</summary>
        [System.Xml.Serialization.XmlElementAttribute("GeologyFeatureReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to a geology feature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologyFeatureReferenceId", DataType="String64")]
        public string[] GeologyFeatureReferenceId {
            get {
                return this.geologyFeatureReferenceIdField;
            }
            set {
                this.geologyFeatureReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StatusHistory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusHistory", DataType="IntervalStatusHistory")]
        public IntervalStatusHistory[] StatusHistory {
            get {
                return this.statusHistoryField;
            }
            set {
                this.statusHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of OpenHoleInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of OpenHoleInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class SlotsInterval {
        
        private string stringEquipmentReferenceIdField;
        
        private MdInterval slottedMdIntervalField;
        
        private TvdInterval slottedTvdIntervalField;
        
        private EventInfo eventHistoryField;
        
        private string[] geologyFeatureRefIDField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private IntervalStatusHistory[] statusHistoryField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Reference to an equipment string, which is the equipment (e.g., tubing, gravel pack screens, etc.) that compose the completion.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to an equipment string, which is the equipment (e.g., tubing, gravel pa" +
            "ck screens, etc.) that compose the completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringEquipmentReferenceId", DataType="String64")]
        public string StringEquipmentReferenceId {
            get {
                return this.stringEquipmentReferenceIdField;
            }
            set {
                this.stringEquipmentReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Slotted measured depth interval for this completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Slotted measured depth interval for this completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlottedMdInterval", DataType="MdInterval")]
        public MdInterval SlottedMdInterval {
            get {
                return this.slottedMdIntervalField;
            }
            set {
                this.slottedMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Slotted true vertical depth interval for this completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Slotted true vertical depth interval for this completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlottedTvdInterval", DataType="TvdInterval")]
        public TvdInterval SlottedTvdInterval {
            get {
                return this.slottedTvdIntervalField;
            }
            set {
                this.slottedTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The SlotsInterval event information.</summary>
        [System.ComponentModel.DescriptionAttribute("The SlotsInterval event information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventHistory", DataType="EventInfo")]
        public EventInfo EventHistory {
            get {
                return this.eventHistoryField;
            }
            set {
                this.eventHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a geology feature.</summary>
        [System.Xml.Serialization.XmlElementAttribute("GeologyFeatureRefID")]
        [System.ComponentModel.DescriptionAttribute("Reference to a geology feature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologyFeatureRefID", DataType="String64")]
        public string[] GeologyFeatureRefID {
            get {
                return this.geologyFeatureRefIDField;
            }
            set {
                this.geologyFeatureRefIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StatusHistory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusHistory", DataType="IntervalStatusHistory")]
        public IntervalStatusHistory[] StatusHistory {
            get {
                return this.statusHistoryField;
            }
            set {
                this.statusHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of SlotsInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of SlotsInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ContactIntervalSet {
        
        private SlotsInterval[] slotsIntervalField;
        
        private OpenHoleInterval[] openHoleIntervalField;
        
        private PerforationSetInterval[] perforationSetIntervalField;
        
        private GravelPackInterval[] gravelPackIntervalField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SlotsInterval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlotsInterval", DataType="SlotsInterval")]
        public SlotsInterval[] SlotsInterval {
            get {
                return this.slotsIntervalField;
            }
            set {
                this.slotsIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OpenHoleInterval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpenHoleInterval", DataType="OpenHoleInterval")]
        public OpenHoleInterval[] OpenHoleInterval {
            get {
                return this.openHoleIntervalField;
            }
            set {
                this.openHoleIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PerforationSetInterval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationSetInterval", DataType="PerforationSetInterval")]
        public PerforationSetInterval[] PerforationSetInterval {
            get {
                return this.perforationSetIntervalField;
            }
            set {
                this.perforationSetIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GravelPackInterval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravelPackInterval", DataType="GravelPackInterval")]
        public GravelPackInterval[] GravelPackInterval {
            get {
                return this.gravelPackIntervalField;
            }
            set {
                this.gravelPackIntervalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CompletionStatusHistory {
        
        private CompletionStatus statusField;
        
        private bool statusFieldSpecified;
        
        private Energistics.DataAccess.Timestamp startDateField;
        
        private Energistics.DataAccess.Timestamp endDateField;
        
        private MdInterval perforationMdIntervalField;
        
        private string commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Completion status.</summary>
        [System.ComponentModel.DescriptionAttribute("Completion status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Status", DataType="CompletionStatus")]
        public CompletionStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The start date of the status.</summary>
        [System.ComponentModel.DescriptionAttribute("The start date of the status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The end date of the status.</summary>
        [System.ComponentModel.DescriptionAttribute("The end date of the status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval between the top and the base of the perforations.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval between the top and the base of the perforations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationMdInterval", DataType="MdInterval")]
        public MdInterval PerforationMdInterval {
            get {
                return this.perforationMdIntervalField;
            }
            set {
                this.perforationMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments or remarks on the status.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments or remarks on the status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of CompletionStatusHistory.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of CompletionStatusHistory.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum CompletionStatus {
        
        /// <remarks/>
        active,
        
        /// <remarks/>
        inactive,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permanently abandoned")]
        permanentlyabandoned,
        
        /// <remarks/>
        planned,
        
        /// <remarks/>
        suspended,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temporarily abandoned")]
        temporarilyabandoned,
        
        /// <remarks/>
        testing,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Tvd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Depth))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Inc))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Azi))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractIscwsaErrorCoefficient {
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of AbstractIscwsaErrorCoefficient.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of AbstractIscwsaErrorCoefficient.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Tvd : AbstractIscwsaErrorCoefficient {
        
        private string tvd1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Tvd")]
        public string Tvd1 {
            get {
                return this.tvd1Field;
            }
            set {
                this.tvd1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Depth : AbstractIscwsaErrorCoefficient {
        
        private string depth1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Depth")]
        public string Depth1 {
            get {
                return this.depth1Field;
            }
            set {
                this.depth1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Inc : AbstractIscwsaErrorCoefficient {
        
        private string inc1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Inc")]
        public string Inc1 {
            get {
                return this.inc1Field;
            }
            set {
                this.inc1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Azi : AbstractIscwsaErrorCoefficient {
        
        private string azi1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Azi")]
        public string Azi1 {
            get {
                return this.azi1Field;
            }
            set {
                this.azi1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaErrorCoefficient {
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private AbstractIscwsaErrorCoefficient[] abstractIscwsaErrorCoefficientField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AbstractIscwsaErrorCoefficient")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractIscwsaErrorCoefficient", DataType="AbstractIscwsaErrorCoefficient")]
        public AbstractIscwsaErrorCoefficient[] AbstractIscwsaErrorCoefficient {
            get {
                return this.abstractIscwsaErrorCoefficientField;
            }
            set {
                this.abstractIscwsaErrorCoefficientField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of IscwsaErrorCoefficient.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of IscwsaErrorCoefficient.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaErrorTerm {
        
        private string nameField;
        
        private ErrorTermSource typeField;
        
        private bool typeFieldSpecified;
        
        private MeasureClass measureClassField;
        
        private bool measureClassFieldSpecified;
        
        private string labelField;
        
        private string descriptionField;
        
        private SurveyToolOperatingMode[] operatingModeField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private IscwsaErrorCoefficient[] errorCoefficientField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>This is the unique mnemonic for this term, e.g., "ABIX" or "DECR".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("This is the unique mnemonic for this term, e.g., \"ABIX\" or \"DECR\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The class of the error source.</summary>
        [System.ComponentModel.DescriptionAttribute("The class of the error source.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="ErrorTermSource")]
        public ErrorTermSource Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of quantity that the term represents. This constrains the unit that can be used for any errorTermValues.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind of quantity that the term represents. This constrains the unit that can " +
            "be used for any errorTermValues.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasureClass", DataType="MeasureClass")]
        public MeasureClass MeasureClass {
            get {
                return this.measureClassField;
            }
            set {
                this.measureClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeasureClassSpecified {
            get {
                return this.measureClassFieldSpecified;
            }
            set {
                this.measureClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Human-readable name for the term, may be presented in  application software. E.g., "MWD: X-Acceleromter Bias with Z-Axis Corr."</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Human-readable name for the term, may be presented in  application software. E.g." +
            ", \"MWD: X-Acceleromter Bias with Z-Axis Corr.\"")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Label", DataType="String64")]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Human-readable name for the term. It may be presented in application software, e.g., "MWD: X-Acceleromter Bias with Z-Axis Corr."</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Human-readable name for the term. It may be presented in application software, e." +
            "g., \"MWD: X-Acceleromter Bias with Z-Axis Corr.\"")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Operating mode that is valid for this error term. In the absence of this element assume "stationary".</summary>
        [System.Xml.Serialization.XmlElementAttribute("OperatingMode")]
        [System.ComponentModel.DescriptionAttribute("Operating mode that is valid for this error term. In the absence of this element " +
            "assume \"stationary\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperatingMode", DataType="SurveyToolOperatingMode")]
        public SurveyToolOperatingMode[] OperatingMode {
            get {
                return this.operatingModeField;
            }
            set {
                this.operatingModeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ErrorCoefficient")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ErrorCoefficient", DataType="IscwsaErrorCoefficient")]
        public IscwsaErrorCoefficient[] ErrorCoefficient {
            get {
                return this.errorCoefficientField;
            }
            set {
                this.errorCoefficientField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of IscwsaErrorTerm.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of IscwsaErrorTerm.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ErrorTermSource {
        
        /// <remarks/>
        sensor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("azimuth reference")]
        azimuthreference,
        
        /// <remarks/>
        magnetic,
        
        /// <remarks/>
        alignment,
        
        /// <remarks/>
        misalignment,
        
        /// <remarks/>
        depth,
        
        /// <remarks/>
        reference,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum SurveyToolOperatingMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("continuous xy")]
        continuousxy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("continuous xyz")]
        continuousxyz,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("continuous z")]
        continuousz,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        stationary,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaNomenclatureConstant {
        
        private string nameField;
        
        private double valueField;
        
        private string unitField;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the constant.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the constant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The value of the constant.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value of the constant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="double")]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The unit of measure of the constant. This value must match an acronym from the Energistics unit of measure dictionary.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("The unit of measure of the constant. This value must match an acronym from the En" +
            "ergistics unit of measure dictionary.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="UomEnum")]
        public string Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the constant.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the constant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of IscwsaNomenclatureConstant.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of IscwsaNomenclatureConstant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaNameAndDescription {
        
        private string nameField;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the item.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the item.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of IscwsaNameAndDescription.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of IscwsaNameAndDescription.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaNomenclature {
        
        private IscwsaNameAndDescription[] parameterField;
        
        private IscwsaNameAndDescription[] functionField;
        
        private IscwsaNomenclatureConstant[] constantField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="IscwsaNameAndDescription")]
        public IscwsaNameAndDescription[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Function")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Function", DataType="IscwsaNameAndDescription")]
        public IscwsaNameAndDescription[] Function {
            get {
                return this.functionField;
            }
            set {
                this.functionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Constant")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Constant", DataType="IscwsaNomenclatureConstant")]
        public IscwsaNomenclatureConstant[] Constant {
            get {
                return this.constantField;
            }
            set {
                this.constantField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class SurveySection {
        
        private long sequenceField;
        
        private string nameField;
        
        private MdInterval mdIntervalField;
        
        private string nameSurveyCompanyField;
        
        private string nameToolField;
        
        private string typeToolField;
        
        private string modelErrorField;
        
        private bool overwriteField;
        
        private bool overwriteFieldSpecified;
        
        private LengthMeasure frequencyMxField;
        
        private ExistenceKind itemStateField;
        
        private bool itemStateFieldSpecified;
        
        private string commentsField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Order in which the program sections are or were executed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Order in which the program sections are or were executed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sequence", DataType="NonNegativeLong")]
        public long Sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the survey program section.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the survey program section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Company who will run or has run the survey tool.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Company who will run or has run the survey tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameSurveyCompany", DataType="String64")]
        public string NameSurveyCompany {
            get {
                return this.nameSurveyCompanyField;
            }
            set {
                this.nameSurveyCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of survey tool used in this section.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of survey tool used in this section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTool", DataType="String64")]
        public string NameTool {
            get {
                return this.nameToolField;
            }
            set {
                this.nameToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of tool used.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of tool used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeTool", DataType="String64")]
        public string TypeTool {
            get {
                return this.typeToolField;
            }
            set {
                this.typeToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Error model used to calculate the ellipses of uncertainty.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Error model used to calculate the ellipses of uncertainty.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ModelError", DataType="String64")]
        public string ModelError {
            get {
                return this.modelErrorField;
            }
            set {
                this.modelErrorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Higher index trajectory takes precedence over overlapping section of previous trajectory?   Values are "true" (or "1") and "false" (or "0"). Normally, this is true.</summary>
        [System.ComponentModel.DescriptionAttribute("Higher index trajectory takes precedence over overlapping section of previous tra" +
            "jectory?   Values are \"true\" (or \"1\") and \"false\" (or \"0\"). Normally, this is tr" +
            "ue.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Overwrite", DataType="boolean")]
        public bool Overwrite {
            get {
                return this.overwriteField;
            }
            set {
                this.overwriteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OverwriteSpecified {
            get {
                return this.overwriteFieldSpecified;
            }
            set {
                this.overwriteFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum allowable depth frequency for survey stations for this survey run.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum allowable depth frequency for survey stations for this survey run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrequencyMx", DataType="LengthMeasure")]
        public LengthMeasure FrequencyMx {
            get {
                return this.frequencyMxField;
            }
            set {
                this.frequencyMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The item state for the data object.</summary>
        [System.ComponentModel.DescriptionAttribute("The item state for the data object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ItemState", DataType="ExistenceKind")]
        public ExistenceKind ItemState {
            get {
                return this.itemStateField;
            }
            set {
                this.itemStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ItemStateSpecified {
            get {
                return this.itemStateFieldSpecified;
            }
            set {
                this.itemStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this instance of SurveySection.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this instance of SurveySection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PermeabilityLengthMeasure {
        
        private PermeabilityLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PermeabilityLengthUom")]
        public PermeabilityLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermeabilityLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.ft")]
        Dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.m")]
        Dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft")]
        mDft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.m")]
        mDm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API].m")]
        TDAPIm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimISO13503_5Point {
        
        private PermeabilityLengthMeasure conductivityField;
        
        private ThermodynamicTemperatureMeasure temperatureField;
        
        private PermeabilityRockMeasure permeabilityField;
        
        private PressureMeasure stressField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The conductivity under stress.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The conductivity under stress.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Conductivity", DataType="PermeabilityLengthMeasure")]
        public PermeabilityLengthMeasure Conductivity {
            get {
                return this.conductivityField;
            }
            set {
                this.conductivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature at the time measurements were taken.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The temperature at the time measurements were taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Temperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return this.temperatureField;
            }
            set {
                this.temperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The permeability under stress.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The permeability under stress.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Permeability", DataType="PermeabilityRockMeasure")]
        public PermeabilityRockMeasure Permeability {
            get {
                return this.permeabilityField;
            }
            set {
                this.permeabilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of stress applied.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The amount of stress applied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Stress", DataType="PressureMeasure")]
        public PressureMeasure Stress {
            get {
                return this.stressField;
            }
            set {
                this.stressField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimISO13503_5Point</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimISO13503_5Point")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ThermodynamicTemperatureMeasure {
        
        private ThermodynamicTemperatureUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ThermodynamicTemperatureUom")]
        public ThermodynamicTemperatureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermodynamicTemperatureUom {
        
        /// <remarks/>
        degC,
        
        /// <remarks/>
        degF,
        
        /// <remarks/>
        degR,
        
        /// <remarks/>
        K,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PermeabilityRockMeasure {
        
        private PermeabilityRockUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PermeabilityRockUom")]
        public PermeabilityRockUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermeabilityRockUom {
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D[API]")]
        DAPI,
        
        /// <remarks/>
        mD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]")]
        TDAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PressureMeasure {
        
        private PressureUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PressureUom")]
        public PressureUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft2")]
        Item001lbfft2,
        
        /// <remarks/>
        at,
        
        /// <remarks/>
        atm,
        
        /// <remarks/>
        bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cmH2O[4degC]")]
        cmH2O4degC,
        
        /// <remarks/>
        cPa,
        
        /// <remarks/>
        dPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm2")]
        dynecm2,
        
        /// <remarks/>
        EPa,
        
        /// <remarks/>
        fPa,
        
        /// <remarks/>
        GPa,
        
        /// <remarks/>
        hbar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[39degF]")]
        inH2O39degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[60degF]")]
        inH2O60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[32degF]")]
        inHg32degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[60degF]")]
        inHg60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm2")]
        kgfcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/mm2")]
        kgfmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m2")]
        kNm2,
        
        /// <remarks/>
        kPa,
        
        /// <remarks/>
        kpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft2")]
        lbfft2,
        
        /// <remarks/>
        mbar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mmHg[0degC]")]
        mmHg0degC,
        
        /// <remarks/>
        mPa,
        
        /// <remarks/>
        MPa,
        
        /// <remarks/>
        Mpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/mm2")]
        Nmm2,
        
        /// <remarks/>
        nPa,
        
        /// <remarks/>
        Pa,
        
        /// <remarks/>
        pPa,
        
        /// <remarks/>
        psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft2")]
        tonfUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/in2")]
        tonfUSin2,
        
        /// <remarks/>
        torr,
        
        /// <remarks/>
        TPa,
        
        /// <remarks/>
        ubar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("umHg[0degC]")]
        umHg0degC,
        
        /// <remarks/>
        uPa,
        
        /// <remarks/>
        upsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ISO13503_2SieveAnalysisData {
        
        private MassPerMassMeasure percentRetainedField;
        
        private long sieveNumberField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The percentage of mass retained in the sieve.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The percentage of mass retained in the sieve.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PercentRetained", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure PercentRetained {
            get {
                return this.percentRetainedField;
            }
            set {
                this.percentRetainedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>ASTM US Standard mesh opening size used in the sieve analysis test.  To indicate "Pan",  use "0".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("ASTM US Standard mesh opening size used in the sieve analysis test.  To indicate " +
            "\"Pan\",  use \"0\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SieveNumber", DataType="NonNegativeLong")]
        public long SieveNumber {
            get {
                return this.sieveNumberField;
            }
            set {
                this.sieveNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of ISO13503_2SieveAnalysisData.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of ISO13503_2SieveAnalysisData.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerMassMeasure {
        
        private MassPerMassUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerMassUom")]
        public MassPerMassUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[mass]")]
        mass,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/kg")]
        gkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/t")]
        gt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/kg")]
        kgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/sack[94lbm]")]
        kgsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/t")]
        kgt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/g")]
        mgg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/kg")]
        mgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/g")]
        ngg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/mg")]
        ngmg,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[mass]")]
        ppmmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/g")]
        ugg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/mg")]
        ugmg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ISO13503_2CrushTestData {
        
        private MassPerMassMeasure finesField;
        
        private PressureMeasure stressField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Mass percentage of fines after being exposed to stress.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Mass percentage of fines after being exposed to stress.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Fines", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Fines {
            get {
                return this.finesField;
            }
            set {
                this.finesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Stress measured at a point during a crush test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Stress measured at a point during a crush test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Stress", DataType="PressureMeasure")]
        public PressureMeasure Stress {
            get {
                return this.stressField;
            }
            set {
                this.stressField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of ISO13503_2CrushTestData.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of ISO13503_2CrushTestData.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimISO13503_2Properties {
        
        private MassPerVolumeMeasure absoluteDensityField;
        
        private DimensionlessMeasure clustersPercentField;
        
        private double kValueField;
        
        private bool kValueFieldSpecified;
        
        private LengthMeasure meanParticleDiameterField;
        
        private LengthMeasure medianParticleDiameterField;
        
        private double specificGravityField;
        
        private bool specificGravityFieldSpecified;
        
        private double roundnessField;
        
        private bool roundnessFieldSpecified;
        
        private MassPerMassMeasure acidSolubilityField;
        
        private MassPerVolumeMeasure apparentDensityField;
        
        private MassPerVolumeMeasure bulkDensityField;
        
        private DimensionlessMeasure lossOnIgnitionField;
        
        private double sphericityField;
        
        private bool sphericityFieldSpecified;
        
        private double turbidityField;
        
        private bool turbidityFieldSpecified;
        
        private ISO13503_2CrushTestData[] crushTestDataField;
        
        private ISO13503_2SieveAnalysisData[] sieveAnalysisDataField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The density the material would have if no intra-granular porosity is present. (e.g. Boyle’s Law porosimetry).</summary>
        [System.ComponentModel.DescriptionAttribute("The density the material would have if no intra-granular porosity is present. (e." +
            "g. Boyle’s Law porosimetry).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbsoluteDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AbsoluteDensity {
            get {
                return this.absoluteDensityField;
            }
            set {
                this.absoluteDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Percentage of undesirable agglomerated discrete proppant particles which typically occurs more with inefficiently processed natural sand proppants as opposed to manufactured ceramic proppants. ISO 13503-2 and API RP19C limit the mass of clusters to less than 1%.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Percentage of undesirable agglomerated discrete proppant particles which typically occurs more with inefficiently processed natural sand proppants as opposed to manufactured ceramic proppants. ISO 13503-2 and API RP19C limit the mass of clusters to less than 1%.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClustersPercent", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure ClustersPercent {
            get {
                return this.clustersPercentField;
            }
            set {
                this.clustersPercentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Crush test classification indicating the highest stress level at which a proppant generated no more than 10% crushed material rounded down to the nearest 1,000 psi during a crush test. For example, a value of 14 means ‘14K’ which is 14000 psi.</summary>
        [System.ComponentModel.DescriptionAttribute("Crush test classification indicating the highest stress level at which a proppant" +
            " generated no more than 10% crushed material rounded down to the nearest 1,000 p" +
            "si during a crush test. For example, a value of 14 means ‘14K’ which is 14000 ps" +
            "i.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KValue", DataType="double")]
        public double KValue {
            get {
                return this.kValueField;
            }
            set {
                this.kValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KValueSpecified {
            get {
                return this.kValueFieldSpecified;
            }
            set {
                this.kValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mean diameter of particles in a sample of proppant.</summary>
        [System.ComponentModel.DescriptionAttribute("The mean diameter of particles in a sample of proppant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeanParticleDiameter", DataType="LengthMeasure")]
        public LengthMeasure MeanParticleDiameter {
            get {
                return this.meanParticleDiameterField;
            }
            set {
                this.meanParticleDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The median diameter of particles in a sample of proppant.</summary>
        [System.ComponentModel.DescriptionAttribute("The median diameter of particles in a sample of proppant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MedianParticleDiameter", DataType="LengthMeasure")]
        public LengthMeasure MedianParticleDiameter {
            get {
                return this.medianParticleDiameterField;
            }
            set {
                this.medianParticleDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Not formally part of ISO 13503.2 properties, the specific gravity is the apparent density of the proppant divided by the density of water.</summary>
        [System.ComponentModel.DescriptionAttribute("Not formally part of ISO 13503.2 properties, the specific gravity is the apparent" +
            " density of the proppant divided by the density of water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpecificGravity", DataType="double")]
        public double SpecificGravity {
            get {
                return this.specificGravityField;
            }
            set {
                this.specificGravityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpecificGravitySpecified {
            get {
                return this.specificGravityFieldSpecified;
            }
            set {
                this.specificGravityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Krumbein Roundness Shape Factor that is a measure of the relative sharpness of grain corners or of grain curvature. Krumbein and Sloss (1963) are the most widely used method of determining shape factors.</summary>
        [System.ComponentModel.DescriptionAttribute("Krumbein Roundness Shape Factor that is a measure of the relative sharpness of gr" +
            "ain corners or of grain curvature. Krumbein and Sloss (1963) are the most widely" +
            " used method of determining shape factors.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Roundness", DataType="double")]
        public double Roundness {
            get {
                return this.roundnessField;
            }
            set {
                this.roundnessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RoundnessSpecified {
            get {
                return this.roundnessFieldSpecified;
            }
            set {
                this.roundnessFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The solubility of a proppant in 12:3 HCl:HF for 30 minutes at 150°F is an indication of the amount of soluble materials (i.e. carbonates, feldspars, iron oxides, clays, etc) present in the proppant.</summary>
        [System.ComponentModel.DescriptionAttribute("The solubility of a proppant in 12:3 HCl:HF for 30 minutes at 150°F is an indicat" +
            "ion of the amount of soluble materials (i.e. carbonates, feldspars, iron oxides," +
            " clays, etc) present in the proppant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AcidSolubility", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure AcidSolubility {
            get {
                return this.acidSolubilityField;
            }
            set {
                this.acidSolubilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Apparent density excludes extra-granular porosity by placing a known mass in a volume of fluid and determining how much of the fluid is displaced (Archimedes).</summary>
        [System.ComponentModel.DescriptionAttribute("Apparent density excludes extra-granular porosity by placing a known mass in a vo" +
            "lume of fluid and determining how much of the fluid is displaced (Archimedes).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ApparentDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure ApparentDensity {
            get {
                return this.apparentDensityField;
            }
            set {
                this.apparentDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bulk density includes both the proppant and the porosity. This is measured by filling a known volume with dry proppant and measuring the weight.</summary>
        [System.ComponentModel.DescriptionAttribute("Bulk density includes both the proppant and the porosity. This is measured by fil" +
            "ling a known volume with dry proppant and measuring the weight.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BulkDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure BulkDensity {
            get {
                return this.bulkDensityField;
            }
            set {
                this.bulkDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A mass loss (gravimetric) test method applied to coated proppants only, which determines the mass of resin coating applied to a natural sand or manufactured proppant by means of thorough combustion of the flammable resin from the nonflammable proppant. Reported as a % of original mass.</summary>
        [System.ComponentModel.DescriptionAttribute(@"A mass loss (gravimetric) test method applied to coated proppants only, which determines the mass of resin coating applied to a natural sand or manufactured proppant by means of thorough combustion of the flammable resin from the nonflammable proppant. Reported as a % of original mass.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LossOnIgnition", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure LossOnIgnition {
            get {
                return this.lossOnIgnitionField;
            }
            set {
                this.lossOnIgnitionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Krumbein Sphericity Shape Factor that is a measure of how closely a proppant particle approaches the shape of a sphere. Krumbein and Sloss (1963) are the most widely used method of determining shape factors.</summary>
        [System.ComponentModel.DescriptionAttribute("Krumbein Sphericity Shape Factor that is a measure of how closely a proppant part" +
            "icle approaches the shape of a sphere. Krumbein and Sloss (1963) are the most wi" +
            "dely used method of determining shape factors.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sphericity", DataType="double")]
        public double Sphericity {
            get {
                return this.sphericityField;
            }
            set {
                this.sphericityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SphericitySpecified {
            get {
                return this.sphericityFieldSpecified;
            }
            set {
                this.sphericityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A measure of water clarity, how much the material suspended in water decreases the passage of light through the water. Unit of measure may be Nephelometric Turbidity Unit (NTU), but may vary based upon the detector geometry.</summary>
        [System.ComponentModel.DescriptionAttribute("A measure of water clarity, how much the material suspended in water decreases th" +
            "e passage of light through the water. Unit of measure may be Nephelometric Turbi" +
            "dity Unit (NTU), but may vary based upon the detector geometry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Turbidity", DataType="double")]
        public double Turbidity {
            get {
                return this.turbidityField;
            }
            set {
                this.turbidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TurbiditySpecified {
            get {
                return this.turbidityFieldSpecified;
            }
            set {
                this.turbidityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CrushTestData")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CrushTestData", DataType="ISO13503_2CrushTestData")]
        public ISO13503_2CrushTestData[] CrushTestData {
            get {
                return this.crushTestDataField;
            }
            set {
                this.crushTestDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SieveAnalysisData")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SieveAnalysisData", DataType="ISO13503_2SieveAnalysisData")]
        public ISO13503_2SieveAnalysisData[] SieveAnalysisData {
            get {
                return this.sieveAnalysisDataField;
            }
            set {
                this.sieveAnalysisDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimISO13503_2Properties.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimISO13503_2Properties.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerVolumeMeasure {
        
        private MassPerVolumeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerVolumeUom")]
        public MassPerVolumeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/bbl")]
        Item0001lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[UK]")]
        Item0001lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[US]")]
        Item0001lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 grain/ft3")]
        Item001grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 lbm/bbl")]
        Item01lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 Mg/m3")]
        Item10Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm3")]
        gcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/dm3")]
        gdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[UK]")]
        ggalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[US]")]
        ggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/L")]
        gL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/m3")]
        gm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/ft3")]
        grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/gal[US]")]
        graingalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm3")]
        kgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/L")]
        kgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3")]
        kgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/bbl")]
        lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft3")]
        lbmft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[UK]")]
        lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[US]")]
        lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/in3")]
        lbmin3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/dm3")]
        mgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/gal[US]")]
        mggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/L")]
        mgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/m3")]
        mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m3")]
        Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/m3")]
        tm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/cm3")]
        ugcm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DimensionlessMeasure {
        
        private DimensionlessUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="DimensionlessUom")]
        public DimensionlessUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DimensionlessUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        dEuc,
        
        /// <remarks/>
        EEuc,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        fEuc,
        
        /// <remarks/>
        GEuc,
        
        /// <remarks/>
        kEuc,
        
        /// <remarks/>
        MEuc,
        
        /// <remarks/>
        mEuc,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        pEuc,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        TEuc,
        
        /// <remarks/>
        uEuc,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AreaPerMassMeasure {
        
        private AreaPerMassUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AreaPerMassUom")]
        public AreaPerMassUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/g")]
        cm2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/lbm")]
        ft2lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/g")]
        m2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/kg")]
        m2kg,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimAdditive))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StimProppantAgent))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimMaterial {
        
        private StimMaterialKind kindField;
        
        private bool kindFieldSpecified;
        
        private string nameField;
        
        private string supplierField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The material kind.</summary>
        [System.ComponentModel.DescriptionAttribute("The material kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="StimMaterialKind")]
        public StimMaterialKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the material.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The name of the material.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String2000")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the material supplier.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The name of the material supplier.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Supplier", DataType="String2000")]
        public string Supplier {
            get {
                return this.supplierField;
            }
            set {
                this.supplierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimMaterial.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimMaterial.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum StimMaterialKind {
        
        /// <remarks/>
        additive,
        
        /// <remarks/>
        brine,
        
        /// <remarks/>
        CO2,
        
        /// <remarks/>
        gel,
        
        /// <remarks/>
        N2,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("proppant agent")]
        proppantagent,
        
        /// <remarks/>
        water,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimAdditive : StimMaterial {
        
        private StimAdditiveKind additiveKindField;
        
        private bool additiveKindFieldSpecified;
        
        private string typeField;
        
        private string supplierCodeField;
        
        /// <remarks/>
        /// <summary>Additive type or function from the enumeration 'StimAdditiveKind'.</summary>
        [System.ComponentModel.DescriptionAttribute("Additive type or function from the enumeration \'StimAdditiveKind\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AdditiveKind", DataType="StimAdditiveKind")]
        public StimAdditiveKind AdditiveKind {
            get {
                return this.additiveKindField;
            }
            set {
                this.additiveKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AdditiveKindSpecified {
            get {
                return this.additiveKindFieldSpecified;
            }
            set {
                this.additiveKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of additive that is used, which can represent a suppliers description or type of AdditiveKind.  For example, 5% HCl could be the type when AdditiveKind=acid.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The type of additive that is used, which can represent a suppliers description or" +
            " type of AdditiveKind.  For example, 5% HCl could be the type when AdditiveKind=" +
            "acid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String2000")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A code used to identify the supplier of the additive.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A code used to identify the supplier of the additive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupplierCode", DataType="String2000")]
        public string SupplierCode {
            get {
                return this.supplierCodeField;
            }
            set {
                this.supplierCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum StimAdditiveKind {
        
        /// <remarks/>
        acid,
        
        /// <remarks/>
        activator,
        
        /// <remarks/>
        biocide,
        
        /// <remarks/>
        breaker,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("breaker aid")]
        breakeraid,
        
        /// <remarks/>
        buffer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("clay stabilizer")]
        claystabilizer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corrosion inhibitor")]
        corrosioninhibitor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corrosion inhibitor aid")]
        corrosioninhibitoraid,
        
        /// <remarks/>
        crosslinker,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("delaying agent")]
        delayingagent,
        
        /// <remarks/>
        fibers,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fluid loss additive")]
        fluidlossadditive,
        
        /// <remarks/>
        foamer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("friction reducer")]
        frictionreducer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gelling agent")]
        gellingagent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("iron control additive")]
        ironcontroladditive,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mutual solvent")]
        mutualsolvent,
        
        /// <remarks/>
        salt,
        
        /// <remarks/>
        stabilizer,
        
        /// <remarks/>
        surfactant,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimProppantAgent : StimMaterial {
        
        private double frictionCoefficientLaminarField;
        
        private bool frictionCoefficientLaminarFieldSpecified;
        
        private double frictionCoefficientTurbulentField;
        
        private bool frictionCoefficientTurbulentFieldSpecified;
        
        private AreaPerMassMeasure massAbsorptionCoefficientField;
        
        private long meshSizeHighField;
        
        private bool meshSizeHighFieldSpecified;
        
        private long meshSizeLowField;
        
        private bool meshSizeLowFieldSpecified;
        
        private PressureMeasure unconfinedCompressiveStrengthField;
        
        private ProppantAgentKind proppantAgentKindField;
        
        private bool proppantAgentKindFieldSpecified;
        
        private StimISO13503_2Properties[] iSO13503_2PropertiesField;
        
        private StimISO13503_5Point[] iSO13503_5PointField;
        
        /// <remarks/>
        /// <summary>Laminar flow friction coefficient.</summary>
        [System.ComponentModel.DescriptionAttribute("Laminar flow friction coefficient.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionCoefficientLaminar", DataType="double")]
        public double FrictionCoefficientLaminar {
            get {
                return this.frictionCoefficientLaminarField;
            }
            set {
                this.frictionCoefficientLaminarField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FrictionCoefficientLaminarSpecified {
            get {
                return this.frictionCoefficientLaminarFieldSpecified;
            }
            set {
                this.frictionCoefficientLaminarFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Turbulent flow friction coefficient.</summary>
        [System.ComponentModel.DescriptionAttribute("Turbulent flow friction coefficient.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionCoefficientTurbulent", DataType="double")]
        public double FrictionCoefficientTurbulent {
            get {
                return this.frictionCoefficientTurbulentField;
            }
            set {
                this.frictionCoefficientTurbulentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FrictionCoefficientTurbulentSpecified {
            get {
                return this.frictionCoefficientTurbulentFieldSpecified;
            }
            set {
                this.frictionCoefficientTurbulentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Characterizes how easily radiation passes through a material. This can be used to compute the concentration of proppant in a slurry using a densitometer.</summary>
        [System.ComponentModel.DescriptionAttribute("Characterizes how easily radiation passes through a material. This can be used to" +
            " compute the concentration of proppant in a slurry using a densitometer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassAbsorptionCoefficient", DataType="AreaPerMassMeasure")]
        public AreaPerMassMeasure MassAbsorptionCoefficient {
            get {
                return this.massAbsorptionCoefficientField;
            }
            set {
                this.massAbsorptionCoefficientField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>High value of sieve mesh size: for 40/70 sand, this value is 70.</summary>
        [System.ComponentModel.DescriptionAttribute("High value of sieve mesh size: for 40/70 sand, this value is 70.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeshSizeHigh", DataType="NonNegativeLong")]
        public long MeshSizeHigh {
            get {
                return this.meshSizeHighField;
            }
            set {
                this.meshSizeHighField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeshSizeHighSpecified {
            get {
                return this.meshSizeHighFieldSpecified;
            }
            set {
                this.meshSizeHighFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Low value of sieve mesh size: for 40/70 sand, this value is 40.</summary>
        [System.ComponentModel.DescriptionAttribute("Low value of sieve mesh size: for 40/70 sand, this value is 40.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeshSizeLow", DataType="NonNegativeLong")]
        public long MeshSizeLow {
            get {
                return this.meshSizeLowField;
            }
            set {
                this.meshSizeLowField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MeshSizeLowSpecified {
            get {
                return this.meshSizeLowFieldSpecified;
            }
            set {
                this.meshSizeLowFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The unconfined compressive strength of the proppant.</summary>
        [System.ComponentModel.DescriptionAttribute("The unconfined compressive strength of the proppant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnconfinedCompressiveStrength", DataType="PressureMeasure")]
        public PressureMeasure UnconfinedCompressiveStrength {
            get {
                return this.unconfinedCompressiveStrengthField;
            }
            set {
                this.unconfinedCompressiveStrengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Proppant type or function.</summary>
        [System.ComponentModel.DescriptionAttribute("Proppant type or function.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProppantAgentKind", DataType="ProppantAgentKind")]
        public ProppantAgentKind ProppantAgentKind {
            get {
                return this.proppantAgentKindField;
            }
            set {
                this.proppantAgentKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProppantAgentKindSpecified {
            get {
                return this.proppantAgentKindFieldSpecified;
            }
            set {
                this.proppantAgentKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ISO13503_2Properties")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ISO13503_2Properties", DataType="StimISO13503_2Properties")]
        public StimISO13503_2Properties[] ISO13503_2Properties {
            get {
                return this.iSO13503_2PropertiesField;
            }
            set {
                this.iSO13503_2PropertiesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ISO13503_5Point")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ISO13503_5Point", DataType="StimISO13503_5Point")]
        public StimISO13503_5Point[] ISO13503_5Point {
            get {
                return this.iSO13503_5PointField;
            }
            set {
                this.iSO13503_5PointField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ProppantAgentKind {
        
        /// <remarks/>
        ceramic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resin coated ceramic")]
        resincoatedceramic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resin coated sand")]
        resincoatedsand,
        
        /// <remarks/>
        sand,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimJobMaterialCatalog {
        
        private StimAdditive[] additivesField;
        
        private StimProppantAgent[] proppantAgentsField;
        
        /// <remarks/>
        /// <summary>List of additives in the catalog.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Additives")]
        [System.ComponentModel.DescriptionAttribute("List of additives in the catalog.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Additives", DataType="StimAdditive")]
        public StimAdditive[] Additives {
            get {
                return this.additivesField;
            }
            set {
                this.additivesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>List of proppant agents in the catalog.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ProppantAgents")]
        [System.ComponentModel.DescriptionAttribute("List of proppant agents in the catalog.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProppantAgents", DataType="StimProppantAgent")]
        public StimProppantAgent[] ProppantAgents {
            get {
                return this.proppantAgentsField;
            }
            set {
                this.proppantAgentsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimJobDiversion {
        
        private string contractorField;
        
        private StimJobDiversionMethod methodField;
        
        private bool methodFieldSpecified;
        
        private string toolDescriptionField;
        
        private LengthMeasure elementSpacingField;
        
        /// <remarks/>
        /// <summary>Name of the diversion contractor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Name of the diversion contractor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Contractor", DataType="String2000")]
        public string Contractor {
            get {
                return this.contractorField;
            }
            set {
                this.contractorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diversion method used.</summary>
        [System.ComponentModel.DescriptionAttribute("The diversion method used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Method", DataType="StimJobDiversionMethod")]
        public StimJobDiversionMethod Method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MethodSpecified {
            get {
                return this.methodFieldSpecified;
            }
            set {
                this.methodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A supplier description of the diversion tool, such as its commercial name.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A supplier description of the diversion tool, such as its commercial name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolDescription", DataType="String2000")]
        public string ToolDescription {
            get {
                return this.toolDescriptionField;
            }
            set {
                this.toolDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Spacing between packer elements.</summary>
        [System.ComponentModel.DescriptionAttribute("Spacing between packer elements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ElementSpacing", DataType="LengthMeasure")]
        public LengthMeasure ElementSpacing {
            get {
                return this.elementSpacingField;
            }
            set {
                this.elementSpacingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum StimJobDiversionMethod {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ball sealer")]
        ballsealer,
        
        /// <remarks/>
        bands,
        
        /// <remarks/>
        chemical,
        
        /// <remarks/>
        fibers,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        packer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("solid particle")]
        solidparticle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("straddle packer")]
        straddlepacker,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimReservoirInterval {
        
        private MdInterval lithMdIntervalField;
        
        private PermeabilityRockMeasure lithFormationPermeabilityField;
        
        private PressureMeasure lithYoungsModulusField;
        
        private PressureMeasure lithPorePresField;
        
        private LengthMeasure lithNetPayThicknessField;
        
        private string lithNameField;
        
        private MdInterval grossPayMdIntervalField;
        
        private LengthMeasure grossPayThicknessField;
        
        private LengthMeasure netPayThicknessField;
        
        private PressureMeasure netPayPorePresField;
        
        private IsothermalCompressibilityMeasure netPayFluidCompressibilityField;
        
        private DynamicViscosityMeasure netPayFluidViscosityField;
        
        private string netPayNameField;
        
        private PermeabilityRockMeasure netPayFormationPermeabilityField;
        
        private DimensionlessMeasure lithPoissonsRatioField;
        
        private VolumePerVolumeMeasure netPayFormationPorosityField;
        
        private PermeabilityRockMeasure formationPermeabilityField;
        
        private VolumePerVolumeMeasure formationPorosityField;
        
        private string nameFormationField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Lithology measured depth interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Lithology measured depth interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithMdInterval", DataType="MdInterval")]
        public MdInterval LithMdInterval {
            get {
                return this.lithMdIntervalField;
            }
            set {
                this.lithMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Formation permeability, a measurement of the ability of a fluid to flow through a rock. Commonly measured in milliDarcys (1m2 = 0.000000000000986923 Darcy).</summary>
        [System.ComponentModel.DescriptionAttribute("Formation permeability, a measurement of the ability of a fluid to flow through a" +
            " rock. Commonly measured in milliDarcys (1m2 = 0.000000000000986923 Darcy).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithFormationPermeability", DataType="PermeabilityRockMeasure")]
        public PermeabilityRockMeasure LithFormationPermeability {
            get {
                return this.lithFormationPermeabilityField;
            }
            set {
                this.lithFormationPermeabilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Young's modulus (E) is a measure of the stiffness of an isotropic elastic material. It is also known as the Young modulus, modulus of elasticity, elastic modulus (though Young's modulus is actually one  of several elastic moduli such as the bulk modulus and the shear modulus) or tensile modulus. It is  defined as the ratio of the uniaxial stress over the uniaxial strain.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Young's modulus (E) is a measure of the stiffness of an isotropic elastic material. It is also known as the Young modulus, modulus of elasticity, elastic modulus (though Young's modulus is actually one  of several elastic moduli such as the bulk modulus and the shear modulus) or tensile modulus. It is  defined as the ratio of the uniaxial stress over the uniaxial strain.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithYoungsModulus", DataType="PressureMeasure")]
        public PressureMeasure LithYoungsModulus {
            get {
                return this.lithYoungsModulusField;
            }
            set {
                this.lithYoungsModulusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Refers to the pressure of fluids held within a soil or rock, in gaps between particles’ formation porosity.</summary>
        [System.ComponentModel.DescriptionAttribute("Refers to the pressure of fluids held within a soil or rock, in gaps between part" +
            "icles’ formation porosity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithPorePres", DataType="PressureMeasure")]
        public PressureMeasure LithPorePres {
            get {
                return this.lithPorePresField;
            }
            set {
                this.lithPorePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Net pay is computed. It is the thickness of rock that can deliver hydrocarbons to the wellbore formation.</summary>
        [System.ComponentModel.DescriptionAttribute("Net pay is computed. It is the thickness of rock that can deliver hydrocarbons to" +
            " the wellbore formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithNetPayThickness", DataType="LengthMeasure")]
        public LengthMeasure LithNetPayThickness {
            get {
                return this.lithNetPayThicknessField;
            }
            set {
                this.lithNetPayThicknessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A name for the formation lithology.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A name for the formation lithology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithName", DataType="String2000")]
        public string LithName {
            get {
                return this.lithNameField;
            }
            set {
                this.lithNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the bottom of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the bottom of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossPayMdInterval", DataType="MdInterval")]
        public MdInterval GrossPayMdInterval {
            get {
                return this.grossPayMdIntervalField;
            }
            set {
                this.grossPayMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total thickness of the interval being treated, whether or not it is productive.</summary>
        [System.ComponentModel.DescriptionAttribute("The total thickness of the interval being treated, whether or not it is productiv" +
            "e.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrossPayThickness", DataType="LengthMeasure")]
        public LengthMeasure GrossPayThickness {
            get {
                return this.grossPayThicknessField;
            }
            set {
                this.grossPayThicknessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The thickness of the most productive part of the interval. Net pay is a subset of the gross.</summary>
        [System.ComponentModel.DescriptionAttribute("The thickness of the most productive part of the interval. Net pay is a subset of" +
            " the gross.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPayThickness", DataType="LengthMeasure")]
        public LengthMeasure NetPayThickness {
            get {
                return this.netPayThicknessField;
            }
            set {
                this.netPayThicknessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pore pressure of the net pay.</summary>
        [System.ComponentModel.DescriptionAttribute("The pore pressure of the net pay.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPayPorePres", DataType="PressureMeasure")]
        public PressureMeasure NetPayPorePres {
            get {
                return this.netPayPorePresField;
            }
            set {
                this.netPayPorePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume change of the fluid in the net pay when pressure is applied.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume change of the fluid in the net pay when pressure is applied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPayFluidCompressibility", DataType="IsothermalCompressibilityMeasure")]
        public IsothermalCompressibilityMeasure NetPayFluidCompressibility {
            get {
                return this.netPayFluidCompressibilityField;
            }
            set {
                this.netPayFluidCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>With respect to the net pay, a measurement of the internal resistance of a fluid to flow against itself. Expressed as the ratio of shear stress to shear rate.</summary>
        [System.ComponentModel.DescriptionAttribute("With respect to the net pay, a measurement of the internal resistance of a fluid " +
            "to flow against itself. Expressed as the ratio of shear stress to shear rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPayFluidViscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure NetPayFluidViscosity {
            get {
                return this.netPayFluidViscosityField;
            }
            set {
                this.netPayFluidViscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name used for the net pay zone.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The name used for the net pay zone.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPayName", DataType="String2000")]
        public string NetPayName {
            get {
                return this.netPayNameField;
            }
            set {
                this.netPayNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The permeability of the net pay of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("The permeability of the net pay of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPayFormationPermeability", DataType="PermeabilityRockMeasure")]
        public PermeabilityRockMeasure NetPayFormationPermeability {
            get {
                return this.netPayFormationPermeabilityField;
            }
            set {
                this.netPayFormationPermeabilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ratio of the relative contraction strain, or transverse strain (normal to the applied load), divided by the relative extension strain, or axial strain (in the direction of the applied load).</summary>
        [System.ComponentModel.DescriptionAttribute("The ratio of the relative contraction strain, or transverse strain (normal to the" +
            " applied load), divided by the relative extension strain, or axial strain (in th" +
            "e direction of the applied load).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithPoissonsRatio", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure LithPoissonsRatio {
            get {
                return this.lithPoissonsRatioField;
            }
            set {
                this.lithPoissonsRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The porosity of the net pay formation.</summary>
        [System.ComponentModel.DescriptionAttribute("The porosity of the net pay formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPayFormationPorosity", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NetPayFormationPorosity {
            get {
                return this.netPayFormationPorosityField;
            }
            set {
                this.netPayFormationPorosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Permeability of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("Permeability of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationPermeability", DataType="PermeabilityRockMeasure")]
        public PermeabilityRockMeasure FormationPermeability {
            get {
                return this.formationPermeabilityField;
            }
            set {
                this.formationPermeabilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Porosity of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("Porosity of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationPorosity", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure FormationPorosity {
            get {
                return this.formationPorosityField;
            }
            set {
                this.formationPorosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the formation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Name of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameFormation", DataType="String2000")]
        public string NameFormation {
            get {
                return this.nameFormationField;
            }
            set {
                this.nameFormationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimReservoirInterval</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimReservoirInterval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IsothermalCompressibilityMeasure {
        
        private IsothermalCompressibilityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="IsothermalCompressibilityUom")]
        public IsothermalCompressibilityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum IsothermalCompressibilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/(kW.h)")]
        dm3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/MJ")]
        dm3MJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kW.h)")]
        m3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/J")]
        m3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3/J")]
        mm3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]/(hp.h)")]
        ptUKhph,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DynamicViscosityMeasure {
        
        private DynamicViscosityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="DynamicViscosityUom")]
        public DynamicViscosityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DynamicViscosityUom {
        
        /// <remarks/>
        cP,
        
        /// <remarks/>
        dP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.s/cm2")]
        dynescm2,
        
        /// <remarks/>
        EP,
        
        /// <remarks/>
        fP,
        
        /// <remarks/>
        GP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.s/m2")]
        kgfsm2,
        
        /// <remarks/>
        kP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/ft2")]
        lbfsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/in2")]
        lbfsin2,
        
        /// <remarks/>
        mP,
        
        /// <remarks/>
        MP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa.s")]
        mPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.s/m2")]
        Nsm2,
        
        /// <remarks/>
        nP,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
        
        /// <remarks/>
        pP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.s")]
        psis,
        
        /// <remarks/>
        TP,
        
        /// <remarks/>
        uP,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerVolumeMeasure {
        
        private VolumePerVolumeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerVolumeUom")]
        public VolumePerVolumeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[vol]")]
        vol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/ft3")]
        Item0001bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/m3")]
        Item0001bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/bbl")]
        Item0001galUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/gal[UK]")]
        Item0001galUKgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/bbl")]
        Item0001galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/ft3")]
        Item0001galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/gal[US]")]
        Item0001galUSgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 pt[UK]/bbl")]
        Item0001ptUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 bbl/bbl")]
        Item001bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 gal[US]/bbl")]
        Item01galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 L/bbl")]
        Item01Lbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 pt[US]/bbl")]
        Item01ptUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/bbl")]
        Item1000ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/m3")]
        Item1000m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 acre.ft/bbl")]
        Item1E6acreftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/ft3")]
        Item1E6bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/m3")]
        Item1E6bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/(acre.ft)")]
        Item1E6bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/(acre.ft)")]
        Item1E6ft3acreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/bbl")]
        Item1E6ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(acre.ft)")]
        bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/bbl")]
        bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft3")]
        bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/m3")]
        bblm3,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/cm3")]
        cm3cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/L")]
        cm3L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/m3")]
        cm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m3")]
        dm3m3,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/bbl")]
        ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft3")]
        ft3ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/ft3")]
        galUKft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/bbl")]
        galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft3")]
        galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m3")]
        Lm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(ha.m)")]
        m3ham,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/bbl")]
        m3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m3")]
        m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[UK]")]
        mLgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[US]")]
        mLgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/mL")]
        mLmL,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]")]
        ppmvol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerLengthMeasure {
        
        private VolumePerLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerLengthUom")]
        public VolumePerLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dm3/km")]
        Item001dm3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/km")]
        Item001Lkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft")]
        bblft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/in")]
        bblin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/mi")]
        bblmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m")]
        dm3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft")]
        ft3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/mi")]
        galUKmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft")]
        galUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/mi")]
        galUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in3/ft")]
        in3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m")]
        Lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/km")]
        m3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m")]
        m3m,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimTubular {
        
        private string typeField;
        
        private LengthMeasure idField;
        
        private LengthMeasure odField;
        
        private MassPerLengthMeasure weightField;
        
        private MdInterval tubularMdIntervalField;
        
        private TvdInterval tubularTvdIntervalField;
        
        private VolumePerLengthMeasure volumeFactorField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The type of tubular (e.g., casing, tubing, liner, packer, open hole, other).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of tubular (e.g., casing, tubing, liner, packer, open hole, other).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The inside diameter of the tubular used.</summary>
        [System.ComponentModel.DescriptionAttribute("The inside diameter of the tubular used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Id", DataType="LengthMeasure")]
        public LengthMeasure Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The outside diameter of the tubular used.</summary>
        [System.ComponentModel.DescriptionAttribute("The outside diameter of the tubular used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Od", DataType="LengthMeasure")]
        public LengthMeasure Od {
            get {
                return this.odField;
            }
            set {
                this.odField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The weight per length of the tubular.</summary>
        [System.ComponentModel.DescriptionAttribute("The weight per length of the tubular.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Weight", DataType="MassPerLengthMeasure")]
        public MassPerLengthMeasure Weight {
            get {
                return this.weightField;
            }
            set {
                this.weightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval over which the tubular was used.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval over which the tubular was used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TubularMdInterval", DataType="MdInterval")]
        public MdInterval TubularMdInterval {
            get {
                return this.tubularMdIntervalField;
            }
            set {
                this.tubularMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval over which the tubular was used.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval over which the tubular was used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TubularTvdInterval", DataType="TvdInterval")]
        public TvdInterval TubularTvdInterval {
            get {
                return this.tubularTvdIntervalField;
            }
            set {
                this.tubularTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume per length of the tubular.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume per length of the tubular.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeFactor", DataType="VolumePerLengthMeasure")]
        public VolumePerLengthMeasure VolumeFactor {
            get {
                return this.volumeFactorField;
            }
            set {
                this.volumeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimTubular.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimTubular.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerLengthMeasure {
        
        private MassPerLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerLengthUom")]
        public MassPerLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/cm2")]
        kgmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("klbm/in")]
        klbmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft")]
        lbmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/in")]
        Mgin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimFlowPath {
        
        private PressureMeasure avgPmaxPacPresField;
        
        private DimensionlessMeasure frictionFactorOpenHoleField;
        
        private PressureMeasure avgPmaxWeaklinkPresField;
        
        private PressureMeasure breakDownPresField;
        
        private MeasuredDepthCoord bridgePlugMDField;
        
        private ForcePerVolumeMeasure fractureGradientField;
        
        private StimFlowPathType kindField;
        
        private bool kindFieldSpecified;
        
        private PressureMeasure maxPmaxPacPresField;
        
        private PressureMeasure maxPmaxWeaklinkPresField;
        
        private MeasuredDepthCoord packerMDField;
        
        private DimensionlessMeasure frictionFactorPipeField;
        
        private MeasuredDepthCoord tubingBottomMDField;
        
        private StimTubular[] tubularField;
        
        /// <remarks/>
        /// <summary>PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this flow path.</summary>
        [System.ComponentModel.DescriptionAttribute(@"PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the average of all the pmax pressures calculated for this flow path.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPmaxPacPres", DataType="PressureMeasure")]
        public PressureMeasure AvgPmaxPacPres {
            get {
                return this.avgPmaxPacPresField;
            }
            set {
                this.avgPmaxPacPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The friction factor used to compute openhole pressure loss.</summary>
        [System.ComponentModel.DescriptionAttribute("The friction factor used to compute openhole pressure loss.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionFactorOpenHole", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure FrictionFactorOpenHole {
            get {
                return this.frictionFactorOpenHoleField;
            }
            set {
                this.frictionFactorOpenHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.</summary>
        [System.ComponentModel.DescriptionAttribute("Average allowable pressure for the zone of interest with respect to the bottomhol" +
            "e assembly during the stimulation services.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPmaxWeaklinkPres", DataType="PressureMeasure")]
        public PressureMeasure AvgPmaxWeaklinkPres {
            get {
                return this.avgPmaxWeaklinkPresField;
            }
            set {
                this.avgPmaxWeaklinkPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure at which the formation broke.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at which the formation broke.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BreakDownPres", DataType="PressureMeasure")]
        public PressureMeasure BreakDownPres {
            get {
                return this.breakDownPresField;
            }
            set {
                this.breakDownPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of a bridge plug.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of a bridge plug.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BridgePlugMD", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord BridgePlugMD {
            get {
                return this.bridgePlugMDField;
            }
            set {
                this.bridgePlugMDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation fracture gradient for this treatment interval.</summary>
        [System.ComponentModel.DescriptionAttribute("The formation fracture gradient for this treatment interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureGradient", DataType="ForcePerVolumeMeasure")]
        public ForcePerVolumeMeasure FractureGradient {
            get {
                return this.fractureGradientField;
            }
            set {
                this.fractureGradientField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of flow path.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of flow path.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="StimFlowPathType")]
        public StimFlowPathType Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the maximum of all the pmax pressures calculated for this flow path.</summary>
        [System.ComponentModel.DescriptionAttribute(@"PMax prediction allows the tool assembly to be designed with expected pressures. It determines maximum allowable surface pressure and is typically calculated as a single number by which the pressure relief valves are set. This variable is the maximum of all the pmax pressures calculated for this flow path.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxPmaxPacPres", DataType="PressureMeasure")]
        public PressureMeasure MaxPmaxPacPres {
            get {
                return this.maxPmaxPacPresField;
            }
            set {
                this.maxPmaxPacPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum allowable pressure for the zone of interest with respect to the bottomhole assembly during the stimulation services.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum allowable pressure for the zone of interest with respect to the bottomhol" +
            "e assembly during the stimulation services.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxPmaxWeaklinkPres", DataType="PressureMeasure")]
        public PressureMeasure MaxPmaxWeaklinkPres {
            get {
                return this.maxPmaxWeaklinkPresField;
            }
            set {
                this.maxPmaxWeaklinkPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of a packer.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of a packer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PackerMD", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord PackerMD {
            get {
                return this.packerMDField;
            }
            set {
                this.packerMDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The friction factor for the pipe, tubing, and/or casing.</summary>
        [System.ComponentModel.DescriptionAttribute("The friction factor for the pipe, tubing, and/or casing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionFactorPipe", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure FrictionFactorPipe {
            get {
                return this.frictionFactorPipeField;
            }
            set {
                this.frictionFactorPipeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum measured depth of the tubing used for treatment of a stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum measured depth of the tubing used for treatment of a stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TubingBottomMD", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord TubingBottomMD {
            get {
                return this.tubingBottomMDField;
            }
            set {
                this.tubingBottomMDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Tubular")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tubular", DataType="StimTubular")]
        public StimTubular[] Tubular {
            get {
                return this.tubularField;
            }
            set {
                this.tubularField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MeasuredDepthCoord {
        
        private LengthUom uomField;
        
        private string datumField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>Unit of measure used by this measured depth coordinate.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure used by this measured depth coordinate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the vertical datums associated with elevation, vertical depth, and measured depth coordinates.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Defines the vertical datums associated with elevation, vertical depth, and measur" +
            "ed depth coordinates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("datum", DataType="String64")]
        public string datum {
            get {
                return this.datumField;
            }
            set {
                this.datumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ForcePerVolumeMeasure {
        
        private ForcePerVolumeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ForcePerVolumeUom")]
        public ForcePerVolumeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 psi/ft")]
        Item0001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 psi/ft")]
        Item001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/ft")]
        atmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/hm")]
        atmhm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/m")]
        atmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/km")]
        barkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/m")]
        barm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GPa/cm")]
        GPacm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/hm")]
        kPahm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/m")]
        kPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft3")]
        lbfft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/gal[US]")]
        lbfgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/m")]
        MPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m3")]
        Nm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m")]
        Pam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/ft")]
        psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/m")]
        psim,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum StimFlowPathType {
        
        /// <remarks/>
        annulus,
        
        /// <remarks/>
        casing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill pipe")]
        drillpipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("open hole")]
        openhole,
        
        /// <remarks/>
        tubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing and annulus")]
        tubingandannulus,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class UnitlessMeasure {
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimFluid {
        
        private string nameField;
        
        private StimFluidKind kindField;
        
        private bool kindFieldSpecified;
        
        private StimFluidSubtype subtypeField;
        
        private bool subtypeFieldSpecified;
        
        private string purposeField;
        
        private string descriptionField;
        
        private string supplierField;
        
        private bool isKillFluidField;
        
        private bool isKillFluidFieldSpecified;
        
        private VolumeMeasure volumeField;
        
        private MassPerVolumeMeasure densityField;
        
        private ThermodynamicTemperatureMeasure fluidTempField;
        
        private PressureMeasure gelStrength10MinField;
        
        private PressureMeasure gelStrength10SecField;
        
        private DimensionlessMeasure specificGravityField;
        
        private DynamicViscosityMeasure viscosityField;
        
        private UnitlessMeasure phField;
        
        private StimMaterialQuantity[] additiveConcentrationField;
        
        /// <remarks/>
        /// <summary>The name of the fluid.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The name of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String2000")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid types.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid types.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="StimFluidKind")]
        public StimFluidKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KindSpecified {
            get {
                return this.kindFieldSpecified;
            }
            set {
                this.kindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fluid subtypes.</summary>
        [System.ComponentModel.DescriptionAttribute("The fluid subtypes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Subtype", DataType="StimFluidSubtype")]
        public StimFluidSubtype Subtype {
            get {
                return this.subtypeField;
            }
            set {
                this.subtypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubtypeSpecified {
            get {
                return this.subtypeFieldSpecified;
            }
            set {
                this.subtypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The purpose of the fluid.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The purpose of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Purpose", DataType="String2000")]
        public string Purpose {
            get {
                return this.purposeField;
            }
            set {
                this.purposeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The description of the fluid.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The description of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The supplier of the fluid.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The supplier of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Supplier", DataType="String2000")]
        public string Supplier {
            get {
                return this.supplierField;
            }
            set {
                this.supplierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is the fluid a kill fluid?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is the fluid a kill fluid?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsKillFluid", DataType="boolean")]
        public bool IsKillFluid {
            get {
                return this.isKillFluidField;
            }
            set {
                this.isKillFluidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsKillFluidSpecified {
            get {
                return this.isKillFluidFieldSpecified;
            }
            set {
                this.isKillFluidFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Volume", DataType="VolumeMeasure")]
        public VolumeMeasure Volume {
            get {
                return this.volumeField;
            }
            set {
                this.volumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature of the fluid at surface.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature of the fluid at surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidTemp", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure FluidTemp {
            get {
                return this.fluidTempField;
            }
            set {
                this.fluidTempField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The shear stress measured at low shear rate after a mud has set quiescently for 10 minutes.</summary>
        [System.ComponentModel.DescriptionAttribute("The shear stress measured at low shear rate after a mud has set quiescently for 1" +
            "0 minutes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GelStrength10Min", DataType="PressureMeasure")]
        public PressureMeasure GelStrength10Min {
            get {
                return this.gelStrength10MinField;
            }
            set {
                this.gelStrength10MinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The shear stress measured at low shear rate after a mud has set quiescently for 10 seconds.</summary>
        [System.ComponentModel.DescriptionAttribute("The shear stress measured at low shear rate after a mud has set quiescently for 1" +
            "0 seconds.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GelStrength10Sec", DataType="PressureMeasure")]
        public PressureMeasure GelStrength10Sec {
            get {
                return this.gelStrength10SecField;
            }
            set {
                this.gelStrength10SecField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The specific gravity of the fluid at surface.</summary>
        [System.ComponentModel.DescriptionAttribute("The specific gravity of the fluid at surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpecificGravity", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure SpecificGravity {
            get {
                return this.specificGravityField;
            }
            set {
                this.specificGravityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Viscosity of stimulation fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("Viscosity of stimulation fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Viscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return this.viscosityField;
            }
            set {
                this.viscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pH of the fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("The pH of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("pH", DataType="UnitlessMeasure")]
        public UnitlessMeasure pH {
            get {
                return this.phField;
            }
            set {
                this.phField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AdditiveConcentration")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AdditiveConcentration", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] AdditiveConcentration {
            get {
                return this.additiveConcentrationField;
            }
            set {
                this.additiveConcentrationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum StimFluidKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acid-based")]
        acidbased,
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil-based")]
        oilbased,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water-based")]
        waterbased,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum StimFluidSubtype {
        
        /// <remarks/>
        acid,
        
        /// <remarks/>
        @base,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbon dioxide")]
        carbondioxide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbon dioxide and nitrogen")]
        carbondioxideandnitrogen,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carbon dioxide and water")]
        carbondioxideandwater,
        
        /// <remarks/>
        condensate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cross-linked gel")]
        crosslinkedgel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("crude oil")]
        crudeoil,
        
        /// <remarks/>
        diesel,
        
        /// <remarks/>
        foam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fracturing oil")]
        fracturingoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fresh water")]
        freshwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gelled acid")]
        gelledacid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gelled condensate")]
        gelledcondensate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gelled crude")]
        gelledcrude,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gelled diesel")]
        gelleddiesel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gelled oil")]
        gelledoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gelled salt water")]
        gelledsaltwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hot condensate")]
        hotcondensate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hot fresh water")]
        hotfreshwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hot oil")]
        hotoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hot salt water")]
        hotsaltwater,
        
        /// <remarks/>
        hybrid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear gel")]
        lineargel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("liquefied petroleum gas")]
        liquefiedpetroleumgas,
        
        /// <remarks/>
        nitrogen,
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("produced water")]
        producedwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("salt water")]
        saltwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slick water")]
        slickwater,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumeMeasure {
        
        private VolumeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumeUom")]
        public VolumeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl")]
        Item1000bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3")]
        Item1000ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[UK]")]
        Item1000galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[US]")]
        Item1000galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3")]
        Item1000m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 gal[US]")]
        Item1E6galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E12 ft3")]
        Item1E12ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl")]
        Item1E6bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3")]
        Item1E6ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3")]
        Item1E6m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 bbl")]
        Item1E9bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 ft3")]
        Item1E9ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acre.ft")]
        acreft,
        
        /// <remarks/>
        bbl,
        
        /// <remarks/>
        cm3,
        
        /// <remarks/>
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[UK]")]
        flozUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[US]")]
        flozUS,
        
        /// <remarks/>
        ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]")]
        galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]")]
        galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ha.m")]
        ham,
        
        /// <remarks/>
        hL,
        
        /// <remarks/>
        in3,
        
        /// <remarks/>
        km3,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        m3,
        
        /// <remarks/>
        mi3,
        
        /// <remarks/>
        mL,
        
        /// <remarks/>
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]")]
        ptUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[US]")]
        ptUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[UK]")]
        qtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[US]")]
        qtUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um2.m")]
        um2m,
        
        /// <remarks/>
        yd3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimMaterialQuantity {
        
        private MassPerVolumeMeasure densityField;
        
        private MassMeasure massField;
        
        private MassPerTimeMeasure massFlowRateField;
        
        private VolumeMeasure stdVolumeField;
        
        private VolumeMeasure volumeField;
        
        private VolumePerVolumeMeasure volumeConcentrationField;
        
        private VolumePerTimeMeasure volumetricFlowRateField;
        
        private string materialReferenceField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The density of material used.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of material used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mass of material used.  This should be used without specifying any of the other material measures (e.g. volume, standard volume, etc.).</summary>
        [System.ComponentModel.DescriptionAttribute("The mass of material used.  This should be used without specifying any of the oth" +
            "er material measures (e.g. volume, standard volume, etc.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mass", DataType="MassMeasure")]
        public MassMeasure Mass {
            get {
                return this.massField;
            }
            set {
                this.massField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rate at which mass of material is flowing.</summary>
        [System.ComponentModel.DescriptionAttribute("Rate at which mass of material is flowing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassFlowRate", DataType="MassPerTimeMeasure")]
        public MassPerTimeMeasure MassFlowRate {
            get {
                return this.massFlowRateField;
            }
            set {
                this.massFlowRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The standard volume of material used. Standard volume is the volume measured under the same conditions. This should be used without specifying any of the other material measures (e.g., mass, volume, etc.).</summary>
        [System.ComponentModel.DescriptionAttribute("The standard volume of material used. Standard volume is the volume measured unde" +
            "r the same conditions. This should be used without specifying any of the other m" +
            "aterial measures (e.g., mass, volume, etc.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StdVolume", DataType="VolumeMeasure")]
        public VolumeMeasure StdVolume {
            get {
                return this.stdVolumeField;
            }
            set {
                this.stdVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume of material used.  This should be used without specifying any of the other material measures (e.g. mass, standard volume, etc.).</summary>
        [System.ComponentModel.DescriptionAttribute("The volume of material used.  This should be used without specifying any of the o" +
            "ther material measures (e.g. mass, standard volume, etc.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Volume", DataType="VolumeMeasure")]
        public VolumeMeasure Volume {
            get {
                return this.volumeField;
            }
            set {
                this.volumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume per volume measure of material used.  This should be used without specifying any of the other material measures (e.g. mass, density, standard volume, etc.).</summary>
        [System.ComponentModel.DescriptionAttribute("The volume per volume measure of material used.  This should be used without spec" +
            "ifying any of the other material measures (e.g. mass, density, standard volume, " +
            "etc.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeConcentration", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure VolumeConcentration {
            get {
                return this.volumeConcentrationField;
            }
            set {
                this.volumeConcentrationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rate at which the volume of material is flowing.</summary>
        [System.ComponentModel.DescriptionAttribute("Rate at which the volume of material is flowing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumetricFlowRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure VolumetricFlowRate {
            get {
                return this.volumetricFlowRateField;
            }
            set {
                this.volumetricFlowRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Material ID is  equal to AbstractStimMaterial.RefId.  This is a reference to the UID of the StimMaterial in the StimJobMaterialCatalog.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Material ID is  equal to AbstractStimMaterial.RefId.  This is a reference to the " +
            "UID of the StimMaterial in the StimJobMaterialCatalog.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaterialReference", DataType="String64")]
        public string MaterialReference {
            get {
                return this.materialReferenceField;
            }
            set {
                this.materialReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimMaterialQuantity</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimMaterialQuantity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassMeasure {
        
        private MassUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassUom")]
        public MassUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassUom {
        
        /// <remarks/>
        ag,
        
        /// <remarks/>
        cg,
        
        /// <remarks/>
        ct,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[UK]")]
        cwtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[US]")]
        cwtUS,
        
        /// <remarks/>
        Eg,
        
        /// <remarks/>
        fg,
        
        /// <remarks/>
        g,
        
        /// <remarks/>
        Gg,
        
        /// <remarks/>
        grain,
        
        /// <remarks/>
        hg,
        
        /// <remarks/>
        kg,
        
        /// <remarks/>
        klbm,
        
        /// <remarks/>
        lbm,
        
        /// <remarks/>
        mg,
        
        /// <remarks/>
        Mg,
        
        /// <remarks/>
        ng,
        
        /// <remarks/>
        ozm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ozm[troy]")]
        ozmtroy,
        
        /// <remarks/>
        pg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sack[94lbm]")]
        sack94lbm,
        
        /// <remarks/>
        t,
        
        /// <remarks/>
        Tg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]")]
        tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]")]
        tonUS,
        
        /// <remarks/>
        ug,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MassPerTimeMeasure {
        
        private MassPerTimeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MassPerTimeUom")]
        public MassPerTimeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 lbm/a")]
        Item1E6lbma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/s")]
        gs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/d")]
        kgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/h")]
        kgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/min")]
        kgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/s")]
        kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/d")]
        lbmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/h")]
        lbmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/min")]
        lbmmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/s")]
        lbms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/a")]
        Mga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/d")]
        Mgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/h")]
        Mgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/min")]
        Mgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/a")]
        ta,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/d")]
        td,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/h")]
        th,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/min")]
        tmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/a")]
        tonUKa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/d")]
        tonUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/h")]
        tonUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/min")]
        tonUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/a")]
        tonUSa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/d")]
        tonUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/h")]
        tonUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/min")]
        tonUSmin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerTimeMeasure {
        
        private VolumePerTimeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerTimeUom")]
        public VolumePerTimeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 cm3/min")]
        Item130cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl/d")]
        Item1000bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/d")]
        Item1000ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/d")]
        Item1000m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/h")]
        Item1000m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/d")]
        Item1E6bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/d")]
        Item1E6ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3/d")]
        Item1E6m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d")]
        bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h")]
        bblh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/min")]
        bblmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/h")]
        cm3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/min")]
        cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/s")]
        cm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s")]
        dm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d")]
        ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h")]
        ft3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min")]
        ft3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s")]
        ft3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/d")]
        galUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h")]
        galUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min")]
        galUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/d")]
        galUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h")]
        galUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min")]
        galUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/h")]
        Lh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/min")]
        Lmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s")]
        Ls,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d")]
        m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/h")]
        m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/min")]
        m3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s")]
        m3s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimJobStep {
        
        private string stepNameField;
        
        private long stepNumberField;
        
        private string kindField;
        
        private string descriptionField;
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private VolumePerVolumeMeasure avgBaseFluidQualityField;
        
        private VolumePerVolumeMeasure avgCO2BaseFluidQualityField;
        
        private PowerMeasure avgHydraulicPowerField;
        
        private VolumePerVolumeMeasure avgInternalPhaseFractionField;
        
        private StimMaterialQuantity[] avgMaterialUsedRateField;
        
        private StimMaterialQuantity[] avgMaterialUseRateBottomholeField;
        
        private VolumePerVolumeMeasure avgN2BaseFluidQualityField;
        
        private PressureMeasure avgPresBottomholeField;
        
        private PressureMeasure avgPresSurfaceField;
        
        private MassPerVolumeMeasure avgPropConcField;
        
        private MassPerVolumeMeasure avgProppantConcBottomholeField;
        
        private MassPerVolumeMeasure avgProppantConcSurfaceField;
        
        private MassPerVolumeMeasure avgSlurryPropConcField;
        
        private VolumePerTimeMeasure avgSlurryRateField;
        
        private ThermodynamicTemperatureMeasure avgTemperatureField;
        
        private VolumePerTimeMeasure avgVolumeRateWellheadField;
        
        private long ballsRecoveredField;
        
        private bool ballsRecoveredFieldSpecified;
        
        private long ballsUsedField;
        
        private bool ballsUsedFieldSpecified;
        
        private VolumeMeasure baseFluidBypassVolField;
        
        private VolumeMeasure baseFluidVolField;
        
        private VolumePerTimeMeasure endDirtyMaterialRateField;
        
        private StimMaterialQuantity[] endMaterialUsedRateField;
        
        private StimMaterialQuantity[] endMaterialUsedRateBottomholeField;
        
        private PressureMeasure endPresBottomholeField;
        
        private PressureMeasure endPresSurfaceField;
        
        private MassPerVolumeMeasure endProppantConcBottomholeField;
        
        private MassPerVolumeMeasure endProppantConcSurfaceField;
        
        private VolumePerTimeMeasure endRateSurfaceCO2Field;
        
        private VolumePerTimeMeasure endStdRateSurfaceN2Field;
        
        private VolumeMeasure fluidVolBaseField;
        
        private VolumeMeasure fluidVolCirculatedField;
        
        private VolumeMeasure fluidVolPumpedField;
        
        private VolumeMeasure fluidVolReturnedField;
        
        private VolumeMeasure fluidVolSlurryField;
        
        private VolumeMeasure fluidVolSqueezedField;
        
        private VolumeMeasure fluidVolWashedField;
        
        private ForcePerVolumeMeasure fractureGradientFinalField;
        
        private ForcePerVolumeMeasure fractureGradientInitialField;
        
        private DimensionlessMeasure frictionFactorField;
        
        private PowerMeasure maxHydraulicPowerField;
        
        private PressureMeasure maxPresSurfaceField;
        
        private MassPerVolumeMeasure maxProppantConcBottomholeField;
        
        private MassPerVolumeMeasure maxProppantConcSurfaceField;
        
        private MassPerVolumeMeasure maxSlurryPropConcField;
        
        private VolumePerTimeMeasure maxVolumeRateWellheadField;
        
        private PressureMeasure pipeFrictionPressureField;
        
        private TimeMeasure pumpTimeField;
        
        private VolumePerTimeMeasure startDirtyMaterialRateField;
        
        private StimMaterialQuantity[] startMaterialUsedRateField;
        
        private StimMaterialQuantity[] startMaterialUsedRateBottomHoleField;
        
        private PressureMeasure startPresBottomholeField;
        
        private PressureMeasure startPresSurfaceField;
        
        private MassPerVolumeMeasure startProppantConcBottomholeField;
        
        private MassPerVolumeMeasure startProppantConcSurfaceField;
        
        private VolumeMeasure wellheadVolField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private StimMaterialQuantity[] materialUsedField;
        
        private StimMaterialQuantity[] maxMaterialUsedRateField;
        
        private StimFluid fluidField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A human readable name for the step.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A human readable name for the step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepName", DataType="String2000")]
        public string StepName {
            get {
                return this.stepNameField;
            }
            set {
                this.stepNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Step number.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Step number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepNumber", DataType="PositiveLong")]
        public long StepNumber {
            get {
                return this.stepNumberField;
            }
            set {
                this.stepNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of step.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The type of step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String2000")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A short description of the step.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A short description of the step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the step started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the step started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the step ended.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the step ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Base quality percentage of foam.</summary>
        [System.ComponentModel.DescriptionAttribute("Base quality percentage of foam.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgBaseFluidQuality", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure AvgBaseFluidQuality {
            get {
                return this.avgBaseFluidQualityField;
            }
            set {
                this.avgBaseFluidQualityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Base quality carbon dioxide percent of foam.</summary>
        [System.ComponentModel.DescriptionAttribute("Base quality carbon dioxide percent of foam.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgCO2BaseFluidQuality", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure AvgCO2BaseFluidQuality {
            get {
                return this.avgCO2BaseFluidQualityField;
            }
            set {
                this.avgCO2BaseFluidQualityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average hydraulic horse power used.</summary>
        [System.ComponentModel.DescriptionAttribute("Average hydraulic horse power used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgHydraulicPower", DataType="PowerMeasure")]
        public PowerMeasure AvgHydraulicPower {
            get {
                return this.avgHydraulicPowerField;
            }
            set {
                this.avgHydraulicPowerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Internal gas phase percentage of the foam.</summary>
        [System.ComponentModel.DescriptionAttribute("Internal gas phase percentage of the foam.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgInternalPhaseFraction", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure AvgInternalPhaseFraction {
            get {
                return this.avgInternalPhaseFractionField;
            }
            set {
                this.avgInternalPhaseFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average material used per minute entering the flow stream.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AvgMaterialUsedRate")]
        [System.ComponentModel.DescriptionAttribute("Average material used per minute entering the flow stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgMaterialUsedRate", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] AvgMaterialUsedRate {
            get {
                return this.avgMaterialUsedRateField;
            }
            set {
                this.avgMaterialUsedRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average material amount used (pumped) per minute at bottomhole.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AvgMaterialUseRateBottomhole")]
        [System.ComponentModel.DescriptionAttribute("Average material amount used (pumped) per minute at bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgMaterialUseRateBottomhole", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] AvgMaterialUseRateBottomhole {
            get {
                return this.avgMaterialUseRateBottomholeField;
            }
            set {
                this.avgMaterialUseRateBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Base quality nitrogen percentage of foam.</summary>
        [System.ComponentModel.DescriptionAttribute("Base quality nitrogen percentage of foam.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgN2BaseFluidQuality", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure AvgN2BaseFluidQuality {
            get {
                return this.avgN2BaseFluidQualityField;
            }
            set {
                this.avgN2BaseFluidQualityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average bottomhole pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Average bottomhole pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPresBottomhole", DataType="PressureMeasure")]
        public PressureMeasure AvgPresBottomhole {
            get {
                return this.avgPresBottomholeField;
            }
            set {
                this.avgPresBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average surface pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Average surface pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPresSurface", DataType="PressureMeasure")]
        public PressureMeasure AvgPresSurface {
            get {
                return this.avgPresSurfaceField;
            }
            set {
                this.avgPresSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average proppant concentration at the wellhead.  ppa: pounds proppant added per volume measure kgpa: kilograms proppant added per volume measure</summary>
        [System.ComponentModel.DescriptionAttribute("Average proppant concentration at the wellhead.  ppa: pounds proppant added per v" +
            "olume measure kgpa: kilograms proppant added per volume measure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPropConc", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AvgPropConc {
            get {
                return this.avgPropConcField;
            }
            set {
                this.avgPropConcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average proppant concentration at bottomhole.</summary>
        [System.ComponentModel.DescriptionAttribute("The average proppant concentration at bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgProppantConcBottomhole", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AvgProppantConcBottomhole {
            get {
                return this.avgProppantConcBottomholeField;
            }
            set {
                this.avgProppantConcBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average proppant concentration at the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("The average proppant concentration at the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgProppantConcSurface", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AvgProppantConcSurface {
            get {
                return this.avgProppantConcSurfaceField;
            }
            set {
                this.avgProppantConcSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average proppant concentration exiting the equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("Average proppant concentration exiting the equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgSlurryPropConc", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AvgSlurryPropConc {
            get {
                return this.avgSlurryPropConcField;
            }
            set {
                this.avgSlurryPropConcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average slurry return rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Average slurry return rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgSlurryRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure AvgSlurryRate {
            get {
                return this.avgSlurryRateField;
            }
            set {
                this.avgSlurryRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average fluid temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Average fluid temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure AvgTemperature {
            get {
                return this.avgTemperatureField;
            }
            set {
                this.avgTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average volume per minute at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("Average volume per minute at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgVolumeRateWellhead", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure AvgVolumeRateWellhead {
            get {
                return this.avgVolumeRateWellheadField;
            }
            set {
                this.avgVolumeRateWellheadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Balls recovered during execution of the step.</summary>
        [System.ComponentModel.DescriptionAttribute("Balls recovered during execution of the step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BallsRecovered", DataType="NonNegativeLong")]
        public long BallsRecovered {
            get {
                return this.ballsRecoveredField;
            }
            set {
                this.ballsRecoveredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BallsRecoveredSpecified {
            get {
                return this.ballsRecoveredFieldSpecified;
            }
            set {
                this.ballsRecoveredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Balls used during execution of the step.</summary>
        [System.ComponentModel.DescriptionAttribute("Balls used during execution of the step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BallsUsed", DataType="NonNegativeLong")]
        public long BallsUsed {
            get {
                return this.ballsUsedField;
            }
            set {
                this.ballsUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BallsUsedSpecified {
            get {
                return this.ballsUsedFieldSpecified;
            }
            set {
                this.ballsUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Base fluid volume recorded after equipment set to bypass.</summary>
        [System.ComponentModel.DescriptionAttribute("Base fluid volume recorded after equipment set to bypass.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BaseFluidBypassVol", DataType="VolumeMeasure")]
        public VolumeMeasure BaseFluidBypassVol {
            get {
                return this.baseFluidBypassVolField;
            }
            set {
                this.baseFluidBypassVolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Base fluid volume entering the equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("Base fluid volume entering the equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BaseFluidVol", DataType="VolumeMeasure")]
        public VolumeMeasure BaseFluidVol {
            get {
                return this.baseFluidVolField;
            }
            set {
                this.baseFluidVolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ending dirty fluid pump volume per minute.</summary>
        [System.ComponentModel.DescriptionAttribute("Ending dirty fluid pump volume per minute.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndDirtyMaterialRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure EndDirtyMaterialRate {
            get {
                return this.endDirtyMaterialRateField;
            }
            set {
                this.endDirtyMaterialRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ending quantity of material used per minute entering the flow stream.</summary>
        [System.Xml.Serialization.XmlElementAttribute("EndMaterialUsedRate")]
        [System.ComponentModel.DescriptionAttribute("Ending quantity of material used per minute entering the flow stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndMaterialUsedRate", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] EndMaterialUsedRate {
            get {
                return this.endMaterialUsedRateField;
            }
            set {
                this.endMaterialUsedRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ending quantity of material used per minute at bottomhole.</summary>
        [System.Xml.Serialization.XmlElementAttribute("EndMaterialUsedRateBottomhole")]
        [System.ComponentModel.DescriptionAttribute("Ending quantity of material used per minute at bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndMaterialUsedRateBottomhole", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] EndMaterialUsedRateBottomhole {
            get {
                return this.endMaterialUsedRateBottomholeField;
            }
            set {
                this.endMaterialUsedRateBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final bottomhole pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Final bottomhole pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndPresBottomhole", DataType="PressureMeasure")]
        public PressureMeasure EndPresBottomhole {
            get {
                return this.endPresBottomholeField;
            }
            set {
                this.endPresBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final surface pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Final surface pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndPresSurface", DataType="PressureMeasure")]
        public PressureMeasure EndPresSurface {
            get {
                return this.endPresSurfaceField;
            }
            set {
                this.endPresSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The final proppant concentration at bottomhole.</summary>
        [System.ComponentModel.DescriptionAttribute("The final proppant concentration at bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndProppantConcBottomhole", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure EndProppantConcBottomhole {
            get {
                return this.endProppantConcBottomholeField;
            }
            set {
                this.endProppantConcBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The final proppant concentration at the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("The final proppant concentration at the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndProppantConcSurface", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure EndProppantConcSurface {
            get {
                return this.endProppantConcSurfaceField;
            }
            set {
                this.endProppantConcSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final CO2 pump rate in volume per time at the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Final CO2 pump rate in volume per time at the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndRateSurfaceCO2", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure EndRateSurfaceCO2 {
            get {
                return this.endRateSurfaceCO2Field;
            }
            set {
                this.endRateSurfaceCO2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final nitrogen pump rate in volume per time at the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Final nitrogen pump rate in volume per time at the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndStdRateSurfaceN2", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure EndStdRateSurfaceN2 {
            get {
                return this.endStdRateSurfaceN2Field;
            }
            set {
                this.endStdRateSurfaceN2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The step volume of the base step.</summary>
        [System.ComponentModel.DescriptionAttribute("The step volume of the base step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidVolBase", DataType="VolumeMeasure")]
        public VolumeMeasure FluidVolBase {
            get {
                return this.fluidVolBaseField;
            }
            set {
                this.fluidVolBaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid volume circulated.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid volume circulated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidVolCirculated", DataType="VolumeMeasure")]
        public VolumeMeasure FluidVolCirculated {
            get {
                return this.fluidVolCirculatedField;
            }
            set {
                this.fluidVolCirculatedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid volume pumped.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid volume pumped.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidVolPumped", DataType="VolumeMeasure")]
        public VolumeMeasure FluidVolPumped {
            get {
                return this.fluidVolPumpedField;
            }
            set {
                this.fluidVolPumpedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid volume returned.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid volume returned.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidVolReturned", DataType="VolumeMeasure")]
        public VolumeMeasure FluidVolReturned {
            get {
                return this.fluidVolReturnedField;
            }
            set {
                this.fluidVolReturnedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume of the slurry (dirty) step.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume of the slurry (dirty) step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidVolSlurry", DataType="VolumeMeasure")]
        public VolumeMeasure FluidVolSlurry {
            get {
                return this.fluidVolSlurryField;
            }
            set {
                this.fluidVolSlurryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid volume squeezed.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid volume squeezed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidVolSqueezed", DataType="VolumeMeasure")]
        public VolumeMeasure FluidVolSqueezed {
            get {
                return this.fluidVolSqueezedField;
            }
            set {
                this.fluidVolSqueezedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid volume washed.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid volume washed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidVolWashed", DataType="VolumeMeasure")]
        public VolumeMeasure FluidVolWashed {
            get {
                return this.fluidVolWashedField;
            }
            set {
                this.fluidVolWashedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fracture gradient when the step ends.</summary>
        [System.ComponentModel.DescriptionAttribute("The fracture gradient when the step ends.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureGradientFinal", DataType="ForcePerVolumeMeasure")]
        public ForcePerVolumeMeasure FractureGradientFinal {
            get {
                return this.fractureGradientFinalField;
            }
            set {
                this.fractureGradientFinalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fracture gradient before starting the step.</summary>
        [System.ComponentModel.DescriptionAttribute("The fracture gradient before starting the step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureGradientInitial", DataType="ForcePerVolumeMeasure")]
        public ForcePerVolumeMeasure FractureGradientInitial {
            get {
                return this.fractureGradientInitialField;
            }
            set {
                this.fractureGradientInitialField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Numeric value used to scale a calculated rheological friction.</summary>
        [System.ComponentModel.DescriptionAttribute("Numeric value used to scale a calculated rheological friction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionFactor", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure FrictionFactor {
            get {
                return this.frictionFactorField;
            }
            set {
                this.frictionFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum hydraulic power used during the step.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum hydraulic power used during the step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxHydraulicPower", DataType="PowerMeasure")]
        public PowerMeasure MaxHydraulicPower {
            get {
                return this.maxHydraulicPowerField;
            }
            set {
                this.maxHydraulicPowerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pumping pressure on surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum pumping pressure on surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxPresSurface", DataType="PressureMeasure")]
        public PressureMeasure MaxPresSurface {
            get {
                return this.maxPresSurfaceField;
            }
            set {
                this.maxPresSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum proppant concentration at bottomhole during the stimulation step.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum proppant concentration at bottomhole during the stimulation step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxProppantConcBottomhole", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure MaxProppantConcBottomhole {
            get {
                return this.maxProppantConcBottomholeField;
            }
            set {
                this.maxProppantConcBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum proppant concentration at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum proppant concentration at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxProppantConcSurface", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure MaxProppantConcSurface {
            get {
                return this.maxProppantConcSurfaceField;
            }
            set {
                this.maxProppantConcSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum proppant concentration exiting the equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum proppant concentration exiting the equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxSlurryPropConc", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure MaxSlurryPropConc {
            get {
                return this.maxSlurryPropConcField;
            }
            set {
                this.maxSlurryPropConcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum volume per minute at the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum volume per minute at the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxVolumeRateWellhead", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure MaxVolumeRateWellhead {
            get {
                return this.maxVolumeRateWellheadField;
            }
            set {
                this.maxVolumeRateWellheadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The friction pressure contribution from pipes.</summary>
        [System.ComponentModel.DescriptionAttribute("The friction pressure contribution from pipes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PipeFrictionPressure", DataType="PressureMeasure")]
        public PressureMeasure PipeFrictionPressure {
            get {
                return this.pipeFrictionPressureField;
            }
            set {
                this.pipeFrictionPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total pumping time for the step.</summary>
        [System.ComponentModel.DescriptionAttribute("Total pumping time for the step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpTime", DataType="TimeMeasure")]
        public TimeMeasure PumpTime {
            get {
                return this.pumpTimeField;
            }
            set {
                this.pumpTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Starting dirty fluid volume per minute.</summary>
        [System.ComponentModel.DescriptionAttribute("Starting dirty fluid volume per minute.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDirtyMaterialRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure StartDirtyMaterialRate {
            get {
                return this.startDirtyMaterialRateField;
            }
            set {
                this.startDirtyMaterialRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Starting quantity of material used per minute entering the flow stream.</summary>
        [System.Xml.Serialization.XmlElementAttribute("StartMaterialUsedRate")]
        [System.ComponentModel.DescriptionAttribute("Starting quantity of material used per minute entering the flow stream.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartMaterialUsedRate", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] StartMaterialUsedRate {
            get {
                return this.startMaterialUsedRateField;
            }
            set {
                this.startMaterialUsedRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Starting quantity of material used per minute at bottomhole.</summary>
        [System.Xml.Serialization.XmlElementAttribute("StartMaterialUsedRateBottomHole")]
        [System.ComponentModel.DescriptionAttribute("Starting quantity of material used per minute at bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartMaterialUsedRateBottomHole", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] StartMaterialUsedRateBottomHole {
            get {
                return this.startMaterialUsedRateBottomHoleField;
            }
            set {
                this.startMaterialUsedRateBottomHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Starting bottomhole pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Starting bottomhole pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartPresBottomhole", DataType="PressureMeasure")]
        public PressureMeasure StartPresBottomhole {
            get {
                return this.startPresBottomholeField;
            }
            set {
                this.startPresBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Starting surface pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Starting surface pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartPresSurface", DataType="PressureMeasure")]
        public PressureMeasure StartPresSurface {
            get {
                return this.startPresSurfaceField;
            }
            set {
                this.startPresSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The beginning proppant concentration at bottomhole.</summary>
        [System.ComponentModel.DescriptionAttribute("The beginning proppant concentration at bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartProppantConcBottomhole", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure StartProppantConcBottomhole {
            get {
                return this.startProppantConcBottomholeField;
            }
            set {
                this.startProppantConcBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The beginning proppant concentration at the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("The beginning proppant concentration at the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartProppantConcSurface", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure StartProppantConcSurface {
            get {
                return this.startProppantConcSurfaceField;
            }
            set {
                this.startProppantConcSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Slurry volume entering the well.</summary>
        [System.ComponentModel.DescriptionAttribute("Slurry volume entering the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellheadVol", DataType="VolumeMeasure")]
        public VolumeMeasure WellheadVol {
            get {
                return this.wellheadVolField;
            }
            set {
                this.wellheadVolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Material used during the step</summary>
        [System.Xml.Serialization.XmlElementAttribute("MaterialUsed")]
        [System.ComponentModel.DescriptionAttribute("Material used during the step")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaterialUsed", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] MaterialUsed {
            get {
                return this.materialUsedField;
            }
            set {
                this.materialUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MaxMaterialUsedRate")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxMaterialUsedRate", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] MaxMaterialUsedRate {
            get {
                return this.maxMaterialUsedRateField;
            }
            set {
                this.maxMaterialUsedRateField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Fluid", DataType="StimFluid")]
        public StimFluid Fluid {
            get {
                return this.fluidField;
            }
            set {
                this.fluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimJobStep.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimJobStep.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PowerMeasure {
        
        private PowerUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PowerUom")]
        public PowerUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerUom {
        
        /// <remarks/>
        cW,
        
        /// <remarks/>
        dW,
        
        /// <remarks/>
        EW,
        
        /// <remarks/>
        fW,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        hp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[elec]")]
        hpelec,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]")]
        hphyd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric]")]
        hpmetric,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        pW,
        
        /// <remarks/>
        tonRefrig,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeMeasure {
        
        private TimeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="TimeUom")]
        public TimeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ms")]
        Item12ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ka[t]")]
        Item100kat,
        
        /// <remarks/>
        a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("a[t]")]
        at,
        
        /// <remarks/>
        ca,
        
        /// <remarks/>
        cs,
        
        /// <remarks/>
        d,
        
        /// <remarks/>
        ds,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ea[t]")]
        Eat,
        
        /// <remarks/>
        fa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ga[t]")]
        Gat,
        
        /// <remarks/>
        h,
        
        /// <remarks/>
        hs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ka[t]")]
        kat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ma[t]")]
        Mat,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        ms,
        
        /// <remarks/>
        na,
        
        /// <remarks/>
        ns,
        
        /// <remarks/>
        ps,
        
        /// <remarks/>
        s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ta[t]")]
        Tat,
        
        /// <remarks/>
        us,
        
        /// <remarks/>
        wk,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimEvent {
        
        private long numberField;
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private string commentField;
        
        private long numStepField;
        
        private bool numStepFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Event number.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Event number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Number", DataType="PositiveLong")]
        public long Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time of this event.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time of this event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A short description of the event.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A short description of the event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Step number. Use it to reference an existing job step entry.</summary>
        [System.ComponentModel.DescriptionAttribute("Step number. Use it to reference an existing job step entry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumStep", DataType="PositiveLong")]
        public long NumStep {
            get {
                return this.numStepField;
            }
            set {
                this.numStepField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumStepSpecified {
            get {
                return this.numStepFieldSpecified;
            }
            set {
                this.numStepFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimEvent.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimEvent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimShutInPressure {
        
        private PressureMeasure pressureField;
        
        private TimeMeasure timeAfterShutinField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The shut-in pressure.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The shut-in pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pressure", DataType="PressureMeasure")]
        public PressureMeasure Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time span after shut in at which the pressure was measured.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The time span after shut in at which the pressure was measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeAfterShutin", DataType="TimeMeasure")]
        public TimeMeasure TimeAfterShutin {
            get {
                return this.timeAfterShutinField;
            }
            set {
                this.timeAfterShutinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimShutInPressure.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimShutInPressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimPumpFlowBackTest {
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private VolumeMeasure flowBackVolumeField;
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private TimeMeasure fractureCloseDurationField;
        
        private PressureMeasure presCasingField;
        
        private PressureMeasure presTubingField;
        
        private PressureMeasure fractureClosePresField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private StimPumpFlowBackTestStep[] stepField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>End time for the test.</summary>
        [System.ComponentModel.DescriptionAttribute("End time for the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total volume recovered during a flow back test.</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume recovered during a flow back test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowBackVolume", DataType="VolumeMeasure")]
        public VolumeMeasure FlowBackVolume {
            get {
                return this.flowBackVolumeField;
            }
            set {
                this.flowBackVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start time for the test.</summary>
        [System.ComponentModel.DescriptionAttribute("Start time for the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time required for the fracture width to become zero.</summary>
        [System.ComponentModel.DescriptionAttribute("The time required for the fracture width to become zero.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureCloseDuration", DataType="TimeMeasure")]
        public TimeMeasure FractureCloseDuration {
            get {
                return this.fractureCloseDurationField;
            }
            set {
                this.fractureCloseDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Casing pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Casing pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresCasing", DataType="PressureMeasure")]
        public PressureMeasure PresCasing {
            get {
                return this.presCasingField;
            }
            set {
                this.presCasingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tubing pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Tubing pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresTubing", DataType="PressureMeasure")]
        public PressureMeasure PresTubing {
            get {
                return this.presTubingField;
            }
            set {
                this.presTubingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure when the fracture width becomes zero.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure when the fracture width becomes zero.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureClosePres", DataType="PressureMeasure")]
        public PressureMeasure FractureClosePres {
            get {
                return this.fractureClosePresField;
            }
            set {
                this.fractureClosePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Step")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Step", DataType="StimPumpFlowBackTestStep")]
        public StimPumpFlowBackTestStep[] Step {
            get {
                return this.stepField;
            }
            set {
                this.stepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimPumpFlowBackTest.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimPumpFlowBackTest.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimPumpFlowBackTestStep {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private VolumeMeasure flowbackVolumeField;
        
        private VolumePerTimeMeasure flowbackVolumeRateField;
        
        private long numberField;
        
        private VolumePerTimeMeasure bottomholeRateField;
        
        private PressureMeasure presField;
        
        private PressureMeasure pipeFrictionField;
        
        private PressureMeasure entryFrictionField;
        
        private PressureMeasure perfFrictionField;
        
        private PressureMeasure nearWellboreFrictionField;
        
        private VolumePerTimeMeasure surfaceRateField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Time stamp of the pressure measurement.</summary>
        [System.ComponentModel.DescriptionAttribute("Time stamp of the pressure measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of flowback since the start of the test.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of flowback since the start of the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowbackVolume", DataType="VolumeMeasure")]
        public VolumeMeasure FlowbackVolume {
            get {
                return this.flowbackVolumeField;
            }
            set {
                this.flowbackVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flowback rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Flowback rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowbackVolumeRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowbackVolumeRate {
            get {
                return this.flowbackVolumeRateField;
            }
            set {
                this.flowbackVolumeRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of the step. Identifies the step within the step down test.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of the step. Identifies the step within the step down test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Number", DataType="NonNegativeLong")]
        public long Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bottomhole flow rate for the specific step.</summary>
        [System.ComponentModel.DescriptionAttribute("Bottomhole flow rate for the specific step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure BottomholeRate {
            get {
                return this.bottomholeRateField;
            }
            set {
                this.bottomholeRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Surface pressure measured for the specific step.</summary>
        [System.ComponentModel.DescriptionAttribute("Surface pressure measured for the specific step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pres", DataType="PressureMeasure")]
        public PressureMeasure Pres {
            get {
                return this.presField;
            }
            set {
                this.presField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calculated pipe friction for the specific step.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated pipe friction for the specific step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PipeFriction", DataType="PressureMeasure")]
        public PressureMeasure PipeFriction {
            get {
                return this.pipeFrictionField;
            }
            set {
                this.pipeFrictionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calculated entry friction accounting for perforation and near wellbore restrictions for the specific step.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated entry friction accounting for perforation and near wellbore restrictio" +
            "ns for the specific step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EntryFriction", DataType="PressureMeasure")]
        public PressureMeasure EntryFriction {
            get {
                return this.entryFrictionField;
            }
            set {
                this.entryFrictionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calculated perforation friction for the specific step.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated perforation friction for the specific step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerfFriction", DataType="PressureMeasure")]
        public PressureMeasure PerfFriction {
            get {
                return this.perfFrictionField;
            }
            set {
                this.perfFrictionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calculated near-wellbore friction loss.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated near-wellbore friction loss.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NearWellboreFriction", DataType="PressureMeasure")]
        public PressureMeasure NearWellboreFriction {
            get {
                return this.nearWellboreFrictionField;
            }
            set {
                this.nearWellboreFrictionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Surface rate entering the well for the specific step.</summary>
        [System.ComponentModel.DescriptionAttribute("Surface rate entering the well for the specific step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfaceRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure SurfaceRate {
            get {
                return this.surfaceRateField;
            }
            set {
                this.surfaceRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimPumpFlowBackTestStep.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimPumpFlowBackTestStep.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimPressureFlowRate {
        
        private PressureMeasure pressureField;
        
        private VolumePerTimeMeasure bottomholeRateField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The pressure of the step test.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure of the step test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pressure", DataType="PressureMeasure")]
        public PressureMeasure Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The flow of the fluid at the bottomhole.</summary>
        [System.ComponentModel.DescriptionAttribute("The flow of the fluid at the bottomhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure BottomholeRate {
            get {
                return this.bottomholeRateField;
            }
            set {
                this.bottomholeRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimPressureFlowRate.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimPressureFlowRate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimStepTest {
        
        private PressureMeasure fractureExtensionPresField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private StimPressureFlowRate[] presMeasurementField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The pressure necessary to extend the fracture once initiated.  The fracture extension pressure may rise slightly with increasing fracture length and/or height because of friction pressure drop down the length of the fracture.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure necessary to extend the fracture once initiated.  The fracture exten" +
            "sion pressure may rise slightly with increasing fracture length and/or height be" +
            "cause of friction pressure drop down the length of the fracture.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureExtensionPres", DataType="PressureMeasure")]
        public PressureMeasure FractureExtensionPres {
            get {
                return this.fractureExtensionPresField;
            }
            set {
                this.fractureExtensionPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pressure and fluid rate data reading.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PresMeasurement")]
        [System.ComponentModel.DescriptionAttribute("A pressure and fluid rate data reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresMeasurement", DataType="StimPressureFlowRate")]
        public StimPressureFlowRate[] PresMeasurement {
            get {
                return this.presMeasurementField;
            }
            set {
                this.presMeasurementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimStepTest.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimStepTest.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimStepDownTest {
        
        private PressureMeasure initialShutinPresField;
        
        private MassPerVolumeMeasure bottomholeFluidDensityField;
        
        private LengthMeasure diameterEntryHoleField;
        
        private long perforationCountField;
        
        private bool perforationCountFieldSpecified;
        
        private DimensionlessMeasure dischargeCoefficientField;
        
        private long effectivePerfsField;
        
        private bool effectivePerfsFieldSpecified;
        
        private StimPumpFlowBackTestStep[] stepField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The initial shutin pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The initial shutin pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InitialShutinPres", DataType="PressureMeasure")]
        public PressureMeasure InitialShutinPres {
            get {
                return this.initialShutinPresField;
            }
            set {
                this.initialShutinPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the fluid at the bottom of the hole adjusting for bottomhole temperature and pressure during the step-down test.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the fluid at the bottom of the hole adjusting for bottomhole tempe" +
            "rature and pressure during the step-down test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeFluidDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure BottomholeFluidDensity {
            get {
                return this.bottomholeFluidDensityField;
            }
            set {
                this.bottomholeFluidDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of the injection point or perforation.</summary>
        [System.ComponentModel.DescriptionAttribute("Diameter of the injection point or perforation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiameterEntryHole", DataType="LengthMeasure")]
        public LengthMeasure DiameterEntryHole {
            get {
                return this.diameterEntryHoleField;
            }
            set {
                this.diameterEntryHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of perforations in the interval being tested.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of perforations in the interval being tested.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationCount", DataType="NonNegativeLong")]
        public long PerforationCount {
            get {
                return this.perforationCountField;
            }
            set {
                this.perforationCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PerforationCountSpecified {
            get {
                return this.perforationCountFieldSpecified;
            }
            set {
                this.perforationCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A coefficient used in the equation for calculation of the pressure drop across a perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("A coefficient used in the equation for calculation of the pressure drop across a " +
            "perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DischargeCoefficient", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure DischargeCoefficient {
            get {
                return this.dischargeCoefficientField;
            }
            set {
                this.dischargeCoefficientField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of perforations in the interval being tested that are  calculated to be open to injection, which is determined during the step-down test.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of perforations in the interval being tested that are  calculated to b" +
            "e open to injection, which is determined during the step-down test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EffectivePerfs", DataType="NonNegativeLong")]
        public long EffectivePerfs {
            get {
                return this.effectivePerfsField;
            }
            set {
                this.effectivePerfsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EffectivePerfsSpecified {
            get {
                return this.effectivePerfsFieldSpecified;
            }
            set {
                this.effectivePerfsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The data related to a particular step in the step-down test.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Step")]
        [System.ComponentModel.DescriptionAttribute("The data related to a particular step in the step-down test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Step", DataType="StimPumpFlowBackTestStep")]
        public StimPumpFlowBackTestStep[] Step {
            get {
                return this.stepField;
            }
            set {
                this.stepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimStepDownTest</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimStepDownTest")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimFetTest {
        
        private StimFetTestAnalysisMethod[] analysisMethodField;
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private TimeMeasure endPdlDurationField;
        
        private VolumePerVolumeMeasure fluidEfficiencyField;
        
        private TimeMeasure fractureCloseDurationField;
        
        private PressureMeasure fractureClosePresField;
        
        private PressureMeasure fractureExtensionPresField;
        
        private ForcePerVolumeMeasure fractureGradientField;
        
        private LengthMeasure fractureLengthField;
        
        private LengthMeasure fractureWidthField;
        
        private PressureMeasure netPresField;
        
        private DimensionlessMeasure pdlCoefField;
        
        private PressureMeasure porePresField;
        
        private PressureMeasure pseudoRadialPresField;
        
        private PermeabilityRockMeasure residualPermeabilityField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An analysis method used for this FET.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AnalysisMethod")]
        [System.ComponentModel.DescriptionAttribute("An analysis method used for this FET.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnalysisMethod", DataType="StimFetTestAnalysisMethod")]
        public StimFetTestAnalysisMethod[] AnalysisMethod {
            get {
                return this.analysisMethodField;
            }
            set {
                this.analysisMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start time for the FET.</summary>
        [System.ComponentModel.DescriptionAttribute("Start time for the FET.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>End time for the FET.</summary>
        [System.ComponentModel.DescriptionAttribute("End time for the FET.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The end of the pressure-dependent leak-off portion of the FET.</summary>
        [System.ComponentModel.DescriptionAttribute("The end of the pressure-dependent leak-off portion of the FET.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndPdlDuration", DataType="TimeMeasure")]
        public TimeMeasure EndPdlDuration {
            get {
                return this.endPdlDurationField;
            }
            set {
                this.endPdlDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.</summary>
        [System.ComponentModel.DescriptionAttribute("A measurement, derived from a data frac, of the efficiency of a particular fluid " +
            "in creating fracture area on a particular formation at a set of conditions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidEfficiency", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return this.fluidEfficiencyField;
            }
            set {
                this.fluidEfficiencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time at which the fracture effectively closes without proppant in place.</summary>
        [System.ComponentModel.DescriptionAttribute("The time at which the fracture effectively closes without proppant in place.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureCloseDuration", DataType="TimeMeasure")]
        public TimeMeasure FractureCloseDuration {
            get {
                return this.fractureCloseDurationField;
            }
            set {
                this.fractureCloseDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure at which the fracture effectively closes without proppant in place.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at which the fracture effectively closes without proppant in place.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureClosePres", DataType="PressureMeasure")]
        public PressureMeasure FractureClosePres {
            get {
                return this.fractureClosePresField;
            }
            set {
                this.fractureClosePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fracture pressure limit for an unfractured formation is the fracture initiation pressure. This is typically considered the upper bound for the minimum horizontal stress or closure pressure. A step-rate test is used to determine the fracture extension pressure.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The fracture pressure limit for an unfractured formation is the fracture initiation pressure. This is typically considered the upper bound for the minimum horizontal stress or closure pressure. A step-rate test is used to determine the fracture extension pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureExtensionPres", DataType="PressureMeasure")]
        public PressureMeasure FractureExtensionPres {
            get {
                return this.fractureExtensionPresField;
            }
            set {
                this.fractureExtensionPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The fracture gradient.</summary>
        [System.ComponentModel.DescriptionAttribute("The fracture gradient.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureGradient", DataType="ForcePerVolumeMeasure")]
        public ForcePerVolumeMeasure FractureGradient {
            get {
                return this.fractureGradientField;
            }
            set {
                this.fractureGradientField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The length of the fracture tip to tip; fracture half length is the length of one wing of a fracture from the wellbore to the tip.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of the fracture tip to tip; fracture half length is the length of one " +
            "wing of a fracture from the wellbore to the tip.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureLength", DataType="LengthMeasure")]
        public LengthMeasure FractureLength {
            get {
                return this.fractureLengthField;
            }
            set {
                this.fractureLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The width of a fracture at the wellbore. Hydraulic frac width is generated by frac fluid viscosity and/or pump rate (i.e., horsepower).</summary>
        [System.ComponentModel.DescriptionAttribute("The width of a fracture at the wellbore. Hydraulic frac width is generated by fra" +
            "c fluid viscosity and/or pump rate (i.e., horsepower).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureWidth", DataType="LengthMeasure")]
        public LengthMeasure FractureWidth {
            get {
                return this.fractureWidthField;
            }
            set {
                this.fractureWidthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The difference between the fracture extension pressure and the pressure that exists in the fracture.</summary>
        [System.ComponentModel.DescriptionAttribute("The difference between the fracture extension pressure and the pressure that exis" +
            "ts in the fracture.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPres", DataType="PressureMeasure")]
        public PressureMeasure NetPres {
            get {
                return this.netPresField;
            }
            set {
                this.netPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure dependent leak-off coefficient.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure dependent leak-off coefficient.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PdlCoef", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure PdlCoef {
            get {
                return this.pdlCoefField;
            }
            set {
                this.pdlCoefField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure of the liquids in the formation pores.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure of the liquids in the formation pores.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PorePres", DataType="PressureMeasure")]
        public PressureMeasure PorePres {
            get {
                return this.porePresField;
            }
            set {
                this.porePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Horner plot is used to determine if pseudo-radial flow developed during pressure decline.  If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, then radial or pseudo-radial flow may be affecting the decline behavior.  This suggests that the fracture is already closed and that data beyond the point of influence need not be considered in the evaluation of closure.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The Horner plot is used to determine if pseudo-radial flow developed during pressure decline.  If a semi-log straight line is observed and the line can be extrapolated to a reasonable value of reservoir pressure, then radial or pseudo-radial flow may be affecting the decline behavior.  This suggests that the fracture is already closed and that data beyond the point of influence need not be considered in the evaluation of closure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PseudoRadialPres", DataType="PressureMeasure")]
        public PressureMeasure PseudoRadialPres {
            get {
                return this.pseudoRadialPresField;
            }
            set {
                this.pseudoRadialPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>That permeability which remains after a fractured formation has closed, allowing the the formation fracture face to be pressurized before the fracture is mechanically reopened.</summary>
        [System.ComponentModel.DescriptionAttribute("That permeability which remains after a fractured formation has closed, allowing " +
            "the the formation fracture face to be pressurized before the fracture is mechani" +
            "cally reopened.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ResidualPermeability", DataType="PermeabilityRockMeasure")]
        public PermeabilityRockMeasure ResidualPermeability {
            get {
                return this.residualPermeabilityField;
            }
            set {
                this.residualPermeabilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimFetTest.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimFetTest.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum StimFetTestAnalysisMethod {
        
        /// <remarks/>
        average,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("delta pressure over g-time")]
        deltapressureovergtime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("delta pressure over linear time")]
        deltapressureoverlineartime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("delta pressure over radial time")]
        deltapressureoverradialtime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gdk 2-d")]
        gdk2d,
        
        /// <remarks/>
        horner,
        
        /// <remarks/>
        linear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("log-log")]
        loglog,
        
        /// <remarks/>
        nolte,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl coefficient")]
        pdlcoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("perkins and kern 2-d")]
        perkinsandkern2d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radial 2-d")]
        radial2d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("square root")]
        squareroot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("third-party software")]
        thirdpartysoftware,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumetricThermalExpansionMeasure {
        
        private VolumetricThermalExpansionUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumetricThermalExpansionUom")]
        public VolumetricThermalExpansionUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumetricThermalExpansionUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaC")]
        Item1deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaF")]
        Item1deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaK")]
        Item1deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaR")]
        Item1deltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.deltaC)")]
        Item1E6m3m3deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.deltaF)")]
        Item1E6m3m3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(m3.deltaK)")]
        m3m3deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/deltaC")]
        ppmvoldeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/deltaF")]
        ppmvoldeltaF,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ThermalConductivityMeasure {
        
        private ThermalConductivityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ThermalConductivityUom")]
        public ThermalConductivityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalConductivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft.deltaF)")]
        BtuIThftdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm.deltaC)")]
        calthhcmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm.deltaC)")]
        calthscmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m.deltaC)")]
        kcalthhmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.deltaK)")]
        WmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class SpecificHeatCapacityMeasure {
        
        private SpecificHeatCapacityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="SpecificHeatCapacityUom")]
        public SpecificHeatCapacityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SpecificHeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.deltaF)")]
        BtuITlbmdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.deltaR)")]
        BtuITlbmdeltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(g.deltaK)")]
        calthgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(g.deltaK)")]
        JgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(kg.deltaK)")]
        JkgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(kg.deltaC)")]
        kcalthkgdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kg.deltaK)")]
        kJkgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/(kg.deltaC)")]
        kWhkgdeltaC,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StimJobDiagnosticSession {
        
        private string nameField;
        
        private long numberField;
        
        private bool numberFieldSpecified;
        
        private string descriptionField;
        
        private LengthMeasure chokeSizeField;
        
        private Energistics.DataAccess.Timestamp dTimPumpOnField;
        
        private Energistics.DataAccess.Timestamp dTimPumpOffField;
        
        private TimeMeasure pumpDurationField;
        
        private Energistics.DataAccess.Timestamp dTimWellShutinField;
        
        private Energistics.DataAccess.Timestamp dTimFractureCloseField;
        
        private PressureMeasure avgBottomholeTreatmentPresField;
        
        private VolumePerTimeMeasure avgBottomholeTreatmentRateField;
        
        private VolumeMeasure baseFluidVolField;
        
        private PressureMeasure bottomholeHydrostaticPresField;
        
        private PressureMeasure bubblePointPresField;
        
        private MassPerVolumeMeasure fluidDensityField;
        
        private PressureMeasure fractureClosePresField;
        
        private PressureMeasure frictionPresField;
        
        private PressureMeasure initialShutinPresField;
        
        private PressureMeasure porePresField;
        
        private VolumeMeasure wellboreVolumeField;
        
        private MeasuredDepthCoord mdSurfaceField;
        
        private MeasuredDepthCoord mdBottomholeField;
        
        private MeasuredDepthCoord mdMidPerforationField;
        
        private WellVerticalDepthCoord tvdMidPerforationField;
        
        private ThermodynamicTemperatureMeasure surfaceTemperatureField;
        
        private ThermodynamicTemperatureMeasure bottomholeTemperatureField;
        
        private ThermodynamicTemperatureMeasure surfaceFluidTemperatureField;
        
        private IsothermalCompressibilityMeasure fluidCompressibilityField;
        
        private IsothermalCompressibilityMeasure reservoirTotalCompressibilityField;
        
        private DimensionlessMeasure fluidNprimeFactorField;
        
        private DimensionlessMeasure fluidKprimeFactorField;
        
        private SpecificHeatCapacityMeasure fluidSpecificHeatField;
        
        private ThermalConductivityMeasure fluidThermalConductivityField;
        
        private VolumetricThermalExpansionMeasure fluidThermalExpansionCoefficientField;
        
        private VolumePerVolumeMeasure fluidEfficiencyField;
        
        private VolumePerVolumeMeasure foamQualityField;
        
        private VolumePerVolumeMeasure percentPadField;
        
        private long stageNumberField;
        
        private bool stageNumberFieldSpecified;
        
        private bool temperatureCorrectionAppliedField;
        
        private bool temperatureCorrectionAppliedFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private StimFetTest[] fluidEfficiencyTestField;
        
        private StimStepDownTest[] stepDownTestField;
        
        private StimStepTest[] stepRateTestField;
        
        private StimPumpFlowBackTest[] pumpFlowBackTestField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the session.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the session.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of this pumping diagnostics session.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of this pumping diagnostics session.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Number", DataType="NonNegativeLong")]
        public long Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified {
            get {
                return this.numberFieldSpecified;
            }
            set {
                this.numberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description of the session.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A description of the session.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the choke used during a flow back test.</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the choke used during a flow back test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChokeSize", DataType="LengthMeasure")]
        public LengthMeasure ChokeSize {
            get {
                return this.chokeSizeField;
            }
            set {
                this.chokeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time pumping began.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time pumping began.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPumpOn", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPumpOn {
            get {
                return this.dTimPumpOnField;
            }
            set {
                this.dTimPumpOnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time pumping ended.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time pumping ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPumpOff", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPumpOff {
            get {
                return this.dTimPumpOffField;
            }
            set {
                this.dTimPumpOffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time between the shutin time and the pump on time.</summary>
        [System.ComponentModel.DescriptionAttribute("The time between the shutin time and the pump on time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpDuration", DataType="TimeMeasure")]
        public TimeMeasure PumpDuration {
            get {
                return this.pumpDurationField;
            }
            set {
                this.pumpDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time at which a well ceases flowing and the valves are closed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time at which a well ceases flowing and the valves are closed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimWellShutin", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimWellShutin {
            get {
                return this.dTimWellShutinField;
            }
            set {
                this.dTimWellShutinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time when the fluid in the fracture is completely leaked off into the formation and the fracture closes on its faces.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time when the fluid in the fracture is completely leaked off into th" +
            "e formation and the fracture closes on its faces.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimFractureClose", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimFractureClose {
            get {
                return this.dTimFractureCloseField;
            }
            set {
                this.dTimFractureCloseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average bottomhole treatment pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Average bottomhole treatment pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgBottomholeTreatmentPres", DataType="PressureMeasure")]
        public PressureMeasure AvgBottomholeTreatmentPres {
            get {
                return this.avgBottomholeTreatmentPresField;
            }
            set {
                this.avgBottomholeTreatmentPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average bottomhole treatment flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Average bottomhole treatment flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgBottomholeTreatmentRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure AvgBottomholeTreatmentRate {
            get {
                return this.avgBottomholeTreatmentRateField;
            }
            set {
                this.avgBottomholeTreatmentRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Base fluid volume entering equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("Base fluid volume entering equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BaseFluidVol", DataType="VolumeMeasure")]
        public VolumeMeasure BaseFluidVol {
            get {
                return this.baseFluidVolField;
            }
            set {
                this.baseFluidVolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bottomhole hydrostatic pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Bottomhole hydrostatic pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeHydrostaticPres", DataType="PressureMeasure")]
        public PressureMeasure BottomholeHydrostaticPres {
            get {
                return this.bottomholeHydrostaticPresField;
            }
            set {
                this.bottomholeHydrostaticPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure at which gas begins to break out of an under saturated oil and form a free gas phase in the matrix or a gas cap.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at which gas begins to break out of an under saturated oil and form " +
            "a free gas phase in the matrix or a gas cap.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BubblePointPres", DataType="PressureMeasure")]
        public PressureMeasure BubblePointPres {
            get {
                return this.bubblePointPresField;
            }
            set {
                this.bubblePointPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure FluidDensity {
            get {
                return this.fluidDensityField;
            }
            set {
                this.fluidDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure when the fracture width becomes zero.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure when the fracture width becomes zero.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureClosePres", DataType="PressureMeasure")]
        public PressureMeasure FractureClosePres {
            get {
                return this.fractureClosePresField;
            }
            set {
                this.fractureClosePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure loss due to fluid friction with the pipe while a fluid is being pumped.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure loss due to fluid friction with the pipe while a fluid is being pump" +
            "ed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionPres", DataType="PressureMeasure")]
        public PressureMeasure FrictionPres {
            get {
                return this.frictionPresField;
            }
            set {
                this.frictionPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Initial shutin pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Initial shutin pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InitialShutinPres", DataType="PressureMeasure")]
        public PressureMeasure InitialShutinPres {
            get {
                return this.initialShutinPresField;
            }
            set {
                this.initialShutinPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure of the liquids in the formation pores.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure of the liquids in the formation pores.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PorePres", DataType="PressureMeasure")]
        public PressureMeasure PorePres {
            get {
                return this.porePresField;
            }
            set {
                this.porePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume of fluid in the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume of fluid in the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreVolume", DataType="VolumeMeasure")]
        public VolumeMeasure WellboreVolume {
            get {
                return this.wellboreVolumeField;
            }
            set {
                this.wellboreVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the wellbore to its injection point.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the wellbore to its injection point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdSurface", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdSurface {
            get {
                return this.mdSurfaceField;
            }
            set {
                this.mdSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the bottom of the hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the bottom of the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBottomhole", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBottomhole {
            get {
                return this.mdBottomholeField;
            }
            set {
                this.mdBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the middle perforation.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the middle perforation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdMidPerforation", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdMidPerforation {
            get {
                return this.mdMidPerforationField;
            }
            set {
                this.mdMidPerforationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The true vertical depth of the middle perforation.</summary>
        [System.ComponentModel.DescriptionAttribute("The true vertical depth of the middle perforation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdMidPerforation", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdMidPerforation {
            get {
                return this.tvdMidPerforationField;
            }
            set {
                this.tvdMidPerforationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The constant earth temperature at a given depth specific to a region.</summary>
        [System.ComponentModel.DescriptionAttribute("The constant earth temperature at a given depth specific to a region.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfaceTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure SurfaceTemperature {
            get {
                return this.surfaceTemperatureField;
            }
            set {
                this.surfaceTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Static bottomhole temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Static bottomhole temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure BottomholeTemperature {
            get {
                return this.bottomholeTemperatureField;
            }
            set {
                this.bottomholeTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Temperature of the fluid at the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Temperature of the fluid at the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfaceFluidTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure SurfaceFluidTemperature {
            get {
                return this.surfaceFluidTemperatureField;
            }
            set {
                this.surfaceFluidTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume change of a fluid when pressure is applied.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume change of a fluid when pressure is applied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidCompressibility", DataType="IsothermalCompressibilityMeasure")]
        public IsothermalCompressibilityMeasure FluidCompressibility {
            get {
                return this.fluidCompressibilityField;
            }
            set {
                this.fluidCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume change of a reservoir material when pressure is applied.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume change of a reservoir material when pressure is applied.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReservoirTotalCompressibility", DataType="IsothermalCompressibilityMeasure")]
        public IsothermalCompressibilityMeasure ReservoirTotalCompressibility {
            get {
                return this.reservoirTotalCompressibilityField;
            }
            set {
                this.reservoirTotalCompressibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Power law component. As 'n' decreases from 1, the fluid becomes more shear thinning. Reducing 'n' produces more non-Newtonian behavior.</summary>
        [System.ComponentModel.DescriptionAttribute("Power law component. As \'n\' decreases from 1, the fluid becomes more shear thinni" +
            "ng. Reducing \'n\' produces more non-Newtonian behavior.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidNprimeFactor", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure FluidNprimeFactor {
            get {
                return this.fluidNprimeFactorField;
            }
            set {
                this.fluidNprimeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The consistency index K is the shear stress or viscosity of the fluid at one sec-1 shear rate. An increasing K raises the effective viscosity.</summary>
        [System.ComponentModel.DescriptionAttribute("The consistency index K is the shear stress or viscosity of the fluid at one sec-" +
            "1 shear rate. An increasing K raises the effective viscosity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidKprimeFactor", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure FluidKprimeFactor {
            get {
                return this.fluidKprimeFactorField;
            }
            set {
                this.fluidKprimeFactorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The heat required to raise one unit mass of a substance by one degree.</summary>
        [System.ComponentModel.DescriptionAttribute("The heat required to raise one unit mass of a substance by one degree.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidSpecificHeat", DataType="SpecificHeatCapacityMeasure")]
        public SpecificHeatCapacityMeasure FluidSpecificHeat {
            get {
                return this.fluidSpecificHeatField;
            }
            set {
                this.fluidSpecificHeatField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>In physics, thermal conductivity is the property of a material describing its ability to conduct heat. It appears primarily in Fourier's Law for heat conduction. Thermal conductivity is measured in watts per kelvin-meter.  Multiplied by a temperature difference (in kelvins) and an area (in square meters), and divided by a thickness (in meters), the thermal conductivity predicts the rate of energy loss (in watts) through a piece of material.</summary>
        [System.ComponentModel.DescriptionAttribute(@"In physics, thermal conductivity is the property of a material describing its ability to conduct heat. It appears primarily in Fourier's Law for heat conduction. Thermal conductivity is measured in watts per kelvin-meter.  Multiplied by a temperature difference (in kelvins) and an area (in square meters), and divided by a thickness (in meters), the thermal conductivity predicts the rate of energy loss (in watts) through a piece of material.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidThermalConductivity", DataType="ThermalConductivityMeasure")]
        public ThermalConductivityMeasure FluidThermalConductivity {
            get {
                return this.fluidThermalConductivityField;
            }
            set {
                this.fluidThermalConductivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Dimensional response to temperature change is expressed by its coefficient of thermal expansion. When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms also changes. When the stored energy increases, so does the length of the molecular bonds.  As a result, solids typically expand in response to heating and contract on cooling.  The degree of expansion divided by the change in temperature is called the material's coefficient of thermal expansion and generally varies with temperature.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Dimensional response to temperature change is expressed by its coefficient of thermal expansion. When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms also changes. When the stored energy increases, so does the length of the molecular bonds.  As a result, solids typically expand in response to heating and contract on cooling.  The degree of expansion divided by the change in temperature is called the material's coefficient of thermal expansion and generally varies with temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidThermalExpansionCoefficient", DataType="VolumetricThermalExpansionMeasure")]
        public VolumetricThermalExpansionMeasure FluidThermalExpansionCoefficient {
            get {
                return this.fluidThermalExpansionCoefficientField;
            }
            set {
                this.fluidThermalExpansionCoefficientField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A measurement, derived from a data frac, of the efficiency of a particular fluid in creating fracture area on a particular formation at a set of conditions.</summary>
        [System.ComponentModel.DescriptionAttribute("A measurement, derived from a data frac, of the efficiency of a particular fluid " +
            "in creating fracture area on a particular formation at a set of conditions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidEfficiency", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return this.fluidEfficiencyField;
            }
            set {
                this.fluidEfficiencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Foam quality percentage of foam for the job during the stimulation services.</summary>
        [System.ComponentModel.DescriptionAttribute("Foam quality percentage of foam for the job during the stimulation services.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FoamQuality", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure FoamQuality {
            get {
                return this.foamQualityField;
            }
            set {
                this.foamQualityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume of the pad divided by the (volume of the pad + the volume of the proppant laden fluid).</summary>
        [System.ComponentModel.DescriptionAttribute("The volume of the pad divided by the (volume of the pad + the volume of the propp" +
            "ant laden fluid).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PercentPad", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure PercentPad {
            get {
                return this.percentPadField;
            }
            set {
                this.percentPadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of a stage associated with this diagnostics session.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of a stage associated with this diagnostics session.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StageNumber", DataType="NonNegativeLong")]
        public long StageNumber {
            get {
                return this.stageNumberField;
            }
            set {
                this.stageNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StageNumberSpecified {
            get {
                return this.stageNumberFieldSpecified;
            }
            set {
                this.stageNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Are the calculations corrected for temperature? A value of "true" (or "1") indicates that the calculations were corrected for temperature.  A value of "false" (or "0") or not given indicates otherwise.</summary>
        [System.ComponentModel.DescriptionAttribute("Are the calculations corrected for temperature? A value of \"true\" (or \"1\") indica" +
            "tes that the calculations were corrected for temperature.  A value of \"false\" (o" +
            "r \"0\") or not given indicates otherwise.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TemperatureCorrectionApplied", DataType="boolean")]
        public bool TemperatureCorrectionApplied {
            get {
                return this.temperatureCorrectionAppliedField;
            }
            set {
                this.temperatureCorrectionAppliedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TemperatureCorrectionAppliedSpecified {
            get {
                return this.temperatureCorrectionAppliedFieldSpecified;
            }
            set {
                this.temperatureCorrectionAppliedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A diagnostic test determining fluid efficiency.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FluidEfficiencyTest")]
        [System.ComponentModel.DescriptionAttribute("A diagnostic test determining fluid efficiency.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidEfficiencyTest", DataType="StimFetTest")]
        public StimFetTest[] FluidEfficiencyTest {
            get {
                return this.fluidEfficiencyTestField;
            }
            set {
                this.fluidEfficiencyTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure. An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure.</summary>
        [System.Xml.Serialization.XmlElementAttribute("StepDownTest")]
        [System.ComponentModel.DescriptionAttribute(@"An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure. An injection test involving multiple steps of injection rate and pressure, where a curve deflection and change of slope indicates the fracture breakdown pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepDownTest", DataType="StimStepDownTest")]
        public StimStepDownTest[] StepDownTest {
            get {
                return this.stepDownTestField;
            }
            set {
                this.stepDownTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An injection test, plotted pressure against injection rate, where a curve deflection and change of slope indicates the fracture breakdown pressure.</summary>
        [System.Xml.Serialization.XmlElementAttribute("StepRateTest")]
        [System.ComponentModel.DescriptionAttribute("An injection test, plotted pressure against injection rate, where a curve deflect" +
            "ion and change of slope indicates the fracture breakdown pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StepRateTest", DataType="StimStepTest")]
        public StimStepTest[] StepRateTest {
            get {
                return this.stepRateTestField;
            }
            set {
                this.stepRateTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A diagnostic test involving flowing a well back after treatment.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PumpFlowBackTest")]
        [System.ComponentModel.DescriptionAttribute("A diagnostic test involving flowing a well back after treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpFlowBackTest", DataType="StimPumpFlowBackTest")]
        public StimPumpFlowBackTest[] PumpFlowBackTest {
            get {
                return this.pumpFlowBackTestField;
            }
            set {
                this.pumpFlowBackTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimJobDiagnosticSession.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimJobDiagnosticSession.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class WellVerticalDepthCoord {
        
        private LengthUom uomField;
        
        private string datumField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>Unit of measure used by this vertical depth coordinate</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure used by this vertical depth coordinate")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Defines the vertical datums associated with elevation, vertical depth and measure" +
            "d depth coordinates")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("datum", DataType="String64")]
        public string datum {
            get {
                return this.datumField;
            }
            set {
                this.datumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class SurfaceEquipment {
        
        private string descriptionField;
        
        private PressureMeasure presRatingField;
        
        private SurfEquipType typeSurfEquipField;
        
        private bool usePumpDischargeField;
        
        private bool usePumpDischargeFieldSpecified;
        
        private bool useStandpipeField;
        
        private bool useStandpipeFieldSpecified;
        
        private bool useHoseField;
        
        private bool useHoseFieldSpecified;
        
        private bool useSwivelField;
        
        private bool useSwivelFieldSpecified;
        
        private bool useKellyField;
        
        private bool useKellyFieldSpecified;
        
        private bool useTopStackField;
        
        private bool useTopStackFieldSpecified;
        
        private bool useInjStackField;
        
        private bool useInjStackFieldSpecified;
        
        private bool useSurfaceIronField;
        
        private bool useSurfaceIronFieldSpecified;
        
        private LengthMeasure idStandpipeField;
        
        private LengthMeasure lenStandpipeField;
        
        private LengthMeasure idHoseField;
        
        private LengthMeasure lenHoseField;
        
        private LengthMeasure idSwivelField;
        
        private LengthMeasure lenSwivelField;
        
        private LengthMeasure idKellyField;
        
        private LengthMeasure lenKellyField;
        
        private LengthMeasure idSurfaceIronField;
        
        private LengthMeasure lenSurfaceIronField;
        
        private LengthMeasure htSurfaceIronField;
        
        private LengthMeasure idDischargeLineField;
        
        private LengthMeasure lenDischargeLineField;
        
        private string ctWrapTypeField;
        
        private LengthMeasure odReelField;
        
        private LengthMeasure odCoreField;
        
        private LengthMeasure widReelWrapField;
        
        private LengthMeasure lenReelField;
        
        private bool injStkUpField;
        
        private bool injStkUpFieldSpecified;
        
        private LengthMeasure htInjStkField;
        
        private bool umbInsideField;
        
        private bool umbInsideFieldSpecified;
        
        private LengthMeasure odUmbilicalField;
        
        private LengthMeasure lenUmbilicalField;
        
        private LengthMeasure idTopStkField;
        
        private LengthMeasure htTopStkField;
        
        private LengthMeasure htFlangeField;
        
        /// <remarks/>
        /// <summary>Description of item and details.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description of item and details.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure rating of the item.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure rating of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresRating", DataType="PressureMeasure")]
        public PressureMeasure PresRating {
            get {
                return this.presRatingField;
            }
            set {
                this.presRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Surface equipment type (IADC1-4, Custom, Coiled Tubing).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Surface equipment type (IADC1-4, Custom, Coiled Tubing).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeSurfEquip", DataType="SurfEquipType")]
        public SurfEquipType TypeSurfEquip {
            get {
                return this.typeSurfEquipField;
            }
            set {
                this.typeSurfEquipField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use pump discharge line?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Use pump discharge line?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UsePumpDischarge", DataType="boolean")]
        public bool UsePumpDischarge {
            get {
                return this.usePumpDischargeField;
            }
            set {
                this.usePumpDischargeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UsePumpDischargeSpecified {
            get {
                return this.usePumpDischargeFieldSpecified;
            }
            set {
                this.usePumpDischargeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use standpipe geometry?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Use standpipe geometry?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseStandpipe", DataType="boolean")]
        public bool UseStandpipe {
            get {
                return this.useStandpipeField;
            }
            set {
                this.useStandpipeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseStandpipeSpecified {
            get {
                return this.useStandpipeFieldSpecified;
            }
            set {
                this.useStandpipeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use kelly hose geometry?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Use kelly hose geometry?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseHose", DataType="boolean")]
        public bool UseHose {
            get {
                return this.useHoseField;
            }
            set {
                this.useHoseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseHoseSpecified {
            get {
                return this.useHoseFieldSpecified;
            }
            set {
                this.useHoseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use swivel geometry?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Use swivel geometry?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseSwivel", DataType="boolean")]
        public bool UseSwivel {
            get {
                return this.useSwivelField;
            }
            set {
                this.useSwivelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseSwivelSpecified {
            get {
                return this.useSwivelFieldSpecified;
            }
            set {
                this.useSwivelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use kelly geometry?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Use kelly geometry?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseKelly", DataType="boolean")]
        public bool UseKelly {
            get {
                return this.useKellyField;
            }
            set {
                this.useKellyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseKellySpecified {
            get {
                return this.useKellyFieldSpecified;
            }
            set {
                this.useKellyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use top stack height?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Use top stack height?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseTopStack", DataType="boolean")]
        public bool UseTopStack {
            get {
                return this.useTopStackField;
            }
            set {
                this.useTopStackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseTopStackSpecified {
            get {
                return this.useTopStackFieldSpecified;
            }
            set {
                this.useTopStackFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use injector stack height?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Use injector stack height?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseInjStack", DataType="boolean")]
        public bool UseInjStack {
            get {
                return this.useInjStackField;
            }
            set {
                this.useInjStackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseInjStackSpecified {
            get {
                return this.useInjStackFieldSpecified;
            }
            set {
                this.useInjStackFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use surface iron description?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Use surface iron description?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseSurfaceIron", DataType="boolean")]
        public bool UseSurfaceIron {
            get {
                return this.useSurfaceIronField;
            }
            set {
                this.useSurfaceIronField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseSurfaceIronSpecified {
            get {
                return this.useSurfaceIronFieldSpecified;
            }
            set {
                this.useSurfaceIronFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the standpipe.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the standpipe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdStandpipe", DataType="LengthMeasure")]
        public LengthMeasure IdStandpipe {
            get {
                return this.idStandpipeField;
            }
            set {
                this.idStandpipeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the standpipe.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the standpipe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenStandpipe", DataType="LengthMeasure")]
        public LengthMeasure LenStandpipe {
            get {
                return this.lenStandpipeField;
            }
            set {
                this.lenStandpipeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the kelly hose.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the kelly hose.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdHose", DataType="LengthMeasure")]
        public LengthMeasure IdHose {
            get {
                return this.idHoseField;
            }
            set {
                this.idHoseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the kelly hose.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the kelly hose.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenHose", DataType="LengthMeasure")]
        public LengthMeasure LenHose {
            get {
                return this.lenHoseField;
            }
            set {
                this.lenHoseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the swivel.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the swivel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdSwivel", DataType="LengthMeasure")]
        public LengthMeasure IdSwivel {
            get {
                return this.idSwivelField;
            }
            set {
                this.idSwivelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the swivel.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the swivel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenSwivel", DataType="LengthMeasure")]
        public LengthMeasure LenSwivel {
            get {
                return this.lenSwivelField;
            }
            set {
                this.lenSwivelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the kelly bushing.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the kelly bushing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdKelly", DataType="LengthMeasure")]
        public LengthMeasure IdKelly {
            get {
                return this.idKellyField;
            }
            set {
                this.idKellyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the kelly bushing.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the kelly bushing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenKelly", DataType="LengthMeasure")]
        public LengthMeasure LenKelly {
            get {
                return this.lenKellyField;
            }
            set {
                this.lenKellyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the surface iron.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the surface iron.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdSurfaceIron", DataType="LengthMeasure")]
        public LengthMeasure IdSurfaceIron {
            get {
                return this.idSurfaceIronField;
            }
            set {
                this.idSurfaceIronField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the surface iron.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the surface iron.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenSurfaceIron", DataType="LengthMeasure")]
        public LengthMeasure LenSurfaceIron {
            get {
                return this.lenSurfaceIronField;
            }
            set {
                this.lenSurfaceIronField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Height of the surface iron.</summary>
        [System.ComponentModel.DescriptionAttribute("Height of the surface iron.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HtSurfaceIron", DataType="LengthMeasure")]
        public LengthMeasure HtSurfaceIron {
            get {
                return this.htSurfaceIronField;
            }
            set {
                this.htSurfaceIronField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: inner diameter of the pump discharge line.</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: inner diameter of the pump discharge line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdDischargeLine", DataType="LengthMeasure")]
        public LengthMeasure IdDischargeLine {
            get {
                return this.idDischargeLineField;
            }
            set {
                this.idDischargeLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: length of the pump discharge line.</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: length of the pump discharge line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenDischargeLine", DataType="LengthMeasure")]
        public LengthMeasure LenDischargeLine {
            get {
                return this.lenDischargeLineField;
            }
            set {
                this.lenDischargeLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: the coiled tubing wrap type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: the coiled tubing wrap type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CtWrapType", DataType="String64")]
        public string CtWrapType {
            get {
                return this.ctWrapTypeField;
            }
            set {
                this.ctWrapTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: outside diameter of the coiled tubing reel.</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: outside diameter of the coiled tubing reel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdReel", DataType="LengthMeasure")]
        public LengthMeasure OdReel {
            get {
                return this.odReelField;
            }
            set {
                this.odReelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: outside diameter of the reel core that the coiled tubing is wrapped around.</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: outside diameter of the reel core that the coiled tubing is wrappe" +
            "d around.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdCore", DataType="LengthMeasure")]
        public LengthMeasure OdCore {
            get {
                return this.odCoreField;
            }
            set {
                this.odCoreField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: width of the reel core. This is the inside dimension.</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: width of the reel core. This is the inside dimension.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WidReelWrap", DataType="LengthMeasure")]
        public LengthMeasure WidReelWrap {
            get {
                return this.widReelWrapField;
            }
            set {
                this.widReelWrapField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: length of the coiled tubing remaining on the reel.</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: length of the coiled tubing remaining on the reel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenReel", DataType="LengthMeasure")]
        public LengthMeasure LenReel {
            get {
                return this.lenReelField;
            }
            set {
                this.lenReelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: Does it have an injector stack up? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: Does it have an injector stack up? Values are \"true\" (or \"1\") and " +
            "\"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjStkUp", DataType="boolean")]
        public bool InjStkUp {
            get {
                return this.injStkUpField;
            }
            set {
                this.injStkUpField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InjStkUpSpecified {
            get {
                return this.injStkUpFieldSpecified;
            }
            set {
                this.injStkUpFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: The length of tubing from the end of the coil reel to the rotary kelly bushing. This length includes the tubing in the hole and the tubing on the reel. This measurement takes into account the 20 or so feet of tubing that is being straightened and pushed through the injector head.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Coiled tubing: The length of tubing from the end of the coil reel to the rotary kelly bushing. This length includes the tubing in the hole and the tubing on the reel. This measurement takes into account the 20 or so feet of tubing that is being straightened and pushed through the injector head.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HtInjStk", DataType="LengthMeasure")]
        public LengthMeasure HtInjStk {
            get {
                return this.htInjStkField;
            }
            set {
                this.htInjStkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: Umbilical inside, true/false flag to account for the wireline inside the coiled tubing. With this pressure loss calculation, you can calculate for the strings used for logging, wireline coring, etc.  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute(@"Coiled tubing: Umbilical inside, true/false flag to account for the wireline inside the coiled tubing. With this pressure loss calculation, you can calculate for the strings used for logging, wireline coring, etc.  Values are ""true"" (or ""1"") and ""false"" (or ""0"").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UmbInside", DataType="boolean")]
        public bool UmbInside {
            get {
                return this.umbInsideField;
            }
            set {
                this.umbInsideField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UmbInsideSpecified {
            get {
                return this.umbInsideFieldSpecified;
            }
            set {
                this.umbInsideFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: outer diameter of the umbilical.</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: outer diameter of the umbilical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdUmbilical", DataType="LengthMeasure")]
        public LengthMeasure OdUmbilical {
            get {
                return this.odUmbilicalField;
            }
            set {
                this.odUmbilicalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coiled tubing: length of the umbilical.</summary>
        [System.ComponentModel.DescriptionAttribute("Coiled tubing: length of the umbilical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenUmbilical", DataType="LengthMeasure")]
        public LengthMeasure LenUmbilical {
            get {
                return this.lenUmbilicalField;
            }
            set {
                this.lenUmbilicalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Top drive: inner diameter of the top stack.</summary>
        [System.ComponentModel.DescriptionAttribute("Top drive: inner diameter of the top stack.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdTopStk", DataType="LengthMeasure")]
        public LengthMeasure IdTopStk {
            get {
                return this.idTopStkField;
            }
            set {
                this.idTopStkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Top drive: The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. We are measuring the distance that the mud will flow through the top drive.For the top drive. The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. This is the measurement of the distance that the mud flows through the top drive.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Top drive: The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. We are measuring the distance that the mud will flow through the top drive.For the top drive. The distance that the mud travels from the end of the standpipe hose to the drill pipe connection at the bottom of the top drive. This is the measurement of the distance that the mud flows through the top drive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HtTopStk", DataType="LengthMeasure")]
        public LengthMeasure HtTopStk {
            get {
                return this.htTopStkField;
            }
            set {
                this.htTopStkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Height of the flange.</summary>
        [System.ComponentModel.DescriptionAttribute("Height of the flange.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HtFlange", DataType="LengthMeasure")]
        public LengthMeasure HtFlange {
            get {
                return this.htFlangeField;
            }
            set {
                this.htFlangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum SurfEquipType {
        
        /// <remarks/>
        IADC,
        
        /// <remarks/>
        custom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coiled tubing")]
        coiledtubing,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Degasser {
        
        private string manufacturerField;
        
        private string modelField;
        
        private Energistics.DataAccess.Timestamp dTimInstallField;
        
        private Energistics.DataAccess.Timestamp dTimRemoveField;
        
        private string typeField;
        
        private string ownerField;
        
        private LengthMeasure heightField;
        
        private LengthMeasure lenField;
        
        private LengthMeasure idField;
        
        private VolumePerTimeMeasure capFlowField;
        
        private AreaMeasure areaSeparatorFlowField;
        
        private LengthMeasure htMudSealField;
        
        private LengthMeasure idInletField;
        
        private LengthMeasure idVentLineField;
        
        private LengthMeasure lenVentLineField;
        
        private VolumePerTimeMeasure capGasSepField;
        
        private VolumePerTimeMeasure capBlowdownField;
        
        private PressureMeasure presRatingField;
        
        private ThermodynamicTemperatureMeasure tempRatingField;
        
        private NameTag[] nameTagField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer's designated model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer\'s designated model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the degasser was installed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the degasser was installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimInstall", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimInstall {
            get {
                return this.dTimInstallField;
            }
            set {
                this.dTimInstallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the degasser was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the degasser was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRemove", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRemove {
            get {
                return this.dTimRemoveField;
            }
            set {
                this.dTimRemoveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description for the type of object.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description for the type of object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contractor/owner.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Contractor/owner.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Height of the separator.</summary>
        [System.ComponentModel.DescriptionAttribute("Height of the separator.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Height", DataType="LengthMeasure")]
        public LengthMeasure Height {
            get {
                return this.heightField;
            }
            set {
                this.heightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the separator.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the separator.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Len", DataType="LengthMeasure")]
        public LengthMeasure Len {
            get {
                return this.lenField;
            }
            set {
                this.lenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Internal diameter of the object.</summary>
        [System.ComponentModel.DescriptionAttribute("Internal diameter of the object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Id", DataType="LengthMeasure")]
        public LengthMeasure Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pump rate at which the unit efficiently operates.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum pump rate at which the unit efficiently operates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapFlow", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return this.capFlowField;
            }
            set {
                this.capFlowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flow area of the separator.</summary>
        [System.ComponentModel.DescriptionAttribute("Flow area of the separator.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AreaSeparatorFlow", DataType="AreaMeasure")]
        public AreaMeasure AreaSeparatorFlow {
            get {
                return this.areaSeparatorFlowField;
            }
            set {
                this.areaSeparatorFlowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Depth of trip-tank fluid level to provide back pressure against the separator flow.</summary>
        [System.ComponentModel.DescriptionAttribute("Depth of trip-tank fluid level to provide back pressure against the separator flo" +
            "w.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HtMudSeal", DataType="LengthMeasure")]
        public LengthMeasure HtMudSeal {
            get {
                return this.htMudSealField;
            }
            set {
                this.htMudSealField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Internal diameter of the inlet line.</summary>
        [System.ComponentModel.DescriptionAttribute("Internal diameter of the inlet line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdInlet", DataType="LengthMeasure")]
        public LengthMeasure IdInlet {
            get {
                return this.idInletField;
            }
            set {
                this.idInletField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Internal diameter of the vent line.</summary>
        [System.ComponentModel.DescriptionAttribute("Internal diameter of the vent line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdVentLine", DataType="LengthMeasure")]
        public LengthMeasure IdVentLine {
            get {
                return this.idVentLineField;
            }
            set {
                this.idVentLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the vent line.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the vent line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenVentLine", DataType="LengthMeasure")]
        public LengthMeasure LenVentLine {
            get {
                return this.lenVentLineField;
            }
            set {
                this.lenVentLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Safe gas-separating capacity.</summary>
        [System.ComponentModel.DescriptionAttribute("Safe gas-separating capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapGasSep", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure CapGasSep {
            get {
                return this.capGasSepField;
            }
            set {
                this.capGasSepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gas vent rate at which the vent line pressure drop exceeds the hydrostatic head because of the mud seal.</summary>
        [System.ComponentModel.DescriptionAttribute("Gas vent rate at which the vent line pressure drop exceeds the hydrostatic head b" +
            "ecause of the mud seal.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapBlowdown", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure CapBlowdown {
            get {
                return this.capBlowdownField;
            }
            set {
                this.capBlowdownField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure rating of the item.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure rating of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresRating", DataType="PressureMeasure")]
        public PressureMeasure PresRating {
            get {
                return this.presRatingField;
            }
            set {
                this.presRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Temperature rating of the separator.</summary>
        [System.ComponentModel.DescriptionAttribute("Temperature rating of the separator.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempRating", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempRating {
            get {
                return this.tempRatingField;
            }
            set {
                this.tempRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the degasser. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element only identifies the tag and does not describe the contents.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the degasser. A serial number is a type of identificati" +
            "on tag; however, some tags contain many pieces of information.This element only " +
            "identifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of degasser</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of degasser")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AreaMeasure {
        
        private AreaUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AreaUom")]
        public AreaUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaUom {
        
        /// <remarks/>
        acre,
        
        /// <remarks/>
        b,
        
        /// <remarks/>
        cm2,
        
        /// <remarks/>
        ft2,
        
        /// <remarks/>
        ha,
        
        /// <remarks/>
        in2,
        
        /// <remarks/>
        km2,
        
        /// <remarks/>
        m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]2")]
        miUS2,
        
        /// <remarks/>
        mi2,
        
        /// <remarks/>
        mm2,
        
        /// <remarks/>
        section,
        
        /// <remarks/>
        um2,
        
        /// <remarks/>
        yd2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class NameTag {
        
        private string nameField;
        
        private NameTagNumberingScheme numberingSchemeField;
        
        private NameTagTechnology technologyField;
        
        private bool technologyFieldSpecified;
        
        private NameTagLocation locationField;
        
        private bool locationFieldSpecified;
        
        private Energistics.DataAccess.Timestamp installationDateField;
        
        private string installationCompanyField;
        
        private string mountingCodeField;
        
        private string commentField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The physical identification string of the equipment tag.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The physical identification string of the equipment tag.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The format or encoding specification of the equipment tag. The tag may contain different pieces of information and knowledge of that information is inherent in the specification. The "identification string" is a mandatory part of the information in a tag.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The format or encoding specification of the equipment tag. The tag may contain di" +
            "fferent pieces of information and knowledge of that information is inherent in t" +
            "he specification. The \"identification string\" is a mandatory part of the informa" +
            "tion in a tag.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumberingScheme", DataType="NameTagNumberingScheme")]
        public NameTagNumberingScheme NumberingScheme {
            get {
                return this.numberingSchemeField;
            }
            set {
                this.numberingSchemeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Identifies the general type of identifier on an item.  If multiple identifiers exist on an item, a separate description set for each identifier should be created.  For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling.  The barcode label may in turn be an RFID-equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label'  - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label'  - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Identifies the general type of identifier on an item.  If multiple identifiers exist on an item, a separate description set for each identifier should be created.  For example, a joint of casing may have a barcode label on it along with a painted-on code and an RFID tag attached or embedded into the coupling.  The barcode label may in turn be an RFID-equipped label. This particular scenario would require populating five nameTags to fully describe and decode all the possible identifiers as follows: 'tagged' - RFID tag embedded in the coupling, 'label'  - Serial number printed on the label, 'tagged' - RFID tag embedded into the label, 'label'  - Barcode printed on the label, 'painted'- Mill number painted on the pipe body.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Technology", DataType="NameTagTechnology")]
        public NameTagTechnology Technology {
            get {
                return this.technologyField;
            }
            set {
                this.technologyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TechnologySpecified {
            get {
                return this.technologyFieldSpecified;
            }
            set {
                this.technologyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item.  This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener.  'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item.  Most non-downhole tools use either 'body', 'other' or not specified because the location tends to lose value with smaller or non threaded items.</summary>
        [System.ComponentModel.DescriptionAttribute(@"An indicator of where the tag is attached to the item. This is used to assist the user in finding where an identifier is located on an item.  This optional field also helps to differentiate where an identifier is located when multiple identifiers exist on an item. Most downhole components have a box (female thread) and pin (male thread) end as well as a pipe body in between the ends. Where multiple identifiers are used on an item, it is convenient to have a reference as to which end, or somewhere in the middle, an identifier may be closer to. Some items may have an identifier on a non-standard location, such as on the arm of a hole opener.  'other', by exclusion, tells a user to look elsewhere than on the body or near the ends of an item.  Most non-downhole tools use either 'body', 'other' or not specified because the location tends to lose value with smaller or non threaded items.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Location", DataType="NameTagLocation")]
        public NameTagLocation Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LocationSpecified {
            get {
                return this.locationFieldSpecified;
            }
            set {
                this.locationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When the tag was installed in or on the item.</summary>
        [System.ComponentModel.DescriptionAttribute("When the tag was installed in or on the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstallationDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp InstallationDate {
            get {
                return this.installationDateField;
            }
            set {
                this.installationDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the company that installed the tag.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the company that installed the tag.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InstallationCompany", DataType="String64")]
        public string InstallationCompany {
            get {
                return this.installationCompanyField;
            }
            set {
                this.installationCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a manufacturer's or installer's installation description, code, or method.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a manufacturer\'s or installer\'s installation description, code, or m" +
            "ethod.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MountingCode", DataType="String64")]
        public string MountingCode {
            get {
                return this.mountingCodeField;
            }
            set {
                this.mountingCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment or remark about the tag.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A comment or remark about the tag.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of NameTag.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of NameTag.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum NameTagNumberingScheme {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ANSI/AIM-BC10")]
        ANSIAIMBC10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ANSI/AIM-BC2")]
        ANSIAIMBC2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ANSI/AIM-BC6")]
        ANSIAIMBC6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EAN.UCC")]
        EANUCC,
        
        /// <remarks/>
        EPC64,
        
        /// <remarks/>
        EPC96,
        
        /// <remarks/>
        F2F,
        
        /// <remarks/>
        MFM,
        
        /// <remarks/>
        MSRCID,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("serial number")]
        serialnumber,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum NameTagTechnology {
        
        /// <remarks/>
        intrinsic,
        
        /// <remarks/>
        labeled,
        
        /// <remarks/>
        painted,
        
        /// <remarks/>
        stamped,
        
        /// <remarks/>
        tagged,
        
        /// <remarks/>
        temporary,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum NameTagLocation {
        
        /// <remarks/>
        body,
        
        /// <remarks/>
        box,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        pin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Hydrocyclone {
        
        private string manufacturerField;
        
        private string modelField;
        
        private Energistics.DataAccess.Timestamp dTimInstallField;
        
        private Energistics.DataAccess.Timestamp dTimRemoveField;
        
        private string typeField;
        
        private string descConeField;
        
        private string ownerField;
        
        private NameTag[] nameTagField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer's designated model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer\'s designated model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the hydroclone was installed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the hydroclone was installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimInstall", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimInstall {
            get {
                return this.dTimInstallField;
            }
            set {
                this.dTimInstallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Removal date and time the hydroclone was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("Removal date and time the hydroclone was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRemove", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRemove {
            get {
                return this.dTimRemoveField;
            }
            set {
                this.dTimRemoveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the type of object.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the type of object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cone description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cone description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescCone", DataType="String64")]
        public string DescCone {
            get {
                return this.descConeField;
            }
            set {
                this.descConeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contractor/owner.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Contractor/owner.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the hydrocyclone. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the hydrocyclone. A serial number is a type of identifi" +
            "cation tag; however, some tags contain many pieces of information. This element " +
            "only identifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Hydrocyclone.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Hydrocyclone.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Centrifuge {
        
        private string manufacturerField;
        
        private string modelField;
        
        private Energistics.DataAccess.Timestamp dTimInstallField;
        
        private Energistics.DataAccess.Timestamp dTimRemoveField;
        
        private string typeField;
        
        private VolumePerTimeMeasure capFlowField;
        
        private string ownerField;
        
        private NameTag[] nameTagField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer's designated model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer\'s designated model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the centrifuge was installed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the centrifuge was installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimInstall", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimInstall {
            get {
                return this.dTimInstallField;
            }
            set {
                this.dTimInstallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the centrifuge was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the centrifuge was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRemove", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRemove {
            get {
                return this.dTimRemoveField;
            }
            set {
                this.dTimRemoveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description for the type of object.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description for the type of object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pump rate at which the unit efficiently operates.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum pump rate at which the unit efficiently operates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapFlow", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return this.capFlowField;
            }
            set {
                this.capFlowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contractor/owner.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Contractor/owner.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the centrifuge. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element only identifies the tag and does not describe the contents.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the centrifuge. A serial number is a type of identifica" +
            "tion tag; however, some tags contain many pieces of information.This element onl" +
            "y identifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Centrifuge.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Centrifuge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudPump {
        
        private int indexField;
        
        private string manufacturerField;
        
        private string modelField;
        
        private Energistics.DataAccess.Timestamp dTimInstallField;
        
        private Energistics.DataAccess.Timestamp dTimRemoveField;
        
        private string ownerField;
        
        private PumpType typePumpField;
        
        private bool typePumpFieldSpecified;
        
        private int numCylField;
        
        private bool numCylFieldSpecified;
        
        private LengthMeasure odRodField;
        
        private LengthMeasure idLinerField;
        
        private short pumpActionField;
        
        private bool pumpActionFieldSpecified;
        
        private PowerPerPowerMeasure effField;
        
        private LengthMeasure lenStrokeField;
        
        private PressureMeasure presMxField;
        
        private PowerMeasure powHydMxField;
        
        private AngularVelocityMeasure spmMxField;
        
        private VolumeMeasure displacementField;
        
        private PressureMeasure presDampField;
        
        private VolumeMeasure volDampField;
        
        private PowerMeasure powMechMxField;
        
        private NameTag[] nameTagField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Relative pump number. One-based.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Relative pump number. One-based.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="int")]
        public int Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer's designated model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer\'s designated model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the pump was installed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the pump was installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimInstall", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimInstall {
            get {
                return this.dTimInstallField;
            }
            set {
                this.dTimInstallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the pump was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the pump was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRemove", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRemove {
            get {
                return this.dTimRemoveField;
            }
            set {
                this.dTimRemoveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contractor/owner.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Contractor/owner.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump type reference list.</summary>
        [System.ComponentModel.DescriptionAttribute("Pump type reference list.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypePump", DataType="PumpType")]
        public PumpType TypePump {
            get {
                return this.typePumpField;
            }
            set {
                this.typePumpField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypePumpSpecified {
            get {
                return this.typePumpFieldSpecified;
            }
            set {
                this.typePumpFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of cylinders (3 = single acting, 2 = double acting)</summary>
        [System.ComponentModel.DescriptionAttribute("Number of cylinders (3 = single acting, 2 = double acting)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumCyl", DataType="int")]
        public int NumCyl {
            get {
                return this.numCylField;
            }
            set {
                this.numCylField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumCylSpecified {
            get {
                return this.numCylFieldSpecified;
            }
            set {
                this.numCylFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rod outer diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Rod outer diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdRod", DataType="LengthMeasure")]
        public LengthMeasure OdRod {
            get {
                return this.odRodField;
            }
            set {
                this.odRodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the pump liner.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the pump liner.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdLiner", DataType="LengthMeasure")]
        public LengthMeasure IdLiner {
            get {
                return this.idLinerField;
            }
            set {
                this.idLinerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump action. 1 = single acting, 2 = double acting.</summary>
        [System.ComponentModel.DescriptionAttribute("Pump action. 1 = single acting, 2 = double acting.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpAction", DataType="PumpActionIntegerCode")]
        public short PumpAction {
            get {
                return this.pumpActionField;
            }
            set {
                this.pumpActionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PumpActionSpecified {
            get {
                return this.pumpActionFieldSpecified;
            }
            set {
                this.pumpActionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Efficiency of the pump.</summary>
        [System.ComponentModel.DescriptionAttribute("Efficiency of the pump.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Eff", DataType="PowerPerPowerMeasure")]
        public PowerPerPowerMeasure Eff {
            get {
                return this.effField;
            }
            set {
                this.effField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Stroke length.</summary>
        [System.ComponentModel.DescriptionAttribute("Stroke length.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenStroke", DataType="LengthMeasure")]
        public LengthMeasure LenStroke {
            get {
                return this.lenStrokeField;
            }
            set {
                this.lenStrokeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pump pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum pump pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresMx", DataType="PressureMeasure")]
        public PressureMeasure PresMx {
            get {
                return this.presMxField;
            }
            set {
                this.presMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum hydraulics horsepower.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum hydraulics horsepower.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PowHydMx", DataType="PowerMeasure")]
        public PowerMeasure PowHydMx {
            get {
                return this.powHydMxField;
            }
            set {
                this.powHydMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum speed.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum speed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpmMx", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure SpmMx {
            get {
                return this.spmMxField;
            }
            set {
                this.spmMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump displacement.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Pump displacement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Displacement", DataType="VolumeMeasure")]
        public VolumeMeasure Displacement {
            get {
                return this.displacementField;
            }
            set {
                this.displacementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pulsation dampener pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Pulsation dampener pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresDamp", DataType="PressureMeasure")]
        public PressureMeasure PresDamp {
            get {
                return this.presDampField;
            }
            set {
                this.presDampField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pulsation dampener volume.</summary>
        [System.ComponentModel.DescriptionAttribute("Pulsation dampener volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolDamp", DataType="VolumeMeasure")]
        public VolumeMeasure VolDamp {
            get {
                return this.volDampField;
            }
            set {
                this.volDampField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum mechanical power.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum mechanical power.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PowMechMx", DataType="PowerMeasure")]
        public PowerMeasure PowMechMx {
            get {
                return this.powMechMxField;
            }
            set {
                this.powMechMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the pump. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element onlyidentifies the tag and does not describe the contents.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the pump. A serial number is a type of identification t" +
            "ag; however, some tags contain many pieces of information.This element onlyident" +
            "ifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of MudPump.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of MudPump.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PumpType {
        
        /// <remarks/>
        centrifugal,
        
        /// <remarks/>
        duplex,
        
        /// <remarks/>
        triplex,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PowerPerPowerMeasure {
        
        private PowerPerPowerUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PowerPerPowerUom")]
        public PowerPerPowerUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerPowerUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(hp.h)")]
        BtuIThph,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/kW")]
        WkW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/W")]
        WW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AngularVelocityMeasure {
        
        private AngularVelocityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AngularVelocityUom")]
        public AngularVelocityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AngularVelocityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/h")]
        degah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/min")]
        degamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/s")]
        degas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s")]
        rads,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/s")]
        revs,
        
        /// <remarks/>
        rpm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Pit {
        
        private int indexField;
        
        private Energistics.DataAccess.Timestamp dTimInstallField;
        
        private Energistics.DataAccess.Timestamp dTimRemoveField;
        
        private VolumeMeasure capMxField;
        
        private string ownerField;
        
        private PitType typePitField;
        
        private bool typePitFieldSpecified;
        
        private bool isActiveField;
        
        private bool isActiveFieldSpecified;
        
        private NameTag[] nameTagField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Relative pit number of all pits on the rig. One-based.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Relative pit number of all pits on the rig. One-based.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="int")]
        public int Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the pit was installed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the pit was installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimInstall", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimInstall {
            get {
                return this.dTimInstallField;
            }
            set {
                this.dTimInstallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the pit was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the pit was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRemove", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRemove {
            get {
                return this.dTimRemoveField;
            }
            set {
                this.dTimRemoveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pit capacity.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Maximum pit capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapMx", DataType="VolumeMeasure")]
        public VolumeMeasure CapMx {
            get {
                return this.capMxField;
            }
            set {
                this.capMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contractor/owner.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Contractor/owner.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of pit.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of pit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypePit", DataType="PitType")]
        public PitType TypePit {
            get {
                return this.typePitField;
            }
            set {
                this.typePitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypePitSpecified {
            get {
                return this.typePitFieldSpecified;
            }
            set {
                this.typePitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag to indicate if the pit is part of the active system.  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Flag to indicate if the pit is part of the active system.  Values are \"true\" (or " +
            "\"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsActive", DataType="boolean")]
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsActiveSpecified {
            get {
                return this.isActiveFieldSpecified;
            }
            set {
                this.isActiveFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the pit. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the pit. A serial number is a type of identification ta" +
            "g; however, some tags contain many pieces of information. This element only iden" +
            "tifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of pit</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of pit")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PitType {
        
        /// <remarks/>
        bulk,
        
        /// <remarks/>
        chemical,
        
        /// <remarks/>
        drilling,
        
        /// <remarks/>
        mix,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud cleaning")]
        mudcleaning,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sand trap")]
        sandtrap,
        
        /// <remarks/>
        slug,
        
        /// <remarks/>
        storage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surge tank")]
        surgetank,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("trip tank")]
        triptank,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BopComponent {
        
        private BopType typeBopCompField;
        
        private bool typeBopCompFieldSpecified;
        
        private string descCompField;
        
        private LengthMeasure idPassThruField;
        
        private PressureMeasure presWorkField;
        
        private LengthMeasure diaCloseMnField;
        
        private LengthMeasure diaCloseMxField;
        
        private string nomenclatureField;
        
        private bool isVariableField;
        
        private bool isVariableFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Type of ram or preventer.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of ram or preventer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeBopComp", DataType="BopType")]
        public BopType TypeBopComp {
            get {
                return this.typeBopCompField;
            }
            set {
                this.typeBopCompField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeBopCompSpecified {
            get {
                return this.typeBopCompFieldSpecified;
            }
            set {
                this.typeBopCompFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the component.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescComp", DataType="String64")]
        public string DescComp {
            get {
                return this.descCompField;
            }
            set {
                this.descCompField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter that tubulars can pass through.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter that tubulars can pass through.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdPassThru", DataType="LengthMeasure")]
        public LengthMeasure IdPassThru {
            get {
                return this.idPassThruField;
            }
            set {
                this.idPassThruField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Working rating pressure of the component.</summary>
        [System.ComponentModel.DescriptionAttribute("Working rating pressure of the component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresWork", DataType="PressureMeasure")]
        public PressureMeasure PresWork {
            get {
                return this.presWorkField;
            }
            set {
                this.presWorkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum diameter of the component it will seal.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum diameter of the component it will seal.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaCloseMn", DataType="LengthMeasure")]
        public LengthMeasure DiaCloseMn {
            get {
                return this.diaCloseMnField;
            }
            set {
                this.diaCloseMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum diameter of the component it will seal.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum diameter of the component it will seal.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaCloseMx", DataType="LengthMeasure")]
        public LengthMeasure DiaCloseMx {
            get {
                return this.diaCloseMxField;
            }
            set {
                this.diaCloseMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Arrangement nomenclature for the blowout preventer stack (e.g., S, R, A).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Arrangement nomenclature for the blowout preventer stack (e.g., S, R, A).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nomenclature", DataType="String64")]
        public string Nomenclature {
            get {
                return this.nomenclatureField;
            }
            set {
                this.nomenclatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is ram bore variable or single size? Defaults to false.  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is ram bore variable or single size? Defaults to false.  Values are \"true\" (or \"1" +
            "\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsVariable", DataType="boolean")]
        public bool IsVariable {
            get {
                return this.isVariableField;
            }
            set {
                this.isVariableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsVariableSpecified {
            get {
                return this.isVariableFieldSpecified;
            }
            set {
                this.isVariableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of BopComponent</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of BopComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BopType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("annular preventer")]
        annularpreventer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shear ram")]
        shearram,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("blind ram")]
        blindram,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pipe ram")]
        piperam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling spool")]
        drillingspool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flexible joint")]
        flexiblejoint,
        
        /// <remarks/>
        connector,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Bop {
        
        private string manufacturerField;
        
        private string modelField;
        
        private Energistics.DataAccess.Timestamp dTimInstallField;
        
        private Energistics.DataAccess.Timestamp dTimRemoveField;
        
        private NameTag[] nameTagField;
        
        private string typeConnectionBopField;
        
        private LengthMeasure sizeConnectionBopField;
        
        private PressureMeasure presBopRatingField;
        
        private LengthMeasure sizeBopSysField;
        
        private bool rotBopField;
        
        private bool rotBopFieldSpecified;
        
        private LengthMeasure idBoosterLineField;
        
        private LengthMeasure odBoosterLineField;
        
        private LengthMeasure lenBoosterLineField;
        
        private LengthMeasure idSurfLineField;
        
        private LengthMeasure odSurfLineField;
        
        private LengthMeasure lenSurfLineField;
        
        private LengthMeasure idChkLineField;
        
        private LengthMeasure odChkLineField;
        
        private LengthMeasure lenChkLineField;
        
        private LengthMeasure idKillLineField;
        
        private LengthMeasure odKillLineField;
        
        private LengthMeasure lenKillLineField;
        
        private string typeDiverterField;
        
        private LengthMeasure diaDiverterField;
        
        private PressureMeasure presWorkDiverterField;
        
        private string accumulatorField;
        
        private VolumeMeasure capAccFluidField;
        
        private PressureMeasure presAccPreChargeField;
        
        private VolumeMeasure volAccPreChargeField;
        
        private PressureMeasure presAccOpRatingField;
        
        private string typeControlManifoldField;
        
        private string descControlManifoldField;
        
        private string typeChokeManifoldField;
        
        private PressureMeasure presChokeManifoldField;
        
        private BopComponent[] bopComponentField;
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer's designated model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer\'s designated model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the BOP was installed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the BOP was installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimInstall", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimInstall {
            get {
                return this.dTimInstallField;
            }
            set {
                this.dTimInstallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time of the BOP was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time of the BOP was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRemove", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRemove {
            get {
                return this.dTimRemoveField;
            }
            set {
                this.dTimRemoveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the blowout preventer. A serial number is a type of identification tag; however, some tags contain many pieces of information.This element only identifies the tag and does not describe the contents.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the blowout preventer. A serial number is a type of ide" +
            "ntification tag; however, some tags contain many pieces of information.This elem" +
            "ent only identifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of connection to the blowout preventer.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of connection to the blowout preventer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeConnectionBop", DataType="String64")]
        public string TypeConnectionBop {
            get {
                return this.typeConnectionBopField;
            }
            set {
                this.typeConnectionBopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the connection to the blowout preventer.</summary>
        [System.ComponentModel.DescriptionAttribute("Size of the connection to the blowout preventer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeConnectionBop", DataType="LengthMeasure")]
        public LengthMeasure SizeConnectionBop {
            get {
                return this.sizeConnectionBopField;
            }
            set {
                this.sizeConnectionBopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pressure rating of the blowout preventer.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Maximum pressure rating of the blowout preventer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBopRating", DataType="PressureMeasure")]
        public PressureMeasure PresBopRating {
            get {
                return this.presBopRatingField;
            }
            set {
                this.presBopRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum tubulars passable through the blowout preventer.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Maximum tubulars passable through the blowout preventer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeBopSys", DataType="LengthMeasure")]
        public LengthMeasure SizeBopSys {
            get {
                return this.sizeBopSysField;
            }
            set {
                this.sizeBopSysField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is this a rotating blowout preventer? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is this a rotating blowout preventer? Values are \"true\" (or \"1\") and \"false\" (or " +
            "\"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RotBop", DataType="boolean")]
        public bool RotBop {
            get {
                return this.rotBopField;
            }
            set {
                this.rotBopField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotBopSpecified {
            get {
                return this.rotBopFieldSpecified;
            }
            set {
                this.rotBopFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the booster line.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the booster line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdBoosterLine", DataType="LengthMeasure")]
        public LengthMeasure IdBoosterLine {
            get {
                return this.idBoosterLineField;
            }
            set {
                this.idBoosterLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outer diameter of the booster line.</summary>
        [System.ComponentModel.DescriptionAttribute("Outer diameter of the booster line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdBoosterLine", DataType="LengthMeasure")]
        public LengthMeasure OdBoosterLine {
            get {
                return this.odBoosterLineField;
            }
            set {
                this.odBoosterLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the booster line along the riser.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the booster line along the riser.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenBoosterLine", DataType="LengthMeasure")]
        public LengthMeasure LenBoosterLine {
            get {
                return this.lenBoosterLineField;
            }
            set {
                this.lenBoosterLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the surface line.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the surface line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdSurfLine", DataType="LengthMeasure")]
        public LengthMeasure IdSurfLine {
            get {
                return this.idSurfLineField;
            }
            set {
                this.idSurfLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outer diameter of the surface line.</summary>
        [System.ComponentModel.DescriptionAttribute("Outer diameter of the surface line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdSurfLine", DataType="LengthMeasure")]
        public LengthMeasure OdSurfLine {
            get {
                return this.odSurfLineField;
            }
            set {
                this.odSurfLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the surface line the along riser.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the surface line the along riser.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenSurfLine", DataType="LengthMeasure")]
        public LengthMeasure LenSurfLine {
            get {
                return this.lenSurfLineField;
            }
            set {
                this.lenSurfLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the choke line.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the choke line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdChkLine", DataType="LengthMeasure")]
        public LengthMeasure IdChkLine {
            get {
                return this.idChkLineField;
            }
            set {
                this.idChkLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outer diameter of the choke line.</summary>
        [System.ComponentModel.DescriptionAttribute("Outer diameter of the choke line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdChkLine", DataType="LengthMeasure")]
        public LengthMeasure OdChkLine {
            get {
                return this.odChkLineField;
            }
            set {
                this.odChkLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the choke line along the riser.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the choke line along the riser.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenChkLine", DataType="LengthMeasure")]
        public LengthMeasure LenChkLine {
            get {
                return this.lenChkLineField;
            }
            set {
                this.lenChkLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter of the kill line.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter of the kill line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdKillLine", DataType="LengthMeasure")]
        public LengthMeasure IdKillLine {
            get {
                return this.idKillLineField;
            }
            set {
                this.idKillLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outer diameter of the kill line.</summary>
        [System.ComponentModel.DescriptionAttribute("Outer diameter of the kill line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdKillLine", DataType="LengthMeasure")]
        public LengthMeasure OdKillLine {
            get {
                return this.odKillLineField;
            }
            set {
                this.odKillLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the kill line.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the kill line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenKillLine", DataType="LengthMeasure")]
        public LengthMeasure LenKillLine {
            get {
                return this.lenKillLineField;
            }
            set {
                this.lenKillLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diverter description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Diverter description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeDiverter", DataType="String64")]
        public string TypeDiverter {
            get {
                return this.typeDiverterField;
            }
            set {
                this.typeDiverterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of the diverter.</summary>
        [System.ComponentModel.DescriptionAttribute("Diameter of the diverter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaDiverter", DataType="LengthMeasure")]
        public LengthMeasure DiaDiverter {
            get {
                return this.diaDiverterField;
            }
            set {
                this.diaDiverterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Working rating pressure of the component.</summary>
        [System.ComponentModel.DescriptionAttribute("Working rating pressure of the component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresWorkDiverter", DataType="PressureMeasure")]
        public PressureMeasure PresWorkDiverter {
            get {
                return this.presWorkDiverterField;
            }
            set {
                this.presWorkDiverterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of accumulator/description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of accumulator/description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Accumulator", DataType="String64")]
        public string Accumulator {
            get {
                return this.accumulatorField;
            }
            set {
                this.accumulatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Accumulator fluid capacity.</summary>
        [System.ComponentModel.DescriptionAttribute("Accumulator fluid capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapAccFluid", DataType="VolumeMeasure")]
        public VolumeMeasure CapAccFluid {
            get {
                return this.capAccFluidField;
            }
            set {
                this.capAccFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Accumulator pre-charge pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Accumulator pre-charge pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresAccPreCharge", DataType="PressureMeasure")]
        public PressureMeasure PresAccPreCharge {
            get {
                return this.presAccPreChargeField;
            }
            set {
                this.presAccPreChargeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Accumulator pre-charge volume</summary>
        [System.ComponentModel.DescriptionAttribute("Accumulator pre-charge volume")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolAccPreCharge", DataType="VolumeMeasure")]
        public VolumeMeasure VolAccPreCharge {
            get {
                return this.volAccPreChargeField;
            }
            set {
                this.volAccPreChargeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Accumulator operating pressure rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Accumulator operating pressure rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresAccOpRating", DataType="PressureMeasure")]
        public PressureMeasure PresAccOpRating {
            get {
                return this.presAccOpRatingField;
            }
            set {
                this.presAccOpRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The blowout preventer control system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The blowout preventer control system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeControlManifold", DataType="String64")]
        public string TypeControlManifold {
            get {
                return this.typeControlManifoldField;
            }
            set {
                this.typeControlManifoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the control system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description of the control system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescControlManifold", DataType="String2000")]
        public string DescControlManifold {
            get {
                return this.descControlManifoldField;
            }
            set {
                this.descControlManifoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of choke manifold.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of choke manifold.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeChokeManifold", DataType="String64")]
        public string TypeChokeManifold {
            get {
                return this.typeChokeManifoldField;
            }
            set {
                this.typeChokeManifoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Choke manifold pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Choke manifold pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresChokeManifold", DataType="PressureMeasure")]
        public PressureMeasure PresChokeManifold {
            get {
                return this.presChokeManifoldField;
            }
            set {
                this.presChokeManifoldField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BopComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BopComponent", DataType="BopComponent")]
        public BopComponent[] BopComponent {
            get {
                return this.bopComponentField;
            }
            set {
                this.bopComponentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Shaker {
        
        private string nameField;
        
        private string manufacturerField;
        
        private string modelField;
        
        private Energistics.DataAccess.Timestamp dTimInstallField;
        
        private Energistics.DataAccess.Timestamp dTimRemoveField;
        
        private string typeField;
        
        private string locationShakerField;
        
        private int numDecksField;
        
        private bool numDecksFieldSpecified;
        
        private int numCascLevelField;
        
        private bool numCascLevelFieldSpecified;
        
        private bool mudCleanerField;
        
        private bool mudCleanerFieldSpecified;
        
        private VolumePerTimeMeasure capFlowField;
        
        private string ownerField;
        
        private LengthMeasure sizeMeshMnField;
        
        private NameTag[] nameTagField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Human-recognizable context for the shaker.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Human-recognizable context for the shaker.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer's designated model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer\'s designated model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the shaker was installed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the shaker was installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimInstall", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimInstall {
            get {
                return this.dTimInstallField;
            }
            set {
                this.dTimInstallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the shaker was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the shaker was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRemove", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRemove {
            get {
                return this.dTimRemoveField;
            }
            set {
                this.dTimRemoveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description for the type of object.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description for the type of object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Shaker location on the rig.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Shaker location on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocationShaker", DataType="String64")]
        public string LocationShaker {
            get {
                return this.locationShakerField;
            }
            set {
                this.locationShakerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of decks.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of decks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumDecks", DataType="int")]
        public int NumDecks {
            get {
                return this.numDecksField;
            }
            set {
                this.numDecksField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumDecksSpecified {
            get {
                return this.numDecksFieldSpecified;
            }
            set {
                this.numDecksFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of cascade levels.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of cascade levels.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumCascLevel", DataType="int")]
        public int NumCascLevel {
            get {
                return this.numCascLevelField;
            }
            set {
                this.numCascLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumCascLevelSpecified {
            get {
                return this.numCascLevelFieldSpecified;
            }
            set {
                this.numCascLevelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is part of mud-cleaning assembly as opposed to discrete shale shaker? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is part of mud-cleaning assembly as opposed to discrete shale shaker? Values are " +
            "\"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudCleaner", DataType="boolean")]
        public bool MudCleaner {
            get {
                return this.mudCleanerField;
            }
            set {
                this.mudCleanerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MudCleanerSpecified {
            get {
                return this.mudCleanerFieldSpecified;
            }
            set {
                this.mudCleanerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pump rate at which the unit efficiently operates.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum pump rate at which the unit efficiently operates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapFlow", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure CapFlow {
            get {
                return this.capFlowField;
            }
            set {
                this.capFlowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contractor/owner.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Contractor/owner.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum mesh size.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum mesh size.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeMeshMn", DataType="LengthMeasure")]
        public LengthMeasure SizeMeshMn {
            get {
                return this.sizeMeshMnField;
            }
            set {
                this.sizeMeshMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the shaker. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents. .</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the shaker. A serial number is a type of identification" +
            " tag; however, some tags contain many pieces of information. This element only i" +
            "dentifies the tag and does not describe the contents. .")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Shaker.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Shaker.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerVolumeMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerVolumeUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ForcePerVolumeMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ForcePerVolumeUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PressureMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PressureUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ForceMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ForceUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogConcentrationParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogStringParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogPressureGradientParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogPressureParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MudLogForceParameter))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class MudLogParameter {
        
        private MdInterval mdIntervalField;
        
        private Citation citationField;
        
        private string commentsField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Measured depth interval that is the focus of this parameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval that is the focus of this parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the MudLogParameter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of t" +
            "he MudLogParameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Citation", DataType="Citation")]
        public Citation Citation {
            get {
                return this.citationField;
            }
            set {
                this.citationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description or secondary qualifier pertaining to MudlogParameter or to Value attribute.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description or secondary qualifier pertaining to MudlogParameter or to Value attr" +
            "ibute.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of MudLogParameter.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of MudLogParameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class Citation {
        
        private string titleField;
        
        private string originatorField;
        
        private System.DateTime creationField;
        
        private string formatField;
        
        private string editorField;
        
        private System.DateTime lastUpdateField;
        
        private bool lastUpdateFieldSpecified;
        
        private string versionStringField;
        
        private string descriptionField;
        
        private string descriptiveKeywordsField;
        
        /// <remarks/>
        /// <summary>One line description/name of the object.  This is the equivalent in ISO 19115 of CI_Citation.title  Legacy DCGroup - title</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("One line description/name of the object.  This is the equivalent in ISO 19115 of " +
            "CI_Citation.title  Legacy DCGroup - title")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="String2000")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name (or other human-readable identifier) of the person who initially originated the object or document in the source application. If that information is not available, then this is the user who created the format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "originator".  Legacy DCGroup - author</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Name (or other human-readable identifier) of the person who initially originated the object or document in the source application. If that information is not available, then this is the user who created the format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is ""originator"".  Legacy DCGroup - author")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Originator", DataType="String64")]
        public string Originator {
            get {
                return this.originatorField;
            }
            set {
                this.originatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the document was created in the source application or, if that information is not available, when it was saved to the file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation"  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Date and time the document was created in the source application or, if that information is not available, when it was saved to the file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation""  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Creation", DataType="dateTime")]
        public System.DateTime Creation {
            get {
                return this.creationField;
            }
            set {
                this.creationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute(@"Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Format", DataType="String2000")]
        public string Format {
            get {
                return this.formatField;
            }
            set {
                this.formatField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "editor".  Legacy DCGroup - contributor</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is ""editor"".  Legacy DCGroup - contributor")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Editor", DataType="String64")]
        public string Editor {
            get {
                return this.editorField;
            }
            set {
                this.editorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate"   Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified</summary>
        [System.ComponentModel.DescriptionAttribute(@"Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate""   Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastUpdate", DataType="dateTime")]
        public System.DateTime LastUpdate {
            get {
                return this.lastUpdateField;
            }
            set {
                this.lastUpdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastUpdateSpecified {
            get {
                return this.lastUpdateFieldSpecified;
            }
            set {
                this.lastUpdateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VersionString", DataType="String64")]
        public string VersionString {
            get {
                return this.versionStringField;
            }
            set {
                this.versionStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.  This is the equivalent of the ISO 19115 abstract.CharacterString  Legacy DCGroup - description</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("User descriptive comments about the object. Intended for end-user use (human read" +
            "able); not necessarily meant to be used by software.  This is the equivalent of " +
            "the ISO 19115 abstract.CharacterString  Legacy DCGroup - description")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute(@"Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescriptiveKeywords", DataType="String2000")]
        public string DescriptiveKeywords {
            get {
                return this.descriptiveKeywordsField;
            }
            set {
                this.descriptiveKeywordsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudLogConcentrationParameter : MudLogParameter {
        
        private VolumePerVolumeMeasureExt valueField;
        
        private ConcentrationParameterKind concentrationParameterKindField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="VolumePerVolumeMeasureExt")]
        public VolumePerVolumeMeasureExt Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConcentrationParameterKind", DataType="ConcentrationParameterKind")]
        public ConcentrationParameterKind ConcentrationParameterKind {
            get {
                return this.concentrationParameterKindField;
            }
            set {
                this.concentrationParameterKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ConcentrationParameterKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cuttings gas")]
        cuttingsgas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudLogStringParameter : MudLogParameter {
        
        private string valueField;
        
        private MudLogStringParameterKind mudLogStringParameterKindField;
        
        /// <remarks/>
        /// <summary>The value of the parameter as a character string.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The value of the parameter as a character string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="String64")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudLogStringParameterKind", DataType="MudLogStringParameterKind")]
        public MudLogStringParameterKind MudLogStringParameterKind {
            get {
                return this.mudLogStringParameterKindField;
            }
            set {
                this.mudLogStringParameterKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum MudLogStringParameterKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit parameters")]
        bitparameters,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit type comment")]
        bittypecomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing point comment")]
        casingpointcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chromatograph comment")]
        chromatographcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulation system comment")]
        circulationsystemcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("core interval comment")]
        coreintervalcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling data comment")]
        drillingdatacomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas peaks comment")]
        gaspeakscomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas ratio comment")]
        gasratiocomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general engineering comment")]
        generalengineeringcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lithlog comment")]
        lithlogcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("LWD comment")]
        LWDcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("marker or formation top comment")]
        markerorformationtopcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("midnight depth date")]
        midnightdepthdate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud check comment")]
        mudcheckcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud data comment")]
        muddatacomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mudlog comment")]
        mudlogcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure data comment")]
        pressuredatacomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shale density comment")]
        shaledensitycomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("short trip comment")]
        shorttripcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("show report comment")]
        showreportcomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sidewall core comment")]
        sidewallcorecomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sliding Interval")]
        slidingInterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("steam still results comment")]
        steamstillresultscomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("survey comment")]
        surveycomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature data comment")]
        temperaturedatacomment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature trend comment")]
        temperaturetrendcomment,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline log comment")]
        wirelinelogcomment,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudLogPressureGradientParameter : MudLogParameter {
        
        private ForcePerVolumeMeasureExt valueField;
        
        private PressureGradientParameterKind pressureGradientParameterKindField;
        
        /// <remarks/>
        /// <summary>The value of the parameter in pressure gradient units.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value of the parameter in pressure gradient units.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="ForcePerVolumeMeasureExt")]
        public ForcePerVolumeMeasureExt Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PressureGradientParameterKind", DataType="PressureGradientParameterKind")]
        public PressureGradientParameterKind PressureGradientParameterKind {
            get {
                return this.pressureGradientParameterKindField;
            }
            set {
                this.pressureGradientParameterKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PressureGradientParameterKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("direct pore pressure gradient measurement")]
        directporepressuregradientmeasurement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fracture pressure gradient estimate")]
        fracturepressuregradientestimate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kick pressure gradient")]
        kickpressuregradient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lost returns")]
        lostreturns,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("overburden gradient")]
        overburdengradient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pore pressure gradient estimate")]
        porepressuregradientestimate,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudLogPressureParameter : MudLogParameter {
        
        private PressureMeasureExt valueField;
        
        private PressureParameterKind pressureParameterKindField;
        
        /// <remarks/>
        /// <summary>The value of the parameter in pressure units.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value of the parameter in pressure units.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="PressureMeasureExt")]
        public PressureMeasureExt Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PressureParameterKind", DataType="PressureParameterKind")]
        public PressureParameterKind PressureParameterKind {
            get {
                return this.pressureParameterKindField;
            }
            set {
                this.pressureParameterKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PressureParameterKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("direct fracture pressure measurement")]
        directfracturepressuremeasurement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pore pressure estimate while drilling")]
        porepressureestimatewhiledrilling,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudLogForceParameter : MudLogParameter {
        
        private ForceMeasureExt valueField;
        
        private ForceParameterKind forceParameterKindField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="ForceMeasureExt")]
        public ForceMeasureExt Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ForceParameterKind", DataType="ForceParameterKind")]
        public ForceParameterKind ForceParameterKind {
            get {
                return this.forceParameterKindField;
            }
            set {
                this.forceParameterKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ForceParameterKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("overpull on connection")]
        overpullonconnection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("overpull on trip")]
        overpullontrip,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class GasPeak {
        
        private GasPeakType peakTypeField;
        
        private LengthMeasure mdPeakField;
        
        private VolumePerVolumeMeasure averageGasField;
        
        private VolumePerVolumeMeasure peakGasField;
        
        private VolumePerVolumeMeasure backgroundGasField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Type of gas peak</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Type of gas peak")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PeakType", DataType="GasPeakType")]
        public GasPeakType PeakType {
            get {
                return this.peakTypeField;
            }
            set {
                this.peakTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at which the gas reading was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth at which the gas reading was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdPeak", DataType="LengthMeasure")]
        public LengthMeasure MdPeak {
            get {
                return this.mdPeakField;
            }
            set {
                this.mdPeakField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average total gas.</summary>
        [System.ComponentModel.DescriptionAttribute("Average total gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageGas", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure AverageGas {
            get {
                return this.averageGasField;
            }
            set {
                this.averageGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Peak gas reading.</summary>
        [System.ComponentModel.DescriptionAttribute("Peak gas reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PeakGas", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure PeakGas {
            get {
                return this.peakGasField;
            }
            set {
                this.peakGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Background gas reading.</summary>
        [System.ComponentModel.DescriptionAttribute("Background gas reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BackgroundGas", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure BackgroundGas {
            get {
                return this.backgroundGasField;
            }
            set {
                this.backgroundGasField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum GasPeakType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulating background gas")]
        circulatingbackgroundgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("connection gas")]
        connectiongas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling background gas")]
        drillingbackgroundgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling gas peak")]
        drillinggaspeak,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flow check gas")]
        flowcheckgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("no readings")]
        noreadings,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shut down gas")]
        shutdowngas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("trip gas")]
        tripgas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DataObjectReference {
        
        private string contentTypeField;
        
        private string titleField;
        
        private string uuidField;
        
        private string uuidAuthorityField;
        
        private string uriField;
        
        private string versionStringField;
        
        /// <remarks/>
        /// <summary>The content type of the referenced element.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The content type of the referenced element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContentType", DataType="String2000")]
        public string ContentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Title of the referenced object. The Title of a top level element would be inherited from AbstractObject and must be present on any referenced object.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The Title of the referenced object. The Title of a top level element would be inh" +
            "erited from AbstractObject and must be present on any referenced object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="String2000")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to an object using its global UID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("Reference to an object using its global UID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uuid", DataType="UuidString")]
        public string Uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The authority that issued and maintains the uuid of the referenced object. Used mainly in alias context.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The authority that issued and maintains the uuid of the referenced object. Used m" +
            "ainly in alias context.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UuidAuthority", DataType="String64")]
        public string UuidAuthority {
            get {
                return this.uuidAuthorityField;
            }
            set {
                this.uuidAuthorityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This is the URI of a referenced object.   Do not use this to store the path and file names of an external object - that is done through the External Dataset machinery.  This element is intended for use with the Energistics Transfer Protocol.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.ComponentModel.DescriptionAttribute("This is the URI of a referenced object.   Do not use this to store the path and f" +
            "ile names of an external object - that is done through the External Dataset mach" +
            "inery.  This element is intended for use with the Energistics Transfer Protocol." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uri", DataType="anyURI")]
        public string Uri {
            get {
                return this.uriField;
            }
            set {
                this.uriField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates the version of the object which is referenced.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Indicates the version of the object which is referenced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VersionString", DataType="String64")]
        public string VersionString {
            get {
                return this.versionStringField;
            }
            set {
                this.versionStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class GasInMud {
        
        private VolumePerVolumeMeasure averageField;
        
        private VolumePerVolumeMeasure maximumField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Average percentage of gas in the mud.</summary>
        [System.ComponentModel.DescriptionAttribute("Average percentage of gas in the mud.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum percentage of gas in the mud.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum percentage of gas in the mud.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Maximum", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Maximum {
            get {
                return this.maximumField;
            }
            set {
                this.maximumField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudGas {
        
        private GasInMud gasInMudField;
        
        private GasPeak[] gasPeakField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasInMud", DataType="GasInMud")]
        public GasInMud GasInMud {
            get {
                return this.gasInMudField;
            }
            set {
                this.gasInMudField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GasPeak")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasPeak", DataType="GasPeak")]
        public GasPeak[] GasPeak {
            get {
                return this.gasPeakField;
            }
            set {
                this.gasPeakField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DxcStatistics {
        
        private DimensionlessMeasure averageField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Corrected drilling exponent calculated for the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Corrected drilling exponent calculated for the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log channel from which the drilling coefficient statistics were calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Log channel from which the drilling coefficient statistics were calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class EcdStatistics {
        
        private MassPerVolumeMeasure averageField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Average equivalent circulating density at TD through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average equivalent circulating density at TD through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log channel from which the equivalent circulating density at TD statistics were calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Log channel from which the equivalent circulating density at TD statistics were c" +
            "alculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudDensityStatistics {
        
        private MassPerVolumeMeasure averageField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Average mud density through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average mud density through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log channel from which the mud density statistics were calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Log channel from which the mud density statistics were calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RpmStatistics {
        
        private AngularVelocityMeasure averageField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Average bit turn rate through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average bit turn rate through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log channel from which the turn rate statistics were calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Log channel from which the turn rate statistics were calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ElectricCurrentMeasure {
        
        private ElectricCurrentUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ElectricCurrentUom")]
        public ElectricCurrentUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricCurrentUom {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        cA,
        
        /// <remarks/>
        dA,
        
        /// <remarks/>
        EA,
        
        /// <remarks/>
        fA,
        
        /// <remarks/>
        GA,
        
        /// <remarks/>
        kA,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        mA,
        
        /// <remarks/>
        nA,
        
        /// <remarks/>
        pA,
        
        /// <remarks/>
        TA,
        
        /// <remarks/>
        uA,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class TorqueCurrentStatistics {
        
        private ElectricCurrentMeasure averageField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Average electric current through the interval</summary>
        [System.ComponentModel.DescriptionAttribute("Average electric current through the interval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="ElectricCurrentMeasure")]
        public ElectricCurrentMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log channel from which the electric current statistics were calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Log channel from which the electric current statistics were calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class TorqueStatistics {
        
        private MomentOfForceMeasure averageField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Average torque through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average torque through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log channel from which the torque statistics were calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Log channel from which the torque statistics were calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MomentOfForceMeasure {
        
        private MomentOfForceUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MomentOfForceUom")]
        public MomentOfForceUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentOfForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 lbf.ft")]
        Item1000lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daN.m")]
        daNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dN.m")]
        dNm,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m")]
        kgfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2/s2")]
        lbmft2s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.ft")]
        pdlft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft")]
        tonfUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi")]
        tonfUSmi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class WobStatistics {
        
        private ForceMeasure averageField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Average weight on bit through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average weight on bit through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="ForceMeasure")]
        public ForceMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log channel from which the WOB statistics were calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Log channel from which the WOB statistics were calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ForceMeasure {
        
        private ForceUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ForceUom")]
        public ForceUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 kN")]
        Item10kN,
        
        /// <remarks/>
        cN,
        
        /// <remarks/>
        daN,
        
        /// <remarks/>
        dN,
        
        /// <remarks/>
        dyne,
        
        /// <remarks/>
        EN,
        
        /// <remarks/>
        fN,
        
        /// <remarks/>
        gf,
        
        /// <remarks/>
        GN,
        
        /// <remarks/>
        hN,
        
        /// <remarks/>
        kdyne,
        
        /// <remarks/>
        kgf,
        
        /// <remarks/>
        klbf,
        
        /// <remarks/>
        kN,
        
        /// <remarks/>
        lbf,
        
        /// <remarks/>
        Mgf,
        
        /// <remarks/>
        mN,
        
        /// <remarks/>
        MN,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        nN,
        
        /// <remarks/>
        ozf,
        
        /// <remarks/>
        pdl,
        
        /// <remarks/>
        pN,
        
        /// <remarks/>
        TN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]")]
        tonfUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]")]
        tonfUS,
        
        /// <remarks/>
        uN,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RopStatistics {
        
        private LengthPerTimeMeasure averageField;
        
        private LengthPerTimeMeasure minimumField;
        
        private LengthPerTimeMeasure maximumField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Average rate of penetration through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average rate of penetration through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Average", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure Average {
            get {
                return this.averageField;
            }
            set {
                this.averageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum rate of penetration through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum rate of penetration through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Minimum", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure Minimum {
            get {
                return this.minimumField;
            }
            set {
                this.minimumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum rate of penetration through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum rate of penetration through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Maximum", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure Maximum {
            get {
                return this.maximumField;
            }
            set {
                this.maximumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log channel from which the ROP statistics were calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Log channel from which the ROP statistics were calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthPerTimeMeasure {
        
        private LengthPerTimeUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthPerTimeUom")]
        public LengthPerTimeUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/h")]
        Item1000fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/s")]
        Item1000fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/a")]
        cma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s")]
        cms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm/s")]
        dms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/d")]
        ftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/h")]
        fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/min")]
        ftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ms")]
        ftms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s")]
        fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/us")]
        ftus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/a")]
        ina,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/min")]
        inmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s")]
        ins,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/h")]
        kmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/s")]
        kms,
        
        /// <remarks/>
        knot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/d")]
        md,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/h")]
        mh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/min")]
        mmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/ms")]
        mms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s")]
        ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/h")]
        mih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mil/a")]
        mila,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/a")]
        mma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/s")]
        mms1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nm/s")]
        nms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um/s")]
        ums,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillingParameters {
        
        private RopStatistics ropField;
        
        private WobStatistics averageWeightOnBitField;
        
        private TorqueStatistics averageTorqueField;
        
        private TorqueCurrentStatistics averageTorqueCurrentField;
        
        private RpmStatistics averageTurnRateField;
        
        private MudDensityStatistics averageMudDensityField;
        
        private EcdStatistics averageEcdAtTdField;
        
        private DxcStatistics averageDrillingCoefficientField;
        
        /// <remarks/>
        /// <summary>Rate of penetration through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Rate of penetration through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rop", DataType="RopStatistics")]
        public RopStatistics Rop {
            get {
                return this.ropField;
            }
            set {
                this.ropField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Surface weight on bit: average through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Surface weight on bit: average through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageWeightOnBit", DataType="WobStatistics")]
        public WobStatistics AverageWeightOnBit {
            get {
                return this.averageWeightOnBitField;
            }
            set {
                this.averageWeightOnBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average torque through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average torque through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageTorque", DataType="TorqueStatistics")]
        public TorqueStatistics AverageTorque {
            get {
                return this.averageTorqueField;
            }
            set {
                this.averageTorqueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average torque current through the interval. This is the raw measurement from which the average torque can be calculated.</summary>
        [System.ComponentModel.DescriptionAttribute("Average torque current through the interval. This is the raw measurement from whi" +
            "ch the average torque can be calculated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageTorqueCurrent", DataType="TorqueCurrentStatistics")]
        public TorqueCurrentStatistics AverageTorqueCurrent {
            get {
                return this.averageTorqueCurrentField;
            }
            set {
                this.averageTorqueCurrentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average turn rate through the interval (commonly in rpm).</summary>
        [System.ComponentModel.DescriptionAttribute("Average turn rate through the interval (commonly in rpm).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageTurnRate", DataType="RpmStatistics")]
        public RpmStatistics AverageTurnRate {
            get {
                return this.averageTurnRateField;
            }
            set {
                this.averageTurnRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average mud density through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average mud density through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageMudDensity", DataType="MudDensityStatistics")]
        public MudDensityStatistics AverageMudDensity {
            get {
                return this.averageMudDensityField;
            }
            set {
                this.averageMudDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average effective circulating density at TD through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average effective circulating density at TD through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageEcdAtTd", DataType="EcdStatistics")]
        public EcdStatistics AverageEcdAtTd {
            get {
                return this.averageEcdAtTdField;
            }
            set {
                this.averageEcdAtTdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average drilling exponent through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average drilling exponent through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageDrillingCoefficient", DataType="DxcStatistics")]
        public DxcStatistics AverageDrillingCoefficient {
            get {
                return this.averageDrillingCoefficientField;
            }
            set {
                this.averageDrillingCoefficientField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Chromatograph {
        
        private MdInterval chromatographMdIntervalField;
        
        private Energistics.DataAccess.Timestamp dateTimeGasSampleProcessedField;
        
        private string chromatographTypeField;
        
        private TimeMeasure eTimChromCycleField;
        
        private Energistics.DataAccess.Timestamp chromReportTimeField;
        
        private MassPerVolumeMeasure mudWeightInField;
        
        private MassPerVolumeMeasure mudWeightOutField;
        
        private VolumePerVolumeMeasure methAvField;
        
        private VolumePerVolumeMeasure methMnField;
        
        private VolumePerVolumeMeasure methMxField;
        
        private VolumePerVolumeMeasure ethAvField;
        
        private VolumePerVolumeMeasure ethMnField;
        
        private VolumePerVolumeMeasure ethMxField;
        
        private VolumePerVolumeMeasure propAvField;
        
        private VolumePerVolumeMeasure propMnField;
        
        private VolumePerVolumeMeasure propMxField;
        
        private VolumePerVolumeMeasure ibutAvField;
        
        private VolumePerVolumeMeasure ibutMnField;
        
        private VolumePerVolumeMeasure ibutMxField;
        
        private VolumePerVolumeMeasure nbutAvField;
        
        private VolumePerVolumeMeasure nbutMnField;
        
        private VolumePerVolumeMeasure nbutMxField;
        
        private VolumePerVolumeMeasure ipentAvField;
        
        private VolumePerVolumeMeasure ipentMnField;
        
        private VolumePerVolumeMeasure ipentMxField;
        
        private VolumePerVolumeMeasure npentAvField;
        
        private VolumePerVolumeMeasure npentMnField;
        
        private VolumePerVolumeMeasure npentMxField;
        
        private VolumePerVolumeMeasure epentAvField;
        
        private VolumePerVolumeMeasure epentMnField;
        
        private VolumePerVolumeMeasure epentMxField;
        
        private VolumePerVolumeMeasure ihexAvField;
        
        private VolumePerVolumeMeasure ihexMnField;
        
        private VolumePerVolumeMeasure ihexMxField;
        
        private VolumePerVolumeMeasure nhexAvField;
        
        private VolumePerVolumeMeasure nhexMnField;
        
        private VolumePerVolumeMeasure nhexMxField;
        
        private VolumePerVolumeMeasure co2AvField;
        
        private VolumePerVolumeMeasure co2MnField;
        
        private VolumePerVolumeMeasure co2MxField;
        
        private VolumePerVolumeMeasure h2sAvField;
        
        private VolumePerVolumeMeasure h2sMnField;
        
        private VolumePerVolumeMeasure h2sMxField;
        
        private VolumePerVolumeMeasure acetyleneField;
        
        private DataObjectReference channelField;
        
        /// <remarks/>
        /// <summary>Measured interval related to the chromatograph results.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured interval related to the chromatograph results.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChromatographMdInterval", DataType="MdInterval")]
        public MdInterval ChromatographMdInterval {
            get {
                return this.chromatographMdIntervalField;
            }
            set {
                this.chromatographMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time at which the gas sample was processed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time at which the gas sample was processed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateTimeGasSampleProcessed", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DateTimeGasSampleProcessed {
            get {
                return this.dateTimeGasSampleProcessedField;
            }
            set {
                this.dateTimeGasSampleProcessedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Chromatograph type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Chromatograph type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChromatographType", DataType="String64")]
        public string ChromatographType {
            get {
                return this.chromatographTypeField;
            }
            set {
                this.chromatographTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Chromatograph cycle time. Commonly in seconds.</summary>
        [System.ComponentModel.DescriptionAttribute("Chromatograph cycle time. Commonly in seconds.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimChromCycle", DataType="TimeMeasure")]
        public TimeMeasure ETimChromCycle {
            get {
                return this.eTimChromCycleField;
            }
            set {
                this.eTimChromCycleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Chromatograph integrator report time; format may be variable due to recording equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("Chromatograph integrator report time; format may be variable due to recording equ" +
            "ipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChromReportTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp ChromReportTime {
            get {
                return this.chromReportTimeField;
            }
            set {
                this.chromReportTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud density in (active pits).</summary>
        [System.ComponentModel.DescriptionAttribute("Mud density in (active pits).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudWeightIn", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure MudWeightIn {
            get {
                return this.mudWeightInField;
            }
            set {
                this.mudWeightInField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud density out (flowline).</summary>
        [System.ComponentModel.DescriptionAttribute("Mud density out (flowline).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudWeightOut", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure MudWeightOut {
            get {
                return this.mudWeightOutField;
            }
            set {
                this.mudWeightOutField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Methane (C1) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("Methane (C1) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MethAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure MethAv {
            get {
                return this.methAvField;
            }
            set {
                this.methAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Methane (C1) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("Methane (C1) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MethMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure MethMn {
            get {
                return this.methMnField;
            }
            set {
                this.methMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Methane (C1) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("Methane (C1) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MethMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure MethMx {
            get {
                return this.methMxField;
            }
            set {
                this.methMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ethane (C2) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("Ethane (C2) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EthAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure EthAv {
            get {
                return this.ethAvField;
            }
            set {
                this.ethAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ethane (C2) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("Ethane (C2) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EthMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure EthMn {
            get {
                return this.ethMnField;
            }
            set {
                this.ethMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ethane (C2) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("Ethane (C2) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EthMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure EthMx {
            get {
                return this.ethMxField;
            }
            set {
                this.ethMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Propane (C3) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("Propane (C3) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PropAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure PropAv {
            get {
                return this.propAvField;
            }
            set {
                this.propAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Propane (C3) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("Propane (C3) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PropMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure PropMn {
            get {
                return this.propMnField;
            }
            set {
                this.propMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Propane (C3) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("Propane (C3) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PropMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure PropMx {
            get {
                return this.propMxField;
            }
            set {
                this.propMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Butane (iC4) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Butane (iC4) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IbutAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IbutAv {
            get {
                return this.ibutAvField;
            }
            set {
                this.ibutAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Butane (iC4) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Butane (iC4) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IbutMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IbutMn {
            get {
                return this.ibutMnField;
            }
            set {
                this.ibutMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Butane (iC4) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Butane (iC4) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IbutMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IbutMx {
            get {
                return this.ibutMxField;
            }
            set {
                this.ibutMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Butane (nC4) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Butane (nC4) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NbutAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NbutAv {
            get {
                return this.nbutAvField;
            }
            set {
                this.nbutAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Butane (nC4) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Butane (nC4) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NbutMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NbutMn {
            get {
                return this.nbutMnField;
            }
            set {
                this.nbutMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Butane (nC4) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Butane (nC4) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NbutMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NbutMx {
            get {
                return this.nbutMxField;
            }
            set {
                this.nbutMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Pentane (iC5) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Pentane (iC5) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IpentAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IpentAv {
            get {
                return this.ipentAvField;
            }
            set {
                this.ipentAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Pentane (iC5) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Pentane (iC5) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IpentMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IpentMn {
            get {
                return this.ipentMnField;
            }
            set {
                this.ipentMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Pentane (iC5) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Pentane (iC5) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IpentMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IpentMx {
            get {
                return this.ipentMxField;
            }
            set {
                this.ipentMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Pentane (nC5) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Pentane (nC5) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NpentAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NpentAv {
            get {
                return this.npentAvField;
            }
            set {
                this.npentAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Pentane (nC5) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Pentane (nC5) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NpentMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NpentMn {
            get {
                return this.npentMnField;
            }
            set {
                this.npentMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Pentane (nC5) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Pentane (nC5) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NpentMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NpentMx {
            get {
                return this.npentMxField;
            }
            set {
                this.npentMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>neo-Pentane (eC5) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("neo-Pentane (eC5) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpentAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure EpentAv {
            get {
                return this.epentAvField;
            }
            set {
                this.epentAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>neo-Pentane (eC5) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("neo-Pentane (eC5) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpentMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure EpentMn {
            get {
                return this.epentMnField;
            }
            set {
                this.epentMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>neo-Pentane (eC5) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("neo-Pentane (eC5) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpentMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure EpentMx {
            get {
                return this.epentMxField;
            }
            set {
                this.epentMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Hexane (iC6) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Hexane (iC6) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IhexAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IhexAv {
            get {
                return this.ihexAvField;
            }
            set {
                this.ihexAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Hexane (iC6) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Hexane (iC6) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IhexMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IhexMn {
            get {
                return this.ihexMnField;
            }
            set {
                this.ihexMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>iso-Hexane (iC6) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("iso-Hexane (iC6) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IhexMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure IhexMx {
            get {
                return this.ihexMxField;
            }
            set {
                this.ihexMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Hexane (nC6) ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Hexane (nC6) ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NhexAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NhexAv {
            get {
                return this.nhexAvField;
            }
            set {
                this.nhexAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Hexane (nC6) ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Hexane (nC6) ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NhexMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NhexMn {
            get {
                return this.nhexMnField;
            }
            set {
                this.nhexMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>nor-Hexane (nC6) ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("nor-Hexane (nC6) ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NhexMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure NhexMx {
            get {
                return this.nhexMxField;
            }
            set {
                this.nhexMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Carbon Dioxide ppm (average).</summary>
        [System.ComponentModel.DescriptionAttribute("Carbon Dioxide ppm (average).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Co2Av", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Co2Av {
            get {
                return this.co2AvField;
            }
            set {
                this.co2AvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Carbon Dioxide ppm (minimum).</summary>
        [System.ComponentModel.DescriptionAttribute("Carbon Dioxide ppm (minimum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Co2Mn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Co2Mn {
            get {
                return this.co2MnField;
            }
            set {
                this.co2MnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Carbon Dioxide ppm (maximum).</summary>
        [System.ComponentModel.DescriptionAttribute("Carbon Dioxide ppm (maximum).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Co2Mx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Co2Mx {
            get {
                return this.co2MxField;
            }
            set {
                this.co2MxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hydrogen Sulfide (average) ppm.</summary>
        [System.ComponentModel.DescriptionAttribute("Hydrogen Sulfide (average) ppm.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("H2sAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure H2sAv {
            get {
                return this.h2sAvField;
            }
            set {
                this.h2sAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hydrogen Sulfide (minimum) ppm.</summary>
        [System.ComponentModel.DescriptionAttribute("Hydrogen Sulfide (minimum) ppm.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("H2sMn", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure H2sMn {
            get {
                return this.h2sMnField;
            }
            set {
                this.h2sMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hydrogen Sulfide (maximum) ppm.</summary>
        [System.ComponentModel.DescriptionAttribute("Hydrogen Sulfide (maximum) ppm.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("H2sMx", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure H2sMx {
            get {
                return this.h2sMxField;
            }
            set {
                this.h2sMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Acetylene.</summary>
        [System.ComponentModel.DescriptionAttribute("Acetylene.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Acetylene", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Acetylene {
            get {
                return this.acetyleneField;
            }
            set {
                this.acetyleneField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="DataObjectReference")]
        public DataObjectReference Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_MudLogReportInterval", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    public partial class MudlogReportInterval {
        
        private MdInterval mdIntervalField;
        
        private DataObjectReference cuttingsGeologyIntervalField;
        
        private DataObjectReference interpretedGeologyIntervalField;
        
        private DataObjectReference showEvaluationIntervalField;
        
        private Chromatograph chromatographField;
        
        private DrillingParameters[] drillingParametersField;
        
        private MudGas[] mudGasField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Measured depth interval.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Measured depth interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cuttings geology interval that is part of this mud log report.</summary>
        [System.ComponentModel.DescriptionAttribute("The cuttings geology interval that is part of this mud log report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CuttingsGeologyInterval", DataType="DataObjectReference")]
        public DataObjectReference CuttingsGeologyInterval {
            get {
                return this.cuttingsGeologyIntervalField;
            }
            set {
                this.cuttingsGeologyIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The interpreted geology interval that is part of this mud log report.</summary>
        [System.ComponentModel.DescriptionAttribute("The interpreted geology interval that is part of this mud log report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretedGeologyInterval", DataType="DataObjectReference")]
        public DataObjectReference InterpretedGeologyInterval {
            get {
                return this.interpretedGeologyIntervalField;
            }
            set {
                this.interpretedGeologyIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The show evaluation interval that is part of this mud log report.</summary>
        [System.ComponentModel.DescriptionAttribute("The show evaluation interval that is part of this mud log report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShowEvaluationInterval", DataType="DataObjectReference")]
        public DataObjectReference ShowEvaluationInterval {
            get {
                return this.showEvaluationIntervalField;
            }
            set {
                this.showEvaluationIntervalField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Chromatograph", DataType="Chromatograph")]
        public Chromatograph Chromatograph {
            get {
                return this.chromatographField;
            }
            set {
                this.chromatographField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DrillingParameters")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DrillingParameters", DataType="DrillingParameters")]
        public DrillingParameters[] DrillingParameters {
            get {
                return this.drillingParametersField;
            }
            set {
                this.drillingParametersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MudGas")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudGas", DataType="MudGas")]
        public MudGas[] MudGas {
            get {
                return this.mudGasField;
            }
            set {
                this.mudGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of MudLogReportInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of MudLogReportInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CuttingsIntervalShow {
        
        private Citation citationField;
        
        private ShowRating showRatingField;
        
        private bool showRatingFieldSpecified;
        
        private string stainColorField;
        
        private string stainDistrField;
        
        private AreaPerAreaMeasure stainPcField;
        
        private ShowSpeed cutSpeedField;
        
        private bool cutSpeedFieldSpecified;
        
        private string cutColorField;
        
        private string cutStrengthField;
        
        private ShowLevel cutFormField;
        
        private bool cutFormFieldSpecified;
        
        private string cutLevelField;
        
        private ShowLevel cutFlorFormField;
        
        private bool cutFlorFormFieldSpecified;
        
        private string cutFlorColorField;
        
        private string cutFlorStrengthField;
        
        private ShowSpeed cutFlorSpeedField;
        
        private bool cutFlorSpeedFieldSpecified;
        
        private ShowFluorescence cutFlorLevelField;
        
        private bool cutFlorLevelFieldSpecified;
        
        private string natFlorColorField;
        
        private AreaPerAreaMeasure natFlorPcField;
        
        private ShowFluorescence natFlorLevelField;
        
        private bool natFlorLevelFieldSpecified;
        
        private string natFlorDescField;
        
        private string residueColorField;
        
        private string impregnatedLithoField;
        
        private string odorField;
        
        private string cuttingFluidField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the CuttingsIntervalShow.</summary>
        [System.ComponentModel.DescriptionAttribute("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of t" +
            "he CuttingsIntervalShow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Citation", DataType="Citation")]
        public Citation Citation {
            get {
                return this.citationField;
            }
            set {
                this.citationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Show Rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Show Rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShowRating", DataType="ShowRating")]
        public ShowRating ShowRating {
            get {
                return this.showRatingField;
            }
            set {
                this.showRatingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowRatingSpecified {
            get {
                return this.showRatingFieldSpecified;
            }
            set {
                this.showRatingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Visible stain color.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Visible stain color.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StainColor", DataType="String64")]
        public string StainColor {
            get {
                return this.stainColorField;
            }
            set {
                this.stainColorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Visible stain distribution.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Visible stain distribution.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StainDistr", DataType="String64")]
        public string StainDistr {
            get {
                return this.stainDistrField;
            }
            set {
                this.stainDistrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Visible stain (commonly in percent).</summary>
        [System.ComponentModel.DescriptionAttribute("Visible stain (commonly in percent).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StainPc", DataType="AreaPerAreaMeasure")]
        public AreaPerAreaMeasure StainPc {
            get {
                return this.stainPcField;
            }
            set {
                this.stainPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut speed.</summary>
        [System.ComponentModel.DescriptionAttribute("Cut speed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutSpeed", DataType="ShowSpeed")]
        public ShowSpeed CutSpeed {
            get {
                return this.cutSpeedField;
            }
            set {
                this.cutSpeedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CutSpeedSpecified {
            get {
                return this.cutSpeedFieldSpecified;
            }
            set {
                this.cutSpeedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut color.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cut color.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutColor", DataType="String64")]
        public string CutColor {
            get {
                return this.cutColorField;
            }
            set {
                this.cutColorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut strength.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cut strength.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutStrength", DataType="String64")]
        public string CutStrength {
            get {
                return this.cutStrengthField;
            }
            set {
                this.cutStrengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut formulation.</summary>
        [System.ComponentModel.DescriptionAttribute("Cut formulation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutForm", DataType="ShowLevel")]
        public ShowLevel CutForm {
            get {
                return this.cutFormField;
            }
            set {
                this.cutFormField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CutFormSpecified {
            get {
                return this.cutFormFieldSpecified;
            }
            set {
                this.cutFormFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut level (faint, bright, etc.).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cut level (faint, bright, etc.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutLevel", DataType="String64")]
        public string CutLevel {
            get {
                return this.cutLevelField;
            }
            set {
                this.cutLevelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut fluorescence form.</summary>
        [System.ComponentModel.DescriptionAttribute("Cut fluorescence form.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutFlorForm", DataType="ShowLevel")]
        public ShowLevel CutFlorForm {
            get {
                return this.cutFlorFormField;
            }
            set {
                this.cutFlorFormField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CutFlorFormSpecified {
            get {
                return this.cutFlorFormFieldSpecified;
            }
            set {
                this.cutFlorFormFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut fluorescence color.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cut fluorescence color.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutFlorColor", DataType="String64")]
        public string CutFlorColor {
            get {
                return this.cutFlorColorField;
            }
            set {
                this.cutFlorColorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut fluorescence strength.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cut fluorescence strength.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutFlorStrength", DataType="String64")]
        public string CutFlorStrength {
            get {
                return this.cutFlorStrengthField;
            }
            set {
                this.cutFlorStrengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut fluorescence speed.</summary>
        [System.ComponentModel.DescriptionAttribute("Cut fluorescence speed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutFlorSpeed", DataType="ShowSpeed")]
        public ShowSpeed CutFlorSpeed {
            get {
                return this.cutFlorSpeedField;
            }
            set {
                this.cutFlorSpeedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CutFlorSpeedSpecified {
            get {
                return this.cutFlorSpeedFieldSpecified;
            }
            set {
                this.cutFlorSpeedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cut fluorescence level.</summary>
        [System.ComponentModel.DescriptionAttribute("Cut fluorescence level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutFlorLevel", DataType="ShowFluorescence")]
        public ShowFluorescence CutFlorLevel {
            get {
                return this.cutFlorLevelField;
            }
            set {
                this.cutFlorLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CutFlorLevelSpecified {
            get {
                return this.cutFlorLevelFieldSpecified;
            }
            set {
                this.cutFlorLevelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Natural fluorescence color.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Natural fluorescence color.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NatFlorColor", DataType="String64")]
        public string NatFlorColor {
            get {
                return this.natFlorColorField;
            }
            set {
                this.natFlorColorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Natural fluorescence (commonly in percent).</summary>
        [System.ComponentModel.DescriptionAttribute("Natural fluorescence (commonly in percent).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NatFlorPc", DataType="AreaPerAreaMeasure")]
        public AreaPerAreaMeasure NatFlorPc {
            get {
                return this.natFlorPcField;
            }
            set {
                this.natFlorPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Natural fluorescence level.</summary>
        [System.ComponentModel.DescriptionAttribute("Natural fluorescence level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NatFlorLevel", DataType="ShowFluorescence")]
        public ShowFluorescence NatFlorLevel {
            get {
                return this.natFlorLevelField;
            }
            set {
                this.natFlorLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NatFlorLevelSpecified {
            get {
                return this.natFlorLevelFieldSpecified;
            }
            set {
                this.natFlorLevelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Natural fluorescence description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Natural fluorescence description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NatFlorDesc", DataType="String64")]
        public string NatFlorDesc {
            get {
                return this.natFlorDescField;
            }
            set {
                this.natFlorDescField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Residue color.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Residue color.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ResidueColor", DataType="String64")]
        public string ResidueColor {
            get {
                return this.residueColorField;
            }
            set {
                this.residueColorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Impregnated lithology.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Impregnated lithology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ImpregnatedLitho", DataType="String64")]
        public string ImpregnatedLitho {
            get {
                return this.impregnatedLithoField;
            }
            set {
                this.impregnatedLithoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of any hydrocarbon type odors smelled.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of any hydrocarbon type odors smelled.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Odor", DataType="String64")]
        public string Odor {
            get {
                return this.odorField;
            }
            set {
                this.odorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the cutting solvent used to treat the cuttings.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the cutting solvent used to treat the cuttings.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CuttingFluid", DataType="String64")]
        public string CuttingFluid {
            get {
                return this.cuttingFluidField;
            }
            set {
                this.cuttingFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of CuttingsIntervalShow.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of CuttingsIntervalShow.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ShowRating {
        
        /// <remarks/>
        none,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("very poor")]
        verypoor,
        
        /// <remarks/>
        poor,
        
        /// <remarks/>
        fair,
        
        /// <remarks/>
        good,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("very good")]
        verygood,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AreaPerAreaMeasure {
        
        private AreaPerAreaUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AreaPerAreaUom")]
        public AreaPerAreaUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[area]")]
        area,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/ft2")]
        in2ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/in2")]
        in2in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m2")]
        m2m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/mm2")]
        mm2mm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ShowSpeed {
        
        /// <remarks/>
        slow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moderately fast")]
        moderatelyfast,
        
        /// <remarks/>
        fast,
        
        /// <remarks/>
        instantaneous,
        
        /// <remarks/>
        none,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ShowLevel {
        
        /// <remarks/>
        blooming,
        
        /// <remarks/>
        streaming,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ShowFluorescence {
        
        /// <remarks/>
        faint,
        
        /// <remarks/>
        bright,
        
        /// <remarks/>
        none,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CuttingsIntervalLithology {
        
        private Energistics.DataAccess.ExtensibleEnum<LithologyKind> kindField;
        
        private VolumePerVolumeMeasure lithPcField;
        
        private Citation citationField;
        
        private string codeLithField;
        
        private string colorField;
        
        private string textureField;
        
        private string hardnessField;
        
        private string compactionField;
        
        private string sizeGrainField;
        
        private string roundnessField;
        
        private string sphericityField;
        
        private string sortingField;
        
        private MatrixCementKind matrixCementField;
        
        private bool matrixCementFieldSpecified;
        
        private string porosityVisibleField;
        
        private string porosityFabricField;
        
        private string permeabilityField;
        
        private CuttingsIntervalShow[] showsField;
        
        private LithologyQualifier[] qualifierField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The geological name for the type of lithology from the enum table listing a subset of the OneGeology/CGI defined formation types.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The geological name for the type of lithology from the enum table listing a subse" +
            "t of the OneGeology/CGI defined formation types.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="LithologyKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<LithologyKind> Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Lithology percent. Represents the portion of the sampled interval this lithology type relates to. The total of the lithologies within an interval should add up to 100 percent. If LithologySource in geology is:  - "interpreted" only 100% is allowed. - "core" or "cuttings" then recommended usage is that the creating application uses blocks of 10%. i.e. 10, 20, 30, 40, 50, 60, 70, 80, 90, 100.  Ideally the input application should enforce a total of 100% for each defined depth interval. If the total for a depth interval does not add up to 100%, then use the "undifferentiated" code to fill out to 100%.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Lithology percent. Represents the portion of the sampled interval this lithology type relates to. The total of the lithologies within an interval should add up to 100 percent. If LithologySource in geology is:  - ""interpreted"" only 100% is allowed. - ""core"" or ""cuttings"" then recommended usage is that the creating application uses blocks of 10%. i.e. 10, 20, 30, 40, 50, 60, 70, 80, 90, 100.  Ideally the input application should enforce a total of 100% for each defined depth interval. If the total for a depth interval does not add up to 100%, then use the ""undifferentiated"" code to fill out to 100%.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure LithPc {
            get {
                return this.lithPcField;
            }
            set {
                this.lithPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the CuttingsIntervalLithology.</summary>
        [System.ComponentModel.DescriptionAttribute("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of t" +
            "he CuttingsIntervalLithology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Citation", DataType="Citation")]
        public Citation Citation {
            get {
                return this.citationField;
            }
            set {
                this.citationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An optional custom lithology encoding scheme. If used, it is recommended that the scheme follows the NPD required usage. With the numeric values noted in the enum tables, which was the original intent for this item. The NPD Coding System assigns a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by lithology = (main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: (33 * 10) + 1 + (21 / 100) gives a numeric code of 331.21. However, the NPD is also working through Energistics/Caesar to potentially change this usage.) This scheme should not be used for mnemonics, because those vary by operator, and if an abbreviation is required, a local look-up table should be used by the rendering client, based on Lithology Type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"An optional custom lithology encoding scheme. If used, it is recommended that the scheme follows the NPD required usage. With the numeric values noted in the enum tables, which was the original intent for this item. The NPD Coding System assigns a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by lithology = (main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: (33 * 10) + 1 + (21 / 100) gives a numeric code of 331.21. However, the NPD is also working through Energistics/Caesar to potentially change this usage.) This scheme should not be used for mnemonics, because those vary by operator, and if an abbreviation is required, a local look-up table should be used by the rendering client, based on Lithology Type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CodeLith", DataType="String64")]
        public string CodeLith {
            get {
                return this.codeLithField;
            }
            set {
                this.codeLithField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 colors with the addition of: frosted. e.g., black, blue, brown, buff, green, grey, olive, orange, pink, purple, red, translucent, frosted, white, yellow; modified by: dark, light, moderate, medium, mottled, variegated, slight, weak, strong, and vivid.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 colors with the addition of: frosted. e.g., black, blue, brown, buff, green, grey, olive, orange, pink, purple, red, translucent, frosted, white, yellow; modified by: dark, light, moderate, medium, mottled, variegated, slight, weak, strong, and vivid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Color", DataType="String64")]
        public string Color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6: crystalline, (often "feather-edge" appearance on breaking), friable, dull, earthy, chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular, sucrosic, (often exhibits capillary imbibition). Examples: compact interlocking, particulate, (Gradational textures are quite common.) chalky matrix with sucrosic patches, (Composite textures also occur).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6: crystalline, (often ""feather-edge"" appearance on breaking), friable, dull, earthy, chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular, sucrosic, (often exhibits capillary imbibition). Examples: compact interlocking, particulate, (Gradational textures are quite common.) chalky matrix with sucrosic patches, (Composite textures also occur).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Texture", DataType="String64")]
        public string Texture {
            get {
                return this.textureField;
            }
            set {
                this.textureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Mineral hardness. Typically, this element is rarely used because mineral hardness is not typically recorded. What typically is recorded is compaction. However, this element is retained for use defined as per Mohs scale of mineral hardness.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Mineral hardness. Typically, this element is rarely used because mineral hardness is not typically recorded. What typically is recorded is compaction. However, this element is retained for use defined as per Mohs scale of mineral hardness.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Hardness", DataType="String64")]
        public string Hardness {
            get {
                return this.hardnessField;
            }
            set {
                this.hardnessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5, which includes: not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5, which" +
            " includes: not compacted, slightly compacted, compacted, strongly compacted, fri" +
            "able, indurated, hard.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Compaction", DataType="String64")]
        public string Compaction {
            get {
                return this.compactionField;
            }
            set {
                this.compactionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1.(Wentworth) modified to remove the ambiguous term pelite.  Size ranges in millimeter (or micrometer) and inches. LT 256 mm        LT 10.1 in         "boulder" 64-256 mm        2.5–10.1 in        "cobble"; 32–64 mm        1.26–2.5 in       "very coarse gravel" 16–32 mm        0.63–1.26 in        "coarse gravel" 8–16 mm            0.31–0.63 in        "medium gravel" 4–8 mm            0.157–0.31 in        "fine gravel" 2–4 mm            0.079–0.157 in     "very fine gravel" 1–2 mm           0.039–0.079 in    "very coarse sand" 0.5–1 mm        0.020–0.039 in        "coarse sand" 0.25–0.5 mm        0.010–0.020 in     "medium sand" 125–250 um        0.0049–0.010 in        "fine sand" 62.5–125 um      .0025–0.0049 in   "very fine sand" 3.90625–62.5 um        0.00015–0.0025 in    "silt" LT 3.90625 um        LT 0.00015 in        "clay" LT 1 um            LT 0.000039 in        "colloid"</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1.(Wentworth) modified to remove the ambiguous term pelite.  Size ranges in millimeter (or micrometer) and inches. LT 256 mm        LT 10.1 in         ""boulder"" 64-256 mm        2.5–10.1 in        ""cobble""; 32–64 mm        1.26–2.5 in       ""very coarse gravel"" 16–32 mm        0.63–1.26 in        ""coarse gravel"" 8–16 mm            0.31–0.63 in        ""medium gravel"" 4–8 mm            0.157–0.31 in        ""fine gravel"" 2–4 mm            0.079–0.157 in     ""very fine gravel"" 1–2 mm           0.039–0.079 in    ""very coarse sand"" 0.5–1 mm        0.020–0.039 in        ""coarse sand"" 0.25–0.5 mm        0.010–0.020 in     ""medium sand"" 125–250 um        0.0049–0.010 in        ""fine sand"" 62.5–125 um      .0025–0.0049 in   ""very fine sand"" 3.90625–62.5 um        0.00015–0.0025 in    ""silt"" LT 3.90625 um        LT 0.00015 in        ""clay"" LT 1 um            LT 0.000039 in        ""colloid""")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeGrain", DataType="String64")]
        public string SizeGrain {
            get {
                return this.sizeGrainField;
            }
            set {
                this.sizeGrainField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3. Roundness refers to modal size class: very angular, angular, subangular, subrounded, rounded, well rounded.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3." +
            " Roundness refers to modal size class: very angular, angular, subangular, subrou" +
            "nded, rounded, well rounded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Roundness", DataType="String64")]
        public string Roundness {
            get {
                return this.roundnessField;
            }
            set {
                this.roundnessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity: very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size" +
            " class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity: very el" +
            "ongated, elongated, slightly elongated, slightly spherical, spherical, very sphe" +
            "rical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sphericity", DataType="String64")]
        public string Sphericity {
            get {
                return this.sphericityField;
            }
            set {
                this.sphericityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology sorting description from Shell 4.3.1.2 Sorting: very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology sorting description from Shell 4.3.1.2 Sorting: very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sorting", DataType="String64")]
        public string Sorting {
            get {
                return this.sortingField;
            }
            set {
                this.sortingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. e.g., "calcite" (Common) "dolomite", "ankerite" (e.g., North Sea HPHT reservoirs such as Elgin and Franklin have almost pure ankerite cementation) "siderite" (Sherwood sandstones, southern UK typical Siderite cements), "quartz" (grain-to-grain contact cementation or secondary quartz deposition), "kaolinite", "illite" (e.g., Village Fields North Sea), "smectite","chlorite" (Teg, Algeria.).</summary>
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. e.g., ""calcite"" (Common) ""dolomite"", ""ankerite"" (e.g., North Sea HPHT reservoirs such as Elgin and Franklin have almost pure ankerite cementation) ""siderite"" (Sherwood sandstones, southern UK typical Siderite cements), ""quartz"" (grain-to-grain contact cementation or secondary quartz deposition), ""kaolinite"", ""illite"" (e.g., Village Fields North Sea), ""smectite"",""chlorite"" (Teg, Algeria.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MatrixCement", DataType="MatrixCementKind")]
        public MatrixCementKind MatrixCement {
            get {
                return this.matrixCementField;
            }
            set {
                this.matrixCementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MatrixCementSpecified {
            get {
                return this.matrixCementFieldSpecified;
            }
            set {
                this.matrixCementFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates. The theoretical maximum porosity for a clastic rock is about 26%, which is normally much reduced by other factors. When estimating porosities use: more than 15% "good"; 10 to 15% "fair"; 5 to 10% "poor"; less than 5% "trace"; 0 "none".</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates. The theoretical maximum porosity for a clastic rock is about 26%, which is normally much reduced by other factors. When estimating porosities use: more than 15% ""good""; 10 to 15% ""fair""; 5 to 10% ""poor""; less than 5% ""trace""; 0 ""none"".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PorosityVisible", DataType="String64")]
        public string PorosityVisible {
            get {
                return this.porosityVisibleField;
            }
            set {
                this.porosityVisibleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2: intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2: intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PorosityFabric", DataType="String64")]
        public string PorosityFabric {
            get {
                return this.porosityFabricField;
            }
            set {
                this.porosityFabricField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In the future, these values would benefit from quantification, e.g., tight, slightly, fairly, highly.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2" +
            ".5. In the future, these values would benefit from quantification, e.g., tight, " +
            "slightly, fairly, highly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Permeability", DataType="String64")]
        public string Permeability {
            get {
                return this.permeabilityField;
            }
            set {
                this.permeabilityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Shows")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Shows", DataType="CuttingsIntervalShow")]
        public CuttingsIntervalShow[] Shows {
            get {
                return this.showsField;
            }
            set {
                this.showsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Qualifier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Qualifier", DataType="LithologyQualifier")]
        public LithologyQualifier[] Qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of CuttingsIntervalLithology.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of CuttingsIntervalLithology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class LithologyQualifier {
        
        private Energistics.DataAccess.ExtensibleEnum<LithologyQualifierKind> kindField;
        
        private MdInterval mdIntervalField;
        
        private VolumePerVolumeMeasure abundanceField;
        
        private string descriptionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The type of qualifier.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of qualifier.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="LithologyQualifierKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<LithologyQualifierKind> Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth interval represented by the qualifier. This must be within the range of the parent geologic interval. If MdInterval is not given then the qualifier is deemed to exist over the entire depth range of the parent geologyInterval.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth interval represented by the qualifier. This must be within the" +
            " range of the parent geologic interval. If MdInterval is not given then the qual" +
            "ifier is deemed to exist over the entire depth range of the parent geologyInterv" +
            "al.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative abundance of the qualifier estimated based on a "visual area" by inspecting the cuttings spread out on the shaker table before washing, or in the sample tray after washing. This represents the upper bound of the observed range, and is in the following increments at the upper bound: 1 = less than or equal to 1% 2 = greater than 1% and less than 2% 5 = greater than or equal to 2% and less than 5% and then in 5% increments, 10 (=5-10%), 15 (=10-15%) up to 100 (=95-100%). The end user can then elect to either display the %, or map them to an operator-specific term or coding, e.g., 1 less than or equal to 1% = rare trace, or occasional, or very sparse, etc., depending on the end users' terminology. i.e. 1 less then or equal to 1%=Rare Trace, or occasional, or very sparse etc., depending on the the end users' terminology.)</summary>
        [System.ComponentModel.DescriptionAttribute(@"The relative abundance of the qualifier estimated based on a ""visual area"" by inspecting the cuttings spread out on the shaker table before washing, or in the sample tray after washing. This represents the upper bound of the observed range, and is in the following increments at the upper bound: 1 = less than or equal to 1% 2 = greater than 1% and less than 2% 5 = greater than or equal to 2% and less than 5% and then in 5% increments, 10 (=5-10%), 15 (=10-15%) up to 100 (=95-100%). The end user can then elect to either display the %, or map them to an operator-specific term or coding, e.g., 1 less than or equal to 1% = rare trace, or occasional, or very sparse, etc., depending on the end users' terminology. i.e. 1 less then or equal to 1%=Rare Trace, or occasional, or very sparse etc., depending on the the end users' terminology.)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Abundance", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Abundance {
            get {
                return this.abundanceField;
            }
            set {
                this.abundanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the qualifier.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the qualifier.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of LithologyQualifier</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of LithologyQualifier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IlluminanceMeasure {
        
        private IlluminanceUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="IlluminanceUom")]
        public IlluminanceUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum IlluminanceUom {
        
        /// <remarks/>
        footcandle,
        
        /// <remarks/>
        klx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/m2")]
        lmm2,
        
        /// <remarks/>
        lx,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class InterpretedIntervalLithology {
        
        private Energistics.DataAccess.ExtensibleEnum<LithologyKind> kindField;
        
        private Citation citationField;
        
        private string codeLithField;
        
        private string colorField;
        
        private string textureField;
        
        private string hardnessField;
        
        private string compactionField;
        
        private string sizeGrainField;
        
        private string roundnessField;
        
        private string sortingField;
        
        private string sphericityField;
        
        private MatrixCementKind matrixCementField;
        
        private bool matrixCementFieldSpecified;
        
        private string porosityVisibleField;
        
        private string porosityFabricField;
        
        private string permeabilityField;
        
        private LithologyQualifier[] qualifierField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The geological name for the type of lithology from the enum table listing a  subset of the OneGeology / CGI defined formation types.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The geological name for the type of lithology from the enum table listing a  subs" +
            "et of the OneGeology / CGI defined formation types.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="LithologyKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<LithologyKind> Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the InterpretedIntervalLithology</summary>
        [System.ComponentModel.DescriptionAttribute("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of t" +
            "he InterpretedIntervalLithology")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Citation", DataType="Citation")]
        public Citation Citation {
            get {
                return this.citationField;
            }
            set {
                this.citationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An optional custom lithology encoding scheme. If used, it is recommended that the scheme follows the NPD required usage. With the numeric values noted in the enum tables, which was the original intent for this item. The NPD Coding System assigns a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by lithology = (main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: (33 * 10) + 1 + (21 / 100) gives a numeric code of 331.21. However, the NPD is also working through Energistics/Caesar to potentially change this usage.) This scheme should not be used for mnemonics, because those vary by operator, and if an abbreviation is required, a local look-up table should be used by the rendering client, based on Lithology Type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"An optional custom lithology encoding scheme. If used, it is recommended that the scheme follows the NPD required usage. With the numeric values noted in the enum tables, which was the original intent for this item. The NPD Coding System assigns a digital code to the main lithologies as per the Norwegian Blue Book data standards. The code was then derived by lithology = (main lithology * 10) + cement + (modifier / 100). Example: Calcite cemented silty micaceous sandstone: (33 * 10) + 1 + (21 / 100) gives a numeric code of 331.21. However, the NPD is also working through Energistics/Caesar to potentially change this usage.) This scheme should not be used for mnemonics, because those vary by operator, and if an abbreviation is required, a local look-up table should be used by the rendering client, based on Lithology Type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CodeLith", DataType="String64")]
        public string CodeLith {
            get {
                return this.codeLithField;
            }
            set {
                this.codeLithField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 Colors with the addition of: frosted. e.g., black, blue, brown, buff, green, grey, olive, orange, pink, purple, red, translucent, frosted, white, yellow; modified by: dark, light, moderate, medium, mottled, variegated, slight, weak, strong, and vivid.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology color description, from Shell 1995 4.3.3.1 and 4.3.3.2 Colors with the addition of: frosted. e.g., black, blue, brown, buff, green, grey, olive, orange, pink, purple, red, translucent, frosted, white, yellow; modified by: dark, light, moderate, medium, mottled, variegated, slight, weak, strong, and vivid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Color", DataType="String64")]
        public string Color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6: crystalline, (often "feather-edge" appearance on breaking), friable, dull, earthy, chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular, sucrosic, (often exhibits capillary imbibition). Examples: compact interlocking, particulate, (Gradational textures are quite common.) chalky matrix with sucrosic patches, (Composite textures also occur).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology matrix texture description from Shell 1995 4.3.2.6: crystalline, (often ""feather-edge"" appearance on breaking), friable, dull, earthy, chalky, (particle size less than 20m; often exhibits capillary imbibition) visibly particulate, granular, sucrosic, (often exhibits capillary imbibition). Examples: compact interlocking, particulate, (Gradational textures are quite common.) chalky matrix with sucrosic patches, (Composite textures also occur).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Texture", DataType="String64")]
        public string Texture {
            get {
                return this.textureField;
            }
            set {
                this.textureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Mineral hardness. Typically, this element is rarely used because mineral hardness is not typically recorded. What typically is recorded is compaction. However, this element is retained for use defined as per Mohs scale of mineral hardness.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Mineral hardness. Typically, this element is rarely used because mineral hardness is not typically recorded. What typically is recorded is compaction. However, this element is retained for use defined as per Mohs scale of mineral hardness.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Hardness", DataType="String64")]
        public string Hardness {
            get {
                return this.hardnessField;
            }
            set {
                this.hardnessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5, which includes: not compacted, slightly compacted, compacted, strongly compacted, friable, indurated, hard.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology compaction from Shell 1995 4.3.1.5, which" +
            " includes: not compacted, slightly compacted, compacted, strongly compacted, fri" +
            "able, indurated, hard.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Compaction", DataType="String64")]
        public string Compaction {
            get {
                return this.compactionField;
            }
            set {
                this.compactionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1. (Wentworth) modified to remove the ambiguous term pelite.  Size ranges in millimeter (or micrometer) and inches. LT 256 mm        LT 10.1 in         "boulder" 64-256 mm        2.5–10.1 in        "cobble"; 32–64 mm        1.26–2.5 in       "very coarse gravel" 16–32 mm        0.63–1.26 in        "coarse gravel" 8–16 mm            0.31–0.63 in        "medium gravel" 4–8 mm            0.157–0.31 in        "fine gravel" 2–4 mm            0.079–0.157 in     "very fine gravel" 1–2 mm           0.039–0.079 in    "very coarse sand" 0.5–1 mm        0.020–0.039 in        "coarse sand" 0.25–0.5 mm        0.010–0.020 in     "medium sand" 125–250 um        0.0049–0.010 in        "fine sand" 62.5–125 um      .0025–0.0049 in   "very fine sand" 3.90625–62.5 um        0.00015–0.0025 in    "silt" LT 3.90625 um        LT 0.00015 in        "clay" LT 1 um            LT 0.000039 in        "colloid"</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology grain size description. Defined from Shell 4.3.1.1. (Wentworth) modified to remove the ambiguous term pelite.  Size ranges in millimeter (or micrometer) and inches. LT 256 mm        LT 10.1 in         ""boulder"" 64-256 mm        2.5–10.1 in        ""cobble""; 32–64 mm        1.26–2.5 in       ""very coarse gravel"" 16–32 mm        0.63–1.26 in        ""coarse gravel"" 8–16 mm            0.31–0.63 in        ""medium gravel"" 4–8 mm            0.157–0.31 in        ""fine gravel"" 2–4 mm            0.079–0.157 in     ""very fine gravel"" 1–2 mm           0.039–0.079 in    ""very coarse sand"" 0.5–1 mm        0.020–0.039 in        ""coarse sand"" 0.25–0.5 mm        0.010–0.020 in     ""medium sand"" 125–250 um        0.0049–0.010 in        ""fine sand"" 62.5–125 um      .0025–0.0049 in   ""very fine sand"" 3.90625–62.5 um        0.00015–0.0025 in    ""silt"" LT 3.90625 um        LT 0.00015 in        ""clay"" LT 1 um            LT 0.000039 in        ""colloid""")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeGrain", DataType="String64")]
        public string SizeGrain {
            get {
                return this.sizeGrainField;
            }
            set {
                this.sizeGrainField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3. Roundness refers to modal size class: very angular, angular, subangular, subrounded, rounded, well rounded.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology roundness description from Shell 4.3.1.3." +
            " Roundness refers to modal size class: very angular, angular, subangular, subrou" +
            "nded, rounded, well rounded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Roundness", DataType="String64")]
        public string Roundness {
            get {
                return this.roundnessField;
            }
            set {
                this.roundnessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology sorting description from Shell 4.3.1.2 Sorting: very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology sorting description from Shell 4.3.1.2 Sorting: very poorly sorted, unsorted, poorly sorted, poorly to moderately well sorted, moderately well sorted, well sorted, very well sorted, unimodally sorted, bimodally sorted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sorting", DataType="String64")]
        public string Sorting {
            get {
                return this.sortingField;
            }
            set {
                this.sortingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity: very elongated, elongated, slightly elongated, slightly spherical, spherical, very spherical.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology sphericity description for the modal size" +
            " class of grains in the sample, defined as per Shell 4.3.1.4 Sphericity: very el" +
            "ongated, elongated, slightly elongated, slightly spherical, spherical, very sphe" +
            "rical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sphericity", DataType="String64")]
        public string Sphericity {
            get {
                return this.sphericityField;
            }
            set {
                this.sphericityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. e.g., "calcite" (Common) "dolomite", "ankerite" (e.g., North Sea HPHT reservoirs such as Elgin and Franklin have almost pure ankerite cementation) "siderite" (Sherwood sandstones, southern UK typical Siderite cements), "quartz" (grain-to-grain contact cementation or secondary quartz deposition), "kaolinite", "illite" (e.g., Village Fields North Sea), "smectite","chlorite" (Teg, Algeria.).</summary>
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Lithology matrix/cement description. Terms will be as defined in the enumeration table. e.g., ""calcite"" (Common) ""dolomite"", ""ankerite"" (e.g., North Sea HPHT reservoirs such as Elgin and Franklin have almost pure ankerite cementation) ""siderite"" (Sherwood sandstones, southern UK typical Siderite cements), ""quartz"" (grain-to-grain contact cementation or secondary quartz deposition), ""kaolinite"", ""illite"" (e.g., Village Fields North Sea), ""smectite"",""chlorite"" (Teg, Algeria.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MatrixCement", DataType="MatrixCementKind")]
        public MatrixCementKind MatrixCement {
            get {
                return this.matrixCementField;
            }
            set {
                this.matrixCementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MatrixCementSpecified {
            get {
                return this.matrixCementFieldSpecified;
            }
            set {
                this.matrixCementFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined after BakerHughes definitions, as opposed to Shell, which has no linkage to actual numeric estimates.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology visible porosity description. Defined aft" +
            "er BakerHughes definitions, as opposed to Shell, which has no linkage to actual " +
            "numeric estimates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PorosityVisible", DataType="String64")]
        public string PorosityVisible {
            get {
                return this.porosityVisibleField;
            }
            set {
                this.porosityVisibleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2: intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"STRUCTURED DESCRIPTION USAGE. Visible porosity fabric description from after Shell 4.3.2.1 and 4.3.2.2: intergranular (particle size greater than 20m), fine interparticle (particle size less than 20m), intercrystalline, intragranular, intraskeletal, intracrystalline, mouldic, fenestral, shelter, framework, stylolitic, replacement, solution, vuggy, channel, cavernous.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PorosityFabric", DataType="String64")]
        public string PorosityFabric {
            get {
                return this.porosityFabricField;
            }
            set {
                this.porosityFabricField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2.5. In the future, these values would benefit from quantification, e.g., tight, slightly, fairly, highly.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("STRUCTURED DESCRIPTION USAGE. Lithology permeability description from Shell 4.3.2" +
            ".5. In the future, these values would benefit from quantification, e.g., tight, " +
            "slightly, fairly, highly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Permeability", DataType="String64")]
        public string Permeability {
            get {
                return this.permeabilityField;
            }
            set {
                this.permeabilityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Qualifier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Qualifier", DataType="LithologyQualifier")]
        public LithologyQualifier[] Qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of InterpretedIntervalLithology.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of InterpretedIntervalLithology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class LithostratigraphicUnit {
        
        private string authorityField;
        
        private LithostratigraphicRank kindField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>Person or collective body responsible for authorizing the information.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Person or collective body responsible for authorizing the information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="String64")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Specifies the lithostratigraphic unit-hierarchy (group, formation, member or bed).</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Specifies the lithostratigraphic unit-hierarchy (group, formation, member or bed)" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="LithostratigraphicRank")]
        public LithostratigraphicRank kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class GeochronologicalUnit {
        
        private string authorityField;
        
        private GeochronologicalRank kindField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>Person or collective body responsible for authorizing the information.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Person or collective body responsible for authorizing the information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="String64")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the time spans in geochronology.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines the time spans in geochronology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("kind", DataType="GeochronologicalRank")]
        public GeochronologicalRank kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthRegTrackCurve {
        
        private string curveInfoField;
        
        private LineStyle lineStyleField;
        
        private string lineWeightField;
        
        private string lineColorField;
        
        private ScaleType curveScaleTypeField;
        
        private string curveUnitField;
        
        private double curveLeftScaleValueField;
        
        private double curveRightScaleValueField;
        
        private BackupScaleType curveBackupScaleTypeField;
        
        private DepthRegRectangle[] curveScaleRectField;
        
        private string descriptionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Curve mnemonic</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Curve mnemonic")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveInfo", DataType="String64")]
        public string CurveInfo {
            get {
                return this.curveInfoField;
            }
            set {
                this.curveInfoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Image line style</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Image line style")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineStyle", DataType="LineStyle")]
        public LineStyle LineStyle {
            get {
                return this.lineStyleField;
            }
            set {
                this.lineStyleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of line graveness</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of line graveness")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineWeight", DataType="String64")]
        public string LineWeight {
            get {
                return this.lineWeightField;
            }
            set {
                this.lineWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Color of this line</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Color of this line")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineColor", DataType="String64")]
        public string LineColor {
            get {
                return this.lineColorField;
            }
            set {
                this.lineColorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Scale linearity</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Scale linearity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveScaleType", DataType="ScaleType")]
        public ScaleType CurveScaleType {
            get {
                return this.curveScaleTypeField;
            }
            set {
                this.curveScaleTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of data represented</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unit of data represented")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveUnit", DataType="TypeEnum")]
        public string CurveUnit {
            get {
                return this.curveUnitField;
            }
            set {
                this.curveUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Scale value on the left axis</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Scale value on the left axis")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveLeftScaleValue", DataType="double")]
        public double CurveLeftScaleValue {
            get {
                return this.curveLeftScaleValueField;
            }
            set {
                this.curveLeftScaleValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Scale value on the right axis</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Scale value on the right axis")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveRightScaleValue", DataType="double")]
        public double CurveRightScaleValue {
            get {
                return this.curveRightScaleValueField;
            }
            set {
                this.curveRightScaleValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Scale of the backup curve</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Scale of the backup curve")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveBackupScaleType", DataType="BackupScaleType")]
        public BackupScaleType CurveBackupScaleType {
            get {
                return this.curveBackupScaleTypeField;
            }
            set {
                this.curveBackupScaleTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coordinates of rectangle representing the area describing the scale.</summary>
        [System.Xml.Serialization.XmlElementAttribute("CurveScaleRect")]
        [System.ComponentModel.DescriptionAttribute("Coordinates of rectangle representing the area describing the scale.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveScaleRect", DataType="DepthRegRectangle")]
        public DepthRegRectangle[] CurveScaleRect {
            get {
                return this.curveScaleRectField;
            }
            set {
                this.curveScaleRectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Details of the line</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Details of the line")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the curve.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the curve.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum LineStyle {
        
        /// <remarks/>
        dashed,
        
        /// <remarks/>
        solid,
        
        /// <remarks/>
        dotted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("short dashed")]
        shortdashed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("long dashed")]
        longdashed,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ScaleType {
        
        /// <remarks/>
        linear,
        
        /// <remarks/>
        logarithmic,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BackupScaleType {
        
        /// <remarks/>
        x10,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("offscale left/right")]
        offscaleleftright,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthRegRectangle {
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private DepthRegPoint ulField;
        
        private DepthRegPoint urField;
        
        private DepthRegPoint llField;
        
        private DepthRegPoint lrField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The upper left point of a rectangular region.</summary>
        [System.ComponentModel.DescriptionAttribute("The upper left point of a rectangular region.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ul", DataType="DepthRegPoint")]
        public DepthRegPoint Ul {
            get {
                return this.ulField;
            }
            set {
                this.ulField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The upper right point of a rectangular region.</summary>
        [System.ComponentModel.DescriptionAttribute("The upper right point of a rectangular region.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ur", DataType="DepthRegPoint")]
        public DepthRegPoint Ur {
            get {
                return this.urField;
            }
            set {
                this.urField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lower left point of a rectangular region.</summary>
        [System.ComponentModel.DescriptionAttribute("The lower left point of a rectangular region.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ll", DataType="DepthRegPoint")]
        public DepthRegPoint Ll {
            get {
                return this.llField;
            }
            set {
                this.llField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lower right point of a rectangular region.</summary>
        [System.ComponentModel.DescriptionAttribute("The lower right point of a rectangular region.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Lr", DataType="DepthRegPoint")]
        public DepthRegPoint Lr {
            get {
                return this.lrField;
            }
            set {
                this.lrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the rectangular area.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the rectangular area.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthRegPoint {
        
        private long xField;
        
        private long yField;
        
        /// <remarks/>
        /// <summary>The x pixel position of a point.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The x pixel position of a point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("X", DataType="NonNegativeLong")]
        public long X {
            get {
                return this.xField;
            }
            set {
                this.xField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The y pixel position of a point.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The y pixel position of a point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Y", DataType="NonNegativeLong")]
        public long Y {
            get {
                return this.yField;
            }
            set {
                this.yField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthRegTrack {
        
        private string nameField;
        
        private LogTrackType typeField;
        
        private long leftEdgeField;
        
        private long rightEdgeField;
        
        private DepthRegRectangle[] trackCurveScaleRectField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private DepthRegTrackCurve[] associatedCurveField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A label associated with the track.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A label associated with the track.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of track.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The kind of track.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="LogTrackType")]
        public LogTrackType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The position of the left edge of the track.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The position of the left edge of the track.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LeftEdge", DataType="NonNegativeLong")]
        public long LeftEdge {
            get {
                return this.leftEdgeField;
            }
            set {
                this.leftEdgeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The position of the right edge of the track.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The position of the right edge of the track.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RightEdge", DataType="NonNegativeLong")]
        public long RightEdge {
            get {
                return this.rightEdgeField;
            }
            set {
                this.rightEdgeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Coordinates of rectangle representing the track.</summary>
        [System.Xml.Serialization.XmlElementAttribute("TrackCurveScaleRect")]
        [System.ComponentModel.DescriptionAttribute("Coordinates of rectangle representing the track.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TrackCurveScaleRect", DataType="DepthRegRectangle")]
        public DepthRegRectangle[] TrackCurveScaleRect {
            get {
                return this.trackCurveScaleRectField;
            }
            set {
                this.trackCurveScaleRectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AssociatedCurve")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AssociatedCurve", DataType="DepthRegTrackCurve")]
        public DepthRegTrackCurve[] AssociatedCurve {
            get {
                return this.associatedCurveField;
            }
            set {
                this.associatedCurveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the track.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the track.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum LogTrackType {
        
        /// <remarks/>
        curves,
        
        /// <remarks/>
        data,
        
        /// <remarks/>
        depth,
        
        /// <remarks/>
        traces,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthRegParameter {
        
        private string mnemonicField;
        
        private string dictionaryField;
        
        private GenericMeasure topIndexField;
        
        private GenericMeasure bottomIndexField;
        
        private GenericMeasure valueField;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A dictionary-controlled mnemonic.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A dictionary-controlled mnemonic.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mnemonic", DataType="String64")]
        public string Mnemonic {
            get {
                return this.mnemonicField;
            }
            set {
                this.mnemonicField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name or identifier of the controlling dictionary.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name or identifier of the controlling dictionary.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Dictionary", DataType="String64")]
        public string Dictionary {
            get {
                return this.dictionaryField;
            }
            set {
                this.dictionaryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The upper limit of a vertical region for which the parameter value is applicable.  '@uom' must be consistent with '//indexType'.</summary>
        [System.ComponentModel.DescriptionAttribute("The upper limit of a vertical region for which the parameter value is applicable." +
            "  \'@uom\' must be consistent with \'//indexType\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TopIndex", DataType="GenericMeasure")]
        public GenericMeasure TopIndex {
            get {
                return this.topIndexField;
            }
            set {
                this.topIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lower limit of a vertical region for which the parameter value is applicable.  '@uom' must be consistent with '//indexType'.</summary>
        [System.ComponentModel.DescriptionAttribute("The lower limit of a vertical region for which the parameter value is applicable." +
            "  \'@uom\' must be consistent with \'//indexType\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomIndex", DataType="GenericMeasure")]
        public GenericMeasure BottomIndex {
            get {
                return this.bottomIndexField;
            }
            set {
                this.bottomIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The value assigned to the parameter.   The unit of measure should be consistent with the property implied by 'mnemonic' in 'dictionary'. If the value is unitless, then use a unit of 'Euc'.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The value assigned to the parameter.   The unit of measure should be consistent w" +
            "ith the property implied by \'mnemonic\' in \'dictionary\'. If the value is unitless" +
            ", then use a unit of \'Euc\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="GenericMeasure")]
        public GenericMeasure Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description or definition for the mnemonic; required when ../dictionary is absent.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A description or definition for the mnemonic; required when ../dictionary is abse" +
            "nt.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the parameter.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GenericMeasure {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="UomEnum")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthRegCalibrationPoint {
        
        private GenericMeasure indexField;
        
        private string trackField;
        
        private CalibrationPointRole roleField;
        
        private string curveNameField;
        
        private DimensionlessMeasure fractionField;
        
        private string[] commentField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private DepthRegParameter[] parameterField;
        
        private DepthRegPoint pointField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The index (depth or time) for the calibration point.   The UOM value must be consistent with the indexType.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index (depth or time) for the calibration point.   The UOM value must be cons" +
            "istent with the indexType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="GenericMeasure")]
        public GenericMeasure Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the track containing the point.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the track containing the point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Track", DataType="String64")]
        public string Track {
            get {
                return this.trackField;
            }
            set {
                this.trackField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The horizontal position on the grid that the calibration point represents.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The horizontal position on the grid that the calibration point represents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Role", DataType="CalibrationPointRole")]
        public CalibrationPointRole Role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Facilitates searching for logs based on curve type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Facilitates searching for logs based on curve type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveName", DataType="String64")]
        public string CurveName {
            get {
                return this.curveNameField;
            }
            set {
                this.curveNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An intermediate point from the left edge to the right edge. Required when CalibrationPointRole is "fraction"; otherwise, not allowed otherwise.)  Used to extrapolate the rectified position of a track boundary that has wandered off the edge of the image.</summary>
        [System.ComponentModel.DescriptionAttribute("An intermediate point from the left edge to the right edge. Required when Calibra" +
            "tionPointRole is \"fraction\"; otherwise, not allowed otherwise.)  Used to extrapo" +
            "late the rectified position of a track boundary that has wandered off the edge o" +
            "f the image.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Fraction", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Fraction {
            get {
                return this.fractionField;
            }
            set {
                this.fractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments about the log section.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Comment")]
        [System.ComponentModel.DescriptionAttribute("Comments about the log section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string[] Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="DepthRegParameter")]
        public DepthRegParameter[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Point", DataType="DepthRegPoint")]
        public DepthRegPoint Point {
            get {
                return this.pointField;
            }
            set {
                this.pointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the calibration point.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the calibration point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum CalibrationPointRole {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("left edge")]
        leftedge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("right edge")]
        rightedge,
        
        /// <remarks/>
        fraction,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthRegLogSection {
        
        private long logSectionSequenceNumberField;
        
        private LogSectionType logSectionTypeField;
        
        private bool logSectionTypeFieldSpecified;
        
        private string logSectionNameField;
        
        private string logMatrixField;
        
        private LengthMeasure scaleNumeratorField;
        
        private GenericMeasure scaleDenominatorField;
        
        private LogIndexType indexTypeField;
        
        private string indexUomField;
        
        private WellboreDatumReference indexReferenceField;
        
        private bool indexReferenceFieldSpecified;
        
        private DataObjectReference logField;
        
        private GenericMeasure minIntervalField;
        
        private GenericMeasure maxIntervalField;
        
        private string verticalLabelField;
        
        private string verticalRatioField;
        
        private string commentField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private DepthRegRectangle[] upperCurveScaleRectField;
        
        private DepthRegCalibrationPoint[] calibrationPointField;
        
        private DepthRegRectangle[] whiteSpaceField;
        
        private DepthRegRectangle[] lowerCurveScaleRectField;
        
        private DepthRegRectangle[] logSectionRectField;
        
        private DepthRegParameter[] parameterField;
        
        private DepthRegTrack[] trackField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Zero-based index in the log sections, in order of appearance.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Zero-based index in the log sections, in order of appearance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogSectionSequenceNumber", DataType="NonNegativeLong")]
        public long LogSectionSequenceNumber {
            get {
                return this.logSectionSequenceNumberField;
            }
            set {
                this.logSectionSequenceNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of log section.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of log section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogSectionType", DataType="LogSectionType")]
        public LogSectionType LogSectionType {
            get {
                return this.logSectionTypeField;
            }
            set {
                this.logSectionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LogSectionTypeSpecified {
            get {
                return this.logSectionTypeFieldSpecified;
            }
            set {
                this.logSectionTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of a log section;  used to distinguish log sections of the same type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of a log section;  used to distinguish log sections of the same type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogSectionName", DataType="String64")]
        public string LogSectionName {
            get {
                return this.logSectionNameField;
            }
            set {
                this.logSectionNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log matrix assumed for porosity computations.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Log matrix assumed for porosity computations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogMatrix", DataType="String64")]
        public string LogMatrix {
            get {
                return this.logMatrixField;
            }
            set {
                this.logMatrixField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The numerator of the index (depth or time) scale of the original log, e. g. "5 in".</summary>
        [System.ComponentModel.DescriptionAttribute("The numerator of the index (depth or time) scale of the original log, e. g. \"5 in" +
            "\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ScaleNumerator", DataType="LengthMeasure")]
        public LengthMeasure ScaleNumerator {
            get {
                return this.scaleNumeratorField;
            }
            set {
                this.scaleNumeratorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The denominator of the index (depth or time) scale of the original log, e. g. "100 ft".  '@uom' must be consistent with '//indexType'.</summary>
        [System.ComponentModel.DescriptionAttribute("The denominator of the index (depth or time) scale of the original log, e. g. \"10" +
            "0 ft\".  \'@uom\' must be consistent with \'//indexType\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ScaleDenominator", DataType="GenericMeasure")]
        public GenericMeasure ScaleDenominator {
            get {
                return this.scaleDenominatorField;
            }
            set {
                this.scaleDenominatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Primary index type. For date-time indexes, any specified index values should be defined as a time offset (e.g., in seconds) from the creationDate of the well log.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Primary index type. For date-time indexes, any specified index values should be d" +
            "efined as a time offset (e.g., in seconds) from the creationDate of the well log" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexType", DataType="LogIndexType")]
        public LogIndexType IndexType {
            get {
                return this.indexTypeField;
            }
            set {
                this.indexTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Index UOM of the original log.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Index UOM of the original log.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexUom", DataType="String64")]
        public string IndexUom {
            get {
                return this.indexUomField;
            }
            set {
                this.indexUomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The origin for vertical coordinates on the original log. If this is not specified, information about the datum should be specified in a comment.</summary>
        [System.ComponentModel.DescriptionAttribute("The origin for vertical coordinates on the original log. If this is not specified" +
            ", information about the datum should be specified in a comment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexReference", DataType="WellboreDatumReference")]
        public WellboreDatumReference IndexReference {
            get {
                return this.indexReferenceField;
            }
            set {
                this.indexReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexReferenceSpecified {
            get {
                return this.indexReferenceFieldSpecified;
            }
            set {
                this.indexReferenceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ID of the log being referred to by this section.</summary>
        [System.ComponentModel.DescriptionAttribute("The ID of the log being referred to by this section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Log", DataType="DataObjectReference")]
        public DataObjectReference Log {
            get {
                return this.logField;
            }
            set {
                this.logField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum of the range of theindex values.  '@uom' must be consistent with '//indexType'.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Minimum of the range of theindex values.  \'@uom\' must be consistent with \'//index" +
            "Type\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinInterval", DataType="GenericMeasure")]
        public GenericMeasure MinInterval {
            get {
                return this.minIntervalField;
            }
            set {
                this.minIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum of the range of the index values. '@uom' must be consistent with '//indexType'.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Maximum of the range of the index values. \'@uom\' must be consistent with \'//index" +
            "Type\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxInterval", DataType="GenericMeasure")]
        public GenericMeasure MaxInterval {
            get {
                return this.maxIntervalField;
            }
            set {
                this.maxIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Vertical log scale label (e.g., “1 IN/100 F”).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Vertical log scale label (e.g., “1 IN/100 F”).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VerticalLabel", DataType="String2000")]
        public string VerticalLabel {
            get {
                return this.verticalLabelField;
            }
            set {
                this.verticalLabelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Second term of the vertical scale ratio (e.g., “240” for a 5-inch-per-100-foot log section).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Second term of the vertical scale ratio (e.g., “240” for a 5-inch-per-100-foot lo" +
            "g section).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VerticalRatio", DataType="String2000")]
        public string VerticalRatio {
            get {
                return this.verticalRatioField;
            }
            set {
                this.verticalRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments about the calibration.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments about the calibration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Boundaries of the upper curve scale (or horizontal scale) section for this log section.</summary>
        [System.Xml.Serialization.XmlElementAttribute("UpperCurveScaleRect")]
        [System.ComponentModel.DescriptionAttribute("Boundaries of the upper curve scale (or horizontal scale) section for this log se" +
            "ction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UpperCurveScaleRect", DataType="DepthRegRectangle")]
        public DepthRegRectangle[] UpperCurveScaleRect {
            get {
                return this.upperCurveScaleRectField;
            }
            set {
                this.upperCurveScaleRectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Generally this associates an X, Y value pair with a depth value from the log section.</summary>
        [System.Xml.Serialization.XmlElementAttribute("CalibrationPoint")]
        [System.ComponentModel.DescriptionAttribute("Generally this associates an X, Y value pair with a depth value from the log sect" +
            "ion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalibrationPoint", DataType="DepthRegCalibrationPoint")]
        public DepthRegCalibrationPoint[] CalibrationPoint {
            get {
                return this.calibrationPointField;
            }
            set {
                this.calibrationPointField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines blank space occurring within a log section in an image.</summary>
        [System.Xml.Serialization.XmlElementAttribute("WhiteSpace")]
        [System.ComponentModel.DescriptionAttribute("Defines blank space occurring within a log section in an image.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WhiteSpace", DataType="DepthRegRectangle")]
        public DepthRegRectangle[] WhiteSpace {
            get {
                return this.whiteSpaceField;
            }
            set {
                this.whiteSpaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Boundaries of the lower curve scale (or horizontal scale) section for this log section.</summary>
        [System.Xml.Serialization.XmlElementAttribute("LowerCurveScaleRect")]
        [System.ComponentModel.DescriptionAttribute("Boundaries of the lower curve scale (or horizontal scale) section for this log se" +
            "ction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LowerCurveScaleRect", DataType="DepthRegRectangle")]
        public DepthRegRectangle[] LowerCurveScaleRect {
            get {
                return this.lowerCurveScaleRectField;
            }
            set {
                this.lowerCurveScaleRectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The bounding rectangle of this log section.</summary>
        [System.Xml.Serialization.XmlElementAttribute("LogSectionRect")]
        [System.ComponentModel.DescriptionAttribute("The bounding rectangle of this log section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogSectionRect", DataType="DepthRegRectangle")]
        public DepthRegRectangle[] LogSectionRect {
            get {
                return this.logSectionRectField;
            }
            set {
                this.logSectionRectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="DepthRegParameter")]
        public DepthRegParameter[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Track")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Track", DataType="DepthRegTrack")]
        public DepthRegTrack[] Track {
            get {
                return this.trackField;
            }
            set {
                this.trackField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the log section.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the log section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum LogSectionType {
        
        /// <remarks/>
        main,
        
        /// <remarks/>
        repeat,
        
        /// <remarks/>
        calibration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tie in")]
        tiein,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("going in hole")]
        goinginhole,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum LogIndexType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("date time")]
        datetime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("elapsed time")]
        elapsedtime,
        
        /// <remarks/>
        length,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("measured depth")]
        measureddepth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vertical depth")]
        verticaldepth,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthRegLogRect {
        
        private LogRectangleType typeField;
        
        private bool typeFieldSpecified;
        
        private string nameField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private DepthRegRectangle positionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A region of an image containing a log section image.</summary>
        [System.ComponentModel.DescriptionAttribute("A region of an image containing a log section image.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="LogRectangleType")]
        public LogRectangleType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of a rectangular section.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of a rectangular section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Position", DataType="DepthRegRectangle")]
        public DepthRegRectangle Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the log section.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the log section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum LogRectangleType {
        
        /// <remarks/>
        header,
        
        /// <remarks/>
        alternate,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DigitalStorageMeasure {
        
        private DigitalStorageUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="DigitalStorageUom")]
        public DigitalStorageUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DigitalStorageUom {
        
        /// <remarks/>
        bit,
        
        /// <remarks/>
        @byte,
        
        /// <remarks/>
        Kibyte,
        
        /// <remarks/>
        Mibyte,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MemberObject {
        
        private LogIndexType indexTypeField;
        
        private bool indexTypeFieldSpecified;
        
        private GenericMeasure rangeMinField;
        
        private GenericMeasure rangeMaxField;
        
        private Energistics.DataAccess.Timestamp rangeDateTimeMinField;
        
        private Energistics.DataAccess.Timestamp rangeDateTimeMaxField;
        
        private string mnemonicListField;
        
        private MeasuredDepthCoord referenceDepthField;
        
        private Energistics.DataAccess.Timestamp referenceDateTimeField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private ObjectSequence sequence3Field;
        
        private DataObjectReference objectReferenceField;
        
        private ObjectSequence sequence1Field;
        
        private ObjectSequence sequence2Field;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>For a log object, this specifies the kind of the index curve for the log. This is only relevant for a systematically growing object.</summary>
        [System.ComponentModel.DescriptionAttribute("For a log object, this specifies the kind of the index curve for the log. This is" +
            " only relevant for a systematically growing object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexType", DataType="LogIndexType")]
        public LogIndexType IndexType {
            get {
                return this.indexTypeField;
            }
            set {
                this.indexTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexTypeSpecified {
            get {
                return this.indexTypeFieldSpecified;
            }
            set {
                this.indexTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum growing-object index value that applies to this group. The significance of this range is defined by the groupType.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum growing-object index value that applies to this group. The significan" +
            "ce of this range is defined by the groupType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RangeMin", DataType="GenericMeasure")]
        public GenericMeasure RangeMin {
            get {
                return this.rangeMinField;
            }
            set {
                this.rangeMinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum growing-object index value that applies to this group. The significance of this range is defined by the groupType.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum growing-object index value that applies to this group. The significan" +
            "ce of this range is defined by the groupType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RangeMax", DataType="GenericMeasure")]
        public GenericMeasure RangeMax {
            get {
                return this.rangeMaxField;
            }
            set {
                this.rangeMaxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum log date-time index value that applies to this group. The significance of this range is defined by the groupType.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum log date-time index value that applies to this group. The significanc" +
            "e of this range is defined by the groupType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RangeDateTimeMin", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp RangeDateTimeMin {
            get {
                return this.rangeDateTimeMinField;
            }
            set {
                this.rangeDateTimeMinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum log date-time index value that applies to this group. The significance of this range is defined by the groupType.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum log date-time index value that applies to this group. The significanc" +
            "e of this range is defined by the groupType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RangeDateTimeMax", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp RangeDateTimeMax {
            get {
                return this.rangeDateTimeMaxField;
            }
            set {
                this.rangeDateTimeMaxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comma delimited list of log curve mnemonics. Each mnemonic should only occur once in the list. If not specified then the group applies to all curves in the log.</summary>
        [System.ComponentModel.DescriptionAttribute("A comma delimited list of log curve mnemonics. Each mnemonic should only occur on" +
            "ce in the list. If not specified then the group applies to all curves in the log" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MnemonicList", DataType="string")]
        public string MnemonicList {
            get {
                return this.mnemonicListField;
            }
            set {
                this.mnemonicListField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A measured depth related to this group.  This does not necessarily represent an actual depth within a growing-object. The significance of this depth is defined by the groupType.</summary>
        [System.ComponentModel.DescriptionAttribute("A measured depth related to this group.  This does not necessarily represent an a" +
            "ctual depth within a growing-object. The significance of this depth is defined b" +
            "y the groupType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceDepth", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord ReferenceDepth {
            get {
                return this.referenceDepthField;
            }
            set {
                this.referenceDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A date and time related to this group.  This does not necessarily represent an actual index within a growing-object. The significance of this time is defined by the groupType.</summary>
        [System.ComponentModel.DescriptionAttribute("A date and time related to this group.  This does not necessarily represent an ac" +
            "tual index within a growing-object. The significance of this time is defined by " +
            "the groupType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceDateTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp ReferenceDateTime {
            get {
                return this.referenceDateTimeField;
            }
            set {
                this.referenceDateTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sequence3", DataType="ObjectSequence")]
        public ObjectSequence Sequence3 {
            get {
                return this.sequence3Field;
            }
            set {
                this.sequence3Field = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectReference", DataType="DataObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return this.objectReferenceField;
            }
            set {
                this.objectReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sequence1", DataType="ObjectSequence")]
        public ObjectSequence Sequence1 {
            get {
                return this.sequence1Field;
            }
            set {
                this.sequence1Field = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sequence2", DataType="ObjectSequence")]
        public ObjectSequence Sequence2 {
            get {
                return this.sequence2Field;
            }
            set {
                this.sequence2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of MemberObject</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of MemberObject")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ObjectSequence {
        
        private string descriptionField;
        
        /// <remarks/>
        /// <summary>The description of this object sequence.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The description of this object sequence.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("description", DataType="String2000")]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Participant {
        
        private ExtensionNameValue[] extNameValuesField;
        
        private MemberObject[] participant1Field;
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtNameValues")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtNameValues", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtNameValues {
            get {
                return this.extNameValuesField;
            }
            set {
                this.extNameValuesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Participant")]
        public MemberObject[] Participant1 {
            get {
                return this.participant1Field;
            }
            set {
                this.participant1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DownholeStringReference {
        
        private string[] stringEquipmentReferenceIdField;
        
        private string downholeStringReferenceIdField;
        
        /// <remarks/>
        /// <summary>Reference to string equipment</summary>
        [System.Xml.Serialization.XmlElementAttribute("StringEquipmentReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to string equipment")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringEquipmentReferenceId", DataType="String64")]
        public string[] StringEquipmentReferenceId {
            get {
                return this.stringEquipmentReferenceIdField;
            }
            set {
                this.stringEquipmentReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to downhole string</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to downhole string")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("downholeStringReferenceId", DataType="String64")]
        public string downholeStringReferenceId {
            get {
                return this.downholeStringReferenceIdField;
            }
            set {
                this.downholeStringReferenceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BoreholeStringReference {
        
        private string[] stringEquipmentReferenceIdField;
        
        private string boreholeStringReferenceIdField;
        
        /// <remarks/>
        /// <summary>Reference to string equipment</summary>
        [System.Xml.Serialization.XmlElementAttribute("StringEquipmentReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to string equipment")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringEquipmentReferenceId", DataType="String64")]
        public string[] StringEquipmentReferenceId {
            get {
                return this.stringEquipmentReferenceIdField;
            }
            set {
                this.stringEquipmentReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to borehole String</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to borehole String")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("boreholeStringReferenceId", DataType="String64")]
        public string boreholeStringReferenceId {
            get {
                return this.boreholeStringReferenceIdField;
            }
            set {
                this.boreholeStringReferenceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DownholeComponentReference {
        
        private string[] stringEquipmentReferenceIdField;
        
        private string[] perforationSetReferenceIdField;
        
        private BoreholeStringReference[] boreholeStringReferenceField;
        
        private DownholeStringReference[] downholeStringsReferenceField;
        
        /// <remarks/>
        /// <summary>Reference to string equipment</summary>
        [System.Xml.Serialization.XmlElementAttribute("StringEquipmentReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to string equipment")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringEquipmentReferenceId", DataType="String64")]
        public string[] StringEquipmentReferenceId {
            get {
                return this.stringEquipmentReferenceIdField;
            }
            set {
                this.stringEquipmentReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to perforation set</summary>
        [System.Xml.Serialization.XmlElementAttribute("PerforationSetReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to perforation set")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationSetReferenceId", DataType="String64")]
        public string[] PerforationSetReferenceId {
            get {
                return this.perforationSetReferenceIdField;
            }
            set {
                this.perforationSetReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BoreholeStringReference")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BoreholeStringReference", DataType="BoreholeStringReference")]
        public BoreholeStringReference[] BoreholeStringReference {
            get {
                return this.boreholeStringReferenceField;
            }
            set {
                this.boreholeStringReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DownholeStringsReference")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DownholeStringsReference", DataType="DownholeStringReference")]
        public DownholeStringReference[] DownholeStringsReference {
            get {
                return this.downholeStringsReferenceField;
            }
            set {
                this.downholeStringsReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Perforating {
        
        private int stageNumberField;
        
        private bool stageNumberFieldSpecified;
        
        private MeasuredDepthCoord bottomPackerSetField;
        
        private string perforationFluidTypeField;
        
        private PressureMeasure hydrostaticPressureField;
        
        private PressureMeasure surfacePressureField;
        
        private PressureMeasure reservoirPressureField;
        
        private MassPerMassMeasure fluidDensityField;
        
        private MeasuredDepthCoord fluidLevelField;
        
        private PerfConveyanceMethod conveyanceMethodField;
        
        private bool conveyanceMethodFieldSpecified;
        
        private int shotsPlannedField;
        
        private bool shotsPlannedFieldSpecified;
        
        private ReciprocalLengthMeasure shotsDensityField;
        
        private int shotsMisfiredField;
        
        private bool shotsMisfiredFieldSpecified;
        
        private string orientationField;
        
        private string orientationMethodField;
        
        private string perforationCompanyField;
        
        private string carrierManufacturerField;
        
        private LengthMeasure carrierSizeField;
        
        private string carrierDescriptionField;
        
        private string chargeManufacturerField;
        
        private LengthMeasure chargeSizeField;
        
        private MassMeasure chargeWeightField;
        
        private string chargeTypeField;
        
        private string refLogField;
        
        private string gunCentralizedField;
        
        private LengthMeasure gunSizeField;
        
        private string gunDesciptionField;
        
        private bool gunLeftInHoleField;
        
        private bool gunLeftInHoleFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>index number of stage</summary>
        [System.ComponentModel.DescriptionAttribute("index number of stage")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StageNumber", DataType="int")]
        public int StageNumber {
            get {
                return this.stageNumberField;
            }
            set {
                this.stageNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StageNumberSpecified {
            get {
                return this.stageNumberFieldSpecified;
            }
            set {
                this.stageNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Perf-Bottom of packer set depth</summary>
        [System.ComponentModel.DescriptionAttribute("Perf-Bottom of packer set depth")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomPackerSet", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord BottomPackerSet {
            get {
                return this.bottomPackerSetField;
            }
            set {
                this.bottomPackerSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Perforation fluid type</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Perforation fluid type")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationFluidType", DataType="String64")]
        public string PerforationFluidType {
            get {
                return this.perforationFluidTypeField;
            }
            set {
                this.perforationFluidTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>hydrostaticPressure</summary>
        [System.ComponentModel.DescriptionAttribute("hydrostaticPressure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HydrostaticPressure", DataType="PressureMeasure")]
        public PressureMeasure HydrostaticPressure {
            get {
                return this.hydrostaticPressureField;
            }
            set {
                this.hydrostaticPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Surface pressure</summary>
        [System.ComponentModel.DescriptionAttribute("Surface pressure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfacePressure", DataType="PressureMeasure")]
        public PressureMeasure SurfacePressure {
            get {
                return this.surfacePressureField;
            }
            set {
                this.surfacePressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reservoir pressure</summary>
        [System.ComponentModel.DescriptionAttribute("Reservoir pressure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReservoirPressure", DataType="PressureMeasure")]
        public PressureMeasure ReservoirPressure {
            get {
                return this.reservoirPressureField;
            }
            set {
                this.reservoirPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of fluid</summary>
        [System.ComponentModel.DescriptionAttribute("The density of fluid")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidDensity", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure FluidDensity {
            get {
                return this.fluidDensityField;
            }
            set {
                this.fluidDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid level.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidLevel", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord FluidLevel {
            get {
                return this.fluidLevelField;
            }
            set {
                this.fluidLevelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The conveyance method</summary>
        [System.ComponentModel.DescriptionAttribute("The conveyance method")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConveyanceMethod", DataType="PerfConveyanceMethod")]
        public PerfConveyanceMethod ConveyanceMethod {
            get {
                return this.conveyanceMethodField;
            }
            set {
                this.conveyanceMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConveyanceMethodSpecified {
            get {
                return this.conveyanceMethodFieldSpecified;
            }
            set {
                this.conveyanceMethodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of shots planned</summary>
        [System.ComponentModel.DescriptionAttribute("Number of shots planned")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShotsPlanned", DataType="int")]
        public int ShotsPlanned {
            get {
                return this.shotsPlannedField;
            }
            set {
                this.shotsPlannedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShotsPlannedSpecified {
            get {
                return this.shotsPlannedFieldSpecified;
            }
            set {
                this.shotsPlannedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of shots per unit length (ft, m)</summary>
        [System.ComponentModel.DescriptionAttribute("Number of shots per unit length (ft, m)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShotsDensity", DataType="ReciprocalLengthMeasure")]
        public ReciprocalLengthMeasure ShotsDensity {
            get {
                return this.shotsDensityField;
            }
            set {
                this.shotsDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of missed firings from the gun.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of missed firings from the gun.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShotsMisfired", DataType="int")]
        public int ShotsMisfired {
            get {
                return this.shotsMisfiredField;
            }
            set {
                this.shotsMisfiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShotsMisfiredSpecified {
            get {
                return this.shotsMisfiredFieldSpecified;
            }
            set {
                this.shotsMisfiredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>orientaton</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("orientaton")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Orientation", DataType="String64")]
        public string Orientation {
            get {
                return this.orientationField;
            }
            set {
                this.orientationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of orientaton method</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of orientaton method")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OrientationMethod", DataType="String64")]
        public string OrientationMethod {
            get {
                return this.orientationMethodField;
            }
            set {
                this.orientationMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of company providing the perforation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of company providing the perforation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationCompany", DataType="String64")]
        public string PerforationCompany {
            get {
                return this.perforationCompanyField;
            }
            set {
                this.perforationCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The manufacturer of the carrier.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The manufacturer of the carrier.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CarrierManufacturer", DataType="String64")]
        public string CarrierManufacturer {
            get {
                return this.carrierManufacturerField;
            }
            set {
                this.carrierManufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the carrier.</summary>
        [System.ComponentModel.DescriptionAttribute("Size of the carrier.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CarrierSize", DataType="LengthMeasure")]
        public LengthMeasure CarrierSize {
            get {
                return this.carrierSizeField;
            }
            set {
                this.carrierSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description from carrier</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description from carrier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CarrierDescription", DataType="String2000")]
        public string CarrierDescription {
            get {
                return this.carrierDescriptionField;
            }
            set {
                this.carrierDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The manufacturer of the charge.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The manufacturer of the charge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChargeManufacturer", DataType="String64")]
        public string ChargeManufacturer {
            get {
                return this.chargeManufacturerField;
            }
            set {
                this.chargeManufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the charge.</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the charge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChargeSize", DataType="LengthMeasure")]
        public LengthMeasure ChargeSize {
            get {
                return this.chargeSizeField;
            }
            set {
                this.chargeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The weight of the charge.</summary>
        [System.ComponentModel.DescriptionAttribute("The weight of the charge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChargeWeight", DataType="MassMeasure")]
        public MassMeasure ChargeWeight {
            get {
                return this.chargeWeightField;
            }
            set {
                this.chargeWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of the charge.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of the charge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChargeType", DataType="String64")]
        public string ChargeType {
            get {
                return this.chargeTypeField;
            }
            set {
                this.chargeTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the log</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the log")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RefLog", DataType="String64")]
        public string RefLog {
            get {
                return this.refLogField;
            }
            set {
                this.refLogField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True if centralized, else decentralized.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("True if centralized, else decentralized.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GunCentralized", DataType="String64")]
        public string GunCentralized {
            get {
                return this.gunCentralizedField;
            }
            set {
                this.gunCentralizedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the perforation gun.</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the perforation gun.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GunSize", DataType="LengthMeasure")]
        public LengthMeasure GunSize {
            get {
                return this.gunSizeField;
            }
            set {
                this.gunSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description about the perforating gun.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description about the perforating gun.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GunDesciption", DataType="String2000")]
        public string GunDesciption {
            get {
                return this.gunDesciptionField;
            }
            set {
                this.gunDesciptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag indicating whether the gun is left in hole or not.</summary>
        [System.ComponentModel.DescriptionAttribute("Flag indicating whether the gun is left in hole or not.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GunLeftInHole", DataType="boolean")]
        public bool GunLeftInHole {
            get {
                return this.gunLeftInHoleField;
            }
            set {
                this.gunLeftInHoleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GunLeftInHoleSpecified {
            get {
                return this.gunLeftInHoleFieldSpecified;
            }
            set {
                this.gunLeftInHoleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Perforating</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Perforating")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PerfConveyanceMethod {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slick line")]
        slickline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing conveyed")]
        tubingconveyed,
        
        /// <remarks/>
        wireline,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ReciprocalLengthMeasure {
        
        private ReciprocalLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ReciprocalLengthUom")]
        public ReciprocalLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/angstrom")]
        Item1angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/cm")]
        Item1cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft")]
        Item1ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/in")]
        Item1in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi")]
        Item1mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mm")]
        Item1mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/nm")]
        Item1nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/yd")]
        Item1yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-9 1/ft")]
        Item1E91ft,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DownholeExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidReportExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PerforatingExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WaitingOnExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureTestExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(JobExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AcidizefracExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BHPExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LostCirculationExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DirectionalSurveyExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CleanFillExtension))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementExtension))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractEventExtension {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DownholeExtension : AbstractEventExtension {
        
        private string downholeComponentRefIDField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Reference to downhole component</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to downhole component")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DownholeComponentRefID", DataType="String64")]
        public string DownholeComponentRefID {
            get {
                return this.downholeComponentRefIDField;
            }
            set {
                this.downholeComponentRefIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class CustomData {
        
        private System.Xml.XmlElement[] anyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class FluidReportExtension : AbstractEventExtension {
        
        private string fluidReportRefIDField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Reference to the fluid report</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the fluid report")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidReportRefID", DataType="String64")]
        public string FluidReportRefID {
            get {
                return this.fluidReportRefIDField;
            }
            set {
                this.fluidReportRefIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PerforatingExtension : AbstractEventExtension {
        
        private string perforationSetRefIDField;
        
        private CustomData extensionAnyField;
        
        private Perforating[] perforatingField;
        
        /// <remarks/>
        /// <summary>The perforationSet reference ID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The perforationSet reference ID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationSetRefID", DataType="String64")]
        public string PerforationSetRefID {
            get {
                return this.perforationSetRefIDField;
            }
            set {
                this.perforationSetRefIDField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Perforating")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Perforating", DataType="Perforating")]
        public Perforating[] Perforating {
            get {
                return this.perforatingField;
            }
            set {
                this.perforatingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class WaitingOnExtension : AbstractEventExtension {
        
        private string subCategoryField;
        
        private string chargeTypeCodeField;
        
        private string businessOrgWaitingOnField;
        
        private bool isNoChargeToProducerField;
        
        private bool isNoChargeToProducerFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Sub category</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Sub category")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubCategory", DataType="String64")]
        public string SubCategory {
            get {
                return this.subCategoryField;
            }
            set {
                this.subCategoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Code for charge type</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Code for charge type")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChargeTypeCode", DataType="String64")]
        public string ChargeTypeCode {
            get {
                return this.chargeTypeCodeField;
            }
            set {
                this.chargeTypeCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Business organization waiting on</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Business organization waiting on")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BusinessOrgWaitingOn", DataType="String64")]
        public string BusinessOrgWaitingOn {
            get {
                return this.businessOrgWaitingOnField;
            }
            set {
                this.businessOrgWaitingOnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag indicating whether producer is charged or not</summary>
        [System.ComponentModel.DescriptionAttribute("Flag indicating whether producer is charged or not")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsNoChargeToProducer", DataType="boolean")]
        public bool IsNoChargeToProducer {
            get {
                return this.isNoChargeToProducerField;
            }
            set {
                this.isNoChargeToProducerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsNoChargeToProducerSpecified {
            get {
                return this.isNoChargeToProducerFieldSpecified;
            }
            set {
                this.isNoChargeToProducerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PressureTestExtension : AbstractEventExtension {
        
        private LengthMeasure diaOrificeSizeField;
        
        private Energistics.DataAccess.Timestamp dTimeNextTestDateField;
        
        private VolumePerTimeMeasure flowrateRateBledField;
        
        private string identifierJobField;
        
        private bool isSuccessField;
        
        private bool isSuccessFieldSpecified;
        
        private PressureMeasure maxPressureDurationField;
        
        private string circulatingPositionField;
        
        private string fluidBledTypeField;
        
        private string orientationMethodField;
        
        private string testFluidTypeField;
        
        private string testSubTypeField;
        
        private string testTypeField;
        
        private PressureMeasure annulusPressureField;
        
        private string wellPressureUsedField;
        
        private string str10ReferenceField;
        
        private string uidAssemblyField;
        
        private VolumeMeasure volumeBledField;
        
        private VolumeMeasure volumeLostField;
        
        private VolumeMeasure volumePumpedField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Orifice Size</summary>
        [System.ComponentModel.DescriptionAttribute("Orifice Size")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaOrificeSize", DataType="LengthMeasure")]
        public LengthMeasure DiaOrificeSize {
            get {
                return this.diaOrificeSizeField;
            }
            set {
                this.diaOrificeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Next Test Date</summary>
        [System.ComponentModel.DescriptionAttribute("Next Test Date")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimeNextTestDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimeNextTestDate {
            get {
                return this.dTimeNextTestDateField;
            }
            set {
                this.dTimeNextTestDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rate Bled</summary>
        [System.ComponentModel.DescriptionAttribute("Rate Bled")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateRateBled", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateRateBled {
            get {
                return this.flowrateRateBledField;
            }
            set {
                this.flowrateRateBledField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>String Being Tested</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("String Being Tested")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdentifierJob", DataType="String64")]
        public string IdentifierJob {
            get {
                return this.identifierJobField;
            }
            set {
                this.identifierJobField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True if successful</summary>
        [System.ComponentModel.DescriptionAttribute("True if successful")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsSuccess", DataType="boolean")]
        public bool IsSuccess {
            get {
                return this.isSuccessField;
            }
            set {
                this.isSuccessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsSuccessSpecified {
            get {
                return this.isSuccessFieldSpecified;
            }
            set {
                this.isSuccessFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pressure held during test</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum pressure held during test")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxPressureDuration", DataType="PressureMeasure")]
        public PressureMeasure MaxPressureDuration {
            get {
                return this.maxPressureDurationField;
            }
            set {
                this.maxPressureDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Circulating position</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Circulating position")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CirculatingPosition", DataType="String64")]
        public string CirculatingPosition {
            get {
                return this.circulatingPositionField;
            }
            set {
                this.circulatingPositionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid bled type</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Fluid bled type")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidBledType", DataType="String64")]
        public string FluidBledType {
            get {
                return this.fluidBledTypeField;
            }
            set {
                this.fluidBledTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of orientaton method</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of orientaton method")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OrientationMethod", DataType="String64")]
        public string OrientationMethod {
            get {
                return this.orientationMethodField;
            }
            set {
                this.orientationMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test fluid type</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Test fluid type")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestFluidType", DataType="String64")]
        public string TestFluidType {
            get {
                return this.testFluidTypeField;
            }
            set {
                this.testFluidTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test sub type</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Test sub type")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestSubType", DataType="String64")]
        public string TestSubType {
            get {
                return this.testSubTypeField;
            }
            set {
                this.testSubTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test type</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Test type")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestType", DataType="String64")]
        public string TestType {
            get {
                return this.testTypeField;
            }
            set {
                this.testTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Annulus pressure</summary>
        [System.ComponentModel.DescriptionAttribute("Annulus pressure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnnulusPressure", DataType="PressureMeasure")]
        public PressureMeasure AnnulusPressure {
            get {
                return this.annulusPressureField;
            }
            set {
                this.annulusPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Well pressure used</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Well pressure used")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellPressureUsed", DataType="String64")]
        public string WellPressureUsed {
            get {
                return this.wellPressureUsedField;
            }
            set {
                this.wellPressureUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference #</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference #")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Str10Reference", DataType="String64")]
        public string Str10Reference {
            get {
                return this.str10ReferenceField;
            }
            set {
                this.str10ReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Well (Assembly)</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Well (Assembly)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UidAssembly", DataType="String64")]
        public string UidAssembly {
            get {
                return this.uidAssemblyField;
            }
            set {
                this.uidAssemblyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume Bled</summary>
        [System.ComponentModel.DescriptionAttribute("Volume Bled")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeBled", DataType="VolumeMeasure")]
        public VolumeMeasure VolumeBled {
            get {
                return this.volumeBledField;
            }
            set {
                this.volumeBledField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume Lost</summary>
        [System.ComponentModel.DescriptionAttribute("Volume Lost")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeLost", DataType="VolumeMeasure")]
        public VolumeMeasure VolumeLost {
            get {
                return this.volumeLostField;
            }
            set {
                this.volumeLostField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume Pumped</summary>
        [System.ComponentModel.DescriptionAttribute("Volume Pumped")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumePumped", DataType="VolumeMeasure")]
        public VolumeMeasure VolumePumped {
            get {
                return this.volumePumpedField;
            }
            set {
                this.volumePumpedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class JobExtension : AbstractEventExtension {
        
        private string jobReasonField;
        
        private string jobStatusField;
        
        private string primaryMotivationForJobField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Comment on the reason for the job</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comment on the reason for the job")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobReason", DataType="String2000")]
        public string JobReason {
            get {
                return this.jobReasonField;
            }
            set {
                this.jobReasonField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Status of job</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Status of job")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobStatus", DataType="String64")]
        public string JobStatus {
            get {
                return this.jobStatusField;
            }
            set {
                this.jobStatusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The primary reason for doing this job.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The primary reason for doing this job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PrimaryMotivationForJob", DataType="String64")]
        public string PrimaryMotivationForJob {
            get {
                return this.primaryMotivationForJobField;
            }
            set {
                this.primaryMotivationForJobField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class AcidizefracExtension : AbstractEventExtension {
        
        private string stimJobIDField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Reference to a StimJob.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a StimJob.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StimJobID", DataType="String64")]
        public string StimJobID {
            get {
                return this.stimJobIDField;
            }
            set {
                this.stimJobIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BHPExtension : AbstractEventExtension {
        
        private string bHPRefIDField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Reference to bottom hole pressure</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to bottom hole pressure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BHPRefID", DataType="String64")]
        public string BHPRefID {
            get {
                return this.bHPRefIDField;
            }
            set {
                this.bHPRefIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class LostCirculationExtension : AbstractEventExtension {
        
        private VolumeMeasure volumeLostField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Volume lost</summary>
        [System.ComponentModel.DescriptionAttribute("Volume lost")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeLost", DataType="VolumeMeasure")]
        public VolumeMeasure VolumeLost {
            get {
                return this.volumeLostField;
            }
            set {
                this.volumeLostField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DirectionalSurveyExtension : AbstractEventExtension {
        
        private string trajectoryRefIDField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Reference to trajectory</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to trajectory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TrajectoryRefID", DataType="String64")]
        public string TrajectoryRefID {
            get {
                return this.trajectoryRefIDField;
            }
            set {
                this.trajectoryRefIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CleanFillExtension : AbstractEventExtension {
        
        private string fillCleaningMethodField;
        
        private LengthMeasure toolSizeField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>method of fill and cleaning</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("method of fill and cleaning")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FillCleaningMethod", DataType="String64")]
        public string FillCleaningMethod {
            get {
                return this.fillCleaningMethodField;
            }
            set {
                this.fillCleaningMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>the size of the tool</summary>
        [System.ComponentModel.DescriptionAttribute("the size of the tool")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolSize", DataType="LengthMeasure")]
        public LengthMeasure ToolSize {
            get {
                return this.toolSizeField;
            }
            set {
                this.toolSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementExtension : AbstractEventExtension {
        
        private string cementJobRefIDField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>unique id of cementJob</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("unique id of cementJob")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementJobRefID", DataType="String64")]
        public string CementJobRefID {
            get {
                return this.cementJobRefIDField;
            }
            set {
                this.cementJobRefIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class EventType {
        
        private EventClassType classField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>The type of the event (job, daily report, etc.)</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of the event (job, daily report, etc.)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Class", DataType="EventClassType")]
        public EventClassType Class {
            get {
                return this.classField;
            }
            set {
                this.classField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum EventClassType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daily cost")]
        dailycost,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daily report")]
        dailyreport,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("failure (downhole equipment only)")]
        failuredownholeequipmentonly,
        
        /// <remarks/>
        job,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("job plan (phases)")]
        jobplanphases,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud attributes")]
        mudattributes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("npt (lost time event)")]
        nptlosttimeevent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time log (time measure)")]
        timelogtimemeasure,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PumpOp {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private int pumpField;
        
        private PumpOpType typeOperationField;
        
        private bool typeOperationFieldSpecified;
        
        private LengthMeasure idLinerField;
        
        private LengthMeasure lenStrokeField;
        
        private AngularVelocityMeasure rateStrokeField;
        
        private PressureMeasure pressureField;
        
        private PowerPerPowerMeasure pcEfficiencyField;
        
        private VolumePerTimeMeasure pumpOutputField;
        
        private MeasuredDepthCoord mdBitField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the corresponding pump on the rig.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A pointer to the corresponding pump on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pump", DataType="int")]
        public int Pump {
            get {
                return this.pumpField;
            }
            set {
                this.pumpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of pump operation.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of pump operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeOperation", DataType="PumpOpType")]
        public PumpOpType TypeOperation {
            get {
                return this.typeOperationField;
            }
            set {
                this.typeOperationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeOperationSpecified {
            get {
                return this.typeOperationFieldSpecified;
            }
            set {
                this.typeOperationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Liner inside diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Liner inside diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdLiner", DataType="LengthMeasure")]
        public LengthMeasure IdLiner {
            get {
                return this.idLinerField;
            }
            set {
                this.idLinerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Stroke length.</summary>
        [System.ComponentModel.DescriptionAttribute("Stroke length.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenStroke", DataType="LengthMeasure")]
        public LengthMeasure LenStroke {
            get {
                return this.lenStrokeField;
            }
            set {
                this.lenStrokeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump rate (strokes per minute).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Pump rate (strokes per minute).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RateStroke", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure RateStroke {
            get {
                return this.rateStrokeField;
            }
            set {
                this.rateStrokeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump pressure recorded.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Pump pressure recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pressure", DataType="PressureMeasure")]
        public PressureMeasure Pressure {
            get {
                return this.pressureField;
            }
            set {
                this.pressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump efficiency.</summary>
        [System.ComponentModel.DescriptionAttribute("Pump efficiency.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PcEfficiency", DataType="PowerPerPowerMeasure")]
        public PowerPerPowerMeasure PcEfficiency {
            get {
                return this.pcEfficiencyField;
            }
            set {
                this.pcEfficiencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump output (included for efficiency).</summary>
        [System.ComponentModel.DescriptionAttribute("Pump output (included for efficiency).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpOutput", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure PumpOutput {
            get {
                return this.pumpOutputField;
            }
            set {
                this.pumpOutputField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Along-hole measured depth of the measurement from the drill datum.</summary>
        [System.ComponentModel.DescriptionAttribute("Along-hole measured depth of the measurement from the drill datum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBit", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBit {
            get {
                return this.mdBitField;
            }
            set {
                this.mdBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of PumpOp.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of PumpOp.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PumpOpType {
        
        /// <remarks/>
        drilling,
        
        /// <remarks/>
        reaming,
        
        /// <remarks/>
        circulating,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slow pump")]
        slowpump,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PitVolume {
        
        private int pitField;
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private VolumeMeasure volPitField;
        
        private MassPerVolumeMeasure densFluidField;
        
        private string descFluidField;
        
        private TimeMeasure visFunnelField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>This is a pointer to the corresponding pit on the rig containing the volume being described.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("This is a pointer to the corresponding pit on the rig containing the volume being" +
            " described.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pit", DataType="int")]
        public int Pit {
            get {
                return this.pitField;
            }
            set {
                this.pitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of fluid in the pit.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Volume of fluid in the pit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolPit", DataType="VolumeMeasure")]
        public VolumeMeasure VolPit {
            get {
                return this.volPitField;
            }
            set {
                this.volPitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Density of fluid in the pit.</summary>
        [System.ComponentModel.DescriptionAttribute("Density of fluid in the pit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensFluid", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensFluid {
            get {
                return this.densFluidField;
            }
            set {
                this.densFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the fluid in the pit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the fluid in the pit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescFluid", DataType="String64")]
        public string DescFluid {
            get {
                return this.descFluidField;
            }
            set {
                this.descFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Funnel viscosity (in seconds).</summary>
        [System.ComponentModel.DescriptionAttribute("Funnel viscosity (in seconds).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VisFunnel", DataType="TimeMeasure")]
        public TimeMeasure VisFunnel {
            get {
                return this.visFunnelField;
            }
            set {
                this.visFunnelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of PitVolume.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of PitVolume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Scr {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private int pumpField;
        
        private ScrType typeScrField;
        
        private AngularVelocityMeasure rateStrokeField;
        
        private PressureMeasure presRecordedField;
        
        private MeasuredDepthCoord mdBitField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the corresponding pump on the rig.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A pointer to the corresponding pump on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pump", DataType="int")]
        public int Pump {
            get {
                return this.pumpField;
            }
            set {
                this.pumpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of slow circulation rate.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Type of slow circulation rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeScr", DataType="ScrType")]
        public ScrType TypeScr {
            get {
                return this.typeScrField;
            }
            set {
                this.typeScrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump stroke rate.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Pump stroke rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RateStroke", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure RateStroke {
            get {
                return this.rateStrokeField;
            }
            set {
                this.rateStrokeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Recorded pump pressure for the stroke rate.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Recorded pump pressure for the stroke rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresRecorded", DataType="PressureMeasure")]
        public PressureMeasure PresRecorded {
            get {
                return this.presRecordedField;
            }
            set {
                this.presRecordedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Along hole measured depth of measurement from the drill datum.</summary>
        [System.ComponentModel.DescriptionAttribute("Along hole measured depth of measurement from the drill datum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBit", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBit {
            get {
                return this.mdBitField;
            }
            set {
                this.mdBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Scr</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Scr")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ScrType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("string annulus")]
        stringannulus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("string kill line")]
        stringkillline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("string choke line")]
        stringchokeline,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DayCost {
        
        private string numAFEField;
        
        private string costGroupField;
        
        private string costClassField;
        
        private string costCodeField;
        
        private string costSubCodeField;
        
        private string costItemDescriptionField;
        
        private string itemKindField;
        
        private double itemSizeField;
        
        private bool itemSizeFieldSpecified;
        
        private int qtyItemField;
        
        private bool qtyItemFieldSpecified;
        
        private string numInvoiceField;
        
        private string numPOField;
        
        private string numTicketField;
        
        private bool isCarryOverField;
        
        private bool isCarryOverFieldSpecified;
        
        private bool isRentalField;
        
        private bool isRentalFieldSpecified;
        
        private NameTag[] nameTagField;
        
        private string numSerialField;
        
        private string nameVendorField;
        
        private string numVendorField;
        
        private string poolField;
        
        private bool estimatedField;
        
        private bool estimatedFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private Cost costAmountField;
        
        private Cost costPerItemField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>AFE number that this cost item applies to.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("AFE number that this cost item applies to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumAFE", DataType="String64")]
        public string NumAFE {
            get {
                return this.numAFEField;
            }
            set {
                this.numAFEField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cost group code.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cost group code.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostGroup", DataType="String64")]
        public string CostGroup {
            get {
                return this.costGroupField;
            }
            set {
                this.costGroupField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cost class code.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cost class code.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostClass", DataType="String64")]
        public string CostClass {
            get {
                return this.costClassField;
            }
            set {
                this.costClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cost code.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cost code.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostCode", DataType="String64")]
        public string CostCode {
            get {
                return this.costCodeField;
            }
            set {
                this.costCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cost subcode.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cost subcode.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostSubCode", DataType="String64")]
        public string CostSubCode {
            get {
                return this.costSubCodeField;
            }
            set {
                this.costSubCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the cost item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the cost item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostItemDescription", DataType="String64")]
        public string CostItemDescription {
            get {
                return this.costItemDescriptionField;
            }
            set {
                this.costItemDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of cost item specified (e.g., rig dayrate, joints casing).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("The kind of cost item specified (e.g., rig dayrate, joints casing).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ItemKind", DataType="UomEnum")]
        public string ItemKind {
            get {
                return this.itemKindField;
            }
            set {
                this.itemKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of one cost item.</summary>
        [System.ComponentModel.DescriptionAttribute("Size of one cost item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ItemSize", DataType="double")]
        public double ItemSize {
            get {
                return this.itemSizeField;
            }
            set {
                this.itemSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ItemSizeSpecified {
            get {
                return this.itemSizeFieldSpecified;
            }
            set {
                this.itemSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of cost items used that day, e.g., 1 rig dayrate, 30 joints of casing.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of cost items used that day, e.g., 1 rig dayrate, 30 joints of casing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QtyItem", DataType="int")]
        public int QtyItem {
            get {
                return this.qtyItemField;
            }
            set {
                this.qtyItemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QtyItemSpecified {
            get {
                return this.qtyItemFieldSpecified;
            }
            set {
                this.qtyItemFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Invoice number for cost item; the  bill is sent to the operator.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Invoice number for cost item; the  bill is sent to the operator.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumInvoice", DataType="String64")]
        public string NumInvoice {
            get {
                return this.numInvoiceField;
            }
            set {
                this.numInvoiceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Purchase order number provided by the operator.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Purchase order number provided by the operator.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumPO", DataType="String64")]
        public string NumPO {
            get {
                return this.numPOField;
            }
            set {
                this.numPOField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The field ticket number issued by the service company on location.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The field ticket number issued by the service company on location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumTicket", DataType="String64")]
        public string NumTicket {
            get {
                return this.numTicketField;
            }
            set {
                this.numTicketField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is this item carried from day to day? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is this item carried from day to day? Values are \"true\" (or \"1\") and \"false\" (or " +
            "\"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsCarryOver", DataType="boolean")]
        public bool IsCarryOver {
            get {
                return this.isCarryOverField;
            }
            set {
                this.isCarryOverField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsCarryOverSpecified {
            get {
                return this.isCarryOverFieldSpecified;
            }
            set {
                this.isCarryOverFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is this item a rental? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is this item a rental? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsRental", DataType="boolean")]
        public bool IsRental {
            get {
                return this.isRentalField;
            }
            set {
                this.isRentalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsRentalSpecified {
            get {
                return this.isRentalFieldSpecified;
            }
            set {
                this.isRentalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the item. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag and does not describe the contents.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the item. A serial number is a type of identification t" +
            "ag; however, some tags contain many pieces of information. This element only ide" +
            "ntifies the tag and does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Serial number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Serial number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumSerial", DataType="String64")]
        public string NumSerial {
            get {
                return this.numSerialField;
            }
            set {
                this.numSerialField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the vendor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the vendor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameVendor", DataType="String64")]
        public string NameVendor {
            get {
                return this.nameVendorField;
            }
            set {
                this.nameVendorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Vendor number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Vendor number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumVendor", DataType="String64")]
        public string NumVendor {
            get {
                return this.numVendorField;
            }
            set {
                this.numVendorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of pool/reservoir that this cost item can be accounted to.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of pool/reservoir that this cost item can be accounted to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pool", DataType="String64")]
        public string Pool {
            get {
                return this.poolField;
            }
            set {
                this.poolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is this an estimated cost? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is this an estimated cost? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Estimated", DataType="boolean")]
        public bool Estimated {
            get {
                return this.estimatedField;
            }
            set {
                this.estimatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EstimatedSpecified {
            get {
                return this.estimatedFieldSpecified;
            }
            set {
                this.estimatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cost for the item for this record.</summary>
        [System.ComponentModel.DescriptionAttribute("Cost for the item for this record.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostAmount", DataType="Cost")]
        public Cost CostAmount {
            get {
                return this.costAmountField;
            }
            set {
                this.costAmountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cost of each cost item, assume same currency.</summary>
        [System.ComponentModel.DescriptionAttribute("Cost of each cost item, assume same currency.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostPerItem", DataType="Cost")]
        public Cost CostPerItem {
            get {
                return this.costPerItemField;
            }
            set {
                this.costPerItemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DayCost</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DayCost")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Cost {
        
        private string currencyField;
        
        /// <remarks/>
        /// <summary>Currency used for this Cost.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Currency used for this Cost.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("currency", DataType="String64")]
        public string currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Personnel {
        
        private string companyField;
        
        private string typeServiceField;
        
        private int numPeopleField;
        
        private bool numPeopleFieldSpecified;
        
        private TimeMeasure totalTimeField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Name of the company.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Company", DataType="String64")]
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Service provided by the company.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Service provided by the company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeService", DataType="String64")]
        public string TypeService {
            get {
                return this.typeServiceField;
            }
            set {
                this.typeServiceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of people on board for that company.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of people on board for that company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumPeople", DataType="int")]
        public int NumPeople {
            get {
                return this.numPeopleField;
            }
            set {
                this.numPeopleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumPeopleSpecified {
            get {
                return this.numPeopleFieldSpecified;
            }
            set {
                this.numPeopleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total time worked by the company (commonly in hours).</summary>
        [System.ComponentModel.DescriptionAttribute("Total time worked by the company (commonly in hours).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalTime", DataType="TimeMeasure")]
        public TimeMeasure TotalTime {
            get {
                return this.totalTimeField;
            }
            set {
                this.totalTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Personnel.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Personnel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudLosses {
        
        private VolumeMeasure volLostShakerSurfField;
        
        private VolumeMeasure volLostMudCleanerSurfField;
        
        private VolumeMeasure volLostPitsSurfField;
        
        private VolumeMeasure volLostTrippingSurfField;
        
        private VolumeMeasure volLostOtherSurfField;
        
        private VolumeMeasure volTotMudLostSurfField;
        
        private VolumeMeasure volLostCircHoleField;
        
        private VolumeMeasure volLostCsgHoleField;
        
        private VolumeMeasure volLostCmtHoleField;
        
        private VolumeMeasure volLostBhdCsgHoleField;
        
        private VolumeMeasure volLostAbandonHoleField;
        
        private VolumeMeasure volLostOtherHoleField;
        
        private VolumeMeasure volTotMudLostHoleField;
        
        /// <remarks/>
        /// <summary>Volume of mud lost at shakers (at surface).</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud lost at shakers (at surface).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostShakerSurf", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostShakerSurf {
            get {
                return this.volLostShakerSurfField;
            }
            set {
                this.volLostShakerSurfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud lost in mud cleaning equipment (at surface).</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud lost in mud cleaning equipment (at surface).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostMudCleanerSurf", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostMudCleanerSurf {
            get {
                return this.volLostMudCleanerSurfField;
            }
            set {
                this.volLostMudCleanerSurfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud lost in pit room (at surface).</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud lost in pit room (at surface).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostPitsSurf", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostPitsSurf {
            get {
                return this.volLostPitsSurfField;
            }
            set {
                this.volLostPitsSurfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud lost while tripping (at surface).</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud lost while tripping (at surface).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostTrippingSurf", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostTrippingSurf {
            get {
                return this.volLostTrippingSurfField;
            }
            set {
                this.volLostTrippingSurfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Surface volume lost other location.</summary>
        [System.ComponentModel.DescriptionAttribute("Surface volume lost other location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostOtherSurf", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostOtherSurf {
            get {
                return this.volLostOtherSurfField;
            }
            set {
                this.volLostOtherSurfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total volume of mud lost at surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume of mud lost at surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolTotMudLostSurf", DataType="VolumeMeasure")]
        public VolumeMeasure VolTotMudLostSurf {
            get {
                return this.volTotMudLostSurfField;
            }
            set {
                this.volTotMudLostSurfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud volume lost downhole while circulating.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud volume lost downhole while circulating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostCircHole", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostCircHole {
            get {
                return this.volLostCircHoleField;
            }
            set {
                this.volLostCircHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud volume lost downhole while running casing.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud volume lost downhole while running casing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostCsgHole", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostCsgHole {
            get {
                return this.volLostCsgHoleField;
            }
            set {
                this.volLostCsgHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud volume lost downhole while cementing.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud volume lost downhole while cementing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostCmtHole", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostCmtHole {
            get {
                return this.volLostCmtHoleField;
            }
            set {
                this.volLostCmtHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud volume lost downhole behind casing.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud volume lost downhole behind casing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostBhdCsgHole", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostBhdCsgHole {
            get {
                return this.volLostBhdCsgHoleField;
            }
            set {
                this.volLostBhdCsgHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud volume lost downhole during abandonment.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud volume lost downhole during abandonment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostAbandonHole", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostAbandonHole {
            get {
                return this.volLostAbandonHoleField;
            }
            set {
                this.volLostAbandonHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud volume lost downhole from other location.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud volume lost downhole from other location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolLostOtherHole", DataType="VolumeMeasure")]
        public VolumeMeasure VolLostOtherHole {
            get {
                return this.volLostOtherHoleField;
            }
            set {
                this.volLostOtherHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total volume of mud lost downhole.</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume of mud lost downhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolTotMudLostHole", DataType="VolumeMeasure")]
        public VolumeMeasure VolTotMudLostHole {
            get {
                return this.volTotMudLostHoleField;
            }
            set {
                this.volTotMudLostHoleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MudVolume {
        
        private VolumeMeasure volTotMudStartField;
        
        private VolumeMeasure volMudDumpedField;
        
        private VolumeMeasure volMudReceivedField;
        
        private VolumeMeasure volMudReturnedField;
        
        private VolumeMeasure volMudBuiltField;
        
        private VolumeMeasure volMudStringField;
        
        private VolumeMeasure volMudCasingField;
        
        private VolumeMeasure volMudHoleField;
        
        private VolumeMeasure volMudRiserField;
        
        private VolumeMeasure volTotMudEndField;
        
        private MudLosses mudLossesField;
        
        /// <remarks/>
        /// <summary>Total volume of mud at start of report interval (including pits and hole).</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume of mud at start of report interval (including pits and hole).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolTotMudStart", DataType="VolumeMeasure")]
        public VolumeMeasure VolTotMudStart {
            get {
                return this.volTotMudStartField;
            }
            set {
                this.volTotMudStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud dumped.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud dumped.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudDumped", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudDumped {
            get {
                return this.volMudDumpedField;
            }
            set {
                this.volMudDumpedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud received from mud warehouse.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud received from mud warehouse.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudReceived", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudReceived {
            get {
                return this.volMudReceivedField;
            }
            set {
                this.volMudReceivedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud returned to mud warehouse.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud returned to mud warehouse.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudReturned", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudReturned {
            get {
                return this.volMudReturnedField;
            }
            set {
                this.volMudReturnedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud built.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud built.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudBuilt", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudBuilt {
            get {
                return this.volMudBuiltField;
            }
            set {
                this.volMudBuiltField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud contained within active string.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud contained within active string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudString", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudString {
            get {
                return this.volMudStringField;
            }
            set {
                this.volMudStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud contained in casing annulus.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud contained in casing annulus.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudCasing", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudCasing {
            get {
                return this.volMudCasingField;
            }
            set {
                this.volMudCasingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud contained in the openhole annulus.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud contained in the openhole annulus.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudHole", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudHole {
            get {
                return this.volMudHoleField;
            }
            set {
                this.volMudHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of mud contained in riser section annulus.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of mud contained in riser section annulus.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudRiser", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudRiser {
            get {
                return this.volMudRiserField;
            }
            set {
                this.volMudRiserField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total volume of mud at the end of the report interval (including pits and hole).</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume of mud at the end of the report interval (including pits and hole).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolTotMudEnd", DataType="VolumeMeasure")]
        public VolumeMeasure VolTotMudEnd {
            get {
                return this.volTotMudEndField;
            }
            set {
                this.volTotMudEndField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudLosses", DataType="MudLosses")]
        public MudLosses MudLosses {
            get {
                return this.mudLossesField;
            }
            set {
                this.mudLossesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ItemWtPerUnit))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ItemVolPerUnit))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractItemWtOrVolPerUnit {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ItemWtPerUnit : AbstractItemWtOrVolPerUnit {
        
        private MassMeasure itemWtPerUnit1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ItemWtPerUnit")]
        public MassMeasure ItemWtPerUnit1 {
            get {
                return this.itemWtPerUnit1Field;
            }
            set {
                this.itemWtPerUnit1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ItemVolPerUnit : AbstractItemWtOrVolPerUnit {
        
        private VolumeMeasure itemVolPerUnit1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ItemVolPerUnit")]
        public VolumeMeasure ItemVolPerUnit1 {
            get {
                return this.itemVolPerUnit1Field;
            }
            set {
                this.itemVolPerUnit1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Inventory {
        
        private string nameField;
        
        private AbstractItemWtOrVolPerUnit itemWtOrVolPerUnitField;
        
        private Cost pricePerUnitField;
        
        private int qtyStartField;
        
        private bool qtyStartFieldSpecified;
        
        private int qtyAdjustmentField;
        
        private bool qtyAdjustmentFieldSpecified;
        
        private int qtyReceivedField;
        
        private bool qtyReceivedFieldSpecified;
        
        private int qtyReturnedField;
        
        private bool qtyReturnedFieldSpecified;
        
        private int qtyUsedField;
        
        private bool qtyUsedFieldSpecified;
        
        private Cost costItemField;
        
        private int qtyOnLocationField;
        
        private bool qtyOnLocationFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Name or type of inventory item.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name or type of inventory item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Item weight or volume per unit.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Item weight or volume per unit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ItemWtOrVolPerUnit", DataType="AbstractItemWtOrVolPerUnit")]
        public AbstractItemWtOrVolPerUnit ItemWtOrVolPerUnit {
            get {
                return this.itemWtOrVolPerUnitField;
            }
            set {
                this.itemWtOrVolPerUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Price per item unit, assume same currency for all items.</summary>
        [System.ComponentModel.DescriptionAttribute("Price per item unit, assume same currency for all items.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PricePerUnit", DataType="Cost")]
        public Cost PricePerUnit {
            get {
                return this.pricePerUnitField;
            }
            set {
                this.pricePerUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start quantity for report interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Start quantity for report interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QtyStart", DataType="int")]
        public int QtyStart {
            get {
                return this.qtyStartField;
            }
            set {
                this.qtyStartField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QtyStartSpecified {
            get {
                return this.qtyStartFieldSpecified;
            }
            set {
                this.qtyStartFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Daily quantity adjustment/correction.</summary>
        [System.ComponentModel.DescriptionAttribute("Daily quantity adjustment/correction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QtyAdjustment", DataType="int")]
        public int QtyAdjustment {
            get {
                return this.qtyAdjustmentField;
            }
            set {
                this.qtyAdjustmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QtyAdjustmentSpecified {
            get {
                return this.qtyAdjustmentFieldSpecified;
            }
            set {
                this.qtyAdjustmentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Quantity received at the site.</summary>
        [System.ComponentModel.DescriptionAttribute("Quantity received at the site.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QtyReceived", DataType="int")]
        public int QtyReceived {
            get {
                return this.qtyReceivedField;
            }
            set {
                this.qtyReceivedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QtyReceivedSpecified {
            get {
                return this.qtyReceivedFieldSpecified;
            }
            set {
                this.qtyReceivedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Quantity returned to base from site.</summary>
        [System.ComponentModel.DescriptionAttribute("Quantity returned to base from site.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QtyReturned", DataType="int")]
        public int QtyReturned {
            get {
                return this.qtyReturnedField;
            }
            set {
                this.qtyReturnedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QtyReturnedSpecified {
            get {
                return this.qtyReturnedFieldSpecified;
            }
            set {
                this.qtyReturnedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Quantity used for the report interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Quantity used for the report interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QtyUsed", DataType="int")]
        public int QtyUsed {
            get {
                return this.qtyUsedField;
            }
            set {
                this.qtyUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QtyUsedSpecified {
            get {
                return this.qtyUsedFieldSpecified;
            }
            set {
                this.qtyUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cost for the product for the report interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Cost for the product for the report interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostItem", DataType="Cost")]
        public Cost CostItem {
            get {
                return this.costItemField;
            }
            set {
                this.costItemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Amount of the item remaining on location after all adjustments for the report interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Amount of the item remaining on location after all adjustments for the report int" +
            "erval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QtyOnLocation", DataType="int")]
        public int QtyOnLocation {
            get {
                return this.qtyOnLocationField;
            }
            set {
                this.qtyOnLocationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QtyOnLocationSpecified {
            get {
                return this.qtyOnLocationFieldSpecified;
            }
            set {
                this.qtyOnLocationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Inventory.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Inventory.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Weather {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private string agencyField;
        
        private PressureMeasure barometricPressureField;
        
        private short beaufortScaleNumberField;
        
        private bool beaufortScaleNumberFieldSpecified;
        
        private ThermodynamicTemperatureMeasure tempSurfaceMnField;
        
        private ThermodynamicTemperatureMeasure tempSurfaceMxField;
        
        private ThermodynamicTemperatureMeasure tempWindChillField;
        
        private ThermodynamicTemperatureMeasure tempseaField;
        
        private LengthMeasure visibilityField;
        
        private PlaneAngleMeasure aziWaveField;
        
        private LengthMeasure htWaveField;
        
        private LengthMeasure significantWaveField;
        
        private LengthMeasure maxWaveField;
        
        private TimeMeasure periodWaveField;
        
        private PlaneAngleMeasure aziWindField;
        
        private LengthPerTimeMeasure velWindField;
        
        private string typePrecipField;
        
        private LengthMeasure amtPrecipField;
        
        private string coverCloudField;
        
        private LengthMeasure ceilingCloudField;
        
        private LengthPerTimeMeasure currentSeaField;
        
        private PlaneAngleMeasure aziCurrentSeaField;
        
        private string commentsField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of company that supplied the weather data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of company that supplied the weather data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Agency", DataType="String64")]
        public string Agency {
            get {
                return this.agencyField;
            }
            set {
                this.agencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Atmospheric pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Atmospheric pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BarometricPressure", DataType="PressureMeasure")]
        public PressureMeasure BarometricPressure {
            get {
                return this.barometricPressureField;
            }
            set {
                this.barometricPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Beaufort wind force scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. Values range from 0 (calm) to 12 (hurricane force).</summary>
        [System.ComponentModel.DescriptionAttribute(@"The Beaufort wind force scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. Values range from 0 (calm) to 12 (hurricane force).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BeaufortScaleNumber", DataType="BeaufortScaleIntegerCode")]
        public short BeaufortScaleNumber {
            get {
                return this.beaufortScaleNumberField;
            }
            set {
                this.beaufortScaleNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BeaufortScaleNumberSpecified {
            get {
                return this.beaufortScaleNumberFieldSpecified;
            }
            set {
                this.beaufortScaleNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum temperature above ground. Temperature of the atmosphere.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum temperature above ground. Temperature of the atmosphere.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempSurfaceMn", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempSurfaceMn {
            get {
                return this.tempSurfaceMnField;
            }
            set {
                this.tempSurfaceMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum temperature above ground.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum temperature above ground.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempSurfaceMx", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempSurfaceMx {
            get {
                return this.tempSurfaceMxField;
            }
            set {
                this.tempSurfaceMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to the US weather service table, an air temperature of 30 degF with a 10 mph corresponds to a windchill of 22 degF.</summary>
        [System.ComponentModel.DescriptionAttribute("A measure of the combined chilling effect of wind and low temperature on living t" +
            "hings, also named chill factor, e.g., according to the US weather service table," +
            " an air temperature of 30 degF with a 10 mph corresponds to a windchill of 22 de" +
            "gF.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempWindChill", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempWindChill {
            get {
                return this.tempWindChillField;
            }
            set {
                this.tempWindChillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sea temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Sea temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tempsea", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Tempsea {
            get {
                return this.tempseaField;
            }
            set {
                this.tempseaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Horizontal visibility.</summary>
        [System.ComponentModel.DescriptionAttribute("Horizontal visibility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Visibility", DataType="LengthMeasure")]
        public LengthMeasure Visibility {
            get {
                return this.visibilityField;
            }
            set {
                this.visibilityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The direction from which the waves are coming, measured from true north.</summary>
        [System.ComponentModel.DescriptionAttribute("The direction from which the waves are coming, measured from true north.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziWave", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziWave {
            get {
                return this.aziWaveField;
            }
            set {
                this.aziWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average height of the waves.</summary>
        [System.ComponentModel.DescriptionAttribute("Average height of the waves.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HtWave", DataType="LengthMeasure")]
        public LengthMeasure HtWave {
            get {
                return this.htWaveField;
            }
            set {
                this.htWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An average of the higher 1/3 of the wave heights passing during a  sample period (typically 20 to 30 minutes).</summary>
        [System.ComponentModel.DescriptionAttribute("An average of the higher 1/3 of the wave heights passing during a  sample period " +
            "(typically 20 to 30 minutes).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SignificantWave", DataType="LengthMeasure")]
        public LengthMeasure SignificantWave {
            get {
                return this.significantWaveField;
            }
            set {
                this.significantWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum wave height.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum wave height.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxWave", DataType="LengthMeasure")]
        public LengthMeasure MaxWave {
            get {
                return this.maxWaveField;
            }
            set {
                this.maxWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The elapsed time between the passing of two wave tops.</summary>
        [System.ComponentModel.DescriptionAttribute("The elapsed time between the passing of two wave tops.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PeriodWave", DataType="TimeMeasure")]
        public TimeMeasure PeriodWave {
            get {
                return this.periodWaveField;
            }
            set {
                this.periodWaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The direction from which the wind is blowing, measured from true north.</summary>
        [System.ComponentModel.DescriptionAttribute("The direction from which the wind is blowing, measured from true north.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziWind", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziWind {
            get {
                return this.aziWindField;
            }
            set {
                this.aziWindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Wind speed.</summary>
        [System.ComponentModel.DescriptionAttribute("Wind speed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VelWind", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure VelWind {
            get {
                return this.velWindField;
            }
            set {
                this.velWindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of precipitation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of precipitation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypePrecip", DataType="String64")]
        public string TypePrecip {
            get {
                return this.typePrecipField;
            }
            set {
                this.typePrecipField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Amount of precipitation.</summary>
        [System.ComponentModel.DescriptionAttribute("Amount of precipitation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AmtPrecip", DataType="LengthMeasure")]
        public LengthMeasure AmtPrecip {
            get {
                return this.amtPrecipField;
            }
            set {
                this.amtPrecipField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of cloud cover.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of cloud cover.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoverCloud", DataType="String64")]
        public string CoverCloud {
            get {
                return this.coverCloudField;
            }
            set {
                this.coverCloudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Height of cloud cover.</summary>
        [System.ComponentModel.DescriptionAttribute("Height of cloud cover.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CeilingCloud", DataType="LengthMeasure")]
        public LengthMeasure CeilingCloud {
            get {
                return this.ceilingCloudField;
            }
            set {
                this.ceilingCloudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The speed of the ocean current.</summary>
        [System.ComponentModel.DescriptionAttribute("The speed of the ocean current.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurrentSea", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure CurrentSea {
            get {
                return this.currentSeaField;
            }
            set {
                this.currentSeaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Azimuth of current.</summary>
        [System.ComponentModel.DescriptionAttribute("Azimuth of current.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziCurrentSea", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziCurrentSea {
            get {
                return this.aziCurrentSeaField;
            }
            set {
                this.aziCurrentSeaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Weather</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Weather")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PlaneAngleMeasure {
        
        private PlaneAngleUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PlaneAngleUom")]
        public PlaneAngleUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PlaneAngleUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 seca")]
        Item0001seca,
        
        /// <remarks/>
        ccgr,
        
        /// <remarks/>
        cgr,
        
        /// <remarks/>
        dega,
        
        /// <remarks/>
        gon,
        
        /// <remarks/>
        krad,
        
        /// <remarks/>
        mila,
        
        /// <remarks/>
        mina,
        
        /// <remarks/>
        Mrad,
        
        /// <remarks/>
        mrad,
        
        /// <remarks/>
        rad,
        
        /// <remarks/>
        rev,
        
        /// <remarks/>
        seca,
        
        /// <remarks/>
        urad,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class SupportCraft {
        
        private string nameField;
        
        private SupportCraftType typeSupportCraftField;
        
        private Energistics.DataAccess.Timestamp dTimArrivedField;
        
        private Energistics.DataAccess.Timestamp dTimDepartedField;
        
        private string commentsField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Human-recognizable context for the support craft.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Human-recognizable context for the support craft.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of support craft (e.g., barge, helicopter, tug boat, etc.)</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Type of support craft (e.g., barge, helicopter, tug boat, etc.)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeSupportCraft", DataType="SupportCraftType")]
        public SupportCraftType TypeSupportCraft {
            get {
                return this.typeSupportCraftField;
            }
            set {
                this.typeSupportCraftField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time when the vehicle arrived at the rig site.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time when the vehicle arrived at the rig site.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimArrived", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimArrived {
            get {
                return this.dTimArrivedField;
            }
            set {
                this.dTimArrivedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time when the vehicle departed from the rig site.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time when the vehicle departed from the rig site.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimDeparted", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimDeparted {
            get {
                return this.dTimDepartedField;
            }
            set {
                this.dTimDepartedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of SupportCraft.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of SupportCraft.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum SupportCraftType {
        
        /// <remarks/>
        barge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("standby boat")]
        standbyboat,
        
        /// <remarks/>
        helicopter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("supply boat")]
        supplyboat,
        
        /// <remarks/>
        truck,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("crew vehicle")]
        crewvehicle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tug boat")]
        tugboat,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Incident {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private string reporterField;
        
        private int numMinorInjuryField;
        
        private bool numMinorInjuryFieldSpecified;
        
        private int numMajorInjuryField;
        
        private bool numMajorInjuryFieldSpecified;
        
        private int numFatalityField;
        
        private bool numFatalityFieldSpecified;
        
        private bool isNearMissField;
        
        private bool isNearMissFieldSpecified;
        
        private string descLocationField;
        
        private string descAccidentField;
        
        private string remedialActionDescField;
        
        private string causeDescField;
        
        private TimeMeasure eTimLostGrossField;
        
        private Cost costLossGrossField;
        
        private string responsibleCompanyField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the person who prepared the incident report.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the person who prepared the incident report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Reporter", DataType="String64")]
        public string Reporter {
            get {
                return this.reporterField;
            }
            set {
                this.reporterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of personnel with minor injuries.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of personnel with minor injuries.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumMinorInjury", DataType="int")]
        public int NumMinorInjury {
            get {
                return this.numMinorInjuryField;
            }
            set {
                this.numMinorInjuryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumMinorInjurySpecified {
            get {
                return this.numMinorInjuryFieldSpecified;
            }
            set {
                this.numMinorInjuryFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of personnel with major injuries.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of personnel with major injuries.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumMajorInjury", DataType="int")]
        public int NumMajorInjury {
            get {
                return this.numMajorInjuryField;
            }
            set {
                this.numMajorInjuryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumMajorInjurySpecified {
            get {
                return this.numMajorInjuryFieldSpecified;
            }
            set {
                this.numMajorInjuryFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of personnel killed due to the incident.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of personnel killed due to the incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumFatality", DataType="int")]
        public int NumFatality {
            get {
                return this.numFatalityField;
            }
            set {
                this.numFatalityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumFatalitySpecified {
            get {
                return this.numFatalityFieldSpecified;
            }
            set {
                this.numFatalityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Near miss incident occurrence?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Near miss incident occurrence?   Values are \"true\" (or \"1\") and \"false\" (or \"0\")." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsNearMiss", DataType="boolean")]
        public bool IsNearMiss {
            get {
                return this.isNearMissField;
            }
            set {
                this.isNearMissField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsNearMissSpecified {
            get {
                return this.isNearMissFieldSpecified;
            }
            set {
                this.isNearMissFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Location description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Location description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescLocation", DataType="String64")]
        public string DescLocation {
            get {
                return this.descLocationField;
            }
            set {
                this.descLocationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Accident description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Accident description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescAccident", DataType="String2000")]
        public string DescAccident {
            get {
                return this.descAccidentField;
            }
            set {
                this.descAccidentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remedial action description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remedial action description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RemedialActionDesc", DataType="String2000")]
        public string RemedialActionDesc {
            get {
                return this.remedialActionDescField;
            }
            set {
                this.remedialActionDescField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cause description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Cause description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CauseDesc", DataType="String2000")]
        public string CauseDesc {
            get {
                return this.causeDescField;
            }
            set {
                this.causeDescField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of hours lost due to the incident.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of hours lost due to the incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimLostGross", DataType="TimeMeasure")]
        public TimeMeasure ETimLostGross {
            get {
                return this.eTimLostGrossField;
            }
            set {
                this.eTimLostGrossField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gross estimate of the cost incurred due to the incident.</summary>
        [System.ComponentModel.DescriptionAttribute("Gross estimate of the cost incurred due to the incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostLossGross", DataType="Cost")]
        public Cost CostLossGross {
            get {
                return this.costLossGrossField;
            }
            set {
                this.costLossGrossField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the company that caused the incident.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the company that caused the incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ResponsibleCompany", DataType="String64")]
        public string ResponsibleCompany {
            get {
                return this.responsibleCompanyField;
            }
            set {
                this.responsibleCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Incident</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Incident")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Hse {
        
        private TimeMeasure daysIncFreeField;
        
        private Energistics.DataAccess.Timestamp lastCsgPresTestField;
        
        private PressureMeasure presLastCsgField;
        
        private Energistics.DataAccess.Timestamp lastBopPresTestField;
        
        private Energistics.DataAccess.Timestamp nextBopPresTestField;
        
        private PressureMeasure presStdPipeField;
        
        private PressureMeasure presKellyHoseField;
        
        private PressureMeasure presDiverterField;
        
        private PressureMeasure presAnnularField;
        
        private PressureMeasure presRamsField;
        
        private PressureMeasure presChokeLineField;
        
        private PressureMeasure presChokeManField;
        
        private Energistics.DataAccess.Timestamp lastFireBoatDrillField;
        
        private Energistics.DataAccess.Timestamp lastAbandonDrillField;
        
        private Energistics.DataAccess.Timestamp lastRigInspectionField;
        
        private Energistics.DataAccess.Timestamp lastSafetyMeetingField;
        
        private Energistics.DataAccess.Timestamp lastSafetyInspectionField;
        
        private Energistics.DataAccess.Timestamp lastTripDrillField;
        
        private Energistics.DataAccess.Timestamp lastDiverterDrillField;
        
        private Energistics.DataAccess.Timestamp lastBopDrillField;
        
        private bool regAgencyInspField;
        
        private bool regAgencyInspFieldSpecified;
        
        private bool nonComplianceIssuedField;
        
        private bool nonComplianceIssuedFieldSpecified;
        
        private int numStopCardsField;
        
        private bool numStopCardsFieldSpecified;
        
        private VolumeMeasure fluidDischargedField;
        
        private VolumeMeasure volCtgDischargedField;
        
        private VolumeMeasure volOilCtgDischargeField;
        
        private VolumeMeasure wasteDischargedField;
        
        private string commentsField;
        
        private Incident[] incidentField;
        
        /// <remarks/>
        /// <summary>Incident free duration (commonly in days).</summary>
        [System.ComponentModel.DescriptionAttribute("Incident free duration (commonly in days).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DaysIncFree", DataType="TimeMeasure")]
        public TimeMeasure DaysIncFree {
            get {
                return this.daysIncFreeField;
            }
            set {
                this.daysIncFreeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last casing pressure test date and time.</summary>
        [System.ComponentModel.DescriptionAttribute("Last casing pressure test date and time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastCsgPresTest", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastCsgPresTest {
            get {
                return this.lastCsgPresTestField;
            }
            set {
                this.lastCsgPresTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last casing pressure test pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Last casing pressure test pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresLastCsg", DataType="PressureMeasure")]
        public PressureMeasure PresLastCsg {
            get {
                return this.presLastCsgField;
            }
            set {
                this.presLastCsgField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last blow out preventer pressure test.</summary>
        [System.ComponentModel.DescriptionAttribute("Last blow out preventer pressure test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastBopPresTest", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastBopPresTest {
            get {
                return this.lastBopPresTestField;
            }
            set {
                this.lastBopPresTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Next blow out preventer pressure test.</summary>
        [System.ComponentModel.DescriptionAttribute("Next blow out preventer pressure test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NextBopPresTest", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp NextBopPresTest {
            get {
                return this.nextBopPresTestField;
            }
            set {
                this.nextBopPresTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Standpipe manifold pressure tested to.</summary>
        [System.ComponentModel.DescriptionAttribute("Standpipe manifold pressure tested to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresStdPipe", DataType="PressureMeasure")]
        public PressureMeasure PresStdPipe {
            get {
                return this.presStdPipeField;
            }
            set {
                this.presStdPipeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Kelly hose pressure tested to.</summary>
        [System.ComponentModel.DescriptionAttribute("Kelly hose pressure tested to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresKellyHose", DataType="PressureMeasure")]
        public PressureMeasure PresKellyHose {
            get {
                return this.presKellyHoseField;
            }
            set {
                this.presKellyHoseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Blow out preventer diverter pressure tested to.</summary>
        [System.ComponentModel.DescriptionAttribute("Blow out preventer diverter pressure tested to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresDiverter", DataType="PressureMeasure")]
        public PressureMeasure PresDiverter {
            get {
                return this.presDiverterField;
            }
            set {
                this.presDiverterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Blow out preventer annular preventer pressure tested to.</summary>
        [System.ComponentModel.DescriptionAttribute("Blow out preventer annular preventer pressure tested to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresAnnular", DataType="PressureMeasure")]
        public PressureMeasure PresAnnular {
            get {
                return this.presAnnularField;
            }
            set {
                this.presAnnularField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Blow out preventer ram pressure tested to.</summary>
        [System.ComponentModel.DescriptionAttribute("Blow out preventer ram pressure tested to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresRams", DataType="PressureMeasure")]
        public PressureMeasure PresRams {
            get {
                return this.presRamsField;
            }
            set {
                this.presRamsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Choke line pressure tested to.</summary>
        [System.ComponentModel.DescriptionAttribute("Choke line pressure tested to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresChokeLine", DataType="PressureMeasure")]
        public PressureMeasure PresChokeLine {
            get {
                return this.presChokeLineField;
            }
            set {
                this.presChokeLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Choke line manifold pressure tested to.</summary>
        [System.ComponentModel.DescriptionAttribute("Choke line manifold pressure tested to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresChokeMan", DataType="PressureMeasure")]
        public PressureMeasure PresChokeMan {
            get {
                return this.presChokeManField;
            }
            set {
                this.presChokeManField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last fire or life boat drill.</summary>
        [System.ComponentModel.DescriptionAttribute("Last fire or life boat drill.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastFireBoatDrill", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastFireBoatDrill {
            get {
                return this.lastFireBoatDrillField;
            }
            set {
                this.lastFireBoatDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last abandonment drill.</summary>
        [System.ComponentModel.DescriptionAttribute("Last abandonment drill.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastAbandonDrill", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastAbandonDrill {
            get {
                return this.lastAbandonDrillField;
            }
            set {
                this.lastAbandonDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last rig inspection/check.</summary>
        [System.ComponentModel.DescriptionAttribute("Last rig inspection/check.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastRigInspection", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastRigInspection {
            get {
                return this.lastRigInspectionField;
            }
            set {
                this.lastRigInspectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last safety meeting.</summary>
        [System.ComponentModel.DescriptionAttribute("Last safety meeting.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastSafetyMeeting", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastSafetyMeeting {
            get {
                return this.lastSafetyMeetingField;
            }
            set {
                this.lastSafetyMeetingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last safety inspection.</summary>
        [System.ComponentModel.DescriptionAttribute("Last safety inspection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastSafetyInspection", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastSafetyInspection {
            get {
                return this.lastSafetyInspectionField;
            }
            set {
                this.lastSafetyInspectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last trip drill.</summary>
        [System.ComponentModel.DescriptionAttribute("Last trip drill.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastTripDrill", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastTripDrill {
            get {
                return this.lastTripDrillField;
            }
            set {
                this.lastTripDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last diverter drill.</summary>
        [System.ComponentModel.DescriptionAttribute("Last diverter drill.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastDiverterDrill", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastDiverterDrill {
            get {
                return this.lastDiverterDrillField;
            }
            set {
                this.lastDiverterDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Last blow out preventer drill.</summary>
        [System.ComponentModel.DescriptionAttribute("Last blow out preventer drill.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastBopDrill", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp LastBopDrill {
            get {
                return this.lastBopDrillField;
            }
            set {
                this.lastBopDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Governmental regulatory inspection agency inspection?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Governmental regulatory inspection agency inspection?   Values are \"true\" (or \"1\"" +
            ") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RegAgencyInsp", DataType="boolean")]
        public bool RegAgencyInsp {
            get {
                return this.regAgencyInspField;
            }
            set {
                this.regAgencyInspField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RegAgencyInspSpecified {
            get {
                return this.regAgencyInspFieldSpecified;
            }
            set {
                this.regAgencyInspFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inspection non-compliance notice served?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Inspection non-compliance notice served?   Values are \"true\" (or \"1\") and \"false\"" +
            " (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NonComplianceIssued", DataType="boolean")]
        public bool NonComplianceIssued {
            get {
                return this.nonComplianceIssuedField;
            }
            set {
                this.nonComplianceIssuedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NonComplianceIssuedSpecified {
            get {
                return this.nonComplianceIssuedFieldSpecified;
            }
            set {
                this.nonComplianceIssuedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of health, safety and environment incidents reported.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of health, safety and environment incidents reported.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumStopCards", DataType="int")]
        public int NumStopCards {
            get {
                return this.numStopCardsField;
            }
            set {
                this.numStopCardsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumStopCardsSpecified {
            get {
                return this.numStopCardsFieldSpecified;
            }
            set {
                this.numStopCardsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Daily whole mud discarded.</summary>
        [System.ComponentModel.DescriptionAttribute("Daily whole mud discarded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidDischarged", DataType="VolumeMeasure")]
        public VolumeMeasure FluidDischarged {
            get {
                return this.fluidDischargedField;
            }
            set {
                this.fluidDischargedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of cuttings discharged.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of cuttings discharged.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolCtgDischarged", DataType="VolumeMeasure")]
        public VolumeMeasure VolCtgDischarged {
            get {
                return this.volCtgDischargedField;
            }
            set {
                this.volCtgDischargedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Oil on cuttings daily discharge.</summary>
        [System.ComponentModel.DescriptionAttribute("Oil on cuttings daily discharge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolOilCtgDischarge", DataType="VolumeMeasure")]
        public VolumeMeasure VolOilCtgDischarge {
            get {
                return this.volOilCtgDischargeField;
            }
            set {
                this.volOilCtgDischargeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of sanitary waste discharged.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of sanitary waste discharged.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WasteDischarged", DataType="VolumeMeasure")]
        public VolumeMeasure WasteDischarged {
            get {
                return this.wasteDischargedField;
            }
            set {
                this.wasteDischargedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Incident")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Incident", DataType="Incident")]
        public Incident[] Incident {
            get {
                return this.incidentField;
            }
            set {
                this.incidentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ShakerScreen {
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private int numDeckField;
        
        private bool numDeckFieldSpecified;
        
        private LengthMeasure meshXField;
        
        private LengthMeasure meshYField;
        
        private string manufacturerField;
        
        private string modelField;
        
        private LengthMeasure cutPointField;
        
        /// <remarks/>
        /// <summary>Date and time that activities started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time activities were completed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time activities were completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Deck number the mesh is installed on.</summary>
        [System.ComponentModel.DescriptionAttribute("Deck number the mesh is installed on.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumDeck", DataType="int")]
        public int NumDeck {
            get {
                return this.numDeckField;
            }
            set {
                this.numDeckField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumDeckSpecified {
            get {
                return this.numDeckFieldSpecified;
            }
            set {
                this.numDeckFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mesh size in the X direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Mesh size in the X direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeshX", DataType="LengthMeasure")]
        public LengthMeasure MeshX {
            get {
                return this.meshXField;
            }
            set {
                this.meshXField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mesh size in the Y direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Mesh size in the Y direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeshY", DataType="LengthMeasure")]
        public LengthMeasure MeshY {
            get {
                return this.meshYField;
            }
            set {
                this.meshYField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturers designated model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturers designated model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Shaker screen cut point, which is the maximum size cuttings that will pass through the screen.</summary>
        [System.ComponentModel.DescriptionAttribute("Shaker screen cut point, which is the maximum size cuttings that will pass throug" +
            "h the screen.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CutPoint", DataType="LengthMeasure")]
        public LengthMeasure CutPoint {
            get {
                return this.cutPointField;
            }
            set {
                this.cutPointField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ShakerOp {
        
        private string shakerField;
        
        private MeasuredDepthCoord mdHoleField;
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private TimeMeasure hoursRunField;
        
        private AreaPerAreaMeasure pcScreenCoveredField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private ShakerScreen shakerScreenField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A pointer to the shaker that is characterized by this report.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the shaker that is characterized by this report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Shaker", DataType="String64")]
        public string Shaker {
            get {
                return this.shakerField;
            }
            set {
                this.shakerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hole measured depth at the time of measurement.</summary>
        [System.ComponentModel.DescriptionAttribute("Hole measured depth at the time of measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdHole", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdHole {
            get {
                return this.mdHoleField;
            }
            set {
                this.mdHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hours run the shaker has run for this operation.</summary>
        [System.ComponentModel.DescriptionAttribute("Hours run the shaker has run for this operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoursRun", DataType="TimeMeasure")]
        public TimeMeasure HoursRun {
            get {
                return this.hoursRunField;
            }
            set {
                this.hoursRunField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Percent of screen covered by cuttings.</summary>
        [System.ComponentModel.DescriptionAttribute("Percent of screen covered by cuttings.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PcScreenCovered", DataType="AreaPerAreaMeasure")]
        public AreaPerAreaMeasure PcScreenCovered {
            get {
                return this.pcScreenCoveredField;
            }
            set {
                this.pcScreenCoveredField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShakerScreen", DataType="ShakerScreen")]
        public ShakerScreen ShakerScreen {
            get {
                return this.shakerScreenField;
            }
            set {
                this.shakerScreenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of ShakerOp</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of ShakerOp")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class AnchorState {
        
        private string anchorNameField;
        
        private PlaneAngleMeasure anchorAngleField;
        
        private ForceMeasure anchorTensionField;
        
        private string descriptionField;
        
        /// <remarks/>
        /// <summary>The anchor number within a mooring system, or name if a name is used instead.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The anchor number within a mooring system, or name if a name is used instead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnchorName", DataType="String64")]
        public string AnchorName {
            get {
                return this.anchorNameField;
            }
            set {
                this.anchorNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Angle of the anchor or mooring line.</summary>
        [System.ComponentModel.DescriptionAttribute("Angle of the anchor or mooring line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnchorAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AnchorAngle {
            get {
                return this.anchorAngleField;
            }
            set {
                this.anchorAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tension on the mooring line represented by the named anchor.</summary>
        [System.ComponentModel.DescriptionAttribute("Tension on the mooring line represented by the named anchor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnchorTension", DataType="ForceMeasure")]
        public ForceMeasure AnchorTension {
            get {
                return this.anchorTensionField;
            }
            set {
                this.anchorTensionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Free-test description of the state of this anchor or mooring line.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Free-test description of the state of this anchor or mooring line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RigResponse {
        
        private PlaneAngleMeasure rigHeadingField;
        
        private LengthMeasure rigHeaveField;
        
        private PlaneAngleMeasure rigPitchAngleField;
        
        private PlaneAngleMeasure rigRollAngleField;
        
        private PlaneAngleMeasure riserAngleField;
        
        private PlaneAngleMeasure riserDirectionField;
        
        private ForceMeasure riserTensionField;
        
        private ForceMeasure variableDeckLoadField;
        
        private ForceMeasure totalDeckLoadField;
        
        private PlaneAngleMeasure guideBaseAngleField;
        
        private PlaneAngleMeasure ballJointAngleField;
        
        private PlaneAngleMeasure ballJointDirectionField;
        
        private LengthMeasure offsetRigField;
        
        private ForceMeasure loadLeg1Field;
        
        private ForceMeasure loadLeg2Field;
        
        private ForceMeasure loadLeg3Field;
        
        private ForceMeasure loadLeg4Field;
        
        private LengthMeasure penetrationLeg1Field;
        
        private LengthMeasure penetrationLeg2Field;
        
        private LengthMeasure penetrationLeg3Field;
        
        private LengthMeasure penetrationLeg4Field;
        
        private LengthMeasure dispRigField;
        
        private LengthMeasure meanDraftField;
        
        private AnchorState[] anchorStateField;
        
        /// <remarks/>
        /// <summary>Direction, relative to true north, to which the rig is facing.</summary>
        [System.ComponentModel.DescriptionAttribute("Direction, relative to true north, to which the rig is facing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RigHeading", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure RigHeading {
            get {
                return this.rigHeadingField;
            }
            set {
                this.rigHeadingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum amplitude of the vertical motion of the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum amplitude of the vertical motion of the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RigHeave", DataType="LengthMeasure")]
        public LengthMeasure RigHeave {
            get {
                return this.rigHeaveField;
            }
            set {
                this.rigHeaveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measure of the fore-aft rotational movement of the rig due to the combined effects of wind and waves; measured as the angle from horizontal.</summary>
        [System.ComponentModel.DescriptionAttribute("Measure of the fore-aft rotational movement of the rig due to the combined effect" +
            "s of wind and waves; measured as the angle from horizontal.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RigPitchAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure RigPitchAngle {
            get {
                return this.rigPitchAngleField;
            }
            set {
                this.rigPitchAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measure of the side-to-side rotational movement of the rig due to the combined effects of wind and waves; measured as the angle from vertical.</summary>
        [System.ComponentModel.DescriptionAttribute("Measure of the side-to-side rotational movement of the rig due to the combined ef" +
            "fects of wind and waves; measured as the angle from vertical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RigRollAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure RigRollAngle {
            get {
                return this.rigRollAngleField;
            }
            set {
                this.rigRollAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Angle of the marine riser with the vertical.</summary>
        [System.ComponentModel.DescriptionAttribute("Angle of the marine riser with the vertical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RiserAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure RiserAngle {
            get {
                return this.riserAngleField;
            }
            set {
                this.riserAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Direction of the marine riser.</summary>
        [System.ComponentModel.DescriptionAttribute("Direction of the marine riser.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RiserDirection", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure RiserDirection {
            get {
                return this.riserDirectionField;
            }
            set {
                this.riserDirectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tension of the marine riser.</summary>
        [System.ComponentModel.DescriptionAttribute("Tension of the marine riser.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RiserTension", DataType="ForceMeasure")]
        public ForceMeasure RiserTension {
            get {
                return this.riserTensionField;
            }
            set {
                this.riserTensionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Current temporary load on the rig deck.</summary>
        [System.ComponentModel.DescriptionAttribute("Current temporary load on the rig deck.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VariableDeckLoad", DataType="ForceMeasure")]
        public ForceMeasure VariableDeckLoad {
            get {
                return this.variableDeckLoadField;
            }
            set {
                this.variableDeckLoadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total deck load.</summary>
        [System.ComponentModel.DescriptionAttribute("Total deck load.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalDeckLoad", DataType="ForceMeasure")]
        public ForceMeasure TotalDeckLoad {
            get {
                return this.totalDeckLoadField;
            }
            set {
                this.totalDeckLoadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Direction of the guide base.</summary>
        [System.ComponentModel.DescriptionAttribute("Direction of the guide base.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GuideBaseAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure GuideBaseAngle {
            get {
                return this.guideBaseAngleField;
            }
            set {
                this.guideBaseAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Angle between the riser and the blowout preventer (BOP) at the flex joint.</summary>
        [System.ComponentModel.DescriptionAttribute("Angle between the riser and the blowout preventer (BOP) at the flex joint.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BallJointAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure BallJointAngle {
            get {
                return this.ballJointAngleField;
            }
            set {
                this.ballJointAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Direction of the ball joint.</summary>
        [System.ComponentModel.DescriptionAttribute("Direction of the ball joint.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BallJointDirection", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure BallJointDirection {
            get {
                return this.ballJointDirectionField;
            }
            set {
                this.ballJointDirectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Horizontal displacement of the rig relative to the wellhead.</summary>
        [System.ComponentModel.DescriptionAttribute("Horizontal displacement of the rig relative to the wellhead.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OffsetRig", DataType="LengthMeasure")]
        public LengthMeasure OffsetRig {
            get {
                return this.offsetRigField;
            }
            set {
                this.offsetRigField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Load carried by one leg of a jackup rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Load carried by one leg of a jackup rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoadLeg1", DataType="ForceMeasure")]
        public ForceMeasure LoadLeg1 {
            get {
                return this.loadLeg1Field;
            }
            set {
                this.loadLeg1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Load carried by the second leg of a jackup rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Load carried by the second leg of a jackup rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoadLeg2", DataType="ForceMeasure")]
        public ForceMeasure LoadLeg2 {
            get {
                return this.loadLeg2Field;
            }
            set {
                this.loadLeg2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Load carried by the third leg of a jackup rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Load carried by the third leg of a jackup rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoadLeg3", DataType="ForceMeasure")]
        public ForceMeasure LoadLeg3 {
            get {
                return this.loadLeg3Field;
            }
            set {
                this.loadLeg3Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Load carried by the fourth leg of a jackup rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Load carried by the fourth leg of a jackup rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoadLeg4", DataType="ForceMeasure")]
        public ForceMeasure LoadLeg4 {
            get {
                return this.loadLeg4Field;
            }
            set {
                this.loadLeg4Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Penetration of the first leg into the seabed.</summary>
        [System.ComponentModel.DescriptionAttribute("Penetration of the first leg into the seabed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PenetrationLeg1", DataType="LengthMeasure")]
        public LengthMeasure PenetrationLeg1 {
            get {
                return this.penetrationLeg1Field;
            }
            set {
                this.penetrationLeg1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Penetration of the second leg into the seabed.</summary>
        [System.ComponentModel.DescriptionAttribute("Penetration of the second leg into the seabed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PenetrationLeg2", DataType="LengthMeasure")]
        public LengthMeasure PenetrationLeg2 {
            get {
                return this.penetrationLeg2Field;
            }
            set {
                this.penetrationLeg2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Penetration of the third leg into the seabed.</summary>
        [System.ComponentModel.DescriptionAttribute("Penetration of the third leg into the seabed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PenetrationLeg3", DataType="LengthMeasure")]
        public LengthMeasure PenetrationLeg3 {
            get {
                return this.penetrationLeg3Field;
            }
            set {
                this.penetrationLeg3Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Penetration of the fourth leg into the seabed.</summary>
        [System.ComponentModel.DescriptionAttribute("Penetration of the fourth leg into the seabed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PenetrationLeg4", DataType="LengthMeasure")]
        public LengthMeasure PenetrationLeg4 {
            get {
                return this.penetrationLeg4Field;
            }
            set {
                this.penetrationLeg4Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Vessel displacement (in water).</summary>
        [System.ComponentModel.DescriptionAttribute("Vessel displacement (in water).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DispRig", DataType="LengthMeasure")]
        public LengthMeasure DispRig {
            get {
                return this.dispRigField;
            }
            set {
                this.dispRigField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mean draft at mid-section of the vessel.</summary>
        [System.ComponentModel.DescriptionAttribute("Mean draft at mid-section of the vessel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeanDraft", DataType="LengthMeasure")]
        public LengthMeasure MeanDraft {
            get {
                return this.meanDraftField;
            }
            set {
                this.meanDraftField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AnchorState")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnchorState", DataType="AnchorState")]
        public AnchorState[] AnchorState {
            get {
                return this.anchorStateField;
            }
            set {
                this.anchorStateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StnTrajCorUsed {
        
        private LinearAccelerationMeasure gravAxialAccelCorField;
        
        private LinearAccelerationMeasure gravTran1AccelCorField;
        
        private LinearAccelerationMeasure gravTran2AccelCorField;
        
        private MagneticFluxDensityMeasure magAxialDrlstrCorField;
        
        private MagneticFluxDensityMeasure magTran1DrlstrCorField;
        
        private MagneticFluxDensityMeasure magTran2DrlstrCorField;
        
        private MagneticFluxDensityMeasure magTran1MSACorField;
        
        private MagneticFluxDensityMeasure magTran2MSACorField;
        
        private MagneticFluxDensityMeasure magAxialMSACorField;
        
        private PlaneAngleMeasure sagIncCorField;
        
        private PlaneAngleMeasure sagAziCorField;
        
        private PlaneAngleMeasure stnMagDeclUsedField;
        
        private PlaneAngleMeasure stnGridConUsedField;
        
        private LengthMeasure dirSensorOffsetField;
        
        /// <remarks/>
        /// <summary>Calculated gravitational field strength correction.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated gravitational field strength correction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravAxialAccelCor", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravAxialAccelCor {
            get {
                return this.gravAxialAccelCorField;
            }
            set {
                this.gravAxialAccelCorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The correction applied to a cross-axial (direction 1) component of the Earth's gravitational field.</summary>
        [System.ComponentModel.DescriptionAttribute("The correction applied to a cross-axial (direction 1) component of the Earth\'s gr" +
            "avitational field.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravTran1AccelCor", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravTran1AccelCor {
            get {
                return this.gravTran1AccelCorField;
            }
            set {
                this.gravTran1AccelCorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The correction applied to a cross-axial (direction 2) component of the Earth's gravitational field.</summary>
        [System.ComponentModel.DescriptionAttribute("The correction applied to a cross-axial (direction 2) component of the Earth\'s gr" +
            "avitational field.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravTran2AccelCor", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravTran2AccelCor {
            get {
                return this.gravTran2AccelCorField;
            }
            set {
                this.gravTran2AccelCorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Axial magnetic drill string correction.</summary>
        [System.ComponentModel.DescriptionAttribute("Axial magnetic drill string correction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagAxialDrlstrCor", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagAxialDrlstrCor {
            get {
                return this.magAxialDrlstrCorField;
            }
            set {
                this.magAxialDrlstrCorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cross-axial (direction 1) magnetic correction.</summary>
        [System.ComponentModel.DescriptionAttribute("Cross-axial (direction 1) magnetic correction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTran1DrlstrCor", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTran1DrlstrCor {
            get {
                return this.magTran1DrlstrCorField;
            }
            set {
                this.magTran1DrlstrCorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cross-axial (direction 2) magnetic correction.</summary>
        [System.ComponentModel.DescriptionAttribute("Cross-axial (direction 2) magnetic correction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTran2DrlstrCor", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTran2DrlstrCor {
            get {
                return this.magTran2DrlstrCorField;
            }
            set {
                this.magTran2DrlstrCorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cross-axial (direction 1) magnetic correction due to a multi-station analysis process.</summary>
        [System.ComponentModel.DescriptionAttribute("Cross-axial (direction 1) magnetic correction due to a multi-station analysis pro" +
            "cess.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTran1MSACor", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTran1MSACor {
            get {
                return this.magTran1MSACorField;
            }
            set {
                this.magTran1MSACorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cross-axial (direction 2) magnetic correction due to a multi-station analysis process.</summary>
        [System.ComponentModel.DescriptionAttribute("Cross-axial (direction 2) magnetic correction due to a multi-station analysis pro" +
            "cess.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTran2MSACor", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTran2MSACor {
            get {
                return this.magTran2MSACorField;
            }
            set {
                this.magTran2MSACorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Axial magnetic correction due to a multi-station analysis process.</summary>
        [System.ComponentModel.DescriptionAttribute("Axial magnetic correction due to a multi-station analysis process.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagAxialMSACor", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagAxialMSACor {
            get {
                return this.magAxialMSACorField;
            }
            set {
                this.magAxialMSACorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calculated sag correction to the inclination.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated sag correction to the inclination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SagIncCor", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure SagIncCor {
            get {
                return this.sagIncCorField;
            }
            set {
                this.sagIncCorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calculated cosag correction to the azimuth.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated cosag correction to the azimuth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SagAziCor", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure SagAziCor {
            get {
                return this.sagAziCorField;
            }
            set {
                this.sagAziCorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StnMagDeclUsed", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure StnMagDeclUsed {
            get {
                return this.stnMagDeclUsedField;
            }
            set {
                this.stnMagDeclUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StnGridConUsed", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure StnGridConUsed {
            get {
                return this.stnGridConUsedField;
            }
            set {
                this.stnGridConUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Offset relative to the bit.</summary>
        [System.ComponentModel.DescriptionAttribute("Offset relative to the bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DirSensorOffset", DataType="LengthMeasure")]
        public LengthMeasure DirSensorOffset {
            get {
                return this.dirSensorOffsetField;
            }
            set {
                this.dirSensorOffsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LinearAccelerationMeasure {
        
        private LinearAccelerationUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LinearAccelerationUom")]
        public LinearAccelerationUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LinearAccelerationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s2")]
        cms2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s2")]
        fts2,
        
        /// <remarks/>
        Gal,
        
        /// <remarks/>
        gn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s2")]
        ins2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s2")]
        ms2,
        
        /// <remarks/>
        mGal,
        
        /// <remarks/>
        mgn,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class MagneticFluxDensityMeasure {
        
        private MagneticFluxDensityUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="MagneticFluxDensityUom")]
        public MagneticFluxDensityUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxDensityUom {
        
        /// <remarks/>
        cgauss,
        
        /// <remarks/>
        cT,
        
        /// <remarks/>
        dgauss,
        
        /// <remarks/>
        dT,
        
        /// <remarks/>
        Egauss,
        
        /// <remarks/>
        ET,
        
        /// <remarks/>
        fgauss,
        
        /// <remarks/>
        fT,
        
        /// <remarks/>
        gauss,
        
        /// <remarks/>
        Ggauss,
        
        /// <remarks/>
        GT,
        
        /// <remarks/>
        kgauss,
        
        /// <remarks/>
        kT,
        
        /// <remarks/>
        mgauss,
        
        /// <remarks/>
        Mgauss,
        
        /// <remarks/>
        mT,
        
        /// <remarks/>
        ngauss,
        
        /// <remarks/>
        nT,
        
        /// <remarks/>
        pgauss,
        
        /// <remarks/>
        pT,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        Tgauss,
        
        /// <remarks/>
        TT,
        
        /// <remarks/>
        ugauss,
        
        /// <remarks/>
        uT,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StnTrajRawData {
        
        private LinearAccelerationMeasure gravAxialRawField;
        
        private LinearAccelerationMeasure gravTran1RawField;
        
        private LinearAccelerationMeasure gravTran2RawField;
        
        private MagneticFluxDensityMeasure magAxialRawField;
        
        private MagneticFluxDensityMeasure magTran1RawField;
        
        private MagneticFluxDensityMeasure magTran2RawField;
        
        /// <remarks/>
        /// <summary>Uncorrected gravitational field strength measured in the axial direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Uncorrected gravitational field strength measured in the axial direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravAxialRaw", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravAxialRaw {
            get {
                return this.gravAxialRawField;
            }
            set {
                this.gravAxialRawField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Uncorrected gravitational field strength measured in the transverse direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Uncorrected gravitational field strength measured in the transverse direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravTran1Raw", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravTran1Raw {
            get {
                return this.gravTran1RawField;
            }
            set {
                this.gravTran1RawField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Uncorrected gravitational field strength measured in the transverse direction, approximately normal to tran1.</summary>
        [System.ComponentModel.DescriptionAttribute("Uncorrected gravitational field strength measured in the transverse direction, ap" +
            "proximately normal to tran1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravTran2Raw", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravTran2Raw {
            get {
                return this.gravTran2RawField;
            }
            set {
                this.gravTran2RawField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Uncorrected magnetic field strength measured in the axial direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Uncorrected magnetic field strength measured in the axial direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagAxialRaw", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagAxialRaw {
            get {
                return this.magAxialRawField;
            }
            set {
                this.magAxialRawField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Uncorrected magnetic field strength measured in the transverse direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Uncorrected magnetic field strength measured in the transverse direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTran1Raw", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTran1Raw {
            get {
                return this.magTran1RawField;
            }
            set {
                this.magTran1RawField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Uncorrected magnetic field strength measured in the transverse direction, approximately normal to tran1.</summary>
        [System.ComponentModel.DescriptionAttribute("Uncorrected magnetic field strength measured in the transverse direction, approxi" +
            "mately normal to tran1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTran2Raw", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTran2Raw {
            get {
                return this.magTran2RawField;
            }
            set {
                this.magTran2RawField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RefWellboreTrajectoryStation {
        
        private string stationReferenceField;
        
        private string trajectoryParentField;
        
        private string wellboreParentField;
        
        /// <remarks/>
        /// <summary>A pointer to the trajectoryStation within the parent trajectory. StationReference is a special case where WITSML only uses a UID for the pointer.The natural identity of a station is its physical characteristics (e.g., md).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the trajectoryStation within the parent trajectory. StationReference" +
            " is a special case where WITSML only uses a UID for the pointer.The natural iden" +
            "tity of a station is its physical characteristics (e.g., md).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StationReference", DataType="String64")]
        public string StationReference {
            get {
                return this.stationReferenceField;
            }
            set {
                this.stationReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the trajectory within the parent wellbore. This trajectory contains the trajectoryStation.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the trajectory within the parent wellbore. This trajectory contains " +
            "the trajectoryStation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TrajectoryParent", DataType="String64")]
        public string TrajectoryParent {
            get {
                return this.trajectoryParentField;
            }
            set {
                this.trajectoryParentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the wellbore that contains the trajectory. WellboreParent is not needed unless the trajectory is outside the context of a common parent wellbore.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the wellbore that contains the trajectory. WellboreParent is not nee" +
            "ded unless the trajectory is outside the context of a common parent wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreParent", DataType="String64")]
        public string WellboreParent {
            get {
                return this.wellboreParentField;
            }
            set {
                this.wellboreParentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StnTrajMatrixCov {
        
        private AreaMeasure varianceNNField;
        
        private AreaMeasure varianceNEField;
        
        private AreaMeasure varianceNVertField;
        
        private AreaMeasure varianceEEField;
        
        private AreaMeasure varianceEVertField;
        
        private AreaMeasure varianceVertVertField;
        
        private LengthMeasure biasNField;
        
        private LengthMeasure biasEField;
        
        private LengthMeasure biasVertField;
        
        /// <remarks/>
        /// <summary>Covariance north north.</summary>
        [System.ComponentModel.DescriptionAttribute("Covariance north north.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VarianceNN", DataType="AreaMeasure")]
        public AreaMeasure VarianceNN {
            get {
                return this.varianceNNField;
            }
            set {
                this.varianceNNField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Crossvariance north east.</summary>
        [System.ComponentModel.DescriptionAttribute("Crossvariance north east.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VarianceNE", DataType="AreaMeasure")]
        public AreaMeasure VarianceNE {
            get {
                return this.varianceNEField;
            }
            set {
                this.varianceNEField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Crossvariance north vertical.</summary>
        [System.ComponentModel.DescriptionAttribute("Crossvariance north vertical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VarianceNVert", DataType="AreaMeasure")]
        public AreaMeasure VarianceNVert {
            get {
                return this.varianceNVertField;
            }
            set {
                this.varianceNVertField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Covariance east east.</summary>
        [System.ComponentModel.DescriptionAttribute("Covariance east east.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VarianceEE", DataType="AreaMeasure")]
        public AreaMeasure VarianceEE {
            get {
                return this.varianceEEField;
            }
            set {
                this.varianceEEField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Crossvariance east vertical.</summary>
        [System.ComponentModel.DescriptionAttribute("Crossvariance east vertical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VarianceEVert", DataType="AreaMeasure")]
        public AreaMeasure VarianceEVert {
            get {
                return this.varianceEVertField;
            }
            set {
                this.varianceEVertField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Covariance vertical vertical.</summary>
        [System.ComponentModel.DescriptionAttribute("Covariance vertical vertical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VarianceVertVert", DataType="AreaMeasure")]
        public AreaMeasure VarianceVertVert {
            get {
                return this.varianceVertVertField;
            }
            set {
                this.varianceVertVertField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bias north.</summary>
        [System.ComponentModel.DescriptionAttribute("Bias north.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BiasN", DataType="LengthMeasure")]
        public LengthMeasure BiasN {
            get {
                return this.biasNField;
            }
            set {
                this.biasNField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bias east.</summary>
        [System.ComponentModel.DescriptionAttribute("Bias east.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BiasE", DataType="LengthMeasure")]
        public LengthMeasure BiasE {
            get {
                return this.biasEField;
            }
            set {
                this.biasEField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bias vertical. The coordinate system is set up in a right-handed configuration, which makes the vertical direction increasing (i.e., positive) downwards.</summary>
        [System.ComponentModel.DescriptionAttribute("Bias vertical. The coordinate system is set up in a right-handed configuration, w" +
            "hich makes the vertical direction increasing (i.e., positive) downwards.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BiasVert", DataType="LengthMeasure")]
        public LengthMeasure BiasVert {
            get {
                return this.biasVertField;
            }
            set {
                this.biasVertField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StnTrajValid {
        
        private MagneticFluxDensityMeasure magTotalFieldCalcField;
        
        private PlaneAngleMeasure magDipAngleCalcField;
        
        private LinearAccelerationMeasure gravTotalFieldCalcField;
        
        /// <remarks/>
        /// <summary>Calculated total intensity of the geomagnetic field as sum of BGGM,  IFR and local field.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated total intensity of the geomagnetic field as sum of BGGM,  IFR and loca" +
            "l field.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTotalFieldCalc", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTotalFieldCalc {
            get {
                return this.magTotalFieldCalcField;
            }
            set {
                this.magTotalFieldCalcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calculated magnetic dip (inclination), the angle between the horizontal  and the geomagnetic field (positive down, res .001).</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated magnetic dip (inclination), the angle between the horizontal  and the " +
            "geomagnetic field (positive down, res .001).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagDipAngleCalc", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure MagDipAngleCalc {
            get {
                return this.magDipAngleCalcField;
            }
            set {
                this.magDipAngleCalcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calculated total gravitational field.</summary>
        [System.ComponentModel.DescriptionAttribute("Calculated total gravitational field.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravTotalFieldCalc", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravTotalFieldCalc {
            get {
                return this.gravTotalFieldCalcField;
            }
            set {
                this.gravTotalFieldCalcField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_TrajectoryStation", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    public partial class TrajectoryStation {
        
        private bool manuallyEnteredField;
        
        private bool manuallyEnteredFieldSpecified;
        
        private string targetField;
        
        private Energistics.DataAccess.Timestamp dTimStnField;
        
        private TrajStationType typeTrajStationField;
        
        private TypeSurveyTool typeSurveyToolField;
        
        private bool typeSurveyToolFieldSpecified;
        
        private TrajStnCalcAlgorithm calcAlgorithmField;
        
        private bool calcAlgorithmFieldSpecified;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private PlaneAngleMeasure inclField;
        
        private PlaneAngleMeasure aziField;
        
        private PlaneAngleMeasure mtfField;
        
        private PlaneAngleMeasure gtfField;
        
        private LengthMeasure dispNsField;
        
        private LengthMeasure dispEwField;
        
        private LengthMeasure vertSectField;
        
        private AnglePerLengthMeasure dlsField;
        
        private AnglePerLengthMeasure rateTurnField;
        
        private AnglePerLengthMeasure rateBuildField;
        
        private LengthMeasure mdDeltaField;
        
        private LengthMeasure tvdDeltaField;
        
        private LinearAccelerationMeasure gravTotalUncertField;
        
        private PlaneAngleMeasure dipAngleUncertField;
        
        private MagneticFluxDensityMeasure magTotalUncertField;
        
        private bool gravAccelCorUsedField;
        
        private bool gravAccelCorUsedFieldSpecified;
        
        private bool magXAxialCorUsedField;
        
        private bool magXAxialCorUsedFieldSpecified;
        
        private bool sagCorUsedField;
        
        private bool sagCorUsedFieldSpecified;
        
        private bool magDrlstrCorUsedField;
        
        private bool magDrlstrCorUsedFieldSpecified;
        
        private bool infieldRefCorUsedField;
        
        private bool infieldRefCorUsedFieldSpecified;
        
        private bool interpolatedInfieldRefCorUsedField;
        
        private bool interpolatedInfieldRefCorUsedFieldSpecified;
        
        private bool inHoleRefCorUsedField;
        
        private bool inHoleRefCorUsedFieldSpecified;
        
        private bool axialMagInterferenceCorUsedField;
        
        private bool axialMagInterferenceCorUsedFieldSpecified;
        
        private bool cosagCorUsedField;
        
        private bool cosagCorUsedFieldSpecified;
        
        private bool mSACorUsedField;
        
        private bool mSACorUsedFieldSpecified;
        
        private LinearAccelerationMeasure gravTotalFieldReferenceField;
        
        private MagneticFluxDensityMeasure magTotalFieldReferenceField;
        
        private PlaneAngleMeasure magDipAngleReferenceField;
        
        private string magModelUsedField;
        
        private string magModelValidField;
        
        private string geoModelUsedField;
        
        private TrajStationStatus statusTrajStationField;
        
        private bool statusTrajStationFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private StnTrajValid validField;
        
        private StnTrajMatrixCov matrixCovField;
        
        private AbstractWellLocation[] locationField;
        
        private RefWellboreTrajectoryStation sourceStationField;
        
        private StnTrajRawData rawDataField;
        
        private StnTrajCorUsed corUsedField;
        
        private DataObjectReference iscwsaToolErrorModelField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Indicates whether the trajectory station information was manually entered by a human.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicates whether the trajectory station information was manually entered by a hu" +
            "man.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ManuallyEntered", DataType="boolean")]
        public bool ManuallyEntered {
            get {
                return this.manuallyEnteredField;
            }
            set {
                this.manuallyEnteredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ManuallyEnteredSpecified {
            get {
                return this.manuallyEnteredFieldSpecified;
            }
            set {
                this.manuallyEnteredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the intended target of this station.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the intended target of this station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Target", DataType="String64")]
        public string Target {
            get {
                return this.targetField;
            }
            set {
                this.targetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the station was measured or created.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the station was measured or created.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStn", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStn {
            get {
                return this.dTimStnField;
            }
            set {
                this.dTimStnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of survey station.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Type of survey station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeTrajStation", DataType="TrajStationType")]
        public TrajStationType TypeTrajStation {
            get {
                return this.typeTrajStationField;
            }
            set {
                this.typeTrajStationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of tool used for the measurements.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of tool used for the measurements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeSurveyTool", DataType="TypeSurveyTool")]
        public TypeSurveyTool TypeSurveyTool {
            get {
                return this.typeSurveyToolField;
            }
            set {
                this.typeSurveyToolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSurveyToolSpecified {
            get {
                return this.typeSurveyToolFieldSpecified;
            }
            set {
                this.typeSurveyToolFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of algorithm used in the position calculation.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of algorithm used in the position calculation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalcAlgorithm", DataType="TrajStnCalcAlgorithm")]
        public TrajStnCalcAlgorithm CalcAlgorithm {
            get {
                return this.calcAlgorithmField;
            }
            set {
                this.calcAlgorithmField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CalcAlgorithmSpecified {
            get {
                return this.calcAlgorithmFieldSpecified;
            }
            set {
                this.calcAlgorithmFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of measurement from the drill datum. This is an API "node-index" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Measured depth of measurement from the drill datum. This is an API \"node-index\" q" +
            "uery parameter for growing objects.  See the relevant API specification for the " +
            "query behavior related to this element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Vertical depth of the measurements.</summary>
        [System.ComponentModel.DescriptionAttribute("Vertical depth of the measurements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hole inclination, measured from vertical.</summary>
        [System.ComponentModel.DescriptionAttribute("Hole inclination, measured from vertical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Incl", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Incl {
            get {
                return this.inclField;
            }
            set {
                this.inclField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hole azimuth. Corrected to wells azimuth reference.</summary>
        [System.ComponentModel.DescriptionAttribute("Hole azimuth. Corrected to wells azimuth reference.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Azi", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Azi {
            get {
                return this.aziField;
            }
            set {
                this.aziField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Toolface angle (magnetic).</summary>
        [System.ComponentModel.DescriptionAttribute("Toolface angle (magnetic).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mtf", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Mtf {
            get {
                return this.mtfField;
            }
            set {
                this.mtfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Toolface angle (gravity).</summary>
        [System.ComponentModel.DescriptionAttribute("Toolface angle (gravity).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gtf", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Gtf {
            get {
                return this.gtfField;
            }
            set {
                this.gtfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>North-south offset, positive to the North.  This is relative to wellLocation with a North axis orientation of aziRef. If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.</summary>
        [System.ComponentModel.DescriptionAttribute("North-south offset, positive to the North.  This is relative to wellLocation with" +
            " a North axis orientation of aziRef. If a displacement with respect to a differe" +
            "nt point is desired then define a localCRS and specify local coordinates in loca" +
            "tion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DispNs", DataType="LengthMeasure")]
        public LengthMeasure DispNs {
            get {
                return this.dispNsField;
            }
            set {
                this.dispNsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>East-west offset, positive to the East. This is relative to wellLocation with a North axis orientation of aziRef.  If a displacement with respect to a different point is desired then define a localCRS and specify local coordinates in location.</summary>
        [System.ComponentModel.DescriptionAttribute("East-west offset, positive to the East. This is relative to wellLocation with a N" +
            "orth axis orientation of aziRef.  If a displacement with respect to a different " +
            "point is desired then define a localCRS and specify local coordinates in locatio" +
            "n.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DispEw", DataType="LengthMeasure")]
        public LengthMeasure DispEw {
            get {
                return this.dispEwField;
            }
            set {
                this.dispEwField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance along vertical section azimuth plane.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance along vertical section azimuth plane.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VertSect", DataType="LengthMeasure")]
        public LengthMeasure VertSect {
            get {
                return this.vertSectField;
            }
            set {
                this.vertSectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Dogleg severity.</summary>
        [System.ComponentModel.DescriptionAttribute("Dogleg severity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Dls", DataType="AnglePerLengthMeasure")]
        public AnglePerLengthMeasure Dls {
            get {
                return this.dlsField;
            }
            set {
                this.dlsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Turn rate, radius of curvature computation.</summary>
        [System.ComponentModel.DescriptionAttribute("Turn rate, radius of curvature computation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RateTurn", DataType="AnglePerLengthMeasure")]
        public AnglePerLengthMeasure RateTurn {
            get {
                return this.rateTurnField;
            }
            set {
                this.rateTurnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Build Rate, radius of curvature computation.</summary>
        [System.ComponentModel.DescriptionAttribute("Build Rate, radius of curvature computation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RateBuild", DataType="AnglePerLengthMeasure")]
        public AnglePerLengthMeasure RateBuild {
            get {
                return this.rateBuildField;
            }
            set {
                this.rateBuildField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Delta measured depth from previous station.</summary>
        [System.ComponentModel.DescriptionAttribute("Delta measured depth from previous station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdDelta", DataType="LengthMeasure")]
        public LengthMeasure MdDelta {
            get {
                return this.mdDeltaField;
            }
            set {
                this.mdDeltaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Delta true vertical depth from previous station.</summary>
        [System.ComponentModel.DescriptionAttribute("Delta true vertical depth from previous station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdDelta", DataType="LengthMeasure")]
        public LengthMeasure TvdDelta {
            get {
                return this.tvdDeltaField;
            }
            set {
                this.tvdDeltaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Survey tool gravity uncertainty.</summary>
        [System.ComponentModel.DescriptionAttribute("Survey tool gravity uncertainty.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravTotalUncert", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravTotalUncert {
            get {
                return this.gravTotalUncertField;
            }
            set {
                this.gravTotalUncertField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Survey tool dip uncertainty.</summary>
        [System.ComponentModel.DescriptionAttribute("Survey tool dip uncertainty.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DipAngleUncert", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure DipAngleUncert {
            get {
                return this.dipAngleUncertField;
            }
            set {
                this.dipAngleUncertField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Survey tool magnetic uncertainty.</summary>
        [System.ComponentModel.DescriptionAttribute("Survey tool magnetic uncertainty.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTotalUncert", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTotalUncert {
            get {
                return this.magTotalUncertField;
            }
            set {
                this.magTotalUncertField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was an accelerometer alignment correction applied to survey computation?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Was an accelerometer alignment correction applied to survey computation?   Values" +
            " are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravAccelCorUsed", DataType="boolean")]
        public bool GravAccelCorUsed {
            get {
                return this.gravAccelCorUsedField;
            }
            set {
                this.gravAccelCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GravAccelCorUsedSpecified {
            get {
                return this.gravAccelCorUsedFieldSpecified;
            }
            set {
                this.gravAccelCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was a magnetometer alignment correction applied to survey computation?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Was a magnetometer alignment correction applied to survey computation?   Values a" +
            "re \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagXAxialCorUsed", DataType="boolean")]
        public bool MagXAxialCorUsed {
            get {
                return this.magXAxialCorUsedField;
            }
            set {
                this.magXAxialCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MagXAxialCorUsedSpecified {
            get {
                return this.magXAxialCorUsedFieldSpecified;
            }
            set {
                this.magXAxialCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was a bottom hole assembly sag correction applied to the survey computation?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Was a bottom hole assembly sag correction applied to the survey computation?   Va" +
            "lues are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SagCorUsed", DataType="boolean")]
        public bool SagCorUsed {
            get {
                return this.sagCorUsedField;
            }
            set {
                this.sagCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SagCorUsedSpecified {
            get {
                return this.sagCorUsedFieldSpecified;
            }
            set {
                this.sagCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was a drillstring magnetism correction applied to survey computation?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Was a drillstring magnetism correction applied to survey computation?   Values ar" +
            "e \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagDrlstrCorUsed", DataType="boolean")]
        public bool MagDrlstrCorUsed {
            get {
                return this.magDrlstrCorUsedField;
            }
            set {
                this.magDrlstrCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MagDrlstrCorUsedSpecified {
            get {
                return this.magDrlstrCorUsedFieldSpecified;
            }
            set {
                this.magDrlstrCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was an In Field Referencing (IFR) correction applied to the azimuth value?   Values are "true" (or "1") and "false" (or "0"). An IFR survey measures the strength and direction of the Earth's magnetic field over the area of interest.  By taking a geomagnetic modelled values away  from these field survey results, we are left with a local crustal correction,  which since it is assumed geological in nature, only varies over geological timescales.   For MWD survey operations, these corrections are applied in addition to the geomagnetic model  to provide accurate knowledge of the local magnetic field and hence to improve the  accuracy of MWD magnetic azimuth measurements.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Was an In Field Referencing (IFR) correction applied to the azimuth value?   Values are ""true"" (or ""1"") and ""false"" (or ""0""). An IFR survey measures the strength and direction of the Earth's magnetic field over the area of interest.  By taking a geomagnetic modelled values away  from these field survey results, we are left with a local crustal correction,  which since it is assumed geological in nature, only varies over geological timescales.   For MWD survey operations, these corrections are applied in addition to the geomagnetic model  to provide accurate knowledge of the local magnetic field and hence to improve the  accuracy of MWD magnetic azimuth measurements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InfieldRefCorUsed", DataType="boolean")]
        public bool InfieldRefCorUsed {
            get {
                return this.infieldRefCorUsedField;
            }
            set {
                this.infieldRefCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InfieldRefCorUsedSpecified {
            get {
                return this.infieldRefCorUsedFieldSpecified;
            }
            set {
                this.infieldRefCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was an Interpolated In Field Referencing (IIFR) correction applied to the azimuth value?   Values are "true" (or "1") and "false" (or "0"). Interpolated In Field Referencing measures the diurnal Earth magnetic field variations resulting from electrical  currents in the ionosphere and effects of magnetic storms hitting the Earth. It increases again the accuracy  of the magnetic azimuth measurement.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Was an Interpolated In Field Referencing (IIFR) correction applied to the azimuth value?   Values are ""true"" (or ""1"") and ""false"" (or ""0""). Interpolated In Field Referencing measures the diurnal Earth magnetic field variations resulting from electrical  currents in the ionosphere and effects of magnetic storms hitting the Earth. It increases again the accuracy  of the magnetic azimuth measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpolatedInfieldRefCorUsed", DataType="boolean")]
        public bool InterpolatedInfieldRefCorUsed {
            get {
                return this.interpolatedInfieldRefCorUsedField;
            }
            set {
                this.interpolatedInfieldRefCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InterpolatedInfieldRefCorUsedSpecified {
            get {
                return this.interpolatedInfieldRefCorUsedFieldSpecified;
            }
            set {
                this.interpolatedInfieldRefCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was an In Hole Referencing (IHR) correction applied to the inclination and/or azimuth values?   Values are "true" (or "1") and "false" (or "0"). In-Hole Referencing essentially involves comparing gyro surveys to MWD surveys in a tangent  section of a well. Once a small part of a tangent section has been drilled and surveyed using an  MWD tool, then an open hole (OH) gyro is run. By comparing the Gyro surveys to the MWD  surveys a correction can be calculated for the MWD. This correction is then assumed as valid  for the rest of the tangent section allowing to have a near gyro accuracy for the whole section,  therefore reducing the ellipse of uncertainty (EOU) size.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Was an In Hole Referencing (IHR) correction applied to the inclination and/or azimuth values?   Values are ""true"" (or ""1"") and ""false"" (or ""0""). In-Hole Referencing essentially involves comparing gyro surveys to MWD surveys in a tangent  section of a well. Once a small part of a tangent section has been drilled and surveyed using an  MWD tool, then an open hole (OH) gyro is run. By comparing the Gyro surveys to the MWD  surveys a correction can be calculated for the MWD. This correction is then assumed as valid  for the rest of the tangent section allowing to have a near gyro accuracy for the whole section,  therefore reducing the ellipse of uncertainty (EOU) size.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InHoleRefCorUsed", DataType="boolean")]
        public bool InHoleRefCorUsed {
            get {
                return this.inHoleRefCorUsedField;
            }
            set {
                this.inHoleRefCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InHoleRefCorUsedSpecified {
            get {
                return this.inHoleRefCorUsedFieldSpecified;
            }
            set {
                this.inHoleRefCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was an Axial Magnetic Interference (AMI) correction applied to the azimuth value?   Values are "true" (or "1") and "false" (or "0"). Most of the BHAs used to drill wells include an MWD tool. An MWD is a magnetic survey tool and as  such suffer from magnetic interferences from a wide variety of sources. Magnetic interferences can be  categorized into axial and radial type interferences.  Axial interferences are mainly the result of magnetic poles from the drill string steel components  located below and above the MWD tool. Radial interferences are numerous.  Therefore, there is a risk that magXAxialCorUsed includes both Axial and radial corrections.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Was an Axial Magnetic Interference (AMI) correction applied to the azimuth value?   Values are ""true"" (or ""1"") and ""false"" (or ""0""). Most of the BHAs used to drill wells include an MWD tool. An MWD is a magnetic survey tool and as  such suffer from magnetic interferences from a wide variety of sources. Magnetic interferences can be  categorized into axial and radial type interferences.  Axial interferences are mainly the result of magnetic poles from the drill string steel components  located below and above the MWD tool. Radial interferences are numerous.  Therefore, there is a risk that magXAxialCorUsed includes both Axial and radial corrections.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxialMagInterferenceCorUsed", DataType="boolean")]
        public bool AxialMagInterferenceCorUsed {
            get {
                return this.axialMagInterferenceCorUsedField;
            }
            set {
                this.axialMagInterferenceCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AxialMagInterferenceCorUsedSpecified {
            get {
                return this.axialMagInterferenceCorUsedFieldSpecified;
            }
            set {
                this.axialMagInterferenceCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>WWas a Cosag Correction applied to the azimuth values?   Values are "true" (or "1") and "false" (or "0"). The BHA Sag Correction is the same as the Sag Correction except it includes the horizontal  misalignment (Cosag).</summary>
        [System.ComponentModel.DescriptionAttribute("WWas a Cosag Correction applied to the azimuth values?   Values are \"true\" (or \"1" +
            "\") and \"false\" (or \"0\"). The BHA Sag Correction is the same as the Sag Correctio" +
            "n except it includes the horizontal  misalignment (Cosag).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CosagCorUsed", DataType="boolean")]
        public bool CosagCorUsed {
            get {
                return this.cosagCorUsedField;
            }
            set {
                this.cosagCorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CosagCorUsedSpecified {
            get {
                return this.cosagCorUsedFieldSpecified;
            }
            set {
                this.cosagCorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was a correction applied to the survey due to a  Multi-Station Analysis process?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Was a correction applied to the survey due to a  Multi-Station Analysis process? " +
            "  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MSACorUsed", DataType="boolean")]
        public bool MSACorUsed {
            get {
                return this.mSACorUsedField;
            }
            set {
                this.mSACorUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MSACorUsedSpecified {
            get {
                return this.mSACorUsedFieldSpecified;
            }
            set {
                this.mSACorUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gravitational field theoretical/reference value.</summary>
        [System.ComponentModel.DescriptionAttribute("Gravitational field theoretical/reference value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GravTotalFieldReference", DataType="LinearAccelerationMeasure")]
        public LinearAccelerationMeasure GravTotalFieldReference {
            get {
                return this.gravTotalFieldReferenceField;
            }
            set {
                this.gravTotalFieldReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Geomagnetic field theoretical/reference value.</summary>
        [System.ComponentModel.DescriptionAttribute("Geomagnetic field theoretical/reference value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagTotalFieldReference", DataType="MagneticFluxDensityMeasure")]
        public MagneticFluxDensityMeasure MagTotalFieldReference {
            get {
                return this.magTotalFieldReferenceField;
            }
            set {
                this.magTotalFieldReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Magnetic dip angle theoretical/reference value.</summary>
        [System.ComponentModel.DescriptionAttribute("Magnetic dip angle theoretical/reference value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagDipAngleReference", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure MagDipAngleReference {
            get {
                return this.magDipAngleReferenceField;
            }
            set {
                this.magDipAngleReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Geomagnetic model used.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Geomagnetic model used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagModelUsed", DataType="String64")]
        public string MagModelUsed {
            get {
                return this.magModelUsedField;
            }
            set {
                this.magModelUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Current valid interval for the geomagnetic model used.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Current valid interval for the geomagnetic model used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagModelValid", DataType="String64")]
        public string MagModelValid {
            get {
                return this.magModelValidField;
            }
            set {
                this.magModelValidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gravitational model used.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Gravitational model used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeoModelUsed", DataType="String64")]
        public string GeoModelUsed {
            get {
                return this.geoModelUsedField;
            }
            set {
                this.geoModelUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Status of the station.</summary>
        [System.ComponentModel.DescriptionAttribute("Status of the station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusTrajStation", DataType="TrajStationStatus")]
        public TrajStationStatus StatusTrajStation {
            get {
                return this.statusTrajStationField;
            }
            set {
                this.statusTrajStationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusTrajStationSpecified {
            get {
                return this.statusTrajStationFieldSpecified;
            }
            set {
                this.statusTrajStationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Valid", DataType="StnTrajValid")]
        public StnTrajValid Valid {
            get {
                return this.validField;
            }
            set {
                this.validField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MatrixCov", DataType="StnTrajMatrixCov")]
        public StnTrajMatrixCov MatrixCov {
            get {
                return this.matrixCovField;
            }
            set {
                this.matrixCovField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Location")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Location", DataType="AbstractWellLocation")]
        public AbstractWellLocation[] Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SourceStation", DataType="RefWellboreTrajectoryStation")]
        public RefWellboreTrajectoryStation SourceStation {
            get {
                return this.sourceStationField;
            }
            set {
                this.sourceStationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RawData", DataType="StnTrajRawData")]
        public StnTrajRawData RawData {
            get {
                return this.rawDataField;
            }
            set {
                this.rawDataField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CorUsed", DataType="StnTrajCorUsed")]
        public StnTrajCorUsed CorUsed {
            get {
                return this.corUsedField;
            }
            set {
                this.corUsedField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IscwsaToolErrorModel", DataType="DataObjectReference")]
        public DataObjectReference IscwsaToolErrorModel {
            get {
                return this.iscwsaToolErrorModelField;
            }
            set {
                this.iscwsaToolErrorModelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for an instance of a trajectory station.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for an instance of a trajectory station.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum TrajStationType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("azimuth on plane")]
        azimuthonplane,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate to delta-MD")]
        buildratetodeltaMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate to INCL")]
        buildratetoINCL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate to MD")]
        buildratetoMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate and turnrate to AZI")]
        buildrateandturnratetoAZI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate and turnrate to delta-MD")]
        buildrateandturnratetodeltaMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate and turnrate to INCL")]
        buildrateandturnratetoINCL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate and turnrate to INCL and AZI")]
        buildrateandturnratetoINCLandAZI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate and turnrate to MD")]
        buildrateandturnratetoMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate and turnrate to TVD")]
        buildrateandturnratetoTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("buildrate TVD")]
        buildrateTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing MD")]
        casingMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing TVD")]
        casingTVD,
        
        /// <remarks/>
        DLS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS to AZI and MD")]
        DLStoAZIandMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS to AZI-TVD")]
        DLStoAZITVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS to INCL")]
        DLStoINCL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS to INCL and AZI")]
        DLStoINCLandAZI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS to INCL and MD")]
        DLStoINCLandMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS to INCL and TVD")]
        DLStoINCLandTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS to NS")]
        DLStoNS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS and toolface to AZI")]
        DLSandtoolfacetoAZI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS and toolface to delta-MD")]
        DLSandtoolfacetodeltaMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS and toolface to INCL")]
        DLSandtoolfacetoINCL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS and toolface to INCL-AZI")]
        DLSandtoolfacetoINCLAZI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS and toolface to MD")]
        DLSandtoolfacetoMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DLS and toolface to TVD")]
        DLSandtoolfacetoTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation MD")]
        formationMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation TVD")]
        formationTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hold to delta-MD")]
        holdtodeltaMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hold to MD")]
        holdtoMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hold to TVD")]
        holdtoTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("INCL AZI and TVD")]
        INCLAZIandTVD,
        
        /// <remarks/>
        interpolated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("marker MD")]
        markerMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("marker TVD")]
        markerTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MD and INCL")]
        MDandINCL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MD INCL and AZI")]
        MDINCLandAZI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N E and TVD")]
        NEandTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("NS EW and TVD")]
        NSEWandTVD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("target center")]
        targetcenter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("target offset")]
        targetoffset,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tie in point")]
        tieinpoint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("turnrate to AZI")]
        turnratetoAZI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("turnrate to delta-MD")]
        turnratetodeltaMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("turnrate to MD")]
        turnratetoMD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("turnrate to TVD")]
        turnratetoTVD,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum TypeSurveyTool {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gyroscopic inertial")]
        gyroscopicinertial,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gyroscopic MWD")]
        gyroscopicMWD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gyroscopic north seeking")]
        gyroscopicnorthseeking,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic multiple-shot")]
        magneticmultipleshot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic MWD")]
        magneticMWD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic single-shot")]
        magneticsingleshot,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum TrajStnCalcAlgorithm {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("average angle")]
        averageangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("balanced tangential")]
        balancedtangential,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("constant tool face")]
        constanttoolface,
        
        /// <remarks/>
        custom,
        
        /// <remarks/>
        inertial,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("minimum curvature")]
        minimumcurvature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radius of curvature")]
        radiusofcurvature,
        
        /// <remarks/>
        tangential,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AnglePerLengthMeasure {
        
        private AnglePerLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="AnglePerLengthUom")]
        public AnglePerLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AnglePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dega/ft")]
        Item001degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/ft")]
        Item130degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/m")]
        Item130degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/ft")]
        degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/m")]
        degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft")]
        radft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m")]
        radm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/ft")]
        revft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/m")]
        revm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum TrajStationStatus {
        
        /// <remarks/>
        open,
        
        /// <remarks/>
        rejected,
        
        /// <remarks/>
        position,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedWellLocation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticWellLocation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractWellLocation {
        
        private bool originalField;
        
        private bool originalFieldSpecified;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Flag indicating (if that Is this pair of values the original data given for the location? Values are "true" or "1". Or, if the pair of values was calculated from an original pair of values, set to "false" (or "0") or leave blank.</summary>
        [System.ComponentModel.DescriptionAttribute("Flag indicating (if that Is this pair of values the original data given for the l" +
            "ocation? Values are \"true\" or \"1\". Or, if the pair of values was calculated from" +
            " an original pair of values, set to \"false\" (or \"0\") or leave blank.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Original", DataType="boolean")]
        public bool Original {
            get {
                return this.originalField;
            }
            set {
                this.originalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OriginalSpecified {
            get {
                return this.originalFieldSpecified;
            }
            set {
                this.originalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment, generally given to help the reader interpret the coordinates if the CRS and the chosen pair do not make them clear.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A comment, generally given to help the reader interpret the coordinates if the CR" +
            "S and the chosen pair do not make them clear.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for a well location.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for a well location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ProjectedWellLocation : AbstractWellLocation {
        
        private double coordinate1Field;
        
        private double coordinate2Field;
        
        private AbstractProjectedCrs crsField;
        
        /// <remarks/>
        /// <summary>The first coordinate based on a projected coordinate reference system.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The first coordinate based on a projected coordinate reference system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coordinate1", DataType="double")]
        public double Coordinate1 {
            get {
                return this.coordinate1Field;
            }
            set {
                this.coordinate1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The second coordinate based on a projected coordinate reference system.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The second coordinate based on a projected coordinate reference system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coordinate2", DataType="double")]
        public double Coordinate2 {
            get {
                return this.coordinate2Field;
            }
            set {
                this.coordinate2Field = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Crs", DataType="AbstractProjectedCrs")]
        public AbstractProjectedCrs Crs {
            get {
                return this.crsField;
            }
            set {
                this.crsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedEpsgCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractProjectedCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedLocalAuthorityCrs : AbstractProjectedCrs {
        
        private AuthorityQualifiedName localAuthorityCrsNameField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalAuthorityCrsName", DataType="AuthorityQualifiedName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return this.localAuthorityCrsNameField;
            }
            set {
                this.localAuthorityCrsNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class AuthorityQualifiedName {
        
        private string authorityField;
        
        private string codeField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="String64")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("code", DataType="String64")]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedGmlCrs : AbstractProjectedCrs {
        
        private ProjectedCRSType gmlProjectedCrsDefinitionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GmlProjectedCrsDefinition", DataType="ProjectedCRSType")]
        public ProjectedCRSType GmlProjectedCrsDefinition {
            get {
                return this.gmlProjectedCrsDefinitionField;
            }
            set {
                this.gmlProjectedCrsDefinitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class ProjectedCRSType : AbstractGeneralDerivedCRSType {
        
        private GeodeticCRSPropertyType itemField;
        
        private CartesianCSPropertyType cartesianCSField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("baseGeodeticCRS")]
        public GeodeticCRSPropertyType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public CartesianCSPropertyType cartesianCS {
            get {
                return this.cartesianCSField;
            }
            set {
                this.cartesianCSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("baseGeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticCRSPropertyType {
        
        private GeodeticCRSType geodeticCRSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public GeodeticCRSType GeodeticCRS {
            get {
                return this.geodeticCRSField;
            }
            set {
                this.geodeticCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticCRSType : AbstractCRSType {
        
        private object itemField;
        
        private GeodeticDatumPropertyType geodeticDatumField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("cartesianCS", typeof(CartesianCSPropertyType))]
        [System.Xml.Serialization.XmlElementAttribute("ellipsoidalCS", typeof(EllipsoidalCSPropertyType))]
        [System.Xml.Serialization.XmlElementAttribute("sphericalCS", typeof(SphericalCSPropertyType))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public GeodeticDatumPropertyType geodeticDatum {
            get {
                return this.geodeticDatumField;
            }
            set {
                this.geodeticDatumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("cartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CartesianCSPropertyType {
        
        private CartesianCSType cartesianCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CartesianCSType CartesianCS {
            get {
                return this.cartesianCSField;
            }
            set {
                this.cartesianCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CartesianCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCoordinateSystem", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCoordinateSystemType : IdentifiedObjectType {
        
        private CoordinateSystemAxisPropertyType[] axisField;
        
        private AggregationType aggregationTypeField;
        
        private bool aggregationTypeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("axis")]
        public CoordinateSystemAxisPropertyType[] axis {
            get {
                return this.axisField;
            }
            set {
                this.axisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("aggregationType", DataType="AggregationType")]
        public AggregationType aggregationType {
            get {
                return this.aggregationTypeField;
            }
            set {
                this.aggregationTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool aggregationTypeSpecified {
            get {
                return this.aggregationTypeFieldSpecified;
            }
            set {
                this.aggregationTypeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("axis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CoordinateSystemAxisPropertyType {
        
        private CoordinateSystemAxisType coordinateSystemAxisField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CoordinateSystemAxisType CoordinateSystemAxis {
            get {
                return this.coordinateSystemAxisField;
            }
            set {
                this.coordinateSystemAxisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CoordinateSystemAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CoordinateSystemAxisType : IdentifiedObjectType {
        
        private CodeType axisAbbrevField;
        
        private CodeWithAuthorityType axisDirectionField;
        
        private double minimumValueField;
        
        private bool minimumValueFieldSpecified;
        
        private double maximumValueField;
        
        private bool maximumValueFieldSpecified;
        
        private CodeWithAuthorityType rangeMeaningField;
        
        /// <remarks/>
        public CodeType axisAbbrev {
            get {
                return this.axisAbbrevField;
            }
            set {
                this.axisAbbrevField = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType axisDirection {
            get {
                return this.axisDirectionField;
            }
            set {
                this.axisDirectionField = value;
            }
        }
        
        /// <remarks/>
        public double minimumValue {
            get {
                return this.minimumValueField;
            }
            set {
                this.minimumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minimumValueSpecified {
            get {
                return this.minimumValueFieldSpecified;
            }
            set {
                this.minimumValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double maximumValue {
            get {
                return this.maximumValueField;
            }
            set {
                this.maximumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maximumValueSpecified {
            get {
                return this.maximumValueFieldSpecified;
            }
            set {
                this.maximumValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType rangeMeaning {
            get {
                return this.rangeMeaningField;
            }
            set {
                this.rangeMeaningField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeWithAuthorityType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("name", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CodeType {
        
        private string codeSpaceField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeSpace", DataType="anyURI")]
        public string codeSpace {
            get {
                return this.codeSpaceField;
            }
            set {
                this.codeSpaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("identifier", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CodeWithAuthorityType : CodeType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public abstract partial class IdentifiedObjectType : DefinitionType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Definition", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class DefinitionType : DefinitionBaseType {
        
        private string remarksField;
        
        /// <remarks/>
        public string remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class DefinitionBaseType : AbstractGMLType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimeObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGML", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGMLType {
        
        private StringOrRefType descriptionField;
        
        private ReferenceType descriptionReferenceField;
        
        private CodeWithAuthorityType identifierField;
        
        private CodeType[] nameField;
        
        private string idField;
        
        /// <remarks/>
        public StringOrRefType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType descriptionReference {
            get {
                return this.descriptionReferenceField;
            }
            set {
                this.descriptionReferenceField = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("name")]
        public CodeType[] name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("description", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class StringOrRefType {
        
        private string nilReasonField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("descriptionReference", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class ReferenceType {
        
        private bool ownsField;
        
        private string nilReasonField;
        
        public ReferenceType() {
            this.ownsField = false;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("owns", DataType="boolean")]
        public bool owns {
            get {
                return this.ownsField;
            }
            set {
                this.ownsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimeObject", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractTimeObjectType : AbstractGMLType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractTimePrimitiveType : AbstractTimeObjectType {
        
        private RelatedTimeType[] relatedTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("relatedTime")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("relatedTime", DataType="RelatedTimeType")]
        public RelatedTimeType[] relatedTime {
            get {
                return this.relatedTimeField;
            }
            set {
                this.relatedTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class RelatedTimeType : TimePrimitivePropertyType {
        
        private RelatedTimeTypeRelativePosition relativePositionField;
        
        private bool relativePositionFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RelatedTimeTypeRelativePosition relativePosition {
            get {
                return this.relativePositionField;
            }
            set {
                this.relativePositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool relativePositionSpecified {
            get {
                return this.relativePositionFieldSpecified;
            }
            set {
                this.relativePositionFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    public enum RelatedTimeTypeRelativePosition {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
        
        /// <remarks/>
        Begins,
        
        /// <remarks/>
        Ends,
        
        /// <remarks/>
        During,
        
        /// <remarks/>
        Equals,
        
        /// <remarks/>
        Contains,
        
        /// <remarks/>
        Overlaps,
        
        /// <remarks/>
        Meets,
        
        /// <remarks/>
        OverlappedBy,
        
        /// <remarks/>
        MetBy,
        
        /// <remarks/>
        BegunBy,
        
        /// <remarks/>
        EndedBy,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedTimeType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class TimePrimitivePropertyType {
        
        private AbstractTimePrimitiveType abstractTimePrimitiveField;
        
        private string nilReasonField;
        
        private bool ownsField;
        
        public TimePrimitivePropertyType() {
            this.ownsField = false;
        }
        
        /// <remarks/>
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return this.abstractTimePrimitiveField;
            }
            set {
                this.abstractTimePrimitiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("owns", DataType="boolean")]
        public bool owns {
            get {
                return this.ownsField;
            }
            set {
                this.ownsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOperation", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCoordinateOperationType : IdentifiedObjectType {
        
        private domainOfValidity domainOfValidityField;
        
        private string[] scopeField;
        
        private string operationVersionField;
        
        private coordinateOperationAccuracy[] coordinateOperationAccuracyField;
        
        private CRSPropertyType sourceCRSField;
        
        private CRSPropertyType targetCRSField;
        
        /// <remarks/>
        public domainOfValidity domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
        
        /// <remarks/>
        public string operationVersion {
            get {
                return this.operationVersionField;
            }
            set {
                this.operationVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("coordinateOperationAccuracy")]
        public coordinateOperationAccuracy[] coordinateOperationAccuracy {
            get {
                return this.coordinateOperationAccuracyField;
            }
            set {
                this.coordinateOperationAccuracyField = value;
            }
        }
        
        /// <remarks/>
        public CRSPropertyType sourceCRS {
            get {
                return this.sourceCRSField;
            }
            set {
                this.sourceCRSField = value;
            }
        }
        
        /// <remarks/>
        public CRSPropertyType targetCRS {
            get {
                return this.targetCRSField;
            }
            set {
                this.targetCRSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class domainOfValidity {
        
        private EX_Extent_Type eX_ExtentField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
        public EX_Extent_Type EX_Extent {
            get {
                return this.eX_ExtentField;
            }
            set {
                this.eX_ExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_Extent_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType descriptionField;
        
        private EX_GeographicExtent_PropertyType[] geographicElementField;
        
        private EX_TemporalExtent_PropertyType[] temporalElementField;
        
        private EX_VerticalExtent_PropertyType[] verticalElementField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("description", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("geographicElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("geographicElement", DataType="EX_GeographicExtent_PropertyType")]
        public EX_GeographicExtent_PropertyType[] geographicElement {
            get {
                return this.geographicElementField;
            }
            set {
                this.geographicElementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("temporalElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("temporalElement", DataType="EX_TemporalExtent_PropertyType")]
        public EX_TemporalExtent_PropertyType[] temporalElement {
            get {
                return this.temporalElementField;
            }
            set {
                this.temporalElementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("verticalElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("verticalElement", DataType="EX_VerticalExtent_PropertyType")]
        public EX_VerticalExtent_PropertyType[] verticalElement {
            get {
                return this.verticalElementField;
            }
            set {
                this.verticalElementField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class CharacterString_PropertyType {
        
        private string characterStringField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public string CharacterString {
            get {
                return this.characterStringField;
            }
            set {
                this.characterStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_GeographicExtent_PropertyType {
        
        private AbstractEX_GeographicExtent_Type abstractEX_GeographicExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtent {
            get {
                return this.abstractEX_GeographicExtentField;
            }
            set {
                this.abstractEX_GeographicExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractEX_GeographicExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractEX_GeographicExtent_Type : AbstractObject_Type {
        
        private Boolean_PropertyType extentTypeCodeField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("extentTypeCode", DataType="Boolean_PropertyType")]
        public Boolean_PropertyType extentTypeCode {
            get {
                return this.extentTypeCodeField;
            }
            set {
                this.extentTypeCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Boolean_PropertyType {
        
        private bool booleanField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public bool Boolean {
            get {
                return this.booleanField;
            }
            set {
                this.booleanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Result_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Series_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_OnlineResource_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Address_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Telephone_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Contact_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_ResponsibleParty_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Date_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Citation_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MD_Identifier_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Element_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_VerticalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_TemporalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractEX_GeographicExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_Extent_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public abstract partial class AbstractObject_Type {
        
        private string idField;
        
        private string uuidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("id", DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="string")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Result", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_Result_Type : AbstractObject_Type {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Series", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Series_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType nameField;
        
        private CharacterString_PropertyType issueIdentificationField;
        
        private CharacterString_PropertyType pageField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("issueIdentification", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType issueIdentification {
            get {
                return this.issueIdentificationField;
            }
            set {
                this.issueIdentificationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("page", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType page {
            get {
                return this.pageField;
            }
            set {
                this.pageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_OnlineResource", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_OnlineResource_Type : AbstractObject_Type {
        
        private URL_PropertyType linkageField;
        
        private CharacterString_PropertyType protocolField;
        
        private CharacterString_PropertyType applicationProfileField;
        
        private CharacterString_PropertyType nameField;
        
        private CharacterString_PropertyType descriptionField;
        
        private CI_OnLineFunctionCode_PropertyType functionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("linkage", DataType="URL_PropertyType")]
        public URL_PropertyType linkage {
            get {
                return this.linkageField;
            }
            set {
                this.linkageField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("protocol", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("applicationProfile", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType applicationProfile {
            get {
                return this.applicationProfileField;
            }
            set {
                this.applicationProfileField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("description", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("function", DataType="CI_OnLineFunctionCode_PropertyType")]
        public CI_OnLineFunctionCode_PropertyType function {
            get {
                return this.functionField;
            }
            set {
                this.functionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class URL_PropertyType {
        
        private string uRLField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_OnLineFunctionCode_PropertyType {
        
        private CodeListValue_Type cI_OnLineFunctionCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_OnLineFunctionCode {
            get {
                return this.cI_OnLineFunctionCodeField;
            }
            set {
                this.cI_OnLineFunctionCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    [System.Xml.Serialization.XmlRootAttribute("CI_DateTypeCode", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CodeListValue_Type {
        
        private string codeListField;
        
        private string codeListValueField;
        
        private string codeSpaceField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeList", DataType="anyURI")]
        public string codeList {
            get {
                return this.codeListField;
            }
            set {
                this.codeListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeListValue", DataType="anyURI")]
        public string codeListValue {
            get {
                return this.codeListValueField;
            }
            set {
                this.codeListValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeSpace", DataType="anyURI")]
        public string codeSpace {
            get {
                return this.codeSpaceField;
            }
            set {
                this.codeSpaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Address", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Address_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] deliveryPointField;
        
        private CharacterString_PropertyType cityField;
        
        private CharacterString_PropertyType administrativeAreaField;
        
        private CharacterString_PropertyType postalCodeField;
        
        private CharacterString_PropertyType countryField;
        
        private CharacterString_PropertyType[] electronicMailAddressField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("deliveryPoint")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("deliveryPoint", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] deliveryPoint {
            get {
                return this.deliveryPointField;
            }
            set {
                this.deliveryPointField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("city", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("administrativeArea", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType administrativeArea {
            get {
                return this.administrativeAreaField;
            }
            set {
                this.administrativeAreaField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("postalCode", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType postalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("country", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("electronicMailAddress")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("electronicMailAddress", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] electronicMailAddress {
            get {
                return this.electronicMailAddressField;
            }
            set {
                this.electronicMailAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Telephone", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Telephone_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] voiceField;
        
        private CharacterString_PropertyType[] facsimileField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("voice")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("voice", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] voice {
            get {
                return this.voiceField;
            }
            set {
                this.voiceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("facsimile")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("facsimile", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] facsimile {
            get {
                return this.facsimileField;
            }
            set {
                this.facsimileField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Contact", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Contact_Type : AbstractObject_Type {
        
        private CI_Telephone_PropertyType phoneField;
        
        private CI_Address_PropertyType addressField;
        
        private CI_OnlineResource_PropertyType onlineResourceField;
        
        private CharacterString_PropertyType hoursOfServiceField;
        
        private CharacterString_PropertyType contactInstructionsField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("phone", DataType="CI_Telephone_PropertyType")]
        public CI_Telephone_PropertyType phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("address", DataType="CI_Address_PropertyType")]
        public CI_Address_PropertyType address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("onlineResource", DataType="CI_OnlineResource_PropertyType")]
        public CI_OnlineResource_PropertyType onlineResource {
            get {
                return this.onlineResourceField;
            }
            set {
                this.onlineResourceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("hoursOfService", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType hoursOfService {
            get {
                return this.hoursOfServiceField;
            }
            set {
                this.hoursOfServiceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("contactInstructions", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType contactInstructions {
            get {
                return this.contactInstructionsField;
            }
            set {
                this.contactInstructionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Telephone_PropertyType {
        
        private CI_Telephone_Type cI_TelephoneField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Telephone_Type CI_Telephone {
            get {
                return this.cI_TelephoneField;
            }
            set {
                this.cI_TelephoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Address_PropertyType {
        
        private CI_Address_Type cI_AddressField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Address_Type CI_Address {
            get {
                return this.cI_AddressField;
            }
            set {
                this.cI_AddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_OnlineResource_PropertyType {
        
        private CI_OnlineResource_Type cI_OnlineResourceField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_OnlineResource_Type CI_OnlineResource {
            get {
                return this.cI_OnlineResourceField;
            }
            set {
                this.cI_OnlineResourceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_ResponsibleParty", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_ResponsibleParty_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType individualNameField;
        
        private CharacterString_PropertyType organisationNameField;
        
        private CharacterString_PropertyType positionNameField;
        
        private CI_Contact_PropertyType contactInfoField;
        
        private CI_RoleCode_PropertyType roleField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("individualName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType individualName {
            get {
                return this.individualNameField;
            }
            set {
                this.individualNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("organisationName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType organisationName {
            get {
                return this.organisationNameField;
            }
            set {
                this.organisationNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("positionName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType positionName {
            get {
                return this.positionNameField;
            }
            set {
                this.positionNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("contactInfo", DataType="CI_Contact_PropertyType")]
        public CI_Contact_PropertyType contactInfo {
            get {
                return this.contactInfoField;
            }
            set {
                this.contactInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("role", DataType="CI_RoleCode_PropertyType")]
        public CI_RoleCode_PropertyType role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Contact_PropertyType {
        
        private CI_Contact_Type cI_ContactField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Contact_Type CI_Contact {
            get {
                return this.cI_ContactField;
            }
            set {
                this.cI_ContactField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_RoleCode_PropertyType {
        
        private CodeListValue_Type cI_RoleCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_RoleCode {
            get {
                return this.cI_RoleCodeField;
            }
            set {
                this.cI_RoleCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Date", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Date_Type : AbstractObject_Type {
        
        private Date_PropertyType dateField;
        
        private CI_DateTypeCode_PropertyType dateTypeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("date", DataType="Date_PropertyType")]
        public Date_PropertyType date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dateType", DataType="CI_DateTypeCode_PropertyType")]
        public CI_DateTypeCode_PropertyType dateType {
            get {
                return this.dateTypeField;
            }
            set {
                this.dateTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Date_PropertyType {
        
        private object itemField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Date", typeof(string), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("DateTime", typeof(System.DateTime))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_DateTypeCode_PropertyType {
        
        private CodeListValue_Type cI_DateTypeCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_DateTypeCode {
            get {
                return this.cI_DateTypeCodeField;
            }
            set {
                this.cI_DateTypeCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Citation", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Citation_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType titleField;
        
        private CharacterString_PropertyType[] alternateTitleField;
        
        private CI_Date_PropertyType[] dateField;
        
        private CharacterString_PropertyType editionField;
        
        private Date_PropertyType editionDateField;
        
        private MD_Identifier_PropertyType[] identifierField;
        
        private CI_ResponsibleParty_PropertyType[] citedResponsiblePartyField;
        
        private CI_PresentationFormCode_PropertyType[] presentationFormField;
        
        private CI_Series_PropertyType seriesField;
        
        private CharacterString_PropertyType otherCitationDetailsField;
        
        private CharacterString_PropertyType collectiveTitleField;
        
        private CharacterString_PropertyType iSBNField;
        
        private CharacterString_PropertyType iSSNField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("title", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("alternateTitle")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("alternateTitle", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] alternateTitle {
            get {
                return this.alternateTitleField;
            }
            set {
                this.alternateTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("date")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("date", DataType="CI_Date_PropertyType")]
        public CI_Date_PropertyType[] date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("edition", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType edition {
            get {
                return this.editionField;
            }
            set {
                this.editionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("editionDate", DataType="Date_PropertyType")]
        public Date_PropertyType editionDate {
            get {
                return this.editionDateField;
            }
            set {
                this.editionDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("identifier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("identifier", DataType="MD_Identifier_PropertyType")]
        public MD_Identifier_PropertyType[] identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("citedResponsibleParty")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("citedResponsibleParty", DataType="CI_ResponsibleParty_PropertyType")]
        public CI_ResponsibleParty_PropertyType[] citedResponsibleParty {
            get {
                return this.citedResponsiblePartyField;
            }
            set {
                this.citedResponsiblePartyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("presentationForm")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("presentationForm", DataType="CI_PresentationFormCode_PropertyType")]
        public CI_PresentationFormCode_PropertyType[] presentationForm {
            get {
                return this.presentationFormField;
            }
            set {
                this.presentationFormField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("series", DataType="CI_Series_PropertyType")]
        public CI_Series_PropertyType series {
            get {
                return this.seriesField;
            }
            set {
                this.seriesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("otherCitationDetails", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType otherCitationDetails {
            get {
                return this.otherCitationDetailsField;
            }
            set {
                this.otherCitationDetailsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("collectiveTitle", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType collectiveTitle {
            get {
                return this.collectiveTitleField;
            }
            set {
                this.collectiveTitleField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ISBN", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType ISBN {
            get {
                return this.iSBNField;
            }
            set {
                this.iSBNField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ISSN", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType ISSN {
            get {
                return this.iSSNField;
            }
            set {
                this.iSSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Date_PropertyType {
        
        private CI_Date_Type cI_DateField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Date_Type CI_Date {
            get {
                return this.cI_DateField;
            }
            set {
                this.cI_DateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class MD_Identifier_PropertyType {
        
        private MD_Identifier_Type mD_IdentifierField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public MD_Identifier_Type MD_Identifier {
            get {
                return this.mD_IdentifierField;
            }
            set {
                this.mD_IdentifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("MD_Identifier", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class MD_Identifier_Type : AbstractObject_Type {
        
        private CI_Citation_PropertyType authorityField;
        
        private CharacterString_PropertyType codeField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="CI_Citation_PropertyType")]
        public CI_Citation_PropertyType authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("code", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Citation_PropertyType {
        
        private CI_Citation_Type cI_CitationField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Citation_Type CI_Citation {
            get {
                return this.cI_CitationField;
            }
            set {
                this.cI_CitationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_ResponsibleParty_PropertyType {
        
        private CI_ResponsibleParty_Type cI_ResponsiblePartyField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_ResponsibleParty_Type CI_ResponsibleParty {
            get {
                return this.cI_ResponsiblePartyField;
            }
            set {
                this.cI_ResponsiblePartyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_PresentationFormCode_PropertyType {
        
        private CodeListValue_Type cI_PresentationFormCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_PresentationFormCode {
            get {
                return this.cI_PresentationFormCodeField;
            }
            set {
                this.cI_PresentationFormCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Series_PropertyType {
        
        private CI_Series_Type cI_SeriesField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Series_Type CI_Series {
            get {
                return this.cI_SeriesField;
            }
            set {
                this.cI_SeriesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Element", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_Element_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] nameOfMeasureField;
        
        private MD_Identifier_PropertyType measureIdentificationField;
        
        private CharacterString_PropertyType measureDescriptionField;
        
        private DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodTypeField;
        
        private CharacterString_PropertyType evaluationMethodDescriptionField;
        
        private CI_Citation_PropertyType evaluationProcedureField;
        
        private DateTime_PropertyType[] dateTimeField;
        
        private DQ_Result_PropertyType[] resultField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("nameOfMeasure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nameOfMeasure", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] nameOfMeasure {
            get {
                return this.nameOfMeasureField;
            }
            set {
                this.nameOfMeasureField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("measureIdentification", DataType="MD_Identifier_PropertyType")]
        public MD_Identifier_PropertyType measureIdentification {
            get {
                return this.measureIdentificationField;
            }
            set {
                this.measureIdentificationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("measureDescription", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType measureDescription {
            get {
                return this.measureDescriptionField;
            }
            set {
                this.measureDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationMethodType", DataType="DQ_EvaluationMethodTypeCode_PropertyType")]
        public DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodType {
            get {
                return this.evaluationMethodTypeField;
            }
            set {
                this.evaluationMethodTypeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationMethodDescription", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType evaluationMethodDescription {
            get {
                return this.evaluationMethodDescriptionField;
            }
            set {
                this.evaluationMethodDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationProcedure", DataType="CI_Citation_PropertyType")]
        public CI_Citation_PropertyType evaluationProcedure {
            get {
                return this.evaluationProcedureField;
            }
            set {
                this.evaluationProcedureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("dateTime")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dateTime", DataType="DateTime_PropertyType")]
        public DateTime_PropertyType[] dateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("result")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("result", DataType="DQ_Result_PropertyType")]
        public DQ_Result_PropertyType[] result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class DQ_EvaluationMethodTypeCode_PropertyType {
        
        private CodeListValue_Type dQ_EvaluationMethodTypeCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type DQ_EvaluationMethodTypeCode {
            get {
                return this.dQ_EvaluationMethodTypeCodeField;
            }
            set {
                this.dQ_EvaluationMethodTypeCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class DateTime_PropertyType {
        
        private System.DateTime dateTimeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public System.DateTime DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class DQ_Result_PropertyType {
        
        private AbstractDQ_Result_Type abstractDQ_ResultField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractDQ_Result_Type AbstractDQ_Result {
            get {
                return this.abstractDQ_ResultField;
            }
            set {
                this.abstractDQ_ResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_VerticalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_VerticalExtent_Type : AbstractObject_Type {
        
        private Real_PropertyType minimumValueField;
        
        private Real_PropertyType maximumValueField;
        
        private SC_CRS_PropertyType verticalCRSField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("minimumValue", DataType="Real_PropertyType")]
        public Real_PropertyType minimumValue {
            get {
                return this.minimumValueField;
            }
            set {
                this.minimumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("maximumValue", DataType="Real_PropertyType")]
        public Real_PropertyType maximumValue {
            get {
                return this.maximumValueField;
            }
            set {
                this.maximumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("verticalCRS", DataType="SC_CRS_PropertyType")]
        public SC_CRS_PropertyType verticalCRS {
            get {
                return this.verticalCRSField;
            }
            set {
                this.verticalCRSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Real_PropertyType {
        
        private double realField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public double Real {
            get {
                return this.realField;
            }
            set {
                this.realField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gsr")]
    public partial class SC_CRS_PropertyType {
        
        private AbstractCRSType abstractCRSField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractCRSType AbstractCRS {
            get {
                return this.abstractCRSField;
            }
            set {
                this.abstractCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCRSType : IdentifiedObjectType {
        
        private domainOfValidity[] domainOfValidityField;
        
        private string[] scopeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("domainOfValidity")]
        public domainOfValidity[] domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCRSType : AbstractCRSType {
        
        private VerticalCSPropertyType verticalCSField;
        
        private VerticalDatumPropertyType verticalDatumField;
        
        /// <remarks/>
        public VerticalCSPropertyType verticalCS {
            get {
                return this.verticalCSField;
            }
            set {
                this.verticalCSField = value;
            }
        }
        
        /// <remarks/>
        public VerticalDatumPropertyType verticalDatum {
            get {
                return this.verticalDatumField;
            }
            set {
                this.verticalDatumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCSPropertyType {
        
        private VerticalCSType verticalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public VerticalCSType VerticalCS {
            get {
                return this.verticalCSField;
            }
            set {
                this.verticalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalDatumPropertyType {
        
        private VerticalDatumType verticalDatumField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public VerticalDatumType VerticalDatum {
            get {
                return this.verticalDatumField;
            }
            set {
                this.verticalDatumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalDatumType : AbstractDatumType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractDatumType : IdentifiedObjectType {
        
        private domainOfValidity domainOfValidityField;
        
        private string[] scopeField;
        
        private CodeType anchorDefinitionField;
        
        private System.DateTime realizationEpochField;
        
        private bool realizationEpochFieldSpecified;
        
        /// <remarks/>
        public domainOfValidity domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
        
        /// <remarks/>
        public CodeType anchorDefinition {
            get {
                return this.anchorDefinitionField;
            }
            set {
                this.anchorDefinitionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime realizationEpoch {
            get {
                return this.realizationEpochField;
            }
            set {
                this.realizationEpochField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool realizationEpochSpecified {
            get {
                return this.realizationEpochFieldSpecified;
            }
            set {
                this.realizationEpochFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticDatumType : AbstractDatumType {
        
        private PrimeMeridianPropertyType primeMeridianField;
        
        private EllipsoidPropertyType ellipsoidField;
        
        /// <remarks/>
        public PrimeMeridianPropertyType primeMeridian {
            get {
                return this.primeMeridianField;
            }
            set {
                this.primeMeridianField = value;
            }
        }
        
        /// <remarks/>
        public EllipsoidPropertyType ellipsoid {
            get {
                return this.ellipsoidField;
            }
            set {
                this.ellipsoidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("primeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class PrimeMeridianPropertyType {
        
        private PrimeMeridianType primeMeridianField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public PrimeMeridianType PrimeMeridian {
            get {
                return this.primeMeridianField;
            }
            set {
                this.primeMeridianField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("PrimeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class PrimeMeridianType : IdentifiedObjectType {
        
        private AngleType greenwichLongitudeField;
        
        /// <remarks/>
        public AngleType greenwichLongitude {
            get {
                return this.greenwichLongitudeField;
            }
            set {
                this.greenwichLongitudeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("greenwichLongitude", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class AngleType : MeasureType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AngleType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("semiMajorAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class MeasureType {
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class LengthType : MeasureType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidPropertyType {
        
        private EllipsoidType ellipsoidField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EllipsoidType Ellipsoid {
            get {
                return this.ellipsoidField;
            }
            set {
                this.ellipsoidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidType : IdentifiedObjectType {
        
        private MeasureType semiMajorAxisField;
        
        private secondDefiningParameter secondDefiningParameterField;
        
        /// <remarks/>
        public MeasureType semiMajorAxis {
            get {
                return this.semiMajorAxisField;
            }
            set {
                this.semiMajorAxisField = value;
            }
        }
        
        /// <remarks/>
        public secondDefiningParameter secondDefiningParameter {
            get {
                return this.secondDefiningParameterField;
            }
            set {
                this.secondDefiningParameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class secondDefiningParameter {
        
        private SecondDefiningParameter secondDefiningParameterField;
        
        /// <remarks/>
        public SecondDefiningParameter SecondDefiningParameter {
            get {
                return this.secondDefiningParameterField;
            }
            set {
                this.secondDefiningParameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SecondDefiningParameter {
        
        private object itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("inverseFlattening", typeof(MeasureType))]
        [System.Xml.Serialization.XmlElementAttribute("isSphere", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("semiMinorAxis", typeof(LengthType))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralDerivedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGeneralDerivedCRSType : AbstractCRSType {
        
        private GeneralConversionPropertyType conversionField;
        
        /// <remarks/>
        public GeneralConversionPropertyType conversion {
            get {
                return this.conversionField;
            }
            set {
                this.conversionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("conversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeneralConversionPropertyType {
        
        private AbstractGeneralConversionType abstractGeneralConversionField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractGeneralConversionType AbstractGeneralConversion {
            get {
                return this.abstractGeneralConversionField;
            }
            set {
                this.abstractGeneralConversionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralConversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGeneralConversionType : AbstractCoordinateOperationType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_TemporalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_TemporalExtent_Type : AbstractObject_Type {
        
        private TM_Primitive_PropertyType extentField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("extent", DataType="TM_Primitive_PropertyType")]
        public TM_Primitive_PropertyType extent {
            get {
                return this.extentField;
            }
            set {
                this.extentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gts")]
    public partial class TM_Primitive_PropertyType {
        
        private AbstractTimePrimitiveType abstractTimePrimitiveField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return this.abstractTimePrimitiveField;
            }
            set {
                this.abstractTimePrimitiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_TemporalExtent_PropertyType {
        
        private EX_TemporalExtent_Type eX_TemporalExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EX_TemporalExtent_Type EX_TemporalExtent {
            get {
                return this.eX_TemporalExtentField;
            }
            set {
                this.eX_TemporalExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_VerticalExtent_PropertyType {
        
        private EX_VerticalExtent_Type eX_VerticalExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EX_VerticalExtent_Type EX_VerticalExtent {
            get {
                return this.eX_VerticalExtentField;
            }
            set {
                this.eX_VerticalExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class coordinateOperationAccuracy {
        
        private AbstractDQ_PositionalAccuracy_Type abstractDQ_PositionalAccuracyField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracy {
            get {
                return this.abstractDQ_PositionalAccuracyField;
            }
            set {
                this.abstractDQ_PositionalAccuracyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sourceCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CRSPropertyType {
        
        private AbstractCRSType abstractCRSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractCRSType AbstractCRS {
            get {
                return this.abstractCRSField;
            }
            set {
                this.abstractCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public enum AggregationType {
        
        /// <remarks/>
        set,
        
        /// <remarks/>
        bag,
        
        /// <remarks/>
        sequence,
        
        /// <remarks/>
        array,
        
        /// <remarks/>
        record,
        
        /// <remarks/>
        table,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("SphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SphericalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("EllipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidalCSPropertyType {
        
        private EllipsoidalCSType ellipsoidalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EllipsoidalCSType EllipsoidalCS {
            get {
                return this.ellipsoidalCSField;
            }
            set {
                this.ellipsoidalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SphericalCSPropertyType {
        
        private SphericalCSType sphericalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public SphericalCSType SphericalCS {
            get {
                return this.sphericalCSField;
            }
            set {
                this.sphericalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("geodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticDatumPropertyType {
        
        private GeodeticDatumType geodeticDatumField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public GeodeticDatumType GeodeticDatum {
            get {
                return this.geodeticDatumField;
            }
            set {
                this.geodeticDatumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedUnknownCrs : AbstractProjectedCrs {
        
        private string unknownField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unknown", DataType="String2000")]
        public string Unknown {
            get {
                return this.unknownField;
            }
            set {
                this.unknownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedWktCrs : AbstractProjectedCrs {
        
        private string wellKnownTextField;
        
        /// <remarks/>
        /// <summary>ISO 19162 compliant well known text of the CRS</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("ISO 19162 compliant well known text of the CRS")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellKnownText", DataType="string")]
        public string WellKnownText {
            get {
                return this.wellKnownTextField;
            }
            set {
                this.wellKnownTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedEpsgCrs : AbstractProjectedCrs {
        
        private long epsgCodeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpsgCode", DataType="PositiveLong")]
        public long EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                this.epsgCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class GeodeticWellLocation : AbstractWellLocation {
        
        private PlaneAngleMeasure latitudeField;
        
        private PlaneAngleMeasure longitudeField;
        
        private AbstractGeodeticCrs crsField;
        
        /// <remarks/>
        /// <summary>The latitude with north being positive.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The latitude with north being positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Latitude", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The longitude with east being positive.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The longitude with east being positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Longitude", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Crs", DataType="AbstractGeodeticCrs")]
        public AbstractGeodeticCrs Crs {
            get {
                return this.crsField;
            }
            set {
                this.crsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticEpsgCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticUnknownCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractGeodeticCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticWktCrs : AbstractGeodeticCrs {
        
        private string wellKnownTextField;
        
        /// <remarks/>
        /// <summary>ISO 19162 compliant well known text of the CRS</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("ISO 19162 compliant well known text of the CRS")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellKnownText", DataType="string")]
        public string WellKnownText {
            get {
                return this.wellKnownTextField;
            }
            set {
                this.wellKnownTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticGmlCrs : AbstractGeodeticCrs {
        
        private GeodeticCRSType gmlProjectedCrsDefinitionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GmlProjectedCrsDefinition", DataType="GeodeticCRSType")]
        public GeodeticCRSType GmlProjectedCrsDefinition {
            get {
                return this.gmlProjectedCrsDefinitionField;
            }
            set {
                this.gmlProjectedCrsDefinitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticEpsgCrs : AbstractGeodeticCrs {
        
        private long epsgCodeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpsgCode", DataType="PositiveLong")]
        public long EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                this.epsgCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticLocalAuthorityCrs : AbstractGeodeticCrs {
        
        private AuthorityQualifiedName localAuthorityCrsNameField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalAuthorityCrsName", DataType="AuthorityQualifiedName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return this.localAuthorityCrsNameField;
            }
            set {
                this.localAuthorityCrsNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeodeticUnknownCrs : AbstractGeodeticCrs {
        
        private string unknownField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unknown", DataType="String2000")]
        public string Unknown {
            get {
                return this.unknownField;
            }
            set {
                this.unknownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MeasureOrQuantity {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>A measure with a UOM or a quantity (without a UOM). This should not be used except in situations where the underlying class of data is captured elsewhere, e.g., in a measure class.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(32)]
        [System.ComponentModel.DescriptionAttribute("A measure with a UOM or a quantity (without a UOM). This should not be used excep" +
            "t in situations where the underlying class of data is captured elsewhere, e.g., " +
            "in a measure class.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="UomEnum")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaErrorTermValue {
        
        private string termField;
        
        private ErrorPropagationMode propField;
        
        private double biasField;
        
        private bool biasFieldSpecified;
        
        private string commentField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private MeasureOrQuantity valueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A pointer to the errorTerm represented by this value. This term must exist in the toolErrorTermSet referenced by the parent of this node. The same term may only be referenced once in the model.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the errorTerm represented by this value. This term must exist in the" +
            " toolErrorTermSet referenced by the parent of this node. The same term may only " +
            "be referenced once in the model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Term", DataType="String64")]
        public string Term {
            get {
                return this.termField;
            }
            set {
                this.termField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The propagation mode for this term in this model.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The propagation mode for this term in this model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Prop", DataType="ErrorPropagationMode")]
        public ErrorPropagationMode Prop {
            get {
                return this.propField;
            }
            set {
                this.propField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mean or expected value of the variance.</summary>
        [System.ComponentModel.DescriptionAttribute("The mean or expected value of the variance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Bias", DataType="double")]
        public double Bias {
            get {
                return this.biasField;
            }
            set {
                this.biasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BiasSpecified {
            get {
                return this.biasFieldSpecified;
            }
            set {
                this.biasFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual comment about this error term value.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual comment about this error term value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="MeasureOrQuantity")]
        public MeasureOrQuantity Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of IscwsaErrorTermValue.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of IscwsaErrorTermValue.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ErrorPropagationMode {
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        R,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        G,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaModelParameters {
        
        private ErrorModelMisalignmentMode misalignmentModeField;
        
        private PlaneAngleMeasure gyroInitializationField;
        
        private LengthMeasure gyroReinitializationDistanceField;
        
        private bool switchingField;
        
        private bool switchingFieldSpecified;
        
        private double noiseReductionFactorField;
        
        private bool noiseReductionFactorFieldSpecified;
        
        private LengthPerTimeMeasure gyroRunningSpeedField;
        
        /// <remarks/>
        /// <summary>Choice of mathmatical modelling of misalignment.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Choice of mathmatical modelling of misalignment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MisalignmentMode", DataType="ErrorModelMisalignmentMode")]
        public ErrorModelMisalignmentMode MisalignmentMode {
            get {
                return this.misalignmentModeField;
            }
            set {
                this.misalignmentModeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inclination at which gyro initialization occurs.</summary>
        [System.ComponentModel.DescriptionAttribute("Inclination at which gyro initialization occurs.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GyroInitialization", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure GyroInitialization {
            get {
                return this.gyroInitializationField;
            }
            set {
                this.gyroInitializationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum length of continuous survey before re-initialization.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum length of continuous survey before re-initialization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GyroReinitializationDistance", DataType="LengthMeasure")]
        public LengthMeasure GyroReinitializationDistance {
            get {
                return this.gyroReinitializationDistanceField;
            }
            set {
                this.gyroReinitializationDistanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True if the survey tool is rotated at inclinations greater than 90 degrees.</summary>
        [System.ComponentModel.DescriptionAttribute("True if the survey tool is rotated at inclinations greater than 90 degrees.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Switching", DataType="boolean")]
        public bool Switching {
            get {
                return this.switchingField;
            }
            set {
                this.switchingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SwitchingSpecified {
            get {
                return this.switchingFieldSpecified;
            }
            set {
                this.switchingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Factor applied to random noise error terms, depending on the mode of gyro initialization. Values must be greater than zero and less than or equal to 1.</summary>
        [System.ComponentModel.DescriptionAttribute("Factor applied to random noise error terms, depending on the mode of gyro initial" +
            "ization. Values must be greater than zero and less than or equal to 1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NoiseReductionFactor", DataType="double")]
        public double NoiseReductionFactor {
            get {
                return this.noiseReductionFactorField;
            }
            set {
                this.noiseReductionFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NoiseReductionFactorSpecified {
            get {
                return this.noiseReductionFactorFieldSpecified;
            }
            set {
                this.noiseReductionFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Speed at which the tool traverses the wellbore during a continuous survey.</summary>
        [System.ComponentModel.DescriptionAttribute("Speed at which the tool traverses the wellbore during a continuous survey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GyroRunningSpeed", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure GyroRunningSpeed {
            get {
                return this.gyroRunningSpeedField;
            }
            set {
                this.gyroRunningSpeedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ErrorModelMisalignmentMode {
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaSurveyToolOperatingInterval {
        
        private SurveyToolOperatingMode modeField;
        
        private PlaneAngleMeasure startField;
        
        private PlaneAngleMeasure endField;
        
        private LengthPerTimeMeasure speedField;
        
        private TimeMeasure sampleRateField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Tool operating mode over this interval.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Tool operating mode over this interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mode", DataType="SurveyToolOperatingMode")]
        public SurveyToolOperatingMode Mode {
            get {
                return this.modeField;
            }
            set {
                this.modeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inclination at which the mode begins.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Inclination at which the mode begins.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Start", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Start {
            get {
                return this.startField;
            }
            set {
                this.startField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inclination at which the mode terminates.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Inclination at which the mode terminates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("End", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure End {
            get {
                return this.endField;
            }
            set {
                this.endField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Running speed for continuous surveys.</summary>
        [System.ComponentModel.DescriptionAttribute("Running speed for continuous surveys.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Speed", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure Speed {
            get {
                return this.speedField;
            }
            set {
                this.speedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time between survey samples for continuous surveys.</summary>
        [System.ComponentModel.DescriptionAttribute("Time between survey samples for continuous surveys.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SampleRate", DataType="TimeMeasure")]
        public TimeMeasure SampleRate {
            get {
                return this.sampleRateField;
            }
            set {
                this.sampleRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of IscwsaSurveyToolOperatingInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of IscwsaSurveyToolOperatingInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaSurveyToolOperatingCondition {
        
        private string parameterField;
        
        private GenericMeasure minField;
        
        private GenericMeasure maxField;
        
        private string valueField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A particular constraint.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A particular constraint.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="String64")]
        public string Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The least value the constraint may take.</summary>
        [System.ComponentModel.DescriptionAttribute("The least value the constraint may take.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Min", DataType="GenericMeasure")]
        public GenericMeasure Min {
            get {
                return this.minField;
            }
            set {
                this.minField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The greatest value the constraint may take.</summary>
        [System.ComponentModel.DescriptionAttribute("The greatest value the constraint may take.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Max", DataType="GenericMeasure")]
        public GenericMeasure Max {
            get {
                return this.maxField;
            }
            set {
                this.maxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A fixed value that the constraint must take.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A fixed value that the constraint must take.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="String64")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of IscwsaSurveyToolOperatingCondition.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of IscwsaSurveyToolOperatingCondition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IscwsaAuthorizationData {
        
        private string authorField;
        
        private string sourceField;
        
        private string authorityField;
        
        private AuthorizationStatus statusField;
        
        private string versionField;
        
        private string commentField;
        
        /// <remarks/>
        /// <summary>Person responsible for the information.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Person responsible for the information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Author", DataType="String64")]
        public string Author {
            get {
                return this.authorField;
            }
            set {
                this.authorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Source from which the information is derived.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Source from which the information is derived.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Source", DataType="String64")]
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Person or collective body responsible for authorizing the information.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Person or collective body responsible for authorizing the information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Authority", DataType="String64")]
        public string Authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Authorization state of the information.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Authorization state of the information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Status", DataType="AuthorizationStatus")]
        public AuthorizationStatus Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Version name or number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Version name or number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Version", DataType="String64")]
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A comment about the object.  This should include information regarding the derivation of the information.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A comment about the object.  This should include information regarding the deriva" +
            "tion of the information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum AuthorizationStatus {
        
        /// <remarks/>
        draft,
        
        /// <remarks/>
        authorized,
        
        /// <remarks/>
        superseded,
        
        /// <remarks/>
        withdrawn,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class GeologyFeature {
        
        private string nameField;
        
        private GeologyType geologyTypeField;
        
        private bool geologyTypeFieldSpecified;
        
        private MdInterval featureMdIntervalField;
        
        private TvdInterval featureTvdIntervalField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Name of the feature.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the feature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Aquifer or reservoir.</summary>
        [System.ComponentModel.DescriptionAttribute("Aquifer or reservoir.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologyType", DataType="GeologyType")]
        public GeologyType GeologyType {
            get {
                return this.geologyTypeField;
            }
            set {
                this.geologyTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GeologyTypeSpecified {
            get {
                return this.geologyTypeFieldSpecified;
            }
            set {
                this.geologyTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval for this feature.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval for this feature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FeatureMdInterval", DataType="MdInterval")]
        public MdInterval FeatureMdInterval {
            get {
                return this.featureMdIntervalField;
            }
            set {
                this.featureMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval for this feature.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval for this feature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FeatureTvdInterval", DataType="TvdInterval")]
        public TvdInterval FeatureTvdInterval {
            get {
                return this.featureTvdIntervalField;
            }
            set {
                this.featureTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of GeologyFeature.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of GeologyFeature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum GeologyType {
        
        /// <remarks/>
        aquifer,
        
        /// <remarks/>
        reservoir,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Borehole {
        
        private string nameField;
        
        private BoreholeType typeBoreholeField;
        
        private bool typeBoreholeFieldSpecified;
        
        private MdInterval mdIntervalField;
        
        private TvdInterval tvdIntervalField;
        
        private LengthMeasure boreholeDiameterField;
        
        private string descriptionPermanentField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private EventInfo equipmentEventHistoryField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the borehole.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the borehole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of borehole. etc. cavern, cavity, normal borehole, under ream, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of borehole. etc. cavern, cavity, normal borehole, under ream, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeBorehole", DataType="BoreholeType")]
        public BoreholeType TypeBorehole {
            get {
                return this.typeBoreholeField;
            }
            set {
                this.typeBoreholeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeBoreholeSpecified {
            get {
                return this.typeBoreholeFieldSpecified;
            }
            set {
                this.typeBoreholeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval for the borehole.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval for the borehole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval for the borehole.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval for the borehole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdInterval", DataType="TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return this.tvdIntervalField;
            }
            set {
                this.tvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Borehole diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Borehole diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BoreholeDiameter", DataType="LengthMeasure")]
        public LengthMeasure BoreholeDiameter {
            get {
                return this.boreholeDiameterField;
            }
            set {
                this.boreholeDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The description of this equipment to be permanently kept.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The description of this equipment to be permanently kept.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescriptionPermanent", DataType="String2000")]
        public string DescriptionPermanent {
            get {
                return this.descriptionPermanentField;
            }
            set {
                this.descriptionPermanentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipmentEventHistory", DataType="EventInfo")]
        public EventInfo EquipmentEventHistory {
            get {
                return this.equipmentEventHistoryField;
            }
            set {
                this.equipmentEventHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Borehole.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Borehole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BoreholeType {
        
        /// <remarks/>
        cavern,
        
        /// <remarks/>
        cavity,
        
        /// <remarks/>
        normalborehole,
        
        /// <remarks/>
        underream,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BoreholeString {
        
        private string nameField;
        
        private StringEquipment[] accessoriesField;
        
        private Borehole[] boreholeField;
        
        private GeologyFeature[] geologyFeatureField;
        
        private DataObjectReference referenceWellboreField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the borehole string.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the borehole string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Accessory", IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Accessories", DataType="StringAccessory")]
        public StringEquipment[] Accessories {
            get {
                return this.accessoriesField;
            }
            set {
                this.accessoriesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Borehole")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Borehole", DataType="Borehole")]
        public Borehole[] Borehole {
            get {
                return this.boreholeField;
            }
            set {
                this.boreholeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GeologyFeature")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologyFeature", DataType="GeologyFeature")]
        public GeologyFeature[] GeologyFeature {
            get {
                return this.geologyFeatureField;
            }
            set {
                this.geologyFeatureField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceWellbore", DataType="DataObjectReference")]
        public DataObjectReference ReferenceWellbore {
            get {
                return this.referenceWellboreField;
            }
            set {
                this.referenceWellboreField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of BoreholeString.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of BoreholeString.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class StringEquipment {
        
        private Energistics.DataAccess.ExtensibleEnum<EquipmentType> equipmentTypeField;
        
        private string nameField;
        
        private EventInfo[] equipmentEventHistoryField;
        
        private string statusField;
        
        private string runNoField;
        
        private TimeMeasure previousRunDaysField;
        
        private string objectConditionField;
        
        private string surfaceConditionField;
        
        private int countField;
        
        private bool countFieldSpecified;
        
        private LengthMeasure lengthField;
        
        private MdInterval mdIntervalField;
        
        private TvdInterval tvdIntervalField;
        
        private bool outsideStringField;
        
        private bool outsideStringFieldSpecified;
        
        private ForceMeasure tensileMaxField;
        
        private PressureMeasure presRatingField;
        
        private PressureMeasure presCollapseField;
        
        private PressureMeasure presBurstField;
        
        private ThermodynamicTemperatureMeasure heatRatingField;
        
        private bool isLinetoSurfaceField;
        
        private bool isLinetoSurfaceFieldSpecified;
        
        private bool isCentralizedField;
        
        private bool isCentralizedFieldSpecified;
        
        private bool hasScratchersField;
        
        private bool hasScratchersFieldSpecified;
        
        private string[] perforationSetRefIdField;
        
        private string permanentRemarksField;
        
        private string usageCommentField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private StringEquipment[] assemblyField;
        
        private ObjectSequence orderOfObjectField;
        
        private ReferenceContainer[] insideComponentField;
        
        private ReferenceContainer[] outsideComponentField;
        
        private EquipmentConnection[] connectionNextField;
        
        private string uidField;
        
        private string equipmentReferenceUidField;
        
        /// <remarks/>
        /// <summary>The type of the equipment. See enumerated values.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of the equipment. See enumerated values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipmentType", DataType="EquipmentTypeExt")]
        public Energistics.DataAccess.ExtensibleEnum<EquipmentType> EquipmentType {
            get {
                return this.equipmentTypeField;
            }
            set {
                this.equipmentTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the equipment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The name of the equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String2000")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>History of events related to this equipment.</summary>
        [System.Xml.Serialization.XmlElementAttribute("EquipmentEventHistory")]
        [System.ComponentModel.DescriptionAttribute("History of events related to this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipmentEventHistory", DataType="EventInfo")]
        public EventInfo[] EquipmentEventHistory {
            get {
                return this.equipmentEventHistoryField;
            }
            set {
                this.equipmentEventHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The status of the piece of equipment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The status of the piece of equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Status", DataType="String64")]
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The well run number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The well run number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RunNo", DataType="String64")]
        public string RunNo {
            get {
                return this.runNoField;
            }
            set {
                this.runNoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The days that the equipment has run.</summary>
        [System.ComponentModel.DescriptionAttribute("The days that the equipment has run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PreviousRunDays", DataType="TimeMeasure")]
        public TimeMeasure PreviousRunDays {
            get {
                return this.previousRunDaysField;
            }
            set {
                this.previousRunDaysField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Object condition at installation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Object condition at installation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectCondition", DataType="String64")]
        public string ObjectCondition {
            get {
                return this.objectConditionField;
            }
            set {
                this.objectConditionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Object surface condition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Object surface condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfaceCondition", DataType="String64")]
        public string SurfaceCondition {
            get {
                return this.surfaceConditionField;
            }
            set {
                this.surfaceConditionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The count number of the same equipment. The default is 1.  In some cases, multiple pieces group into one component.</summary>
        [System.ComponentModel.DescriptionAttribute("The count number of the same equipment. The default is 1.  In some cases, multipl" +
            "e pieces group into one component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="int")]
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CountSpecified {
            get {
                return this.countFieldSpecified;
            }
            set {
                this.countFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total length of the equipment.  This is NOT length per unit. This is the length of unit stored at equipmentset's equipment information section.</summary>
        [System.ComponentModel.DescriptionAttribute("The total length of the equipment.  This is NOT length per unit. This is the leng" +
            "th of unit stored at equipmentset\'s equipment information section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Length", DataType="LengthMeasure")]
        public LengthMeasure Length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval in which the equipment is installed in the string.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval in which the equipment is installed in the string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval in which the equipment is installed in the string.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval in which the equipment is installed in the string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdInterval", DataType="TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return this.tvdIntervalField;
            }
            set {
                this.tvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag indicating whether this component is inside the string or not .</summary>
        [System.ComponentModel.DescriptionAttribute("Flag indicating whether this component is inside the string or not .")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutsideString", DataType="boolean")]
        public bool OutsideString {
            get {
                return this.outsideStringField;
            }
            set {
                this.outsideStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OutsideStringSpecified {
            get {
                return this.outsideStringFieldSpecified;
            }
            set {
                this.outsideStringFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Max tensile strength.</summary>
        [System.ComponentModel.DescriptionAttribute("Max tensile strength.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TensileMax", DataType="ForceMeasure")]
        public ForceMeasure TensileMax {
            get {
                return this.tensileMaxField;
            }
            set {
                this.tensileMaxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure  rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure  rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresRating", DataType="PressureMeasure")]
        public PressureMeasure PresRating {
            get {
                return this.presRatingField;
            }
            set {
                this.presRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Collapse pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Collapse pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresCollapse", DataType="PressureMeasure")]
        public PressureMeasure PresCollapse {
            get {
                return this.presCollapseField;
            }
            set {
                this.presCollapseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Burst pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Burst pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBurst", DataType="PressureMeasure")]
        public PressureMeasure PresBurst {
            get {
                return this.presBurstField;
            }
            set {
                this.presBurstField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Heat rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Heat rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HeatRating", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure HeatRating {
            get {
                return this.heatRatingField;
            }
            set {
                this.heatRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag indicating the equipment has a line connected to the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Flag indicating the equipment has a line connected to the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsLinetoSurface", DataType="boolean")]
        public bool IsLinetoSurface {
            get {
                return this.isLinetoSurfaceField;
            }
            set {
                this.isLinetoSurfaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsLinetoSurfaceSpecified {
            get {
                return this.isLinetoSurfaceFieldSpecified;
            }
            set {
                this.isLinetoSurfaceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag indicating equipment is centralized.</summary>
        [System.ComponentModel.DescriptionAttribute("Flag indicating equipment is centralized.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsCentralized", DataType="boolean")]
        public bool IsCentralized {
            get {
                return this.isCentralizedField;
            }
            set {
                this.isCentralizedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsCentralizedSpecified {
            get {
                return this.isCentralizedFieldSpecified;
            }
            set {
                this.isCentralizedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag indicating scratchers have been added to the equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("Flag indicating scratchers have been added to the equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HasScratchers", DataType="boolean")]
        public bool HasScratchers {
            get {
                return this.hasScratchersField;
            }
            set {
                this.hasScratchersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HasScratchersSpecified {
            get {
                return this.hasScratchersFieldSpecified;
            }
            set {
                this.hasScratchersFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the perforated hole in the equipment after a perforation event.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PerforationSetRefId")]
        [System.ComponentModel.DescriptionAttribute("Reference to the perforated hole in the equipment after a perforation event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationSetRefId", DataType="String64")]
        public string[] PerforationSetRefId {
            get {
                return this.perforationSetRefIdField;
            }
            set {
                this.perforationSetRefIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks on the equipment stored permanently.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks on the equipment stored permanently.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PermanentRemarks", DataType="String2000")]
        public string PermanentRemarks {
            get {
                return this.permanentRemarksField;
            }
            set {
                this.permanentRemarksField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks on the usage of this equipment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks on the usage of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UsageComment", DataType="String2000")]
        public string UsageComment {
            get {
                return this.usageCommentField;
            }
            set {
                this.usageCommentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Part", IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Assembly", DataType="Assembly")]
        public StringEquipment[] Assembly {
            get {
                return this.assemblyField;
            }
            set {
                this.assemblyField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OrderOfObject", DataType="ObjectSequence")]
        public ObjectSequence OrderOfObject {
            get {
                return this.orderOfObjectField;
            }
            set {
                this.orderOfObjectField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("InsideComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InsideComponent", DataType="ReferenceContainer")]
        public ReferenceContainer[] InsideComponent {
            get {
                return this.insideComponentField;
            }
            set {
                this.insideComponentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OutsideComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutsideComponent", DataType="ReferenceContainer")]
        public ReferenceContainer[] OutsideComponent {
            get {
                return this.outsideComponentField;
            }
            set {
                this.outsideComponentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ConnectionNext")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectionNext", DataType="EquipmentConnection")]
        public EquipmentConnection[] ConnectionNext {
            get {
                return this.connectionNextField;
            }
            set {
                this.connectionNextField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StringEquipment.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StringEquipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to a piece of equipment.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to a piece of equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("equipmentReferenceUid", DataType="String64")]
        public string equipmentReferenceUid {
            get {
                return this.equipmentReferenceUidField;
            }
            set {
                this.equipmentReferenceUidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ReferenceContainer {
        
        private string stringReferenceIdField;
        
        private string equipmentReferenceIdField;
        
        private string accesoryEquipmentReferenceIdField;
        
        private string commentField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>DownholeString reference ID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("DownholeString reference ID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringReferenceId", DataType="String64")]
        public string StringReferenceId {
            get {
                return this.stringReferenceIdField;
            }
            set {
                this.stringReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Equipment reference ID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Equipment reference ID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipmentReferenceId", DataType="String64")]
        public string EquipmentReferenceId {
            get {
                return this.equipmentReferenceIdField;
            }
            set {
                this.equipmentReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the equipment for this accessory.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the equipment for this accessory.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AccesoryEquipmentReferenceId", DataType="String64")]
        public string AccesoryEquipmentReferenceId {
            get {
                return this.accesoryEquipmentReferenceIdField;
            }
            set {
                this.accesoryEquipmentReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment or remarks on this container reference.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comment or remarks on this container reference.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of ReferenceContainer.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of ReferenceContainer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class EquipmentConnection : Connection {
        
        private LengthMeasure radialOffsetField;
        
        private ConnectionFormType connectionFormField;
        
        private bool connectionFormFieldSpecified;
        
        private string connectionUpsetField;
        
        private AbstractConnectionType connectionTypeField;
        
        private string stringEquipmentReferenceUidField;
        
        /// <remarks/>
        /// <summary>Measurement of radial offset.</summary>
        [System.ComponentModel.DescriptionAttribute("Measurement of radial offset.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RadialOffset", DataType="LengthMeasure")]
        public LengthMeasure RadialOffset {
            get {
                return this.radialOffsetField;
            }
            set {
                this.radialOffsetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The form of connection: box or pin.</summary>
        [System.ComponentModel.DescriptionAttribute("The form of connection: box or pin.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectionForm", DataType="ConnectionFormType")]
        public ConnectionFormType ConnectionForm {
            get {
                return this.connectionFormField;
            }
            set {
                this.connectionFormField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConnectionFormSpecified {
            get {
                return this.connectionFormFieldSpecified;
            }
            set {
                this.connectionFormFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Connection upset.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Connection upset.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectionUpset", DataType="String64")]
        public string ConnectionUpset {
            get {
                return this.connectionUpsetField;
            }
            set {
                this.connectionUpsetField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectionType", DataType="AbstractConnectionType")]
        public AbstractConnectionType ConnectionType {
            get {
                return this.connectionTypeField;
            }
            set {
                this.connectionTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the string equipment.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the string equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("stringEquipmentReferenceUid", DataType="String64")]
        public string stringEquipmentReferenceUid {
            get {
                return this.stringEquipmentReferenceUidField;
            }
            set {
                this.stringEquipmentReferenceUidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ConnectionFormType {
        
        /// <remarks/>
        box,
        
        /// <remarks/>
        flange,
        
        /// <remarks/>
        mandrel,
        
        /// <remarks/>
        pin,
        
        /// <remarks/>
        welded,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OtherConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RodConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TubingConnectionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CasingConnectionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractConnectionType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class OtherConnectionType : AbstractConnectionType {
        
        private OtherConnectionTypes otherConnectionType1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OtherConnectionType")]
        public OtherConnectionTypes OtherConnectionType1 {
            get {
                return this.otherConnectionType1Field;
            }
            set {
                this.otherConnectionType1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum OtherConnectionTypes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cemented-in-place")]
        cementedinplace,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dogscompressionfit-sealed")]
        dogscompressionfitsealed,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RodConnectionType : AbstractConnectionType {
        
        private RodConnectionTypes rodConnectionType1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RodConnectionType")]
        public RodConnectionTypes RodConnectionType1 {
            get {
                return this.rodConnectionType1Field;
            }
            set {
                this.rodConnectionType1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum RodConnectionTypes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("eating nipple-cup")]
        eatingnipplecup,
        
        /// <remarks/>
        latched,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("seating nipple-mechanical")]
        seatingnipplemechanical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slipfit sealed")]
        slipfitsealed,
        
        /// <remarks/>
        threaded,
        
        /// <remarks/>
        welded,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class TubingConnectionType : AbstractConnectionType {
        
        private TubingConnectionTypes tubingConnectionType1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TubingConnectionType")]
        public TubingConnectionTypes TubingConnectionType1 {
            get {
                return this.tubingConnectionType1Field;
            }
            set {
                this.tubingConnectionType1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum TubingConnectionTypes {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dogscompressionfit-notsealed")]
        dogscompressionfitnotsealed,
        
        /// <remarks/>
        landed,
        
        /// <remarks/>
        latched,
        
        /// <remarks/>
        radial,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("selfsealing-threaded")]
        selfsealingthreaded,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slipfit-sealed")]
        slipfitsealed,
        
        /// <remarks/>
        threaded,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CasingConnectionType : AbstractConnectionType {
        
        private CasingConnectionTypes casingConnectionType1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CasingConnectionType")]
        public CasingConnectionTypes CasingConnectionType1 {
            get {
                return this.casingConnectionType1Field;
            }
            set {
                this.casingConnectionType1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum CasingConnectionTypes {
        
        /// <remarks/>
        landed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("self-sealing-threaded")]
        selfsealingthreaded,
        
        /// <remarks/>
        welded,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EquipmentConnection))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Connection {
        
        private LengthMeasure idField;
        
        private LengthMeasure odField;
        
        private LengthMeasure lenField;
        
        private string typeThreadField;
        
        private LengthMeasure sizeThreadField;
        
        private PressureMeasure tensYieldField;
        
        private MomentOfForceMeasure tqYieldField;
        
        private ConnectionPosition positionField;
        
        private bool positionFieldSpecified;
        
        private AreaMeasure criticalCrossSectionField;
        
        private PressureMeasure presLeakField;
        
        private MomentOfForceMeasure tqMakeupField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Inside diameter of the connection.</summary>
        [System.ComponentModel.DescriptionAttribute("Inside diameter of the connection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Id", DataType="LengthMeasure")]
        public LengthMeasure Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outside diameter of the body of the item.</summary>
        [System.ComponentModel.DescriptionAttribute("Outside diameter of the body of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Od", DataType="LengthMeasure")]
        public LengthMeasure Od {
            get {
                return this.odField;
            }
            set {
                this.odField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the item.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Len", DataType="LengthMeasure")]
        public LengthMeasure Len {
            get {
                return this.lenField;
            }
            set {
                this.lenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Thread type from API RP7G, 5CT.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Thread type from API RP7G, 5CT.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeThread", DataType="String64")]
        public string TypeThread {
            get {
                return this.typeThreadField;
            }
            set {
                this.typeThreadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Thread size.</summary>
        [System.ComponentModel.DescriptionAttribute("Thread size.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeThread", DataType="LengthMeasure")]
        public LengthMeasure SizeThread {
            get {
                return this.sizeThreadField;
            }
            set {
                this.sizeThreadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Yield stress of steel: worn stress.</summary>
        [System.ComponentModel.DescriptionAttribute("Yield stress of steel: worn stress.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TensYield", DataType="PressureMeasure")]
        public PressureMeasure TensYield {
            get {
                return this.tensYieldField;
            }
            set {
                this.tensYieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Torque at which yield occurs.</summary>
        [System.ComponentModel.DescriptionAttribute("Torque at which yield occurs.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqYield", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqYield {
            get {
                return this.tqYieldField;
            }
            set {
                this.tqYieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Where connected.</summary>
        [System.ComponentModel.DescriptionAttribute("Where connected.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Position", DataType="ConnectionPosition")]
        public ConnectionPosition Position {
            get {
                return this.positionField;
            }
            set {
                this.positionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PositionSpecified {
            get {
                return this.positionFieldSpecified;
            }
            set {
                this.positionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For bending stiffness ratio.</summary>
        [System.ComponentModel.DescriptionAttribute("For bending stiffness ratio.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CriticalCrossSection", DataType="AreaMeasure")]
        public AreaMeasure CriticalCrossSection {
            get {
                return this.criticalCrossSectionField;
            }
            set {
                this.criticalCrossSectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Leak pressure rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Leak pressure rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresLeak", DataType="PressureMeasure")]
        public PressureMeasure PresLeak {
            get {
                return this.presLeakField;
            }
            set {
                this.presLeakField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Make-up torque.</summary>
        [System.ComponentModel.DescriptionAttribute("Make-up torque.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqMakeup", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqMakeup {
            get {
                return this.tqMakeupField;
            }
            set {
                this.tqMakeupField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Connection.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Connection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ConnectionPosition {
        
        /// <remarks/>
        both,
        
        /// <remarks/>
        bottom,
        
        /// <remarks/>
        top,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PerfHole {
        
        private MdInterval mdIntervalField;
        
        private TvdInterval tvdIntervalField;
        
        private LengthMeasure holeDiameterField;
        
        private PlaneAngleMeasure holeAngleField;
        
        private string holePatternField;
        
        private string remarksField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private ReciprocalLengthMeasure holeDensityField;
        
        private int holeCountField;
        
        private bool holeCountFieldSpecified;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Measured depth interval for the perforation hole.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval for the perforation hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The true vertical depth that describes the hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The true vertical depth that describes the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdInterval", DataType="TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return this.tvdIntervalField;
            }
            set {
                this.tvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diameter of the hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The diameter of the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleDiameter", DataType="LengthMeasure")]
        public LengthMeasure HoleDiameter {
            get {
                return this.holeDiameterField;
            }
            set {
                this.holeDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The angle of the holes.</summary>
        [System.ComponentModel.DescriptionAttribute("The angle of the holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return this.holeAngleField;
            }
            set {
                this.holeAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pattern of the holes.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The pattern of the holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HolePattern", DataType="String64")]
        public string HolePattern {
            get {
                return this.holePatternField;
            }
            set {
                this.holePatternField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this perforated hole.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this perforated hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remarks", DataType="String2000")]
        public string Remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the holes.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleDensity", DataType="ReciprocalLengthMeasure")]
        public ReciprocalLengthMeasure HoleDensity {
            get {
                return this.holeDensityField;
            }
            set {
                this.holeDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of holes.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleCount", DataType="int")]
        public int HoleCount {
            get {
                return this.holeCountField;
            }
            set {
                this.holeCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HoleCountSpecified {
            get {
                return this.holeCountFieldSpecified;
            }
            set {
                this.holeCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of PerfHole.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of PerfHole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PerfSlot {
        
        private LengthMeasure slotHeightField;
        
        private LengthMeasure slotWidthField;
        
        private LengthMeasure slotCenterDistanceField;
        
        private int slotCountField;
        
        private bool slotCountFieldSpecified;
        
        private string remarksField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The height of slot.</summary>
        [System.ComponentModel.DescriptionAttribute("The height of slot.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlotHeight", DataType="LengthMeasure")]
        public LengthMeasure SlotHeight {
            get {
                return this.slotHeightField;
            }
            set {
                this.slotHeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The width of the slot.</summary>
        [System.ComponentModel.DescriptionAttribute("The width of the slot.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlotWidth", DataType="LengthMeasure")]
        public LengthMeasure SlotWidth {
            get {
                return this.slotWidthField;
            }
            set {
                this.slotWidthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance from center point.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance from center point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlotCenterDistance", DataType="LengthMeasure")]
        public LengthMeasure SlotCenterDistance {
            get {
                return this.slotCenterDistanceField;
            }
            set {
                this.slotCenterDistanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of the slots.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of the slots.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlotCount", DataType="int")]
        public int SlotCount {
            get {
                return this.slotCountField;
            }
            set {
                this.slotCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SlotCountSpecified {
            get {
                return this.slotCountFieldSpecified;
            }
            set {
                this.slotCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks and comments about this perforation slot.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks and comments about this perforation slot.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remarks", DataType="String2000")]
        public string Remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of PerfSlot.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of PerfSlot.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ExtPropNameValue {
        
        private string nameField;
        
        private string valueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>A string representing the name of property.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A string representing the name of property.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A value string representing the units of measure of the value.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A value string representing the units of measure of the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="String2000")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of ExtPropNameValue.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of ExtPropNameValue.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Equipment {
        
        private string equipmentNameField;
        
        private Energistics.DataAccess.ExtensibleEnum<EquipmentType> equipmentTypeField;
        
        private string manufacturerField;
        
        private string modelField;
        
        private string catalogIdField;
        
        private string catalogNameField;
        
        private string brandNameField;
        
        private string modelTypeField;
        
        private string seriesField;
        
        private bool isSerializedField;
        
        private bool isSerializedFieldSpecified;
        
        private string serialNumberField;
        
        private string partNoField;
        
        private string surfaceConditionField;
        
        private string materialField;
        
        private GradeType gradeField;
        
        private bool gradeFieldSpecified;
        
        private MassPerLengthMeasure unitWeightField;
        
        private bool coatingLinerAppliedField;
        
        private bool coatingLinerAppliedFieldSpecified;
        
        private Coating outsideCoatingField;
        
        private bool outsideCoatingFieldSpecified;
        
        private Coating insideCoatingField;
        
        private bool insideCoatingFieldSpecified;
        
        private LengthMeasure unitLengthField;
        
        private LengthMeasure majorOdField;
        
        private LengthMeasure minorOdField;
        
        private LengthMeasure odField;
        
        private LengthMeasure maxOdField;
        
        private LengthMeasure minOdField;
        
        private LengthMeasure majorIdField;
        
        private LengthMeasure minorIdField;
        
        private LengthMeasure idField;
        
        private LengthMeasure maxIdField;
        
        private LengthMeasure minIdField;
        
        private LengthMeasure driftField;
        
        private LengthMeasure nominalSizeField;
        
        private string nameServiceField;
        
        private string descriptionField;
        
        private string descriptionPermanentField;
        
        private string remarkField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        private ExtPropNameValue[] propertyField;
        
        private PerfSlot[] slotAsManufacturedField;
        
        private PerfHole[] holeAsManufacturedField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The name of the piece of equipment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the piece of equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipmentName", DataType="String64")]
        public string EquipmentName {
            get {
                return this.equipmentNameField;
            }
            set {
                this.equipmentNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The equipment type etc. bridge plug, bull plug. capillary tubing.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The equipment type etc. bridge plug, bull plug. capillary tubing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipmentType", DataType="EquipmentTypeExt")]
        public Energistics.DataAccess.ExtensibleEnum<EquipmentType> EquipmentType {
            get {
                return this.equipmentTypeField;
            }
            set {
                this.equipmentTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer of this equipment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The model of the equipment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The model of the equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Catalog where equipment can be found.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Catalog where equipment can be found.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CatalogId", DataType="String64")]
        public string CatalogId {
            get {
                return this.catalogIdField;
            }
            set {
                this.catalogIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of equipment as found in the catalog.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of equipment as found in the catalog.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CatalogName", DataType="String64")]
        public string CatalogName {
            get {
                return this.catalogNameField;
            }
            set {
                this.catalogNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The equipment's brand name.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The equipment\'s brand name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BrandName", DataType="String64")]
        public string BrandName {
            get {
                return this.brandNameField;
            }
            set {
                this.brandNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The equipment's model type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The equipment\'s model type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ModelType", DataType="String64")]
        public string ModelType {
            get {
                return this.modelTypeField;
            }
            set {
                this.modelTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Series number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Series number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Series", DataType="String64")]
        public string Series {
            get {
                return this.seriesField;
            }
            set {
                this.seriesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A flag that indicates the equipment has a serial number.</summary>
        [System.ComponentModel.DescriptionAttribute("A flag that indicates the equipment has a serial number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsSerialized", DataType="boolean")]
        public bool IsSerialized {
            get {
                return this.isSerializedField;
            }
            set {
                this.isSerializedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsSerializedSpecified {
            get {
                return this.isSerializedFieldSpecified;
            }
            set {
                this.isSerializedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Serial number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Serial number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SerialNumber", DataType="String64")]
        public string SerialNumber {
            get {
                return this.serialNumberField;
            }
            set {
                this.serialNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number that identifies this part.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Number that identifies this part.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PartNo", DataType="String64")]
        public string PartNo {
            get {
                return this.partNoField;
            }
            set {
                this.partNoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Surface condition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Surface condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfaceCondition", DataType="String64")]
        public string SurfaceCondition {
            get {
                return this.surfaceConditionField;
            }
            set {
                this.surfaceConditionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Material that the equipment is made from.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Material that the equipment is made from.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Material", DataType="String64")]
        public string Material {
            get {
                return this.materialField;
            }
            set {
                this.materialField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Grade level of this piece of material.</summary>
        [System.ComponentModel.DescriptionAttribute("Grade level of this piece of material.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Grade", DataType="GradeType")]
        public GradeType Grade {
            get {
                return this.gradeField;
            }
            set {
                this.gradeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GradeSpecified {
            get {
                return this.gradeFieldSpecified;
            }
            set {
                this.gradeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The weight per length of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The weight per length of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnitWeight", DataType="MassPerLengthMeasure")]
        public MassPerLengthMeasure UnitWeight {
            get {
                return this.unitWeightField;
            }
            set {
                this.unitWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag indicating whether equipment has a coating.</summary>
        [System.ComponentModel.DescriptionAttribute("Flag indicating whether equipment has a coating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoatingLinerApplied", DataType="boolean")]
        public bool CoatingLinerApplied {
            get {
                return this.coatingLinerAppliedField;
            }
            set {
                this.coatingLinerAppliedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CoatingLinerAppliedSpecified {
            get {
                return this.coatingLinerAppliedFieldSpecified;
            }
            set {
                this.coatingLinerAppliedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Equipment's outside coating based on enumeration value.</summary>
        [System.ComponentModel.DescriptionAttribute("Equipment\'s outside coating based on enumeration value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OutsideCoating", DataType="Coating")]
        public Coating OutsideCoating {
            get {
                return this.outsideCoatingField;
            }
            set {
                this.outsideCoatingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OutsideCoatingSpecified {
            get {
                return this.outsideCoatingFieldSpecified;
            }
            set {
                this.outsideCoatingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Equipment's inner coating based on enumeration value.</summary>
        [System.ComponentModel.DescriptionAttribute("Equipment\'s inner coating based on enumeration value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InsideCoating", DataType="Coating")]
        public Coating InsideCoating {
            get {
                return this.insideCoatingField;
            }
            set {
                this.insideCoatingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InsideCoatingSpecified {
            get {
                return this.insideCoatingFieldSpecified;
            }
            set {
                this.insideCoatingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The length of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnitLength", DataType="LengthMeasure")]
        public LengthMeasure UnitLength {
            get {
                return this.unitLengthField;
            }
            set {
                this.unitLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The major outside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The major outside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MajorOd", DataType="LengthMeasure")]
        public LengthMeasure MajorOd {
            get {
                return this.majorOdField;
            }
            set {
                this.majorOdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minor outside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The minor outside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinorOd", DataType="LengthMeasure")]
        public LengthMeasure MinorOd {
            get {
                return this.minorOdField;
            }
            set {
                this.minorOdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The outside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The outside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Od", DataType="LengthMeasure")]
        public LengthMeasure Od {
            get {
                return this.odField;
            }
            set {
                this.odField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum outside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum outside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxOd", DataType="LengthMeasure")]
        public LengthMeasure MaxOd {
            get {
                return this.maxOdField;
            }
            set {
                this.maxOdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum outside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum outside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinOd", DataType="LengthMeasure")]
        public LengthMeasure MinOd {
            get {
                return this.minOdField;
            }
            set {
                this.minOdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The major inside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The major inside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MajorId", DataType="LengthMeasure")]
        public LengthMeasure MajorId {
            get {
                return this.majorIdField;
            }
            set {
                this.majorIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minor inside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The minor inside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinorId", DataType="LengthMeasure")]
        public LengthMeasure MinorId {
            get {
                return this.minorIdField;
            }
            set {
                this.minorIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The inside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The inside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Id", DataType="LengthMeasure")]
        public LengthMeasure Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum inside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum inside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxId", DataType="LengthMeasure")]
        public LengthMeasure MaxId {
            get {
                return this.maxIdField;
            }
            set {
                this.maxIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The minimum inside diameter of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The minimum inside diameter of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinId", DataType="LengthMeasure")]
        public LengthMeasure MinId {
            get {
                return this.minIdField;
            }
            set {
                this.minIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The drift diameter is the minimum inside diameter of pipe through which another tool or string can be pulled.</summary>
        [System.ComponentModel.DescriptionAttribute("The drift diameter is the minimum inside diameter of pipe through which another t" +
            "ool or string can be pulled.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Drift", DataType="LengthMeasure")]
        public LengthMeasure Drift {
            get {
                return this.driftField;
            }
            set {
                this.driftField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal size of this equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("The nominal size of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NominalSize", DataType="LengthMeasure")]
        public LengthMeasure NominalSize {
            get {
                return this.nominalSizeField;
            }
            set {
                this.nominalSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sweet or sour service.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Sweet or sour service.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameService", DataType="String64")]
        public string NameService {
            get {
                return this.nameServiceField;
            }
            set {
                this.nameServiceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The description of this equipment.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The description of this equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The description of this equipment to be permanently kept.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The description of this equipment to be permanently kept.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescriptionPermanent", DataType="String2000")]
        public string DescriptionPermanent {
            get {
                return this.descriptionPermanentField;
            }
            set {
                this.descriptionPermanentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks about this equipment property.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks about this equipment property.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Remark", DataType="String2000")]
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Property")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Property", DataType="ExtPropNameValue")]
        public ExtPropNameValue[] Property {
            get {
                return this.propertyField;
            }
            set {
                this.propertyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SlotAsManufactured")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlotAsManufactured", DataType="PerfSlot")]
        public PerfSlot[] SlotAsManufactured {
            get {
                return this.slotAsManufacturedField;
            }
            set {
                this.slotAsManufacturedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("HoleAsManufactured")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleAsManufactured", DataType="PerfHole")]
        public PerfHole[] HoleAsManufactured {
            get {
                return this.holeAsManufacturedField;
            }
            set {
                this.holeAsManufacturedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Equipment.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum GradeType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13CR")]
        Item13CR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13CR- 80")]
        Item13CR80,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13CR- 85")]
        Item13CR85,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13CR- 95")]
        Item13CR95,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("13CR-110")]
        Item13CR110,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("35")]
        Item35,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("45")]
        Item45,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("46")]
        Item46,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("50")]
        Item50,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("620C")]
        Item620C,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("75")]
        Item75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("750N")]
        Item750N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("75A")]
        Item75A,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("780M")]
        Item780M,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("95")]
        Item95,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("960M")]
        Item960M,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("970N")]
        Item970N,
        
        /// <remarks/>
        A53,
        
        /// <remarks/>
        A53A,
        
        /// <remarks/>
        A53B,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Armco-95")]
        Armco95,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C-110")]
        C110,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C-75")]
        C75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C-90")]
        C90,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C-95")]
        C95,
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        DE,
        
        /// <remarks/>
        DER,
        
        /// <remarks/>
        DR,
        
        /// <remarks/>
        DWR,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("E-75")]
        E75,
        
        /// <remarks/>
        EL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("F-25")]
        F25,
        
        /// <remarks/>
        FG,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("FS-80")]
        FS80,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("FSS-95")]
        FSS95,
        
        /// <remarks/>
        G,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("G-105")]
        G105,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GT-80S")]
        GT80S,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H2S-90")]
        H2S90,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H2S-95")]
        H2S95,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H-40")]
        H40,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HC-95")]
        HC95,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HCK-55")]
        HCK55,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HCL-80")]
        HCL80,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HCN-80")]
        HCN80,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HCP-110")]
        HCP110,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HCQ-125")]
        HCQ125,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HO-70")]
        HO70,
        
        /// <remarks/>
        HS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J-20")]
        J20,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J-55")]
        J55,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K-40")]
        K40,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K-55")]
        K55,
        
        /// <remarks/>
        KD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("KD-63")]
        KD63,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L-80")]
        L80,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("LS-140")]
        LS140,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("LS-50")]
        LS50,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("LS-65")]
        LS65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("M-65")]
        M65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("M-90")]
        M90,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("M-95")]
        M95,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MAV-50")]
        MAV50,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MD-56")]
        MD56,
        
        /// <remarks/>
        MMS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-105")]
        N105,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-23")]
        N23,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-30")]
        N30,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-40")]
        N40,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-54")]
        N54,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-75")]
        N75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-78")]
        N78,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-80")]
        N80,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-90")]
        N90,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-96")]
        N96,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N-97")]
        N97,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("P-105")]
        P105,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("P-110")]
        P110,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PCP  900")]
        PCP900,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PCP 1000")]
        PCP1000,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PCP 1500")]
        PCP1500,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PCP 2500")]
        PCP2500,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PH-6")]
        PH6,
        
        /// <remarks/>
        Plus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Q-125")]
        Q125,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("QT-1000")]
        QT1000,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("QT-1200")]
        QT1200,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("QT-700")]
        QT700,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("QT-800")]
        QT800,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("QT-900")]
        QT900,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-135")]
        S135,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-59")]
        S59,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-60")]
        S60,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-67")]
        S67,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-80")]
        S80,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-87")]
        S87,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-88")]
        S88,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-95")]
        S95,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SC-90")]
        SC90,
        
        /// <remarks/>
        SE,
        
        /// <remarks/>
        SER,
        
        /// <remarks/>
        SM,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("SOO-95")]
        SOO95,
        
        /// <remarks/>
        Stainless,
        
        /// <remarks/>
        SWR,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T-66")]
        T66,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T-95")]
        T95,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T-D61")]
        TD61,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T-D63")]
        TD63,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T-K65")]
        TK65,
        
        /// <remarks/>
        UHS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("USS-125")]
        USS125,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("USS-140")]
        USS140,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("USS-50")]
        USS50,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("USS-95")]
        USS95,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V-150")]
        V150,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("WC-50")]
        WC50,
        
        /// <remarks/>
        X,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-140")]
        X140,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-42")]
        X42,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-46")]
        X46,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-52")]
        X52,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-56")]
        X56,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-60")]
        X60,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-70")]
        X70,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("X-95")]
        X95,
        
        /// <remarks/>
        XD,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum Coating {
        
        /// <remarks/>
        bare,
        
        /// <remarks/>
        carbonnitrided,
        
        /// <remarks/>
        carburized,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("carburized-hardened")]
        carburizedhardened,
        
        /// <remarks/>
        cementlined,
        
        /// <remarks/>
        chrome,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chrome-plated")]
        chromeplated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chromeplated-grooved")]
        chromeplatedgrooved,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chromeplated-heavy")]
        chromeplatedheavy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corrosion coating")]
        corrosioncoating,
        
        /// <remarks/>
        dblgalv,
        
        /// <remarks/>
        duolin20wr,
        
        /// <remarks/>
        duoline,
        
        /// <remarks/>
        duoline10,
        
        /// <remarks/>
        duoline20,
        
        /// <remarks/>
        epdm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fiberglass-lined")]
        fiberglasslined,
        
        /// <remarks/>
        galvanized,
        
        /// <remarks/>
        hardened,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hard-lined")]
        hardlined,
        
        /// <remarks/>
        ins,
        
        /// <remarks/>
        ipc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-epoxy")]
        ipcepoxy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-epxthk")]
        ipcepxthk,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-epxthn")]
        ipcepxthn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-nylon")]
        ipcnylon,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-rwrap")]
        ipcrwrap,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-s505")]
        ipcs505,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-s650")]
        ipcs650,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-tk70")]
        ipctk70,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ipc-tk75")]
        ipctk75,
        
        /// <remarks/>
        lp,
        
        /// <remarks/>
        moly,
        
        /// <remarks/>
        mtr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n/a")]
        na,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nickel-carbide")]
        nickelcarbide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nickel-plated")]
        nickelplated,
        
        /// <remarks/>
        nitrided,
        
        /// <remarks/>
        nitrile,
        
        /// <remarks/>
        pap,
        
        /// <remarks/>
        pelined,
        
        /// <remarks/>
        phosphate,
        
        /// <remarks/>
        phosphorus,
        
        /// <remarks/>
        plastic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plunger-lubricant")]
        plungerlubricant,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("polished-rodliner")]
        polishedrodliner,
        
        /// <remarks/>
        polypropylene,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppw/nitrl")]
        ppwnitrl,
        
        /// <remarks/>
        pvclined,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-1")]
        rodguide1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-2")]
        rodguide2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-2.")]
        rodguide21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-3")]
        rodguide3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-4")]
        rodguide4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-5")]
        rodguide5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-6")]
        rodguide6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-7")]
        rodguide7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-fx")]
        rodguidefx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-so")]
        rodguideso,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-so1")]
        rodguideso1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-so2")]
        rodguideso2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-so3")]
        rodguideso3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-so4")]
        rodguideso4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-so5")]
        rodguideso5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-so6")]
        rodguideso6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-so8")]
        rodguideso8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rodguide-sp")]
        rodguidesp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spray-metal")]
        spraymetal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spray-metal-monel")]
        spraymetalmonel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spraymetal-monel")]
        spraymetalmonel1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spraymetal-nickel")]
        spraymetalnickel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spraymetal-od/nickelplated-id")]
        spraymetalodnickelplatedid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spraymetal-steel")]
        spraymetalsteel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spraymetal-thick")]
        spraymetalthick,
        
        /// <remarks/>
        sslined,
        
        /// <remarks/>
        teflon,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("teflon-red")]
        teflonred,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("teflon-tan")]
        teflontan,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("teflon-yellow")]
        teflonyellow,
        
        /// <remarks/>
        thermo,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tk-4")]
        tk4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tk-99")]
        tk99,
        
        /// <remarks/>
        tuffr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tungsten plated")]
        tungstenplated,
        
        /// <remarks/>
        zincplated,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PerforationSet {
        
        private string[] boreholeStringReferenceIdField;
        
        private string[] downholeStringReferenceIdField;
        
        private MdInterval mdIntervalField;
        
        private TvdInterval tvdIntervalField;
        
        private LengthMeasure holeDiameterField;
        
        private PlaneAngleMeasure holeAngleField;
        
        private string holePatternField;
        
        private ReciprocalLengthMeasure holeDensityField;
        
        private int holeCountField;
        
        private bool holeCountFieldSpecified;
        
        private double frictionFactorField;
        
        private bool frictionFactorFieldSpecified;
        
        private PressureMeasure frictionPresField;
        
        private double dischargeCoefficientField;
        
        private bool dischargeCoefficientFieldSpecified;
        
        private PerforationToolType perforationToolField;
        
        private bool perforationToolFieldSpecified;
        
        private LengthMeasure perforationPenetrationField;
        
        private LengthMeasure crushZoneDiameterField;
        
        private string crushDamageRatioField;
        
        private Energistics.DataAccess.Timestamp perforationDateField;
        
        private string permanentRemarksField;
        
        private EventInfo eventHistoryField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Reference to the borehole that contains the perf set.</summary>
        [System.Xml.Serialization.XmlElementAttribute("BoreholeStringReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to the borehole that contains the perf set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BoreholeStringReferenceId", DataType="String64")]
        public string[] BoreholeStringReferenceId {
            get {
                return this.boreholeStringReferenceIdField;
            }
            set {
                this.boreholeStringReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the downhole string.</summary>
        [System.Xml.Serialization.XmlElementAttribute("DownholeStringReferenceId")]
        [System.ComponentModel.DescriptionAttribute("Reference to the downhole string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DownholeStringReferenceId", DataType="String64")]
        public string[] DownholeStringReferenceId {
            get {
                return this.downholeStringReferenceIdField;
            }
            set {
                this.downholeStringReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval for the entire perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval for the entire perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The true vertical depth of the entire perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("The true vertical depth of the entire perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdInterval", DataType="TvdInterval")]
        public TvdInterval TvdInterval {
            get {
                return this.tvdIntervalField;
            }
            set {
                this.tvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diameter of the perf holes.</summary>
        [System.ComponentModel.DescriptionAttribute("The diameter of the perf holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleDiameter", DataType="LengthMeasure")]
        public LengthMeasure HoleDiameter {
            get {
                return this.holeDiameterField;
            }
            set {
                this.holeDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The angle of the holes.</summary>
        [System.ComponentModel.DescriptionAttribute("The angle of the holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure HoleAngle {
            get {
                return this.holeAngleField;
            }
            set {
                this.holeAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pattern of the holes.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The pattern of the holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HolePattern", DataType="String64")]
        public string HolePattern {
            get {
                return this.holePatternField;
            }
            set {
                this.holePatternField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the holes.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleDensity", DataType="ReciprocalLengthMeasure")]
        public ReciprocalLengthMeasure HoleDensity {
            get {
                return this.holeDensityField;
            }
            set {
                this.holeDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of holes.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of holes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleCount", DataType="int")]
        public int HoleCount {
            get {
                return this.holeCountField;
            }
            set {
                this.holeCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HoleCountSpecified {
            get {
                return this.holeCountFieldSpecified;
            }
            set {
                this.holeCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The friction factor of each perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("The friction factor of each perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionFactor", DataType="double")]
        public double FrictionFactor {
            get {
                return this.frictionFactorField;
            }
            set {
                this.frictionFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FrictionFactorSpecified {
            get {
                return this.frictionFactorFieldSpecified;
            }
            set {
                this.frictionFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The friction pressure for the perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("The friction pressure for the perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionPres", DataType="PressureMeasure")]
        public PressureMeasure FrictionPres {
            get {
                return this.frictionPresField;
            }
            set {
                this.frictionPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A coefficient used in the equation for calculation of pressure drop  across a perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("A coefficient used in the equation for calculation of pressure drop  across a per" +
            "foration set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DischargeCoefficient", DataType="double")]
        public double DischargeCoefficient {
            get {
                return this.dischargeCoefficientField;
            }
            set {
                this.dischargeCoefficientField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DischargeCoefficientSpecified {
            get {
                return this.dischargeCoefficientFieldSpecified;
            }
            set {
                this.dischargeCoefficientFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of perforation tool.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of perforation tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationTool", DataType="PerforationToolType")]
        public PerforationToolType PerforationTool {
            get {
                return this.perforationToolField;
            }
            set {
                this.perforationToolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PerforationToolSpecified {
            get {
                return this.perforationToolFieldSpecified;
            }
            set {
                this.perforationToolFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The penetration length of perforation.</summary>
        [System.ComponentModel.DescriptionAttribute("The penetration length of perforation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationPenetration", DataType="LengthMeasure")]
        public LengthMeasure PerforationPenetration {
            get {
                return this.perforationPenetrationField;
            }
            set {
                this.perforationPenetrationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diameter of the crushed zone.</summary>
        [System.ComponentModel.DescriptionAttribute("The diameter of the crushed zone.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CrushZoneDiameter", DataType="LengthMeasure")]
        public LengthMeasure CrushZoneDiameter {
            get {
                return this.crushZoneDiameterField;
            }
            set {
                this.crushZoneDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ratio value of crash damage.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The ratio value of crash damage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CrushDamageRatio", DataType="String64")]
        public string CrushDamageRatio {
            get {
                return this.crushDamageRatioField;
            }
            set {
                this.crushDamageRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The original perforation date.</summary>
        [System.ComponentModel.DescriptionAttribute("The original perforation date.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp PerforationDate {
            get {
                return this.perforationDateField;
            }
            set {
                this.perforationDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remarks regarding this perforation set.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Remarks regarding this perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PermanentRemarks", DataType="String2000")]
        public string PermanentRemarks {
            get {
                return this.permanentRemarksField;
            }
            set {
                this.permanentRemarksField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventHistory", DataType="EventInfo")]
        public EventInfo EventHistory {
            get {
                return this.eventHistoryField;
            }
            set {
                this.eventHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of PerforationSet.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of PerforationSet.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PerforationToolType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing gun")]
        casinggun,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coiled tubing jet tool")]
        coiledtubingjettool,
        
        /// <remarks/>
        drilled,
        
        /// <remarks/>
        mandrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("n/a")]
        na,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slots-machine cut")]
        slotsmachinecut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slots-undercut")]
        slotsundercut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("strip gun")]
        stripgun,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tcp gun")]
        tcpgun,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("through tubing gun")]
        throughtubinggun,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DownholeString {
        
        private DownholeStringType stringTypeField;
        
        private SubStringType subStringTypeField;
        
        private bool subStringTypeFieldSpecified;
        
        private string nameField;
        
        private Energistics.DataAccess.Timestamp stringInstallDateField;
        
        private string parentStringsNameField;
        
        private MdInterval stringMdIntervalField;
        
        private LengthMeasure axisOffsetField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private StringEquipment[] accessoriesField;
        
        private StringEquipment[] stringEquipmentSetField;
        
        private CustomData extensionAnyField;
        
        private DataObjectReference referenceWellboreField;
        
        private DownholeString parentStringField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The type of string defined in the  enumeration DownholeStringType.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of string defined in the  enumeration DownholeStringType.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringType", DataType="DownholeStringType")]
        public DownholeStringType StringType {
            get {
                return this.stringTypeField;
            }
            set {
                this.stringTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of substring which can be SurfaceCasing, IntermediaCasing or ProductionCasing.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of substring which can be SurfaceCasing, IntermediaCasing or ProductionC" +
            "asing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubStringType", DataType="SubStringType")]
        public SubStringType SubStringType {
            get {
                return this.subStringTypeField;
            }
            set {
                this.subStringTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubStringTypeSpecified {
            get {
                return this.subStringTypeFieldSpecified;
            }
            set {
                this.subStringTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the downhole string.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the downhole string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The install date of the downhole string.</summary>
        [System.ComponentModel.DescriptionAttribute("The install date of the downhole string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringInstallDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StringInstallDate {
            get {
                return this.stringInstallDateField;
            }
            set {
                this.stringInstallDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of parent string.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of parent string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentStringsName", DataType="String64")]
        public string ParentStringsName {
            get {
                return this.parentStringsNameField;
            }
            set {
                this.parentStringsNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval between the top and the base of the downhole string.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval between the top and the base of the downhole string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringMdInterval", DataType="MdInterval")]
        public MdInterval StringMdInterval {
            get {
                return this.stringMdIntervalField;
            }
            set {
                this.stringMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The distance from a sibling string.</summary>
        [System.ComponentModel.DescriptionAttribute("The distance from a sibling string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisOffset", DataType="LengthMeasure")]
        public LengthMeasure AxisOffset {
            get {
                return this.axisOffsetField;
            }
            set {
                this.axisOffsetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Accessory", IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Accessories", DataType="StringAccessory")]
        public StringEquipment[] Accessories {
            get {
                return this.accessoriesField;
            }
            set {
                this.accessoriesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StringEquipmentSet", DataType="StringEquipmentSet")]
        public StringEquipment[] StringEquipmentSet {
            get {
                return this.stringEquipmentSetField;
            }
            set {
                this.stringEquipmentSetField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceWellbore", DataType="DataObjectReference")]
        public DataObjectReference ReferenceWellbore {
            get {
                return this.referenceWellboreField;
            }
            set {
                this.referenceWellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentString", DataType="DownholeString")]
        public DownholeString ParentString {
            get {
                return this.parentStringField;
            }
            set {
                this.parentStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DownholeString.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DownholeString.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum DownholeStringType {
        
        /// <remarks/>
        casing,
        
        /// <remarks/>
        others,
        
        /// <remarks/>
        rod,
        
        /// <remarks/>
        tubing,
        
        /// <remarks/>
        wellhead,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum SubStringType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("abandoned junk/fish")]
        abandonedjunkfish,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("capillary string (inside tubing)")]
        capillarystringinsidetubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("capillary string (tubing/casing annulus)")]
        capillarystringtubingcasingannulus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("conductor casing")]
        conductorcasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill string")]
        drillstring,
        
        /// <remarks/>
        flowline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("geological objects")]
        geologicalobjects,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inner liner")]
        innerliner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("intermediate casing")]
        intermediatecasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production casing")]
        productioncasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production liner")]
        productionliner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("protective casing")]
        protectivecasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface casing")]
        surfacecasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wellbore notes")]
        wellborenotes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("y-tool string")]
        ytoolstring,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementAdditive {
        
        private string nameAddField;
        
        private string typeAddField;
        
        private string formAddField;
        
        private MassPerVolumeMeasure densAddField;
        
        private MassMeasure additiveField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Additive name.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Additive name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameAdd", DataType="String64")]
        public string NameAdd {
            get {
                return this.nameAddField;
            }
            set {
                this.nameAddField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Additive type or function (e.g., retarder, visosifier, weighting agent).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Additive type or function (e.g., retarder, visosifier, weighting agent).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeAdd", DataType="String64")]
        public string TypeAdd {
            get {
                return this.typeAddField;
            }
            set {
                this.typeAddField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Wet or dry.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Wet or dry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormAdd", DataType="String64")]
        public string FormAdd {
            get {
                return this.formAddField;
            }
            set {
                this.formAddField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Additive density.</summary>
        [System.ComponentModel.DescriptionAttribute("Additive density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensAdd", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensAdd {
            get {
                return this.densAddField;
            }
            set {
                this.densAddField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Additive amount.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Additive amount.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Additive", DataType="MassMeasure")]
        public MassMeasure Additive {
            get {
                return this.additiveField;
            }
            set {
                this.additiveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the additive.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the additive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VolumePerMassMeasure {
        
        private VolumePerMassUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="VolumePerMassUom")]
        public VolumePerMassUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/kg")]
        Item001Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[UK]")]
        bbltonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[US]")]
        bbltonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/g")]
        cm3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kg")]
        dm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/t")]
        dm3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/kg")]
        ft3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbm")]
        ft3lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/sack[94lbm]")]
        ft3sack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/lbm")]
        galUKlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/lbm")]
        galUSlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/sack[94lbm]")]
        galUSsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[UK]")]
        galUStonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[US]")]
        galUStonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kg")]
        Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/t")]
        Lt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/ton[UK]")]
        LtonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/g")]
        m3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kg")]
        m3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/t")]
        m3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[UK]")]
        m3tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[US]")]
        m3tonUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementingFluid {
        
        private TimeMeasure eTimTransitionsField;
        
        private TimeMeasure eTimZeroGelField;
        
        private string typeFluidField;
        
        private long fluidIndexField;
        
        private bool fluidIndexFieldSpecified;
        
        private string descFluidField;
        
        private string purposeField;
        
        private string classSlurryDryBlendField;
        
        private MdInterval slurryPlacementIntervalField;
        
        private string sourceWaterField;
        
        private VolumeMeasure volWaterField;
        
        private VolumeMeasure volCementField;
        
        private VolumePerMassMeasure ratioMixWaterField;
        
        private VolumeMeasure volFluidField;
        
        private VolumePerVolumeMeasure excessPcField;
        
        private VolumePerMassMeasure volYieldField;
        
        private MassPerVolumeMeasure densityField;
        
        private VolumePerVolumeMeasure solidVolumeFractionField;
        
        private VolumeMeasure volPumpedField;
        
        private VolumeMeasure volOtherField;
        
        private string fluidRheologicalModelField;
        
        private DynamicViscosityMeasure viscosityField;
        
        private PressureMeasure ypField;
        
        private DimensionlessMeasure nField;
        
        private DimensionlessMeasure kField;
        
        private PlaneAngleMeasure gel10SecReadingField;
        
        private PressureMeasure gel10SecStrengthField;
        
        private PlaneAngleMeasure gel1MinReadingField;
        
        private PressureMeasure gel1MinStrengthField;
        
        private PlaneAngleMeasure gel10MinReadingField;
        
        private PressureMeasure gel10MinStrengthField;
        
        private string typeBaseFluidField;
        
        private MassPerVolumeMeasure densBaseFluidField;
        
        private string dryBlendNameField;
        
        private string dryBlendDescriptionField;
        
        private MassMeasure massDryBlendField;
        
        private MassPerVolumeMeasure densDryBlendField;
        
        private MassMeasure massSackDryBlendField;
        
        private bool foamUsedField;
        
        private bool foamUsedFieldSpecified;
        
        private string typeGasFoamField;
        
        private VolumeMeasure volGasFoamField;
        
        private VolumePerVolumeMeasure ratioConstGasMethodAvField;
        
        private MassPerVolumeMeasure densConstGasMethodField;
        
        private VolumePerVolumeMeasure ratioConstGasMethodStartField;
        
        private VolumePerVolumeMeasure ratioConstGasMethodEndField;
        
        private MassPerVolumeMeasure densConstGasFoamField;
        
        private TimeMeasure eTimThickeningField;
        
        private ThermodynamicTemperatureMeasure tempThickeningField;
        
        private PressureMeasure presTestThickeningField;
        
        private DimensionlessMeasure consTestThickeningField;
        
        private VolumePerVolumeMeasure pcFreeWaterField;
        
        private ThermodynamicTemperatureMeasure tempFreeWaterField;
        
        private VolumeMeasure volTestFluidLossField;
        
        private ThermodynamicTemperatureMeasure tempFluidLossField;
        
        private PressureMeasure presTestFluidLossField;
        
        private TimeMeasure timeFluidLossField;
        
        private VolumeMeasure volAPIFluidLossField;
        
        private TimeMeasure eTimComprStren1Field;
        
        private TimeMeasure eTimComprStren2Field;
        
        private PressureMeasure presComprStren1Field;
        
        private PressureMeasure presComprStren2Field;
        
        private ThermodynamicTemperatureMeasure tempComprStren1Field;
        
        private ThermodynamicTemperatureMeasure tempComprStren2Field;
        
        private MassPerVolumeMeasure densAtPresField;
        
        private VolumeMeasure volReservedField;
        
        private VolumeMeasure volTotSlurryField;
        
        private CementAdditive[] cementAdditiveField;
        
        private Rheometer[] rheometerField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The elapsed time between the development of 100lbf/100sq ft gel strength and 500lbf/100 sq ft gel strength.</summary>
        [System.ComponentModel.DescriptionAttribute("The elapsed time between the development of 100lbf/100sq ft gel strength and 500l" +
            "bf/100 sq ft gel strength.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimTransitions", DataType="TimeMeasure")]
        public TimeMeasure ETimTransitions {
            get {
                return this.eTimTransitionsField;
            }
            set {
                this.eTimTransitionsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The elapsed time from initiation of the static portion of the test until the slurry attains a gel strength of 100lbf/100sq ft.</summary>
        [System.ComponentModel.DescriptionAttribute("The elapsed time from initiation of the static portion of the test until the slur" +
            "ry attains a gel strength of 100lbf/100sq ft.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimZeroGel", DataType="TimeMeasure")]
        public TimeMeasure ETimZeroGel {
            get {
                return this.eTimZeroGelField;
            }
            set {
                this.eTimZeroGelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid type: Mud, Wash, Spacer, Slurry.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Fluid type: Mud, Wash, Spacer, Slurry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeFluid", DataType="String64")]
        public string TypeFluid {
            get {
                return this.typeFluidField;
            }
            set {
                this.typeFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid Index: 1: first fluid pumped (= original mud), last - 1 = tail cement, last = displacement mud.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid Index: 1: first fluid pumped (= original mud), last - 1 = tail cement, last" +
            " = displacement mud.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidIndex", DataType="PositiveLong")]
        public long FluidIndex {
            get {
                return this.fluidIndexField;
            }
            set {
                this.fluidIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidIndexSpecified {
            get {
                return this.fluidIndexFieldSpecified;
            }
            set {
                this.fluidIndexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Fluid description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescFluid", DataType="String64")]
        public string DescFluid {
            get {
                return this.descFluidField;
            }
            set {
                this.descFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Purpose description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Purpose description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Purpose", DataType="String64")]
        public string Purpose {
            get {
                return this.purposeField;
            }
            set {
                this.purposeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Slurry class.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Slurry class.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClassSlurryDryBlend", DataType="String64")]
        public string ClassSlurryDryBlend {
            get {
                return this.classSlurryDryBlendField;
            }
            set {
                this.classSlurryDryBlendField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval between the top and base of the slurry placement.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval between the top and base of the slurry placement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlurryPlacementInterval", DataType="MdInterval")]
        public MdInterval SlurryPlacementInterval {
            get {
                return this.slurryPlacementIntervalField;
            }
            set {
                this.slurryPlacementIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water source description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Water source description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SourceWater", DataType="String64")]
        public string SourceWater {
            get {
                return this.sourceWaterField;
            }
            set {
                this.sourceWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of water.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolWater", DataType="VolumeMeasure")]
        public VolumeMeasure VolWater {
            get {
                return this.volWaterField;
            }
            set {
                this.volWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of cement.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of cement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolCement", DataType="VolumeMeasure")]
        public VolumeMeasure VolCement {
            get {
                return this.volCementField;
            }
            set {
                this.volCementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mix-water ratio.</summary>
        [System.ComponentModel.DescriptionAttribute("Mix-water ratio.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatioMixWater", DataType="VolumePerMassMeasure")]
        public VolumePerMassMeasure RatioMixWater {
            get {
                return this.ratioMixWaterField;
            }
            set {
                this.ratioMixWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid/slurry volume.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid/slurry volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolFluid", DataType="VolumeMeasure")]
        public VolumeMeasure VolFluid {
            get {
                return this.volFluidField;
            }
            set {
                this.volFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Excess percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Excess percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExcessPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure ExcessPc {
            get {
                return this.excessPcField;
            }
            set {
                this.excessPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Slurry yield.</summary>
        [System.ComponentModel.DescriptionAttribute("Slurry yield.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolYield", DataType="VolumePerMassMeasure")]
        public VolumePerMassMeasure VolYield {
            get {
                return this.volYieldField;
            }
            set {
                this.volYieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid density.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Equals 1 - Porosity.</summary>
        [System.ComponentModel.DescriptionAttribute("Equals 1 - Porosity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolidVolumeFraction", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolidVolumeFraction {
            get {
                return this.solidVolumeFractionField;
            }
            set {
                this.solidVolumeFractionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume pumped.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume pumped.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolPumped", DataType="VolumeMeasure")]
        public VolumeMeasure VolPumped {
            get {
                return this.volPumpedField;
            }
            set {
                this.volPumpedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Other volume.</summary>
        [System.ComponentModel.DescriptionAttribute("Other volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolOther", DataType="VolumeMeasure")]
        public VolumeMeasure VolOther {
            get {
                return this.volOtherField;
            }
            set {
                this.volOtherField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Specify one of these models: Newtonian, Bingham, Power Law, and Herschel Bulkley.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Specify one of these models: Newtonian, Bingham, Power Law, and Herschel Bulkley." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidRheologicalModel", DataType="String64")]
        public string FluidRheologicalModel {
            get {
                return this.fluidRheologicalModelField;
            }
            set {
                this.fluidRheologicalModelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Viscosity (if Newtonian model) or plastic viscosity (if Bingham model).</summary>
        [System.ComponentModel.DescriptionAttribute("Viscosity (if Newtonian model) or plastic viscosity (if Bingham model).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Viscosity", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure Viscosity {
            get {
                return this.viscosityField;
            }
            set {
                this.viscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Yield point (Bingham and Herschel Bulkley models).</summary>
        [System.ComponentModel.DescriptionAttribute("Yield point (Bingham and Herschel Bulkley models).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Yp", DataType="PressureMeasure")]
        public PressureMeasure Yp {
            get {
                return this.ypField;
            }
            set {
                this.ypField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Power Law index (Power Law and Herschel Bulkley models).</summary>
        [System.ComponentModel.DescriptionAttribute("Power Law index (Power Law and Herschel Bulkley models).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("N", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure N {
            get {
                return this.nField;
            }
            set {
                this.nField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Consistency index (Power Law and Herschel Bulkley models).</summary>
        [System.ComponentModel.DescriptionAttribute("Consistency index (Power Law and Herschel Bulkley models).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("K", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure K {
            get {
                return this.kField;
            }
            set {
                this.kField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gel reading after 10 seconds.</summary>
        [System.ComponentModel.DescriptionAttribute("Gel reading after 10 seconds.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel10SecReading", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Gel10SecReading {
            get {
                return this.gel10SecReadingField;
            }
            set {
                this.gel10SecReadingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gel strength after 10 seconds.</summary>
        [System.ComponentModel.DescriptionAttribute("Gel strength after 10 seconds.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel10SecStrength", DataType="PressureMeasure")]
        public PressureMeasure Gel10SecStrength {
            get {
                return this.gel10SecStrengthField;
            }
            set {
                this.gel10SecStrengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gel reading after 1 minute.</summary>
        [System.ComponentModel.DescriptionAttribute("Gel reading after 1 minute.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel1MinReading", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Gel1MinReading {
            get {
                return this.gel1MinReadingField;
            }
            set {
                this.gel1MinReadingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gel strength after 1 minute.</summary>
        [System.ComponentModel.DescriptionAttribute("Gel strength after 1 minute.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel1MinStrength", DataType="PressureMeasure")]
        public PressureMeasure Gel1MinStrength {
            get {
                return this.gel1MinStrengthField;
            }
            set {
                this.gel1MinStrengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gel reading after 10 minutes.</summary>
        [System.ComponentModel.DescriptionAttribute("Gel reading after 10 minutes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel10MinReading", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Gel10MinReading {
            get {
                return this.gel10MinReadingField;
            }
            set {
                this.gel10MinReadingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gel strength after 10 minutes.</summary>
        [System.ComponentModel.DescriptionAttribute("Gel strength after 10 minutes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel10MinStrength", DataType="PressureMeasure")]
        public PressureMeasure Gel10MinStrength {
            get {
                return this.gel10MinStrengthField;
            }
            set {
                this.gel10MinStrengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of base fluid: fresh water, sea water, brine, brackish water.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of base fluid: fresh water, sea water, brine, brackish water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeBaseFluid", DataType="String64")]
        public string TypeBaseFluid {
            get {
                return this.typeBaseFluidField;
            }
            set {
                this.typeBaseFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Density of base fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("Density of base fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensBaseFluid", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensBaseFluid {
            get {
                return this.densBaseFluidField;
            }
            set {
                this.densBaseFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of dry blend.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of dry blend.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DryBlendName", DataType="String64")]
        public string DryBlendName {
            get {
                return this.dryBlendNameField;
            }
            set {
                this.dryBlendNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of dry blend.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of dry blend.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DryBlendDescription", DataType="String64")]
        public string DryBlendDescription {
            get {
                return this.dryBlendDescriptionField;
            }
            set {
                this.dryBlendDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mass of dry blend: the blend is made of different solid additives: the volume is not constant.</summary>
        [System.ComponentModel.DescriptionAttribute("Mass of dry blend: the blend is made of different solid additives: the volume is " +
            "not constant.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassDryBlend", DataType="MassMeasure")]
        public MassMeasure MassDryBlend {
            get {
                return this.massDryBlendField;
            }
            set {
                this.massDryBlendField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Density of dry blend.</summary>
        [System.ComponentModel.DescriptionAttribute("Density of dry blend.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensDryBlend", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensDryBlend {
            get {
                return this.densDryBlendField;
            }
            set {
                this.densDryBlendField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight of a sack of dry blend.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight of a sack of dry blend.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MassSackDryBlend", DataType="MassMeasure")]
        public MassMeasure MassSackDryBlend {
            get {
                return this.massSackDryBlendField;
            }
            set {
                this.massSackDryBlendField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Foam used?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Foam used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FoamUsed", DataType="boolean")]
        public bool FoamUsed {
            get {
                return this.foamUsedField;
            }
            set {
                this.foamUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FoamUsedSpecified {
            get {
                return this.foamUsedFieldSpecified;
            }
            set {
                this.foamUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gas type used for foam job.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Gas type used for foam job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeGasFoam", DataType="String64")]
        public string TypeGasFoam {
            get {
                return this.typeGasFoamField;
            }
            set {
                this.typeGasFoamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of gas used for foam job.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of gas used for foam job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolGasFoam", DataType="VolumeMeasure")]
        public VolumeMeasure VolGasFoam {
            get {
                return this.volGasFoamField;
            }
            set {
                this.volGasFoamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Constant gas ratio method ratio.</summary>
        [System.ComponentModel.DescriptionAttribute("Constant gas ratio method ratio.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatioConstGasMethodAv", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure RatioConstGasMethodAv {
            get {
                return this.ratioConstGasMethodAvField;
            }
            set {
                this.ratioConstGasMethodAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Constant gas ratio method: average density.</summary>
        [System.ComponentModel.DescriptionAttribute("Constant gas ratio method: average density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensConstGasMethod", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensConstGasMethod {
            get {
                return this.densConstGasMethodField;
            }
            set {
                this.densConstGasMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Constant gas ratio method: initial method ratio.</summary>
        [System.ComponentModel.DescriptionAttribute("Constant gas ratio method: initial method ratio.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatioConstGasMethodStart", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure RatioConstGasMethodStart {
            get {
                return this.ratioConstGasMethodStartField;
            }
            set {
                this.ratioConstGasMethodStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Constant gas ratio method: final method ratio.</summary>
        [System.ComponentModel.DescriptionAttribute("Constant gas ratio method: final method ratio.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatioConstGasMethodEnd", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure RatioConstGasMethodEnd {
            get {
                return this.ratioConstGasMethodEndField;
            }
            set {
                this.ratioConstGasMethodEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Constant gas ratio method: average density.</summary>
        [System.ComponentModel.DescriptionAttribute("Constant gas ratio method: average density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensConstGasFoam", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensConstGasFoam {
            get {
                return this.densConstGasFoamField;
            }
            set {
                this.densConstGasFoamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test thickening time.</summary>
        [System.ComponentModel.DescriptionAttribute("Test thickening time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimThickening", DataType="TimeMeasure")]
        public TimeMeasure ETimThickening {
            get {
                return this.eTimThickeningField;
            }
            set {
                this.eTimThickeningField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test thickening temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Test thickening temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempThickening", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempThickening {
            get {
                return this.tempThickeningField;
            }
            set {
                this.tempThickeningField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test thickening pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Test thickening pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresTestThickening", DataType="PressureMeasure")]
        public PressureMeasure PresTestThickening {
            get {
                return this.presTestThickeningField;
            }
            set {
                this.presTestThickeningField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test thickening consistency/slurry viscosity: Bearden Consistency (Bc) 0 to 100.</summary>
        [System.ComponentModel.DescriptionAttribute("Test thickening consistency/slurry viscosity: Bearden Consistency (Bc) 0 to 100.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConsTestThickening", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure ConsTestThickening {
            get {
                return this.consTestThickeningField;
            }
            set {
                this.consTestThickeningField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test free water na: = mL/250ML.</summary>
        [System.ComponentModel.DescriptionAttribute("Test free water na: = mL/250ML.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PcFreeWater", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure PcFreeWater {
            get {
                return this.pcFreeWaterField;
            }
            set {
                this.pcFreeWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test free water temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Test free water temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempFreeWater", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempFreeWater {
            get {
                return this.tempFreeWaterField;
            }
            set {
                this.tempFreeWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test fluid loss.</summary>
        [System.ComponentModel.DescriptionAttribute("Test fluid loss.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolTestFluidLoss", DataType="VolumeMeasure")]
        public VolumeMeasure VolTestFluidLoss {
            get {
                return this.volTestFluidLossField;
            }
            set {
                this.volTestFluidLossField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test fluid loss temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Test fluid loss temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempFluidLoss", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempFluidLoss {
            get {
                return this.tempFluidLossField;
            }
            set {
                this.tempFluidLossField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test fluid loss pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Test fluid loss pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresTestFluidLoss", DataType="PressureMeasure")]
        public PressureMeasure PresTestFluidLoss {
            get {
                return this.presTestFluidLossField;
            }
            set {
                this.presTestFluidLossField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test fluid loss: dehydrating test period, used to compute the API fluid loss.</summary>
        [System.ComponentModel.DescriptionAttribute("Test fluid loss: dehydrating test period, used to compute the API fluid loss.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeFluidLoss", DataType="TimeMeasure")]
        public TimeMeasure TimeFluidLoss {
            get {
                return this.timeFluidLossField;
            }
            set {
                this.timeFluidLossField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>API fluid loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss).</summary>
        [System.ComponentModel.DescriptionAttribute("API fluid loss = 2 * volTestFluidLoss * SQRT(30/timefluidloss).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolAPIFluidLoss", DataType="VolumeMeasure")]
        public VolumeMeasure VolAPIFluidLoss {
            get {
                return this.volAPIFluidLossField;
            }
            set {
                this.volAPIFluidLossField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Compressive strength time 1.</summary>
        [System.ComponentModel.DescriptionAttribute("Compressive strength time 1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimComprStren1", DataType="TimeMeasure")]
        public TimeMeasure ETimComprStren1 {
            get {
                return this.eTimComprStren1Field;
            }
            set {
                this.eTimComprStren1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Compressive strength time 2.</summary>
        [System.ComponentModel.DescriptionAttribute("Compressive strength time 2.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimComprStren2", DataType="TimeMeasure")]
        public TimeMeasure ETimComprStren2 {
            get {
                return this.eTimComprStren2Field;
            }
            set {
                this.eTimComprStren2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Compressive strength pressure 1.</summary>
        [System.ComponentModel.DescriptionAttribute("Compressive strength pressure 1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresComprStren1", DataType="PressureMeasure")]
        public PressureMeasure PresComprStren1 {
            get {
                return this.presComprStren1Field;
            }
            set {
                this.presComprStren1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Compressive strength pressure 2.</summary>
        [System.ComponentModel.DescriptionAttribute("Compressive strength pressure 2.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresComprStren2", DataType="PressureMeasure")]
        public PressureMeasure PresComprStren2 {
            get {
                return this.presComprStren2Field;
            }
            set {
                this.presComprStren2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Compressive strength temperature 1.</summary>
        [System.ComponentModel.DescriptionAttribute("Compressive strength temperature 1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempComprStren1", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempComprStren1 {
            get {
                return this.tempComprStren1Field;
            }
            set {
                this.tempComprStren1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Compressive strength temperature 2.</summary>
        [System.ComponentModel.DescriptionAttribute("Compressive strength temperature 2.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempComprStren2", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempComprStren2 {
            get {
                return this.tempComprStren2Field;
            }
            set {
                this.tempComprStren2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Slurry density at pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Slurry density at pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensAtPres", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensAtPres {
            get {
                return this.densAtPresField;
            }
            set {
                this.densAtPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume reserved.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume reserved.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolReserved", DataType="VolumeMeasure")]
        public VolumeMeasure VolReserved {
            get {
                return this.volReservedField;
            }
            set {
                this.volReservedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total Slurry Volume.</summary>
        [System.ComponentModel.DescriptionAttribute("Total Slurry Volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolTotSlurry", DataType="VolumeMeasure")]
        public VolumeMeasure VolTotSlurry {
            get {
                return this.volTotSlurryField;
            }
            set {
                this.volTotSlurryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CementAdditive")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementAdditive", DataType="CementAdditive")]
        public CementAdditive[] CementAdditive {
            get {
                return this.cementAdditiveField;
            }
            set {
                this.cementAdditiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Rheometer")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rheometer", DataType="Rheometer")]
        public Rheometer[] Rheometer {
            get {
                return this.rheometerField;
            }
            set {
                this.rheometerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this cementing fluid.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this cementing fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Rheometer {
        
        private ThermodynamicTemperatureMeasure tempRheomField;
        
        private PressureMeasure presRheomField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private RheometerViscosity[] viscosityField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Rheometer temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Rheometer temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempRheom", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempRheom {
            get {
                return this.tempRheomField;
            }
            set {
                this.tempRheomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rheometer pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Rheometer pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresRheom", DataType="PressureMeasure")]
        public PressureMeasure PresRheom {
            get {
                return this.presRheomField;
            }
            set {
                this.presRheomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Viscosity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Viscosity", DataType="RheometerViscosity")]
        public RheometerViscosity[] Viscosity {
            get {
                return this.viscosityField;
            }
            set {
                this.viscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Rheometer.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Rheometer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RheometerViscosity {
        
        private AngularVelocityMeasure speedField;
        
        private double viscosityField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Rotational speed of the rheometer, typically in RPM.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Rotational speed of the rheometer, typically in RPM.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Speed", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure Speed {
            get {
                return this.speedField;
            }
            set {
                this.speedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The raw reading from a rheometer. This could be , but is not necessarily, a viscosity.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The raw reading from a rheometer. This could be , but is not necessarily, a visco" +
            "sity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Viscosity", DataType="double")]
        public double Viscosity {
            get {
                return this.viscosityField;
            }
            set {
                this.viscosityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of RheometerViscosity.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of RheometerViscosity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementPumpScheduleStep {
        
        private string fluidReferenceIdField;
        
        private VolumePerVolumeMeasure ratioFluidExcessField;
        
        private TimeMeasure eTimPumpField;
        
        private VolumePerTimeMeasure ratePumpField;
        
        private VolumeMeasure volPumpField;
        
        private int strokePumpField;
        
        private bool strokePumpFieldSpecified;
        
        private PressureMeasure presBackField;
        
        private TimeMeasure eTimShutdownField;
        
        private string commentsField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>UUID feference to a fluid used in CementJob.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("UUID feference to a fluid used in CementJob.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidReferenceId", DataType="UuidString")]
        public string FluidReferenceId {
            get {
                return this.fluidReferenceIdField;
            }
            set {
                this.fluidReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ratio of excess fluid to total fluid pumped during the step.</summary>
        [System.ComponentModel.DescriptionAttribute("The ratio of excess fluid to total fluid pumped during the step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatioFluidExcess", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure RatioFluidExcess {
            get {
                return this.ratioFluidExcessField;
            }
            set {
                this.ratioFluidExcessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The duration of the fluid pumping.</summary>
        [System.ComponentModel.DescriptionAttribute("The duration of the fluid pumping.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimPump", DataType="TimeMeasure")]
        public TimeMeasure ETimPump {
            get {
                return this.eTimPumpField;
            }
            set {
                this.eTimPumpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rate at which the fluid is pumped. 0 means it is a pause.</summary>
        [System.ComponentModel.DescriptionAttribute("Rate at which the fluid is pumped. 0 means it is a pause.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatePump", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure RatePump {
            get {
                return this.ratePumpField;
            }
            set {
                this.ratePumpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume pumped = eTimPump * ratePump.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume pumped = eTimPump * ratePump.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolPump", DataType="VolumeMeasure")]
        public VolumeMeasure VolPump {
            get {
                return this.volPumpField;
            }
            set {
                this.volPumpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of pump strokes for the fluid to be pumped (assumes the pump output is known).</summary>
        [System.ComponentModel.DescriptionAttribute("Number of pump strokes for the fluid to be pumped (assumes the pump output is kno" +
            "wn).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StrokePump", DataType="int")]
        public int StrokePump {
            get {
                return this.strokePumpField;
            }
            set {
                this.strokePumpField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StrokePumpSpecified {
            get {
                return this.strokePumpFieldSpecified;
            }
            set {
                this.strokePumpFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Back pressure applied during the pumping stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Back pressure applied during the pumping stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBack", DataType="PressureMeasure")]
        public PressureMeasure PresBack {
            get {
                return this.presBackField;
            }
            set {
                this.presBackField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The duration of the shutdown event.</summary>
        [System.ComponentModel.DescriptionAttribute("The duration of the shutdown event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimShutdown", DataType="TimeMeasure")]
        public TimeMeasure ETimShutdown {
            get {
                return this.eTimShutdownField;
            }
            set {
                this.eTimShutdownField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this pump schedule step.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this pump schedule step.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class FluidLocation {
        
        private string fluidReferenceIdField;
        
        private LengthMeasure mDFluidBaseField;
        
        private LengthMeasure mDFluidTopField;
        
        private VolumeMeasure volumeField;
        
        private WellboreFluidLocation locationTypeField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Reference to fluid used in the CementJob.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("Reference to fluid used in the CementJob.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidReferenceId", DataType="UuidString")]
        public string FluidReferenceId {
            get {
                return this.fluidReferenceIdField;
            }
            set {
                this.fluidReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the base of the cement.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Measured depth of the base of the cement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MDFluidBase", DataType="LengthMeasure")]
        public LengthMeasure MDFluidBase {
            get {
                return this.mDFluidBaseField;
            }
            set {
                this.mDFluidBaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at the top of the interval.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Measured depth at the top of the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MDFluidTop", DataType="LengthMeasure")]
        public LengthMeasure MDFluidTop {
            get {
                return this.mDFluidTopField;
            }
            set {
                this.mDFluidTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of fluid at this location.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Volume of fluid at this location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Volume", DataType="VolumeMeasure")]
        public VolumeMeasure Volume {
            get {
                return this.volumeField;
            }
            set {
                this.volumeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocationType", DataType="WellboreFluidLocation")]
        public WellboreFluidLocation LocationType {
            get {
                return this.locationTypeField;
            }
            set {
                this.locationTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of FluidLocation.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of FluidLocation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellboreFluidLocation {
        
        /// <remarks/>
        annulus,
        
        /// <remarks/>
        deadend,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in pipe")]
        inpipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rat hole")]
        rathole,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementStageReport))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementDesignStage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementStageDesign))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractCementStage {
        
        private bool annularFlowAfterField;
        
        private bool annularFlowAfterFieldSpecified;
        
        private ForceMeasure reciprocationSlackoffField;
        
        private bool botPlugField;
        
        private bool botPlugFieldSpecified;
        
        private int botPlugNumberField;
        
        private bool botPlugNumberFieldSpecified;
        
        private LengthMeasure diaTailPipeField;
        
        private string displacementFluidRefIdField;
        
        private TimeMeasure eTimPresHeldField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private VolumePerTimeMeasure flowrateMudCircField;
        
        private PressureMeasure gel10MinField;
        
        private PressureMeasure gel10SecField;
        
        private MeasuredDepthCoord mdCircOutField;
        
        private MeasuredDepthCoord mdCoilTbgField;
        
        private MeasuredDepthCoord mdStringField;
        
        private MeasuredDepthCoord mdToolField;
        
        private string mixMethodField;
        
        private int numStageField;
        
        private ForceMeasure reciprocationOverpullField;
        
        private bool pillBelowPlugField;
        
        private bool pillBelowPlugFieldSpecified;
        
        private bool plugCatcherField;
        
        private bool plugCatcherFieldSpecified;
        
        private PressureMeasure presBackPressureField;
        
        private PressureMeasure presBumpField;
        
        private PressureMeasure presCoilTbgEndField;
        
        private PressureMeasure presCoilTbgStartField;
        
        private PressureMeasure presCsgEndField;
        
        private PressureMeasure presCsgStartField;
        
        private PressureMeasure presDisplaceField;
        
        private PressureMeasure presHeldField;
        
        private PressureMeasure presMudCircField;
        
        private PressureMeasure presTbgEndField;
        
        private PressureMeasure presTbgStartField;
        
        private DynamicViscosityMeasure pvMudField;
        
        private string squeezeObjectiveField;
        
        private MdInterval stageMdIntervalField;
        
        private bool tailPipePerfField;
        
        private bool tailPipePerfFieldSpecified;
        
        private bool tailPipeUsedField;
        
        private bool tailPipeUsedFieldSpecified;
        
        private ThermodynamicTemperatureMeasure tempBHCTField;
        
        private ThermodynamicTemperatureMeasure tempBHSTField;
        
        private bool topPlugField;
        
        private bool topPlugFieldSpecified;
        
        private string typeOriginalMudField;
        
        private string typeStageField;
        
        private VolumeMeasure volCircPriorField;
        
        private VolumeMeasure volCsgInField;
        
        private VolumeMeasure volCsgOutField;
        
        private VolumeMeasure volDisplaceFluidField;
        
        private VolumeMeasure volExcessField;
        
        private string volExcessMethodField;
        
        private VolumeMeasure volMudLostField;
        
        private VolumeMeasure volReturnsField;
        
        private MassPerVolumeMeasure wtMudField;
        
        private PressureMeasure ypMudField;
        
        private FluidLocation[] originalFluidLocationField;
        
        private FluidLocation[] endingFluidLocationField;
        
        private CementPumpScheduleStep[] stepField;
        
        /// <remarks/>
        /// <summary>Annular flow present after the stage was completed?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Annular flow present after the stage was completed?  Values are \"true\" (or \"1\") a" +
            "nd \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AnnularFlowAfter", DataType="boolean")]
        public bool AnnularFlowAfter {
            get {
                return this.annularFlowAfterField;
            }
            set {
                this.annularFlowAfterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AnnularFlowAfterSpecified {
            get {
                return this.annularFlowAfterFieldSpecified;
            }
            set {
                this.annularFlowAfterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Slackoff for reciprocation.</summary>
        [System.ComponentModel.DescriptionAttribute("Slackoff for reciprocation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReciprocationSlackoff", DataType="ForceMeasure")]
        public ForceMeasure ReciprocationSlackoff {
            get {
                return this.reciprocationSlackoffField;
            }
            set {
                this.reciprocationSlackoffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bottom plug used?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Bottom plug used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BotPlug", DataType="boolean")]
        public bool BotPlug {
            get {
                return this.botPlugField;
            }
            set {
                this.botPlugField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BotPlugSpecified {
            get {
                return this.botPlugFieldSpecified;
            }
            set {
                this.botPlugFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Amount of bottom plug used.</summary>
        [System.ComponentModel.DescriptionAttribute("Amount of bottom plug used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BotPlugNumber", DataType="int")]
        public int BotPlugNumber {
            get {
                return this.botPlugNumberField;
            }
            set {
                this.botPlugNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BotPlugNumberSpecified {
            get {
                return this.botPlugNumberFieldSpecified;
            }
            set {
                this.botPlugNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tail pipe size (diameter).</summary>
        [System.ComponentModel.DescriptionAttribute("Tail pipe size (diameter).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaTailPipe", DataType="LengthMeasure")]
        public LengthMeasure DiaTailPipe {
            get {
                return this.diaTailPipeField;
            }
            set {
                this.diaTailPipeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to displacement fluid properties.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("Reference to displacement fluid properties.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DisplacementFluidRefId", DataType="UuidString")]
        public string DisplacementFluidRefId {
            get {
                return this.displacementFluidRefIdField;
            }
            set {
                this.displacementFluidRefIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time the pressure was held.</summary>
        [System.ComponentModel.DescriptionAttribute("Time the pressure was held.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimPresHeld", DataType="TimeMeasure")]
        public TimeMeasure ETimPresHeld {
            get {
                return this.eTimPresHeldField;
            }
            set {
                this.eTimPresHeldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rate the mud was circulated during the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Rate the mud was circulated during the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateMudCirc", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateMudCirc {
            get {
                return this.flowrateMudCircField;
            }
            set {
                this.flowrateMudCircField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gels-10Min (in hole at start of job).</summary>
        [System.ComponentModel.DescriptionAttribute("Gels-10Min (in hole at start of job).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel10Min", DataType="PressureMeasure")]
        public PressureMeasure Gel10Min {
            get {
                return this.gel10MinField;
            }
            set {
                this.gel10MinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gels-10Sec (in hole at start of job).</summary>
        [System.ComponentModel.DescriptionAttribute("Gels-10Sec (in hole at start of job).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel10Sec", DataType="PressureMeasure")]
        public PressureMeasure Gel10Sec {
            get {
                return this.gel10SecField;
            }
            set {
                this.gel10SecField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Circulate out measured depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Circulate out measured depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdCircOut", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdCircOut {
            get {
                return this.mdCircOutField;
            }
            set {
                this.mdCircOutField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of coil tubing (multi-stage cement job).</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of coil tubing (multi-stage cement job).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdCoilTbg", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdCoilTbg {
            get {
                return this.mdCoilTbgField;
            }
            set {
                this.mdCoilTbgField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of string (multi-stage cement job).</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of string (multi-stage cement job).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdString", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdString {
            get {
                return this.mdStringField;
            }
            set {
                this.mdStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the tool (multi-stage cement job).</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the tool (multi-stage cement job).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdTool", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdTool {
            get {
                return this.mdToolField;
            }
            set {
                this.mdToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mix method.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Mix method.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MixMethod", DataType="String64")]
        public string MixMethod {
            get {
                return this.mixMethodField;
            }
            set {
                this.mixMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Stage number.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Stage number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumStage", DataType="int")]
        public int NumStage {
            get {
                return this.numStageField;
            }
            set {
                this.numStageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Overpull amount for reciprocation.</summary>
        [System.ComponentModel.DescriptionAttribute("Overpull amount for reciprocation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReciprocationOverpull", DataType="ForceMeasure")]
        public ForceMeasure ReciprocationOverpull {
            get {
                return this.reciprocationOverpullField;
            }
            set {
                this.reciprocationOverpullField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pill below plug?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Pill below plug?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PillBelowPlug", DataType="boolean")]
        public bool PillBelowPlug {
            get {
                return this.pillBelowPlugField;
            }
            set {
                this.pillBelowPlugField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PillBelowPlugSpecified {
            get {
                return this.pillBelowPlugFieldSpecified;
            }
            set {
                this.pillBelowPlugFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Plug catcher?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Plug catcher?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlugCatcher", DataType="boolean")]
        public bool PlugCatcher {
            get {
                return this.plugCatcherField;
            }
            set {
                this.plugCatcherField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlugCatcherSpecified {
            get {
                return this.plugCatcherFieldSpecified;
            }
            set {
                this.plugCatcherFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Constant back pressure applied while pumping the job (can be superseded by a back pressure per pumping stage).</summary>
        [System.ComponentModel.DescriptionAttribute("Constant back pressure applied while pumping the job (can be superseded by a back" +
            " pressure per pumping stage).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBackPressure", DataType="PressureMeasure")]
        public PressureMeasure PresBackPressure {
            get {
                return this.presBackPressureField;
            }
            set {
                this.presBackPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure plug bumped.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure plug bumped.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBump", DataType="PressureMeasure")]
        public PressureMeasure PresBump {
            get {
                return this.presBumpField;
            }
            set {
                this.presBumpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure coiled tubing end.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure coiled tubing end.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresCoilTbgEnd", DataType="PressureMeasure")]
        public PressureMeasure PresCoilTbgEnd {
            get {
                return this.presCoilTbgEndField;
            }
            set {
                this.presCoilTbgEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure coiled tubing start</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure coiled tubing start")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresCoilTbgStart", DataType="PressureMeasure")]
        public PressureMeasure PresCoilTbgStart {
            get {
                return this.presCoilTbgStartField;
            }
            set {
                this.presCoilTbgStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Casing pressure at the end of the job.</summary>
        [System.ComponentModel.DescriptionAttribute("Casing pressure at the end of the job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresCsgEnd", DataType="PressureMeasure")]
        public PressureMeasure PresCsgEnd {
            get {
                return this.presCsgEndField;
            }
            set {
                this.presCsgEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Casing pressure at the start of the job.</summary>
        [System.ComponentModel.DescriptionAttribute("Casing pressure at the start of the job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresCsgStart", DataType="PressureMeasure")]
        public PressureMeasure PresCsgStart {
            get {
                return this.presCsgStartField;
            }
            set {
                this.presCsgStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final displacement pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Final displacement pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresDisplace", DataType="PressureMeasure")]
        public PressureMeasure PresDisplace {
            get {
                return this.presDisplaceField;
            }
            set {
                this.presDisplaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure held to.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure held to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresHeld", DataType="PressureMeasure")]
        public PressureMeasure PresHeld {
            get {
                return this.presHeldField;
            }
            set {
                this.presHeldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud circulation pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud circulation pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresMudCirc", DataType="PressureMeasure")]
        public PressureMeasure PresMudCirc {
            get {
                return this.presMudCircField;
            }
            set {
                this.presMudCircField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tubing pressure at the end of the job (not coiled tubing).</summary>
        [System.ComponentModel.DescriptionAttribute("Tubing pressure at the end of the job (not coiled tubing).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresTbgEnd", DataType="PressureMeasure")]
        public PressureMeasure PresTbgEnd {
            get {
                return this.presTbgEndField;
            }
            set {
                this.presTbgEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tubing pressure at the start of the job (not coiled tubing).</summary>
        [System.ComponentModel.DescriptionAttribute("Tubing pressure at the start of the job (not coiled tubing).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresTbgStart", DataType="PressureMeasure")]
        public PressureMeasure PresTbgStart {
            get {
                return this.presTbgStartField;
            }
            set {
                this.presTbgStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Plastic viscosity (in the hole at the start of the job).</summary>
        [System.ComponentModel.DescriptionAttribute("Plastic viscosity (in the hole at the start of the job).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PvMud", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure PvMud {
            get {
                return this.pvMudField;
            }
            set {
                this.pvMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Squeeze objective.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Squeeze objective.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SqueezeObjective", DataType="String64")]
        public string SqueezeObjective {
            get {
                return this.squeezeObjectiveField;
            }
            set {
                this.squeezeObjectiveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval for the cement stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval for the cement stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StageMdInterval", DataType="MdInterval")]
        public MdInterval StageMdInterval {
            get {
                return this.stageMdIntervalField;
            }
            set {
                this.stageMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tail pipe perforated?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Tail pipe perforated?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TailPipePerf", DataType="boolean")]
        public bool TailPipePerf {
            get {
                return this.tailPipePerfField;
            }
            set {
                this.tailPipePerfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TailPipePerfSpecified {
            get {
                return this.tailPipePerfFieldSpecified;
            }
            set {
                this.tailPipePerfFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tail pipe used?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Tail pipe used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TailPipeUsed", DataType="boolean")]
        public bool TailPipeUsed {
            get {
                return this.tailPipeUsedField;
            }
            set {
                this.tailPipeUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TailPipeUsedSpecified {
            get {
                return this.tailPipeUsedFieldSpecified;
            }
            set {
                this.tailPipeUsedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bottomhole temperature: circulating.</summary>
        [System.ComponentModel.DescriptionAttribute("Bottomhole temperature: circulating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempBHCT", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempBHCT {
            get {
                return this.tempBHCTField;
            }
            set {
                this.tempBHCTField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bottomhole temperature: static.</summary>
        [System.ComponentModel.DescriptionAttribute("Bottomhole temperature: static.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempBHST", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempBHST {
            get {
                return this.tempBHSTField;
            }
            set {
                this.tempBHSTField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Top plug used?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Top plug used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TopPlug", DataType="boolean")]
        public bool TopPlug {
            get {
                return this.topPlugField;
            }
            set {
                this.topPlugField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TopPlugSpecified {
            get {
                return this.topPlugFieldSpecified;
            }
            set {
                this.topPlugFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of mud in the hole.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of mud in the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeOriginalMud", DataType="String64")]
        public string TypeOriginalMud {
            get {
                return this.typeOriginalMudField;
            }
            set {
                this.typeOriginalMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Stage type.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Stage type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeStage", DataType="String64")]
        public string TypeStage {
            get {
                return this.typeStageField;
            }
            set {
                this.typeStageField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total volume circulated before starting the job/stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume circulated before starting the job/stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolCircPrior", DataType="VolumeMeasure")]
        public VolumeMeasure VolCircPrior {
            get {
                return this.volCircPriorField;
            }
            set {
                this.volCircPriorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total volume inside the casing for this stage placement.</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume inside the casing for this stage placement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolCsgIn", DataType="VolumeMeasure")]
        public VolumeMeasure VolCsgIn {
            get {
                return this.volCsgInField;
            }
            set {
                this.volCsgInField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total volume outside casing for this stage placement.</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume outside casing for this stage placement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolCsgOut", DataType="VolumeMeasure")]
        public VolumeMeasure VolCsgOut {
            get {
                return this.volCsgOutField;
            }
            set {
                this.volCsgOutField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of displacement fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of displacement fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolDisplaceFluid", DataType="VolumeMeasure")]
        public VolumeMeasure VolDisplaceFluid {
            get {
                return this.volDisplaceFluidField;
            }
            set {
                this.volDisplaceFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Excess volume.</summary>
        [System.ComponentModel.DescriptionAttribute("Excess volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolExcess", DataType="VolumeMeasure")]
        public VolumeMeasure VolExcess {
            get {
                return this.volExcessField;
            }
            set {
                this.volExcessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Method to estimate excess volume.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Method to estimate excess volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolExcessMethod", DataType="String64")]
        public string VolExcessMethod {
            get {
                return this.volExcessMethodField;
            }
            set {
                this.volExcessMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total mud lost.</summary>
        [System.ComponentModel.DescriptionAttribute("Total mud lost.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudLost", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudLost {
            get {
                return this.volMudLostField;
            }
            set {
                this.volMudLostField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume of returns.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume of returns.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolReturns", DataType="VolumeMeasure")]
        public VolumeMeasure VolReturns {
            get {
                return this.volReturnsField;
            }
            set {
                this.volReturnsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud density.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WtMud", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure WtMud {
            get {
                return this.wtMudField;
            }
            set {
                this.wtMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Yield point (in the hole at the start of the job).</summary>
        [System.ComponentModel.DescriptionAttribute("Yield point (in the hole at the start of the job).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("YpMud", DataType="PressureMeasure")]
        public PressureMeasure YpMud {
            get {
                return this.ypMudField;
            }
            set {
                this.ypMudField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OriginalFluidLocation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OriginalFluidLocation", DataType="FluidLocation")]
        public FluidLocation[] OriginalFluidLocation {
            get {
                return this.originalFluidLocationField;
            }
            set {
                this.originalFluidLocationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EndingFluidLocation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndingFluidLocation", DataType="FluidLocation")]
        public FluidLocation[] EndingFluidLocation {
            get {
                return this.endingFluidLocationField;
            }
            set {
                this.endingFluidLocationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Step")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Step", DataType="CementPumpScheduleStep")]
        public CementPumpScheduleStep[] Step {
            get {
                return this.stepField;
            }
            set {
                this.stepField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementStageReport : AbstractCementStage {
        
        private Energistics.DataAccess.Timestamp dTimMixStartField;
        
        private Energistics.DataAccess.Timestamp dTimPumpStartField;
        
        private Energistics.DataAccess.Timestamp dTimPumpEndField;
        
        private Energistics.DataAccess.Timestamp dTimDisplaceStartField;
        
        private PressureMeasure presBreakDownField;
        
        private VolumePerTimeMeasure flowrateBreakDownField;
        
        private VolumePerTimeMeasure flowrateDisplaceAvField;
        
        private VolumePerTimeMeasure flowrateDisplaceMxField;
        
        private PressureMeasure presSqueezeAvField;
        
        private PressureMeasure presSqueezeEndField;
        
        private bool presSqueezeHeldField;
        
        private bool presSqueezeHeldFieldSpecified;
        
        private TimeMeasure eTimMudCirculationField;
        
        private PressureMeasure presSqueezeField;
        
        private VolumePerTimeMeasure flowrateSqueezeAvField;
        
        private VolumePerTimeMeasure flowrateSqueezeMxField;
        
        private VolumePerTimeMeasure flowrateEndField;
        
        private VolumePerTimeMeasure flowratePumpStartField;
        
        private VolumePerTimeMeasure flowratePumpEndField;
        
        private TimeMeasure visFunnelMudField;
        
        private bool plugBumpedField;
        
        private bool plugBumpedFieldSpecified;
        
        private bool squeezeObtainedField;
        
        private bool squeezeObtainedFieldSpecified;
        
        private PressureMeasure presPriorBumpField;
        
        private bool floatHeldField;
        
        private bool floatHeldFieldSpecified;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time when mixing of cement started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time when mixing of cement started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimMixStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimMixStart {
            get {
                return this.dTimMixStartField;
            }
            set {
                this.dTimMixStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time when pumping cement started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time when pumping cement started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPumpStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPumpStart {
            get {
                return this.dTimPumpStartField;
            }
            set {
                this.dTimPumpStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time when pumping cement ended.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time when pumping cement ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPumpEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPumpEnd {
            get {
                return this.dTimPumpEndField;
            }
            set {
                this.dTimPumpEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time when displacing of cement started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time when displacing of cement started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimDisplaceStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimDisplaceStart {
            get {
                return this.dTimDisplaceStartField;
            }
            set {
                this.dTimDisplaceStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Breakdown pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Breakdown pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBreakDown", DataType="PressureMeasure")]
        public PressureMeasure PresBreakDown {
            get {
                return this.presBreakDownField;
            }
            set {
                this.presBreakDownField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Breakdown rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Breakdown rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateBreakDown", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateBreakDown {
            get {
                return this.flowrateBreakDownField;
            }
            set {
                this.flowrateBreakDownField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average displacement rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Average displacement rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateDisplaceAv", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateDisplaceAv {
            get {
                return this.flowrateDisplaceAvField;
            }
            set {
                this.flowrateDisplaceAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum displacement rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum displacement rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateDisplaceMx", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateDisplaceMx {
            get {
                return this.flowrateDisplaceMxField;
            }
            set {
                this.flowrateDisplaceMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Squeeze pressure average.</summary>
        [System.ComponentModel.DescriptionAttribute("Squeeze pressure average.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresSqueezeAv", DataType="PressureMeasure")]
        public PressureMeasure PresSqueezeAv {
            get {
                return this.presSqueezeAvField;
            }
            set {
                this.presSqueezeAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Squeeze pressure final.</summary>
        [System.ComponentModel.DescriptionAttribute("Squeeze pressure final.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresSqueezeEnd", DataType="PressureMeasure")]
        public PressureMeasure PresSqueezeEnd {
            get {
                return this.presSqueezeEndField;
            }
            set {
                this.presSqueezeEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Squeeze pressure held.  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Squeeze pressure held.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresSqueezeHeld", DataType="boolean")]
        public bool PresSqueezeHeld {
            get {
                return this.presSqueezeHeldField;
            }
            set {
                this.presSqueezeHeldField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PresSqueezeHeldSpecified {
            get {
                return this.presSqueezeHeldFieldSpecified;
            }
            set {
                this.presSqueezeHeldFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Elapsed time of mud circulation before the job/stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Elapsed time of mud circulation before the job/stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimMudCirculation", DataType="TimeMeasure")]
        public TimeMeasure ETimMudCirculation {
            get {
                return this.eTimMudCirculationField;
            }
            set {
                this.eTimMudCirculationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Squeeze pressure left on pipe.</summary>
        [System.ComponentModel.DescriptionAttribute("Squeeze pressure left on pipe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresSqueeze", DataType="PressureMeasure")]
        public PressureMeasure PresSqueeze {
            get {
                return this.presSqueezeField;
            }
            set {
                this.presSqueezeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Squeeze job average rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Squeeze job average rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateSqueezeAv", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateSqueezeAv {
            get {
                return this.flowrateSqueezeAvField;
            }
            set {
                this.flowrateSqueezeAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Squeeze job maximum rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Squeeze job maximum rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateSqueezeMx", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateSqueezeMx {
            get {
                return this.flowrateSqueezeMxField;
            }
            set {
                this.flowrateSqueezeMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final displacement pump rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Final displacement pump rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateEnd", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateEnd {
            get {
                return this.flowrateEndField;
            }
            set {
                this.flowrateEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump rate at the start of the job.</summary>
        [System.ComponentModel.DescriptionAttribute("Pump rate at the start of the job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowratePumpStart", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowratePumpStart {
            get {
                return this.flowratePumpStartField;
            }
            set {
                this.flowratePumpStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump rate at the end of the job.</summary>
        [System.ComponentModel.DescriptionAttribute("Pump rate at the end of the job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowratePumpEnd", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowratePumpEnd {
            get {
                return this.flowratePumpEndField;
            }
            set {
                this.flowratePumpEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Funnel viscosity in seconds (in hole at start of job/stage).</summary>
        [System.ComponentModel.DescriptionAttribute("Funnel viscosity in seconds (in hole at start of job/stage).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VisFunnelMud", DataType="TimeMeasure")]
        public TimeMeasure VisFunnelMud {
            get {
                return this.visFunnelMudField;
            }
            set {
                this.visFunnelMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Plug bumped? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Plug bumped? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlugBumped", DataType="boolean")]
        public bool PlugBumped {
            get {
                return this.plugBumpedField;
            }
            set {
                this.plugBumpedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PlugBumpedSpecified {
            get {
                return this.plugBumpedFieldSpecified;
            }
            set {
                this.plugBumpedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Squeeze obtained.  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Squeeze obtained.  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SqueezeObtained", DataType="boolean")]
        public bool SqueezeObtained {
            get {
                return this.squeezeObtainedField;
            }
            set {
                this.squeezeObtainedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SqueezeObtainedSpecified {
            get {
                return this.squeezeObtainedFieldSpecified;
            }
            set {
                this.squeezeObtainedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure before bumping plug / pressure at the end of  the displacement.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure before bumping plug / pressure at the end of  the displacement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresPriorBump", DataType="PressureMeasure")]
        public PressureMeasure PresPriorBump {
            get {
                return this.presPriorBumpField;
            }
            set {
                this.presPriorBumpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Float held?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Float held?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FloatHeld", DataType="boolean")]
        public bool FloatHeld {
            get {
                return this.floatHeldField;
            }
            set {
                this.floatHeldField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FloatHeldSpecified {
            get {
                return this.floatHeldFieldSpecified;
            }
            set {
                this.floatHeldFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of CementStageReport</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of CementStageReport")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementDesignStage : AbstractCementStage {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementStageDesign : AbstractCementStage {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobDesign))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CementJobReport))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractCementJob {
        
        private string cementEngrField;
        
        private TimeMeasure eTimWaitingOnCementField;
        
        private MdInterval plugIntervalField;
        
        private MeasuredDepthCoord mdHoleField;
        
        private string contractorField;
        
        private AngularVelocityMeasure rpmPipeField;
        
        private MomentOfForceMeasure tqInitPipeRotField;
        
        private MomentOfForceMeasure tqPipeAvField;
        
        private MomentOfForceMeasure tqPipeMxField;
        
        private ForceMeasure overPullField;
        
        private ForceMeasure slackOffField;
        
        private AngularVelocityMeasure rpmPipeRecipField;
        
        private LengthMeasure lenPipeRecipStrokeField;
        
        private bool reciprocatingField;
        
        private bool reciprocatingFieldSpecified;
        
        /// <remarks/>
        /// <summary>Cementing engineer.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cementing engineer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementEngr", DataType="String64")]
        public string CementEngr {
            get {
                return this.cementEngrField;
            }
            set {
                this.cementEngrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Duration for waiting on cement to set.</summary>
        [System.ComponentModel.DescriptionAttribute("Duration for waiting on cement to set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimWaitingOnCement", DataType="TimeMeasure")]
        public TimeMeasure ETimWaitingOnCement {
            get {
                return this.eTimWaitingOnCementField;
            }
            set {
                this.eTimWaitingOnCementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If plug used,  measured depth interval between the top and base of the plug.</summary>
        [System.ComponentModel.DescriptionAttribute("If plug used,  measured depth interval between the top and base of the plug.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlugInterval", DataType="MdInterval")]
        public MdInterval PlugInterval {
            get {
                return this.plugIntervalField;
            }
            set {
                this.plugIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at the bottom of  the hole.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth at the bottom of  the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdHole", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdHole {
            get {
                return this.mdHoleField;
            }
            set {
                this.mdHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of cementing contractor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of cementing contractor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Contractor", DataType="String64")]
        public string Contractor {
            get {
                return this.contractorField;
            }
            set {
                this.contractorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pipe rotation rate (commonly in rotations per minute (RPM)).</summary>
        [System.ComponentModel.DescriptionAttribute("Pipe rotation rate (commonly in rotations per minute (RPM)).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RpmPipe", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure RpmPipe {
            get {
                return this.rpmPipeField;
            }
            set {
                this.rpmPipeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pipe rotation: initial torque.</summary>
        [System.ComponentModel.DescriptionAttribute("Pipe rotation: initial torque.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqInitPipeRot", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqInitPipeRot {
            get {
                return this.tqInitPipeRotField;
            }
            set {
                this.tqInitPipeRotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pipe rotation: average torque.</summary>
        [System.ComponentModel.DescriptionAttribute("Pipe rotation: average torque.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqPipeAv", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqPipeAv {
            get {
                return this.tqPipeAvField;
            }
            set {
                this.tqPipeAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pipe rotation: maximum torque.</summary>
        [System.ComponentModel.DescriptionAttribute("Pipe rotation: maximum torque.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqPipeMx", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqPipeMx {
            get {
                return this.tqPipeMxField;
            }
            set {
                this.tqPipeMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>String-up weight during reciprocation.</summary>
        [System.ComponentModel.DescriptionAttribute("String-up weight during reciprocation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverPull", DataType="ForceMeasure")]
        public ForceMeasure OverPull {
            get {
                return this.overPullField;
            }
            set {
                this.overPullField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>String-down weight during reciprocation.</summary>
        [System.ComponentModel.DescriptionAttribute("String-down weight during reciprocation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlackOff", DataType="ForceMeasure")]
        public ForceMeasure SlackOff {
            get {
                return this.slackOffField;
            }
            set {
                this.slackOffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pipe reciprocation (RPM).</summary>
        [System.ComponentModel.DescriptionAttribute("Pipe reciprocation (RPM).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RpmPipeRecip", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure RpmPipeRecip {
            get {
                return this.rpmPipeRecipField;
            }
            set {
                this.rpmPipeRecipField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pipe reciprocation: stroke length.</summary>
        [System.ComponentModel.DescriptionAttribute("Pipe reciprocation: stroke length.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenPipeRecipStroke", DataType="LengthMeasure")]
        public LengthMeasure LenPipeRecipStroke {
            get {
                return this.lenPipeRecipStrokeField;
            }
            set {
                this.lenPipeRecipStrokeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is the pipe being reciprocated (raised and lowered)?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is the pipe being reciprocated (raised and lowered)?  Values are \"true\" (or \"1\") " +
            "and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Reciprocating", DataType="boolean")]
        public bool Reciprocating {
            get {
                return this.reciprocatingField;
            }
            set {
                this.reciprocatingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReciprocatingSpecified {
            get {
                return this.reciprocatingFieldSpecified;
            }
            set {
                this.reciprocatingFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementJobDesign : AbstractCementJob {
        
        private CementStageDesign[] cementDesignStageField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CementDesignStage")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementDesignStage", DataType="CementStageDesign")]
        public CementStageDesign[] CementDesignStage {
            get {
                return this.cementDesignStageField;
            }
            set {
                this.cementDesignStageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class CementJobReport : AbstractCementJob {
        
        private Energistics.DataAccess.Timestamp dTimJobEndField;
        
        private Energistics.DataAccess.Timestamp dTimJobStartField;
        
        private Energistics.DataAccess.Timestamp dTimPlugSetField;
        
        private bool cementDrillOutField;
        
        private bool cementDrillOutFieldSpecified;
        
        private Energistics.DataAccess.Timestamp dTimCementDrillOutField;
        
        private Energistics.DataAccess.Timestamp dTimSqueezeField;
        
        private Energistics.DataAccess.Timestamp dTimPipeRotStartField;
        
        private Energistics.DataAccess.Timestamp dTimPipeRotEndField;
        
        private Energistics.DataAccess.Timestamp dTimRecipStartField;
        
        private Energistics.DataAccess.Timestamp dTimRecipEndField;
        
        private string densMeasByField;
        
        private CementStageReport[] cementReportStageField;
        
        /// <remarks/>
        /// <summary>Date and time of the end of the cement job.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time of the end of the cement job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimJobEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimJobEnd {
            get {
                return this.dTimJobEndField;
            }
            set {
                this.dTimJobEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time of the start of the cement job.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time of the start of the cement job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimJobStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimJobStart {
            get {
                return this.dTimJobStartField;
            }
            set {
                this.dTimJobStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that cement plug was set.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that cement plug was set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPlugSet", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPlugSet {
            get {
                return this.dTimPlugSetField;
            }
            set {
                this.dTimPlugSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was the cement drilled out? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Was the cement drilled out? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementDrillOut", DataType="boolean")]
        public bool CementDrillOut {
            get {
                return this.cementDrillOutField;
            }
            set {
                this.cementDrillOutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CementDrillOutSpecified {
            get {
                return this.cementDrillOutFieldSpecified;
            }
            set {
                this.cementDrillOutFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that the cement was drilled out.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that the cement was drilled out.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimCementDrillOut", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimCementDrillOut {
            get {
                return this.dTimCementDrillOutField;
            }
            set {
                this.dTimCementDrillOutField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time of a squeeze.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time of a squeeze.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimSqueeze", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimSqueeze {
            get {
                return this.dTimSqueezeField;
            }
            set {
                this.dTimSqueezeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that pipe rotation started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that pipe rotation started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPipeRotStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPipeRotStart {
            get {
                return this.dTimPipeRotStartField;
            }
            set {
                this.dTimPipeRotStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that pipe rotation started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that pipe rotation started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPipeRotEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPipeRotEnd {
            get {
                return this.dTimPipeRotEndField;
            }
            set {
                this.dTimPipeRotEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that pipe reciprocation started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that pipe reciprocation started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRecipStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRecipStart {
            get {
                return this.dTimRecipStartField;
            }
            set {
                this.dTimRecipStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that pipe reciprocation ended.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that pipe reciprocation ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRecipEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRecipEnd {
            get {
                return this.dTimRecipEndField;
            }
            set {
                this.dTimRecipEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Method by which density is measured.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Method by which density is measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensMeasBy", DataType="String64")]
        public string DensMeasBy {
            get {
                return this.densMeasByField;
            }
            set {
                this.densMeasByField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CementReportStage")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementReportStage", DataType="CementStageReport")]
        public CementStageReport[] CementReportStage {
            get {
                return this.cementReportStageField;
            }
            set {
                this.cementReportStageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("part_WellboreGeometrySection", Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    public partial class WellboreGeometrySection {
        
        private Citation citationField;
        
        private HoleCasingType typeHoleCasingField;
        
        private bool typeHoleCasingFieldSpecified;
        
        private MdInterval sectionMdIntervalField;
        
        private TvdInterval sectionTvdIntervalField;
        
        private LengthMeasure idSectionField;
        
        private LengthMeasure odSectionField;
        
        private MassPerLengthMeasure wtPerLenField;
        
        private string gradeField;
        
        private bool curveConductorField;
        
        private bool curveConductorFieldSpecified;
        
        private LengthMeasure diaDriftField;
        
        private double factFricField;
        
        private bool factFricFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private DataObjectReference[] bhaRunField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of the WellGeometrySection.</summary>
        [System.ComponentModel.DescriptionAttribute("An ISO 19115 EIP-derived set of metadata attached to ensure the traceability of t" +
            "he WellGeometrySection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Citation", DataType="Citation")]
        public Citation Citation {
            get {
                return this.citationField;
            }
            set {
                this.citationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of fixed component.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of fixed component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeHoleCasing", DataType="HoleCasingType")]
        public HoleCasingType TypeHoleCasing {
            get {
                return this.typeHoleCasingField;
            }
            set {
                this.typeHoleCasingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeHoleCasingSpecified {
            get {
                return this.typeHoleCasingFieldSpecified;
            }
            set {
                this.typeHoleCasingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval for this wellbore geometry section.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval for this wellbore geometry section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SectionMdInterval", DataType="MdInterval")]
        public MdInterval SectionMdInterval {
            get {
                return this.sectionMdIntervalField;
            }
            set {
                this.sectionMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval for this wellbore geometry section.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval for this wellbore geometry section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SectionTvdInterval", DataType="TvdInterval")]
        public TvdInterval SectionTvdInterval {
            get {
                return this.sectionTvdIntervalField;
            }
            set {
                this.sectionTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inner diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Inner diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdSection", DataType="LengthMeasure")]
        public LengthMeasure IdSection {
            get {
                return this.idSectionField;
            }
            set {
                this.idSectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outer diameter. Only for casings and risers.</summary>
        [System.ComponentModel.DescriptionAttribute("Outer diameter. Only for casings and risers.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdSection", DataType="LengthMeasure")]
        public LengthMeasure OdSection {
            get {
                return this.odSectionField;
            }
            set {
                this.odSectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight per unit length for casing sections.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight per unit length for casing sections.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WtPerLen", DataType="MassPerLengthMeasure")]
        public MassPerLengthMeasure WtPerLen {
            get {
                return this.wtPerLenField;
            }
            set {
                this.wtPerLenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Material grade for the tubular section.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Material grade for the tubular section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Grade", DataType="String64")]
        public string Grade {
            get {
                return this.gradeField;
            }
            set {
                this.gradeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Curved conductor? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Curved conductor? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurveConductor", DataType="boolean")]
        public bool CurveConductor {
            get {
                return this.curveConductorField;
            }
            set {
                this.curveConductorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CurveConductorSpecified {
            get {
                return this.curveConductorFieldSpecified;
            }
            set {
                this.curveConductorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The drift diameter is the inside diameter (ID) that the pipe manufacturer guarantees per specifications. Note that the nominal inside diameter is not the same as the drift diameter, but is always slightly larger. The drift diameter is used by the well planner to determine what size tools or casing strings can later be run through the casing, whereas the nominal inside diameter is used for fluid volume calculations, such as mud circulating times and cement slurry placement calculations. Source: www.glossary.oilfield.slb.com</summary>
        [System.ComponentModel.DescriptionAttribute(@"The drift diameter is the inside diameter (ID) that the pipe manufacturer guarantees per specifications. Note that the nominal inside diameter is not the same as the drift diameter, but is always slightly larger. The drift diameter is used by the well planner to determine what size tools or casing strings can later be run through the casing, whereas the nominal inside diameter is used for fluid volume calculations, such as mud circulating times and cement slurry placement calculations. Source: www.glossary.oilfield.slb.com")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaDrift", DataType="LengthMeasure")]
        public LengthMeasure DiaDrift {
            get {
                return this.diaDriftField;
            }
            set {
                this.diaDriftField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Friction factor.</summary>
        [System.ComponentModel.DescriptionAttribute("Friction factor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FactFric", DataType="double")]
        public double FactFric {
            get {
                return this.factFricField;
            }
            set {
                this.factFricField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FactFricSpecified {
            get {
                return this.factFricFieldSpecified;
            }
            set {
                this.factFricFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BhaRun")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BhaRun", DataType="DataObjectReference")]
        public DataObjectReference[] BhaRun {
            get {
                return this.bhaRunField;
            }
            set {
                this.bhaRunField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier of this WbGeometrySection within the WbGeometry object.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of this WbGeometrySection within the WbGeometry object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum HoleCasingType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("blow out preventer")]
        blowoutpreventer,
        
        /// <remarks/>
        casing,
        
        /// <remarks/>
        conductor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("curved conductor")]
        curvedconductor,
        
        /// <remarks/>
        liner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("open hole")]
        openhole,
        
        /// <remarks/>
        riser,
        
        /// <remarks/>
        tubing,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ChannelValueContext))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectContext))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IndexRangeContext))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractLogDataContext {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ChannelValueContext : AbstractLogDataContext {
        
        private DataObjectReference channelReferenceField;
        
        private string dataValueField;
        
        /// <remarks/>
        /// <summary>The channel refers to another Energistics data object.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The channel refers to another Energistics data object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelReference", DataType="DataObjectReference")]
        public DataObjectReference ChannelReference {
            get {
                return this.channelReferenceField;
            }
            set {
                this.channelReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A free-form format to specify the data value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A free-form format to specify the data value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataValue", DataType="string")]
        public string DataValue {
            get {
                return this.dataValueField;
            }
            set {
                this.dataValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ObjectContext : AbstractLogDataContext {
        
        private DataObjectReference objectReferenceField;
        
        private string subObjectReferenceField;
        
        /// <remarks/>
        /// <summary>The context object points to another Energistics data object.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The context object points to another Energistics data object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectReference", DataType="DataObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return this.objectReferenceField;
            }
            set {
                this.objectReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the reference is to a sub-object in a growing object  (e.g., a WellboreGeometry section), then this must contain the UID of the growing part.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("If the reference is to a sub-object in a growing object  (e.g., a WellboreGeometr" +
            "y section), then this must contain the UID of the growing part.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubObjectReference", DataType="String64")]
        public string SubObjectReference {
            get {
                return this.subObjectReferenceField;
            }
            set {
                this.subObjectReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class IndexRangeContext : AbstractLogDataContext {
        
        private AbstractIndexValue startIndexField;
        
        private AbstractIndexValue endIndexField;
        
        /// <remarks/>
        /// <summary>When the log header defines the direction as:   - "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  -  “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"When the log header defines the direction as:   - ""Increasing"", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  -  “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartIndex", DataType="AbstractIndexValue")]
        public AbstractIndexValue StartIndex {
            get {
                return this.startIndexField;
            }
            set {
                this.startIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When the log header defines the direction as:  - "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"When the log header defines the direction as:  - ""Increasing"", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - ""Decreasing"", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndIndex", DataType="AbstractIndexValue")]
        public AbstractIndexValue EndIndex {
            get {
                return this.endIndexField;
            }
            set {
                this.endIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DepthIndexValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexValue))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PassIndexedDepth))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractIndexValue {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DepthIndexValue : AbstractIndexValue {
        
        private float depthField;
        
        /// <remarks/>
        /// <summary>Used to specify the channel start and end index.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Used to specify the channel start and end index.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Depth", DataType="float")]
        public float Depth {
            get {
                return this.depthField;
            }
            set {
                this.depthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class TimeIndexValue : AbstractIndexValue {
        
        private Energistics.DataAccess.Timestamp timeField;
        
        /// <remarks/>
        /// <summary>Used to specify the channel start and end index.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Used to specify the channel start and end index.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Time", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PassIndexedDepth : AbstractIndexValue {
        
        private int passField;
        
        private int directionField;
        
        private float depthField;
        
        /// <remarks/>
        /// <summary>The pass number. Increase the pass number each time the tool direction changes twice.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The pass number. Increase the pass number each time the tool direction changes tw" +
            "ice.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pass", DataType="int")]
        public int Pass {
            get {
                return this.passField;
            }
            set {
                this.passField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>0 = down (increasing depth) 1= up (decreasing depth) Changes each time the logging tool direction changes.  When a log starts from the bottom, start with pass = 0, direction = 1.  When you get to the top of the interval and start down again, change the pass.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"0 = down (increasing depth) 1= up (decreasing depth) Changes each time the logging tool direction changes.  When a log starts from the bottom, start with pass = 0, direction = 1.  When you get to the top of the interval and start down again, change the pass.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="int")]
        public int Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the point.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The measured depth of the point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Depth", DataType="float")]
        public float Depth {
            get {
                return this.depthField;
            }
            set {
                this.depthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ChannelData {
        
        private string dataField;
        
        private string fileUriField;
        
        /// <remarks/>
        /// <summary>The data blob in JSON form. This attribute lets you embed the bulk data in a single file with the xml, to avoid the issues that arise when splitting data across multiple files. BUSINESS RULE: Either this element or the FileUri element must be present.</summary>
        [System.ComponentModel.DescriptionAttribute("The data blob in JSON form. This attribute lets you embed the bulk data in a sing" +
            "le file with the xml, to avoid the issues that arise when splitting data across " +
            "multiple files. BUSINESS RULE: Either this element or the FileUri element must b" +
            "e present.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Data", DataType="string")]
        public string Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The URI of a file containing the bulk data. If this field is non-null, then the data field is ignored. For files written to disk, this should normally contain a simple file name in relative URI form. For example, if an application writes a log file to disk, it might write the xml as abc.xml, and the bulk data as abc.avro. In this case, the value of this element would be './abc.avro'.  BUSINESS RULE: Either this element or the Data element must be present.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.ComponentModel.DescriptionAttribute(@"The URI of a file containing the bulk data. If this field is non-null, then the data field is ignored. For files written to disk, this should normally contain a simple file name in relative URI form. For example, if an application writes a log file to disk, it might write the xml as abc.xml, and the bulk data as abc.avro. In this case, the value of this element would be './abc.avro'.  BUSINESS RULE: Either this element or the Data element must be present.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FileUri", DataType="anyURI")]
        public string FileUri {
            get {
                return this.fileUriField;
            }
            set {
                this.fileUriField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PointMetadata {
        
        private string nameField;
        
        private EtpDataType etpDataTypeField;
        
        private string descriptionField;
        
        /// <remarks/>
        /// <summary>The name of the point metadata.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the point metadata.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The underlying ETP data type of the point metadata.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The underlying ETP data type of the point metadata.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EtpDataType", DataType="EtpDataType")]
        public EtpDataType EtpDataType {
            get {
                return this.etpDataTypeField;
            }
            set {
                this.etpDataTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Free format description of the point metadata.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Free format description of the point metadata.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum EtpDataType {
        
        /// <remarks/>
        boolean,
        
        /// <remarks/>
        bytes,
        
        /// <remarks/>
        @double,
        
        /// <remarks/>
        @float,
        
        /// <remarks/>
        @int,
        
        /// <remarks/>
        @long,
        
        /// <remarks/>
        @null,
        
        /// <remarks/>
        @string,
        
        /// <remarks/>
        vector,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthMeasureExt {
        
        private string uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class LogChannelAxis {
        
        private double axisStartField;
        
        private double axisSpacingField;
        
        private long axisCountField;
        
        private string axisNameField;
        
        private string axisPropertyKindField;
        
        private Energistics.DataAccess.ExtensibleEnum<UnitOfMeasure> axisUomField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Value of the initial entry in the list of axis index values.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Value of the initial entry in the list of axis index values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisStart", DataType="double")]
        public double AxisStart {
            get {
                return this.axisStartField;
            }
            set {
                this.axisStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The increment to be used to fill out the list of the log channel axis index values.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The increment to be used to fill out the list of the log channel axis index value" +
            "s.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisSpacing", DataType="double")]
        public double AxisSpacing {
            get {
                return this.axisSpacingField;
            }
            set {
                this.axisSpacingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The count of elements along this axis of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The count of elements along this axis of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisCount", DataType="PositiveLong")]
        public long AxisCount {
            get {
                return this.axisCountField;
            }
            set {
                this.axisCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the array axis.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the array axis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisName", DataType="String64")]
        public string AxisName {
            get {
                return this.axisNameField;
            }
            set {
                this.axisNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The property type by which the array axis is classified. Like "measured depth" or "elapsed time".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The property type by which the array axis is classified. Like \"measured depth\" or" +
            " \"elapsed time\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisPropertyKind", DataType="String64")]
        public string AxisPropertyKind {
            get {
                return this.axisPropertyKindField;
            }
            set {
                this.axisPropertyKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A string representing the units of measure of the axis values.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A string representing the units of measure of the axis values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisUom", DataType="UnitOfMeasureExt")]
        public Energistics.DataAccess.ExtensibleEnum<UnitOfMeasure> AxisUom {
            get {
                return this.axisUomField;
            }
            set {
                this.axisUomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for an instance of a log channel axis</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for an instance of a log channel axis")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ChannelIndex {
        
        private ChannelIndexType indexTypeField;
        
        private Energistics.DataAccess.ExtensibleEnum<UnitOfMeasure> uomField;
        
        private IndexDirection directionField;
        
        private string mnemonicField;
        
        private string datumReferenceField;
        
        /// <remarks/>
        /// <summary>The type of index (time, depth, etc.).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of index (time, depth, etc.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexType", DataType="ChannelIndexType")]
        public ChannelIndexType IndexType {
            get {
                return this.indexTypeField;
            }
            set {
                this.indexTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The unit of measure of the index. Must be one of the units allowed for the specified IndexType (i.e., time or distance).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The unit of measure of the index. Must be one of the units allowed for the specif" +
            "ied IndexType (i.e., time or distance).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uom", DataType="UnitOfMeasureExt")]
        public Energistics.DataAccess.ExtensibleEnum<UnitOfMeasure> Uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The direction of the index, either increasing or decreasing. Index direction may not change within the life of a channel.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The direction of the index, either increasing or decreasing. Index direction may " +
            "not change within the life of a channel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="IndexDirection")]
        public IndexDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The mnemonic for the index.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The mnemonic for the index.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mnemonic", DataType="String64")]
        public string Mnemonic {
            get {
                return this.mnemonicField;
            }
            set {
                this.mnemonicField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For depth indexes, this contains the UID of the datum, in a channel's Well object, to which all of the index values are referenced.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("For depth indexes, this contains the UID of the datum, in a channel\'s Well object" +
            ", to which all of the index values are referenced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DatumReference", DataType="String64")]
        public string DatumReference {
            get {
                return this.datumReferenceField;
            }
            set {
                this.datumReferenceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ChannelIndexType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("measured depth")]
        measureddepth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("true vertical depth")]
        trueverticaldepth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pass indexed depth")]
        passindexeddepth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("date time")]
        datetime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("elapsed time")]
        elapsedtime,
        
        /// <remarks/>
        temperature,
        
        /// <remarks/>
        pressure,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum IndexDirection {
        
        /// <remarks/>
        decreasing,
        
        /// <remarks/>
        increasing,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillingParams {
        
        private TimeMeasure eTimOpBitField;
        
        private MeasuredDepthCoord mdHoleStartField;
        
        private MeasuredDepthCoord mdHoleStopField;
        
        private string tubularField;
        
        private ForceMeasure hkldRotField;
        
        private ForceMeasure overPullField;
        
        private ForceMeasure slackOffField;
        
        private ForceMeasure hkldUpField;
        
        private ForceMeasure hkldDnField;
        
        private MomentOfForceMeasure tqOnBotAvField;
        
        private MomentOfForceMeasure tqOnBotMxField;
        
        private MomentOfForceMeasure tqOnBotMnField;
        
        private MomentOfForceMeasure tqOffBotAvField;
        
        private MomentOfForceMeasure tqDhAvField;
        
        private ForceMeasure wtAboveJarField;
        
        private ForceMeasure wtBelowJarField;
        
        private MassPerVolumeMeasure wtMudField;
        
        private VolumePerTimeMeasure flowratePumpAvField;
        
        private VolumePerTimeMeasure flowratePumpMxField;
        
        private VolumePerTimeMeasure flowratePumpMnField;
        
        private LengthPerTimeMeasure velNozzleAvField;
        
        private PowerMeasure powBitField;
        
        private PressureMeasure presDropBitField;
        
        private TimeMeasure cTimHoldField;
        
        private TimeMeasure cTimSteeringField;
        
        private TimeMeasure cTimDrillRotField;
        
        private TimeMeasure cTimDrillSlidField;
        
        private TimeMeasure cTimCircField;
        
        private TimeMeasure cTimReamField;
        
        private LengthMeasure distDrillRotField;
        
        private LengthMeasure distDrillSlidField;
        
        private LengthMeasure distReamField;
        
        private LengthMeasure distHoldField;
        
        private LengthMeasure distSteeringField;
        
        private AngularVelocityMeasure rpmAvField;
        
        private AngularVelocityMeasure rpmMxField;
        
        private AngularVelocityMeasure rpmMnField;
        
        private AngularVelocityMeasure rpmAvDhField;
        
        private LengthPerTimeMeasure ropAvField;
        
        private LengthPerTimeMeasure ropMxField;
        
        private LengthPerTimeMeasure ropMnField;
        
        private ForceMeasure wobAvField;
        
        private ForceMeasure wobMxField;
        
        private ForceMeasure wobMnField;
        
        private ForceMeasure wobAvDhField;
        
        private string reasonTripField;
        
        private string objectiveBhaField;
        
        private PlaneAngleMeasure aziTopField;
        
        private PlaneAngleMeasure aziBottomField;
        
        private PlaneAngleMeasure inclStartField;
        
        private PlaneAngleMeasure inclMxField;
        
        private PlaneAngleMeasure inclMnField;
        
        private PlaneAngleMeasure inclStopField;
        
        private ThermodynamicTemperatureMeasure tempMudDhMxField;
        
        private PressureMeasure presPumpAvField;
        
        private VolumePerTimeMeasure flowrateBitField;
        
        private MudClass mudClassField;
        
        private bool mudClassFieldSpecified;
        
        private MudSubClass mudSubClassField;
        
        private bool mudSubClassFieldSpecified;
        
        private string commentsField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Operating time spent by bit for run.  BUSINESS RULE: When reporting an actual as opposed to design, this is required.</summary>
        [System.ComponentModel.DescriptionAttribute("Operating time spent by bit for run.  BUSINESS RULE: When reporting an actual as " +
            "opposed to design, this is required.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimOpBit", DataType="TimeMeasure")]
        public TimeMeasure ETimOpBit {
            get {
                return this.eTimOpBitField;
            }
            set {
                this.eTimOpBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at start of the run.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth at start of the run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdHoleStart", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdHoleStart {
            get {
                return this.mdHoleStartField;
            }
            set {
                this.mdHoleStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at the end of the run.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Measured depth at the end of the run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdHoleStop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdHoleStop {
            get {
                return this.mdHoleStopField;
            }
            set {
                this.mdHoleStopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the tubular assembly.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the tubular assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tubular", DataType="String64")]
        public string Tubular {
            get {
                return this.tubularField;
            }
            set {
                this.tubularField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hookload: rotating.</summary>
        [System.ComponentModel.DescriptionAttribute("Hookload: rotating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HkldRot", DataType="ForceMeasure")]
        public ForceMeasure HkldRot {
            get {
                return this.hkldRotField;
            }
            set {
                this.hkldRotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Overpull = HkldUp - HkldRot</summary>
        [System.ComponentModel.DescriptionAttribute("Overpull = HkldUp - HkldRot")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverPull", DataType="ForceMeasure")]
        public ForceMeasure OverPull {
            get {
                return this.overPullField;
            }
            set {
                this.overPullField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Slackoff = HkldRot  - HkdDown.</summary>
        [System.ComponentModel.DescriptionAttribute("Slackoff = HkldRot  - HkdDown.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlackOff", DataType="ForceMeasure")]
        public ForceMeasure SlackOff {
            get {
                return this.slackOffField;
            }
            set {
                this.slackOffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hookload when the string is moving up.</summary>
        [System.ComponentModel.DescriptionAttribute("Hookload when the string is moving up.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HkldUp", DataType="ForceMeasure")]
        public ForceMeasure HkldUp {
            get {
                return this.hkldUpField;
            }
            set {
                this.hkldUpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hookload when the string is moving down.</summary>
        [System.ComponentModel.DescriptionAttribute("Hookload when the string is moving down.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HkldDn", DataType="ForceMeasure")]
        public ForceMeasure HkldDn {
            get {
                return this.hkldDnField;
            }
            set {
                this.hkldDnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average Torque: on bottom.</summary>
        [System.ComponentModel.DescriptionAttribute("Average Torque: on bottom.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqOnBotAv", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqOnBotAv {
            get {
                return this.tqOnBotAvField;
            }
            set {
                this.tqOnBotAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum torque: on bottom.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum torque: on bottom.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqOnBotMx", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqOnBotMx {
            get {
                return this.tqOnBotMxField;
            }
            set {
                this.tqOnBotMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum torque: on bottom.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum torque: on bottom.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqOnBotMn", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqOnBotMn {
            get {
                return this.tqOnBotMnField;
            }
            set {
                this.tqOnBotMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average torque: off bottom.</summary>
        [System.ComponentModel.DescriptionAttribute("Average torque: off bottom.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqOffBotAv", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqOffBotAv {
            get {
                return this.tqOffBotAvField;
            }
            set {
                this.tqOffBotAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average torque: downhole.</summary>
        [System.ComponentModel.DescriptionAttribute("Average torque: downhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqDhAv", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqDhAv {
            get {
                return this.tqDhAvField;
            }
            set {
                this.tqDhAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight of the string above the jars.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight of the string above the jars.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WtAboveJar", DataType="ForceMeasure")]
        public ForceMeasure WtAboveJar {
            get {
                return this.wtAboveJarField;
            }
            set {
                this.wtAboveJarField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight  of the string below the jars.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight  of the string below the jars.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WtBelowJar", DataType="ForceMeasure")]
        public ForceMeasure WtBelowJar {
            get {
                return this.wtBelowJarField;
            }
            set {
                this.wtBelowJarField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Drilling fluid density.</summary>
        [System.ComponentModel.DescriptionAttribute("Drilling fluid density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WtMud", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure WtMud {
            get {
                return this.wtMudField;
            }
            set {
                this.wtMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average mud pump flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Average mud pump flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowratePumpAv", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowratePumpAv {
            get {
                return this.flowratePumpAvField;
            }
            set {
                this.flowratePumpAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum mud pump flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum mud pump flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowratePumpMx", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowratePumpMx {
            get {
                return this.flowratePumpMxField;
            }
            set {
                this.flowratePumpMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum mud pump flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum mud pump flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowratePumpMn", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowratePumpMn {
            get {
                return this.flowratePumpMnField;
            }
            set {
                this.flowratePumpMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bit nozzle average velocity.</summary>
        [System.ComponentModel.DescriptionAttribute("Bit nozzle average velocity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VelNozzleAv", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure VelNozzleAv {
            get {
                return this.velNozzleAvField;
            }
            set {
                this.velNozzleAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bit hydraulic.</summary>
        [System.ComponentModel.DescriptionAttribute("Bit hydraulic.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PowBit", DataType="PowerMeasure")]
        public PowerMeasure PowBit {
            get {
                return this.powBitField;
            }
            set {
                this.powBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure drop in bit.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure drop in bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresDropBit", DataType="PressureMeasure")]
        public PressureMeasure PresDropBit {
            get {
                return this.presDropBitField;
            }
            set {
                this.presDropBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent on hold from start of bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent on hold from start of bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CTimHold", DataType="TimeMeasure")]
        public TimeMeasure CTimHold {
            get {
                return this.cTimHoldField;
            }
            set {
                this.cTimHoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent steering from start of bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent steering from start of bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CTimSteering", DataType="TimeMeasure")]
        public TimeMeasure CTimSteering {
            get {
                return this.cTimSteeringField;
            }
            set {
                this.cTimSteeringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent rotary drilling from start of bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent rotary drilling from start of bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CTimDrillRot", DataType="TimeMeasure")]
        public TimeMeasure CTimDrillRot {
            get {
                return this.cTimDrillRotField;
            }
            set {
                this.cTimDrillRotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent slide drilling from start of bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent slide drilling from start of bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CTimDrillSlid", DataType="TimeMeasure")]
        public TimeMeasure CTimDrillSlid {
            get {
                return this.cTimDrillSlidField;
            }
            set {
                this.cTimDrillSlidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent circulating from start of bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent circulating from start of bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CTimCirc", DataType="TimeMeasure")]
        public TimeMeasure CTimCirc {
            get {
                return this.cTimCircField;
            }
            set {
                this.cTimCircField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent reaming from start of bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent reaming from start of bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CTimReam", DataType="TimeMeasure")]
        public TimeMeasure CTimReam {
            get {
                return this.cTimReamField;
            }
            set {
                this.cTimReamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance drilled - rotating.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance drilled - rotating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistDrillRot", DataType="LengthMeasure")]
        public LengthMeasure DistDrillRot {
            get {
                return this.distDrillRotField;
            }
            set {
                this.distDrillRotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance drilled - sliding</summary>
        [System.ComponentModel.DescriptionAttribute("Distance drilled - sliding")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistDrillSlid", DataType="LengthMeasure")]
        public LengthMeasure DistDrillSlid {
            get {
                return this.distDrillSlidField;
            }
            set {
                this.distDrillSlidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance reamed.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance reamed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistReam", DataType="LengthMeasure")]
        public LengthMeasure DistReam {
            get {
                return this.distReamField;
            }
            set {
                this.distReamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance covered while holding angle with a steerable drilling assembly.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance covered while holding angle with a steerable drilling assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistHold", DataType="LengthMeasure")]
        public LengthMeasure DistHold {
            get {
                return this.distHoldField;
            }
            set {
                this.distHoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance covered while actively steering with a steerable drilling assembly.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance covered while actively steering with a steerable drilling assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistSteering", DataType="LengthMeasure")]
        public LengthMeasure DistSteering {
            get {
                return this.distSteeringField;
            }
            set {
                this.distSteeringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average turn rate (commonly in rpm) through Interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average turn rate (commonly in rpm) through Interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RpmAv", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure RpmAv {
            get {
                return this.rpmAvField;
            }
            set {
                this.rpmAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum turn rate (commonly in rpm).</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum turn rate (commonly in rpm).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RpmMx", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure RpmMx {
            get {
                return this.rpmMxField;
            }
            set {
                this.rpmMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum turn rate (commonly in rpm).</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum turn rate (commonly in rpm).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RpmMn", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure RpmMn {
            get {
                return this.rpmMnField;
            }
            set {
                this.rpmMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average turn rate (commonly in rpm) downhole.</summary>
        [System.ComponentModel.DescriptionAttribute("Average turn rate (commonly in rpm) downhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RpmAvDh", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure RpmAvDh {
            get {
                return this.rpmAvDhField;
            }
            set {
                this.rpmAvDhField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average rate of penetration through Interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average rate of penetration through Interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RopAv", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure RopAv {
            get {
                return this.ropAvField;
            }
            set {
                this.ropAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum rate of penetration through Interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum rate of penetration through Interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RopMx", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure RopMx {
            get {
                return this.ropMxField;
            }
            set {
                this.ropMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum rate of penetration through Interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum rate of penetration through Interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RopMn", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure RopMn {
            get {
                return this.ropMnField;
            }
            set {
                this.ropMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Surface weight on bit - average through interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Surface weight on bit - average through interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WobAv", DataType="ForceMeasure")]
        public ForceMeasure WobAv {
            get {
                return this.wobAvField;
            }
            set {
                this.wobAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight on bit - maximum.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight on bit - maximum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WobMx", DataType="ForceMeasure")]
        public ForceMeasure WobMx {
            get {
                return this.wobMxField;
            }
            set {
                this.wobMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight on bit - minimum.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight on bit - minimum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WobMn", DataType="ForceMeasure")]
        public ForceMeasure WobMn {
            get {
                return this.wobMnField;
            }
            set {
                this.wobMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight on bit - average downhole.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight on bit - average downhole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WobAvDh", DataType="ForceMeasure")]
        public ForceMeasure WobAvDh {
            get {
                return this.wobAvDhField;
            }
            set {
                this.wobAvDhField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reason for trip.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Reason for trip.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReasonTrip", DataType="String2000")]
        public string ReasonTrip {
            get {
                return this.reasonTripField;
            }
            set {
                this.reasonTripField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Objective of bottom hole assembly.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Objective of bottom hole assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectiveBha", DataType="String2000")]
        public string ObjectiveBha {
            get {
                return this.objectiveBhaField;
            }
            set {
                this.objectiveBhaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Azimuth at start measured depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Azimuth at start measured depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziTop", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziTop {
            get {
                return this.aziTopField;
            }
            set {
                this.aziTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Azimuth at stop measured depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Azimuth at stop measured depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziBottom", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziBottom {
            get {
                return this.aziBottomField;
            }
            set {
                this.aziBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inclination at start measured depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Inclination at start measured depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InclStart", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure InclStart {
            get {
                return this.inclStartField;
            }
            set {
                this.inclStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum inclination.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum inclination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InclMx", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure InclMx {
            get {
                return this.inclMxField;
            }
            set {
                this.inclMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum inclination.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum inclination.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InclMn", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure InclMn {
            get {
                return this.inclMnField;
            }
            set {
                this.inclMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Inclination at stop measured depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Inclination at stop measured depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InclStop", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure InclStop {
            get {
                return this.inclStopField;
            }
            set {
                this.inclStopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum mud temperature downhole during run.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum mud temperature downhole during run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempMudDhMx", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempMudDhMx {
            get {
                return this.tempMudDhMxField;
            }
            set {
                this.tempMudDhMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average pump pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Average pump pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresPumpAv", DataType="PressureMeasure")]
        public PressureMeasure PresPumpAv {
            get {
                return this.presPumpAvField;
            }
            set {
                this.presPumpAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flow rate at bit.</summary>
        [System.ComponentModel.DescriptionAttribute("Flow rate at bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateBit", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateBit {
            get {
                return this.flowrateBitField;
            }
            set {
                this.flowrateBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The class of the drilling fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("The class of the drilling fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudClass", DataType="MudClass")]
        public MudClass MudClass {
            get {
                return this.mudClassField;
            }
            set {
                this.mudClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MudClassSpecified {
            get {
                return this.mudClassFieldSpecified;
            }
            set {
                this.mudClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud Subtype at event occurrence.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud Subtype at event occurrence.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudSubClass", DataType="MudSubClass")]
        public MudSubClass MudSubClass {
            get {
                return this.mudSubClassField;
            }
            set {
                this.mudSubClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MudSubClassSpecified {
            get {
                return this.mudSubClassFieldSpecified;
            }
            set {
                this.mudSubClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the parameters</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the parameters")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum MudClass {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil-based")]
        oilbased,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water-based")]
        waterbased,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        pneumatic,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum MudSubClass {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("aerated mud")]
        aeratedmud,
        
        /// <remarks/>
        air,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("brackish water")]
        brackishwater,
        
        /// <remarks/>
        brine,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("caesium formate")]
        caesiumformate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diesel oil-based")]
        dieseloilbased,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ester synthetic-based")]
        estersyntheticbased,
        
        /// <remarks/>
        freshwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("glycol mud")]
        glycolmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gyp mud")]
        gypmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("internal-olefin synthetic-based")]
        internalolefinsyntheticbased,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lightly treated non-dispersed")]
        lightlytreatednondispersed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lignite/lignosulfonate mud")]
        lignitelignosulfonatemud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lime mud")]
        limemud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear paraffin synthetic-based")]
        linearparaffinsyntheticbased,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear-alpha-olefin synthetic-based")]
        linearalphaolefinsyntheticbased,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("low solids")]
        lowsolids,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("low toxicity mineral oil-based")]
        lowtoxicitymineraloilbased,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mineral oil-based")]
        mineraloilbased,
        
        /// <remarks/>
        mist,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mixed-metal oxide mud")]
        mixedmetaloxidemud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("native/natural mud")]
        nativenaturalmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("natural gas")]
        naturalgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nitrogen-aerated mud")]
        nitrogenaeratedmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non-aqueous (invert emulsion) drilling fluids")]
        nonaqueousinvertemulsiondrillingfluids,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non-dispersed")]
        nondispersed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pneumatic (gaseous) drilling fluids")]
        pneumaticgaseousdrillingfluids,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("polymer mud")]
        polymermud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potassium formate")]
        potassiumformate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potassium-treated mud")]
        potassiumtreatedmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("salt water mud")]
        saltwatermud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("saturated salt mud")]
        saturatedsaltmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sea water")]
        seawater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("seawater mud")]
        seawatermud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("silicate mud")]
        silicatemud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sodium formate")]
        sodiumformate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spud mud")]
        spudmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stable foam")]
        stablefoam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stiff foam")]
        stifffoam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water-based drilling fluids")]
        waterbaseddrillingfluids,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportSurveyStation {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private PlaneAngleMeasure inclField;
        
        private PlaneAngleMeasure aziField;
        
        private LengthMeasure vertSectField;
        
        private AnglePerLengthMeasure dlsField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private AbstractWellLocation[] locationField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date at which the directional survey took place.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The date at which the directional survey took place.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of measurement from the drill datum.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Measured depth of measurement from the drill datum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the measurements.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the measurements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hole inclination, measured from vertical.</summary>
        [System.ComponentModel.DescriptionAttribute("Hole inclination, measured from vertical.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Incl", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Incl {
            get {
                return this.inclField;
            }
            set {
                this.inclField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hole azimuth, corrected to a well's azimuth reference.</summary>
        [System.ComponentModel.DescriptionAttribute("Hole azimuth, corrected to a well\'s azimuth reference.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Azi", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Azi {
            get {
                return this.aziField;
            }
            set {
                this.aziField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance along the vertical section of an azimuth plane.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance along the vertical section of an azimuth plane.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VertSect", DataType="LengthMeasure")]
        public LengthMeasure VertSect {
            get {
                return this.vertSectField;
            }
            set {
                this.vertSectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Dogleg severity.</summary>
        [System.ComponentModel.DescriptionAttribute("Dogleg severity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Dls", DataType="AnglePerLengthMeasure")]
        public AnglePerLengthMeasure Dls {
            get {
                return this.dlsField;
            }
            set {
                this.dlsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Location")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Location", DataType="AbstractWellLocation")]
        public AbstractWellLocation[] Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportSurveyStation.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportSurveyStation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class TimestampedCommentString {
        
        private System.DateTime dTimField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>The timestamp of the time-qualified comment.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The timestamp of the time-qualified comment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dTim", DataType="TimeStamp")]
        public System.DateTime dTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportPorePressure {
        
        private ReadingKind readingKindField;
        
        private MassPerVolumeMeasure equivalentMudWeightField;
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Indicate if the reading was estimated or measured.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicate if the reading was estimated or measured.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReadingKind", DataType="ReadingKind")]
        public ReadingKind ReadingKind {
            get {
                return this.readingKindField;
            }
            set {
                this.readingKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The equivalent mud weight value of the pore pressure reading.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The equivalent mud weight value of the pore pressure reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquivalentMudWeight", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure EquivalentMudWeight {
            get {
                return this.equivalentMudWeightField;
            }
            set {
                this.equivalentMudWeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time at the reading was recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time at the reading was recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth where the readings were recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth where the readings were recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth where the readings were recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth where the readings were recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportPorePressure.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportPorePressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ReadingKind {
        
        /// <remarks/>
        measured,
        
        /// <remarks/>
        estimated,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ElectricPotentialDifferenceMeasure {
        
        private ElectricPotentialDifferenceUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ElectricPotentialDifferenceUom")]
        public ElectricPotentialDifferenceUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricPotentialDifferenceUom {
        
        /// <remarks/>
        cV,
        
        /// <remarks/>
        dV,
        
        /// <remarks/>
        fV,
        
        /// <remarks/>
        GV,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        nV,
        
        /// <remarks/>
        pV,
        
        /// <remarks/>
        TV,
        
        /// <remarks/>
        uV,
        
        /// <remarks/>
        V,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Fluid {
        
        private string typeField;
        
        private string locationSampleField;
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private MassPerVolumeMeasure ecdField;
        
        private VolumeMeasure kickToleranceVolumeField;
        
        private MassPerVolumeMeasure kickToleranceIntensityField;
        
        private ThermodynamicTemperatureMeasure tempFlowLineField;
        
        private PressureMeasure presBopRatingField;
        
        private MudClass mudClassField;
        
        private bool mudClassFieldSpecified;
        
        private MassPerVolumeMeasure densityField;
        
        private TimeMeasure visFunnelField;
        
        private ThermodynamicTemperatureMeasure tempVisField;
        
        private DynamicViscosityMeasure pvField;
        
        private PressureMeasure ypField;
        
        private PressureMeasure gel10SecField;
        
        private PressureMeasure gel10MinField;
        
        private PressureMeasure gel30MinField;
        
        private LengthMeasure filterCakeLtlpField;
        
        private VolumeMeasure filtrateLtlpField;
        
        private ThermodynamicTemperatureMeasure tempHthpField;
        
        private PressureMeasure presHthpField;
        
        private VolumeMeasure filtrateHthpField;
        
        private LengthMeasure filterCakeHthpField;
        
        private VolumePerVolumeMeasure solidsPcField;
        
        private VolumePerVolumeMeasure waterPcField;
        
        private VolumePerVolumeMeasure oilPcField;
        
        private VolumePerVolumeMeasure sandPcField;
        
        private VolumePerVolumeMeasure solidsLowGravPcField;
        
        private MassPerVolumeMeasure solidsLowGravField;
        
        private VolumePerVolumeMeasure solidsCalcPcField;
        
        private VolumePerVolumeMeasure baritePcField;
        
        private MassPerVolumeMeasure lcmField;
        
        private GenericMeasure mbtField;
        
        private double phField;
        
        private bool phFieldSpecified;
        
        private ThermodynamicTemperatureMeasure tempPhField;
        
        private VolumeMeasure pmField;
        
        private VolumeMeasure pmFiltrateField;
        
        private VolumeMeasure mfField;
        
        private VolumeMeasure alkalinityP1Field;
        
        private VolumeMeasure alkalinityP2Field;
        
        private MassPerVolumeMeasure chlorideField;
        
        private MassPerVolumeMeasure calciumField;
        
        private MassPerVolumeMeasure magnesiumField;
        
        private MassPerVolumeMeasure potassiumField;
        
        private VolumePerVolumeMeasure brinePcField;
        
        private MassPerVolumeMeasure brineDensityField;
        
        private MassPerVolumeMeasure limeField;
        
        private ElectricPotentialDifferenceMeasure electStabField;
        
        private VolumePerVolumeMeasure calciumChloridePcField;
        
        private MassPerVolumeMeasure calciumChlorideField;
        
        private string companyField;
        
        private string engineerField;
        
        private MassPerMassMeasure asgField;
        
        private VolumePerVolumeMeasure solidsHiGravPcField;
        
        private MassPerVolumeMeasure solidsHiGravField;
        
        private VolumePerVolumeMeasure polymerField;
        
        private string polyTypeField;
        
        private VolumePerVolumeMeasure solCorPcField;
        
        private MassPerMassMeasure oilCtgField;
        
        private MassPerVolumeMeasure oilCtgDryField;
        
        private MassPerMassMeasure hardnessCaField;
        
        private MassPerVolumeMeasure sulfideField;
        
        private LengthMeasure averageCuttingSizeField;
        
        private MassPerVolumeMeasure carbonateField;
        
        private MassPerVolumeMeasure ironField;
        
        private MassMeasure metalRecoveredField;
        
        private double turbidityField;
        
        private bool turbidityFieldSpecified;
        
        private MassPerVolumeMeasure oilGreaseField;
        
        private MassPerVolumeMeasure saltField;
        
        private VolumePerVolumeMeasure saltPcField;
        
        private ThermodynamicTemperatureMeasure tctField;
        
        private MassPerVolumeMeasure waterPhaseSalinityField;
        
        private MassPerVolumeMeasure wholeMudCalciumField;
        
        private MassPerVolumeMeasure wholeMudChlorideField;
        
        private MassPerVolumeMeasure zincOxideField;
        
        private MassPerVolumeMeasure sodiumChlorideField;
        
        private VolumePerVolumeMeasure sodiumChloridePcField;
        
        private string commentsField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private Rheometer[] rheometerField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Description for the type of fluid.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description for the type of fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sample location.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Sample location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocationSample", DataType="String64")]
        public string LocationSample {
            get {
                return this.locationSampleField;
            }
            set {
                this.locationSampleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time when fluid readings were recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("The time when fluid readings were recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth where the fluid readings were recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth where the fluid readings were recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The true vertical depth where the fluid readings were recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("The true vertical depth where the fluid readings were recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Equivalent circulating density where fluid reading was recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("Equivalent circulating density where fluid reading was recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ecd", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Ecd {
            get {
                return this.ecdField;
            }
            set {
                this.ecdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Assumed kick volume for calculation of kick tolerance based on the kick intensity where the fluid reading was recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("Assumed kick volume for calculation of kick tolerance based on the kick intensity" +
            " where the fluid reading was recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KickToleranceVolume", DataType="VolumeMeasure")]
        public VolumeMeasure KickToleranceVolume {
            get {
                return this.kickToleranceVolumeField;
            }
            set {
                this.kickToleranceVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Assumed kick density for calculation of kick tolerance where the fluid reading was recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("Assumed kick density for calculation of kick tolerance where the fluid reading wa" +
            "s recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KickToleranceIntensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure KickToleranceIntensity {
            get {
                return this.kickToleranceIntensityField;
            }
            set {
                this.kickToleranceIntensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flow line temperature measurement where the fluid reading was recorded.</summary>
        [System.ComponentModel.DescriptionAttribute("Flow line temperature measurement where the fluid reading was recorded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempFlowLine", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempFlowLine {
            get {
                return this.tempFlowLineField;
            }
            set {
                this.tempFlowLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pressure rating of the blow out preventer.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum pressure rating of the blow out preventer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBopRating", DataType="PressureMeasure")]
        public PressureMeasure PresBopRating {
            get {
                return this.presBopRatingField;
            }
            set {
                this.presBopRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The class of the drilling fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("The class of the drilling fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudClass", DataType="MudClass")]
        public MudClass MudClass {
            get {
                return this.mudClassField;
            }
            set {
                this.mudClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MudClassSpecified {
            get {
                return this.mudClassFieldSpecified;
            }
            set {
                this.mudClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid density.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid density.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Density", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Density {
            get {
                return this.densityField;
            }
            set {
                this.densityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Funnel viscosity in seconds.</summary>
        [System.ComponentModel.DescriptionAttribute("Funnel viscosity in seconds.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VisFunnel", DataType="TimeMeasure")]
        public TimeMeasure VisFunnel {
            get {
                return this.visFunnelField;
            }
            set {
                this.visFunnelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Funnel viscosity temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Funnel viscosity temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempVis", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempVis {
            get {
                return this.tempVisField;
            }
            set {
                this.tempVisField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Plastic viscosity.</summary>
        [System.ComponentModel.DescriptionAttribute("Plastic viscosity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pv", DataType="DynamicViscosityMeasure")]
        public DynamicViscosityMeasure Pv {
            get {
                return this.pvField;
            }
            set {
                this.pvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Yield point (Bingham and Herschel Bulkley models).</summary>
        [System.ComponentModel.DescriptionAttribute("Yield point (Bingham and Herschel Bulkley models).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Yp", DataType="PressureMeasure")]
        public PressureMeasure Yp {
            get {
                return this.ypField;
            }
            set {
                this.ypField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ten-second gels.</summary>
        [System.ComponentModel.DescriptionAttribute("Ten-second gels.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel10Sec", DataType="PressureMeasure")]
        public PressureMeasure Gel10Sec {
            get {
                return this.gel10SecField;
            }
            set {
                this.gel10SecField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ten-minute gels.</summary>
        [System.ComponentModel.DescriptionAttribute("Ten-minute gels.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel10Min", DataType="PressureMeasure")]
        public PressureMeasure Gel10Min {
            get {
                return this.gel10MinField;
            }
            set {
                this.gel10MinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Thirty-minute gels.</summary>
        [System.ComponentModel.DescriptionAttribute("Thirty-minute gels.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gel30Min", DataType="PressureMeasure")]
        public PressureMeasure Gel30Min {
            get {
                return this.gel30MinField;
            }
            set {
                this.gel30MinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Filter cake thickness at low (normal) temperature and pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Filter cake thickness at low (normal) temperature and pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FilterCakeLtlp", DataType="LengthMeasure")]
        public LengthMeasure FilterCakeLtlp {
            get {
                return this.filterCakeLtlpField;
            }
            set {
                this.filterCakeLtlpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>API water loss (low temperature and pressure mud filtrate measurement) (volume per 30 min).</summary>
        [System.ComponentModel.DescriptionAttribute("API water loss (low temperature and pressure mud filtrate measurement) (volume pe" +
            "r 30 min).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiltrateLtlp", DataType="VolumeMeasure")]
        public VolumeMeasure FiltrateLtlp {
            get {
                return this.filtrateLtlpField;
            }
            set {
                this.filtrateLtlpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>High temperature high pressure (HTHP) temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("High temperature high pressure (HTHP) temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempHthp", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempHthp {
            get {
                return this.tempHthpField;
            }
            set {
                this.tempHthpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>High temperature high pressure (HTHP) pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("High temperature high pressure (HTHP) pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresHthp", DataType="PressureMeasure")]
        public PressureMeasure PresHthp {
            get {
                return this.presHthpField;
            }
            set {
                this.presHthpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>High temperature high pressure (HTHP) filtrate (volume per 30 min).</summary>
        [System.ComponentModel.DescriptionAttribute("High temperature high pressure (HTHP) filtrate (volume per 30 min).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FiltrateHthp", DataType="VolumeMeasure")]
        public VolumeMeasure FiltrateHthp {
            get {
                return this.filtrateHthpField;
            }
            set {
                this.filtrateHthpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>High temperature high pressure (HTHP) filter cake thickness.</summary>
        [System.ComponentModel.DescriptionAttribute("High temperature high pressure (HTHP) filter cake thickness.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FilterCakeHthp", DataType="LengthMeasure")]
        public LengthMeasure FilterCakeHthp {
            get {
                return this.filterCakeHthpField;
            }
            set {
                this.filterCakeHthpField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Solids percentage from retort.</summary>
        [System.ComponentModel.DescriptionAttribute("Solids percentage from retort.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolidsPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolidsPc {
            get {
                return this.solidsPcField;
            }
            set {
                this.solidsPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water content percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Water content percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure WaterPc {
            get {
                return this.waterPcField;
            }
            set {
                this.waterPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Percent oil content from retort.</summary>
        [System.ComponentModel.DescriptionAttribute("Percent oil content from retort.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilPc {
            get {
                return this.oilPcField;
            }
            set {
                this.oilPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sand content percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Sand content percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SandPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SandPc {
            get {
                return this.sandPcField;
            }
            set {
                this.sandPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Low gravity solids percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Low gravity solids percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolidsLowGravPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolidsLowGravPc {
            get {
                return this.solidsLowGravPcField;
            }
            set {
                this.solidsLowGravPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Solids low gravity content.</summary>
        [System.ComponentModel.DescriptionAttribute("Solids low gravity content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolidsLowGrav", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure SolidsLowGrav {
            get {
                return this.solidsLowGravField;
            }
            set {
                this.solidsLowGravField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Percent calculated solids content.</summary>
        [System.ComponentModel.DescriptionAttribute("Percent calculated solids content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolidsCalcPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolidsCalcPc {
            get {
                return this.solidsCalcPcField;
            }
            set {
                this.solidsCalcPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Barite content percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Barite content percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BaritePc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure BaritePc {
            get {
                return this.baritePcField;
            }
            set {
                this.baritePcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Lost circulation material.</summary>
        [System.ComponentModel.DescriptionAttribute("Lost circulation material.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Lcm", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Lcm {
            get {
                return this.lcmField;
            }
            set {
                this.lcmField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cation exchange capacity (CEC) of the mud sample as measured by methylene blue titration (MBT).  NOTE: This is temporarily set to be a GenericMeasure with no unit validation, pending addition of CEC units to the Energistics UoM spec.</summary>
        [System.ComponentModel.DescriptionAttribute("Cation exchange capacity (CEC) of the mud sample as measured by methylene blue ti" +
            "tration (MBT).  NOTE: This is temporarily set to be a GenericMeasure with no uni" +
            "t validation, pending addition of CEC units to the Energistics UoM spec.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mbt", DataType="GenericMeasure")]
        public GenericMeasure Mbt {
            get {
                return this.mbtField;
            }
            set {
                this.mbtField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud pH.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud pH.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ph", DataType="double")]
        public double Ph {
            get {
                return this.phField;
            }
            set {
                this.phField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhSpecified {
            get {
                return this.phFieldSpecified;
            }
            set {
                this.phFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud pH measurement temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Mud pH measurement temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempPh", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempPh {
            get {
                return this.tempPhField;
            }
            set {
                this.tempPhField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Phenolphthalein alkalinity of whole mud.</summary>
        [System.ComponentModel.DescriptionAttribute("Phenolphthalein alkalinity of whole mud.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pm", DataType="VolumeMeasure")]
        public VolumeMeasure Pm {
            get {
                return this.pmField;
            }
            set {
                this.pmField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Phenolphthalein alkalinity of mud filtrate.</summary>
        [System.ComponentModel.DescriptionAttribute("Phenolphthalein alkalinity of mud filtrate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PmFiltrate", DataType="VolumeMeasure")]
        public VolumeMeasure PmFiltrate {
            get {
                return this.pmFiltrateField;
            }
            set {
                this.pmFiltrateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Methyl orange alkalinity of filtrate.</summary>
        [System.ComponentModel.DescriptionAttribute("Methyl orange alkalinity of filtrate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mf", DataType="VolumeMeasure")]
        public VolumeMeasure Mf {
            get {
                return this.mfField;
            }
            set {
                this.mfField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid  to reach the phenolphthalein endpoint).</summary>
        [System.ComponentModel.DescriptionAttribute("Mud alkalinity P1 from alternate alkalinity method (volume in ml of 0.02N acid  t" +
            "o reach the phenolphthalein endpoint).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AlkalinityP1", DataType="VolumeMeasure")]
        public VolumeMeasure AlkalinityP1 {
            get {
                return this.alkalinityP1Field;
            }
            set {
                this.alkalinityP1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to titrate, the reagent mixture to the phenolphthalein endpoint).</summary>
        [System.ComponentModel.DescriptionAttribute("Mud alkalinity P2 from alternate alkalinity method (volume in ml of 0.02N acid to" +
            " titrate, the reagent mixture to the phenolphthalein endpoint).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AlkalinityP2", DataType="VolumeMeasure")]
        public VolumeMeasure AlkalinityP2 {
            get {
                return this.alkalinityP2Field;
            }
            set {
                this.alkalinityP2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Chloride content.</summary>
        [System.ComponentModel.DescriptionAttribute("Chloride content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Chloride", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Chloride {
            get {
                return this.chlorideField;
            }
            set {
                this.chlorideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calcium content.</summary>
        [System.ComponentModel.DescriptionAttribute("Calcium content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Calcium", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Calcium {
            get {
                return this.calciumField;
            }
            set {
                this.calciumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Magnesium content.</summary>
        [System.ComponentModel.DescriptionAttribute("Magnesium content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Magnesium", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Magnesium {
            get {
                return this.magnesiumField;
            }
            set {
                this.magnesiumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Potassium content.</summary>
        [System.ComponentModel.DescriptionAttribute("Potassium content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Potassium", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Potassium {
            get {
                return this.potassiumField;
            }
            set {
                this.potassiumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Percent brine content.</summary>
        [System.ComponentModel.DescriptionAttribute("Percent brine content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BrinePc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure BrinePc {
            get {
                return this.brinePcField;
            }
            set {
                this.brinePcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Density of water phase of NAF.</summary>
        [System.ComponentModel.DescriptionAttribute("Density of water phase of NAF.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BrineDensity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure BrineDensity {
            get {
                return this.brineDensityField;
            }
            set {
                this.brineDensityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Lime content.</summary>
        [System.ComponentModel.DescriptionAttribute("Lime content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Lime", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Lime {
            get {
                return this.limeField;
            }
            set {
                this.limeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measurement of the emulsion stability and oil-wetting capability in oil-based muds.</summary>
        [System.ComponentModel.DescriptionAttribute("Measurement of the emulsion stability and oil-wetting capability in oil-based mud" +
            "s.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ElectStab", DataType="ElectricPotentialDifferenceMeasure")]
        public ElectricPotentialDifferenceMeasure ElectStab {
            get {
                return this.electStabField;
            }
            set {
                this.electStabField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calcium chloride percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Calcium chloride percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalciumChloridePc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure CalciumChloridePc {
            get {
                return this.calciumChloridePcField;
            }
            set {
                this.calciumChloridePcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calcium chloride content.</summary>
        [System.ComponentModel.DescriptionAttribute("Calcium chloride content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalciumChloride", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure CalciumChloride {
            get {
                return this.calciumChlorideField;
            }
            set {
                this.calciumChlorideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of company.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Company", DataType="String64")]
        public string Company {
            get {
                return this.companyField;
            }
            set {
                this.companyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Engineer name</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Engineer name")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Engineer", DataType="String64")]
        public string Engineer {
            get {
                return this.engineerField;
            }
            set {
                this.engineerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average specific gravity of solids.</summary>
        [System.ComponentModel.DescriptionAttribute("Average specific gravity of solids.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Asg", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Asg {
            get {
                return this.asgField;
            }
            set {
                this.asgField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Solids high gravity percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Solids high gravity percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolidsHiGravPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolidsHiGravPc {
            get {
                return this.solidsHiGravPcField;
            }
            set {
                this.solidsHiGravPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Solids high gravity content.</summary>
        [System.ComponentModel.DescriptionAttribute("Solids high gravity content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolidsHiGrav", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure SolidsHiGrav {
            get {
                return this.solidsHiGravField;
            }
            set {
                this.solidsHiGravField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Polymers present in the mud system.</summary>
        [System.ComponentModel.DescriptionAttribute("Polymers present in the mud system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Polymer", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Polymer {
            get {
                return this.polymerField;
            }
            set {
                this.polymerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of polymers present in the mud system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of polymers present in the mud system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PolyType", DataType="String64")]
        public string PolyType {
            get {
                return this.polyTypeField;
            }
            set {
                this.polyTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Solids corrected for chloride content percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Solids corrected for chloride content percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SolCorPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SolCorPc {
            get {
                return this.solCorPcField;
            }
            set {
                this.solCorPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Oil on cuttings.</summary>
        [System.ComponentModel.DescriptionAttribute("Oil on cuttings.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilCtg", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure OilCtg {
            get {
                return this.oilCtgField;
            }
            set {
                this.oilCtgField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Oil on dried cuttings.</summary>
        [System.ComponentModel.DescriptionAttribute("Oil on dried cuttings.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilCtgDry", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure OilCtgDry {
            get {
                return this.oilCtgDryField;
            }
            set {
                this.oilCtgDryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total calcium hardness.</summary>
        [System.ComponentModel.DescriptionAttribute("Total calcium hardness.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HardnessCa", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure HardnessCa {
            get {
                return this.hardnessCaField;
            }
            set {
                this.hardnessCaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sulfide content.</summary>
        [System.ComponentModel.DescriptionAttribute("Sulfide content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sulfide", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Sulfide {
            get {
                return this.sulfideField;
            }
            set {
                this.sulfideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average size of the drill cuttings.</summary>
        [System.ComponentModel.DescriptionAttribute("Average size of the drill cuttings.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AverageCuttingSize", DataType="LengthMeasure")]
        public LengthMeasure AverageCuttingSize {
            get {
                return this.averageCuttingSizeField;
            }
            set {
                this.averageCuttingSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Carbonate content.</summary>
        [System.ComponentModel.DescriptionAttribute("Carbonate content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Carbonate", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Carbonate {
            get {
                return this.carbonateField;
            }
            set {
                this.carbonateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Iron content.</summary>
        [System.ComponentModel.DescriptionAttribute("Iron content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Iron", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Iron {
            get {
                return this.ironField;
            }
            set {
                this.ironField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Metal recovered from the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Metal recovered from the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MetalRecovered", DataType="MassMeasure")]
        public MassMeasure MetalRecovered {
            get {
                return this.metalRecoveredField;
            }
            set {
                this.metalRecoveredField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Turbidity units to measure the cloudiness or haziness of a fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("Turbidity units to measure the cloudiness or haziness of a fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Turbidity", DataType="double")]
        public double Turbidity {
            get {
                return this.turbidityField;
            }
            set {
                this.turbidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TurbiditySpecified {
            get {
                return this.turbidityFieldSpecified;
            }
            set {
                this.turbidityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Oil and grease content.</summary>
        [System.ComponentModel.DescriptionAttribute("Oil and grease content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OilGrease", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure OilGrease {
            get {
                return this.oilGreaseField;
            }
            set {
                this.oilGreaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Salt content.</summary>
        [System.ComponentModel.DescriptionAttribute("Salt content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Salt", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure Salt {
            get {
                return this.saltField;
            }
            set {
                this.saltField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Salt percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Salt percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SaltPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SaltPc {
            get {
                return this.saltPcField;
            }
            set {
                this.saltPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True crystallization temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("True crystallization temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tct", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Tct {
            get {
                return this.tctField;
            }
            set {
                this.tctField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A factor showing the activity level of salt in oil-based mud.</summary>
        [System.ComponentModel.DescriptionAttribute("A factor showing the activity level of salt in oil-based mud.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterPhaseSalinity", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure WaterPhaseSalinity {
            get {
                return this.waterPhaseSalinityField;
            }
            set {
                this.waterPhaseSalinityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calcium content in the whole mud sample, including oil and water phases.</summary>
        [System.ComponentModel.DescriptionAttribute("Calcium content in the whole mud sample, including oil and water phases.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WholeMudCalcium", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure WholeMudCalcium {
            get {
                return this.wholeMudCalciumField;
            }
            set {
                this.wholeMudCalciumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Chloride content in the whole mud sample, including oil and water phases.</summary>
        [System.ComponentModel.DescriptionAttribute("Chloride content in the whole mud sample, including oil and water phases.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WholeMudChloride", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure WholeMudChloride {
            get {
                return this.wholeMudChlorideField;
            }
            set {
                this.wholeMudChlorideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Zinc oxide content.</summary>
        [System.ComponentModel.DescriptionAttribute("Zinc oxide content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ZincOxide", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure ZincOxide {
            get {
                return this.zincOxideField;
            }
            set {
                this.zincOxideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sodium chloride content.</summary>
        [System.ComponentModel.DescriptionAttribute("Sodium chloride content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SodiumChloride", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure SodiumChloride {
            get {
                return this.sodiumChlorideField;
            }
            set {
                this.sodiumChlorideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sodium chloride percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Sodium chloride percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SodiumChloridePc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure SodiumChloridePc {
            get {
                return this.sodiumChloridePcField;
            }
            set {
                this.sodiumChloridePcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Rheometer")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rheometer", DataType="Rheometer")]
        public Rheometer[] Rheometer {
            get {
                return this.rheometerField;
            }
            set {
                this.rheometerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Fluid.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportStatusInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private MeasuredDepthCoord mdPlugTopField;
        
        private LengthMeasure diaHoleField;
        
        private MeasuredDepthCoord mdDiaHoleStartField;
        
        private LengthMeasure diaPilotField;
        
        private MeasuredDepthCoord mdDiaPilotPlanField;
        
        private WellVerticalDepthCoord tvdDiaPilotPlanField;
        
        private WellboreType typeWellboreField;
        
        private bool typeWellboreFieldSpecified;
        
        private MeasuredDepthCoord mdKickoffField;
        
        private MeasuredDepthCoord tvdKickoffField;
        
        private MassPerVolumeMeasure strengthFormField;
        
        private MeasuredDepthCoord mdStrengthFormField;
        
        private WellVerticalDepthCoord tvdStrengthFormField;
        
        private LengthMeasure diaCsgLastField;
        
        private MeasuredDepthCoord mdCsgLastField;
        
        private WellVerticalDepthCoord tvdCsgLastField;
        
        private PresTestType presTestTypeField;
        
        private bool presTestTypeFieldSpecified;
        
        private MeasuredDepthCoord mdPlannedField;
        
        private LengthMeasure distDrillField;
        
        private string sum24HrField;
        
        private string forecast24HrField;
        
        private LengthPerTimeMeasure ropCurrentField;
        
        private string rigField;
        
        private TimeMeasure eTimStartField;
        
        private TimeMeasure eTimSpudField;
        
        private TimeMeasure eTimLocField;
        
        private TimeMeasure eTimDrillField;
        
        private LengthPerTimeMeasure ropAvField;
        
        private string supervisorField;
        
        private string engineerField;
        
        private string geologistField;
        
        private TimeMeasure eTimDrillRotField;
        
        private TimeMeasure eTimDrillSlidField;
        
        private TimeMeasure eTimCircField;
        
        private TimeMeasure eTimReamField;
        
        private TimeMeasure eTimHoldField;
        
        private TimeMeasure eTimSteeringField;
        
        private LengthMeasure distDrillRotField;
        
        private LengthMeasure distDrillSlidField;
        
        private LengthMeasure distReamField;
        
        private LengthMeasure distHoldField;
        
        private LengthMeasure distSteeringField;
        
        private int numPobField;
        
        private bool numPobFieldSpecified;
        
        private int numContractField;
        
        private bool numContractFieldSpecified;
        
        private int numOperatorField;
        
        private bool numOperatorFieldSpecified;
        
        private int numServiceField;
        
        private bool numServiceFieldSpecified;
        
        private string numAFEField;
        
        private string conditionHoleField;
        
        private WellVerticalDepthCoord tvdLotField;
        
        private MassPerVolumeMeasure presLotEmwField;
        
        private PressureMeasure presKickTolField;
        
        private VolumeMeasure volKickTolField;
        
        private PressureMeasure maaspField;
        
        private string tubularField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private ObjectAlias[] parentWellboreField;
        
        private WellElevationCoord elevKellyField;
        
        private Cost costDayField;
        
        private Cost costDayMudField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date and time for which the well status is reported.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time for which the well status is reported.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Wellbore measured depth at the end of the report period.</summary>
        [System.ComponentModel.DescriptionAttribute("Wellbore measured depth at the end of the report period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Wellbore true vertical depth at the end of the report.</summary>
        [System.ComponentModel.DescriptionAttribute("Wellbore true vertical depth at the end of the report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured plug back depth.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured plug back depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdPlugTop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdPlugTop {
            get {
                return this.mdPlugTopField;
            }
            set {
                this.mdPlugTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hole nominal inside diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Hole nominal inside diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaHole", DataType="LengthMeasure")]
        public LengthMeasure DiaHole {
            get {
                return this.diaHoleField;
            }
            set {
                this.diaHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth to the start of the current hole diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth to the start of the current hole diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdDiaHoleStart", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdDiaHoleStart {
            get {
                return this.mdDiaHoleStartField;
            }
            set {
                this.mdDiaHoleStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pilot hole nominal inside diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Pilot hole nominal inside diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaPilot", DataType="LengthMeasure")]
        public LengthMeasure DiaPilot {
            get {
                return this.diaPilotField;
            }
            set {
                this.diaPilotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The planned measured depth of the pilot hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The planned measured depth of the pilot hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdDiaPilotPlan", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdDiaPilotPlan {
            get {
                return this.mdDiaPilotPlanField;
            }
            set {
                this.mdDiaPilotPlanField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The planned true vertical depth of the pilot hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The planned true vertical depth of the pilot hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdDiaPilotPlan", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdDiaPilotPlan {
            get {
                return this.tvdDiaPilotPlanField;
            }
            set {
                this.tvdDiaPilotPlanField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeWellbore", DataType="WellboreType")]
        public WellboreType TypeWellbore {
            get {
                return this.typeWellboreField;
            }
            set {
                this.typeWellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeWellboreSpecified {
            get {
                return this.typeWellboreFieldSpecified;
            }
            set {
                this.typeWellboreFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth to the kickoff point of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth to the kickoff point of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdKickoff", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdKickoff {
            get {
                return this.mdKickoffField;
            }
            set {
                this.mdKickoffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth to the kickoff point of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth to the kickoff point of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdKickoff", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord TvdKickoff {
            get {
                return this.tvdKickoffField;
            }
            set {
                this.tvdKickoffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured formation strength. This should be the final measurement before the end of the report period.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured formation strength. This should be the final measurement before the " +
            "end of the report period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StrengthForm", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure StrengthForm {
            get {
                return this.strengthFormField;
            }
            set {
                this.strengthFormField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the formation strength measurement.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the formation strength measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdStrengthForm", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdStrengthForm {
            get {
                return this.mdStrengthFormField;
            }
            set {
                this.mdStrengthFormField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The true vertical depth of the formation strength measurement.</summary>
        [System.ComponentModel.DescriptionAttribute("The true vertical depth of the formation strength measurement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdStrengthForm", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdStrengthForm {
            get {
                return this.tvdStrengthFormField;
            }
            set {
                this.tvdStrengthFormField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of the last casing joint.</summary>
        [System.ComponentModel.DescriptionAttribute("Diameter of the last casing joint.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaCsgLast", DataType="LengthMeasure")]
        public LengthMeasure DiaCsgLast {
            get {
                return this.diaCsgLastField;
            }
            set {
                this.diaCsgLastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the last casing joint.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the last casing joint.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdCsgLast", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdCsgLast {
            get {
                return this.mdCsgLastField;
            }
            set {
                this.mdCsgLastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of last casing joint.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of last casing joint.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdCsgLast", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return this.tvdCsgLastField;
            }
            set {
                this.tvdCsgLastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of pressure test that was run.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of pressure test that was run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresTestType", DataType="PresTestType")]
        public PresTestType PresTestType {
            get {
                return this.presTestTypeField;
            }
            set {
                this.presTestTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PresTestTypeSpecified {
            get {
                return this.presTestTypeFieldSpecified;
            }
            set {
                this.presTestTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth planned to be reached.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth planned to be reached.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdPlanned", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdPlanned {
            get {
                return this.mdPlannedField;
            }
            set {
                this.mdPlannedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance drilled.  This should be measured along the centerline of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance drilled.  This should be measured along the centerline of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistDrill", DataType="LengthMeasure")]
        public LengthMeasure DistDrill {
            get {
                return this.distDrillField;
            }
            set {
                this.distDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A summary of the activities performed and the status of the ongoing activities.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A summary of the activities performed and the status of the ongoing activities.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sum24Hr", DataType="String2000")]
        public string Sum24Hr {
            get {
                return this.sum24HrField;
            }
            set {
                this.sum24HrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A summary of  planned activities for the next reporting period.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A summary of  planned activities for the next reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Forecast24Hr", DataType="String2000")]
        public string Forecast24Hr {
            get {
                return this.forecast24HrField;
            }
            set {
                this.forecast24HrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rate of penetration at the end of the reporting period.</summary>
        [System.ComponentModel.DescriptionAttribute("Rate of penetration at the end of the reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RopCurrent", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure RopCurrent {
            get {
                return this.ropCurrentField;
            }
            set {
                this.ropCurrentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the rig used.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the rig used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rig", DataType="String64")]
        public string Rig {
            get {
                return this.rigField;
            }
            set {
                this.rigField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time from the start of operations (commonly in days).</summary>
        [System.ComponentModel.DescriptionAttribute("Time from the start of operations (commonly in days).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimStart", DataType="TimeMeasure")]
        public TimeMeasure ETimStart {
            get {
                return this.eTimStartField;
            }
            set {
                this.eTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time since the bit broke ground (commonly in days).</summary>
        [System.ComponentModel.DescriptionAttribute("Time since the bit broke ground (commonly in days).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimSpud", DataType="TimeMeasure")]
        public TimeMeasure ETimSpud {
            get {
                return this.eTimSpudField;
            }
            set {
                this.eTimSpudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time the rig has been on location (commonly in days).</summary>
        [System.ComponentModel.DescriptionAttribute("Time the rig has been on location (commonly in days).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimLoc", DataType="TimeMeasure")]
        public TimeMeasure ETimLoc {
            get {
                return this.eTimLocField;
            }
            set {
                this.eTimLocField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Drilling time.</summary>
        [System.ComponentModel.DescriptionAttribute("Drilling time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimDrill", DataType="TimeMeasure")]
        public TimeMeasure ETimDrill {
            get {
                return this.eTimDrillField;
            }
            set {
                this.eTimDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average rate of penetration.</summary>
        [System.ComponentModel.DescriptionAttribute("Average rate of penetration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RopAv", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure RopAv {
            get {
                return this.ropAvField;
            }
            set {
                this.ropAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the operator's rig supervisor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the operator\'s rig supervisor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Supervisor", DataType="String64")]
        public string Supervisor {
            get {
                return this.supervisorField;
            }
            set {
                this.supervisorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the operator's drilling engineer.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the operator\'s drilling engineer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Engineer", DataType="String64")]
        public string Engineer {
            get {
                return this.engineerField;
            }
            set {
                this.engineerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of operator's wellsite geologist.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of operator\'s wellsite geologist.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geologist", DataType="String64")]
        public string Geologist {
            get {
                return this.geologistField;
            }
            set {
                this.geologistField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent rotary drilling.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent rotary drilling.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimDrillRot", DataType="TimeMeasure")]
        public TimeMeasure ETimDrillRot {
            get {
                return this.eTimDrillRotField;
            }
            set {
                this.eTimDrillRotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent slide drilling from the start of the bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent slide drilling from the start of the bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimDrillSlid", DataType="TimeMeasure")]
        public TimeMeasure ETimDrillSlid {
            get {
                return this.eTimDrillSlidField;
            }
            set {
                this.eTimDrillSlidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent circulating from the start of the bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent circulating from the start of the bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimCirc", DataType="TimeMeasure")]
        public TimeMeasure ETimCirc {
            get {
                return this.eTimCircField;
            }
            set {
                this.eTimCircField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent reaming from the start of the bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent reaming from the start of the bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimReam", DataType="TimeMeasure")]
        public TimeMeasure ETimReam {
            get {
                return this.eTimReamField;
            }
            set {
                this.eTimReamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent with no directional drilling work (commonly in hours).</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent with no directional drilling work (commonly in hours).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimHold", DataType="TimeMeasure")]
        public TimeMeasure ETimHold {
            get {
                return this.eTimHoldField;
            }
            set {
                this.eTimHoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent steering the bottomhole assembly (commonly in hours).</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent steering the bottomhole assembly (commonly in hours).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimSteering", DataType="TimeMeasure")]
        public TimeMeasure ETimSteering {
            get {
                return this.eTimSteeringField;
            }
            set {
                this.eTimSteeringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance drilled: rotating.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance drilled: rotating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistDrillRot", DataType="LengthMeasure")]
        public LengthMeasure DistDrillRot {
            get {
                return this.distDrillRotField;
            }
            set {
                this.distDrillRotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance drilled: sliding.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance drilled: sliding.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistDrillSlid", DataType="LengthMeasure")]
        public LengthMeasure DistDrillSlid {
            get {
                return this.distDrillSlidField;
            }
            set {
                this.distDrillSlidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance reamed.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance reamed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistReam", DataType="LengthMeasure")]
        public LengthMeasure DistReam {
            get {
                return this.distReamField;
            }
            set {
                this.distReamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance covered while holding angle with a steerable drilling assembly.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance covered while holding angle with a steerable drilling assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistHold", DataType="LengthMeasure")]
        public LengthMeasure DistHold {
            get {
                return this.distHoldField;
            }
            set {
                this.distHoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance covered while actively steering with a steerable drilling assembly.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance covered while actively steering with a steerable drilling assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistSteering", DataType="LengthMeasure")]
        public LengthMeasure DistSteering {
            get {
                return this.distSteeringField;
            }
            set {
                this.distSteeringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total number of personnel on the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Total number of personnel on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumPob", DataType="int")]
        public int NumPob {
            get {
                return this.numPobField;
            }
            set {
                this.numPobField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumPobSpecified {
            get {
                return this.numPobFieldSpecified;
            }
            set {
                this.numPobFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of contractor personnel on the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of contractor personnel on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumContract", DataType="int")]
        public int NumContract {
            get {
                return this.numContractField;
            }
            set {
                this.numContractField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumContractSpecified {
            get {
                return this.numContractFieldSpecified;
            }
            set {
                this.numContractFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of operator personnel on the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of operator personnel on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumOperator", DataType="int")]
        public int NumOperator {
            get {
                return this.numOperatorField;
            }
            set {
                this.numOperatorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumOperatorSpecified {
            get {
                return this.numOperatorFieldSpecified;
            }
            set {
                this.numOperatorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of service company personnel on the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of service company personnel on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumService", DataType="int")]
        public int NumService {
            get {
                return this.numServiceField;
            }
            set {
                this.numServiceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumServiceSpecified {
            get {
                return this.numServiceFieldSpecified;
            }
            set {
                this.numServiceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Authorization for expenditure (AFE) number that this cost item applies to.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Authorization for expenditure (AFE) number that this cost item applies to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumAFE", DataType="String64")]
        public string NumAFE {
            get {
                return this.numAFEField;
            }
            set {
                this.numAFEField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the hole condition.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the hole condition.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConditionHole", DataType="String64")]
        public string ConditionHole {
            get {
                return this.conditionHoleField;
            }
            set {
                this.conditionHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of a leak off test point.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of a leak off test point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdLot", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdLot {
            get {
                return this.tvdLotField;
            }
            set {
                this.tvdLotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Leak off test equivalent mud weight.</summary>
        [System.ComponentModel.DescriptionAttribute("Leak off test equivalent mud weight.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresLotEmw", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure PresLotEmw {
            get {
                return this.presLotEmwField;
            }
            set {
                this.presLotEmwField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Kick tolerance pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Kick tolerance pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresKickTol", DataType="PressureMeasure")]
        public PressureMeasure PresKickTol {
            get {
                return this.presKickTolField;
            }
            set {
                this.presKickTolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Kick tolerance volume.</summary>
        [System.ComponentModel.DescriptionAttribute("Kick tolerance volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolKickTol", DataType="VolumeMeasure")]
        public VolumeMeasure VolKickTol {
            get {
                return this.volKickTolField;
            }
            set {
                this.volKickTolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum allowable shut-in casing pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum allowable shut-in casing pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Maasp", DataType="PressureMeasure")]
        public PressureMeasure Maasp {
            get {
                return this.maaspField;
            }
            set {
                this.maaspField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the tubular (assembly) used in this report period.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the tubular (assembly) used in this report period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tubular", DataType="String64")]
        public string Tubular {
            get {
                return this.tubularField;
            }
            set {
                this.tubularField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ParentWellbore")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentWellbore", DataType="ObjectAlias")]
        public ObjectAlias[] ParentWellbore {
            get {
                return this.parentWellboreField;
            }
            set {
                this.parentWellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ElevKelly", DataType="WellElevationCoord")]
        public WellElevationCoord ElevKelly {
            get {
                return this.elevKellyField;
            }
            set {
                this.elevKellyField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostDay", DataType="Cost")]
        public Cost CostDay {
            get {
                return this.costDayField;
            }
            set {
                this.costDayField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostDayMud", DataType="Cost")]
        public Cost CostDayMud {
            get {
                return this.costDayMudField;
            }
            set {
                this.costDayMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportStatusInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportStatusInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellboreType {
        
        /// <remarks/>
        bypass,
        
        /// <remarks/>
        initial,
        
        /// <remarks/>
        redrill,
        
        /// <remarks/>
        reentry,
        
        /// <remarks/>
        respud,
        
        /// <remarks/>
        sidetrack,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PresTestType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("leak off test")]
        leakofftest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation integrity test")]
        formationintegritytest,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class WellElevationCoord {
        
        private LengthUom uomField;
        
        private string datumField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>The unit of measure by which the datum is expressed.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The unit of measure by which the datum is expressed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the vertical datums associated with elevation, vertical depth, and measured depth coordinates.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Defines the vertical datums associated with elevation, vertical depth, and measur" +
            "ed depth coordinates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("datum", DataType="String64")]
        public string datum {
            get {
                return this.datumField;
            }
            set {
                this.datumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportWellboreInfo {
        
        private Energistics.DataAccess.Timestamp dTimSpudField;
        
        private Energistics.DataAccess.Timestamp dTimPreSpudField;
        
        private System.DateTime dateDrillCompleteField;
        
        private bool dateDrillCompleteFieldSpecified;
        
        private string operatorField;
        
        private string drillContractorField;
        
        private ObjectAlias[] rigAliasField;
        
        /// <remarks/>
        /// <summary>Date and time at which the well was spudded. This is when the well drilling equipment began to bore into the earth's surface for the purpose of drilling a well.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time at which the well was spudded. This is when the well drilling equip" +
            "ment began to bore into the earth\'s surface for the purpose of drilling a well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimSpud", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimSpud {
            get {
                return this.dTimSpudField;
            }
            set {
                this.dTimSpudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time at which the well was predrilled.  This is when the well drilling equipment begin to bore into  the earth's surface for the purpose of drilling a well.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time at which the well was predrilled.  This is when the well drilling e" +
            "quipment begin to bore into  the earth\'s surface for the purpose of drilling a w" +
            "ell.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPreSpud", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPreSpud {
            get {
                return this.dTimPreSpudField;
            }
            set {
                this.dTimPreSpudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date when the drilling activity was completed.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        [System.ComponentModel.DescriptionAttribute("The date when the drilling activity was completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateDrillComplete", DataType="date")]
        public System.DateTime DateDrillComplete {
            get {
                return this.dateDrillCompleteField;
            }
            set {
                this.dateDrillCompleteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateDrillCompleteSpecified {
            get {
                return this.dateDrillCompleteFieldSpecified;
            }
            set {
                this.dateDrillCompleteFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the drilling Operator company responsible for the well being drilled (the company for whom the well is being drilled).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the drilling Operator company responsible for the well being drilled " +
            "(the company for whom the well is being drilled).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operator", DataType="String64")]
        public string Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the drilling contractor company.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the drilling contractor company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DrillContractor", DataType="String64")]
        public string DrillContractor {
            get {
                return this.drillContractorField;
            }
            set {
                this.drillContractorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RigAlias")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RigAlias", DataType="ObjectAlias")]
        public ObjectAlias[] RigAlias {
            get {
                return this.rigAliasField;
            }
            set {
                this.rigAliasField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportGasReadingInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private GasPeakType readingTypeField;
        
        private bool readingTypeFieldSpecified;
        
        private MdInterval gasReadingMdIntervalField;
        
        private TvdInterval gasReadingTvdIntervalField;
        
        private VolumePerVolumeMeasure gasHighField;
        
        private VolumePerVolumeMeasure gasLowField;
        
        private VolumePerVolumeMeasure methField;
        
        private VolumePerVolumeMeasure ethField;
        
        private VolumePerVolumeMeasure propField;
        
        private VolumePerVolumeMeasure ibutField;
        
        private VolumePerVolumeMeasure nbutField;
        
        private VolumePerVolumeMeasure ipentField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time of the gas reading.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time of the gas reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of gas reading.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of gas reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReadingType", DataType="GasPeakType")]
        public GasPeakType ReadingType {
            get {
                return this.readingTypeField;
            }
            set {
                this.readingTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReadingTypeSpecified {
            get {
                return this.readingTypeFieldSpecified;
            }
            set {
                this.readingTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval over which the gas reading was conducted.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval over which the gas reading was conducted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasReadingMdInterval", DataType="MdInterval")]
        public MdInterval GasReadingMdInterval {
            get {
                return this.gasReadingMdIntervalField;
            }
            set {
                this.gasReadingMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval over which the gas reading was conducted.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval over which the gas reading was conducted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasReadingTvdInterval", DataType="TvdInterval")]
        public TvdInterval GasReadingTvdInterval {
            get {
                return this.gasReadingTvdIntervalField;
            }
            set {
                this.gasReadingTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The highest gas reading.</summary>
        [System.ComponentModel.DescriptionAttribute("The highest gas reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasHigh", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasHigh {
            get {
                return this.gasHighField;
            }
            set {
                this.gasHighField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lowest gas reading.</summary>
        [System.ComponentModel.DescriptionAttribute("The lowest gas reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasLow", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasLow {
            get {
                return this.gasLowField;
            }
            set {
                this.gasLowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Methane (C1) concentration.</summary>
        [System.ComponentModel.DescriptionAttribute("Methane (C1) concentration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Meth", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Meth {
            get {
                return this.methField;
            }
            set {
                this.methField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ethane (C2) concentration.</summary>
        [System.ComponentModel.DescriptionAttribute("Ethane (C2) concentration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Eth", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Eth {
            get {
                return this.ethField;
            }
            set {
                this.ethField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Propane (C3) concentration.</summary>
        [System.ComponentModel.DescriptionAttribute("Propane (C3) concentration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Prop", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Prop {
            get {
                return this.propField;
            }
            set {
                this.propField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Iso-butane (iC4) concentration.</summary>
        [System.ComponentModel.DescriptionAttribute("Iso-butane (iC4) concentration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ibut", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Ibut {
            get {
                return this.ibutField;
            }
            set {
                this.ibutField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Nor-butane (nC4) concentration.</summary>
        [System.ComponentModel.DescriptionAttribute("Nor-butane (nC4) concentration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nbut", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Nbut {
            get {
                return this.nbutField;
            }
            set {
                this.nbutField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Iso-pentane (iC5) concentration.</summary>
        [System.ComponentModel.DescriptionAttribute("Iso-pentane (iC5) concentration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ipent", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Ipent {
            get {
                return this.ipentField;
            }
            set {
                this.ipentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportGasReadingInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportGasReadingInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportPerfInfo {
        
        private Energistics.DataAccess.Timestamp dTimOpenField;
        
        private Energistics.DataAccess.Timestamp dTimCloseField;
        
        private MdInterval perforationMdIntervalField;
        
        private TvdInterval perforationTvdIntervalField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date and time at which the well perforation interval is opened.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time at which the well perforation interval is opened.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimOpen", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimOpen {
            get {
                return this.dTimOpenField;
            }
            set {
                this.dTimOpenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time at which the well perforation interval is closed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time at which the well perforation interval is closed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimClose", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimClose {
            get {
                return this.dTimCloseField;
            }
            set {
                this.dTimCloseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval between the top and the base of the perforations.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval between the top and the base of the perforations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationMdInterval", DataType="MdInterval")]
        public MdInterval PerforationMdInterval {
            get {
                return this.perforationMdIntervalField;
            }
            set {
                this.perforationMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval between the top and the base of the perforations.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval between the top and the base of the perforations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationTvdInterval", DataType="TvdInterval")]
        public TvdInterval PerforationTvdInterval {
            get {
                return this.perforationTvdIntervalField;
            }
            set {
                this.perforationTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportPerfInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportPerfInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportStratInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdTopField;
        
        private WellVerticalDepthCoord tvdTopField;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time at which a preliminary zonation was established.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time at which a preliminary zonation was established.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at the top of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth at the top of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdTop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdTop {
            get {
                return this.mdTopField;
            }
            set {
                this.mdTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth at the top of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth at the top of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdTop", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdTop {
            get {
                return this.tvdTopField;
            }
            set {
                this.tvdTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A lithological description of the geological formation at the given depth.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A lithological description of the geological formation at the given depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportStratInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportStratInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportControlIncidentInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdInflowField;
        
        private WellVerticalDepthCoord tvdInflowField;
        
        private string phaseField;
        
        private DrillActivityCode activityCodeField;
        
        private bool activityCodeFieldSpecified;
        
        private string detailActivityField;
        
        private TimeMeasure eTimLostField;
        
        private Energistics.DataAccess.Timestamp dTimRegainedField;
        
        private LengthMeasure diaBitField;
        
        private MeasuredDepthCoord mdBitField;
        
        private MassPerVolumeMeasure wtMudField;
        
        private MassPerVolumeMeasure porePressureField;
        
        private LengthMeasure diaCsgLastField;
        
        private MeasuredDepthCoord mdCsgLastField;
        
        private VolumeMeasure volMudGainedField;
        
        private PressureMeasure presShutInCasingField;
        
        private PressureMeasure presShutInDrillField;
        
        private WellControlIncidentType incidentTypeField;
        
        private bool incidentTypeFieldSpecified;
        
        private WellKillingProcedureType killingTypeField;
        
        private bool killingTypeFieldSpecified;
        
        private string formationField;
        
        private ThermodynamicTemperatureMeasure tempBottomField;
        
        private PressureMeasure presMaxChokeField;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private ObjectAlias[] proprietaryCodeField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time of the well control incident.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time of the well control incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth to the well inflow entry point.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth to the well inflow entry point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInflow", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdInflow {
            get {
                return this.mdInflowField;
            }
            set {
                this.mdInflowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The true vertical depth to the well inflow entry point.</summary>
        [System.ComponentModel.DescriptionAttribute("The true vertical depth to the well inflow entry point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdInflow", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdInflow {
            get {
                return this.tvdInflowField;
            }
            set {
                this.tvdInflowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Phase is large activity classification, e.g. drill surface hole.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Phase is large activity classification, e.g. drill surface hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phase", DataType="String64")]
        public string Phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A code used to define rig activity.</summary>
        [System.ComponentModel.DescriptionAttribute("A code used to define rig activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivityCode", DataType="DrillActivityCode")]
        public DrillActivityCode ActivityCode {
            get {
                return this.activityCodeField;
            }
            set {
                this.activityCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActivityCodeSpecified {
            get {
                return this.activityCodeFieldSpecified;
            }
            set {
                this.activityCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Custom string to further define an activity.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Custom string to further define an activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DetailActivity", DataType="String64")]
        public string DetailActivity {
            get {
                return this.detailActivityField;
            }
            set {
                this.detailActivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The amount of time lost because of the well control incident. Commonly specified in hours.</summary>
        [System.ComponentModel.DescriptionAttribute("The amount of time lost because of the well control incident. Commonly specified " +
            "in hours.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimLost", DataType="TimeMeasure")]
        public TimeMeasure ETimLost {
            get {
                return this.eTimLostField;
            }
            set {
                this.eTimLostField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time at which control of the well was regained.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time at which control of the well was regained.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRegained", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRegained {
            get {
                return this.dTimRegainedField;
            }
            set {
                this.dTimRegainedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The drill bit nominal outside diameter at the time of the well control incident.</summary>
        [System.ComponentModel.DescriptionAttribute("The drill bit nominal outside diameter at the time of the well control incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaBit", DataType="LengthMeasure")]
        public LengthMeasure DiaBit {
            get {
                return this.diaBitField;
            }
            set {
                this.diaBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the bit at the time of the the well control incident.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the bit at the time of the the well control incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBit", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBit {
            get {
                return this.mdBitField;
            }
            set {
                this.mdBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the drilling fluid at the time of the well control incident.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the drilling fluid at the time of the well control incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WtMud", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure WtMud {
            get {
                return this.wtMudField;
            }
            set {
                this.wtMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The equivalent mud weight value of the pore pressure reading.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The equivalent mud weight value of the pore pressure reading.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PorePressure", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure PorePressure {
            get {
                return this.porePressureField;
            }
            set {
                this.porePressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of the last installed casing.</summary>
        [System.ComponentModel.DescriptionAttribute("Diameter of the last installed casing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaCsgLast", DataType="LengthMeasure")]
        public LengthMeasure DiaCsgLast {
            get {
                return this.diaCsgLastField;
            }
            set {
                this.diaCsgLastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the last casing joint.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the last casing joint.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdCsgLast", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdCsgLast {
            get {
                return this.mdCsgLastField;
            }
            set {
                this.mdCsgLastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The gained volume of drilling fluid due to the well kick.</summary>
        [System.ComponentModel.DescriptionAttribute("The gained volume of drilling fluid due to the well kick.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolMudGained", DataType="VolumeMeasure")]
        public VolumeMeasure VolMudGained {
            get {
                return this.volMudGainedField;
            }
            set {
                this.volMudGainedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The shut in casing pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The shut in casing pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresShutInCasing", DataType="PressureMeasure")]
        public PressureMeasure PresShutInCasing {
            get {
                return this.presShutInCasingField;
            }
            set {
                this.presShutInCasingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The actual pressure in the drill pipe when the rams were closed around it.</summary>
        [System.ComponentModel.DescriptionAttribute("The actual pressure in the drill pipe when the rams were closed around it.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresShutInDrill", DataType="PressureMeasure")]
        public PressureMeasure PresShutInDrill {
            get {
                return this.presShutInDrillField;
            }
            set {
                this.presShutInDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of well control incident.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of well control incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IncidentType", DataType="WellControlIncidentType")]
        public WellControlIncidentType IncidentType {
            get {
                return this.incidentTypeField;
            }
            set {
                this.incidentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IncidentTypeSpecified {
            get {
                return this.incidentTypeFieldSpecified;
            }
            set {
                this.incidentTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of procedure used to kill the well.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of procedure used to kill the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KillingType", DataType="WellKillingProcedureType")]
        public WellKillingProcedureType KillingType {
            get {
                return this.killingTypeField;
            }
            set {
                this.killingTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool KillingTypeSpecified {
            get {
                return this.killingTypeFieldSpecified;
            }
            set {
                this.killingTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The lithological description of the geological formation at the incident depth.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The lithological description of the geological formation at the incident depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Formation", DataType="String2000")]
        public string Formation {
            get {
                return this.formationField;
            }
            set {
                this.formationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The temperature at the bottom of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("The temperature at the bottom of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempBottom", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempBottom {
            get {
                return this.tempBottomField;
            }
            set {
                this.tempBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum pressure that the choke valve can be exposed to.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum pressure that the choke valve can be exposed to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresMaxChoke", DataType="PressureMeasure")]
        public PressureMeasure PresMaxChoke {
            get {
                return this.presMaxChokeField;
            }
            set {
                this.presMaxChokeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description of the well control incident.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A description of the well control incident.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ProprietaryCode")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProprietaryCode", DataType="ObjectAlias")]
        public ObjectAlias[] ProprietaryCode {
            get {
                return this.proprietaryCodeField;
            }
            set {
                this.proprietaryCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportControlIncidentInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportControlIncidentInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum DrillActivityCode {
        
        /// <remarks/>
        abandonment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("abandonment -- log plugs")]
        abandonmentlogplugs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("abandonment -- run plugs")]
        abandonmentrunplugs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("abandonment -- wait on cement")]
        abandonmentwaitoncement,
        
        /// <remarks/>
        casing,
        
        /// <remarks/>
        cement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement -- circulate")]
        cementcirculate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement -- other")]
        cementother,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement -- rig up")]
        cementrigup,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement -- wait on cement")]
        cementwaitoncement,
        
        /// <remarks/>
        circulate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- boulder or gravel")]
        circulateboulderorgravel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- casing")]
        circulatecasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- cementing")]
        circulatecementing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- circulate samples")]
        circulatecirculatesamples,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- coring")]
        circulatecoring,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- drilling")]
        circulatedrilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- fishing")]
        circulatefishing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- gumbo attack")]
        circulategumboattack,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- logging")]
        circulatelogging,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- lost circulation")]
        circulatelostcirculation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulate -- well control")]
        circulatewellcontrol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion operations")]
        completionoperations,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion operations -- gravel packing")]
        completionoperationsgravelpacking,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion operations -- logging")]
        completionoperationslogging,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion operations -- rig up")]
        completionoperationsrigup,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion operations -- running liner")]
        completionoperationsrunningliner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion operations -- tear down")]
        completionoperationsteardown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion operations -- testing")]
        completionoperationstesting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cond mud")]
        condmud,
        
        /// <remarks/>
        coring,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coring -- conventional")]
        coringconventional,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coring -- flow check")]
        coringflowcheck,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coring -- laydown barrel")]
        coringlaydownbarrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coring -- oriented")]
        coringoriented,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coring -- plastic sleeve")]
        coringplasticsleeve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coring -- rig up core barrel")]
        coringrigupcorebarrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coring -- sponge")]
        coringsponge,
        
        /// <remarks/>
        cut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deviation survey")]
        deviationsurvey,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deviation survey -- dir multi-shot")]
        deviationsurveydirmultishot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deviation survey -- dir single shot")]
        deviationsurveydirsingleshot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deviation survey -- drift")]
        deviationsurveydrift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deviation survey -- gyro")]
        deviationsurveygyro,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deviation survey -- MWD")]
        deviationsurveyMWD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dir work")]
        dirwork,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dir work -- horizontal drilling")]
        dirworkhorizontaldrilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dir work -- motor drilling")]
        dirworkmotordrilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dir work -- orient")]
        dirworkorient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dir work -- rotary drilling")]
        dirworkrotarydrilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dir work -- slant drilling")]
        dirworkslantdrilling,
        
        /// <remarks/>
        drilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling -- casing")]
        drillingcasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling -- connection")]
        drillingconnection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling -- drill cement")]
        drillingdrillcement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling -- flow check")]
        drillingflowcheck,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling -- hole opening")]
        drillingholeopening,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling -- new hole")]
        drillingnewhole,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling -- sidetracking")]
        drillingsidetracking,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling -- under-reaming")]
        drillingunderreaming,
        
        /// <remarks/>
        DST,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DST -- cased hole")]
        DSTcasedhole,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DST -- lay down tools")]
        DSTlaydowntools,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DST -- open hole")]
        DSTopenhole,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DST -- open hole closed chamber")]
        DSTopenholeclosedchamber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("DST -- rig up tools")]
        DSTriguptools,
        
        /// <remarks/>
        fishing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fishing -- BHA")]
        fishingBHA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fishing -- casing")]
        fishingcasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fishing -- cones")]
        fishingcones,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fishing -- other")]
        fishingother,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fishing -- stuck pipe")]
        fishingstuckpipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fishing -- wireline tools")]
        fishingwirelinetools,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("float equip")]
        floatequip,
        
        /// <remarks/>
        HSE,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HSE -- hold drill")]
        HSEholddrill,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HSE -- incident")]
        HSEincident,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("HSE -- safety meeting")]
        HSEsafetymeeting,
        
        /// <remarks/>
        mill,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill -- cut casing or tubing")]
        millcutcasingortubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill -- milling")]
        millmilling,
        
        /// <remarks/>
        miscellaneous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nipple up BOP")]
        nippleupBOP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nipple up BOP -- diverter")]
        nippleupBOPdiverter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nipple up BOP -- manifold")]
        nippleupBOPmanifold,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nipple up BOP -- other")]
        nippleupBOPother,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nipple up BOP -- PVT system")]
        nippleupBOPPVTsystem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nipple up BOP -- stack")]
        nippleupBOPstack,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plug back")]
        plugback,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plug back -- abandonment")]
        plugbackabandonment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plug back -- kick off plug")]
        plugbackkickoffplug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plug back -- lost circulation")]
        plugbacklostcirculation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plug back -- wait on cement")]
        plugbackwaitoncement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plug back -- well control")]
        plugbackwellcontrol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure test")]
        pressuretest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure test -- BOP manifold")]
        pressuretestBOPmanifold,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure test -- BOP stack")]
        pressuretestBOPstack,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure test -- form integrity test")]
        pressuretestformintegritytest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure test -- form leak off test")]
        pressuretestformleakofftest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure test -- packer")]
        pressuretestpacker,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure test -- PIT")]
        pressuretestPIT,
        
        /// <remarks/>
        reaming,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reaming -- back reaming")]
        reamingbackreaming,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reaming -- coring")]
        reamingcoring,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reaming -- drill")]
        reamingdrill,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reaming -- logging")]
        reaminglogging,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reaming -- under-reaming")]
        reamingunderreaming,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move")]
        rigmove,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move -- anchor handling")]
        rigmoveanchorhandling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move -- inter-pad move")]
        rigmoveinterpadmove,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move -- inter-well move")]
        rigmoveinterwellmove,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move -- jack up or down")]
        rigmovejackupordown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move -- other")]
        rigmoveother,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move -- position rig")]
        rigmovepositionrig,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move -- skid rig")]
        rigmoveskidrig,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig release")]
        rigrelease,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig release -- cut casing")]
        rigreleasecutcasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig release -- install capping assembly")]
        rigreleaseinstallcappingassembly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig release -- MOB or DE-MOB")]
        rigreleaseMOBorDEMOB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig repairs")]
        rigrepairs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig repairs -- drawworks")]
        rigrepairsdrawworks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig repairs -- electrical")]
        rigrepairselectrical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig repairs -- mud system")]
        rigrepairsmudsystem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig repairs -- other")]
        rigrepairsother,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig repairs -- rotary")]
        rigrepairsrotary,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig repairs -- subsea equipment")]
        rigrepairssubseaequipment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig repairs -- well control equipment")]
        rigrepairswellcontrolequipment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig service")]
        rigservice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig service -- lubricate rig")]
        rigservicelubricaterig,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig service -- test equipment")]
        rigservicetestequipment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig up or tear down")]
        riguporteardown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig up or tear down -- rig up")]
        riguporteardownrigup,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig up or tear down -- site work")]
        riguporteardownsitework,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig up or tear down -- tear down")]
        riguporteardownteardown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("run casing")]
        runcasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("run liner")]
        runliner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("run or pull riser")]
        runorpullriser,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("run or pull riser -- other")]
        runorpullriserother,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("run or pull riser -- run or pull riser")]
        runorpullriserrunorpullriser,
        
        /// <remarks/>
        set,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slip drilling line")]
        slipdrillingline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("squeeze cement")]
        squeezecement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("squeeze cement -- casing repair")]
        squeezecementcasingrepair,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("squeeze cement -- casing shoe")]
        squeezecementcasingshoe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("squeeze cement -- parted casing")]
        squeezecementpartedcasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("squeeze cement -- perforations DST")]
        squeezecementperforationsDST,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stuck pipe")]
        stuckpipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface string handling")]
        surfacestringhandling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("test completion")]
        testcompletion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("testing general")]
        testinggeneral,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("testing general -- equipment")]
        testinggeneralequipment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("testing general -- flow")]
        testinggeneralflow,
        
        /// <remarks/>
        tripping,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tripping -- back-reaming")]
        trippingbackreaming,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tripping -- flow check")]
        trippingflowcheck,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tripping -- short trip in")]
        trippingshorttripin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tripping -- short trip out")]
        trippingshorttripout,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tripping -- trip in (from surface)")]
        trippingtripinfromsurface,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tripping -- trip out (to surface)")]
        trippingtripouttosurface,
        
        /// <remarks/>
        wait,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- daylight")]
        waitdaylight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- environmental or regulatory")]
        waitenvironmentalorregulatory,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- equipment")]
        waitequipment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- holiday")]
        waitholiday,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- ice")]
        waitice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- on orders")]
        waitonorders,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- operator")]
        waitoperator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- other")]
        waitother,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- partners")]
        waitpartners,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- service company")]
        waitservicecompany,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait -- weather")]
        waitweather,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well control")]
        wellcontrol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well control -- mix")]
        wellcontrolmix,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well control -- shut in")]
        wellcontrolshutin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well control -- strip")]
        wellcontrolstrip,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well control -- well kill")]
        wellcontrolwellkill,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc")]
        wellsrvc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- casing repair")]
        wellsrvccasingrepair,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- clean well to compl fluid")]
        wellsrvccleanwelltocomplfluid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- coiled tubing work")]
        wellsrvccoiledtubingwork,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- gravel pack")]
        wellsrvcgravelpack,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- install or test xmas tree")]
        wellsrvcinstallortestxmastree,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- kill well")]
        wellsrvckillwell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- land")]
        wellsrvcland,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- perforate")]
        wellsrvcperforate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- pull completion")]
        wellsrvcpullcompletion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- pull suspension plugs")]
        wellsrvcpullsuspensionplugs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- run completion")]
        wellsrvcruncompletion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- run screens")]
        wellsrvcrunscreens,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- sand control")]
        wellsrvcsandcontrol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- stimulation")]
        wellsrvcstimulation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- subsea work")]
        wellsrvcsubseawork,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- surface line work")]
        wellsrvcsurfacelinework,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- suspend well or pull BOPs")]
        wellsrvcsuspendwellorpullBOPs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- test well")]
        wellsrvctestwell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- wash")]
        wellsrvcwash,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- wireline work")]
        wellsrvcwirelinework,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- work tubulars")]
        wellsrvcworktubulars,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well srvc -- workstring run")]
        wellsrvcworkstringrun,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline logs")]
        wirelinelogs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline logs -- abandonment")]
        wirelinelogsabandonment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline logs -- evaluation")]
        wirelinelogsevaluation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline logs -- form tester")]
        wirelinelogsformtester,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline logs -- other")]
        wirelinelogsother,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline logs -- side wall cores")]
        wirelinelogssidewallcores,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline logs -- velocity")]
        wirelinelogsvelocity,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellControlIncidentType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow gas kick")]
        shallowgaskick,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water kick")]
        waterkick,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil kick")]
        oilkick,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas kick")]
        gaskick,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellKillingProcedureType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drillers method")]
        drillersmethod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wait and weight")]
        waitandweight,
        
        /// <remarks/>
        bullheading,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lubricate and bleed")]
        lubricateandbleed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("forward circulation")]
        forwardcirculation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reverse circulation")]
        reversecirculation,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportEquipFailureInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private string equipClassField;
        
        private TimeMeasure eTimMissProductionField;
        
        private Energistics.DataAccess.Timestamp dTimRepairField;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time that the equipment failed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that the equipment failed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the operation end point where the failure happened.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the operation end point where the failure happened.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The true vertical depth of the  operation end point where failure the failure happened.</summary>
        [System.ComponentModel.DescriptionAttribute("The true vertical depth of the  operation end point where failure the failure hap" +
            "pened.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The classification of the equipment that failed.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The classification of the equipment that failed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipClass", DataType="String64")]
        public string EquipClass {
            get {
                return this.equipClassField;
            }
            set {
                this.equipClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The missed production time because of the equipment failure.</summary>
        [System.ComponentModel.DescriptionAttribute("The missed production time because of the equipment failure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimMissProduction", DataType="TimeMeasure")]
        public TimeMeasure ETimMissProduction {
            get {
                return this.eTimMissProductionField;
            }
            set {
                this.eTimMissProductionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time at which the production equipment was  repaired and ready for production.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time at which the production equipment was  repaired and ready for p" +
            "roduction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimRepair", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimRepair {
            get {
                return this.dTimRepairField;
            }
            set {
                this.dTimRepairField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description of the equipment failure.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A description of the equipment failure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportEquipFailureInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportEquipFailureInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportLithShowInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MdInterval showMdIntervalField;
        
        private TvdInterval showTvdIntervalField;
        
        private string showField;
        
        private string lithologyField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time that the well test was completed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that the well test was completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval over which the show appears.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval over which the show appears.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShowMdInterval", DataType="MdInterval")]
        public MdInterval ShowMdInterval {
            get {
                return this.showMdIntervalField;
            }
            set {
                this.showMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval over which the show appears.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval over which the show appears.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShowTvdInterval", DataType="TvdInterval")]
        public TvdInterval ShowTvdInterval {
            get {
                return this.showTvdIntervalField;
            }
            set {
                this.showTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of any shows in the interval.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of any shows in the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Show", DataType="String2000")]
        public string Show {
            get {
                return this.showField;
            }
            set {
                this.showField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A geological/lithological description/evaluation of the interval.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A geological/lithological description/evaluation of the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Lithology", DataType="String2000")]
        public string Lithology {
            get {
                return this.lithologyField;
            }
            set {
                this.lithologyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportLithShowInfo</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportLithShowInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportFormTestInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private PressureMeasure presPoreField;
        
        private bool goodSealField;
        
        private bool goodSealFieldSpecified;
        
        private MeasuredDepthCoord mdSampleField;
        
        private string dominateComponentField;
        
        private MassPerVolumeMeasure densityHCField;
        
        private VolumeMeasure volumeSampleField;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time that the wireline formation test was completed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that the wireline formation test was completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at which the wireline formation test was conducted.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth at which the wireline formation test was conducted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth at which the wireline formation test was conducted.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth at which the wireline formation test was conducted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation pore pressure. The pressure of fluids within the pores of a reservoir, usually hydrostatic pressure,  or the pressure exerted by a column of water from the formation's depth to sea level.</summary>
        [System.ComponentModel.DescriptionAttribute("The formation pore pressure. The pressure of fluids within the pores of a reservo" +
            "ir, usually hydrostatic pressure,  or the pressure exerted by a column of water " +
            "from the formation\'s depth to sea level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresPore", DataType="PressureMeasure")]
        public PressureMeasure PresPore {
            get {
                return this.presPoreField;
            }
            set {
                this.presPoreField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Was there a good seal for the wireline formation test? Values are "true" or "1" or "false" or "0".</summary>
        [System.ComponentModel.DescriptionAttribute("Was there a good seal for the wireline formation test? Values are \"true\" or \"1\" o" +
            "r \"false\" or \"0\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GoodSeal", DataType="boolean")]
        public bool GoodSeal {
            get {
                return this.goodSealField;
            }
            set {
                this.goodSealField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GoodSealSpecified {
            get {
                return this.goodSealFieldSpecified;
            }
            set {
                this.goodSealFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth where the fluid sample was taken.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth where the fluid sample was taken.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdSample", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdSample {
            get {
                return this.mdSampleField;
            }
            set {
                this.mdSampleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The dominate component in the fluid sample.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The dominate component in the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DominateComponent", DataType="String64")]
        public string DominateComponent {
            get {
                return this.dominateComponentField;
            }
            set {
                this.dominateComponentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the hydrocarbon component of the fluid sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the hydrocarbon component of the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityHC", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityHC {
            get {
                return this.densityHCField;
            }
            set {
                this.densityHCField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume of the fluid sample.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume of the fluid sample.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeSample", DataType="VolumeMeasure")]
        public VolumeMeasure VolumeSample {
            get {
                return this.volumeSampleField;
            }
            set {
                this.volumeSampleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A detailed description of the wireline formation test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A detailed description of the wireline formation test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportFormTestInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportFormTestInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportWellTestInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private WellTestType testTypeField;
        
        private bool testTypeFieldSpecified;
        
        private int testNumberField;
        
        private bool testNumberFieldSpecified;
        
        private MdInterval testMdIntervalField;
        
        private TvdInterval testTvdIntervalField;
        
        private LengthMeasure chokeOrificeSizeField;
        
        private MassPerVolumeMeasure densityOilField;
        
        private MassPerVolumeMeasure densityWaterField;
        
        private MassPerVolumeMeasure densityGasField;
        
        private VolumePerTimeMeasure flowRateOilField;
        
        private VolumePerTimeMeasure flowRateWaterField;
        
        private VolumePerTimeMeasure flowRateGasField;
        
        private PressureMeasure presShutInField;
        
        private PressureMeasure presFlowingField;
        
        private PressureMeasure presBottomField;
        
        private VolumePerVolumeMeasure gasOilRatioField;
        
        private VolumePerVolumeMeasure waterOilRatioField;
        
        private MassPerMassMeasure chlorideField;
        
        private MassPerMassMeasure carbonDioxideField;
        
        private MassPerMassMeasure hydrogenSulfideField;
        
        private VolumeMeasure volOilTotalField;
        
        private VolumeMeasure volGasTotalField;
        
        private VolumeMeasure volWaterTotalField;
        
        private VolumeMeasure volOilStoredField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time that the well test was completed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that the well test was completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestType", DataType="WellTestType")]
        public WellTestType TestType {
            get {
                return this.testTypeField;
            }
            set {
                this.testTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TestTypeSpecified {
            get {
                return this.testTypeFieldSpecified;
            }
            set {
                this.testTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of the well test.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of the well test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNumber", DataType="int")]
        public int TestNumber {
            get {
                return this.testNumberField;
            }
            set {
                this.testNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TestNumberSpecified {
            get {
                return this.testNumberFieldSpecified;
            }
            set {
                this.testNumberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test interval expressed as a measured depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Test interval expressed as a measured depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestMdInterval", DataType="MdInterval")]
        public MdInterval TestMdInterval {
            get {
                return this.testMdIntervalField;
            }
            set {
                this.testMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test interval expressed as a true vertical depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Test interval expressed as a true vertical depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestTvdInterval", DataType="TvdInterval")]
        public TvdInterval TestTvdInterval {
            get {
                return this.testTvdIntervalField;
            }
            set {
                this.testTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diameter of the choke opening.</summary>
        [System.ComponentModel.DescriptionAttribute("The diameter of the choke opening.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChokeOrificeSize", DataType="LengthMeasure")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return this.chokeOrificeSizeField;
            }
            set {
                this.chokeOrificeSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the produced oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the produced oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityOil", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityOil {
            get {
                return this.densityOilField;
            }
            set {
                this.densityOilField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the produced water.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the produced water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityWater", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityWater {
            get {
                return this.densityWaterField;
            }
            set {
                this.densityWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The density of the produced gas.</summary>
        [System.ComponentModel.DescriptionAttribute("The density of the produced gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityGas", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensityGas {
            get {
                return this.densityGasField;
            }
            set {
                this.densityGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum rate at which oil was produced.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum rate at which oil was produced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowRateOil", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowRateOil {
            get {
                return this.flowRateOilField;
            }
            set {
                this.flowRateOilField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum rate at which water was produced.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum rate at which water was produced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowRateWater", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowRateWater {
            get {
                return this.flowRateWaterField;
            }
            set {
                this.flowRateWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum rate at which gas was produced.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum rate at which gas was produced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowRateGas", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowRateGas {
            get {
                return this.flowRateGasField;
            }
            set {
                this.flowRateGasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The final shut-in pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The final shut-in pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresShutIn", DataType="PressureMeasure")]
        public PressureMeasure PresShutIn {
            get {
                return this.presShutInField;
            }
            set {
                this.presShutInField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The final flowing pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The final flowing pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresFlowing", DataType="PressureMeasure")]
        public PressureMeasure PresFlowing {
            get {
                return this.presFlowingField;
            }
            set {
                this.presFlowingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The final bottomhole pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The final bottomhole pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBottom", DataType="PressureMeasure")]
        public PressureMeasure PresBottom {
            get {
                return this.presBottomField;
            }
            set {
                this.presBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ratio of the volume of gas to the volume of oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The ratio of the volume of gas to the volume of oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasOilRatio", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure GasOilRatio {
            get {
                return this.gasOilRatioField;
            }
            set {
                this.gasOilRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative amount of water per amount of oil.</summary>
        [System.ComponentModel.DescriptionAttribute("The relative amount of water per amount of oil.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterOilRatio", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure WaterOilRatio {
            get {
                return this.waterOilRatioField;
            }
            set {
                this.waterOilRatioField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative amount of chloride in the produced water.</summary>
        [System.ComponentModel.DescriptionAttribute("The relative amount of chloride in the produced water.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Chloride", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure Chloride {
            get {
                return this.chlorideField;
            }
            set {
                this.chlorideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative amount of CO2 gas.</summary>
        [System.ComponentModel.DescriptionAttribute("The relative amount of CO2 gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CarbonDioxide", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure CarbonDioxide {
            get {
                return this.carbonDioxideField;
            }
            set {
                this.carbonDioxideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative amount of H2S gas.</summary>
        [System.ComponentModel.DescriptionAttribute("The relative amount of H2S gas.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HydrogenSulfide", DataType="MassPerMassMeasure")]
        public MassPerMassMeasure HydrogenSulfide {
            get {
                return this.hydrogenSulfideField;
            }
            set {
                this.hydrogenSulfideField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total amount of oil produced. This includes oil that was disposed of (e.g., burned).</summary>
        [System.ComponentModel.DescriptionAttribute("The total amount of oil produced. This includes oil that was disposed of (e.g., b" +
            "urned).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolOilTotal", DataType="VolumeMeasure")]
        public VolumeMeasure VolOilTotal {
            get {
                return this.volOilTotalField;
            }
            set {
                this.volOilTotalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total amount of gas produced. This includes gas that was disposed of (e.g., burned).</summary>
        [System.ComponentModel.DescriptionAttribute("The total amount of gas produced. This includes gas that was disposed of (e.g., b" +
            "urned).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolGasTotal", DataType="VolumeMeasure")]
        public VolumeMeasure VolGasTotal {
            get {
                return this.volGasTotalField;
            }
            set {
                this.volGasTotalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total amount of water produced. This includes water that was disposed of.</summary>
        [System.ComponentModel.DescriptionAttribute("The total amount of water produced. This includes water that was disposed of.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolWaterTotal", DataType="VolumeMeasure")]
        public VolumeMeasure VolWaterTotal {
            get {
                return this.volWaterTotalField;
            }
            set {
                this.volWaterTotalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total amount of produced oil that was stored.</summary>
        [System.ComponentModel.DescriptionAttribute("The total amount of produced oil that was stored.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolOilStored", DataType="VolumeMeasure")]
        public VolumeMeasure VolOilStored {
            get {
                return this.volOilStoredField;
            }
            set {
                this.volOilStoredField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportWellTestInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportWellTestInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellTestType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill stem test")]
        drillstemtest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production test")]
        productiontest,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportCoreInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private string coreNumberField;
        
        private MdInterval coredMdIntervalField;
        
        private TvdInterval coredTvdIntervalField;
        
        private LengthMeasure lenRecoveredField;
        
        private VolumePerVolumeMeasure recoverPcField;
        
        private LengthMeasure lenBarrelField;
        
        private InnerBarrelType innerBarrelTypeField;
        
        private bool innerBarrelTypeFieldSpecified;
        
        private string coreDescriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time that the core was completed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that the core was completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Core identification number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Core identification number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoreNumber", DataType="String64")]
        public string CoreNumber {
            get {
                return this.coreNumberField;
            }
            set {
                this.coreNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cored interval expressed as measured depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Cored interval expressed as measured depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoredMdInterval", DataType="MdInterval")]
        public MdInterval CoredMdInterval {
            get {
                return this.coredMdIntervalField;
            }
            set {
                this.coredMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cored interval expressed as true vertical depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Cored interval expressed as true vertical depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoredTvdInterval", DataType="TvdInterval")]
        public TvdInterval CoredTvdInterval {
            get {
                return this.coredTvdIntervalField;
            }
            set {
                this.coredTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the core recovered.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the core recovered.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenRecovered", DataType="LengthMeasure")]
        public LengthMeasure LenRecovered {
            get {
                return this.lenRecoveredField;
            }
            set {
                this.lenRecoveredField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The relative amount of core recovered.</summary>
        [System.ComponentModel.DescriptionAttribute("The relative amount of core recovered.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RecoverPc", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure RecoverPc {
            get {
                return this.recoverPcField;
            }
            set {
                this.recoverPcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of  the core barrel.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of  the core barrel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenBarrel", DataType="LengthMeasure")]
        public LengthMeasure LenBarrel {
            get {
                return this.lenBarrelField;
            }
            set {
                this.lenBarrelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Core inner barrel type.</summary>
        [System.ComponentModel.DescriptionAttribute("Core inner barrel type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InnerBarrelType", DataType="InnerBarrelType")]
        public InnerBarrelType InnerBarrelType {
            get {
                return this.innerBarrelTypeField;
            }
            set {
                this.innerBarrelTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool InnerBarrelTypeSpecified {
            get {
                return this.innerBarrelTypeFieldSpecified;
            }
            set {
                this.innerBarrelTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>General core description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("General core description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoreDescription", DataType="String2000")]
        public string CoreDescription {
            get {
                return this.coreDescriptionField;
            }
            set {
                this.coreDescriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportCoreInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportCoreInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum InnerBarrelType {
        
        /// <remarks/>
        undifferentiated,
        
        /// <remarks/>
        aluminum,
        
        /// <remarks/>
        gel,
        
        /// <remarks/>
        fiberglass,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BottomHoleStaticTemperature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BottomHoleCirculatingTemperature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractBottomHoleTemperature {
        
        private ThermodynamicTemperatureMeasure bottomHoleTemperatureField;
        
        /// <remarks/>
        /// <summary>Bottomhole temperature for the job or reporting period.</summary>
        [System.ComponentModel.DescriptionAttribute("Bottomhole temperature for the job or reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomHoleTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure BottomHoleTemperature {
            get {
                return this.bottomHoleTemperatureField;
            }
            set {
                this.bottomHoleTemperatureField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BottomHoleStaticTemperature : AbstractBottomHoleTemperature {
        
        private TimeMeasure eTimStaticField;
        
        /// <remarks/>
        /// <summary>Elapsed time since circulation stopped.</summary>
        [System.ComponentModel.DescriptionAttribute("Elapsed time since circulation stopped.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("eTimStatic", DataType="TimeMeasure")]
        public TimeMeasure eTimStatic {
            get {
                return this.eTimStaticField;
            }
            set {
                this.eTimStaticField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BottomHoleCirculatingTemperature : AbstractBottomHoleTemperature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillReportLogInfo {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private string runNumberField;
        
        private string serviceCompanyField;
        
        private MdInterval loggedMdIntervalField;
        
        private TvdInterval loggedTvdIntervalField;
        
        private string toolField;
        
        private MeasuredDepthCoord mdTempToolField;
        
        private WellVerticalDepthCoord tvdTempToolField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private AbstractBottomHoleTemperature bottomHoleTemperatureField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The date and time that the log was completed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time that the log was completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log run number.  For measurement while drilling, this should be the  bottom hole assembly number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Log run number.  For measurement while drilling, this should be the  bottom hole " +
            "assembly number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RunNumber", DataType="String64")]
        public string RunNumber {
            get {
                return this.runNumberField;
            }
            set {
                this.runNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the contractor who provided the service.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the contractor who provided the service.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ServiceCompany", DataType="String64")]
        public string ServiceCompany {
            get {
                return this.serviceCompanyField;
            }
            set {
                this.serviceCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval from the top to the base of the interval logged.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval from the top to the base of the interval logged.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggedMdInterval", DataType="MdInterval")]
        public MdInterval LoggedMdInterval {
            get {
                return this.loggedMdIntervalField;
            }
            set {
                this.loggedMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval from the top to the base of the interval logged.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval from the top to the base of the interval logged.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggedTvdInterval", DataType="TvdInterval")]
        public TvdInterval LoggedTvdInterval {
            get {
                return this.loggedTvdIntervalField;
            }
            set {
                this.loggedTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A description of the logging tool.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A description of the logging tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tool", DataType="String64")]
        public string Tool {
            get {
                return this.toolField;
            }
            set {
                this.toolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth to the temperature measurement tool.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth to the temperature measurement tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdTempTool", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdTempTool {
            get {
                return this.mdTempToolField;
            }
            set {
                this.mdTempToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth to the temperature measurement tool.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth to the temperature measurement tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdTempTool", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdTempTool {
            get {
                return this.tvdTempToolField;
            }
            set {
                this.tvdTempToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomHoleTemperature", DataType="AbstractBottomHoleTemperature")]
        public AbstractBottomHoleTemperature BottomHoleTemperature {
            get {
                return this.bottomHoleTemperatureField;
            }
            set {
                this.bottomHoleTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillReportLogInfo.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillReportLogInfo.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DrillActivity {
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private TimeMeasure durationField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private string phaseField;
        
        private DrillActivityCode activityCodeField;
        
        private bool activityCodeFieldSpecified;
        
        private string detailActivityField;
        
        private DrillActivityClassType typeActivityClassField;
        
        private bool typeActivityClassFieldSpecified;
        
        private MdInterval activityMdIntervalField;
        
        private TvdInterval activityTvdIntervalField;
        
        private MdInterval bitMdIntervalField;
        
        private string stateField;
        
        private StateDetailActivity stateDetailActivityField;
        
        private bool stateDetailActivityFieldSpecified;
        
        private string operatorField;
        
        private string tubularField;
        
        private bool optimumField;
        
        private bool optimumFieldSpecified;
        
        private bool productiveField;
        
        private bool productiveFieldSpecified;
        
        private ItemState itemStateField;
        
        private bool itemStateFieldSpecified;
        
        private string commentsField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private ObjectAlias[] proprietaryCodeField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Date and time that activities started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that activities ended.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The activity duration (commonly in hours).</summary>
        [System.ComponentModel.DescriptionAttribute("The activity duration (commonly in hours).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Duration", DataType="TimeMeasure")]
        public TimeMeasure Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth to the drilling activity/operation.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth to the drilling activity/operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth to the drilling activity/operation.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth to the drilling activity/operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Phase refers to a large activity classification, e.g., drill surface hole.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Phase refers to a large activity classification, e.g., drill surface hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phase", DataType="String64")]
        public string Phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A code used to define rig activity.</summary>
        [System.ComponentModel.DescriptionAttribute("A code used to define rig activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivityCode", DataType="DrillActivityCode")]
        public DrillActivityCode ActivityCode {
            get {
                return this.activityCodeField;
            }
            set {
                this.activityCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActivityCodeSpecified {
            get {
                return this.activityCodeFieldSpecified;
            }
            set {
                this.activityCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Custom string to further define an activity.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Custom string to further define an activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DetailActivity", DataType="String64")]
        public string DetailActivity {
            get {
                return this.detailActivityField;
            }
            set {
                this.detailActivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Classifier (planned, unplanned, downtime).</summary>
        [System.ComponentModel.DescriptionAttribute("Classifier (planned, unplanned, downtime).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeActivityClass", DataType="DrillActivityClassType")]
        public DrillActivityClassType TypeActivityClass {
            get {
                return this.typeActivityClassField;
            }
            set {
                this.typeActivityClassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeActivityClassSpecified {
            get {
                return this.typeActivityClassFieldSpecified;
            }
            set {
                this.typeActivityClassFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval over which the activity was conducted.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval over which the activity was conducted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivityMdInterval", DataType="MdInterval")]
        public MdInterval ActivityMdInterval {
            get {
                return this.activityMdIntervalField;
            }
            set {
                this.activityMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth interval over which the activity was conducted.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth interval over which the activity was conducted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivityTvdInterval", DataType="TvdInterval")]
        public TvdInterval ActivityTvdInterval {
            get {
                return this.activityTvdIntervalField;
            }
            set {
                this.activityTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Range of bit measured depths over which the activity occurred.</summary>
        [System.ComponentModel.DescriptionAttribute("Range of bit measured depths over which the activity occurred.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BitMdInterval", DataType="MdInterval")]
        public MdInterval BitMdInterval {
            get {
                return this.bitMdIntervalField;
            }
            set {
                this.bitMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Finish, interrupted, failed, etc.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Finish, interrupted, failed, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("State", DataType="String64")]
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The outcome of the detailed activity.</summary>
        [System.ComponentModel.DescriptionAttribute("The outcome of the detailed activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StateDetailActivity", DataType="StateDetailActivity")]
        public StateDetailActivity StateDetailActivity {
            get {
                return this.stateDetailActivityField;
            }
            set {
                this.stateDetailActivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StateDetailActivitySpecified {
            get {
                return this.stateDetailActivityFieldSpecified;
            }
            set {
                this.stateDetailActivityFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Operator company name.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Operator company name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operator", DataType="String64")]
        public string Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the tubular object  related to this activity.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the tubular object  related to this activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tubular", DataType="String64")]
        public string Tubular {
            get {
                return this.tubularField;
            }
            set {
                this.tubularField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is the activity optimum.? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is the activity optimum.? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Optimum", DataType="boolean")]
        public bool Optimum {
            get {
                return this.optimumField;
            }
            set {
                this.optimumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OptimumSpecified {
            get {
                return this.optimumFieldSpecified;
            }
            set {
                this.optimumFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Does activity bring closer to objective?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Does activity bring closer to objective?  Values are \"true\" (or \"1\") and \"false\" " +
            "(or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Productive", DataType="boolean")]
        public bool Productive {
            get {
                return this.productiveField;
            }
            set {
                this.productiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProductiveSpecified {
            get {
                return this.productiveFieldSpecified;
            }
            set {
                this.productiveFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The item state for the data object.</summary>
        [System.ComponentModel.DescriptionAttribute("The item state for the data object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ItemState", DataType="ItemState")]
        public ItemState ItemState {
            get {
                return this.itemStateField;
            }
            set {
                this.itemStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ItemStateSpecified {
            get {
                return this.itemStateFieldSpecified;
            }
            set {
                this.itemStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ProprietaryCode")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProprietaryCode", DataType="ObjectAlias")]
        public ObjectAlias[] ProprietaryCode {
            get {
                return this.proprietaryCodeField;
            }
            set {
                this.proprietaryCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of DrillActivity.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of DrillActivity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum DrillActivityClassType {
        
        /// <remarks/>
        planned,
        
        /// <remarks/>
        unplanned,
        
        /// <remarks/>
        downtime,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum StateDetailActivity {
        
        /// <remarks/>
        injury,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("operation failed")]
        operationfailed,
        
        /// <remarks/>
        kick,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulation loss")]
        circulationloss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud loss")]
        mudloss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stuck equipment")]
        stuckequipment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("equipment failure")]
        equipmentfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("equipment hang")]
        equipmenthang,
        
        /// <remarks/>
        success,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ItemState {
        
        /// <remarks/>
        actual,
        
        /// <remarks/>
        model,
        
        /// <remarks/>
        plan,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Nozzle {
        
        private int indexField;
        
        private bool indexFieldSpecified;
        
        private LengthMeasure diaNozzleField;
        
        private NozzleType typeNozzleField;
        
        private bool typeNozzleFieldSpecified;
        
        private LengthMeasure lenField;
        
        private string orientationField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Index if this is an indexed object.</summary>
        [System.ComponentModel.DescriptionAttribute("Index if this is an indexed object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="int")]
        public int Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                this.indexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Nozzle diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Nozzle diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaNozzle", DataType="LengthMeasure")]
        public LengthMeasure DiaNozzle {
            get {
                return this.diaNozzleField;
            }
            set {
                this.diaNozzleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Nozzle type.</summary>
        [System.ComponentModel.DescriptionAttribute("Nozzle type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeNozzle", DataType="NozzleType")]
        public NozzleType TypeNozzle {
            get {
                return this.typeNozzleField;
            }
            set {
                this.typeNozzleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeNozzleSpecified {
            get {
                return this.typeNozzleFieldSpecified;
            }
            set {
                this.typeNozzleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the nozzle.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the nozzle.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Len", DataType="LengthMeasure")]
        public LengthMeasure Len {
            get {
                return this.lenField;
            }
            set {
                this.lenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Nozzle orientation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Nozzle orientation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Orientation", DataType="String64")]
        public string Orientation {
            get {
                return this.orientationField;
            }
            set {
                this.orientationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Nozzle</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Nozzle")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum NozzleType {
        
        /// <remarks/>
        extended,
        
        /// <remarks/>
        normal,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BendOffset))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BendAngle))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public abstract partial class AbstractRotarySteerableTool {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BendOffset : AbstractRotarySteerableTool {
        
        private LengthMeasure bendOffset1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BendOffset")]
        public LengthMeasure BendOffset1 {
            get {
                return this.bendOffset1Field;
            }
            set {
                this.bendOffset1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BendAngle : AbstractRotarySteerableTool {
        
        private PlaneAngleMeasure bendAngle1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BendAngle")]
        public PlaneAngleMeasure BendAngle1 {
            get {
                return this.bendAngle1Field;
            }
            set {
                this.bendAngle1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RotarySteerableTool {
        
        private DeflectionMethod deflectionMethodField;
        
        private LengthMeasure holeSizeMnField;
        
        private LengthMeasure holeSizeMxField;
        
        private ForceMeasure wobMxField;
        
        private AngularVelocityMeasure operatingSpeedField;
        
        private AngularVelocityMeasure speedMxField;
        
        private VolumePerTimeMeasure flowRateMnField;
        
        private VolumePerTimeMeasure flowRateMxField;
        
        private VolumePerTimeMeasure downLinkFlowRateMnField;
        
        private VolumePerTimeMeasure downLinkFlowRateMxField;
        
        private double pressLossFactField;
        
        private bool pressLossFactFieldSpecified;
        
        private int padCountField;
        
        private bool padCountFieldSpecified;
        
        private LengthMeasure padLenField;
        
        private LengthMeasure padWidthField;
        
        private LengthMeasure padOffsetField;
        
        private LengthMeasure openPadOdField;
        
        private LengthMeasure closePadOdField;
        
        private AbstractRotarySteerableTool abstractRotarySteerableToolField;
        
        private Sensor[] sensorField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Method used to direct the deviation of the trajectory: point bit or push bit.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Method used to direct the deviation of the trajectory: point bit or push bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeflectionMethod", DataType="DeflectionMethod")]
        public DeflectionMethod DeflectionMethod {
            get {
                return this.deflectionMethodField;
            }
            set {
                this.deflectionMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum size of the hole in which the tool can operate.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum size of the hole in which the tool can operate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleSizeMn", DataType="LengthMeasure")]
        public LengthMeasure HoleSizeMn {
            get {
                return this.holeSizeMnField;
            }
            set {
                this.holeSizeMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum size of the hole in which the tool can operate.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum size of the hole in which the tool can operate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleSizeMx", DataType="LengthMeasure")]
        public LengthMeasure HoleSizeMx {
            get {
                return this.holeSizeMxField;
            }
            set {
                this.holeSizeMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum weight on the bit.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum weight on the bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WobMx", DataType="ForceMeasure")]
        public ForceMeasure WobMx {
            get {
                return this.wobMxField;
            }
            set {
                this.wobMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Suggested operating speed.</summary>
        [System.ComponentModel.DescriptionAttribute("Suggested operating speed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperatingSpeed", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure OperatingSpeed {
            get {
                return this.operatingSpeedField;
            }
            set {
                this.operatingSpeedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum rotation speed.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum rotation speed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SpeedMx", DataType="AngularVelocityMeasure")]
        public AngularVelocityMeasure SpeedMx {
            get {
                return this.speedMxField;
            }
            set {
                this.speedMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum flow rate for tool operation.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum flow rate for tool operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowRateMn", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowRateMn {
            get {
                return this.flowRateMnField;
            }
            set {
                this.flowRateMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum flow rate for tool operation.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum flow rate for tool operation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowRateMx", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowRateMx {
            get {
                return this.flowRateMxField;
            }
            set {
                this.flowRateMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum flow rate for programming the tool.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum flow rate for programming the tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DownLinkFlowRateMn", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure DownLinkFlowRateMn {
            get {
                return this.downLinkFlowRateMnField;
            }
            set {
                this.downLinkFlowRateMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum flow rate for programming the tool.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum flow rate for programming the tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DownLinkFlowRateMx", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure DownLinkFlowRateMx {
            get {
                return this.downLinkFlowRateMxField;
            }
            set {
                this.downLinkFlowRateMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure drop across the tool.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure drop across the tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PressLossFact", DataType="double")]
        public double PressLossFact {
            get {
                return this.pressLossFactField;
            }
            set {
                this.pressLossFactField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PressLossFactSpecified {
            get {
                return this.pressLossFactFieldSpecified;
            }
            set {
                this.pressLossFactFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of contact pads.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of contact pads.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PadCount", DataType="int")]
        public int PadCount {
            get {
                return this.padCountField;
            }
            set {
                this.padCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PadCountSpecified {
            get {
                return this.padCountFieldSpecified;
            }
            set {
                this.padCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the contact pad.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the contact pad.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PadLen", DataType="LengthMeasure")]
        public LengthMeasure PadLen {
            get {
                return this.padLenField;
            }
            set {
                this.padLenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Width of the contact pad.</summary>
        [System.ComponentModel.DescriptionAttribute("Width of the contact pad.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PadWidth", DataType="LengthMeasure")]
        public LengthMeasure PadWidth {
            get {
                return this.padWidthField;
            }
            set {
                this.padWidthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Offset from the bottom of the pad to the bottom connector.</summary>
        [System.ComponentModel.DescriptionAttribute("Offset from the bottom of the pad to the bottom connector.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PadOffset", DataType="LengthMeasure")]
        public LengthMeasure PadOffset {
            get {
                return this.padOffsetField;
            }
            set {
                this.padOffsetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outside diameter of the tool when the pads are activated.</summary>
        [System.ComponentModel.DescriptionAttribute("Outside diameter of the tool when the pads are activated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpenPadOd", DataType="LengthMeasure")]
        public LengthMeasure OpenPadOd {
            get {
                return this.openPadOdField;
            }
            set {
                this.openPadOdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outside diameter of the tool when the pads are closed.</summary>
        [System.ComponentModel.DescriptionAttribute("Outside diameter of the tool when the pads are closed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClosePadOd", DataType="LengthMeasure")]
        public LengthMeasure ClosePadOd {
            get {
                return this.closePadOdField;
            }
            set {
                this.closePadOdField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractRotarySteerableTool", DataType="AbstractRotarySteerableTool")]
        public AbstractRotarySteerableTool AbstractRotarySteerableTool {
            get {
                return this.abstractRotarySteerableToolField;
            }
            set {
                this.abstractRotarySteerableToolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Sensor")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sensor", DataType="Sensor")]
        public Sensor[] Sensor {
            get {
                return this.sensorField;
            }
            set {
                this.sensorField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum DeflectionMethod {
        
        /// <remarks/>
        hybrid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("point bit")]
        pointbit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("push bit")]
        pushbit,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Sensor {
        
        private MeasurementType typeMeasurementField;
        
        private bool typeMeasurementFieldSpecified;
        
        private LengthMeasure offsetBotField;
        
        private string commentsField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Type from POSC.</summary>
        [System.ComponentModel.DescriptionAttribute("Type from POSC.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeMeasurement", DataType="MeasurementType")]
        public MeasurementType TypeMeasurement {
            get {
                return this.typeMeasurementField;
            }
            set {
                this.typeMeasurementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeMeasurementSpecified {
            get {
                return this.typeMeasurementFieldSpecified;
            }
            set {
                this.typeMeasurementFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Offset from the bottom of the MWD tool.</summary>
        [System.ComponentModel.DescriptionAttribute("Offset from the bottom of the MWD tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OffsetBot", DataType="LengthMeasure")]
        public LengthMeasure OffsetBot {
            get {
                return this.offsetBotField;
            }
            set {
                this.offsetBotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comments and remarks.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comments and remarks.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comments", DataType="String2000")]
        public string Comments {
            get {
                return this.commentsField;
            }
            set {
                this.commentsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Sensor.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Sensor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum MeasurementType {
        
        /// <remarks/>
        acceleration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acoustic caliper")]
        acousticcaliper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acoustic casing collar locator")]
        acousticcasingcollarlocator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acoustic impedance")]
        acousticimpedance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acoustic porosity")]
        acousticporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acoustic velocity")]
        acousticvelocity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acoustic wave matrix travel time")]
        acousticwavematrixtraveltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acoustic wave travel time")]
        acousticwavetraveltime,
        
        /// <remarks/>
        amplitude,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amplitude of acoustic wave")]
        amplitudeofacousticwave,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amplitude of E-M wave")]
        amplitudeofEMwave,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amplitude ratio")]
        amplituderatio,
        
        /// <remarks/>
        area,
        
        /// <remarks/>
        attenuation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation of acoustic wave")]
        attenuationofacousticwave,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation of E-M wave")]
        attenuationofEMwave,
        
        /// <remarks/>
        auxiliary,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("average porosity")]
        averageporosity,
        
        /// <remarks/>
        azimuth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("barite mud correction")]
        baritemudcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bed thickness correction")]
        bedthicknesscorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit size")]
        bitsize,
        
        /// <remarks/>
        blocked,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("borehole environment correction")]
        boreholeenvironmentcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("borehole fluid correction")]
        boreholefluidcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("borehole size correction")]
        boreholesizecorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bromide mud correction")]
        bromidemudcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bulk compressibility")]
        bulkcompressibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bulk density")]
        bulkdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bulk volume")]
        bulkvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bulk volume gas")]
        bulkvolumegas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bulk volume hydrocarbon")]
        bulkvolumehydrocarbon,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bulk volume oil")]
        bulkvolumeoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bulk volume water")]
        bulkvolumewater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/O ratio")]
        COratio,
        
        /// <remarks/>
        caliper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cased hole correction")]
        casedholecorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing collar locator")]
        casingcollarlocator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing correction")]
        casingcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing diameter correction")]
        casingdiametercorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing inspection")]
        casinginspection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing thickness correction")]
        casingthicknesscorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing weight correction")]
        casingweightcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement correction")]
        cementcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement density correction")]
        cementdensitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement evaluation")]
        cementevaluation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement thickness correction")]
        cementthicknesscorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement type correction")]
        cementtypecorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CH density porosity")]
        CHdensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CH dolomite density porosity")]
        CHdolomitedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CH dolomite neutron porosity")]
        CHdolomiteneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CH limestone density porosity")]
        CHlimestonedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CH limestone neutron porosity")]
        CHlimestoneneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CH neutron porosity")]
        CHneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CH sandstone density porosity")]
        CHsandstonedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("CH sandstone neutron porosity")]
        CHsandstoneneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("compressional wave dolomite porosity")]
        compressionalwavedolomiteporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("compressional wave limestone porosity")]
        compressionalwavelimestoneporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("compressional wave matrix travel time")]
        compressionalwavematrixtraveltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("compressional wave sandstone porosity")]
        compressionalwavesandstoneporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("compressional wave travel time")]
        compressionalwavetraveltime,
        
        /// <remarks/>
        conductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("conductivity from attenuation")]
        conductivityfromattenuation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("conductivity from phase shift")]
        conductivityfromphaseshift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("connate water conductivity")]
        connatewaterconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("connate water resistivity")]
        connatewaterresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("conventional core porosity")]
        conventionalcoreporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("core matrix density")]
        corematrixdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("core permeability")]
        corepermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("core porosity")]
        coreporosity,
        
        /// <remarks/>
        corrected,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("count rate")]
        countrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("count rate ratio")]
        countrateratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cross plot porosity")]
        crossplotporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("decay time")]
        decaytime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deep conductivity")]
        deepconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deep induction conductivity")]
        deepinductionconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deep induction resistivity")]
        deepinductionresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deep laterolog conductivity")]
        deeplaterologconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deep laterolog resistivity")]
        deeplaterologresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deep resistivity")]
        deepresistivity,
        
        /// <remarks/>
        density,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("density porosity")]
        densityporosity,
        
        /// <remarks/>
        depth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("depth adjusted")]
        depthadjusted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("depth derived from velocity")]
        depthderivedfromvelocity,
        
        /// <remarks/>
        deviation,
        
        /// <remarks/>
        dielectric,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusion correction")]
        diffusioncorrection,
        
        /// <remarks/>
        dip,
        
        /// <remarks/>
        dipmeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dipmeter conductivity")]
        dipmeterconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dipmeter resistivity")]
        dipmeterresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dolomite acoustic porosity")]
        dolomiteacousticporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dolomite density porosity")]
        dolomitedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dolomite neutron porosity")]
        dolomiteneutronporosity,
        
        /// <remarks/>
        edited,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("effective porosity")]
        effectiveporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current")]
        electriccurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric potential")]
        electricpotential,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electromagnetic wave matrix travel time")]
        electromagneticwavematrixtraveltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electromagnetic wave travel time")]
        electromagneticwavetraveltime,
        
        /// <remarks/>
        element,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("elemental ratio")]
        elementalratio,
        
        /// <remarks/>
        enhanced,
        
        /// <remarks/>
        filtered,
        
        /// <remarks/>
        flowmeter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fluid density")]
        fluiddensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fluid velocity")]
        fluidvelocity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fluid viscosity")]
        fluidviscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flushed zone conductivity")]
        flushedzoneconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flushed zone resistivity")]
        flushedzoneresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flushed zone saturation")]
        flushedzonesaturation,
        
        /// <remarks/>
        force,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation density correction")]
        formationdensitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation properties correction")]
        formationpropertiescorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation salinity correction")]
        formationsalinitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation saturation correction")]
        formationsaturationcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation volume factor correction")]
        formationvolumefactorcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation water density correction")]
        formationwaterdensitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation water saturation correction")]
        formationwatersaturationcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("free fluid index")]
        freefluidindex,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("friction effect correction")]
        frictioneffectcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gamma ray")]
        gammaray,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gamma ray minus uranium")]
        gammarayminusuranium,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas saturation")]
        gassaturation,
        
        /// <remarks/>
        gradiomanometer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("high frequency conductivity")]
        highfrequencyconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("high frequency electromagnetic")]
        highfrequencyelectromagnetic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("high frequency electromagnetic porosity")]
        highfrequencyelectromagneticporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("high frequency E-M phase shift")]
        highfrequencyEMphaseshift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("high frequency resistivity")]
        highfrequencyresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrocarbon correction")]
        hydrocarboncorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrocarbon density correction")]
        hydrocarbondensitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrocarbon gravity correction")]
        hydrocarbongravitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrocarbon saturation")]
        hydrocarbonsaturation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydrocarbon viscosity correction")]
        hydrocarbonviscositycorrection,
        
        /// <remarks/>
        image,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("interpretation variable")]
        interpretationvariable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("iron mud correction")]
        ironmudcorrection,
        
        /// <remarks/>
        joined,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("KCl mud correction")]
        KClmudcorrection,
        
        /// <remarks/>
        length,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("limestone acoustic porosity")]
        limestoneacousticporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("limestone density porosity")]
        limestonedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("limestone neutron porosity")]
        limestoneneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lithology correction")]
        lithologycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("log derived permeability")]
        logderivedpermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("log matrix density")]
        logmatrixdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic casing collar locator")]
        magneticcasingcollarlocator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("matrix density")]
        matrixdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("matrix travel time")]
        matrixtraveltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("measured depth")]
        measureddepth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mechanical caliper")]
        mechanicalcaliper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mechanical casing collar locator")]
        mechanicalcasingcollarlocator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("medium conductivity")]
        mediumconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("medium induction conductivity")]
        mediuminductionconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("medium induction resistivity")]
        mediuminductionresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("medium laterolog conductivity")]
        mediumlaterologconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("medium laterolog resistivity")]
        mediumlaterologresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("medium resistivity")]
        mediumresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro conductivity")]
        microconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro inverse conductivity")]
        microinverseconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro inverse resistivity")]
        microinverseresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro laterolog conductivity")]
        microlaterologconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro laterolog resistivity")]
        microlaterologresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro normal conductivity")]
        micronormalconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro normal resistivity")]
        micronormalresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro resistivity")]
        microresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro spherically focused conductivity")]
        microsphericallyfocusedconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("micro spherically focused resistivity")]
        microsphericallyfocusedresistivity,
        
        /// <remarks/>
        mineral,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud cake conductivity")]
        mudcakeconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud cake correction")]
        mudcakecorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud cake density correction")]
        mudcakedensitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud cake resistivity")]
        mudcakeresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud cake resistivity correction")]
        mudcakeresistivitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud cake thickness correction")]
        mudcakethicknesscorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud composition correction")]
        mudcompositioncorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud conductivity")]
        mudconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud filtrate conductivity")]
        mudfiltrateconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud filtrate correction")]
        mudfiltratecorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud filtrate density correction")]
        mudfiltratedensitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud filtrate resistivity")]
        mudfiltrateresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud filtrate resistivity correction")]
        mudfiltrateresistivitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud filtrate salinity correction")]
        mudfiltratesalinitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud resistivity")]
        mudresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud salinity correction")]
        mudsalinitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud viscosity correction")]
        mudviscositycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud weight correction")]
        mudweightcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("neutron die away time")]
        neutrondieawaytime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("neutron porosity")]
        neutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nuclear caliper")]
        nuclearcaliper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nuclear magnetic decay time")]
        nuclearmagneticdecaytime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nuclear magnetism log permeability")]
        nuclearmagnetismlogpermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nuclear magnetism porosity")]
        nuclearmagnetismporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("OH density porosity")]
        OHdensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("OH dolomite density porosity")]
        OHdolomitedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("OH dolomite neutron porosity")]
        OHdolomiteneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("OH limestone density porosity")]
        OHlimestonedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("OH limestone neutron porosity")]
        OHlimestoneneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("OH neutron porosity")]
        OHneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("OH sandstone density porosity")]
        OHsandstonedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("OH sandstone neutron porosity")]
        OHsandstoneneutronporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil based mud correction")]
        oilbasedmudcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil saturation")]
        oilsaturation,
        
        /// <remarks/>
        perforating,
        
        /// <remarks/>
        permeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("phase shift")]
        phaseshift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("photoelectric absorption")]
        photoelectricabsorption,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("photoelectric absorption correction")]
        photoelectricabsorptioncorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("physical measurement correction")]
        physicalmeasurementcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plane angle")]
        planeangle,
        
        /// <remarks/>
        porosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("porosity correction")]
        porositycorrection,
        
        /// <remarks/>
        potassium,
        
        /// <remarks/>
        pressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure correction")]
        pressurecorrection,
        
        /// <remarks/>
        processed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pulsed neutron porosity")]
        pulsedneutronporosity,
        
        /// <remarks/>
        quality,
        
        /// <remarks/>
        ratio,
        
        /// <remarks/>
        raw,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative bearing")]
        relativebearing,
        
        /// <remarks/>
        resistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resistivity factor correction")]
        resistivityfactorcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resistivity from attenuation")]
        resistivityfromattenuation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resistivity from phase shift")]
        resistivityfromphaseshift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resistivity phase shift")]
        resistivityphaseshift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resistivity ratio")]
        resistivityratio,
        
        /// <remarks/>
        salinity,
        
        /// <remarks/>
        sampling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sandstone acoustic porosity")]
        sandstoneacousticporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sandstone density porosity")]
        sandstonedensityporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sandstone neutron porosity")]
        sandstoneneutronporosity,
        
        /// <remarks/>
        saturation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shale volume")]
        shalevolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow conductivity")]
        shallowconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow induction conductivity")]
        shallowinductionconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow induction resistivity")]
        shallowinductionresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow laterolog conductivity")]
        shallowlaterologconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow laterolog resistivity")]
        shallowlaterologresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow resistivity")]
        shallowresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shear wave dolomite porosity")]
        shearwavedolomiteporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shear wave limestone porosity")]
        shearwavelimestoneporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shear wave matrix travel time")]
        shearwavematrixtraveltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shear wave sandstone porosity")]
        shearwavesandstoneporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shear wave travel time")]
        shearwavetraveltime,
        
        /// <remarks/>
        shifted,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sidewall core porosity")]
        sidewallcoreporosity,
        
        /// <remarks/>
        sigma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sigma formation")]
        sigmaformation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sigma gas")]
        sigmagas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sigma hydrocarbon")]
        sigmahydrocarbon,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sigma matrix")]
        sigmamatrix,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sigma oil")]
        sigmaoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sigma water")]
        sigmawater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slippage velocity correction")]
        slippagevelocitycorrection,
        
        /// <remarks/>
        smoothed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spectral gamma ray")]
        spectralgammaray,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spherically focused conductivity")]
        sphericallyfocusedconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spherically focused resistivity")]
        sphericallyfocusedresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spontaneous potential")]
        spontaneouspotential,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spreading loss correction")]
        spreadinglosscorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("synthetic well log trace")]
        syntheticwelllogtrace,
        
        /// <remarks/>
        temperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature correction")]
        temperaturecorrection,
        
        /// <remarks/>
        tension,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Th/K ratio")]
        ThKratio,
        
        /// <remarks/>
        thorium,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tool diameter correction")]
        tooldiametercorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tool eccentricity correction")]
        tooleccentricitycorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total gamma ray")]
        totalgammaray,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total porosity")]
        totalporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tracer survey")]
        tracersurvey,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("travel time")]
        traveltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("true conductivity")]
        trueconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("true resistivity")]
        trueresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("true vertical depth")]
        trueverticaldepth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tube wave dolomite porosity")]
        tubewavedolomiteporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tube wave limestone porosity")]
        tubewavelimestoneporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tube wave matrix travel time")]
        tubewavematrixtraveltime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tube wave sandstone porosity")]
        tubewavesandstoneporosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tube wave travel time")]
        tubewavetraveltime,
        
        /// <remarks/>
        uranium,
        
        /// <remarks/>
        velocity,
        
        /// <remarks/>
        volume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water based fluid correction")]
        waterbasedfluidcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water holdup correction")]
        waterholdupcorrection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water saturated conductivity")]
        watersaturatedconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water saturated resistivity")]
        watersaturatedresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water saturation")]
        watersaturation,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class HoleOpener {
        
        private HoleOpenerType typeHoleOpenerField;
        
        private bool typeHoleOpenerFieldSpecified;
        
        private int numCutterField;
        
        private bool numCutterFieldSpecified;
        
        private string manufacturerField;
        
        private LengthMeasure diaHoleOpenerField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Under reamer or fixed blade.</summary>
        [System.ComponentModel.DescriptionAttribute("Under reamer or fixed blade.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeHoleOpener", DataType="HoleOpenerType")]
        public HoleOpenerType TypeHoleOpener {
            get {
                return this.typeHoleOpenerField;
            }
            set {
                this.typeHoleOpenerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeHoleOpenerSpecified {
            get {
                return this.typeHoleOpenerFieldSpecified;
            }
            set {
                this.typeHoleOpenerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of cutters on the tool.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of cutters on the tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumCutter", DataType="int")]
        public int NumCutter {
            get {
                return this.numCutterField;
            }
            set {
                this.numCutterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumCutterSpecified {
            get {
                return this.numCutterFieldSpecified;
            }
            set {
                this.numCutterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the tool.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of the reamer.</summary>
        [System.ComponentModel.DescriptionAttribute("Diameter of the reamer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaHoleOpener", DataType="LengthMeasure")]
        public LengthMeasure DiaHoleOpener {
            get {
                return this.diaHoleOpenerField;
            }
            set {
                this.diaHoleOpenerField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum HoleOpenerType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("under-reamer")]
        underreamer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fixed blade")]
        fixedblade,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Bend {
        
        private PlaneAngleMeasure angleField;
        
        private LengthMeasure distBendBotField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Angle of the bend.</summary>
        [System.ComponentModel.DescriptionAttribute("Angle of the bend.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Angle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure Angle {
            get {
                return this.angleField;
            }
            set {
                this.angleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance of the bend from the bottom of the component.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance of the bend from the bottom of the component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistBendBot", DataType="LengthMeasure")]
        public LengthMeasure DistBendBot {
            get {
                return this.distBendBotField;
            }
            set {
                this.distBendBotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Bend.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Bend.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Stabilizer {
        
        private LengthMeasure lenBladeField;
        
        private LengthMeasure lenBladeGaugeField;
        
        private LengthMeasure odBladeMxField;
        
        private LengthMeasure odBladeMnField;
        
        private LengthMeasure distBladeBotField;
        
        private BladeShapeType shapeBladeField;
        
        private bool shapeBladeFieldSpecified;
        
        private double factFricField;
        
        private bool factFricFieldSpecified;
        
        private BladeType typeBladeField;
        
        private bool typeBladeFieldSpecified;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private CustomData extensionAnyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Length of the blade.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of the blade.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenBlade", DataType="LengthMeasure")]
        public LengthMeasure LenBlade {
            get {
                return this.lenBladeField;
            }
            set {
                this.lenBladeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gauge Length of the blade. That is, the length of the blade measured at the OdBladeMx.</summary>
        [System.ComponentModel.DescriptionAttribute("Gauge Length of the blade. That is, the length of the blade measured at the OdBla" +
            "deMx.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenBladeGauge", DataType="LengthMeasure")]
        public LengthMeasure LenBladeGauge {
            get {
                return this.lenBladeGaugeField;
            }
            set {
                this.lenBladeGaugeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum outer diameter of the blade.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum outer diameter of the blade.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdBladeMx", DataType="LengthMeasure")]
        public LengthMeasure OdBladeMx {
            get {
                return this.odBladeMxField;
            }
            set {
                this.odBladeMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum outer diameter of the blade.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum outer diameter of the blade.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdBladeMn", DataType="LengthMeasure")]
        public LengthMeasure OdBladeMn {
            get {
                return this.odBladeMnField;
            }
            set {
                this.odBladeMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance of the blade bottom from the bottom of the component.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance of the blade bottom from the bottom of the component.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistBladeBot", DataType="LengthMeasure")]
        public LengthMeasure DistBladeBot {
            get {
                return this.distBladeBotField;
            }
            set {
                this.distBladeBotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Blade shape.</summary>
        [System.ComponentModel.DescriptionAttribute("Blade shape.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShapeBlade", DataType="BladeShapeType")]
        public BladeShapeType ShapeBlade {
            get {
                return this.shapeBladeField;
            }
            set {
                this.shapeBladeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShapeBladeSpecified {
            get {
                return this.shapeBladeFieldSpecified;
            }
            set {
                this.shapeBladeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Friction factor.</summary>
        [System.ComponentModel.DescriptionAttribute("Friction factor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FactFric", DataType="double")]
        public double FactFric {
            get {
                return this.factFricField;
            }
            set {
                this.factFricField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FactFricSpecified {
            get {
                return this.factFricFieldSpecified;
            }
            set {
                this.factFricFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Blade type.</summary>
        [System.ComponentModel.DescriptionAttribute("Blade type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeBlade", DataType="BladeType")]
        public BladeType TypeBlade {
            get {
                return this.typeBladeField;
            }
            set {
                this.typeBladeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeBladeSpecified {
            get {
                return this.typeBladeFieldSpecified;
            }
            set {
                this.typeBladeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of Stabilizer.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of Stabilizer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BladeShapeType {
        
        /// <remarks/>
        dynamic,
        
        /// <remarks/>
        melon,
        
        /// <remarks/>
        spiral,
        
        /// <remarks/>
        straight,
        
        /// <remarks/>
        variable,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BladeType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("clamp-on")]
        clampon,
        
        /// <remarks/>
        integral,
        
        /// <remarks/>
        sleeve,
        
        /// <remarks/>
        welded,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Motor {
        
        private LengthMeasure offsetToolField;
        
        private double presLossFactField;
        
        private bool presLossFactFieldSpecified;
        
        private VolumePerTimeMeasure flowrateMnField;
        
        private VolumePerTimeMeasure flowrateMxField;
        
        private LengthMeasure diaRotorNozzleField;
        
        private LengthMeasure clearanceBearBoxField;
        
        private int lobesRotorField;
        
        private bool lobesRotorFieldSpecified;
        
        private int lobesStatorField;
        
        private bool lobesStatorFieldSpecified;
        
        private BearingType typeBearingField;
        
        private bool typeBearingFieldSpecified;
        
        private ThermodynamicTemperatureMeasure tempOpMxField;
        
        private bool rotorCatcherField;
        
        private bool rotorCatcherFieldSpecified;
        
        private bool dumpValveField;
        
        private bool dumpValveFieldSpecified;
        
        private LengthMeasure diaNozzleField;
        
        private bool rotatableField;
        
        private bool rotatableFieldSpecified;
        
        private PlaneAngleMeasure bendSettingsMnField;
        
        private PlaneAngleMeasure bendSettingsMxField;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Tool offset from bottom.</summary>
        [System.ComponentModel.DescriptionAttribute("Tool offset from bottom.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OffsetTool", DataType="LengthMeasure")]
        public LengthMeasure OffsetTool {
            get {
                return this.offsetToolField;
            }
            set {
                this.offsetToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure loss factor.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure loss factor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresLossFact", DataType="double")]
        public double PresLossFact {
            get {
                return this.presLossFactField;
            }
            set {
                this.presLossFactField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PresLossFactSpecified {
            get {
                return this.presLossFactFieldSpecified;
            }
            set {
                this.presLossFactFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateMn", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateMn {
            get {
                return this.flowrateMnField;
            }
            set {
                this.flowrateMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateMx", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateMx {
            get {
                return this.flowrateMxField;
            }
            set {
                this.flowrateMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of rotor at nozzle.</summary>
        [System.ComponentModel.DescriptionAttribute("Diameter of rotor at nozzle.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaRotorNozzle", DataType="LengthMeasure")]
        public LengthMeasure DiaRotorNozzle {
            get {
                return this.diaRotorNozzleField;
            }
            set {
                this.diaRotorNozzleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Clearance inside bearing box.</summary>
        [System.ComponentModel.DescriptionAttribute("Clearance inside bearing box.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClearanceBearBox", DataType="LengthMeasure")]
        public LengthMeasure ClearanceBearBox {
            get {
                return this.clearanceBearBoxField;
            }
            set {
                this.clearanceBearBoxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of rotor lobes.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of rotor lobes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LobesRotor", DataType="int")]
        public int LobesRotor {
            get {
                return this.lobesRotorField;
            }
            set {
                this.lobesRotorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LobesRotorSpecified {
            get {
                return this.lobesRotorFieldSpecified;
            }
            set {
                this.lobesRotorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of stator lobes.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of stator lobes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LobesStator", DataType="int")]
        public int LobesStator {
            get {
                return this.lobesStatorField;
            }
            set {
                this.lobesStatorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LobesStatorSpecified {
            get {
                return this.lobesStatorFieldSpecified;
            }
            set {
                this.lobesStatorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of bearing.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of bearing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeBearing", DataType="BearingType")]
        public BearingType TypeBearing {
            get {
                return this.typeBearingField;
            }
            set {
                this.typeBearingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeBearingSpecified {
            get {
                return this.typeBearingFieldSpecified;
            }
            set {
                this.typeBearingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum operating temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum operating temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempOpMx", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempOpMx {
            get {
                return this.tempOpMxField;
            }
            set {
                this.tempOpMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is rotor catcher present?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is rotor catcher present?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RotorCatcher", DataType="boolean")]
        public bool RotorCatcher {
            get {
                return this.rotorCatcherField;
            }
            set {
                this.rotorCatcherField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotorCatcherSpecified {
            get {
                return this.rotorCatcherFieldSpecified;
            }
            set {
                this.rotorCatcherFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is dump valve present?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is dump valve present?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DumpValve", DataType="boolean")]
        public bool DumpValve {
            get {
                return this.dumpValveField;
            }
            set {
                this.dumpValveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DumpValveSpecified {
            get {
                return this.dumpValveFieldSpecified;
            }
            set {
                this.dumpValveFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Nozzle diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Nozzle diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaNozzle", DataType="LengthMeasure")]
        public LengthMeasure DiaNozzle {
            get {
                return this.diaNozzleField;
            }
            set {
                this.diaNozzleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is motor rotatable?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is motor rotatable?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rotatable", DataType="boolean")]
        public bool Rotatable {
            get {
                return this.rotatableField;
            }
            set {
                this.rotatableField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotatableSpecified {
            get {
                return this.rotatableFieldSpecified;
            }
            set {
                this.rotatableFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum bend angle setting.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum bend angle setting.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BendSettingsMn", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure BendSettingsMn {
            get {
                return this.bendSettingsMnField;
            }
            set {
                this.bendSettingsMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum bend angle setting.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum bend angle setting.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BendSettingsMx", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure BendSettingsMx {
            get {
                return this.bendSettingsMxField;
            }
            set {
                this.bendSettingsMxField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BearingType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil seal")]
        oilseal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud lube")]
        mudlube,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class BitRecord {
        
        private string numBitField;
        
        private LengthMeasure diaBitField;
        
        private LengthMeasure diaPassThruField;
        
        private LengthMeasure diaPilotField;
        
        private string manufacturerField;
        
        private BitType typeBitField;
        
        private bool typeBitFieldSpecified;
        
        private string codeMfgField;
        
        private string codeIADCField;
        
        private IadcIntegerCode condInitInnerField;
        
        private bool condInitInnerFieldSpecified;
        
        private IadcIntegerCode condInitOuterField;
        
        private bool condInitOuterFieldSpecified;
        
        private BitDullCode condInitDullField;
        
        private bool condInitDullFieldSpecified;
        
        private string condInitLocationField;
        
        private IadcBearingWearCode condInitBearingField;
        
        private bool condInitBearingFieldSpecified;
        
        private string condInitGaugeField;
        
        private string condInitOtherField;
        
        private BitReasonPulled condInitReasonField;
        
        private bool condInitReasonFieldSpecified;
        
        private IadcIntegerCode condFinalInnerField;
        
        private bool condFinalInnerFieldSpecified;
        
        private IadcIntegerCode condFinalOuterField;
        
        private bool condFinalOuterFieldSpecified;
        
        private BitDullCode condFinalDullField;
        
        private bool condFinalDullFieldSpecified;
        
        private string condFinalLocationField;
        
        private IadcBearingWearCode condFinalBearingField;
        
        private bool condFinalBearingFieldSpecified;
        
        private string condFinalGaugeField;
        
        private string condFinalOtherField;
        
        private BitReasonPulled condFinalReasonField;
        
        private bool condFinalReasonFieldSpecified;
        
        private string driveField;
        
        private string bitClassField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private Cost costField;
        
        private CustomData extensionAnyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Bit number and rerun number, e.g., "4.1" for the first rerun of bit 4.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Bit number and rerun number, e.g., \"4.1\" for the first rerun of bit 4.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumBit", DataType="String64")]
        public string NumBit {
            get {
                return this.numBitField;
            }
            set {
                this.numBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of the drilled hole.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Diameter of the drilled hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaBit", DataType="LengthMeasure")]
        public LengthMeasure DiaBit {
            get {
                return this.diaBitField;
            }
            set {
                this.diaBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum hole or tubing diameter that the bit will pass through (for bi-center bits).</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum hole or tubing diameter that the bit will pass through (for bi-center bit" +
            "s).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaPassThru", DataType="LengthMeasure")]
        public LengthMeasure DiaPassThru {
            get {
                return this.diaPassThruField;
            }
            set {
                this.diaPassThruField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of the pilot bit (for bi-center bits).</summary>
        [System.ComponentModel.DescriptionAttribute("Diameter of the pilot bit (for bi-center bits).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaPilot", DataType="LengthMeasure")]
        public LengthMeasure DiaPilot {
            get {
                return this.diaPilotField;
            }
            set {
                this.diaPilotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Manufacturer or supplier of the item.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Manufacturer or supplier of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of bit.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeBit", DataType="BitType")]
        public BitType TypeBit {
            get {
                return this.typeBitField;
            }
            set {
                this.typeBitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeBitSpecified {
            get {
                return this.typeBitFieldSpecified;
            }
            set {
                this.typeBitFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The manufacturer's code for the bit.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The manufacturer\'s code for the bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CodeMfg", DataType="String64")]
        public string CodeMfg {
            get {
                return this.codeMfgField;
            }
            set {
                this.codeMfgField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>IADC bit code.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("IADC bit code.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CodeIADC", DataType="String64")]
        public string CodeIADC {
            get {
                return this.codeIADCField;
            }
            set {
                this.codeIADCField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Initial condition of the inner tooth rows (inner 2/3 of the bit) (0-8).</summary>
        [System.ComponentModel.DescriptionAttribute("Initial condition of the inner tooth rows (inner 2/3 of the bit) (0-8).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondInitInner", DataType="IadcIntegerCode")]
        public IadcIntegerCode CondInitInner {
            get {
                return this.condInitInnerField;
            }
            set {
                this.condInitInnerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondInitInnerSpecified {
            get {
                return this.condInitInnerFieldSpecified;
            }
            set {
                this.condInitInnerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Initial condition of the outer tooth rows (outer 1/3 of bit) (0-8).</summary>
        [System.ComponentModel.DescriptionAttribute("Initial condition of the outer tooth rows (outer 1/3 of bit) (0-8).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondInitOuter", DataType="IadcIntegerCode")]
        public IadcIntegerCode CondInitOuter {
            get {
                return this.condInitOuterField;
            }
            set {
                this.condInitOuterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondInitOuterSpecified {
            get {
                return this.condInitOuterFieldSpecified;
            }
            set {
                this.condInitOuterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Initial dull condition from the IADC bit-wear 2-character codes.</summary>
        [System.ComponentModel.DescriptionAttribute("Initial dull condition from the IADC bit-wear 2-character codes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondInitDull", DataType="BitDullCode")]
        public BitDullCode CondInitDull {
            get {
                return this.condInitDullField;
            }
            set {
                this.condInitDullField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondInitDullSpecified {
            get {
                return this.condInitDullFieldSpecified;
            }
            set {
                this.condInitDullFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Initial row and cone numbers for items that need location information (e.g., cracked cone, lost cone, etc).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Initial row and cone numbers for items that need location information (e.g., crac" +
            "ked cone, lost cone, etc).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondInitLocation", DataType="String64")]
        public string CondInitLocation {
            get {
                return this.condInitLocationField;
            }
            set {
                this.condInitLocationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Initial condition of the bit bearings (integer 0-8 or E, F, N or X).</summary>
        [System.ComponentModel.DescriptionAttribute("Initial condition of the bit bearings (integer 0-8 or E, F, N or X).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondInitBearing", DataType="IadcBearingWearCode")]
        public IadcBearingWearCode CondInitBearing {
            get {
                return this.condInitBearingField;
            }
            set {
                this.condInitBearingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondInitBearingSpecified {
            get {
                return this.condInitBearingFieldSpecified;
            }
            set {
                this.condInitBearingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Initial condition of the bit gauge in 1/16 of an inch. I = in gauge, else the number of 16ths out of gauge.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Initial condition of the bit gauge in 1/16 of an inch. I = in gauge, else the num" +
            "ber of 16ths out of gauge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondInitGauge", DataType="String64")]
        public string CondInitGauge {
            get {
                return this.condInitGaugeField;
            }
            set {
                this.condInitGaugeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Other comments on initial bit condition from the IADC list (BitDullCode enumerated list).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Other comments on initial bit condition from the IADC list (BitDullCode enumerate" +
            "d list).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondInitOther", DataType="String64")]
        public string CondInitOther {
            get {
                return this.condInitOtherField;
            }
            set {
                this.condInitOtherField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Initial reason the bit was pulled from IADC codes (BitReasonPulled enumerated list).</summary>
        [System.ComponentModel.DescriptionAttribute("Initial reason the bit was pulled from IADC codes (BitReasonPulled enumerated lis" +
            "t).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondInitReason", DataType="BitReasonPulled")]
        public BitReasonPulled CondInitReason {
            get {
                return this.condInitReasonField;
            }
            set {
                this.condInitReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondInitReasonSpecified {
            get {
                return this.condInitReasonFieldSpecified;
            }
            set {
                this.condInitReasonFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final condition of the inner tooth rows (inner 2/3 of bit) (0-8).</summary>
        [System.ComponentModel.DescriptionAttribute("Final condition of the inner tooth rows (inner 2/3 of bit) (0-8).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondFinalInner", DataType="IadcIntegerCode")]
        public IadcIntegerCode CondFinalInner {
            get {
                return this.condFinalInnerField;
            }
            set {
                this.condFinalInnerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondFinalInnerSpecified {
            get {
                return this.condFinalInnerFieldSpecified;
            }
            set {
                this.condFinalInnerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final condition of the outer tooth rows (outer 1/3 of bit) (0-8).</summary>
        [System.ComponentModel.DescriptionAttribute("Final condition of the outer tooth rows (outer 1/3 of bit) (0-8).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondFinalOuter", DataType="IadcIntegerCode")]
        public IadcIntegerCode CondFinalOuter {
            get {
                return this.condFinalOuterField;
            }
            set {
                this.condFinalOuterField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondFinalOuterSpecified {
            get {
                return this.condFinalOuterFieldSpecified;
            }
            set {
                this.condFinalOuterFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final dull condition from the IADC bit-wear 2-character codes.</summary>
        [System.ComponentModel.DescriptionAttribute("Final dull condition from the IADC bit-wear 2-character codes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondFinalDull", DataType="BitDullCode")]
        public BitDullCode CondFinalDull {
            get {
                return this.condFinalDullField;
            }
            set {
                this.condFinalDullField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondFinalDullSpecified {
            get {
                return this.condFinalDullFieldSpecified;
            }
            set {
                this.condFinalDullFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final conditions for row and cone numbers for items that need location information (e.g., cracked cone, lost cone, etc).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Final conditions for row and cone numbers for items that need location informatio" +
            "n (e.g., cracked cone, lost cone, etc).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondFinalLocation", DataType="String64")]
        public string CondFinalLocation {
            get {
                return this.condFinalLocationField;
            }
            set {
                this.condFinalLocationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final condition of the bit bearings (integer 0-8 or E, F, N or X).</summary>
        [System.ComponentModel.DescriptionAttribute("Final condition of the bit bearings (integer 0-8 or E, F, N or X).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondFinalBearing", DataType="IadcBearingWearCode")]
        public IadcBearingWearCode CondFinalBearing {
            get {
                return this.condFinalBearingField;
            }
            set {
                this.condFinalBearingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondFinalBearingSpecified {
            get {
                return this.condFinalBearingFieldSpecified;
            }
            set {
                this.condFinalBearingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final condition of the bit gauge in 1/16 of a inch. I = in gauge, else number of 16ths out of gauge.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Final condition of the bit gauge in 1/16 of a inch. I = in gauge, else number of " +
            "16ths out of gauge.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondFinalGauge", DataType="String64")]
        public string CondFinalGauge {
            get {
                return this.condFinalGaugeField;
            }
            set {
                this.condFinalGaugeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Other final comments on bit condition from the IADC list (BitDullCode enumerated list).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Other final comments on bit condition from the IADC list (BitDullCode enumerated " +
            "list).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondFinalOther", DataType="String64")]
        public string CondFinalOther {
            get {
                return this.condFinalOtherField;
            }
            set {
                this.condFinalOtherField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Final reason the bit was pulled from IADC codes (BitReasonPulled enumerated list).</summary>
        [System.ComponentModel.DescriptionAttribute("Final reason the bit was pulled from IADC codes (BitReasonPulled enumerated list)" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CondFinalReason", DataType="BitReasonPulled")]
        public BitReasonPulled CondFinalReason {
            get {
                return this.condFinalReasonField;
            }
            set {
                this.condFinalReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CondFinalReasonSpecified {
            get {
                return this.condFinalReasonFieldSpecified;
            }
            set {
                this.condFinalReasonFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bit drive type (motor, rotary table, etc.).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Bit drive type (motor, rotary table, etc.).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Drive", DataType="String64")]
        public string Drive {
            get {
                return this.driveField;
            }
            set {
                this.driveField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>N = new, U = used.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("N = new, U = used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BitClass", DataType="String64")]
        public string BitClass {
            get {
                return this.bitClassField;
            }
            set {
                this.bitClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Cost", DataType="Cost")]
        public Cost Cost {
            get {
                return this.costField;
            }
            set {
                this.costField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of BitRecord.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of BitRecord.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BitType {
        
        /// <remarks/>
        diamond,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diamond core")]
        diamondcore,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("insert roller cone")]
        insertrollercone,
        
        /// <remarks/>
        PDC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("PDC core")]
        PDCcore,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("roller cone")]
        rollercone,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum IadcIntegerCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BitDullCode {
        
        /// <remarks/>
        BC,
        
        /// <remarks/>
        BT,
        
        /// <remarks/>
        BU,
        
        /// <remarks/>
        CC,
        
        /// <remarks/>
        CD,
        
        /// <remarks/>
        CI,
        
        /// <remarks/>
        CR,
        
        /// <remarks/>
        CT,
        
        /// <remarks/>
        ER,
        
        /// <remarks/>
        FC,
        
        /// <remarks/>
        HC,
        
        /// <remarks/>
        JD,
        
        /// <remarks/>
        LC,
        
        /// <remarks/>
        LN,
        
        /// <remarks/>
        LT,
        
        /// <remarks/>
        NO,
        
        /// <remarks/>
        OC,
        
        /// <remarks/>
        PB,
        
        /// <remarks/>
        PN,
        
        /// <remarks/>
        RG,
        
        /// <remarks/>
        RO,
        
        /// <remarks/>
        SD,
        
        /// <remarks/>
        SS,
        
        /// <remarks/>
        TR,
        
        /// <remarks/>
        WO,
        
        /// <remarks/>
        WT,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum IadcBearingWearCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        X,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BitReasonPulled {
        
        /// <remarks/>
        BHA,
        
        /// <remarks/>
        CM,
        
        /// <remarks/>
        CP,
        
        /// <remarks/>
        DMF,
        
        /// <remarks/>
        DP,
        
        /// <remarks/>
        DST,
        
        /// <remarks/>
        DTF,
        
        /// <remarks/>
        FM,
        
        /// <remarks/>
        HP,
        
        /// <remarks/>
        HR,
        
        /// <remarks/>
        LOG,
        
        /// <remarks/>
        PP,
        
        /// <remarks/>
        PR,
        
        /// <remarks/>
        RIG,
        
        /// <remarks/>
        TD,
        
        /// <remarks/>
        TQ,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        WC,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class MwdTool {
        
        private VolumePerTimeMeasure flowrateMnField;
        
        private VolumePerTimeMeasure flowrateMxField;
        
        private ThermodynamicTemperatureMeasure tempMxField;
        
        private LengthMeasure idEquvField;
        
        private CustomData extensionAnyField;
        
        private Sensor[] sensorField;
        
        /// <remarks/>
        /// <summary>Minimum flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateMn", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateMn {
            get {
                return this.flowrateMnField;
            }
            set {
                this.flowrateMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowrateMx", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowrateMx {
            get {
                return this.flowrateMxField;
            }
            set {
                this.flowrateMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum Temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum Temperature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempMx", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TempMx {
            get {
                return this.tempMxField;
            }
            set {
                this.tempMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Equivalent inner diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Equivalent inner diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdEquv", DataType="LengthMeasure")]
        public LengthMeasure IdEquv {
            get {
                return this.idEquvField;
            }
            set {
                this.idEquvField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Sensor")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sensor", DataType="Sensor")]
        public Sensor[] Sensor {
            get {
                return this.sensorField;
            }
            set {
                this.sensorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class Jar {
        
        private ForceMeasure forUpSetField;
        
        private ForceMeasure forDownSetField;
        
        private ForceMeasure forUpTripField;
        
        private ForceMeasure forDownTripField;
        
        private ForceMeasure forPmpOpenField;
        
        private ForceMeasure forSealFricField;
        
        private JarType typeJarField;
        
        private bool typeJarFieldSpecified;
        
        private JarAction jarActionField;
        
        private bool jarActionFieldSpecified;
        
        private CustomData extensionAnyField;
        
        /// <remarks/>
        /// <summary>Up set force.</summary>
        [System.ComponentModel.DescriptionAttribute("Up set force.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ForUpSet", DataType="ForceMeasure")]
        public ForceMeasure ForUpSet {
            get {
                return this.forUpSetField;
            }
            set {
                this.forUpSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Down set force.</summary>
        [System.ComponentModel.DescriptionAttribute("Down set force.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ForDownSet", DataType="ForceMeasure")]
        public ForceMeasure ForDownSet {
            get {
                return this.forDownSetField;
            }
            set {
                this.forDownSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Up trip force.</summary>
        [System.ComponentModel.DescriptionAttribute("Up trip force.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ForUpTrip", DataType="ForceMeasure")]
        public ForceMeasure ForUpTrip {
            get {
                return this.forUpTripField;
            }
            set {
                this.forUpTripField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Down trip force.</summary>
        [System.ComponentModel.DescriptionAttribute("Down trip force.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ForDownTrip", DataType="ForceMeasure")]
        public ForceMeasure ForDownTrip {
            get {
                return this.forDownTripField;
            }
            set {
                this.forDownTripField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pump open force.</summary>
        [System.ComponentModel.DescriptionAttribute("Pump open force.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ForPmpOpen", DataType="ForceMeasure")]
        public ForceMeasure ForPmpOpen {
            get {
                return this.forPmpOpenField;
            }
            set {
                this.forPmpOpenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Seal friction force.</summary>
        [System.ComponentModel.DescriptionAttribute("Seal friction force.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ForSealFric", DataType="ForceMeasure")]
        public ForceMeasure ForSealFric {
            get {
                return this.forSealFricField;
            }
            set {
                this.forSealFricField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of jar.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind of jar.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeJar", DataType="JarType")]
        public JarType TypeJar {
            get {
                return this.typeJarField;
            }
            set {
                this.typeJarField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeJarSpecified {
            get {
                return this.typeJarFieldSpecified;
            }
            set {
                this.typeJarFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The jar action.</summary>
        [System.ComponentModel.DescriptionAttribute("The jar action.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JarAction", DataType="JarAction")]
        public JarAction JarAction {
            get {
                return this.jarActionField;
            }
            set {
                this.jarActionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JarActionSpecified {
            get {
                return this.jarActionFieldSpecified;
            }
            set {
                this.jarActionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum JarType {
        
        /// <remarks/>
        mechanical,
        
        /// <remarks/>
        hydraulic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydro mechanical")]
        hydromechanical,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum JarAction {
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        down,
        
        /// <remarks/>
        both,
        
        /// <remarks/>
        vibrating,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ForcePerLengthMeasure {
        
        private ForcePerLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="ForcePerLengthUom")]
        public ForcePerLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft")]
        Item001lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 lbf/m")]
        Item130lbfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 N/m")]
        Item130Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm")]
        dynecm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm")]
        kgfcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/km")]
        mNkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/m")]
        mNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl/cm")]
        pdlcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft")]
        tonfUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft")]
        tonfUSft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthPerLengthMeasure {
        
        private LengthPerLengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthPerLengthUom")]
        public LengthPerLengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 ft/ft")]
        Item001ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 m/m")]
        Item130mm,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft")]
        ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/in")]
        ftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/m")]
        ftm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/mi")]
        ftmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/cm")]
        kmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/cm")]
        mcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/km")]
        mkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m")]
        mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/in")]
        miin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class TubularComponent {
        
        private TubularComponentType typeTubularComponentField;
        
        private int sequenceField;
        
        private string descriptionField;
        
        private LengthMeasure idField;
        
        private LengthMeasure odField;
        
        private LengthMeasure odMxField;
        
        private LengthMeasure lenField;
        
        private LengthMeasure lenJointAvField;
        
        private int numJointStandField;
        
        private bool numJointStandFieldSpecified;
        
        private MassPerLengthMeasure wtPerLenField;
        
        private string gradeField;
        
        private LengthMeasure odDriftField;
        
        private PressureMeasure tensYieldField;
        
        private MomentOfForceMeasure tqYieldField;
        
        private PressureMeasure stressFatigueField;
        
        private LengthMeasure lenFishneckField;
        
        private LengthMeasure idFishneckField;
        
        private LengthMeasure odFishneckField;
        
        private VolumeMeasure dispField;
        
        private PressureMeasure presBurstField;
        
        private PressureMeasure presCollapseField;
        
        private string classServiceField;
        
        private LengthPerLengthMeasure wearWallField;
        
        private LengthMeasure thickWallField;
        
        private BoxPinConfig configConField;
        
        private bool configConFieldSpecified;
        
        private ForcePerLengthMeasure bendStiffnessField;
        
        private ForcePerLengthMeasure axialStiffnessField;
        
        private ForcePerLengthMeasure torsionalStiffnessField;
        
        private MaterialType typeMaterialField;
        
        private bool typeMaterialFieldSpecified;
        
        private AnglePerLengthMeasure doglegMxField;
        
        private string vendorField;
        
        private string modelField;
        
        private NameTag[] nameTagField;
        
        private AreaMeasure areaNozzleFlowField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private Connection[] connectionField;
        
        private Jar jarField;
        
        private MwdTool mwdToolField;
        
        private BitRecord bitRecordField;
        
        private Motor motorField;
        
        private Stabilizer[] stabilizerField;
        
        private Bend[] bendField;
        
        private HoleOpener holeOpenerField;
        
        private RotarySteerableTool rotarySteerableToolField;
        
        private CustomData extensionAnyField;
        
        private Nozzle[] nozzleField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Connection whose type is tubular</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Connection whose type is tubular")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeTubularComponent", DataType="TubularComponentType")]
        public TubularComponentType TypeTubularComponent {
            get {
                return this.typeTubularComponentField;
            }
            set {
                this.typeTubularComponentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sequence within which the components entered the hole. That is, a sequence number of 1 entered first, 2 entered next, etc.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The sequence within which the components entered the hole. That is, a sequence nu" +
            "mber of 1 entered first, 2 entered next, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sequence", DataType="int")]
        public int Sequence {
            get {
                return this.sequenceField;
            }
            set {
                this.sequenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of item and details.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description of item and details.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Internal diameter of object.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Internal diameter of object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Id", DataType="LengthMeasure")]
        public LengthMeasure Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Outside diameter of the body of the item.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Outside diameter of the body of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Od", DataType="LengthMeasure")]
        public LengthMeasure Od {
            get {
                return this.odField;
            }
            set {
                this.odField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum outside diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum outside diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdMx", DataType="LengthMeasure")]
        public LengthMeasure OdMx {
            get {
                return this.odMxField;
            }
            set {
                this.odMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of the item.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Length of the item.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Len", DataType="LengthMeasure")]
        public LengthMeasure Len {
            get {
                return this.lenField;
            }
            set {
                this.lenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average length of the joint for this string.</summary>
        [System.ComponentModel.DescriptionAttribute("Average length of the joint for this string.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenJointAv", DataType="LengthMeasure")]
        public LengthMeasure LenJointAv {
            get {
                return this.lenJointAvField;
            }
            set {
                this.lenJointAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of joints per stand of tubulars.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of joints per stand of tubulars.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumJointStand", DataType="int")]
        public int NumJointStand {
            get {
                return this.numJointStandField;
            }
            set {
                this.numJointStandField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumJointStandSpecified {
            get {
                return this.numJointStandFieldSpecified;
            }
            set {
                this.numJointStandFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight per unit length.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight per unit length.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WtPerLen", DataType="MassPerLengthMeasure")]
        public MassPerLengthMeasure WtPerLen {
            get {
                return this.wtPerLenField;
            }
            set {
                this.wtPerLenField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Material grade for the tubular section.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Material grade for the tubular section.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Grade", DataType="String64")]
        public string Grade {
            get {
                return this.gradeField;
            }
            set {
                this.gradeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum pass through diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum pass through diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdDrift", DataType="LengthMeasure")]
        public LengthMeasure OdDrift {
            get {
                return this.odDriftField;
            }
            set {
                this.odDriftField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Yield stress of steel - worn stress.</summary>
        [System.ComponentModel.DescriptionAttribute("Yield stress of steel - worn stress.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TensYield", DataType="PressureMeasure")]
        public PressureMeasure TensYield {
            get {
                return this.tensYieldField;
            }
            set {
                this.tensYieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Torque at which yield occurs.</summary>
        [System.ComponentModel.DescriptionAttribute("Torque at which yield occurs.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TqYield", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure TqYield {
            get {
                return this.tqYieldField;
            }
            set {
                this.tqYieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fatigue endurance limit.</summary>
        [System.ComponentModel.DescriptionAttribute("Fatigue endurance limit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StressFatigue", DataType="PressureMeasure")]
        public PressureMeasure StressFatigue {
            get {
                return this.stressFatigueField;
            }
            set {
                this.stressFatigueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fish neck length.</summary>
        [System.ComponentModel.DescriptionAttribute("Fish neck length.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LenFishneck", DataType="LengthMeasure")]
        public LengthMeasure LenFishneck {
            get {
                return this.lenFishneckField;
            }
            set {
                this.lenFishneckField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fish neck inside diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Fish neck inside diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdFishneck", DataType="LengthMeasure")]
        public LengthMeasure IdFishneck {
            get {
                return this.idFishneckField;
            }
            set {
                this.idFishneckField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fish neck outside diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Fish neck outside diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OdFishneck", DataType="LengthMeasure")]
        public LengthMeasure OdFishneck {
            get {
                return this.odFishneckField;
            }
            set {
                this.odFishneckField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Closed end displacement.</summary>
        [System.ComponentModel.DescriptionAttribute("Closed end displacement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Disp", DataType="VolumeMeasure")]
        public VolumeMeasure Disp {
            get {
                return this.dispField;
            }
            set {
                this.dispField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Burst pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Burst pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresBurst", DataType="PressureMeasure")]
        public PressureMeasure PresBurst {
            get {
                return this.presBurstField;
            }
            set {
                this.presBurstField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Collapse pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Collapse pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresCollapse", DataType="PressureMeasure")]
        public PressureMeasure PresCollapse {
            get {
                return this.presCollapseField;
            }
            set {
                this.presCollapseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Service class.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Service class.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClassService", DataType="String64")]
        public string ClassService {
            get {
                return this.classServiceField;
            }
            set {
                this.classServiceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Wall thickness wear (commonly in percent).</summary>
        [System.ComponentModel.DescriptionAttribute("Wall thickness wear (commonly in percent).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WearWall", DataType="LengthPerLengthMeasure")]
        public LengthPerLengthMeasure WearWall {
            get {
                return this.wearWallField;
            }
            set {
                this.wearWallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Wall thickness.</summary>
        [System.ComponentModel.DescriptionAttribute("Wall thickness.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ThickWall", DataType="LengthMeasure")]
        public LengthMeasure ThickWall {
            get {
                return this.thickWallField;
            }
            set {
                this.thickWallField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Box/Pin configuration.</summary>
        [System.ComponentModel.DescriptionAttribute("Box/Pin configuration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConfigCon", DataType="BoxPinConfig")]
        public BoxPinConfig ConfigCon {
            get {
                return this.configConField;
            }
            set {
                this.configConField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ConfigConSpecified {
            get {
                return this.configConFieldSpecified;
            }
            set {
                this.configConFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bending stiffness of tubular.</summary>
        [System.ComponentModel.DescriptionAttribute("Bending stiffness of tubular.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BendStiffness", DataType="ForcePerLengthMeasure")]
        public ForcePerLengthMeasure BendStiffness {
            get {
                return this.bendStiffnessField;
            }
            set {
                this.bendStiffnessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Axial stiffness of tubular.</summary>
        [System.ComponentModel.DescriptionAttribute("Axial stiffness of tubular.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxialStiffness", DataType="ForcePerLengthMeasure")]
        public ForcePerLengthMeasure AxialStiffness {
            get {
                return this.axialStiffnessField;
            }
            set {
                this.axialStiffnessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Torsional stiffness of tubular.</summary>
        [System.ComponentModel.DescriptionAttribute("Torsional stiffness of tubular.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TorsionalStiffness", DataType="ForcePerLengthMeasure")]
        public ForcePerLengthMeasure TorsionalStiffness {
            get {
                return this.torsionalStiffnessField;
            }
            set {
                this.torsionalStiffnessField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of material.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of material.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeMaterial", DataType="MaterialType")]
        public MaterialType TypeMaterial {
            get {
                return this.typeMaterialField;
            }
            set {
                this.typeMaterialField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeMaterialSpecified {
            get {
                return this.typeMaterialFieldSpecified;
            }
            set {
                this.typeMaterialFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum dogleg severity.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum dogleg severity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DoglegMx", DataType="AnglePerLengthMeasure")]
        public AnglePerLengthMeasure DoglegMx {
            get {
                return this.doglegMxField;
            }
            set {
                this.doglegMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of vendor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of vendor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Vendor", DataType="String64")]
        public string Vendor {
            get {
                return this.vendorField;
            }
            set {
                this.vendorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Component name from manufacturer.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Component name from manufacturer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Model", DataType="String64")]
        public string Model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An identification tag for the component tool. A serial number is a type of identification tag; however, some tags contain many pieces of information. This element only identifies the tag; it does not describe the contents.</summary>
        [System.Xml.Serialization.XmlElementAttribute("NameTag")]
        [System.ComponentModel.DescriptionAttribute("An identification tag for the component tool. A serial number is a type of identi" +
            "fication tag; however, some tags contain many pieces of information. This elemen" +
            "t only identifies the tag; it does not describe the contents.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameTag", DataType="NameTag")]
        public NameTag[] NameTag {
            get {
                return this.nameTagField;
            }
            set {
                this.nameTagField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total area of nozzles.</summary>
        [System.ComponentModel.DescriptionAttribute("Total area of nozzles.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AreaNozzleFlow", DataType="AreaMeasure")]
        public AreaMeasure AreaNozzleFlow {
            get {
                return this.areaNozzleFlowField;
            }
            set {
                this.areaNozzleFlowField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Connection")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Connection", DataType="Connection")]
        public Connection[] Connection {
            get {
                return this.connectionField;
            }
            set {
                this.connectionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Jar", DataType="Jar")]
        public Jar Jar {
            get {
                return this.jarField;
            }
            set {
                this.jarField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MwdTool", DataType="MwdTool")]
        public MwdTool MwdTool {
            get {
                return this.mwdToolField;
            }
            set {
                this.mwdToolField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BitRecord", DataType="BitRecord")]
        public BitRecord BitRecord {
            get {
                return this.bitRecordField;
            }
            set {
                this.bitRecordField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Motor", DataType="Motor")]
        public Motor Motor {
            get {
                return this.motorField;
            }
            set {
                this.motorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Stabilizer")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Stabilizer", DataType="Stabilizer")]
        public Stabilizer[] Stabilizer {
            get {
                return this.stabilizerField;
            }
            set {
                this.stabilizerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Bend")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Bend", DataType="Bend")]
        public Bend[] Bend {
            get {
                return this.bendField;
            }
            set {
                this.bendField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleOpener", DataType="HoleOpener")]
        public HoleOpener HoleOpener {
            get {
                return this.holeOpenerField;
            }
            set {
                this.holeOpenerField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RotarySteerableTool", DataType="RotarySteerableTool")]
        public RotarySteerableTool RotarySteerableTool {
            get {
                return this.rotarySteerableToolField;
            }
            set {
                this.rotarySteerableToolField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionAny", DataType="CustomData")]
        public CustomData ExtensionAny {
            get {
                return this.extensionAnyField;
            }
            set {
                this.extensionAnyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Nozzle")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nozzle", DataType="Nozzle")]
        public Nozzle[] Nozzle {
            get {
                return this.nozzleField;
            }
            set {
                this.nozzleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of TubularComponent</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of TubularComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum TubularComponentType {
        
        /// <remarks/>
        accelerator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("adjustable kickoff")]
        adjustablekickoff,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit core diamond")]
        bitcorediamond,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit core PDC")]
        bitcorePDC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit diamond fixed cut")]
        bitdiamondfixedcut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit hole opener")]
        bitholeopener,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit insert roller cone")]
        bitinsertrollercone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit mill tooth roller cone")]
        bitmilltoothrollercone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit PDC fixed cutter")]
        bitPDCfixedcutter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit under reamer")]
        bitunderreamer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bridge plug")]
        bridgeplug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bull plug")]
        bullplug,
        
        /// <remarks/>
        bullnose,
        
        /// <remarks/>
        casing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing crossover")]
        casingcrossover,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing cutter")]
        casingcutter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing head")]
        casinghead,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing inflatable packer")]
        casinginflatablepacker,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing shoe screw-in")]
        casingshoescrewin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("catch assembly")]
        catchassembly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coiled tubing in hole")]
        coiledtubinginhole,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coiled tubing on coil")]
        coiledtubingoncoil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("core barrel")]
        corebarrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("core orientation barrel")]
        coreorientationbarrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("die collar")]
        diecollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("die collar LH")]
        diecollarLH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("directional guidance system")]
        directionalguidancesystem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill collar")]
        drillcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill collar short")]
        drillcollarshort,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill pipe")]
        drillpipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill pipe compressive")]
        drillpipecompressive,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill pipe LH")]
        drillpipeLH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drill stem test BHA")]
        drillstemtestBHA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drive pipe")]
        drivepipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dual catch assembly")]
        dualcatchassembly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("extension bowl overshot")]
        extensionbowlovershot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("extension sub-overshot")]
        extensionsubovershot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("float collar")]
        floatcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("float shoe")]
        floatshoe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("flow head")]
        flowhead,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("guide shoe")]
        guideshoe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hanger casing subsea")]
        hangercasingsubsea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hanger casing surface")]
        hangercasingsurface,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hanger liner")]
        hangerliner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hanger mud line")]
        hangermudline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hanger tubing")]
        hangertubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heavy weight drill pipe")]
        heavyweightdrillpipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heavy weight drill pipe LH")]
        heavyweightdrillpipeLH,
        
        /// <remarks/>
        jar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("junk basket")]
        junkbasket,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("junk basket reverse circulation")]
        junkbasketreversecirculation,
        
        /// <remarks/>
        kelly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("keyseat wiper tool")]
        keyseatwipertool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("landing float collar")]
        landingfloatcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lead impression block")]
        leadimpressionblock,
        
        /// <remarks/>
        liner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("logging while drilling tool")]
        loggingwhiledrillingtool,
        
        /// <remarks/>
        magnet,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill casing cutting")]
        millcasingcutting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill dress")]
        milldress,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill flat bottom")]
        millflatbottom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill hollow")]
        millhollow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill packer picker assembly")]
        millpackerpickerassembly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill pilot")]
        millpilot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill polish")]
        millpolish,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill section")]
        millsection,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill taper")]
        milltaper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill washover")]
        millwashover,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mill watermelon")]
        millwatermelon,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("millout extension")]
        milloutextension,
        
        /// <remarks/>
        motor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor instrumented")]
        motorinstrumented,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor steerable")]
        motorsteerable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mule shoe")]
        muleshoe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("multilateral hanger running tool")]
        multilateralhangerrunningtool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MWD hang off sub")]
        MWDhangoffsub,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MWD pulser")]
        MWDpulser,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non-magnetic collar")]
        nonmagneticcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non-magnetic stabilizer")]
        nonmagneticstabilizer,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        overshot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("overshot LH")]
        overshotLH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oversize lip guide overshot")]
        oversizelipguideovershot,
        
        /// <remarks/>
        packer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("packer retrieve TT squeeze")]
        packerretrieveTTsqueeze,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("packer RTTS")]
        packerRTTS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("packer storm valve RTTS")]
        packerstormvalveRTTS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pipe cutter")]
        pipecutter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("polished bore receptacle")]
        polishedborereceptacle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ported stinger")]
        portedstinger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("prepacked screens")]
        prepackedscreens,
        
        /// <remarks/>
        reamer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reversing tool")]
        reversingtool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("riser high pressure")]
        riserhighpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("riser marine")]
        risermarine,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("riser production")]
        riserproduction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rotary steering tool")]
        rotarysteeringtool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("running tool")]
        runningtool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("safety joint")]
        safetyjoint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("safety joint LH")]
        safetyjointLH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("scab liner bit guide")]
        scablinerbitguide,
        
        /// <remarks/>
        scraper,
        
        /// <remarks/>
        scratchers,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("slotted liner")]
        slottedliner,
        
        /// <remarks/>
        spear,
        
        /// <remarks/>
        stabilizer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer inline")]
        stabilizerinline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer near bit")]
        stabilizernearbit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer near bit roller reamer")]
        stabilizernearbitrollerreamer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer non-rotating")]
        stabilizernonrotating,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer steerable")]
        stabilizersteerable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer string")]
        stabilizerstring,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer string roller reamer")]
        stabilizerstringrollerreamer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer turbo back")]
        stabilizerturboback,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stabilizer variable blade")]
        stabilizervariableblade,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stage cement collar")]
        stagecementcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-bar catcher")]
        subbarcatcher,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-bent")]
        subbent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-bit")]
        subbit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-bumper")]
        subbumper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-catcher")]
        subcatcher,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-circulation")]
        subcirculation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-cone")]
        subcone,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-crossover")]
        subcrossover,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-dart")]
        subdart,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-filter")]
        subfilter,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-float")]
        subfloat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-jetting")]
        subjetting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-junk")]
        subjunk,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-orienting")]
        suborienting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-ported")]
        subported,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-pressure relief")]
        subpressurerelief,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-pump out")]
        subpumpout,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-restrictor")]
        subrestrictor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-saver")]
        subsaver,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-shock")]
        subshock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-side entry")]
        subsideentry,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sub-stop")]
        substop,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface pipe")]
        surfacepipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("taper tap")]
        tapertap,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("taper tap LH")]
        tapertapLH,
        
        /// <remarks/>
        thruster,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tieback polished bore receptacle")]
        tiebackpolishedborereceptacle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tieback stinger")]
        tiebackstinger,
        
        /// <remarks/>
        tubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing-conveyed perforating gun")]
        tubingconveyedperforatinggun,
        
        /// <remarks/>
        turbine,
        
        /// <remarks/>
        unknown,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("washover pipe")]
        washoverpipe,
        
        /// <remarks/>
        whipstock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("whipstock anchor")]
        whipstockanchor,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BoxPinConfig {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bottom box")]
        bottombox,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("top box")]
        topbox,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("top pin")]
        toppin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bottom pin top box")]
        bottompintopbox,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bottom pin")]
        bottompin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum MaterialType {
        
        /// <remarks/>
        aluminum,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("beryllium copper")]
        berylliumcopper,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chrome alloy")]
        chromealloy,
        
        /// <remarks/>
        composite,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non-magnetic steel")]
        nonmagneticsteel,
        
        /// <remarks/>
        plastic,
        
        /// <remarks/>
        steel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("steel alloy")]
        steelalloy,
        
        /// <remarks/>
        titanium,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RefWellboreRig {
        
        private string rigReferenceField;
        
        private string wellboreParentField;
        
        private string wellParentField;
        
        /// <remarks/>
        /// <summary>A pointer to the rig with which there is a relationship.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the rig with which there is a relationship.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RigReference", DataType="String64")]
        public string RigReference {
            get {
                return this.rigReferenceField;
            }
            set {
                this.rigReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the  context of a common parent wellbore.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the wellbore that contains the rigReference. This is not needed unle" +
            "ss the referenced rig is outside the  context of a common parent wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreParent", DataType="String64")]
        public string WellboreParent {
            get {
                return this.wellboreParentField;
            }
            set {
                this.wellboreParentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the  context of a common parent well.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the well that contains the wellboreParent. This is not needed unless" +
            " the referenced wellbore is outside the  context of a common parent well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellParent", DataType="String64")]
        public string WellParent {
            get {
                return this.wellParentField;
            }
            set {
                this.wellParentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class RefWellbore {
        
        private string wellboreReferenceField;
        
        private string wellParentField;
        
        /// <remarks/>
        /// <summary>A pointer the wellbore with which there is a relationship.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer the wellbore with which there is a relationship.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreReference", DataType="String64")]
        public string WellboreReference {
            get {
                return this.wellboreReferenceField;
            }
            set {
                this.wellboreReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the  context of a common parent well.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the well that contains the wellboreReference. This is not needed unl" +
            "ess the referenced wellbore is outside the  context of a common parent well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellParent", DataType="String64")]
        public string WellParent {
            get {
                return this.wellParentField;
            }
            set {
                this.wellParentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class WellDatum {
        
        private string nameField;
        
        private WellboreDatumReference codeField;
        
        private bool codeFieldSpecified;
        
        private string[] kindField;
        
        private MeasuredDepthCoord measuredDepthField;
        
        private string commentField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private RefWellbore wellboreField;
        
        private RefWellboreRig rigField;
        
        private WellElevationCoord elevationField;
        
        private AbstractWellLocation horizontalLocationField;
        
        private AbstractVerticalCrs crsField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The human-understandable contextual name of the reference datum.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The human-understandable contextual name of the reference datum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The code value that represents the type of reference datum. This may represent a point on a device (e.g., kelly bushing) or it may represent a vertical reference datum (e.g., mean sea level).</summary>
        [System.ComponentModel.DescriptionAttribute("The code value that represents the type of reference datum. This may represent a " +
            "point on a device (e.g., kelly bushing) or it may represent a vertical reference" +
            " datum (e.g., mean sea level).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Code", DataType="WellboreDatumReference")]
        public WellboreDatumReference Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodeSpecified {
            get {
                return this.codeFieldSpecified;
            }
            set {
                this.codeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Because various activities may use different points as measurement datums, it is useful to characterize the point based on its usage. A well reference datum may have more than one such characterization. For example, it may be the datum used by the driller and logger for measuring their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).</summary>
        [System.Xml.Serialization.XmlElementAttribute("Kind")]
        [System.ComponentModel.DescriptionAttribute(@"Because various activities may use different points as measurement datums, it is useful to characterize the point based on its usage. A well reference datum may have more than one such characterization. For example, it may be the datum used by the driller and logger for measuring their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String64")]
        public string[] Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is "downhole", such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a depth is given, then an elevation should also be given.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is ""downhole"", such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a depth is given, then an elevation should also be given.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasuredDepth", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return this.measuredDepthField;
            }
            set {
                this.measuredDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A contextual description of the well reference datum.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A contextual description of the well reference datum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="RefWellbore")]
        public RefWellbore Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rig", DataType="RefWellboreRig")]
        public RefWellboreRig Rig {
            get {
                return this.rigField;
            }
            set {
                this.rigField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Elevation", DataType="WellElevationCoord")]
        public WellElevationCoord Elevation {
            get {
                return this.elevationField;
            }
            set {
                this.elevationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HorizontalLocation", DataType="AbstractWellLocation")]
        public AbstractWellLocation HorizontalLocation {
            get {
                return this.horizontalLocationField;
            }
            set {
                this.horizontalLocationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Points to one of the optional for a geodetic vertical CRS, Allows the datum to be positioned in real-world space.l</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Points to one of the optional for a geodetic vertical CRS, Allows the datum to be" +
            " positioned in real-world space.l")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Crs", DataType="AbstractVerticalCrs")]
        public AbstractVerticalCrs Crs {
            get {
                return this.crsField;
            }
            set {
                this.crsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for an instance of a well datum.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for an instance of a well datum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalWktCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalGmlCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalLocalAuthorityCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalEpsgCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalUnknownCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractVerticalCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalWktCrs : AbstractVerticalCrs {
        
        private string wellKnownTextField;
        
        /// <remarks/>
        /// <summary>ISO 19162 compliant well known text of the CRS</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("ISO 19162 compliant well known text of the CRS")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellKnownText", DataType="string")]
        public string WellKnownText {
            get {
                return this.wellKnownTextField;
            }
            set {
                this.wellKnownTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalGmlCrs : AbstractVerticalCrs {
        
        private VerticalCRSType gmlVerticalCrsDefinitionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GmlVerticalCrsDefinition", DataType="VerticalCRSType")]
        public VerticalCRSType GmlVerticalCrsDefinition {
            get {
                return this.gmlVerticalCrsDefinitionField;
            }
            set {
                this.gmlVerticalCrsDefinitionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalLocalAuthorityCrs : AbstractVerticalCrs {
        
        private AuthorityQualifiedName localAuthorityCrsNameField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalAuthorityCrsName", DataType="AuthorityQualifiedName")]
        public AuthorityQualifiedName LocalAuthorityCrsName {
            get {
                return this.localAuthorityCrsNameField;
            }
            set {
                this.localAuthorityCrsNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalEpsgCrs : AbstractVerticalCrs {
        
        private long epsgCodeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpsgCode", DataType="PositiveLong")]
        public long EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                this.epsgCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalUnknownCrs : AbstractVerticalCrs {
        
        private string unknownField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unknown", DataType="String2000")]
        public string Unknown {
            get {
                return this.unknownField;
            }
            set {
                this.unknownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class ReferencePoint {
        
        private string nameField;
        
        private string typeField;
        
        private MeasuredDepthCoord measuredDepthField;
        
        private string descriptionField;
        
        private ExtensionNameValue[] extensionNameValueField;
        
        private WellElevationCoord elevationField;
        
        private AbstractWellLocation[] locationField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Human-recognizable context for the point.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Human-recognizable context for the point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="String64")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of point. For example,  'well reference point', 'platform reference point', 'sea surface', 'sea bottom'.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The kind of point. For example,  \'well reference point\', \'platform reference poin" +
            "t\', \'sea surface\', \'sea bottom\'.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth coordinate of this reference point. Value is positive when moving toward the bottomhole from the measured depth datum. Provide a value for this when the reference is "downhole", such as an ocean-bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference pointand a vertical well datum are at the same point.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The measured depth coordinate of this reference point. Value is positive when moving toward the bottomhole from the measured depth datum. Provide a value for this when the reference is ""downhole"", such as an ocean-bottom template, or when the reference point is also used as a vertical well datum. The measured depth value can be used to determine if the reference pointand a vertical well datum are at the same point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeasuredDepth", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return this.measuredDepthField;
            }
            set {
                this.measuredDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A textual description of the point.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A textual description of the point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extensions to the schema based on a name-value construct.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ExtensionNameValue")]
        [System.ComponentModel.DescriptionAttribute("Extensions to the schema based on a name-value construct.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtensionNameValue", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] ExtensionNameValue {
            get {
                return this.extensionNameValueField;
            }
            set {
                this.extensionNameValueField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Elevation", DataType="WellElevationCoord")]
        public WellElevationCoord Elevation {
            get {
                return this.elevationField;
            }
            set {
                this.elevationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Location")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Location", DataType="AbstractWellLocation")]
        public AbstractWellLocation[] Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A unique identifier for an instance of a ReferencePoint.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A unique identifier for an instance of a ReferencePoint.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DistanceEastWest {
        
        private LengthUom uomField;
        
        private EastOrWest referenceField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>The unit of measure of the east-west distance.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The unit of measure of the east-west distance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>East or west direction.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("East or west direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("reference", DataType="EastOrWest")]
        public EastOrWest reference {
            get {
                return this.referenceField;
            }
            set {
                this.referenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum EastOrWest {
        
        /// <remarks/>
        east,
        
        /// <remarks/>
        west,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class DistanceNorthSouth {
        
        private LengthUom uomField;
        
        private NorthOrSouth referenceField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>The unit of measure of the north-south distance.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The unit of measure of the north-south distance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>North or south direction.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("North or south direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("reference", DataType="NorthOrSouth")]
        public NorthOrSouth reference {
            get {
                return this.referenceField;
            }
            set {
                this.referenceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum NorthOrSouth {
        
        /// <remarks/>
        north,
        
        /// <remarks/>
        south,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public partial class PublicLandSurveySystem {
        
        private PrincipalMeridian principalMeridianField;
        
        private bool principalMeridianFieldSpecified;
        
        private int rangeField;
        
        private bool rangeFieldSpecified;
        
        private EastOrWest rangeDirField;
        
        private bool rangeDirFieldSpecified;
        
        private int townshipField;
        
        private bool townshipFieldSpecified;
        
        private NorthOrSouth townshipDirField;
        
        private bool townshipDirFieldSpecified;
        
        private string sectionField;
        
        private string quarterSectionField;
        
        private string quarterTownshipField;
        
        private DistanceNorthSouth footageNSField;
        
        private DistanceEastWest footageEWField;
        
        /// <remarks/>
        /// <summary>Principal meridian for this location.</summary>
        [System.ComponentModel.DescriptionAttribute("Principal meridian for this location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PrincipalMeridian", DataType="PrincipalMeridian")]
        public PrincipalMeridian PrincipalMeridian {
            get {
                return this.principalMeridianField;
            }
            set {
                this.principalMeridianField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PrincipalMeridianSpecified {
            get {
                return this.principalMeridianFieldSpecified;
            }
            set {
                this.principalMeridianFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Range number.</summary>
        [System.ComponentModel.DescriptionAttribute("Range number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Range", DataType="int")]
        public int Range {
            get {
                return this.rangeField;
            }
            set {
                this.rangeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RangeSpecified {
            get {
                return this.rangeFieldSpecified;
            }
            set {
                this.rangeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Range direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Range direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RangeDir", DataType="EastOrWest")]
        public EastOrWest RangeDir {
            get {
                return this.rangeDirField;
            }
            set {
                this.rangeDirField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RangeDirSpecified {
            get {
                return this.rangeDirFieldSpecified;
            }
            set {
                this.rangeDirFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Township number.</summary>
        [System.ComponentModel.DescriptionAttribute("Township number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Township", DataType="int")]
        public int Township {
            get {
                return this.townshipField;
            }
            set {
                this.townshipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TownshipSpecified {
            get {
                return this.townshipFieldSpecified;
            }
            set {
                this.townshipFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Township direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Township direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TownshipDir", DataType="NorthOrSouth")]
        public NorthOrSouth TownshipDir {
            get {
                return this.townshipDirField;
            }
            set {
                this.townshipDirField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TownshipDirSpecified {
            get {
                return this.townshipDirFieldSpecified;
            }
            set {
                this.townshipDirFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Section number.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[+]?([1-9]|[1-2][0-9]|3[0-6])\\.?[0-9]?")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Section number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Section", DataType="SectionNumber")]
        public string Section {
            get {
                return this.sectionField;
            }
            set {
                this.sectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The location of the well within the section, with the primary component listed first. Spot location will be made from a combinationof the following codes: NE, NW, SW, SE, N2, S2, E2, W2, C (center quarter), LTxx (where xx represents a two digit lot designation), TRzz (where zz represents a one or two character trac designation).  Free format allows for entries such as NESW (southwest quarter of northeast quarter), E2NESE (southeast quarter of northeast quarter of east half), CNE (northeast quarter of center quarter), etc.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("(NE|NW|SW|SE|N2|S2|E2|W2|C|LT[0-9]{2,2}|TR[a-zA-Z0-9]{1,2}){1,3}")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"The location of the well within the section, with the primary component listed first. Spot location will be made from a combinationof the following codes: NE, NW, SW, SE, N2, S2, E2, W2, C (center quarter), LTxx (where xx represents a two digit lot designation), TRzz (where zz represents a one or two character trac designation).  Free format allows for entries such as NESW (southwest quarter of northeast quarter), E2NESE (southeast quarter of northeast quarter of east half), CNE (northeast quarter of center quarter), etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QuarterSection", DataType="PublicLandSurveySystemQuarterSection")]
        public string QuarterSection {
            get {
                return this.quarterSectionField;
            }
            set {
                this.quarterSectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Quarter township.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("NE|NW|SW|SE")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Quarter township.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QuarterTownship", DataType="PublicLandSurveySystemQuarterTownship")]
        public string QuarterTownship {
            get {
                return this.quarterTownshipField;
            }
            set {
                this.quarterTownshipField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FootageNS", DataType="DistanceNorthSouth")]
        public DistanceNorthSouth FootageNS {
            get {
                return this.footageNSField;
            }
            set {
                this.footageNSField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FootageEW", DataType="DistanceEastWest")]
        public DistanceEastWest FootageEW {
            get {
                return this.footageEWField;
            }
            set {
                this.footageEWField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PrincipalMeridian {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1st Principal Meridian")]
        Item1stPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2nd Principal Meridian")]
        Item2ndPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3rd Principal Meridian")]
        Item3rdPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4th Principal Meridian")]
        Item4thPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5th Principal Meridian")]
        Item5thPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6th Principal Meridian")]
        Item6thPrincipalMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Black Hills Meridian")]
        BlackHillsMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Boise Meridian")]
        BoiseMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Chickasaw Meridian")]
        ChickasawMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Choctaw Meridian")]
        ChoctawMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Cimarron Meridian")]
        CimarronMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Copper River Meridian")]
        CopperRiverMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Fairbanks Meridian")]
        FairbanksMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gila and Salt River Meridian")]
        GilaandSaltRiverMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Humboldt Meridian")]
        HumboldtMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Huntsville Meridian")]
        HuntsvilleMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Indian Meridian")]
        IndianMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Kateel River Meridian")]
        KateelRiverMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Lousiana Meridian")]
        LousianaMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Michigan Meridian")]
        MichiganMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Montana Meridian")]
        MontanaMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mount Diablo Meridian")]
        MountDiabloMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Navajo Meridian")]
        NavajoMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("New Mexico Meridian")]
        NewMexicoMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Helena Meridian")]
        SaintHelenaMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Saint Stephens Meridian")]
        SaintStephensMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Salt Lake Meridian")]
        SaltLakeMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("San Bernardo Meridian")]
        SanBernardoMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Seward Meridian")]
        SewardMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tallahassee Meridian")]
        TallahasseeMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Uintah Meridian")]
        UintahMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Umiat Meridian")]
        UmiatMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ute Meridian")]
        UteMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Washington Meridian")]
        WashingtonMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Williamette Meridian")]
        WilliametteMeridian,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wind River Meridian")]
        WindRiverMeridian,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractGraphicalInformation {
        
        private DataObjectReference targetObjectField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TargetObject", DataType="DataObjectReference")]
        public DataObjectReference TargetObject {
            get {
                return this.targetObjectField;
            }
            set {
                this.targetObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IndexRange {
        
        private string indexMinimumField;
        
        private string indexMaximumField;
        
        /// <remarks/>
        /// <summary>The minimum index for the range over which the referenced data's conformance with the policy is being assessed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The minimum index for the range over which the referenced data\'s conformance with" +
            " the policy is being assessed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexMinimum", DataType="String64")]
        public string IndexMinimum {
            get {
                return this.indexMinimumField;
            }
            set {
                this.indexMinimumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum index for the range over which the referenced data's conformance with the policy is being assessed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The maximum index for the range over which the referenced data\'s conformance with" +
            " the policy is being assessed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexMaximum", DataType="String64")]
        public string IndexMaximum {
            get {
                return this.indexMaximumField;
            }
            set {
                this.indexMaximumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class FailingRule {
        
        private string ruleIdField;
        
        private string ruleNameField;
        
        private string severityField;
        
        private ExtensionNameValue[] failingRuleExtensionsField;
        
        /// <remarks/>
        /// <summary>Identifier of the atomic rule being checked against the data.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Identifier of the atomic rule being checked against the data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RuleId", DataType="String64")]
        public string RuleId {
            get {
                return this.ruleIdField;
            }
            set {
                this.ruleIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Human-readable name of the atomic rule being checked against the data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Human-readable name of the atomic rule being checked against the data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RuleName", DataType="String2000")]
        public string RuleName {
            get {
                return this.ruleNameField;
            }
            set {
                this.ruleNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.  The meaning of this field should be standardized within a company to maximize its utility.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Severity of the failure. This could be used to indicate that a rule is a high-priority rule whose failure is considered as severe or could be used to indicate just how badly a rule was contravened.  The meaning of this field should be standardized within a company to maximize its utility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Severity", DataType="String64")]
        public string Severity {
            get {
                return this.severityField;
            }
            set {
                this.severityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>This allows extending the FailingRule class with as many arbitrary name-value pairs as is required at run-time.  Uses for this might include why the rule failed or by how much.</summary>
        [System.Xml.Serialization.XmlElementAttribute("FailingRuleExtensions")]
        [System.ComponentModel.DescriptionAttribute("This allows extending the FailingRule class with as many arbitrary name-value pai" +
            "rs as is required at run-time.  Uses for this might include why the rule failed " +
            "or by how much.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FailingRuleExtensions", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] FailingRuleExtensions {
            get {
                return this.failingRuleExtensionsField;
            }
            set {
                this.failingRuleExtensionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ParameterTemplate {
        
        private ParameterKind[] allowedKindField;
        
        private bool isInputField;
        
        private string[] keyConstraintField;
        
        private bool isOutputField;
        
        private string titleField;
        
        private string dataObjectContentTypeField;
        
        private long maxOccursField;
        
        private long minOccursField;
        
        private string constraintField;
        
        private AbstractActivityParameter[] defaultValueField;
        
        /// <remarks/>
        /// <summary>If no allowed type is given, then all kind of datatypes is allowed.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AllowedKind")]
        [System.ComponentModel.DescriptionAttribute("If no allowed type is given, then all kind of datatypes is allowed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AllowedKind", DataType="ParameterKind")]
        public ParameterKind[] AllowedKind {
            get {
                return this.allowedKindField;
            }
            set {
                this.allowedKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates if the parameter is an input of the activity. If the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Indicates if the parameter is an input of the activity. If the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsInput", DataType="boolean")]
        public bool IsInput {
            get {
                return this.isInputField;
            }
            set {
                this.isInputField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Allows to indicate that, in the same activity, this parameter template must be associated to another parameter template identified by its title.</summary>
        [System.Xml.Serialization.XmlElementAttribute("KeyConstraint")]
        [System.ComponentModel.DescriptionAttribute("Allows to indicate that, in the same activity, this parameter template must be as" +
            "sociated to another parameter template identified by its title.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KeyConstraint", DataType="String2000")]
        public string[] KeyConstraint {
            get {
                return this.keyConstraintField;
            }
            set {
                this.keyConstraintField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates if the parameter is an output of the activity. If the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Indicates if the parameter is an output of the activity. If the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsOutput", DataType="boolean")]
        public bool IsOutput {
            get {
                return this.isOutputField;
            }
            set {
                this.isOutputField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the parameter in the activity. Key to identify parameter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Name of the parameter in the activity. Key to identify parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="String2000")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When parameter is limited to data object of given types, describe the allowed types. Used only when ParameterType is dataObject</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("When parameter is limited to data object of given types, describe the allowed typ" +
            "es. Used only when ParameterType is dataObject")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObjectContentType", DataType="String2000")]
        public string DataObjectContentType {
            get {
                return this.dataObjectContentTypeField;
            }
            set {
                this.dataObjectContentTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum number of parameters of this type allowed in the activity. If the maximum number of parameters is infinite, use -1 value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Maximum number of parameters of this type allowed in the activity. If the maximum" +
            " number of parameters is infinite, use -1 value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxOccurs", DataType="long")]
        public long MaxOccurs {
            get {
                return this.maxOccursField;
            }
            set {
                this.maxOccursField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum number of parameter of this type required by the activity. If the minimum number of parameters is infinite, use -1 value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Minimum number of parameter of this type required by the activity. If the minimum" +
            " number of parameters is infinite, use -1 value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinOccurs", DataType="long")]
        public long MinOccurs {
            get {
                return this.minOccursField;
            }
            set {
                this.minOccursField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Textual description of additional constraint associated with the parameter. (note that it will be better to have a formal description of the constraint)</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Textual description of additional constraint associated with the parameter. (note" +
            " that it will be better to have a formal description of the constraint)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Constraint", DataType="String2000")]
        public string Constraint {
            get {
                return this.constraintField;
            }
            set {
                this.constraintField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DefaultValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DefaultValue", DataType="AbstractActivityParameter")]
        public AbstractActivityParameter[] DefaultValue {
            get {
                return this.defaultValueField;
            }
            set {
                this.defaultValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ParameterKind {
        
        /// <remarks/>
        dataObject,
        
        /// <remarks/>
        @double,
        
        /// <remarks/>
        integer,
        
        /// <remarks/>
        @string,
        
        /// <remarks/>
        timestamp,
        
        /// <remarks/>
        subActivity,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataObjectParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameter))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractActivityParameter {
        
        private string titleField;
        
        private long indexField;
        
        private bool indexFieldSpecified;
        
        private string selectionField;
        
        private AbstractParameterKey[] keyField;
        
        /// <remarks/>
        /// <summary>Name of the parameter, used to identify it in the activity. Must have an equivalent in the activity descriptor parameters.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Name of the parameter, used to identify it in the activity. Must have an equivale" +
            "nt in the activity descriptor parameters.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="String2000")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When parameter is an array, used to indicate the index in the array</summary>
        [System.ComponentModel.DescriptionAttribute("When parameter is an array, used to indicate the index in the array")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="long")]
        public long Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                this.indexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Textual description about how this parameter was selected.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Textual description about how this parameter was selected.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Selection", DataType="String2000")]
        public string Selection {
            get {
                return this.selectionField;
            }
            set {
                this.selectionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Key")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Key", DataType="AbstractParameterKey")]
        public AbstractParameterKey[] Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectParameterKey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameterKey))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractParameterKey {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ObjectParameterKey : AbstractParameterKey {
        
        private DataObjectReference dataObjectField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObject", DataType="DataObjectReference")]
        public DataObjectReference DataObject {
            get {
                return this.dataObjectField;
            }
            set {
                this.dataObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeIndexParameterKey : AbstractParameterKey {
        
        private TimeIndex timeIndexField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeIndex {
        
        private long indexField;
        
        private DataObjectReference timeSeriesField;
        
        /// <remarks/>
        /// <summary>The index of the time in the time series.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index of the time in the time series.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="NonNegativeLong")]
        public long Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSeries", DataType="DataObjectReference")]
        public DataObjectReference TimeSeries {
            get {
                return this.timeSeriesField;
            }
            set {
                this.timeSeriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DataObjectParameter : AbstractActivityParameter {
        
        private DataObjectReference dataObjectField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObject", DataType="DataObjectReference")]
        public DataObjectReference DataObject {
            get {
                return this.dataObjectField;
            }
            set {
                this.dataObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class StringParameter : AbstractActivityParameter {
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>String value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("String value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="String2000")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class IntegerQuantityParameter : AbstractActivityParameter {
        
        private long valueField;
        
        /// <remarks/>
        /// <summary>Integer value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Integer value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="long")]
        public long Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DoubleQuantityParameter : AbstractActivityParameter {
        
        private double valueField;
        
        private Energistics.DataAccess.ExtensibleEnum<UnitOfMeasure> uomField;
        
        private DataObjectReference customUnitDictionaryField;
        
        /// <remarks/>
        /// <summary>Double value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Double value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="double")]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measure associated with the value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure associated with the value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uom", DataType="UnitOfMeasureExt")]
        public Energistics.DataAccess.ExtensibleEnum<UnitOfMeasure> Uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomUnitDictionary", DataType="DataObjectReference")]
        public DataObjectReference CustomUnitDictionary {
            get {
                return this.customUnitDictionaryField;
            }
            set {
                this.customUnitDictionaryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeIndexParameter : AbstractActivityParameter {
        
        private TimeIndex timeIndexField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class TimeSeriesParentage {
        
        private bool hasOverlapField;
        
        private TimeIndex parentTimeIndexField;
        
        /// <remarks/>
        /// <summary>Used to indicate that a time series overlaps with its parent time series, e.g., as may be done for simulation studies, where the end state of one calculation is the initial state of the next.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Used to indicate that a time series overlaps with its parent time series, e.g., a" +
            "s may be done for simulation studies, where the end state of one calculation is " +
            "the initial state of the next.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HasOverlap", DataType="boolean")]
        public bool HasOverlap {
            get {
                return this.hasOverlapField;
            }
            set {
                this.hasOverlapField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentTimeIndex", DataType="TimeIndex")]
        public TimeIndex ParentTimeIndex {
            get {
                return this.parentTimeIndexField;
            }
            set {
                this.parentTimeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GeologicTime {
        
        private long ageOffsetAttributeField;
        
        private bool ageOffsetAttributeFieldSpecified;
        
        private System.DateTime dateTimeField;
        
        /// <remarks/>
        /// <summary>A Value in Years of the Age Offset between the DateTime Attribute value and the DateTime of a GeologicalEvent Occurrence. This value must be POSITIVE when it represents a Geological Event in The past.</summary>
        [System.ComponentModel.DescriptionAttribute("A Value in Years of the Age Offset between the DateTime Attribute value and the D" +
            "ateTime of a GeologicalEvent Occurrence. This value must be POSITIVE when it rep" +
            "resents a Geological Event in The past.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AgeOffsetAttribute", DataType="long")]
        public long AgeOffsetAttribute {
            get {
                return this.ageOffsetAttributeField;
            }
            set {
                this.ageOffsetAttributeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AgeOffsetAttributeSpecified {
            get {
                return this.ageOffsetAttributeFieldSpecified;
            }
            set {
                this.ageOffsetAttributeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A date, which can be represented according to the W3CDTF format.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A date, which can be represented according to the W3CDTF format.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateTime", DataType="dateTime")]
        public System.DateTime DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class WellboreMarkerSet : AbstractObject {
        
        private MdInterval markerSetIntervalField;
        
        private DataObjectReference wellboreField;
        
        private WellboreMarker[] formationMarkerField;
        
        /// <remarks/>
        /// <summary>Measured depth interval that contains the shallowest and deepest formation markers. This is computed by the server and is read only.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Measured depth interval that contains the shallowest and deepest formation marker" +
            "s. This is computed by the server and is read only.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MarkerSetInterval", DataType="MdInterval")]
        public MdInterval MarkerSetInterval {
            get {
                return this.markerSetIntervalField;
            }
            set {
                this.markerSetIntervalField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FormationMarker")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationMarker", DataType="WellboreMarker")]
        public WellboreMarker[] FormationMarker {
            get {
                return this.formationMarkerField;
            }
            set {
                this.formationMarkerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class WellboreMarker : AbstractObject {
        
        private GeochronologicalUnit chronostratigraphicTopField;
        
        private LithostratigraphicUnit lithostratigraphicTopField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private PlaneAngleMeasure dipAngleField;
        
        private PlaneAngleMeasure dipDirectionField;
        
        private DataObjectReference trajectoryField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>The name of a geochronology for this marker, with the "kind" attribute specifying the geochronological time span.</summary>
        [System.ComponentModel.DescriptionAttribute("The name of a geochronology for this marker, with the \"kind\" attribute specifying" +
            " the geochronological time span.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChronostratigraphicTop", DataType="GeochronologicalUnit")]
        public GeochronologicalUnit ChronostratigraphicTop {
            get {
                return this.chronostratigraphicTopField;
            }
            set {
                this.chronostratigraphicTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Specifies the unit of lithostratigraphy.</summary>
        [System.ComponentModel.DescriptionAttribute("Specifies the unit of lithostratigraphy.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithostratigraphicTop", DataType="LithostratigraphicUnit")]
        public LithostratigraphicUnit LithostratigraphicTop {
            get {
                return this.lithostratigraphicTopField;
            }
            set {
                this.lithostratigraphicTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Logged measured depth at the top of marker.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Logged measured depth at the top of marker.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Logged true vertical depth at top of marker.</summary>
        [System.ComponentModel.DescriptionAttribute("Logged true vertical depth at top of marker.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Angle of dip with respect to horizontal.</summary>
        [System.ComponentModel.DescriptionAttribute("Angle of dip with respect to horizontal.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DipAngle", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure DipAngle {
            get {
                return this.dipAngleField;
            }
            set {
                this.dipAngleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Interpreted downdip direction.</summary>
        [System.ComponentModel.DescriptionAttribute("Interpreted downdip direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DipDirection", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure DipDirection {
            get {
                return this.dipDirectionField;
            }
            set {
                this.dipDirectionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Trajectory", DataType="DataObjectReference")]
        public DataObjectReference Trajectory {
            get {
                return this.trajectoryField;
            }
            set {
                this.trajectoryField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class WellboreCompletion : AbstractObject {
        
        private string nameWellCompletionField;
        
        private string wellboreCompletionNoField;
        
        private string wellboreCompletionAliasField;
        
        private EventInfo[] eventHistoryField;
        
        private Energistics.DataAccess.Timestamp wellboreCompletionDateField;
        
        private string suffixAPIField;
        
        private MdInterval completionMdIntervalField;
        
        private TvdInterval completionTvdIntervalField;
        
        private CompletionStatus currentStatusField;
        
        private bool currentStatusFieldSpecified;
        
        private Energistics.DataAccess.Timestamp statusDateField;
        
        private CompletionStatusHistory[] statusHistoryField;
        
        private ContactIntervalSet contactIntervalSetField;
        
        private DataObjectReference referenceWellboreField;
        
        private DataObjectReference wellCompletionField;
        
        /// <remarks/>
        /// <summary>Human-recognizable context for the well completion that contains the completion.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Human-recognizable context for the well completion that contains the completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameWellCompletion", DataType="String64")]
        public string NameWellCompletion {
            get {
                return this.nameWellCompletionField;
            }
            set {
                this.nameWellCompletionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>CompletionNo, etc. API14.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("CompletionNo, etc. API14.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreCompletionNo", DataType="String64")]
        public string WellboreCompletionNo {
            get {
                return this.wellboreCompletionNoField;
            }
            set {
                this.wellboreCompletionNoField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Preferred alias name.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Preferred alias name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreCompletionAlias", DataType="String64")]
        public string WellboreCompletionAlias {
            get {
                return this.wellboreCompletionAliasField;
            }
            set {
                this.wellboreCompletionAliasField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The WellboreCompletion event information.</summary>
        [System.Xml.Serialization.XmlElementAttribute("EventHistory")]
        [System.ComponentModel.DescriptionAttribute("The WellboreCompletion event information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventHistory", DataType="EventInfo")]
        public EventInfo[] EventHistory {
            get {
                return this.eventHistoryField;
            }
            set {
                this.eventHistoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Completion date.</summary>
        [System.ComponentModel.DescriptionAttribute("Completion date.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreCompletionDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp WellboreCompletionDate {
            get {
                return this.wellboreCompletionDateField;
            }
            set {
                this.wellboreCompletionDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>API suffix.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("API suffix.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SuffixAPI", DataType="String64")]
        public string SuffixAPI {
            get {
                return this.suffixAPIField;
            }
            set {
                this.suffixAPIField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Overall measured depth interval for this wellbore completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Overall measured depth interval for this wellbore completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CompletionMdInterval", DataType="MdInterval")]
        public MdInterval CompletionMdInterval {
            get {
                return this.completionMdIntervalField;
            }
            set {
                this.completionMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Overall true vertical depth interval for this wellbore completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Overall true vertical depth interval for this wellbore completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CompletionTvdInterval", DataType="TvdInterval")]
        public TvdInterval CompletionTvdInterval {
            get {
                return this.completionTvdIntervalField;
            }
            set {
                this.completionTvdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Status (active, planned, suspended, testing, etc.) of the wellbore completion</summary>
        [System.ComponentModel.DescriptionAttribute("Status (active, planned, suspended, testing, etc.) of the wellbore completion")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurrentStatus", DataType="CompletionStatus")]
        public CompletionStatus CurrentStatus {
            get {
                return this.currentStatusField;
            }
            set {
                this.currentStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CurrentStatusSpecified {
            get {
                return this.currentStatusFieldSpecified;
            }
            set {
                this.currentStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date for when the status was established.</summary>
        [System.ComponentModel.DescriptionAttribute("Date for when the status was established.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StatusDate {
            get {
                return this.statusDateField;
            }
            set {
                this.statusDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StatusHistory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusHistory", DataType="CompletionStatusHistory")]
        public CompletionStatusHistory[] StatusHistory {
            get {
                return this.statusHistoryField;
            }
            set {
                this.statusHistoryField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContactIntervalSet", DataType="ContactIntervalSet")]
        public ContactIntervalSet ContactIntervalSet {
            get {
                return this.contactIntervalSetField;
            }
            set {
                this.contactIntervalSetField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferenceWellbore", DataType="DataObjectReference")]
        public DataObjectReference ReferenceWellbore {
            get {
                return this.referenceWellboreField;
            }
            set {
                this.referenceWellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellCompletion", DataType="DataObjectReference")]
        public DataObjectReference WellCompletion {
            get {
                return this.wellCompletionField;
            }
            set {
                this.wellCompletionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class WellCompletion : AbstractObject {
        
        private string fieldIDField;
        
        private string fieldCodeField;
        
        private string fieldTypeField;
        
        private Energistics.DataAccess.Timestamp effectiveDateField;
        
        private Energistics.DataAccess.Timestamp expiredDateField;
        
        private string e_P_RightsIDField;
        
        private CompletionStatus currentStatusField;
        
        private bool currentStatusFieldSpecified;
        
        private Energistics.DataAccess.Timestamp statusDateField;
        
        private CompletionStatusHistory[] statusHistoryField;
        
        private DataObjectReference wellField;
        
        /// <remarks/>
        /// <summary>Field ID.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Field ID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FieldID", DataType="String64")]
        public string FieldID {
            get {
                return this.fieldIDField;
            }
            set {
                this.fieldIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Field code.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Field code.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FieldCode", DataType="String64")]
        public string FieldCode {
            get {
                return this.fieldCodeField;
            }
            set {
                this.fieldCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Field type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Field type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FieldType", DataType="String64")]
        public string FieldType {
            get {
                return this.fieldTypeField;
            }
            set {
                this.fieldTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Field date.</summary>
        [System.ComponentModel.DescriptionAttribute("Field date.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EffectiveDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp EffectiveDate {
            get {
                return this.effectiveDateField;
            }
            set {
                this.effectiveDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Expiration date.</summary>
        [System.ComponentModel.DescriptionAttribute("Expiration date.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExpiredDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp ExpiredDate {
            get {
                return this.expiredDateField;
            }
            set {
                this.expiredDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Documents exploration and production rights.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Documents exploration and production rights.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("E_P_RightsID", DataType="String64")]
        public string E_P_RightsID {
            get {
                return this.e_P_RightsIDField;
            }
            set {
                this.e_P_RightsIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Status (active, planned, suspended, testing, etc.) of the well completion.</summary>
        [System.ComponentModel.DescriptionAttribute("Status (active, planned, suspended, testing, etc.) of the well completion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CurrentStatus", DataType="CompletionStatus")]
        public CompletionStatus CurrentStatus {
            get {
                return this.currentStatusField;
            }
            set {
                this.currentStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CurrentStatusSpecified {
            get {
                return this.currentStatusFieldSpecified;
            }
            set {
                this.currentStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Timestamp for when this status was established.</summary>
        [System.ComponentModel.DescriptionAttribute("Timestamp for when this status was established.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StatusDate {
            get {
                return this.statusDateField;
            }
            set {
                this.statusDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StatusHistory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusHistory", DataType="CompletionStatusHistory")]
        public CompletionStatusHistory[] StatusHistory {
            get {
                return this.statusHistoryField;
            }
            set {
                this.statusHistoryField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Well", DataType="DataObjectReference")]
        public DataObjectReference Well {
            get {
                return this.wellField;
            }
            set {
                this.wellField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class ToolErrorTermSet : AbstractObject {
        
        private IscwsaAuthorizationData authorizationField;
        
        private IscwsaNomenclature nomenclatureField;
        
        private IscwsaErrorTerm[] errorTermField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Authorization", DataType="IscwsaAuthorizationData")]
        public IscwsaAuthorizationData Authorization {
            get {
                return this.authorizationField;
            }
            set {
                this.authorizationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nomenclature", DataType="IscwsaNomenclature")]
        public IscwsaNomenclature Nomenclature {
            get {
                return this.nomenclatureField;
            }
            set {
                this.nomenclatureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ErrorTerm")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ErrorTerm", DataType="IscwsaErrorTerm")]
        public IscwsaErrorTerm[] ErrorTerm {
            get {
                return this.errorTermField;
            }
            set {
                this.errorTermField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class SurveyProgram : AbstractObject {
        
        private long surveyVerField;
        
        private string engineerField;
        
        private string finalField;
        
        private SurveySection[] surveySectionField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>Survey version number, incremented every time the program is modified.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Survey version number, incremented every time the program is modified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurveyVer", DataType="NonNegativeLong")]
        public long SurveyVer {
            get {
                return this.surveyVerField;
            }
            set {
                this.surveyVerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the engineer.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the engineer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Engineer", DataType="String64")]
        public string Engineer {
            get {
                return this.engineerField;
            }
            set {
                this.engineerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is program  final or intermediate/preliminary?</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Is program  final or intermediate/preliminary?")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Final", DataType="String64")]
        public string Final {
            get {
                return this.finalField;
            }
            set {
                this.finalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SurveySection")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurveySection", DataType="SurveySection")]
        public SurveySection[] SurveySection {
            get {
                return this.surveySectionField;
            }
            set {
                this.surveySectionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class StimJobStage : AbstractObject {
        
        private long numberField;
        
        private bool numberFieldSpecified;
        
        private LengthMeasure fractureHeightField;
        
        private VolumePerVolumeMeasure percentPadField;
        
        private StimPerforationCluster[] stagePerforationClustersField;
        
        private VolumePerTimeMeasure avgBaseFluidReturnVolumeRateField;
        
        private ThermodynamicTemperatureMeasure avgBHStaticTemperatureField;
        
        private ThermodynamicTemperatureMeasure avgBHTreatingTemperatureField;
        
        private VolumePerTimeMeasure avgBottomholePumpedVolumeRateField;
        
        private LengthPerTimeMeasure avgConductivityField;
        
        private LengthMeasure avgFractureWidthField;
        
        private PowerMeasure avgHydraulicPowerField;
        
        private PressureMeasure avgPresAnnulusField;
        
        private PressureMeasure avgPresCasingField;
        
        private PressureMeasure avgPresSurfaceField;
        
        private PressureMeasure avgPresTubingField;
        
        private MassPerVolumeMeasure avgProppantConcBottomholeField;
        
        private MassPerVolumeMeasure avgProppantConcSurfaceField;
        
        private VolumePerTimeMeasure avgSlurryReturnVolumeRateField;
        
        private PressureMeasure breakDownPresField;
        
        private TimeMeasure closureDurationField;
        
        private PressureMeasure closurePresField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private LengthMeasure formationBreakLengthPerDayField;
        
        private string formationNameField;
        
        private MassMeasure formationProppantMassField;
        
        private ForcePerVolumeMeasure fractureGradientFinalField;
        
        private ForcePerVolumeMeasure fractureGradientInitialField;
        
        private LengthMeasure fractureLengthField;
        
        private PressureMeasure frictionPressureField;
        
        private PowerMeasure hhpOrderedCO2Field;
        
        private PowerMeasure hhpOrderedFluidField;
        
        private PowerMeasure hhpUsedCO2Field;
        
        private PowerMeasure hhpUsedFluidField;
        
        private PowerMeasure initialShutinPresField;
        
        private VolumePerTimeMeasure maxFluidVolumeRateAnnulusField;
        
        private VolumePerTimeMeasure maxFluidVolumeRateCasingField;
        
        private VolumePerTimeMeasure maxFluidVolumeRateTubingField;
        
        private PowerMeasure maxHydraulicPowerField;
        
        private PressureMeasure maxPresAnnulusField;
        
        private PressureMeasure maxPresCasingField;
        
        private PressureMeasure maxPresSurfaceField;
        
        private PressureMeasure maxPresTubingField;
        
        private MassPerVolumeMeasure maxProppantConcBottomholeField;
        
        private MassPerVolumeMeasure maxProppantConcSurfaceField;
        
        private MeasuredDepthCoord mdFormationBottomField;
        
        private MeasuredDepthCoord mdFormationTopField;
        
        private MeasuredDepthCoord mdOpenHoleBottomField;
        
        private MeasuredDepthCoord mdOpenHoleTopField;
        
        private PressureMeasure netPresField;
        
        private LengthMeasure openHoleDiameterField;
        
        private string openHoleNameField;
        
        private VolumePerVolumeMeasure percentProppantPumpedField;
        
        private long perfBallCountField;
        
        private bool perfBallCountFieldSpecified;
        
        private LengthMeasure perfBallSizeField;
        
        private MassPerVolumeMeasure perfProppantConcField;
        
        private LengthMeasure proppantHeightField;
        
        private bool screenedOutField;
        
        private bool screenedOutFieldSpecified;
        
        private PressureMeasure screenOutPresField;
        
        private string technologyTypeField;
        
        private MassMeasure totalProppantInFormationField;
        
        private TimeMeasure totalPumpTimeField;
        
        private VolumeMeasure totalVolumeField;
        
        private WellVerticalDepthCoord tvdFormationBottomField;
        
        private WellVerticalDepthCoord tvdFormationTopField;
        
        private WellVerticalDepthCoord tvdOpenHoleBottomField;
        
        private WellVerticalDepthCoord tvdOpenHoleTopField;
        
        private VolumeMeasure volumeBodyField;
        
        private VolumeMeasure volumeFlushField;
        
        private VolumeMeasure volumePadField;
        
        private string waterSourceField;
        
        private MassMeasure wellboreProppantMassField;
        
        private StimJobDiagnosticSession[] pdatSessionField;
        
        private StimShutInPressure[] shutInPresField;
        
        private StimEvent[] jobEventField;
        
        private StimJobStep[] jobStepField;
        
        private StimMaterialQuantity[] maxMaterialUsageRateField;
        
        private StimMaterialQuantity[] materialUsedField;
        
        private StimFlowPath flowPathField;
        
        private DataObjectReference[] stimStageLogField;
        
        private StimReservoirInterval[] reservoirIntervalField;
        
        private StimJobDiversion diversionField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The number associated with the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The number associated with the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Number", DataType="PositiveLong")]
        public long Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumberSpecified {
            get {
                return this.numberFieldSpecified;
            }
            set {
                this.numberFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The height of the fracture.</summary>
        [System.ComponentModel.DescriptionAttribute("The height of the fracture.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureHeight", DataType="LengthMeasure")]
        public LengthMeasure FractureHeight {
            get {
                return this.fractureHeightField;
            }
            set {
                this.fractureHeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The percentage of volume pumped used for the pad.</summary>
        [System.ComponentModel.DescriptionAttribute("The percentage of volume pumped used for the pad.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PercentPad", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure PercentPad {
            get {
                return this.percentPadField;
            }
            set {
                this.percentPadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Perforations added just before treating the stage.</summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [System.ComponentModel.DescriptionAttribute("Perforations added just before treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StagePerforationClusters", DataType="StimPerforationClusterSet")]
        public StimPerforationCluster[] StagePerforationClusters {
            get {
                return this.stagePerforationClustersField;
            }
            set {
                this.stagePerforationClustersField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average base fluid pumping rate of all steps for stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("Average base fluid pumping rate of all steps for stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgBaseFluidReturnVolumeRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure AvgBaseFluidReturnVolumeRate {
            get {
                return this.avgBaseFluidReturnVolumeRateField;
            }
            set {
                this.avgBaseFluidReturnVolumeRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average static temperature of the wellbore injection point(s) or formation at equilibrium (steady state) with no fluid or tool movement, allowing for equilibrium conditions at the wellbore injection point; (BHST: bottom hole static temperature.</summary>
        [System.ComponentModel.DescriptionAttribute("The average static temperature of the wellbore injection point(s) or formation at" +
            " equilibrium (steady state) with no fluid or tool movement, allowing for equilib" +
            "rium conditions at the wellbore injection point; (BHST: bottom hole static tempe" +
            "rature.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgBHStaticTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure AvgBHStaticTemperature {
            get {
                return this.avgBHStaticTemperatureField;
            }
            set {
                this.avgBHStaticTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average measured or calculated temperature of the wellbore during the treating with well fluid injection or circulation of the wellbore at the point of interest. Point of interest is generally the injection point or region of interest for the test or treatment.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The average measured or calculated temperature of the wellbore during the treating with well fluid injection or circulation of the wellbore at the point of interest. Point of interest is generally the injection point or region of interest for the test or treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgBHTreatingTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure AvgBHTreatingTemperature {
            get {
                return this.avgBHTreatingTemperatureField;
            }
            set {
                this.avgBHTreatingTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average bottomhole treatment flow rate.</summary>
        [System.ComponentModel.DescriptionAttribute("Average bottomhole treatment flow rate.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgBottomholePumpedVolumeRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure AvgBottomholePumpedVolumeRate {
            get {
                return this.avgBottomholePumpedVolumeRateField;
            }
            set {
                this.avgBottomholePumpedVolumeRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average conductivity of a fracture created during the treatment supported by proppant during the stimulation services Hydraulic conductivity, symbolically represented as K, is a property of vascular plants, soil or rock, that describes the ease with which water can move through pore spaces or fractures. It depends on the intrinsic permeability of the material and on the degree of saturation. Saturated hydraulic conductivity, Ksat, describes water movement through saturated media.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Average conductivity of a fracture created during the treatment supported by proppant during the stimulation services Hydraulic conductivity, symbolically represented as K, is a property of vascular plants, soil or rock, that describes the ease with which water can move through pore spaces or fractures. It depends on the intrinsic permeability of the material and on the degree of saturation. Saturated hydraulic conductivity, Ksat, describes water movement through saturated media.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgConductivity", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure AvgConductivity {
            get {
                return this.avgConductivityField;
            }
            set {
                this.avgConductivityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average fracture width created during the treatment of the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Average fracture width created during the treatment of the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgFractureWidth", DataType="LengthMeasure")]
        public LengthMeasure AvgFractureWidth {
            get {
                return this.avgFractureWidthField;
            }
            set {
                this.avgFractureWidthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average hydraulic horse power used.</summary>
        [System.ComponentModel.DescriptionAttribute("Average hydraulic horse power used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgHydraulicPower", DataType="PowerMeasure")]
        public PowerMeasure AvgHydraulicPower {
            get {
                return this.avgHydraulicPowerField;
            }
            set {
                this.avgHydraulicPowerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average annulus pressure for any step for the stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("The average annulus pressure for any step for the stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPresAnnulus", DataType="PressureMeasure")]
        public PressureMeasure AvgPresAnnulus {
            get {
                return this.avgPresAnnulusField;
            }
            set {
                this.avgPresAnnulusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average casing pressure of any step for the stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("The average casing pressure of any step for the stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPresCasing", DataType="PressureMeasure")]
        public PressureMeasure AvgPresCasing {
            get {
                return this.avgPresCasingField;
            }
            set {
                this.avgPresCasingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average pressure for treating the stage across all steps.</summary>
        [System.ComponentModel.DescriptionAttribute("The average pressure for treating the stage across all steps.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPresSurface", DataType="PressureMeasure")]
        public PressureMeasure AvgPresSurface {
            get {
                return this.avgPresSurfaceField;
            }
            set {
                this.avgPresSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average tubing pressure of any step for the stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("The average tubing pressure of any step for the stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgPresTubing", DataType="PressureMeasure")]
        public PressureMeasure AvgPresTubing {
            get {
                return this.avgPresTubingField;
            }
            set {
                this.avgPresTubingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average proppant concentration at the bottom of the hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The average proppant concentration at the bottom of the hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgProppantConcBottomhole", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AvgProppantConcBottomhole {
            get {
                return this.avgProppantConcBottomholeField;
            }
            set {
                this.avgProppantConcBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average proppant concentration on the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("The average proppant concentration on the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgProppantConcSurface", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure AvgProppantConcSurface {
            get {
                return this.avgProppantConcSurfaceField;
            }
            set {
                this.avgProppantConcSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The average slurry return rate of all steps for the stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("The average slurry return rate of all steps for the stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgSlurryReturnVolumeRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure AvgSlurryReturnVolumeRate {
            get {
                return this.avgSlurryReturnVolumeRateField;
            }
            set {
                this.avgSlurryReturnVolumeRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The pressure at which the formation fractures and accepts injected fluid.</summary>
        [System.ComponentModel.DescriptionAttribute("The pressure at which the formation fractures and accepts injected fluid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BreakDownPres", DataType="PressureMeasure")]
        public PressureMeasure BreakDownPres {
            get {
                return this.breakDownPresField;
            }
            set {
                this.breakDownPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Delta time recorded for the closure of the fracture to occur during the stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("Delta time recorded for the closure of the fracture to occur during the stage tre" +
            "atment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClosureDuration", DataType="TimeMeasure")]
        public TimeMeasure ClosureDuration {
            get {
                return this.closureDurationField;
            }
            set {
                this.closureDurationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An analysis parameter used in hydraulic fracture design to indicate the pressure at which the fracture effectively closes without proppant in place.</summary>
        [System.ComponentModel.DescriptionAttribute("An analysis parameter used in hydraulic fracture design to indicate the pressure " +
            "at which the fracture effectively closes without proppant in place.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClosurePres", DataType="PressureMeasure")]
        public PressureMeasure ClosurePres {
            get {
                return this.closurePresField;
            }
            set {
                this.closurePresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ending date and time for the stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("Ending date and time for the stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Starting date and time for the stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("Starting date and time for the stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The length of formation broken per day.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of formation broken per day.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationBreakLengthPerDay", DataType="LengthMeasure")]
        public LengthMeasure FormationBreakLengthPerDay {
            get {
                return this.formationBreakLengthPerDayField;
            }
            set {
                this.formationBreakLengthPerDayField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of the formation being stimulated.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("The name of the formation being stimulated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationName", DataType="String2000")]
        public string FormationName {
            get {
                return this.formationNameField;
            }
            set {
                this.formationNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The weight of proppant placed in the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("The weight of proppant placed in the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormationProppantMass", DataType="MassMeasure")]
        public MassMeasure FormationProppantMass {
            get {
                return this.formationProppantMassField;
            }
            set {
                this.formationProppantMassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation fracture gradient for the stage after treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("The formation fracture gradient for the stage after treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureGradientFinal", DataType="ForcePerVolumeMeasure")]
        public ForcePerVolumeMeasure FractureGradientFinal {
            get {
                return this.fractureGradientFinalField;
            }
            set {
                this.fractureGradientFinalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The formation fracture gradient for stage before treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("The formation fracture gradient for stage before treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureGradientInitial", DataType="ForcePerVolumeMeasure")]
        public ForcePerVolumeMeasure FractureGradientInitial {
            get {
                return this.fractureGradientInitialField;
            }
            set {
                this.fractureGradientInitialField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The length of the fracture created after treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The length of the fracture created after treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FractureLength", DataType="LengthMeasure")]
        public LengthMeasure FractureLength {
            get {
                return this.fractureLengthField;
            }
            set {
                this.fractureLengthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Friction pressure loss.</summary>
        [System.ComponentModel.DescriptionAttribute("Friction pressure loss.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionPressure", DataType="PressureMeasure")]
        public PressureMeasure FrictionPressure {
            get {
                return this.frictionPressureField;
            }
            set {
                this.frictionPressureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Carbon dioxide hydraulic horsepower ordered for the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Carbon dioxide hydraulic horsepower ordered for the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HhpOrderedCO2", DataType="PowerMeasure")]
        public PowerMeasure HhpOrderedCO2 {
            get {
                return this.hhpOrderedCO2Field;
            }
            set {
                this.hhpOrderedCO2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid hydraulic horsepower ordered for the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid hydraulic horsepower ordered for the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HhpOrderedFluid", DataType="PowerMeasure")]
        public PowerMeasure HhpOrderedFluid {
            get {
                return this.hhpOrderedFluidField;
            }
            set {
                this.hhpOrderedFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Carbon dioxide hydraulic horsepower actually used for the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Carbon dioxide hydraulic horsepower actually used for the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HhpUsedCO2", DataType="PowerMeasure")]
        public PowerMeasure HhpUsedCO2 {
            get {
                return this.hhpUsedCO2Field;
            }
            set {
                this.hhpUsedCO2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluid hydraulic horsepower actually used for the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluid hydraulic horsepower actually used for the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HhpUsedFluid", DataType="PowerMeasure")]
        public PowerMeasure HhpUsedFluid {
            get {
                return this.hhpUsedFluidField;
            }
            set {
                this.hhpUsedFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The initial shut-in pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The initial shut-in pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InitialShutinPres", DataType="PowerMeasure")]
        public PowerMeasure InitialShutinPres {
            get {
                return this.initialShutinPresField;
            }
            set {
                this.initialShutinPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum annulus fluid pumping rate of any step while treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum annulus fluid pumping rate of any step while treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxFluidVolumeRateAnnulus", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure MaxFluidVolumeRateAnnulus {
            get {
                return this.maxFluidVolumeRateAnnulusField;
            }
            set {
                this.maxFluidVolumeRateAnnulusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum casing fluid pumping rate of any step while treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum casing fluid pumping rate of any step while treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxFluidVolumeRateCasing", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure MaxFluidVolumeRateCasing {
            get {
                return this.maxFluidVolumeRateCasingField;
            }
            set {
                this.maxFluidVolumeRateCasingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum tubing fluid pumping rate of any step while treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum tubing fluid pumping rate of any step while treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxFluidVolumeRateTubing", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure MaxFluidVolumeRateTubing {
            get {
                return this.maxFluidVolumeRateTubingField;
            }
            set {
                this.maxFluidVolumeRateTubingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum hydraulic horse power used for the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum hydraulic horse power used for the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxHydraulicPower", DataType="PowerMeasure")]
        public PowerMeasure MaxHydraulicPower {
            get {
                return this.maxHydraulicPowerField;
            }
            set {
                this.maxHydraulicPowerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The highest annulus pressure of any step while treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The highest annulus pressure of any step while treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxPresAnnulus", DataType="PressureMeasure")]
        public PressureMeasure MaxPresAnnulus {
            get {
                return this.maxPresAnnulusField;
            }
            set {
                this.maxPresAnnulusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The highest casing pressure of any step while treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The highest casing pressure of any step while treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxPresCasing", DataType="PressureMeasure")]
        public PressureMeasure MaxPresCasing {
            get {
                return this.maxPresCasingField;
            }
            set {
                this.maxPresCasingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum surface pressure during treatment of the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum surface pressure during treatment of the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxPresSurface", DataType="PressureMeasure")]
        public PressureMeasure MaxPresSurface {
            get {
                return this.maxPresSurfaceField;
            }
            set {
                this.maxPresSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The highest tubing pressure of any step while treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The highest tubing pressure of any step while treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxPresTubing", DataType="PressureMeasure")]
        public PressureMeasure MaxPresTubing {
            get {
                return this.maxPresTubingField;
            }
            set {
                this.maxPresTubingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum proppant concentration at the bottom of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum proppant concentration at the bottom of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxProppantConcBottomhole", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure MaxProppantConcBottomhole {
            get {
                return this.maxProppantConcBottomholeField;
            }
            set {
                this.maxProppantConcBottomholeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum proppant concentration on the surface.</summary>
        [System.ComponentModel.DescriptionAttribute("The maximum proppant concentration on the surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxProppantConcSurface", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure MaxProppantConcSurface {
            get {
                return this.maxProppantConcSurfaceField;
            }
            set {
                this.maxProppantConcSurfaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the bottom of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the bottom of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdFormationBottom", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdFormationBottom {
            get {
                return this.mdFormationBottomField;
            }
            set {
                this.mdFormationBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the top of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the top of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdFormationTop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdFormationTop {
            get {
                return this.mdFormationTopField;
            }
            set {
                this.mdFormationTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the bottom open hole.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the bottom open hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdOpenHoleBottom", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdOpenHoleBottom {
            get {
                return this.mdOpenHoleBottomField;
            }
            set {
                this.mdOpenHoleBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the top open hole.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the top open hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdOpenHoleTop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdOpenHoleTop {
            get {
                return this.mdOpenHoleTopField;
            }
            set {
                this.mdOpenHoleTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The difference between the pressure which holds a fracture closed (minimal principal stress) and that pressure which is necessary to open the fracture.</summary>
        [System.ComponentModel.DescriptionAttribute("The difference between the pressure which holds a fracture closed (minimal princi" +
            "pal stress) and that pressure which is necessary to open the fracture.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NetPres", DataType="PressureMeasure")]
        public PressureMeasure NetPres {
            get {
                return this.netPresField;
            }
            set {
                this.netPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The diameter of the open hole.</summary>
        [System.ComponentModel.DescriptionAttribute("The diameter of the open hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpenHoleDiameter", DataType="LengthMeasure")]
        public LengthMeasure OpenHoleDiameter {
            get {
                return this.openHoleDiameterField;
            }
            set {
                this.openHoleDiameterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A name for the open hole. To be used for open hole completions.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("A name for the open hole. To be used for open hole completions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OpenHoleName", DataType="String2000")]
        public string OpenHoleName {
            get {
                return this.openHoleNameField;
            }
            set {
                this.openHoleNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total proppant mass used as a percent of the design mass.</summary>
        [System.ComponentModel.DescriptionAttribute("Total proppant mass used as a percent of the design mass.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PercentProppantPumped", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure PercentProppantPumped {
            get {
                return this.percentProppantPumpedField;
            }
            set {
                this.percentProppantPumpedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total number of perforation balls used while treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("Total number of perforation balls used while treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerfBallCount", DataType="NonNegativeLong")]
        public long PerfBallCount {
            get {
                return this.perfBallCountField;
            }
            set {
                this.perfBallCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PerfBallCountSpecified {
            get {
                return this.perfBallCountFieldSpecified;
            }
            set {
                this.perfBallCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the perforation balls used while treating the stage</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the perforation balls used while treating the stage")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerfBallSize", DataType="LengthMeasure")]
        public LengthMeasure PerfBallSize {
            get {
                return this.perfBallSizeField;
            }
            set {
                this.perfBallSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The proppant concentration at the perforations.</summary>
        [System.ComponentModel.DescriptionAttribute("The proppant concentration at the perforations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerfProppantConc", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure PerfProppantConc {
            get {
                return this.perfProppantConcField;
            }
            set {
                this.perfProppantConcField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The proppant height.</summary>
        [System.ComponentModel.DescriptionAttribute("The proppant height.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProppantHeight", DataType="LengthMeasure")]
        public LengthMeasure ProppantHeight {
            get {
                return this.proppantHeightField;
            }
            set {
                this.proppantHeightField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Did screen out occur? True ("true" or "1") indicates that screen out occurred. False ("false" or "0") or not given indicates otherwise.</summary>
        [System.ComponentModel.DescriptionAttribute("Did screen out occur? True (\"true\" or \"1\") indicates that screen out occurred. Fa" +
            "lse (\"false\" or \"0\") or not given indicates otherwise.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ScreenedOut", DataType="boolean")]
        public bool ScreenedOut {
            get {
                return this.screenedOutField;
            }
            set {
                this.screenedOutField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ScreenedOutSpecified {
            get {
                return this.screenedOutFieldSpecified;
            }
            set {
                this.screenedOutFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The screen out pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("The screen out pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ScreenOutPres", DataType="PressureMeasure")]
        public PressureMeasure ScreenOutPres {
            get {
                return this.screenOutPresField;
            }
            set {
                this.screenOutPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Text describing the technology used while pumping the stage.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Text describing the technology used while pumping the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TechnologyType", DataType="String64")]
        public string TechnologyType {
            get {
                return this.technologyTypeField;
            }
            set {
                this.technologyTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total amount of proppant in the formation relative to the current stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The total amount of proppant in the formation relative to the current stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalProppantInFormation", DataType="MassMeasure")]
        public MassMeasure TotalProppantInFormation {
            get {
                return this.totalProppantInFormationField;
            }
            set {
                this.totalProppantInFormationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total pumping time for the treatment of the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The total pumping time for the treatment of the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalPumpTime", DataType="TimeMeasure")]
        public TimeMeasure TotalPumpTime {
            get {
                return this.totalPumpTimeField;
            }
            set {
                this.totalPumpTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total volume pumped for all steps while treating the stage.</summary>
        [System.ComponentModel.DescriptionAttribute("The total volume pumped for all steps while treating the stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalVolume", DataType="VolumeMeasure")]
        public VolumeMeasure TotalVolume {
            get {
                return this.totalVolumeField;
            }
            set {
                this.totalVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the bottom of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the bottom of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdFormationBottom", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdFormationBottom {
            get {
                return this.tvdFormationBottomField;
            }
            set {
                this.tvdFormationBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the top of the formation.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the top of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdFormationTop", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdFormationTop {
            get {
                return this.tvdFormationTopField;
            }
            set {
                this.tvdFormationTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the bottom open hole.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the bottom open hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdOpenHoleBottom", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdOpenHoleBottom {
            get {
                return this.tvdOpenHoleBottomField;
            }
            set {
                this.tvdOpenHoleBottomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the top open hole.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the top open hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdOpenHoleTop", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdOpenHoleTop {
            get {
                return this.tvdOpenHoleTopField;
            }
            set {
                this.tvdOpenHoleTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The volume pumped for the body portion of the stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("The volume pumped for the body portion of the stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeBody", DataType="VolumeMeasure")]
        public VolumeMeasure VolumeBody {
            get {
                return this.volumeBodyField;
            }
            set {
                this.volumeBodyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume pumped during flush portion of stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume pumped during flush portion of stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeFlush", DataType="VolumeMeasure")]
        public VolumeMeasure VolumeFlush {
            get {
                return this.volumeFlushField;
            }
            set {
                this.volumeFlushField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume pumped for pad portion of stage treatment.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume pumped for pad portion of stage treatment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumePad", DataType="VolumeMeasure")]
        public VolumeMeasure VolumePad {
            get {
                return this.volumePadField;
            }
            set {
                this.volumePadField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water source for fluid pumped during stage.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Water source for fluid pumped during stage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterSource", DataType="String2000")]
        public string WaterSource {
            get {
                return this.waterSourceField;
            }
            set {
                this.waterSourceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The weight of proppant left in the wellbore after pumping has stopped.</summary>
        [System.ComponentModel.DescriptionAttribute("The weight of proppant left in the wellbore after pumping has stopped.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreProppantMass", DataType="MassMeasure")]
        public MassMeasure WellboreProppantMass {
            get {
                return this.wellboreProppantMassField;
            }
            set {
                this.wellboreProppantMassField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PdatSession")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PdatSession", DataType="StimJobDiagnosticSession")]
        public StimJobDiagnosticSession[] PdatSession {
            get {
                return this.pdatSessionField;
            }
            set {
                this.pdatSessionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ShutInPres")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShutInPres", DataType="StimShutInPressure")]
        public StimShutInPressure[] ShutInPres {
            get {
                return this.shutInPresField;
            }
            set {
                this.shutInPresField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("JobEvent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobEvent", DataType="StimEvent")]
        public StimEvent[] JobEvent {
            get {
                return this.jobEventField;
            }
            set {
                this.jobEventField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("JobStep")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobStep", DataType="StimJobStep")]
        public StimJobStep[] JobStep {
            get {
                return this.jobStepField;
            }
            set {
                this.jobStepField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MaxMaterialUsageRate")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxMaterialUsageRate", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] MaxMaterialUsageRate {
            get {
                return this.maxMaterialUsageRateField;
            }
            set {
                this.maxMaterialUsageRateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MaterialUsed")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaterialUsed", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] MaterialUsed {
            get {
                return this.materialUsedField;
            }
            set {
                this.materialUsedField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowPath", DataType="StimFlowPath")]
        public StimFlowPath FlowPath {
            get {
                return this.flowPathField;
            }
            set {
                this.flowPathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StimStageLog")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StimStageLog", DataType="DataObjectReference")]
        public DataObjectReference[] StimStageLog {
            get {
                return this.stimStageLogField;
            }
            set {
                this.stimStageLogField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReservoirInterval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReservoirInterval", DataType="StimReservoirInterval")]
        public StimReservoirInterval[] ReservoirInterval {
            get {
                return this.reservoirIntervalField;
            }
            set {
                this.reservoirIntervalField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Diversion", DataType="StimJobDiversion")]
        public StimJobDiversion Diversion {
            get {
                return this.diversionField;
            }
            set {
                this.diversionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of StimJobStage.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of StimJobStage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class StimPerforationCluster : AbstractObject {
        
        private MdInterval mdPerforatedIntervalField;
        
        private TvdInterval tvdPerforatedIntervalField;
        
        private string typeField;
        
        private long perforationCountField;
        
        private bool perforationCountFieldSpecified;
        
        private LengthMeasure sizeField;
        
        private ReciprocalLengthMeasure densityPerforationField;
        
        private PlaneAngleMeasure phasingPerforationField;
        
        private double frictionFactorField;
        
        private bool frictionFactorFieldSpecified;
        
        private PressureMeasure frictionPresField;
        
        private double dischargeCoefficientField;
        
        private bool dischargeCoefficientFieldSpecified;
        
        /// <remarks/>
        /// <summary>Measured depths of the top and base perforation.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depths of the top and base perforation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdPerforatedInterval", DataType="MdInterval")]
        public MdInterval MdPerforatedInterval {
            get {
                return this.mdPerforatedIntervalField;
            }
            set {
                this.mdPerforatedIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the top and base perforation.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the top and base perforation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdPerforatedInterval", DataType="TvdInterval")]
        public TvdInterval TvdPerforatedInterval {
            get {
                return this.tvdPerforatedIntervalField;
            }
            set {
                this.tvdPerforatedIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of perforation and/or how the perforation was created.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The type of perforation and/or how the perforation was created.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="String64")]
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of perforations in this interval.</summary>
        [System.ComponentModel.DescriptionAttribute("The number of perforations in this interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationCount", DataType="NonNegativeLong")]
        public long PerforationCount {
            get {
                return this.perforationCountField;
            }
            set {
                this.perforationCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PerforationCountSpecified {
            get {
                return this.perforationCountFieldSpecified;
            }
            set {
                this.perforationCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The size of the perforations.</summary>
        [System.ComponentModel.DescriptionAttribute("The size of the perforations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Size", DataType="LengthMeasure")]
        public LengthMeasure Size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of perforation holes per length across the treatment interval.  Used to describe but not limited to the configuration of perforating guns or the placement of perforations (holes, slots, openings, etc.) in the wellbore, and is often abbreviated to spf (shots per foot).</summary>
        [System.ComponentModel.DescriptionAttribute(@"The number of perforation holes per length across the treatment interval.  Used to describe but not limited to the configuration of perforating guns or the placement of perforations (holes, slots, openings, etc.) in the wellbore, and is often abbreviated to spf (shots per foot).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensityPerforation", DataType="ReciprocalLengthMeasure")]
        public ReciprocalLengthMeasure DensityPerforation {
            get {
                return this.densityPerforationField;
            }
            set {
                this.densityPerforationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The radial distribution of successive perforations around the wellbore axis.  Radial distribution is commonly available in 0, 180 120, 90 and 60 degree phasing.</summary>
        [System.ComponentModel.DescriptionAttribute("The radial distribution of successive perforations around the wellbore axis.  Rad" +
            "ial distribution is commonly available in 0, 180 120, 90 and 60 degree phasing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhasingPerforation", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure PhasingPerforation {
            get {
                return this.phasingPerforationField;
            }
            set {
                this.phasingPerforationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The friction factor of each perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("The friction factor of each perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionFactor", DataType="double")]
        public double FrictionFactor {
            get {
                return this.frictionFactorField;
            }
            set {
                this.frictionFactorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FrictionFactorSpecified {
            get {
                return this.frictionFactorFieldSpecified;
            }
            set {
                this.frictionFactorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The friction pressure for the perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("The friction pressure for the perforation set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FrictionPres", DataType="PressureMeasure")]
        public PressureMeasure FrictionPres {
            get {
                return this.frictionPresField;
            }
            set {
                this.frictionPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A coefficient used in the equation for calculation of pressure drop across a perforation set.</summary>
        [System.ComponentModel.DescriptionAttribute("A coefficient used in the equation for calculation of pressure drop across a perf" +
            "oration set.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DischargeCoefficient", DataType="double")]
        public double DischargeCoefficient {
            get {
                return this.dischargeCoefficientField;
            }
            set {
                this.dischargeCoefficientField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DischargeCoefficientSpecified {
            get {
                return this.dischargeCoefficientFieldSpecified;
            }
            set {
                this.dischargeCoefficientFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class StimJob : AbstractObject {
        
        private PressureMeasure avgJobPresField;
        
        private ThermodynamicTemperatureMeasure bottomholeStaticTemperatureField;
        
        private string customerNameField;
        
        private Energistics.DataAccess.Timestamp dTimArrivalField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private PressureMeasure flowBackPresField;
        
        private VolumePerTimeMeasure flowBackRateField;
        
        private VolumeMeasure flowBackVolumeField;
        
        private VolumePerVolumeMeasure fluidEfficiencyField;
        
        private PowerMeasure hhpOrderedField;
        
        private PowerMeasure hhpUsedField;
        
        private StimPerforationCluster[] jobPerforationClustersField;
        
        private string kindField;
        
        private VolumePerTimeMeasure maxFluidRateField;
        
        private PressureMeasure maxJobPresField;
        
        private PIDXCommodityCode pIDXCommodityCodeField;
        
        private bool pIDXCommodityCodeFieldSpecified;
        
        private string serviceCompanyField;
        
        private long stageCountField;
        
        private bool stageCountFieldSpecified;
        
        private string supervisorField;
        
        private VolumeMeasure totalJobVolumeField;
        
        private MassMeasure totalProppantInFormationField;
        
        private MassMeasure totalProppantUsedField;
        
        private TimeMeasure totalPumpTimeField;
        
        private ThermodynamicTemperatureMeasure treatingBottomholeTemperatureField;
        
        private StimJobStage[] jobStageField;
        
        private StimMaterialQuantity[] materialUsedField;
        
        private DataObjectReference wellboreField;
        
        private StimJobMaterialCatalog materialCatalogField;
        
        private DataObjectReference[][] logCatalogField;
        
        /// <remarks/>
        /// <summary>Average pressure encountered during treatment of all stages.</summary>
        [System.ComponentModel.DescriptionAttribute("Average pressure encountered during treatment of all stages.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AvgJobPres", DataType="PressureMeasure")]
        public PressureMeasure AvgJobPres {
            get {
                return this.avgJobPresField;
            }
            set {
                this.avgJobPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bottomhole static temperature for the job.</summary>
        [System.ComponentModel.DescriptionAttribute("Bottomhole static temperature for the job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomholeStaticTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure BottomholeStaticTemperature {
            get {
                return this.bottomholeStaticTemperatureField;
            }
            set {
                this.bottomholeStaticTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Customer or company name.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Customer or company name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomerName", DataType="String2000")]
        public string CustomerName {
            get {
                return this.customerNameField;
            }
            set {
                this.customerNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time at which the stimulation contractor arrives on location.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time at which the stimulation contractor arrives on location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimArrival", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimArrival {
            get {
                return this.dTimArrivalField;
            }
            set {
                this.dTimArrivalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Ending date and time of the stimulation job.</summary>
        [System.ComponentModel.DescriptionAttribute("Ending date and time of the stimulation job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start date and time of the stimulation job.</summary>
        [System.ComponentModel.DescriptionAttribute("Start date and time of the stimulation job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure recorded on fluid returning to surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure recorded on fluid returning to surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowBackPres", DataType="PressureMeasure")]
        public PressureMeasure FlowBackPres {
            get {
                return this.flowBackPresField;
            }
            set {
                this.flowBackPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rate recorded on fluid returning to surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Rate recorded on fluid returning to surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowBackRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure FlowBackRate {
            get {
                return this.flowBackRateField;
            }
            set {
                this.flowBackRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Volume recorded on fluid returning to surface.</summary>
        [System.ComponentModel.DescriptionAttribute("Volume recorded on fluid returning to surface.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FlowBackVolume", DataType="VolumeMeasure")]
        public VolumeMeasure FlowBackVolume {
            get {
                return this.flowBackVolumeField;
            }
            set {
                this.flowBackVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Percentage of fluid volume in the fracture at the end of pumping.</summary>
        [System.ComponentModel.DescriptionAttribute("Percentage of fluid volume in the fracture at the end of pumping.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidEfficiency", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure FluidEfficiency {
            get {
                return this.fluidEfficiencyField;
            }
            set {
                this.fluidEfficiencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hydraulic horsepower ordered for the stimulation job.</summary>
        [System.ComponentModel.DescriptionAttribute("Hydraulic horsepower ordered for the stimulation job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HhpOrdered", DataType="PowerMeasure")]
        public PowerMeasure HhpOrdered {
            get {
                return this.hhpOrderedField;
            }
            set {
                this.hhpOrderedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hydraulic horsepower actually used for the stimulation job.</summary>
        [System.ComponentModel.DescriptionAttribute("Hydraulic horsepower actually used for the stimulation job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HhpUsed", DataType="PowerMeasure")]
        public PowerMeasure HhpUsed {
            get {
                return this.hhpUsedField;
            }
            set {
                this.hhpUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Perforation clusters existing before starting the job.</summary>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [System.ComponentModel.DescriptionAttribute("Perforation clusters existing before starting the job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobPerforationClusters", DataType="StimPerforationClusterSet")]
        public StimPerforationCluster[] JobPerforationClusters {
            get {
                return this.jobPerforationClustersField;
            }
            set {
                this.jobPerforationClustersField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of well stimulation job.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Type of well stimulation job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="String2000")]
        public string Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum job fluid pumping rate encountered during treatment of all stages.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum job fluid pumping rate encountered during treatment of all stages.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxFluidRate", DataType="VolumePerTimeMeasure")]
        public VolumePerTimeMeasure MaxFluidRate {
            get {
                return this.maxFluidRateField;
            }
            set {
                this.maxFluidRateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum pressure encountered during the job.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum pressure encountered during the job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxJobPres", DataType="PressureMeasure")]
        public PressureMeasure MaxJobPres {
            get {
                return this.maxJobPresField;
            }
            set {
                this.maxJobPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>UNSPSC (Segment 71) commodity code from the oil and gas extraction and production enhancement services family.</summary>
        [System.ComponentModel.DescriptionAttribute("UNSPSC (Segment 71) commodity code from the oil and gas extraction and production" +
            " enhancement services family.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PIDXCommodityCode", DataType="PIDXCommodityCode")]
        public PIDXCommodityCode PIDXCommodityCode {
            get {
                return this.pIDXCommodityCodeField;
            }
            set {
                this.pIDXCommodityCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PIDXCommodityCodeSpecified {
            get {
                return this.pIDXCommodityCodeFieldSpecified;
            }
            set {
                this.pIDXCommodityCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the well stimulation contractor.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Name of the well stimulation contractor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ServiceCompany", DataType="String2000")]
        public string ServiceCompany {
            get {
                return this.serviceCompanyField;
            }
            set {
                this.serviceCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of stages treated during the stimulation service.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of stages treated during the stimulation service.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StageCount", DataType="NonNegativeLong")]
        public long StageCount {
            get {
                return this.stageCountField;
            }
            set {
                this.stageCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StageCountSpecified {
            get {
                return this.stageCountFieldSpecified;
            }
            set {
                this.stageCountFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the service company supervisor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the service company supervisor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Supervisor", DataType="String64")]
        public string Supervisor {
            get {
                return this.supervisorField;
            }
            set {
                this.supervisorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total volume pumped for all stages.</summary>
        [System.ComponentModel.DescriptionAttribute("Total volume pumped for all stages.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalJobVolume", DataType="VolumeMeasure")]
        public VolumeMeasure TotalJobVolume {
            get {
                return this.totalJobVolumeField;
            }
            set {
                this.totalJobVolumeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total mass of proppant placed in the formation for the entire job.</summary>
        [System.ComponentModel.DescriptionAttribute("The total mass of proppant placed in the formation for the entire job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalProppantInFormation", DataType="MassMeasure")]
        public MassMeasure TotalProppantInFormation {
            get {
                return this.totalProppantInFormationField;
            }
            set {
                this.totalProppantInFormationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name and amount of a proppant used during some time period in a performance enhancement job.</summary>
        [System.ComponentModel.DescriptionAttribute("The name and amount of a proppant used during some time period in a performance e" +
            "nhancement job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalProppantUsed", DataType="MassMeasure")]
        public MassMeasure TotalProppantUsed {
            get {
                return this.totalProppantUsedField;
            }
            set {
                this.totalProppantUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The total pumping time.</summary>
        [System.ComponentModel.DescriptionAttribute("The total pumping time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalPumpTime", DataType="TimeMeasure")]
        public TimeMeasure TotalPumpTime {
            get {
                return this.totalPumpTimeField;
            }
            set {
                this.totalPumpTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Expected or calculated bottomhole treating temperature for the job.</summary>
        [System.ComponentModel.DescriptionAttribute("Expected or calculated bottomhole treating temperature for the job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TreatingBottomholeTemperature", DataType="ThermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure TreatingBottomholeTemperature {
            get {
                return this.treatingBottomholeTemperatureField;
            }
            set {
                this.treatingBottomholeTemperatureField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A stage treated during the stimulation job.</summary>
        [System.Xml.Serialization.XmlElementAttribute("JobStage")]
        [System.ComponentModel.DescriptionAttribute("A stage treated during the stimulation job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobStage", DataType="StimJobStage")]
        public StimJobStage[] JobStage {
            get {
                return this.jobStageField;
            }
            set {
                this.jobStageField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MaterialUsed")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaterialUsed", DataType="StimMaterialQuantity")]
        public StimMaterialQuantity[] MaterialUsed {
            get {
                return this.materialUsedField;
            }
            set {
                this.materialUsedField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaterialCatalog", DataType="StimJobMaterialCatalog")]
        public StimJobMaterialCatalog MaterialCatalog {
            get {
                return this.materialCatalogField;
            }
            set {
                this.materialCatalogField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("JobLog", typeof(DataObjectReference), IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogCatalog", DataType="StimJobLogCatalog")]
        public DataObjectReference[][] LogCatalog {
            get {
                return this.logCatalogField;
            }
            set {
                this.logCatalogField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum PIDXCommodityCode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131001")]
        Item71131001,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131002")]
        Item71131002,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131003")]
        Item71131003,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131004")]
        Item71131004,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131005")]
        Item71131005,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131006")]
        Item71131006,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131007")]
        Item71131007,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131008")]
        Item71131008,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131009")]
        Item71131009,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131010")]
        Item71131010,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131011")]
        Item71131011,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131012")]
        Item71131012,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131013")]
        Item71131013,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131014")]
        Item71131014,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131015")]
        Item71131015,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131016")]
        Item71131016,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131018")]
        Item71131018,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("71131019")]
        Item71131019,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Risk : AbstractObject {
        
        private RiskType typeField;
        
        private RiskCategory categoryField;
        
        private RiskSubCategory subCategoryField;
        
        private bool subCategoryFieldSpecified;
        
        private string extendCategoryField;
        
        private RiskAffectedPersonnel[] affectedPersonnelField;
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private MeasuredDepthCoord mdHoleStartField;
        
        private MeasuredDepthCoord mdHoleEndField;
        
        private WellVerticalDepthCoord tvdHoleStartField;
        
        private WellVerticalDepthCoord tvdHoleEndField;
        
        private MeasuredDepthCoord mdBitStartField;
        
        private MeasuredDepthCoord mdBitEndField;
        
        private LengthMeasure diaHoleField;
        
        private short severityLevelField;
        
        private bool severityLevelFieldSpecified;
        
        private short probabilityLevelField;
        
        private bool probabilityLevelFieldSpecified;
        
        private string summaryField;
        
        private string detailsField;
        
        private string identificationField;
        
        private string contingencyField;
        
        private string[] mitigationField;
        
        private DataObjectReference[] objectReferenceField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>The type of risk.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The type of risk.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="RiskType")]
        public RiskType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The category of risk.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The category of risk.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Category", DataType="RiskCategory")]
        public RiskCategory Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sub category of risk.</summary>
        [System.ComponentModel.DescriptionAttribute("The sub category of risk.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubCategory", DataType="RiskSubCategory")]
        public RiskSubCategory SubCategory {
            get {
                return this.subCategoryField;
            }
            set {
                this.subCategoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SubCategorySpecified {
            get {
                return this.subCategoryFieldSpecified;
            }
            set {
                this.subCategoryFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Custom string to further categorize the risk.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Custom string to further categorize the risk.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtendCategory", DataType="String64")]
        public string ExtendCategory {
            get {
                return this.extendCategoryField;
            }
            set {
                this.extendCategoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The personnel affected by the risk.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AffectedPersonnel")]
        [System.ComponentModel.DescriptionAttribute("The personnel affected by the risk.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AffectedPersonnel", DataType="RiskAffectedPersonnel")]
        public RiskAffectedPersonnel[] AffectedPersonnel {
            get {
                return this.affectedPersonnelField;
            }
            set {
                this.affectedPersonnelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that activities (related to the risk) started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities (related to the risk) started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that activities (related to the risk) were completed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities (related to the risk) were completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured Depth at the start of the activity.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured Depth at the start of the activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdHoleStart", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdHoleStart {
            get {
                return this.mdHoleStartField;
            }
            set {
                this.mdHoleStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured Depth at the end of the activity.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured Depth at the end of the activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdHoleEnd", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdHoleEnd {
            get {
                return this.mdHoleEndField;
            }
            set {
                this.mdHoleEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth at the start of the activity.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth at the start of the activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdHoleStart", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdHoleStart {
            get {
                return this.tvdHoleStartField;
            }
            set {
                this.tvdHoleStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth at the end of the activity.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth at the end of the activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdHoleEnd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdHoleEnd {
            get {
                return this.tvdHoleEndField;
            }
            set {
                this.tvdHoleEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the bit at the start of the activity.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the bit at the start of the activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBitStart", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBitStart {
            get {
                return this.mdBitStartField;
            }
            set {
                this.mdBitStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the bit at the end of the activity.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the bit at the end of the activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBitEnd", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBitEnd {
            get {
                return this.mdBitEndField;
            }
            set {
                this.mdBitEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hole diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Hole diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaHole", DataType="LengthMeasure")]
        public LengthMeasure DiaHole {
            get {
                return this.diaHoleField;
            }
            set {
                this.diaHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Severity level of the risk. Values of 1 through 5, with 1 being the lowest risk level.</summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(0D, 8D)]
        [System.ComponentModel.DescriptionAttribute("Severity level of the risk. Values of 1 through 5, with 1 being the lowest risk l" +
            "evel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeverityLevel", DataType="LevelIntegerCode")]
        public short SeverityLevel {
            get {
                return this.severityLevelField;
            }
            set {
                this.severityLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SeverityLevelSpecified {
            get {
                return this.severityLevelFieldSpecified;
            }
            set {
                this.severityLevelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Probability level of the risk occurring. Values of 1 through 5, with 1 being the lowest probability.</summary>
        [System.ComponentModel.DataAnnotations.RangeAttribute(0D, 8D)]
        [System.ComponentModel.DescriptionAttribute("Probability level of the risk occurring. Values of 1 through 5, with 1 being the " +
            "lowest probability.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProbabilityLevel", DataType="LevelIntegerCode")]
        public short ProbabilityLevel {
            get {
                return this.probabilityLevelField;
            }
            set {
                this.probabilityLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProbabilityLevelSpecified {
            get {
                return this.probabilityLevelFieldSpecified;
            }
            set {
                this.probabilityLevelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Summary description of the risk.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Summary description of the risk.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Summary", DataType="String2000")]
        public string Summary {
            get {
                return this.summaryField;
            }
            set {
                this.summaryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Complete description of the risk.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Complete description of the risk.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Details", DataType="String2000")]
        public string Details {
            get {
                return this.detailsField;
            }
            set {
                this.detailsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Details for identifying the risk.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Details for identifying the risk.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Identification", DataType="String2000")]
        public string Identification {
            get {
                return this.identificationField;
            }
            set {
                this.identificationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Plan of action if the risk materializes.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Plan of action if the risk materializes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Contingency", DataType="String2000")]
        public string Contingency {
            get {
                return this.contingencyField;
            }
            set {
                this.contingencyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Plan of action to ensure the risk does not materialize.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Mitigation")]
        [System.ComponentModel.DescriptionAttribute("Plan of action to ensure the risk does not materialize.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mitigation", DataType="String2000")]
        public string[] Mitigation {
            get {
                return this.mitigationField;
            }
            set {
                this.mitigationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ObjectReference")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectReference", DataType="DataObjectReference")]
        public DataObjectReference[] ObjectReference {
            get {
                return this.objectReferenceField;
            }
            set {
                this.objectReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum RiskType {
        
        /// <remarks/>
        risk,
        
        /// <remarks/>
        @event,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("near miss")]
        nearmiss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("best practice")]
        bestpractice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lessons learned")]
        lessonslearned,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum RiskCategory {
        
        /// <remarks/>
        hydraulics,
        
        /// <remarks/>
        mechanical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time related")]
        timerelated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wellbore stability")]
        wellborestability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("directional drilling")]
        directionaldrilling,
        
        /// <remarks/>
        bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("equipment failure")]
        equipmentfailure,
        
        /// <remarks/>
        completion,
        
        /// <remarks/>
        casing,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        HSE,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum RiskSubCategory {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas kick")]
        gaskick,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow water influx")]
        shallowwaterinflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("other influx or kicks")]
        otherinfluxorkicks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("loss circulation")]
        losscirculation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("poor hole cleaning")]
        poorholecleaning,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("good hole cleaning at high ROP")]
        goodholecleaningathighROP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("high mud weight")]
        highmudweight,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("special additives needed")]
        specialadditivesneeded,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gumbo problems")]
        gumboproblems,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("high ECD - rheology related")]
        highECDrheologyrelated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive circulation")]
        excessivecirculation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("performing a kill")]
        performingakill,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud weight change")]
        mudweightchange,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive pipe cement scaling")]
        excessivepipecementscaling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pit gain or loss")]
        pitgainorloss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud stability problems")]
        mudstabilityproblems,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shallow gas flow")]
        shallowgasflow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("twist off")]
        twistoff,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stuck pipe")]
        stuckpipe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline stuck in hole")]
        wirelinestuckinhole,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stick and slip")]
        stickandslip,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vibration - axial")]
        vibrationaxial,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vibration - torsional")]
        vibrationtorsional,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vibration - transverse")]
        vibrationtransverse,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vibration unknown or rough drilling")]
        vibrationunknownorroughdrilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uneven wear of BHA")]
        unevenwearofBHA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uneven wear of drillstring")]
        unevenwearofdrillstring,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive torque")]
        excessivetorque,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive drag")]
        excessivedrag,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reaming greater than 2 hours")]
        reaminggreaterthan2hours,
        
        /// <remarks/>
        washouts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tight hole or overPull")]
        tightholeoroverPull,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("failed inspections or fatigue wear")]
        failedinspectionsorfatiguewear,
        
        /// <remarks/>
        mechanical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling greater than 1000 feet/day")]
        drillinggreaterthan1000feetday,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling greater than 2000 feet/day")]
        drillinggreaterthan2000feetday,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling less than 20 feet/day")]
        drillinglessthan20feetday,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("trips greater than 24 hours")]
        tripsgreaterthan24hours,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive time for BHA makeup")]
        excessivetimeforBHAmakeup,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("waiting on decisions")]
        waitingondecisions,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("waiting on weather")]
        waitingonweather,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("waiting on tools")]
        waitingontools,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sloughing or packoffs")]
        sloughingorpackoffs,
        
        /// <remarks/>
        ballooning,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fracture problems")]
        fractureproblems,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("unstable zones")]
        unstablezones,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation integrity test")]
        formationintegritytest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("leak-off test")]
        leakofftest,
        
        /// <remarks/>
        tectonics,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pore pressure")]
        porepressure,
        
        /// <remarks/>
        breakouts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bed parallel")]
        bedparallel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wellbore stability")]
        wellborestability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive doglegs")]
        excessivedoglegs,
        
        /// <remarks/>
        sidetrack,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("BHA change for directional")]
        BHAchangefordirectional,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wrong total flow area")]
        wrongtotalflowarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well collision - actual")]
        wellcollisionactual,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("well collision - technical")]
        wellcollisiontechnical,
        
        /// <remarks/>
        geosteering,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("abnormal tendency changes")]
        abnormaltendencychanges,
        
        /// <remarks/>
        resurveying,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in-field referencing (IFR) actions")]
        infieldreferencingIFRactions,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit or BHA performance")]
        bitorBHAperformance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling optimization")]
        drillingoptimization,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit balling")]
        bitballing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lost cones or broken cutters")]
        lostconesorbrokencutters,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive bit wear or gauge")]
        excessivebitwearorgauge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("low rate of bit penetration")]
        lowrateofbitpenetration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("high rate of bit penetration")]
        highrateofbitpenetration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("downhole tool")]
        downholetool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface system")]
        surfacesystem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("motor or rotary steerable system failure")]
        motororrotarysteerablesystemfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("topdrive failure")]
        topdrivefailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hoisting equipment failure")]
        hoistingequipmentfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("circulating equipment failure")]
        circulatingequipmentfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrical system failure")]
        electricalsystemfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("blow out preventer events")]
        blowoutpreventerevents,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface instrumentation problems")]
        surfaceinstrumentationproblems,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig communications")]
        rigcommunications,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion equipment failure")]
        completionequipmentfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("miscellaneous rig equipment")]
        miscellaneousrigequipment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tool or equipment failure")]
        toolorequipmentfailure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("squeeze jobs")]
        squeezejobs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing surge losses")]
        casingsurgelosses,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stuck casing or completion")]
        stuckcasingorcompletion,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shoe failures")]
        shoefailures,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("early cement setup")]
        earlycementsetup,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing collapse")]
        casingcollapse,
        
        /// <remarks/>
        milling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive casing wear or cuttings")]
        excessivecasingwearorcuttings,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("excessive formation damage or skin")]
        excessiveformationdamageorskin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing rotation or reciprocation rqd")]
        casingrotationorreciprocationrqd,
        
        /// <remarks/>
        broaching,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion or casing")]
        completionorcasing,
        
        /// <remarks/>
        stratigraphy,
        
        /// <remarks/>
        fishing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("junk in hole")]
        junkinhole,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("delay due to political unrest")]
        delayduetopoliticalunrest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rig move")]
        rigmove,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas hydrates")]
        gashydrates,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pending analysis")]
        pendinganalysis,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("riser disconnect")]
        riserdisconnect,
        
        /// <remarks/>
        other,
        
        /// <remarks/>
        personnel,
        
        /// <remarks/>
        environmental,
        
        /// <remarks/>
        automotive,
        
        /// <remarks/>
        asset,
        
        /// <remarks/>
        information,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        HSE,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum RiskAffectedPersonnel {
        
        /// <remarks/>
        cementer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("company man")]
        companyman,
        
        /// <remarks/>
        contractor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("directional driller")]
        directionaldriller,
        
        /// <remarks/>
        driller,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling engineer")]
        drillingengineer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling superintendent")]
        drillingsuperintendent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("drilling team")]
        drillingteam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("facility engineer")]
        facilityengineer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("field service manager")]
        fieldservicemanager,
        
        /// <remarks/>
        foreman,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general service supervisor")]
        generalservicesupervisor,
        
        /// <remarks/>
        geologist,
        
        /// <remarks/>
        member,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud engineer")]
        mudengineer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mud logger")]
        mudlogger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MWD or LWD engineer")]
        MWDorLWDengineer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("perform engineer")]
        performengineer,
        
        /// <remarks/>
        petrophysicist,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("production engineer")]
        productionengineer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("remotely operated vehicle engineer")]
        remotelyoperatedvehicleengineer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("safety manager")]
        safetymanager,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sales engineer")]
        salesengineer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("service supervisor")]
        servicesupervisor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("technical support")]
        technicalsupport,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tool pusher")]
        toolpusher,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline engineer")]
        wirelineengineer,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Rig : AbstractObject {
        
        private string ownerField;
        
        private RigType typeRigField;
        
        private bool typeRigFieldSpecified;
        
        private string manufacturerField;
        
        private string yearEntServiceField;
        
        private string classRigField;
        
        private string approvalsField;
        
        private string registrationField;
        
        private string telNumberField;
        
        private string faxNumberField;
        
        private string emailAddressField;
        
        private string nameContactField;
        
        private LengthMeasure ratingDrillDepthField;
        
        private LengthMeasure ratingWaterDepthField;
        
        private bool isOffshoreField;
        
        private bool isOffshoreFieldSpecified;
        
        private DerrickType typeDerrickField;
        
        private bool typeDerrickFieldSpecified;
        
        private ForceMeasure ratingDerrickField;
        
        private LengthMeasure htDerrickField;
        
        private LengthPerTimeMeasure capWindDerrickField;
        
        private int numCranesField;
        
        private bool numCranesFieldSpecified;
        
        /// <remarks/>
        /// <summary>The name of the company that owns the rig.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The name of the company that owns the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Owner", DataType="String64")]
        public string Owner {
            get {
                return this.ownerField;
            }
            set {
                this.ownerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The type of rig (e.g., semi-submersible, jack-up, etc.)</summary>
        [System.ComponentModel.DescriptionAttribute("The type of rig (e.g., semi-submersible, jack-up, etc.)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeRig", DataType="RigType")]
        public RigType TypeRig {
            get {
                return this.typeRigField;
            }
            set {
                this.typeRigField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeRigSpecified {
            get {
                return this.typeRigFieldSpecified;
            }
            set {
                this.typeRigFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The company that manufactured the rig.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The company that manufactured the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Manufacturer", DataType="String64")]
        public string Manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The year the rig entered service.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="gYear")]
        [System.ComponentModel.DescriptionAttribute("The year the rig entered service.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("YearEntService", DataType="gYear")]
        public string YearEntService {
            get {
                return this.yearEntServiceField;
            }
            set {
                this.yearEntServiceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Classification of the rig.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Classification of the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClassRig", DataType="String64")]
        public string ClassRig {
            get {
                return this.classRigField;
            }
            set {
                this.classRigField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rig approvals/certification.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Rig approvals/certification.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Approvals", DataType="String64")]
        public string Approvals {
            get {
                return this.approvalsField;
            }
            set {
                this.approvalsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rig registration location.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Rig registration location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Registration", DataType="String64")]
        public string Registration {
            get {
                return this.registrationField;
            }
            set {
                this.registrationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Telephone number on the rig.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Telephone number on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TelNumber", DataType="String64")]
        public string TelNumber {
            get {
                return this.telNumberField;
            }
            set {
                this.telNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fax number on the rig.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Fax number on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FaxNumber", DataType="String64")]
        public string FaxNumber {
            get {
                return this.faxNumberField;
            }
            set {
                this.faxNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Email address of the contact person.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Email address of the contact person.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EmailAddress", DataType="String64")]
        public string EmailAddress {
            get {
                return this.emailAddressField;
            }
            set {
                this.emailAddressField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the contact person.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the contact person.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameContact", DataType="String64")]
        public string NameContact {
            get {
                return this.nameContactField;
            }
            set {
                this.nameContactField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum hole depth rating for the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum hole depth rating for the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingDrillDepth", DataType="LengthMeasure")]
        public LengthMeasure RatingDrillDepth {
            get {
                return this.ratingDrillDepthField;
            }
            set {
                this.ratingDrillDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum water depth rating for the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum water depth rating for the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingWaterDepth", DataType="LengthMeasure")]
        public LengthMeasure RatingWaterDepth {
            get {
                return this.ratingWaterDepthField;
            }
            set {
                this.ratingWaterDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Flag to indicate that the rig is an offshore rig (drill ship, semi-submersible, jack-up, platform, TADU).  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Flag to indicate that the rig is an offshore rig (drill ship, semi-submersible, j" +
            "ack-up, platform, TADU).  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsOffshore", DataType="boolean")]
        public bool IsOffshore {
            get {
                return this.isOffshoreField;
            }
            set {
                this.isOffshoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsOffshoreSpecified {
            get {
                return this.isOffshoreFieldSpecified;
            }
            set {
                this.isOffshoreFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Derrick type.</summary>
        [System.ComponentModel.DescriptionAttribute("Derrick type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeDerrick", DataType="DerrickType")]
        public DerrickType TypeDerrick {
            get {
                return this.typeDerrickField;
            }
            set {
                this.typeDerrickField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeDerrickSpecified {
            get {
                return this.typeDerrickFieldSpecified;
            }
            set {
                this.typeDerrickFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Derrick rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Derrick rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingDerrick", DataType="ForceMeasure")]
        public ForceMeasure RatingDerrick {
            get {
                return this.ratingDerrickField;
            }
            set {
                this.ratingDerrickField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Height of the derrick.</summary>
        [System.ComponentModel.DescriptionAttribute("Height of the derrick.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HtDerrick", DataType="LengthMeasure")]
        public LengthMeasure HtDerrick {
            get {
                return this.htDerrickField;
            }
            set {
                this.htDerrickField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Derrick wind capacity.</summary>
        [System.ComponentModel.DescriptionAttribute("Derrick wind capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapWindDerrick", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure CapWindDerrick {
            get {
                return this.capWindDerrickField;
            }
            set {
                this.capWindDerrickField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of cranes on the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of cranes on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumCranes", DataType="int")]
        public int NumCranes {
            get {
                return this.numCranesField;
            }
            set {
                this.numCranesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumCranesSpecified {
            get {
                return this.numCranesFieldSpecified;
            }
            set {
                this.numCranesFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum RigType {
        
        /// <remarks/>
        barge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coiled tubing")]
        coiledtubing,
        
        /// <remarks/>
        floater,
        
        /// <remarks/>
        jackup,
        
        /// <remarks/>
        land,
        
        /// <remarks/>
        platform,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("semi-submersible")]
        semisubmersible,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum DerrickType {
        
        /// <remarks/>
        @double,
        
        /// <remarks/>
        quadruple,
        
        /// <remarks/>
        slant,
        
        /// <remarks/>
        triple,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class RigUtilization : AbstractObject {
        
        private Energistics.DataAccess.Timestamp startOperationTimeField;
        
        private Energistics.DataAccess.Timestamp endOperationTimeField;
        
        private LengthMeasure startHoleDepthField;
        
        private LengthMeasure endHoleDepthField;
        
        private string datumField;
        
        private LengthMeasure airGapField;
        
        private ForceMeasure wtBlockField;
        
        private ForceMeasure ratingBlockField;
        
        private int numBlockLinesField;
        
        private bool numBlockLinesFieldSpecified;
        
        private string typeHookField;
        
        private ForceMeasure ratingHkldField;
        
        private LengthMeasure sizeDrillLineField;
        
        private DrawWorksType typeDrawWorksField;
        
        private bool typeDrawWorksFieldSpecified;
        
        private PowerMeasure powerDrawWorksField;
        
        private ForceMeasure ratingDrawWorksField;
        
        private string motorDrawWorksField;
        
        private string descBrakeField;
        
        private string typeSwivelField;
        
        private ForceMeasure ratingSwivelField;
        
        private DriveType rotSystemField;
        
        private bool rotSystemFieldSpecified;
        
        private string descRotSystemField;
        
        private MomentOfForceMeasure ratingTqRotSysField;
        
        private LengthMeasure rotSizeOpeningField;
        
        private ForceMeasure ratingRotSystemField;
        
        private string scrSystemField;
        
        private string pipeHandlingSystemField;
        
        private VolumeMeasure capBulkMudField;
        
        private VolumeMeasure capLiquidMudField;
        
        private VolumeMeasure capDrillWaterField;
        
        private VolumeMeasure capPotableWaterField;
        
        private VolumeMeasure capFuelField;
        
        private VolumeMeasure capBulkCementField;
        
        private string mainEngineField;
        
        private string generatorField;
        
        private string cementUnitField;
        
        private int numBunksField;
        
        private bool numBunksFieldSpecified;
        
        private int bunksPerRoomField;
        
        private bool bunksPerRoomFieldSpecified;
        
        private int numAnchField;
        
        private bool numAnchFieldSpecified;
        
        private string moorTypeField;
        
        private int numGuideTensField;
        
        private bool numGuideTensFieldSpecified;
        
        private int numRiserTensField;
        
        private bool numRiserTensFieldSpecified;
        
        private ForceMeasure varDeckLdMxField;
        
        private ForceMeasure vdlStormField;
        
        private int numThrustersField;
        
        private bool numThrustersFieldSpecified;
        
        private bool azimuthingField;
        
        private bool azimuthingFieldSpecified;
        
        private ForceMeasure motionCompensationMnField;
        
        private ForceMeasure motionCompensationMxField;
        
        private LengthMeasure strokeMotionCompensationField;
        
        private PlaneAngleMeasure riserAngleLimitField;
        
        private LengthMeasure heaveMxField;
        
        private string gantryField;
        
        private string flaresField;
        
        private Shaker[] shakerField;
        
        private DataObjectReference wellboreField;
        
        private Bop bopField;
        
        private Pit[] pitField;
        
        private MudPump[] pumpField;
        
        private Centrifuge[] centrifugeField;
        
        private Hydrocyclone[] hydrocycloneField;
        
        private Degasser[] degasserField;
        
        private SurfaceEquipment surfaceEquipmentField;
        
        private DataObjectReference[] bhaRunField;
        
        private DataObjectReference rigField;
        
        /// <remarks/>
        /// <summary>Start time of the operation in which the rig was used.</summary>
        [System.ComponentModel.DescriptionAttribute("Start time of the operation in which the rig was used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartOperationTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StartOperationTime {
            get {
                return this.startOperationTimeField;
            }
            set {
                this.startOperationTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>End time of the operation in which the rig was used.</summary>
        [System.ComponentModel.DescriptionAttribute("End time of the operation in which the rig was used.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndOperationTime", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp EndOperationTime {
            get {
                return this.endOperationTimeField;
            }
            set {
                this.endOperationTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the wellbore when operations performed with this rig started.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the wellbore when operations performed with this rig started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartHoleDepth", DataType="LengthMeasure")]
        public LengthMeasure StartHoleDepth {
            get {
                return this.startHoleDepthField;
            }
            set {
                this.startHoleDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of the wellbore when operations performed with this rig ended.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of the wellbore when operations performed with this rig ended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndHoleDepth", DataType="LengthMeasure")]
        public LengthMeasure EndHoleDepth {
            get {
                return this.endHoleDepthField;
            }
            set {
                this.endHoleDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Datum for location reference.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Datum for location reference.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Datum", DataType="String64")]
        public string Datum {
            get {
                return this.datumField;
            }
            set {
                this.datumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Air gap from the rig floor to the ground or mean sea level, depending on the rig location.</summary>
        [System.ComponentModel.DescriptionAttribute("Air gap from the rig floor to the ground or mean sea level, depending on the rig " +
            "location.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AirGap", DataType="LengthMeasure")]
        public LengthMeasure AirGap {
            get {
                return this.airGapField;
            }
            set {
                this.airGapField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight of the block.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight of the block.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WtBlock", DataType="ForceMeasure")]
        public ForceMeasure WtBlock {
            get {
                return this.wtBlockField;
            }
            set {
                this.wtBlockField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rating for the block.</summary>
        [System.ComponentModel.DescriptionAttribute("Rating for the block.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingBlock", DataType="ForceMeasure")]
        public ForceMeasure RatingBlock {
            get {
                return this.ratingBlockField;
            }
            set {
                this.ratingBlockField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of block lines.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of block lines.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumBlockLines", DataType="int")]
        public int NumBlockLines {
            get {
                return this.numBlockLinesField;
            }
            set {
                this.numBlockLinesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumBlockLinesSpecified {
            get {
                return this.numBlockLinesFieldSpecified;
            }
            set {
                this.numBlockLinesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of hook installed for this rig usage.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of hook installed for this rig usage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeHook", DataType="String64")]
        public string TypeHook {
            get {
                return this.typeHookField;
            }
            set {
                this.typeHookField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum weight rating of the hook as configured for this rig usage.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum weight rating of the hook as configured for this rig usage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingHkld", DataType="ForceMeasure")]
        public ForceMeasure RatingHkld {
            get {
                return this.ratingHkldField;
            }
            set {
                this.ratingHkldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Drill line diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Drill line diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeDrillLine", DataType="LengthMeasure")]
        public LengthMeasure SizeDrillLine {
            get {
                return this.sizeDrillLineField;
            }
            set {
                this.sizeDrillLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Draw works type.</summary>
        [System.ComponentModel.DescriptionAttribute("Draw works type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeDrawWorks", DataType="DrawWorksType")]
        public DrawWorksType TypeDrawWorks {
            get {
                return this.typeDrawWorksField;
            }
            set {
                this.typeDrawWorksField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeDrawWorksSpecified {
            get {
                return this.typeDrawWorksFieldSpecified;
            }
            set {
                this.typeDrawWorksFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Draw works horse power.</summary>
        [System.ComponentModel.DescriptionAttribute("Draw works horse power.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PowerDrawWorks", DataType="PowerMeasure")]
        public PowerMeasure PowerDrawWorks {
            get {
                return this.powerDrawWorksField;
            }
            set {
                this.powerDrawWorksField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weight rating of the draw works.</summary>
        [System.ComponentModel.DescriptionAttribute("Weight rating of the draw works.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingDrawWorks", DataType="ForceMeasure")]
        public ForceMeasure RatingDrawWorks {
            get {
                return this.ratingDrawWorksField;
            }
            set {
                this.ratingDrawWorksField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the draw works motor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the draw works motor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MotorDrawWorks", DataType="String64")]
        public string MotorDrawWorks {
            get {
                return this.motorDrawWorksField;
            }
            set {
                this.motorDrawWorksField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rig brake description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Rig brake description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescBrake", DataType="String64")]
        public string DescBrake {
            get {
                return this.descBrakeField;
            }
            set {
                this.descBrakeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of swivel.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of swivel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeSwivel", DataType="String64")]
        public string TypeSwivel {
            get {
                return this.typeSwivelField;
            }
            set {
                this.typeSwivelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum swivel rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum swivel rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingSwivel", DataType="ForceMeasure")]
        public ForceMeasure RatingSwivel {
            get {
                return this.ratingSwivelField;
            }
            set {
                this.ratingSwivelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Work string drive type.</summary>
        [System.ComponentModel.DescriptionAttribute("Work string drive type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RotSystem", DataType="DriveType")]
        public DriveType RotSystem {
            get {
                return this.rotSystemField;
            }
            set {
                this.rotSystemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RotSystemSpecified {
            get {
                return this.rotSystemFieldSpecified;
            }
            set {
                this.rotSystemFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of rotating system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of rotating system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescRotSystem", DataType="String64")]
        public string DescRotSystem {
            get {
                return this.descRotSystemField;
            }
            set {
                this.descRotSystemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Work string rotational torque rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Work string rotational torque rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingTqRotSys", DataType="MomentOfForceMeasure")]
        public MomentOfForceMeasure RatingTqRotSys {
            get {
                return this.ratingTqRotSysField;
            }
            set {
                this.ratingTqRotSysField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rotary size opening.</summary>
        [System.ComponentModel.DescriptionAttribute("Rotary size opening.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RotSizeOpening", DataType="LengthMeasure")]
        public LengthMeasure RotSizeOpening {
            get {
                return this.rotSizeOpeningField;
            }
            set {
                this.rotSizeOpeningField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Work string rotational torque rating.</summary>
        [System.ComponentModel.DescriptionAttribute("Work string rotational torque rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RatingRotSystem", DataType="ForceMeasure")]
        public ForceMeasure RatingRotSystem {
            get {
                return this.ratingRotSystemField;
            }
            set {
                this.ratingRotSystemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of slow circulation rates (SCR) system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of slow circulation rates (SCR) system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ScrSystem", DataType="String64")]
        public string ScrSystem {
            get {
                return this.scrSystemField;
            }
            set {
                this.scrSystemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of pipe-handling system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of pipe-handling system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PipeHandlingSystem", DataType="String64")]
        public string PipeHandlingSystem {
            get {
                return this.pipeHandlingSystemField;
            }
            set {
                this.pipeHandlingSystemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bulk/dry mud storage capacity.</summary>
        [System.ComponentModel.DescriptionAttribute("Bulk/dry mud storage capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapBulkMud", DataType="VolumeMeasure")]
        public VolumeMeasure CapBulkMud {
            get {
                return this.capBulkMudField;
            }
            set {
                this.capBulkMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Liquid mud storage capacity.</summary>
        [System.ComponentModel.DescriptionAttribute("Liquid mud storage capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapLiquidMud", DataType="VolumeMeasure")]
        public VolumeMeasure CapLiquidMud {
            get {
                return this.capLiquidMudField;
            }
            set {
                this.capLiquidMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Drill water capacity.</summary>
        [System.ComponentModel.DescriptionAttribute("Drill water capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapDrillWater", DataType="VolumeMeasure")]
        public VolumeMeasure CapDrillWater {
            get {
                return this.capDrillWaterField;
            }
            set {
                this.capDrillWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Potable water capacity.</summary>
        [System.ComponentModel.DescriptionAttribute("Potable water capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapPotableWater", DataType="VolumeMeasure")]
        public VolumeMeasure CapPotableWater {
            get {
                return this.capPotableWaterField;
            }
            set {
                this.capPotableWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fuel capacity.</summary>
        [System.ComponentModel.DescriptionAttribute("Fuel capacity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapFuel", DataType="VolumeMeasure")]
        public VolumeMeasure CapFuel {
            get {
                return this.capFuelField;
            }
            set {
                this.capFuelField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Capacity of bulk cement.</summary>
        [System.ComponentModel.DescriptionAttribute("Capacity of bulk cement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CapBulkCement", DataType="VolumeMeasure")]
        public VolumeMeasure CapBulkCement {
            get {
                return this.capBulkCementField;
            }
            set {
                this.capBulkCementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Power system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Power system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MainEngine", DataType="String64")]
        public string MainEngine {
            get {
                return this.mainEngineField;
            }
            set {
                this.mainEngineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the electrical power generating system.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the electrical power generating system.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Generator", DataType="String64")]
        public string Generator {
            get {
                return this.generatorField;
            }
            set {
                this.generatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the cement unit on the rig.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the cement unit on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementUnit", DataType="String64")]
        public string CementUnit {
            get {
                return this.cementUnitField;
            }
            set {
                this.cementUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of beds available on the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of beds available on the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumBunks", DataType="int")]
        public int NumBunks {
            get {
                return this.numBunksField;
            }
            set {
                this.numBunksField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumBunksSpecified {
            get {
                return this.numBunksFieldSpecified;
            }
            set {
                this.numBunksFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of bunks per room.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of bunks per room.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BunksPerRoom", DataType="int")]
        public int BunksPerRoom {
            get {
                return this.bunksPerRoomField;
            }
            set {
                this.bunksPerRoomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BunksPerRoomSpecified {
            get {
                return this.bunksPerRoomFieldSpecified;
            }
            set {
                this.bunksPerRoomFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of anchors.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of anchors.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumAnch", DataType="int")]
        public int NumAnch {
            get {
                return this.numAnchField;
            }
            set {
                this.numAnchField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumAnchSpecified {
            get {
                return this.numAnchFieldSpecified;
            }
            set {
                this.numAnchFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mooring type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Mooring type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MoorType", DataType="String64")]
        public string MoorType {
            get {
                return this.moorTypeField;
            }
            set {
                this.moorTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of guideline tensioners.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of guideline tensioners.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumGuideTens", DataType="int")]
        public int NumGuideTens {
            get {
                return this.numGuideTensField;
            }
            set {
                this.numGuideTensField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumGuideTensSpecified {
            get {
                return this.numGuideTensFieldSpecified;
            }
            set {
                this.numGuideTensFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of riser tensioners.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of riser tensioners.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumRiserTens", DataType="int")]
        public int NumRiserTens {
            get {
                return this.numRiserTensField;
            }
            set {
                this.numRiserTensField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumRiserTensSpecified {
            get {
                return this.numRiserTensFieldSpecified;
            }
            set {
                this.numRiserTensFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Variable deck load maximum (offshore rigs only).</summary>
        [System.ComponentModel.DescriptionAttribute("Variable deck load maximum (offshore rigs only).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VarDeckLdMx", DataType="ForceMeasure")]
        public ForceMeasure VarDeckLdMx {
            get {
                return this.varDeckLdMxField;
            }
            set {
                this.varDeckLdMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Variable deck load storm rating (offshore rigs only).</summary>
        [System.ComponentModel.DescriptionAttribute("Variable deck load storm rating (offshore rigs only).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VdlStorm", DataType="ForceMeasure")]
        public ForceMeasure VdlStorm {
            get {
                return this.vdlStormField;
            }
            set {
                this.vdlStormField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of thrusters.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of thrusters.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumThrusters", DataType="int")]
        public int NumThrusters {
            get {
                return this.numThrustersField;
            }
            set {
                this.numThrustersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumThrustersSpecified {
            get {
                return this.numThrustersFieldSpecified;
            }
            set {
                this.numThrustersFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Are the thrusters azimuth?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Are the thrusters azimuth?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Azimuthing", DataType="boolean")]
        public bool Azimuthing {
            get {
                return this.azimuthingField;
            }
            set {
                this.azimuthingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AzimuthingSpecified {
            get {
                return this.azimuthingFieldSpecified;
            }
            set {
                this.azimuthingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum motion compensation.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum motion compensation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MotionCompensationMn", DataType="ForceMeasure")]
        public ForceMeasure MotionCompensationMn {
            get {
                return this.motionCompensationMnField;
            }
            set {
                this.motionCompensationMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum motion compensation.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum motion compensation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MotionCompensationMx", DataType="ForceMeasure")]
        public ForceMeasure MotionCompensationMx {
            get {
                return this.motionCompensationMxField;
            }
            set {
                this.motionCompensationMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Length of motion compensation provided by equipment.</summary>
        [System.ComponentModel.DescriptionAttribute("Length of motion compensation provided by equipment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StrokeMotionCompensation", DataType="LengthMeasure")]
        public LengthMeasure StrokeMotionCompensation {
            get {
                return this.strokeMotionCompensationField;
            }
            set {
                this.strokeMotionCompensationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Riser angle limit.</summary>
        [System.ComponentModel.DescriptionAttribute("Riser angle limit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RiserAngleLimit", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure RiserAngleLimit {
            get {
                return this.riserAngleLimitField;
            }
            set {
                this.riserAngleLimitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum allowable heave.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum allowable heave.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HeaveMx", DataType="LengthMeasure")]
        public LengthMeasure HeaveMx {
            get {
                return this.heaveMxField;
            }
            set {
                this.heaveMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the gantry.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the gantry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Gantry", DataType="String64")]
        public string Gantry {
            get {
                return this.gantryField;
            }
            set {
                this.gantryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of flare(s).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of flare(s).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Flares", DataType="String64")]
        public string Flares {
            get {
                return this.flaresField;
            }
            set {
                this.flaresField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Shaker")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Shaker", DataType="Shaker")]
        public Shaker[] Shaker {
            get {
                return this.shakerField;
            }
            set {
                this.shakerField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Bop", DataType="Bop")]
        public Bop Bop {
            get {
                return this.bopField;
            }
            set {
                this.bopField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Pit")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pit", DataType="Pit")]
        public Pit[] Pit {
            get {
                return this.pitField;
            }
            set {
                this.pitField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Pump")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Pump", DataType="MudPump")]
        public MudPump[] Pump {
            get {
                return this.pumpField;
            }
            set {
                this.pumpField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Centrifuge")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Centrifuge", DataType="Centrifuge")]
        public Centrifuge[] Centrifuge {
            get {
                return this.centrifugeField;
            }
            set {
                this.centrifugeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Hydrocyclone")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Hydrocyclone", DataType="Hydrocyclone")]
        public Hydrocyclone[] Hydrocyclone {
            get {
                return this.hydrocycloneField;
            }
            set {
                this.hydrocycloneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Degasser")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Degasser", DataType="Degasser")]
        public Degasser[] Degasser {
            get {
                return this.degasserField;
            }
            set {
                this.degasserField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfaceEquipment", DataType="SurfaceEquipment")]
        public SurfaceEquipment SurfaceEquipment {
            get {
                return this.surfaceEquipmentField;
            }
            set {
                this.surfaceEquipmentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BhaRun")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BhaRun", DataType="DataObjectReference")]
        public DataObjectReference[] BhaRun {
            get {
                return this.bhaRunField;
            }
            set {
                this.bhaRunField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rig", DataType="DataObjectReference")]
        public DataObjectReference Rig {
            get {
                return this.rigField;
            }
            set {
                this.rigField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum DrawWorksType {
        
        /// <remarks/>
        mechanical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("standard electric")]
        standardelectric,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diesel electric")]
        dieselelectric,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ram rig")]
        ramrig,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum DriveType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coiled tubing")]
        coiledtubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rotary kelly drive")]
        rotarykellydrive,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("top drive")]
        topdrive,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class MudLogReport : AbstractObject {
        
        private string mudLogCompanyField;
        
        private string mudLogEngineersField;
        
        private string mudLogGeologistsField;
        
        private MdInterval reportMdIntervalField;
        
        private ChannelStatus growingStatusField;
        
        private DataObjectReference wellboreField;
        
        private DataObjectReference wellboreGeologyField;
        
        private MudlogReportInterval[] mudlogIntervalsField;
        
        private DataObjectReference[] relatedLogsField;
        
        private MudLogParameter[] parameterField;
        
        /// <remarks/>
        /// <summary>Name of the company recording the information.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the company recording the information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudLogCompany", DataType="String64")]
        public string MudLogCompany {
            get {
                return this.mudLogCompanyField;
            }
            set {
                this.mudLogCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Concatenated names of the mudloggers constructing the log.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Concatenated names of the mudloggers constructing the log.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudLogEngineers", DataType="String2000")]
        public string MudLogEngineers {
            get {
                return this.mudLogEngineersField;
            }
            set {
                this.mudLogEngineersField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Concatenated names of the geologists constructing the log.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Concatenated names of the geologists constructing the log.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudLogGeologists", DataType="String2000")]
        public string MudLogGeologists {
            get {
                return this.mudLogGeologistsField;
            }
            set {
                this.mudLogGeologistsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>[maintained by the server] The interval between the minimum and maximum measured depths contained in this MudLog report.</summary>
        [System.ComponentModel.DescriptionAttribute("[maintained by the server] The interval between the minimum and maximum measured " +
            "depths contained in this MudLog report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReportMdInterval", DataType="MdInterval")]
        public MdInterval ReportMdInterval {
            get {
                return this.reportMdIntervalField;
            }
            set {
                this.reportMdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The growing state of the mudlog,. Valid Values: active, inactive or closed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The growing state of the mudlog,. Valid Values: active, inactive or closed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrowingStatus", DataType="ChannelStatus")]
        public ChannelStatus GrowingStatus {
            get {
                return this.growingStatusField;
            }
            set {
                this.growingStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreGeology", DataType="DataObjectReference")]
        public DataObjectReference WellboreGeology {
            get {
                return this.wellboreGeologyField;
            }
            set {
                this.wellboreGeologyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MudlogIntervals")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudlogIntervals", DataType="MudlogReportInterval")]
        public MudlogReportInterval[] MudlogIntervals {
            get {
                return this.mudlogIntervalsField;
            }
            set {
                this.mudlogIntervalsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RelatedLogs")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RelatedLogs", DataType="DataObjectReference")]
        public DataObjectReference[] RelatedLogs {
            get {
                return this.relatedLogsField;
            }
            set {
                this.relatedLogsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="MudLogParameter")]
        public MudLogParameter[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ChannelStatus {
        
        /// <remarks/>
        active,
        
        /// <remarks/>
        closed,
        
        /// <remarks/>
        inactive,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class CuttingsGeologyInterval : AbstractObject {
        
        private MdInterval mdIntervalField;
        
        private Citation citation1Field;
        
        private MassPerVolumeMeasure densBulkField;
        
        private MassPerVolumeMeasure densShaleField;
        
        private VolumePerVolumeMeasure calciteField;
        
        private VolumePerVolumeMeasure calcStabField;
        
        private DimensionlessMeasure cecField;
        
        private VolumePerVolumeMeasure dolomiteField;
        
        private LengthMeasure sizeMinField;
        
        private LengthMeasure sizeMaxField;
        
        private IlluminanceMeasure qftField;
        
        private string cleaningMethodField;
        
        private string dryingMethodField;
        
        private CuttingsIntervalLithology[] cuttingsIntervalLithologyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The measured depth interval that is represented by the cuttings described in this instance.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The measured depth interval that is represented by the cuttings described in this" +
            " instance.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Citation")]
        public Citation Citation1 {
            get {
                return this.citation1Field;
            }
            set {
                this.citation1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sample bulk density for the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Sample bulk density for the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensBulk", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensBulk {
            get {
                return this.densBulkField;
            }
            set {
                this.densBulkField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Shale density for the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Shale density for the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DensShale", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure DensShale {
            get {
                return this.densShaleField;
            }
            set {
                this.densShaleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calcimetry calcite percentage.</summary>
        [System.ComponentModel.DescriptionAttribute("Calcimetry calcite percentage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Calcite", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Calcite {
            get {
                return this.calciteField;
            }
            set {
                this.calciteField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calcimetry stabilized percentage.</summary>
        [System.ComponentModel.DescriptionAttribute("Calcimetry stabilized percentage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CalcStab", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure CalcStab {
            get {
                return this.calcStabField;
            }
            set {
                this.calcStabField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cuttings cationic exchange capacity. Temporarily calling this a DimensionlessMeasure.</summary>
        [System.ComponentModel.DescriptionAttribute("Cuttings cationic exchange capacity. Temporarily calling this a DimensionlessMeas" +
            "ure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Cec", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure Cec {
            get {
                return this.cecField;
            }
            set {
                this.cecField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Calcimetry dolomite percentage.</summary>
        [System.ComponentModel.DescriptionAttribute("Calcimetry dolomite percentage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Dolomite", DataType="VolumePerVolumeMeasure")]
        public VolumePerVolumeMeasure Dolomite {
            get {
                return this.dolomiteField;
            }
            set {
                this.dolomiteField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum size.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum size.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeMin", DataType="LengthMeasure")]
        public LengthMeasure SizeMin {
            get {
                return this.sizeMinField;
            }
            set {
                this.sizeMinField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum size.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum size.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SizeMax", DataType="LengthMeasure")]
        public LengthMeasure SizeMax {
            get {
                return this.sizeMaxField;
            }
            set {
                this.sizeMaxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluorescence as measured using a device licensed for the Quantitative Fluorescence Technique.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluorescence as measured using a device licensed for the Quantitative Fluorescenc" +
            "e Technique.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Qft", DataType="IlluminanceMeasure")]
        public IlluminanceMeasure Qft {
            get {
                return this.qftField;
            }
            set {
                this.qftField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sample treatment: cleaning method.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Sample treatment: cleaning method.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CleaningMethod", DataType="String64")]
        public string CleaningMethod {
            get {
                return this.cleaningMethodField;
            }
            set {
                this.cleaningMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Sample treatment: drying method.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Sample treatment: drying method.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DryingMethod", DataType="String64")]
        public string DryingMethod {
            get {
                return this.dryingMethodField;
            }
            set {
                this.dryingMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CuttingsIntervalLithology")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CuttingsIntervalLithology", DataType="CuttingsIntervalLithology")]
        public CuttingsIntervalLithology[] CuttingsIntervalLithology {
            get {
                return this.cuttingsIntervalLithologyField;
            }
            set {
                this.cuttingsIntervalLithologyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of CuttingsGeologyInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of CuttingsGeologyInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class CuttingsGeology : AbstractObject {
        
        private MdInterval mdIntervalField;
        
        private ChannelStatus growingStatusField;
        
        private CuttingsGeologyInterval[] cuttingsIntervalField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>[maintained by the server] The interval which contains the minimum and maximum measured depths for all cuttings intervals in this cuttings geology.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("[maintained by the server] The interval which contains the minimum and maximum me" +
            "asured depths for all cuttings intervals in this cuttings geology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Describes the growing status of the cuttings, whether active, inactive or closed</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Describes the growing status of the cuttings, whether active, inactive or closed")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrowingStatus", DataType="ChannelStatus")]
        public ChannelStatus GrowingStatus {
            get {
                return this.growingStatusField;
            }
            set {
                this.growingStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CuttingsInterval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CuttingsInterval", DataType="CuttingsGeologyInterval")]
        public CuttingsGeologyInterval[] CuttingsInterval {
            get {
                return this.cuttingsIntervalField;
            }
            set {
                this.cuttingsIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class InterpretedGeologyInterval : AbstractObject {
        
        private MdInterval mdIntervalField;
        
        private Citation citation1Field;
        
        private GeochronologicalUnit[] geochronologicalUnitField;
        
        private LithostratigraphicUnit[] lithostratigraphicUnitField;
        
        private InterpretedIntervalLithology interpretedLithologyField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The measured depth interval which is described by this interpreted geology.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The measured depth interval which is described by this interpreted geology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Citation")]
        public Citation Citation1 {
            get {
                return this.citation1Field;
            }
            set {
                this.citation1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The name of a Geochronology, with the "kind" attribute specifying the geochronological time span.</summary>
        [System.Xml.Serialization.XmlElementAttribute("GeochronologicalUnit")]
        [System.ComponentModel.DescriptionAttribute("The name of a Geochronology, with the \"kind\" attribute specifying the geochronolo" +
            "gical time span.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeochronologicalUnit", DataType="GeochronologicalUnit")]
        public GeochronologicalUnit[] GeochronologicalUnit {
            get {
                return this.geochronologicalUnitField;
            }
            set {
                this.geochronologicalUnitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Specifies the unit of lithostratigraphy.</summary>
        [System.Xml.Serialization.XmlElementAttribute("LithostratigraphicUnit")]
        [System.ComponentModel.DescriptionAttribute("Specifies the unit of lithostratigraphy.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithostratigraphicUnit", DataType="LithostratigraphicUnit")]
        public LithostratigraphicUnit[] LithostratigraphicUnit {
            get {
                return this.lithostratigraphicUnitField;
            }
            set {
                this.lithostratigraphicUnitField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretedLithology", DataType="InterpretedIntervalLithology")]
        public InterpretedIntervalLithology InterpretedLithology {
            get {
                return this.interpretedLithologyField;
            }
            set {
                this.interpretedLithologyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of InterpretedGeologyInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of InterpretedGeologyInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class InterpretedGeology : AbstractObject {
        
        private MdInterval mdIntervalField;
        
        private ChannelStatus growingStatusField;
        
        private InterpretedGeologyInterval[] geologicIntervalInterpretedField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>[maintained by the server] The interval that contains the minimum and maximum measured depths for all interpreted intervals in this interpreted geology.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("[maintained by the server] The interval that contains the minimum and maximum mea" +
            "sured depths for all interpreted intervals in this interpreted geology.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Describes the growing status of the interpreted geology. Valid values: active, inactive or closed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Describes the growing status of the interpreted geology. Valid values: active, in" +
            "active or closed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrowingStatus", DataType="ChannelStatus")]
        public ChannelStatus GrowingStatus {
            get {
                return this.growingStatusField;
            }
            set {
                this.growingStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GeologicIntervalInterpreted")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologicIntervalInterpreted", DataType="InterpretedGeologyInterval")]
        public InterpretedGeologyInterval[] GeologicIntervalInterpreted {
            get {
                return this.geologicIntervalInterpretedField;
            }
            set {
                this.geologicIntervalInterpretedField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class ShowEvaluationInterval : AbstractObject {
        
        private MdInterval mdIntervalField;
        
        private Citation citation1Field;
        
        private ShowFluid showFluidField;
        
        private ShowRating showRatingField;
        
        private bool showRatingFieldSpecified;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>The measured depth interval over which the show is evaluated.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The measured depth interval over which the show is evaluated.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Citation")]
        public Citation Citation1 {
            get {
                return this.citation1Field;
            }
            set {
                this.citation1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Gas or oil exhibited at the show interval.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Gas or oil exhibited at the show interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShowFluid", DataType="ShowFluid")]
        public ShowFluid ShowFluid {
            get {
                return this.showFluidField;
            }
            set {
                this.showFluidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Quality of the fluid showing at this interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Quality of the fluid showing at this interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShowRating", DataType="ShowRating")]
        public ShowRating ShowRating {
            get {
                return this.showRatingField;
            }
            set {
                this.showRatingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShowRatingSpecified {
            get {
                return this.showRatingFieldSpecified;
            }
            set {
                this.showRatingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for this instance of ShowEvaluationInterval.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for this instance of ShowEvaluationInterval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ShowFluid {
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        oil,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class ShowEvaluation : AbstractObject {
        
        private MdInterval mdIntervalField;
        
        private ChannelStatus growingStatusField;
        
        private ShowEvaluationInterval[] evaluatedIntervalShowField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>[maintained by the server] The interval that contains the minimum and maximum measured depths for all show intervals in this show evaluation.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("[maintained by the server] The interval that contains the minimum and maximum mea" +
            "sured depths for all show intervals in this show evaluation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Describes the growing status of the show evaluation intervals. Valid values: active, inactive or closed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Describes the growing status of the show evaluation intervals. Valid values: acti" +
            "ve, inactive or closed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrowingStatus", DataType="ChannelStatus")]
        public ChannelStatus GrowingStatus {
            get {
                return this.growingStatusField;
            }
            set {
                this.growingStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EvaluatedIntervalShow")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EvaluatedIntervalShow", DataType="ShowEvaluationInterval")]
        public ShowEvaluationInterval[] EvaluatedIntervalShow {
            get {
                return this.evaluatedIntervalShowField;
            }
            set {
                this.evaluatedIntervalShowField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class WellboreGeology : AbstractObject {
        
        private MdInterval mdIntervalField;
        
        private ShowEvaluation showIntervalSetField;
        
        private InterpretedGeology interpretedGeologyIntervalSetField;
        
        private DataObjectReference wellboreField;
        
        private CuttingsGeology cuttingsIntervalSetField;
        
        /// <remarks/>
        /// <summary>[maintained by the server] The interval that contains the minimum and maximum measured depths for all wellbore geology types under this wellbore geology entry.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("[maintained by the server] The interval that contains the minimum and maximum mea" +
            "sured depths for all wellbore geology types under this wellbore geology entry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShowIntervalSet", DataType="ShowEvaluation")]
        public ShowEvaluation ShowIntervalSet {
            get {
                return this.showIntervalSetField;
            }
            set {
                this.showIntervalSetField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretedGeologyIntervalSet", DataType="InterpretedGeology")]
        public InterpretedGeology InterpretedGeologyIntervalSet {
            get {
                return this.interpretedGeologyIntervalSetField;
            }
            set {
                this.interpretedGeologyIntervalSetField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CuttingsIntervalSet", DataType="CuttingsGeology")]
        public CuttingsGeology CuttingsIntervalSet {
            get {
                return this.cuttingsIntervalSetField;
            }
            set {
                this.cuttingsIntervalSetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class DepthRegImage : AbstractObject {
        
        private FileNameType fileNameTypeField;
        
        private bool fileNameTypeFieldSpecified;
        
        private MimeType mimetypeField;
        
        private bool mimetypeFieldSpecified;
        
        private string fileNameField;
        
        private DigitalStorageMeasure fileSizeField;
        
        private MessageDigestType checksumField;
        
        private bool checksumFieldSpecified;
        
        private long imagePixelWidthField;
        
        private bool imagePixelWidthFieldSpecified;
        
        private long imagePixelHeightField;
        
        private bool imagePixelHeightFieldSpecified;
        
        private string versionField;
        
        private DepthRegRectangle imageBoundaryField;
        
        private DepthRegLogRect headerSectionField;
        
        private DepthRegLogSection[] logSectionField;
        
        private DepthRegLogRect[] alternateSectionField;
        
        private DataObjectReference wellboreField;
        
        private string uidField;
        
        /// <remarks/>
        /// <summary>Mimetype of image file content.</summary>
        [System.ComponentModel.DescriptionAttribute("Mimetype of image file content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FileNameType", DataType="FileNameType")]
        public FileNameType FileNameType {
            get {
                return this.fileNameTypeField;
            }
            set {
                this.fileNameTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FileNameTypeSpecified {
            get {
                return this.fileNameTypeFieldSpecified;
            }
            set {
                this.fileNameTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Mimetype of image file content.</summary>
        [System.ComponentModel.DescriptionAttribute("Mimetype of image file content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mimetype", DataType="MimeType")]
        public MimeType Mimetype {
            get {
                return this.mimetypeField;
            }
            set {
                this.mimetypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MimetypeSpecified {
            get {
                return this.mimetypeFieldSpecified;
            }
            set {
                this.mimetypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the file containing the image content.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the file containing the image content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FileName", DataType="String64")]
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of image file, in bytes.</summary>
        [System.ComponentModel.DescriptionAttribute("Size of image file, in bytes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FileSize", DataType="DigitalStorageMeasure")]
        public DigitalStorageMeasure FileSize {
            get {
                return this.fileSizeField;
            }
            set {
                this.fileSizeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Image file checksum.</summary>
        [System.ComponentModel.DescriptionAttribute("Image file checksum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Checksum", DataType="MessageDigestType")]
        public MessageDigestType Checksum {
            get {
                return this.checksumField;
            }
            set {
                this.checksumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChecksumSpecified {
            get {
                return this.checksumFieldSpecified;
            }
            set {
                this.checksumFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Image file width, in pixels.</summary>
        [System.ComponentModel.DescriptionAttribute("Image file width, in pixels.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ImagePixelWidth", DataType="NonNegativeLong")]
        public long ImagePixelWidth {
            get {
                return this.imagePixelWidthField;
            }
            set {
                this.imagePixelWidthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImagePixelWidthSpecified {
            get {
                return this.imagePixelWidthFieldSpecified;
            }
            set {
                this.imagePixelWidthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Image file height, in pixels.</summary>
        [System.ComponentModel.DescriptionAttribute("Image file height, in pixels.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ImagePixelHeight", DataType="NonNegativeLong")]
        public long ImagePixelHeight {
            get {
                return this.imagePixelHeightField;
            }
            set {
                this.imagePixelHeightField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ImagePixelHeightSpecified {
            get {
                return this.imagePixelHeightFieldSpecified;
            }
            set {
                this.imagePixelHeightFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>File version.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("File version.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Version", DataType="String64")]
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The bounding rectangle of the image</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The bounding rectangle of the image")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ImageBoundary", DataType="DepthRegRectangle")]
        public DepthRegRectangle ImageBoundary {
            get {
                return this.imageBoundaryField;
            }
            set {
                this.imageBoundaryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Log header information extracted from the well log image header section. Also contains X, Y coordinates and positional data with respect to the header section location within the log image file.</summary>
        [System.ComponentModel.DescriptionAttribute("Log header information extracted from the well log image header section. Also con" +
            "tains X, Y coordinates and positional data with respect to the header section lo" +
            "cation within the log image file.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HeaderSection", DataType="DepthRegLogRect")]
        public DepthRegLogRect HeaderSection {
            get {
                return this.headerSectionField;
            }
            set {
                this.headerSectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Provides log name, log type, curve scale and other information about each log section of the image file. Most importantly, this section contains the depth registration elements (CalibrationPoint) necessary for depth calibrating well log sections.</summary>
        [System.Xml.Serialization.XmlElementAttribute("LogSection")]
        [System.ComponentModel.DescriptionAttribute("Provides log name, log type, curve scale and other information about each log sec" +
            "tion of the image file. Most importantly, this section contains the depth regist" +
            "ration elements (CalibrationPoint) necessary for depth calibrating well log sect" +
            "ions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogSection", DataType="DepthRegLogSection")]
        public DepthRegLogSection[] LogSection {
            get {
                return this.logSectionField;
            }
            set {
                this.logSectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Provides a positional reference for sections of the image file not included in other elements of this object.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AlternateSection")]
        [System.ComponentModel.DescriptionAttribute("Provides a positional reference for sections of the image file not included in ot" +
            "her elements of this object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AlternateSection", DataType="DepthRegLogRect")]
        public DepthRegLogRect[] AlternateSection {
            get {
                return this.alternateSectionField;
            }
            set {
                this.alternateSectionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unique identifier for the registration image.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier for the registration image.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uid", DataType="String64")]
        public string uid {
            get {
                return this.uidField;
            }
            set {
                this.uidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum FileNameType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("file name")]
        filename,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("path name")]
        pathname,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("universal resource locator")]
        universalresourcelocator,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum MimeType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("image/tiff")]
        imagetiff,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("image/gif")]
        imagegif,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("image/png")]
        imagepng,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("image/xml+svg")]
        imagexmlsvg,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum MessageDigestType {
        
        /// <remarks/>
        MD5,
        
        /// <remarks/>
        SHA1,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class WellCMLedger : AbstractObject {
        
        private string parentEventIDField;
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private TimeMeasure durationField;
        
        private MdInterval mdIntervalField;
        
        private int eventOrderField;
        
        private bool eventOrderFieldSpecified;
        
        private string[] rigIDField;
        
        private DrillActivityCode activityCodeField;
        
        private bool activityCodeFieldSpecified;
        
        private EventType typeField;
        
        private bool isPlanField;
        
        private bool isPlanFieldSpecified;
        
        private string workOrderIDField;
        
        private string businessAssociateField;
        
        private string responsiblePersonField;
        
        private string contactField;
        
        private bool nonproductiveField;
        
        private bool nonproductiveFieldSpecified;
        
        private bool troubleField;
        
        private bool troubleFieldSpecified;
        
        private bool preventiveMaintenanceField;
        
        private bool preventiveMaintenanceFieldSpecified;
        
        private bool unplannedField;
        
        private bool unplannedFieldSpecified;
        
        private string phaseField;
        
        private string commentField;
        
        private string descriptionField;
        
        private DataObjectReference wellboreField;
        
        private AbstractEventExtension[] eventExtensionField;
        
        private DayCost[] costField;
        
        private EventType eventTypeField;
        
        private DownholeComponentReference downholeComponentReferenceField;
        
        private Participant participantField;
        
        /// <remarks/>
        /// <summary>Parent event reference id.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Parent event reference id.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentEventID", DataType="String64")]
        public string ParentEventID {
            get {
                return this.parentEventIDField;
            }
            set {
                this.parentEventIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that activities started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that activities were completed.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities were completed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The activity duration (commonly in hours).</summary>
        [System.ComponentModel.DescriptionAttribute("The activity duration (commonly in hours).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Duration", DataType="TimeMeasure")]
        public TimeMeasure Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth interval for this activity.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth interval for this activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdInterval", DataType="MdInterval")]
        public MdInterval MdInterval {
            get {
                return this.mdIntervalField;
            }
            set {
                this.mdIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Order number of event.</summary>
        [System.ComponentModel.DescriptionAttribute("Order number of event.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventOrder", DataType="int")]
        public int EventOrder {
            get {
                return this.eventOrderField;
            }
            set {
                this.eventOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool EventOrderSpecified {
            get {
                return this.eventOrderFieldSpecified;
            }
            set {
                this.eventOrderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rig reference id.</summary>
        [System.Xml.Serialization.XmlElementAttribute("RigID")]
        [System.ComponentModel.DescriptionAttribute("Rig reference id.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RigID", DataType="String64")]
        public string[] RigID {
            get {
                return this.rigIDField;
            }
            set {
                this.rigIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Activity code</summary>
        [System.ComponentModel.DescriptionAttribute("Activity code")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivityCode", DataType="DrillActivityCode")]
        public DrillActivityCode ActivityCode {
            get {
                return this.activityCodeField;
            }
            set {
                this.activityCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ActivityCodeSpecified {
            get {
                return this.activityCodeFieldSpecified;
            }
            set {
                this.activityCodeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment on type of this event, either referring to a job type or an  activity type e.g. a safety meeting.</summary>
        [System.ComponentModel.DescriptionAttribute("Comment on type of this event, either referring to a job type or an  activity typ" +
            "e e.g. a safety meeting.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Type", DataType="EventType")]
        public EventType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True if planned.</summary>
        [System.ComponentModel.DescriptionAttribute("True if planned.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsPlan", DataType="boolean")]
        public bool IsPlan {
            get {
                return this.isPlanField;
            }
            set {
                this.isPlanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsPlanSpecified {
            get {
                return this.isPlanFieldSpecified;
            }
            set {
                this.isPlanFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Extension event for work order id.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Extension event for work order id.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WorkOrderID", DataType="String64")]
        public string WorkOrderID {
            get {
                return this.workOrderIDField;
            }
            set {
                this.workOrderIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Service company or business</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Service company or business")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BusinessAssociate", DataType="String64")]
        public string BusinessAssociate {
            get {
                return this.businessAssociateField;
            }
            set {
                this.businessAssociateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name or information about person responsible who is implementing the service or job.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name or information about person responsible who is implementing the service or j" +
            "ob.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ResponsiblePerson", DataType="String64")]
        public string ResponsiblePerson {
            get {
                return this.responsiblePersonField;
            }
            set {
                this.responsiblePersonField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Contact name or person to get in touch with. Might not necessarily be the person responsible.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Contact name or person to get in touch with. Might not necessarily be the person " +
            "responsible.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Contact", DataType="String64")]
        public string Contact {
            get {
                return this.contactField;
            }
            set {
                this.contactField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True if event is not productive.</summary>
        [System.ComponentModel.DescriptionAttribute("True if event is not productive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nonproductive", DataType="boolean")]
        public bool Nonproductive {
            get {
                return this.nonproductiveField;
            }
            set {
                this.nonproductiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NonproductiveSpecified {
            get {
                return this.nonproductiveFieldSpecified;
            }
            set {
                this.nonproductiveFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True if event implies is in-trouble</summary>
        [System.ComponentModel.DescriptionAttribute("True if event implies is in-trouble")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Trouble", DataType="boolean")]
        public bool Trouble {
            get {
                return this.troubleField;
            }
            set {
                this.troubleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TroubleSpecified {
            get {
                return this.troubleFieldSpecified;
            }
            set {
                this.troubleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True of event is for preventive maintenance</summary>
        [System.ComponentModel.DescriptionAttribute("True of event is for preventive maintenance")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PreventiveMaintenance", DataType="boolean")]
        public bool PreventiveMaintenance {
            get {
                return this.preventiveMaintenanceField;
            }
            set {
                this.preventiveMaintenanceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PreventiveMaintenanceSpecified {
            get {
                return this.preventiveMaintenanceFieldSpecified;
            }
            set {
                this.preventiveMaintenanceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True if there is no planning infomation for this activity.</summary>
        [System.ComponentModel.DescriptionAttribute("True if there is no planning infomation for this activity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unplanned", DataType="boolean")]
        public bool Unplanned {
            get {
                return this.unplannedField;
            }
            set {
                this.unplannedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UnplannedSpecified {
            get {
                return this.unplannedFieldSpecified;
            }
            set {
                this.unplannedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Phase (large activity classification) e.g. Drill Surface Hole.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Phase (large activity classification) e.g. Drill Surface Hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phase", DataType="String64")]
        public string Phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Comment on this ledger</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Comment on this ledger")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="String2000")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of this ledger</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Description of this ledger")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="String2000")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EventExtension")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventExtension", DataType="AbstractEventExtension")]
        public AbstractEventExtension[] EventExtension {
            get {
                return this.eventExtensionField;
            }
            set {
                this.eventExtensionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Cost")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Cost", DataType="DayCost")]
        public DayCost[] Cost {
            get {
                return this.costField;
            }
            set {
                this.costField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EventType", DataType="EventType")]
        public EventType EventType {
            get {
                return this.eventTypeField;
            }
            set {
                this.eventTypeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DownholeComponentReference", DataType="DownholeComponentReference")]
        public DownholeComponentReference DownholeComponentReference {
            get {
                return this.downholeComponentReferenceField;
            }
            set {
                this.downholeComponentReferenceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Participant", DataType="Participant")]
        public Participant Participant {
            get {
                return this.participantField;
            }
            set {
                this.participantField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class OpsReport : AbstractObject {
        
        private string conditionHoleField;
        
        private Cost costDayField;
        
        private Cost costDayMudField;
        
        private LengthMeasure diaCsgLastField;
        
        private LengthMeasure diaHoleField;
        
        private LengthMeasure distDrillField;
        
        private LengthMeasure distDrillRotField;
        
        private LengthMeasure distDrillSlidField;
        
        private LengthMeasure distHoldField;
        
        private LengthMeasure distReamField;
        
        private LengthMeasure distSteeringField;
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private string engineerField;
        
        private TimeMeasure eTimCircField;
        
        private TimeMeasure eTimDrillField;
        
        private TimeMeasure eTimDrillRotField;
        
        private TimeMeasure eTimDrillSlidField;
        
        private TimeMeasure eTimHoldField;
        
        private TimeMeasure eTimLocField;
        
        private TimeMeasure eTimReamField;
        
        private TimeMeasure eTimSpudField;
        
        private TimeMeasure eTimStartField;
        
        private TimeMeasure eTimSteeringField;
        
        private string forecast24HrField;
        
        private string geologistField;
        
        private string lithologyField;
        
        private PressureMeasure maaspField;
        
        private MeasuredDepthCoord mdCsgLastField;
        
        private MeasuredDepthCoord mdPlannedField;
        
        private MeasuredDepthCoord mdReportField;
        
        private string nameFormationField;
        
        private string numAFEField;
        
        private int numContractField;
        
        private bool numContractFieldSpecified;
        
        private int numOperatorField;
        
        private bool numOperatorFieldSpecified;
        
        private int numPobField;
        
        private bool numPobFieldSpecified;
        
        private int numServiceField;
        
        private bool numServiceFieldSpecified;
        
        private PressureMeasure presKickTolField;
        
        private MassPerVolumeMeasure presLotEmwField;
        
        private string rigField;
        
        private LengthPerTimeMeasure ropAvField;
        
        private LengthPerTimeMeasure ropCurrentField;
        
        private string statusCurrentField;
        
        private string sum24HrField;
        
        private string supervisorField;
        
        private string tubularField;
        
        private WellVerticalDepthCoord tvdCsgLastField;
        
        private WellVerticalDepthCoord tvdLotField;
        
        private WellVerticalDepthCoord tvdReportField;
        
        private VolumeMeasure volKickTolField;
        
        private RigResponse rigResponseField;
        
        private ShakerOp[] shakerOpField;
        
        private Hse hseField;
        
        private SupportCraft[] supportCraftField;
        
        private Weather[] weatherField;
        
        private Inventory[] mudInventoryField;
        
        private DataObjectReference wellboreField;
        
        private MudVolume mudVolumeField;
        
        private Personnel[] personnelField;
        
        private DrillActivity[] activityField;
        
        private DrillingParams[] drillingParamsField;
        
        private DataObjectReference wbGeometryField;
        
        private DayCost[] dayCostField;
        
        private TrajectoryStation[] trajectoryStationField;
        
        private Fluid[] fluidField;
        
        private Scr[] scrField;
        
        private Inventory[] bulkInventoryField;
        
        private PitVolume[] pitVolumeField;
        
        private PumpOp[] pumpOpField;
        
        /// <remarks/>
        /// <summary>Hole condition description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Hole condition description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConditionHole", DataType="String64")]
        public string ConditionHole {
            get {
                return this.conditionHoleField;
            }
            set {
                this.conditionHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Daily cost.</summary>
        [System.ComponentModel.DescriptionAttribute("Daily cost.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostDay", DataType="Cost")]
        public Cost CostDay {
            get {
                return this.costDayField;
            }
            set {
                this.costDayField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Daily mud cost.</summary>
        [System.ComponentModel.DescriptionAttribute("Daily mud cost.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CostDayMud", DataType="Cost")]
        public Cost CostDayMud {
            get {
                return this.costDayMudField;
            }
            set {
                this.costDayMudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Diameter of the last casing installed.</summary>
        [System.ComponentModel.DescriptionAttribute("Diameter of the last casing installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaCsgLast", DataType="LengthMeasure")]
        public LengthMeasure DiaCsgLast {
            get {
                return this.diaCsgLastField;
            }
            set {
                this.diaCsgLastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hole diameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Hole diameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaHole", DataType="LengthMeasure")]
        public LengthMeasure DiaHole {
            get {
                return this.diaHoleField;
            }
            set {
                this.diaHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance drilled since the previous report.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance drilled since the previous report.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistDrill", DataType="LengthMeasure")]
        public LengthMeasure DistDrill {
            get {
                return this.distDrillField;
            }
            set {
                this.distDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance drilled: rotating.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance drilled: rotating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistDrillRot", DataType="LengthMeasure")]
        public LengthMeasure DistDrillRot {
            get {
                return this.distDrillRotField;
            }
            set {
                this.distDrillRotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance drilled: sliding.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance drilled: sliding.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistDrillSlid", DataType="LengthMeasure")]
        public LengthMeasure DistDrillSlid {
            get {
                return this.distDrillSlidField;
            }
            set {
                this.distDrillSlidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance covered while holding angle with a steerable drilling assembly.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance covered while holding angle with a steerable drilling assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistHold", DataType="LengthMeasure")]
        public LengthMeasure DistHold {
            get {
                return this.distHoldField;
            }
            set {
                this.distHoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance reamed.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance reamed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistReam", DataType="LengthMeasure")]
        public LengthMeasure DistReam {
            get {
                return this.distReamField;
            }
            set {
                this.distReamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Distance covered while actively steering with a steerable drilling assembly.</summary>
        [System.ComponentModel.DescriptionAttribute("Distance covered while actively steering with a steerable drilling assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DistSteering", DataType="LengthMeasure")]
        public LengthMeasure DistSteering {
            get {
                return this.distSteeringField;
            }
            set {
                this.distSteeringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the engineer.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the engineer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Engineer", DataType="String64")]
        public string Engineer {
            get {
                return this.engineerField;
            }
            set {
                this.engineerField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent circulating from start of the bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent circulating from start of the bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimCirc", DataType="TimeMeasure")]
        public TimeMeasure ETimCirc {
            get {
                return this.eTimCircField;
            }
            set {
                this.eTimCircField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Drilling time.</summary>
        [System.ComponentModel.DescriptionAttribute("Drilling time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimDrill", DataType="TimeMeasure")]
        public TimeMeasure ETimDrill {
            get {
                return this.eTimDrillField;
            }
            set {
                this.eTimDrillField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent rotary drilling for the report interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent rotary drilling for the report interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimDrillRot", DataType="TimeMeasure")]
        public TimeMeasure ETimDrillRot {
            get {
                return this.eTimDrillRotField;
            }
            set {
                this.eTimDrillRotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent slide drilling from start of the bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent slide drilling from start of the bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimDrillSlid", DataType="TimeMeasure")]
        public TimeMeasure ETimDrillSlid {
            get {
                return this.eTimDrillSlidField;
            }
            set {
                this.eTimDrillSlidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent with no directional drilling work (commonly in hours).</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent with no directional drilling work (commonly in hours).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimHold", DataType="TimeMeasure")]
        public TimeMeasure ETimHold {
            get {
                return this.eTimHoldField;
            }
            set {
                this.eTimHoldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time the rig has been on location (commonly in days).</summary>
        [System.ComponentModel.DescriptionAttribute("Time the rig has been on location (commonly in days).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimLoc", DataType="TimeMeasure")]
        public TimeMeasure ETimLoc {
            get {
                return this.eTimLocField;
            }
            set {
                this.eTimLocField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent reaming from start of the bit run.</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent reaming from start of the bit run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimReam", DataType="TimeMeasure")]
        public TimeMeasure ETimReam {
            get {
                return this.eTimReamField;
            }
            set {
                this.eTimReamField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time since the bit broke ground (commonly in days).</summary>
        [System.ComponentModel.DescriptionAttribute("Time since the bit broke ground (commonly in days).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimSpud", DataType="TimeMeasure")]
        public TimeMeasure ETimSpud {
            get {
                return this.eTimSpudField;
            }
            set {
                this.eTimSpudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time from the start of operations (commonly in days).</summary>
        [System.ComponentModel.DescriptionAttribute("Time from the start of operations (commonly in days).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimStart", DataType="TimeMeasure")]
        public TimeMeasure ETimStart {
            get {
                return this.eTimStartField;
            }
            set {
                this.eTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Time spent steering the bottomhole assembly (commonly in hours).</summary>
        [System.ComponentModel.DescriptionAttribute("Time spent steering the bottomhole assembly (commonly in hours).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimSteering", DataType="TimeMeasure")]
        public TimeMeasure ETimSteering {
            get {
                return this.eTimSteeringField;
            }
            set {
                this.eTimSteeringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Forecast of activities for the next 24 hrs.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Forecast of activities for the next 24 hrs.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Forecast24Hr", DataType="String2000")]
        public string Forecast24Hr {
            get {
                return this.forecast24HrField;
            }
            set {
                this.forecast24HrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the operator's wellsite geologist.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the operator\'s wellsite geologist.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geologist", DataType="String64")]
        public string Geologist {
            get {
                return this.geologistField;
            }
            set {
                this.geologistField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Description of the lithology for the interval.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Description of the lithology for the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Lithology", DataType="String64")]
        public string Lithology {
            get {
                return this.lithologyField;
            }
            set {
                this.lithologyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum allowable shut-in casing pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum allowable shut-in casing pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Maasp", DataType="PressureMeasure")]
        public PressureMeasure Maasp {
            get {
                return this.maaspField;
            }
            set {
                this.maaspField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of last casing.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of last casing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdCsgLast", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdCsgLast {
            get {
                return this.mdCsgLastField;
            }
            set {
                this.mdCsgLastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of plan for this day number.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of plan for this day number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdPlanned", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdPlanned {
            get {
                return this.mdPlannedField;
            }
            set {
                this.mdPlannedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdReport", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdReport {
            get {
                return this.mdReportField;
            }
            set {
                this.mdReportField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the formation.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the formation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameFormation", DataType="String64")]
        public string NameFormation {
            get {
                return this.nameFormationField;
            }
            set {
                this.nameFormationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Authorization for expenditure (AFE) number that this cost item applies to.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Authorization for expenditure (AFE) number that this cost item applies to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumAFE", DataType="String64")]
        public string NumAFE {
            get {
                return this.numAFEField;
            }
            set {
                this.numAFEField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of contractor personnel on board the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of contractor personnel on board the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumContract", DataType="int")]
        public int NumContract {
            get {
                return this.numContractField;
            }
            set {
                this.numContractField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumContractSpecified {
            get {
                return this.numContractFieldSpecified;
            }
            set {
                this.numContractFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of operator personnel on board the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of operator personnel on board the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumOperator", DataType="int")]
        public int NumOperator {
            get {
                return this.numOperatorField;
            }
            set {
                this.numOperatorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumOperatorSpecified {
            get {
                return this.numOperatorFieldSpecified;
            }
            set {
                this.numOperatorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total number of personnel on board the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Total number of personnel on board the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumPob", DataType="int")]
        public int NumPob {
            get {
                return this.numPobField;
            }
            set {
                this.numPobField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumPobSpecified {
            get {
                return this.numPobFieldSpecified;
            }
            set {
                this.numPobFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of service company personnel on board the rig.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of service company personnel on board the rig.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumService", DataType="int")]
        public int NumService {
            get {
                return this.numServiceField;
            }
            set {
                this.numServiceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumServiceSpecified {
            get {
                return this.numServiceFieldSpecified;
            }
            set {
                this.numServiceFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Kick tolerance pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Kick tolerance pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresKickTol", DataType="PressureMeasure")]
        public PressureMeasure PresKickTol {
            get {
                return this.presKickTolField;
            }
            set {
                this.presKickTolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Leak off test equivalent mud weight.</summary>
        [System.ComponentModel.DescriptionAttribute("Leak off test equivalent mud weight.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresLotEmw", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure PresLotEmw {
            get {
                return this.presLotEmwField;
            }
            set {
                this.presLotEmwField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the rig used in this reporting period.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the rig used in this reporting period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Rig", DataType="String64")]
        public string Rig {
            get {
                return this.rigField;
            }
            set {
                this.rigField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Average rate of penetration through the interval.</summary>
        [System.ComponentModel.DescriptionAttribute("Average rate of penetration through the interval.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RopAv", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure RopAv {
            get {
                return this.ropAvField;
            }
            set {
                this.ropAvField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Rate of penetration at report time.</summary>
        [System.ComponentModel.DescriptionAttribute("Rate of penetration at report time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RopCurrent", DataType="LengthPerTimeMeasure")]
        public LengthPerTimeMeasure RopCurrent {
            get {
                return this.ropCurrentField;
            }
            set {
                this.ropCurrentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Current status description.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Current status description.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusCurrent", DataType="String2000")]
        public string StatusCurrent {
            get {
                return this.statusCurrentField;
            }
            set {
                this.statusCurrentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Summary of the operations and events for the reporting period (the previous 24 hours).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Summary of the operations and events for the reporting period (the previous 24 ho" +
            "urs).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sum24Hr", DataType="String2000")]
        public string Sum24Hr {
            get {
                return this.sum24HrField;
            }
            set {
                this.sum24HrField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the operator's rig supervisor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the operator\'s rig supervisor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Supervisor", DataType="String64")]
        public string Supervisor {
            get {
                return this.supervisorField;
            }
            set {
                this.supervisorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the tubular assembly (as specified in the Tubular object) used in this report period.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A pointer to the tubular assembly (as specified in the Tubular object) used in th" +
            "is report period.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tubular", DataType="String64")]
        public string Tubular {
            get {
                return this.tubularField;
            }
            set {
                this.tubularField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the last casing installed.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the last casing installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdCsgLast", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdCsgLast {
            get {
                return this.tvdCsgLastField;
            }
            set {
                this.tvdCsgLastField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the leak-off test point.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the leak-off test point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdLot", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdLot {
            get {
                return this.tvdLotField;
            }
            set {
                this.tvdLotField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdReport", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdReport {
            get {
                return this.tvdReportField;
            }
            set {
                this.tvdReportField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Kick tolerance volume.</summary>
        [System.ComponentModel.DescriptionAttribute("Kick tolerance volume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolKickTol", DataType="VolumeMeasure")]
        public VolumeMeasure VolKickTol {
            get {
                return this.volKickTolField;
            }
            set {
                this.volKickTolField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RigResponse", DataType="RigResponse")]
        public RigResponse RigResponse {
            get {
                return this.rigResponseField;
            }
            set {
                this.rigResponseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ShakerOp")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShakerOp", DataType="ShakerOp")]
        public ShakerOp[] ShakerOp {
            get {
                return this.shakerOpField;
            }
            set {
                this.shakerOpField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Hse", DataType="Hse")]
        public Hse Hse {
            get {
                return this.hseField;
            }
            set {
                this.hseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SupportCraft")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportCraft", DataType="SupportCraft")]
        public SupportCraft[] SupportCraft {
            get {
                return this.supportCraftField;
            }
            set {
                this.supportCraftField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Weather")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Weather", DataType="Weather")]
        public Weather[] Weather {
            get {
                return this.weatherField;
            }
            set {
                this.weatherField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MudInventory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudInventory", DataType="Inventory")]
        public Inventory[] MudInventory {
            get {
                return this.mudInventoryField;
            }
            set {
                this.mudInventoryField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MudVolume", DataType="MudVolume")]
        public MudVolume MudVolume {
            get {
                return this.mudVolumeField;
            }
            set {
                this.mudVolumeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Personnel")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Personnel", DataType="Personnel")]
        public Personnel[] Personnel {
            get {
                return this.personnelField;
            }
            set {
                this.personnelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Activity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Activity", DataType="DrillActivity")]
        public DrillActivity[] Activity {
            get {
                return this.activityField;
            }
            set {
                this.activityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DrillingParams")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DrillingParams", DataType="DrillingParams")]
        public DrillingParams[] DrillingParams {
            get {
                return this.drillingParamsField;
            }
            set {
                this.drillingParamsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WbGeometry", DataType="DataObjectReference")]
        public DataObjectReference WbGeometry {
            get {
                return this.wbGeometryField;
            }
            set {
                this.wbGeometryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DayCost")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DayCost", DataType="DayCost")]
        public DayCost[] DayCost {
            get {
                return this.dayCostField;
            }
            set {
                this.dayCostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TrajectoryStation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TrajectoryStation", DataType="TrajectoryStation")]
        public TrajectoryStation[] TrajectoryStation {
            get {
                return this.trajectoryStationField;
            }
            set {
                this.trajectoryStationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Fluid")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Fluid", DataType="Fluid")]
        public Fluid[] Fluid {
            get {
                return this.fluidField;
            }
            set {
                this.fluidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Scr")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Scr", DataType="Scr")]
        public Scr[] Scr {
            get {
                return this.scrField;
            }
            set {
                this.scrField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BulkInventory")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BulkInventory", DataType="Inventory")]
        public Inventory[] BulkInventory {
            get {
                return this.bulkInventoryField;
            }
            set {
                this.bulkInventoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PitVolume")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PitVolume", DataType="PitVolume")]
        public PitVolume[] PitVolume {
            get {
                return this.pitVolumeField;
            }
            set {
                this.pitVolumeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PumpOp")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PumpOp", DataType="PumpOp")]
        public PumpOp[] PumpOp {
            get {
                return this.pumpOpField;
            }
            set {
                this.pumpOpField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Trajectory : AbstractObject {
        
        private ChannelStatus growingStatusField;
        
        private Energistics.DataAccess.Timestamp dTimTrajStartField;
        
        private Energistics.DataAccess.Timestamp dTimTrajEndField;
        
        private MeasuredDepthCoord mdMnField;
        
        private MeasuredDepthCoord mdMxField;
        
        private string serviceCompanyField;
        
        private PlaneAngleMeasure magDeclUsedField;
        
        private PlaneAngleMeasure gridConUsedField;
        
        private PlaneAngleMeasure aziVertSectField;
        
        private LengthMeasure dispNsVertSectOrigField;
        
        private LengthMeasure dispEwVertSectOrigField;
        
        private bool definitiveField;
        
        private bool definitiveFieldSpecified;
        
        private bool memoryField;
        
        private bool memoryFieldSpecified;
        
        private bool finalTrajField;
        
        private bool finalTrajFieldSpecified;
        
        private AziRef aziRefField;
        
        private bool aziRefFieldSpecified;
        
        private TrajectoryStation[] trajectoryStationField;
        
        private DataObjectReference wellboreField;
        
        private DataObjectReference parentTrajectoryField;
        
        /// <remarks/>
        /// <summary>Describes the growing status of the trajectory, whether active, inactive or closed</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Describes the growing status of the trajectory, whether active, inactive or close" +
            "d")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrowingStatus", DataType="ChannelStatus")]
        public ChannelStatus GrowingStatus {
            get {
                return this.growingStatusField;
            }
            set {
                this.growingStatusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start date and time of trajectory station measurements. Note that this is NOT a server query parameter.</summary>
        [System.ComponentModel.DescriptionAttribute("Start date and time of trajectory station measurements. Note that this is NOT a s" +
            "erver query parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimTrajStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimTrajStart {
            get {
                return this.dTimTrajStartField;
            }
            set {
                this.dTimTrajStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>End date and time of trajectory station measurements. Note that this is NOT a server query parameter.</summary>
        [System.ComponentModel.DescriptionAttribute("End date and time of trajectory station measurements. Note that this is NOT a ser" +
            "ver query parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimTrajEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimTrajEnd {
            get {
                return this.dTimTrajEndField;
            }
            set {
                this.dTimTrajEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum measured depth of this object. This is an API "structural-range" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.</summary>
        [System.ComponentModel.DescriptionAttribute("Minimum measured depth of this object. This is an API \"structural-range\" query pa" +
            "rameter for growing objects.  See the relevant API specification for the query b" +
            "ehavior related to this element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdMn", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdMn {
            get {
                return this.mdMnField;
            }
            set {
                this.mdMnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum measured depth of this object. This is an API "structural-range" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum measured depth of this object. This is an API \"structural-range\" query pa" +
            "rameter for growing objects.  See the relevant API specification for the query b" +
            "ehavior related to this element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdMx", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdMx {
            get {
                return this.mdMxField;
            }
            set {
                this.mdMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of contractor who provided the service.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of contractor who provided the service.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ServiceCompany", DataType="String64")]
        public string ServiceCompany {
            get {
                return this.serviceCompanyField;
            }
            set {
                this.serviceCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.  Starting value if stations have individual values.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Magnetic declination used to correct a Magnetic North referenced azimuth  to a True North azimuth.  Magnetic declination angles are measured positive clockwise  from True North to Magnetic North (or negative in the anti-clockwise direction).  To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added.  Starting value if stations have individual values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MagDeclUsed", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure MagDeclUsed {
            get {
                return this.magDeclUsedField;
            }
            set {
                this.magDeclUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Magnetic declination (convergence) used to correct a Magnetic North referenced azimuth to a True North azimuth.  Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Magnetic declination (convergence) used to correct a Magnetic North referenced azimuth to a True North azimuth.  Magnetic declination angles are measured positive clockwise from True North to Magnetic North (or negative in the anti-clockwise direction). To convert a Magnetic azimuth to a True North azimuth, the magnetic declination should be added. Starting value if stations have individual values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GridConUsed", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure GridConUsed {
            get {
                return this.gridConUsedField;
            }
            set {
                this.gridConUsedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Azimuth used for vertical section plot/computations.</summary>
        [System.ComponentModel.DescriptionAttribute("Azimuth used for vertical section plot/computations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziVertSect", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure AziVertSect {
            get {
                return this.aziVertSectField;
            }
            set {
                this.aziVertSectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Origin north-south used for vertical section plot/computations.</summary>
        [System.ComponentModel.DescriptionAttribute("Origin north-south used for vertical section plot/computations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DispNsVertSectOrig", DataType="LengthMeasure")]
        public LengthMeasure DispNsVertSectOrig {
            get {
                return this.dispNsVertSectOrigField;
            }
            set {
                this.dispNsVertSectOrigField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Origin east-west used for vertical section plot/computations.</summary>
        [System.ComponentModel.DescriptionAttribute("Origin east-west used for vertical section plot/computations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DispEwVertSectOrig", DataType="LengthMeasure")]
        public LengthMeasure DispEwVertSectOrig {
            get {
                return this.dispEwVertSectOrigField;
            }
            set {
                this.dispEwVertSectOrigField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True ("true" or "1") indicates that this trajectory is definitive for  this wellbore. False ("false" or "0") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute(@"True (""true"" or ""1"") indicates that this trajectory is definitive for  this wellbore. False (""false"" or ""0"") or not given indicates otherwise. There can only be one trajectory per wellbore with definitive=true and it must define the geometry of the whole wellbore (surface to bottom). The definitive trajectory may represent a composite of information in many other trajectories. A query requesting a subset of the possible information can provide a simplistic view of the geometry of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Definitive", DataType="boolean")]
        public bool Definitive {
            get {
                return this.definitiveField;
            }
            set {
                this.definitiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DefinitiveSpecified {
            get {
                return this.definitiveFieldSpecified;
            }
            set {
                this.definitiveFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is trajectory a result of a memory dump from a tool?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is trajectory a result of a memory dump from a tool?   Values are \"true\" (or \"1\")" +
            " and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Memory", DataType="boolean")]
        public bool Memory {
            get {
                return this.memoryField;
            }
            set {
                this.memoryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MemorySpecified {
            get {
                return this.memoryFieldSpecified;
            }
            set {
                this.memoryFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is trajectory a final or intermediate/preliminary?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is trajectory a final or intermediate/preliminary?   Values are \"true\" (or \"1\") a" +
            "nd \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FinalTraj", DataType="boolean")]
        public bool FinalTraj {
            get {
                return this.finalTrajField;
            }
            set {
                this.finalTrajField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FinalTrajSpecified {
            get {
                return this.finalTrajFieldSpecified;
            }
            set {
                this.finalTrajFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Specifies the definition of north. While this is optional because of legacy data, it is strongly recommended  that this always be specified.</summary>
        [System.ComponentModel.DescriptionAttribute("Specifies the definition of north. While this is optional because of legacy data," +
            " it is strongly recommended  that this always be specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AziRef", DataType="AziRef")]
        public AziRef AziRef {
            get {
                return this.aziRefField;
            }
            set {
                this.aziRefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AziRefSpecified {
            get {
                return this.aziRefFieldSpecified;
            }
            set {
                this.aziRefFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TrajectoryStation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TrajectoryStation", DataType="TrajectoryStation")]
        public TrajectoryStation[] TrajectoryStation {
            get {
                return this.trajectoryStationField;
            }
            set {
                this.trajectoryStationField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentTrajectory", DataType="DataObjectReference")]
        public DataObjectReference ParentTrajectory {
            get {
                return this.parentTrajectoryField;
            }
            set {
                this.parentTrajectoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum AziRef {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic north")]
        magneticnorth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grid north")]
        gridnorth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("true north")]
        truenorth,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class ToolErrorModel : AbstractObject {
        
        private TypeSurveyTool typeSurveyToolField;
        
        private bool typeSurveyToolFieldSpecified;
        
        private string useErrorTermSetField;
        
        private IscwsaAuthorizationData authorizationField;
        
        private IscwsaSurveyToolOperatingCondition[] operatingConditionField;
        
        private IscwsaSurveyToolOperatingInterval[] operatingIntervalField;
        
        private IscwsaModelParameters modelParametersField;
        
        private IscwsaErrorTermValue[] errorTermValueField;
        
        /// <remarks/>
        /// <summary>The type of tool used for the measurements. This is the same list as defined for a trajectoryStation.</summary>
        [System.ComponentModel.DescriptionAttribute("The type of tool used for the measurements. This is the same list as defined for " +
            "a trajectoryStation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeSurveyTool", DataType="TypeSurveyTool")]
        public TypeSurveyTool TypeSurveyTool {
            get {
                return this.typeSurveyToolField;
            }
            set {
                this.typeSurveyToolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeSurveyToolSpecified {
            get {
                return this.typeSurveyToolFieldSpecified;
            }
            set {
                this.typeSurveyToolFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to the toolErrorTermSet object that  contains the error terms used in this model.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Reference to the toolErrorTermSet object that  contains the error terms used in t" +
            "his model.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseErrorTermSet", DataType="String64")]
        public string UseErrorTermSet {
            get {
                return this.useErrorTermSetField;
            }
            set {
                this.useErrorTermSetField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Authorization", DataType="IscwsaAuthorizationData")]
        public IscwsaAuthorizationData Authorization {
            get {
                return this.authorizationField;
            }
            set {
                this.authorizationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OperatingCondition")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperatingCondition", DataType="IscwsaSurveyToolOperatingCondition")]
        public IscwsaSurveyToolOperatingCondition[] OperatingCondition {
            get {
                return this.operatingConditionField;
            }
            set {
                this.operatingConditionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("OperatingInterval")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperatingInterval", DataType="IscwsaSurveyToolOperatingInterval")]
        public IscwsaSurveyToolOperatingInterval[] OperatingInterval {
            get {
                return this.operatingIntervalField;
            }
            set {
                this.operatingIntervalField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ModelParameters", DataType="IscwsaModelParameters")]
        public IscwsaModelParameters ModelParameters {
            get {
                return this.modelParametersField;
            }
            set {
                this.modelParametersField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ErrorTermValue")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ErrorTermValue", DataType="IscwsaErrorTermValue")]
        public IscwsaErrorTermValue[] ErrorTermValue {
            get {
                return this.errorTermValueField;
            }
            set {
                this.errorTermValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class DownholeComponent : AbstractObject {
        
        private Energistics.DataAccess.Timestamp startDateField;
        
        private Energistics.DataAccess.Timestamp endDateField;
        
        private DownholeString[] downholeStringSetField;
        
        private PerforationSet[] perforationSetsField;
        
        private Equipment[] equipmentSetField;
        
        private DataObjectReference wellField;
        
        private DownholeString wellHeadField;
        
        private BoreholeString[] boreholeStringSetField;
        
        /// <remarks/>
        /// <summary>The date this equipment was installed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date this equipment was installed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date the equipment was removed.</summary>
        [System.ComponentModel.DescriptionAttribute("The date the equipment was removed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DownholeStringSet", DataType="DownholeStringSet")]
        public DownholeString[] DownholeStringSet {
            get {
                return this.downholeStringSetField;
            }
            set {
                this.downholeStringSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerforationSets", DataType="PerforationSets")]
        public PerforationSet[] PerforationSets {
            get {
                return this.perforationSetsField;
            }
            set {
                this.perforationSetsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipmentSet", DataType="EquipmentSet")]
        public Equipment[] EquipmentSet {
            get {
                return this.equipmentSetField;
            }
            set {
                this.equipmentSetField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Well", DataType="DataObjectReference")]
        public DataObjectReference Well {
            get {
                return this.wellField;
            }
            set {
                this.wellField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellHead", DataType="DownholeString")]
        public DownholeString WellHead {
            get {
                return this.wellHeadField;
            }
            set {
                this.wellHeadField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BoreholeStringSet", DataType="BoreholeStringSet")]
        public BoreholeString[] BoreholeStringSet {
            get {
                return this.boreholeStringSetField;
            }
            set {
                this.boreholeStringSetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class CementJob : AbstractObject {
        
        private CementJobType jobTypeField;
        
        private bool jobTypeFieldSpecified;
        
        private string jobConfigField;
        
        private string nameCementedStringField;
        
        private string nameWorkStringField;
        
        private bool offshoreJobField;
        
        private bool offshoreJobFieldSpecified;
        
        private LengthMeasure mdWaterField;
        
        private bool returnsToSeabedField;
        
        private bool returnsToSeabedFieldSpecified;
        
        private MeasuredDepthCoord mdPrevShoeField;
        
        private MeasuredDepthCoord mdHoleField;
        
        private WellVerticalDepthCoord tvdPrevShoeField;
        
        private MeasuredDepthCoord mdStringSetField;
        
        private WellVerticalDepthCoord tvdStringSetField;
        
        private string typePlugField;
        
        private string nameCementStringField;
        
        private string typeSqueezeField;
        
        private MeasuredDepthCoord mdSqueezeField;
        
        private string toolCompanyField;
        
        private string typeToolField;
        
        private bool coilTubingField;
        
        private bool coilTubingFieldSpecified;
        
        private CementJobReport jobReportField;
        
        private DataObjectReference wellboreField;
        
        private DataObjectReference holeConfigField;
        
        private CementJobDesign designField;
        
        private CementingFluid[] cementingFluidField;
        
        /// <remarks/>
        /// <summary>Type of cement job.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of cement job.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobType", DataType="CementJobType")]
        public CementJobType JobType {
            get {
                return this.jobTypeField;
            }
            set {
                this.jobTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool JobTypeSpecified {
            get {
                return this.jobTypeFieldSpecified;
            }
            set {
                this.jobTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Job configuration.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Job configuration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobConfig", DataType="String2000")]
        public string JobConfig {
            get {
                return this.jobConfigField;
            }
            set {
                this.jobConfigField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name for the cemented string</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name for the cemented string")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameCementedString", DataType="String64")]
        public string NameCementedString {
            get {
                return this.nameCementedStringField;
            }
            set {
                this.nameCementedStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name for the cement work string</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name for the cement work string")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameWorkString", DataType="String64")]
        public string NameWorkString {
            get {
                return this.nameWorkStringField;
            }
            set {
                this.nameWorkStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Offshore job? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Offshore job? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OffshoreJob", DataType="boolean")]
        public bool OffshoreJob {
            get {
                return this.offshoreJobField;
            }
            set {
                this.offshoreJobField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool OffshoreJobSpecified {
            get {
                return this.offshoreJobFieldSpecified;
            }
            set {
                this.offshoreJobFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water depth if offshore. The distance from mean sea level to water bottom (seabed floor).</summary>
        [System.ComponentModel.DescriptionAttribute("Water depth if offshore. The distance from mean sea level to water bottom (seabed" +
            " floor).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdWater", DataType="LengthMeasure")]
        public LengthMeasure MdWater {
            get {
                return this.mdWaterField;
            }
            set {
                this.mdWaterField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Returns to seabed? Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Returns to seabed? Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReturnsToSeabed", DataType="boolean")]
        public bool ReturnsToSeabed {
            get {
                return this.returnsToSeabedField;
            }
            set {
                this.returnsToSeabedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ReturnsToSeabedSpecified {
            get {
                return this.returnsToSeabedFieldSpecified;
            }
            set {
                this.returnsToSeabedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of previous shoe.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of previous shoe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdPrevShoe", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdPrevShoe {
            get {
                return this.mdPrevShoeField;
            }
            set {
                this.mdPrevShoeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at bottom of hole.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth at bottom of hole.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdHole", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdHole {
            get {
                return this.mdHoleField;
            }
            set {
                this.mdHoleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of previous shoe.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of previous shoe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdPrevShoe", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdPrevShoe {
            get {
                return this.tvdPrevShoeField;
            }
            set {
                this.tvdPrevShoeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of cement string shoe.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of cement string shoe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdStringSet", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdStringSet {
            get {
                return this.mdStringSetField;
            }
            set {
                this.mdStringSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True vertical depth of cement string shoe.</summary>
        [System.ComponentModel.DescriptionAttribute("True vertical depth of cement string shoe.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdStringSet", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdStringSet {
            get {
                return this.tvdStringSetField;
            }
            set {
                this.tvdStringSetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Plug type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Plug type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypePlug", DataType="String64")]
        public string TypePlug {
            get {
                return this.typePlugField;
            }
            set {
                this.typePlugField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name for the cementing string</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name for the cementing string")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameCementString", DataType="String64")]
        public string NameCementString {
            get {
                return this.nameCementStringField;
            }
            set {
                this.nameCementStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of squeeze.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Type of squeeze.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeSqueeze", DataType="String64")]
        public string TypeSqueeze {
            get {
                return this.typeSqueezeField;
            }
            set {
                this.typeSqueezeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth of squeeze.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth of squeeze.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdSqueeze", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdSqueeze {
            get {
                return this.mdSqueezeField;
            }
            set {
                this.mdSqueezeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Company providing the cementing tool.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Company providing the cementing tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolCompany", DataType="String64")]
        public string ToolCompany {
            get {
                return this.toolCompanyField;
            }
            set {
                this.toolCompanyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cement tool type.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Cement tool type.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeTool", DataType="String64")]
        public string TypeTool {
            get {
                return this.typeToolField;
            }
            set {
                this.typeToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is coiled tubing used?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is coiled tubing used?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoilTubing", DataType="boolean")]
        public bool CoilTubing {
            get {
                return this.coilTubingField;
            }
            set {
                this.coilTubingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CoilTubingSpecified {
            get {
                return this.coilTubingFieldSpecified;
            }
            set {
                this.coilTubingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobReport", DataType="CementJobReport")]
        public CementJobReport JobReport {
            get {
                return this.jobReportField;
            }
            set {
                this.jobReportField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HoleConfig", DataType="DataObjectReference")]
        public DataObjectReference HoleConfig {
            get {
                return this.holeConfigField;
            }
            set {
                this.holeConfigField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Design", DataType="CementJobDesign")]
        public CementJobDesign Design {
            get {
                return this.designField;
            }
            set {
                this.designField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CementingFluid")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementingFluid", DataType="CementingFluid")]
        public CementingFluid[] CementingFluid {
            get {
                return this.cementingFluidField;
            }
            set {
                this.cementingFluidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum CementJobType {
        
        /// <remarks/>
        primary,
        
        /// <remarks/>
        plug,
        
        /// <remarks/>
        squeeze,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class CementJobEvaluation : AbstractObject {
        
        private PressureMeasure presTestField;
        
        private TimeMeasure eTimTestField;
        
        private bool cementShoeCollarField;
        
        private bool cementShoeCollarFieldSpecified;
        
        private bool cetRunField;
        
        private bool cetRunFieldSpecified;
        
        private bool cetBondQualField;
        
        private bool cetBondQualFieldSpecified;
        
        private bool cblRunField;
        
        private bool cblRunFieldSpecified;
        
        private bool cblBondQualField;
        
        private bool cblBondQualFieldSpecified;
        
        private PressureMeasure cblPresField;
        
        private bool tempSurveyField;
        
        private bool tempSurveyFieldSpecified;
        
        private TimeMeasure eTimCementLogField;
        
        private ForcePerVolumeMeasure formPitField;
        
        private string toolCompanyPitField;
        
        private TimeMeasure eTimPitStartField;
        
        private MeasuredDepthCoord mdCementTopField;
        
        private string topCementMethodField;
        
        private bool tocOKField;
        
        private bool tocOKFieldSpecified;
        
        private string jobRatingField;
        
        private bool remedialCementField;
        
        private bool remedialCementFieldSpecified;
        
        private int numRemedialField;
        
        private bool numRemedialFieldSpecified;
        
        private string failureMethodField;
        
        private LengthMeasure linerTopField;
        
        private LengthMeasure linerLapField;
        
        private TimeMeasure eTimBeforeTestField;
        
        private string testNegativeToolField;
        
        private MassPerVolumeMeasure testNegativeEmwField;
        
        private string testPositiveToolField;
        
        private MassPerVolumeMeasure testPositiveEmwField;
        
        private bool cementFoundOnToolField;
        
        private bool cementFoundOnToolFieldSpecified;
        
        private MeasuredDepthCoord mdDVToolField;
        
        private DataObjectReference cementJobField;
        
        /// <remarks/>
        /// <summary>Test pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Test pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PresTest", DataType="PressureMeasure")]
        public PressureMeasure PresTest {
            get {
                return this.presTestField;
            }
            set {
                this.presTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Elapsed tome to perform the test.</summary>
        [System.ComponentModel.DescriptionAttribute("Elapsed tome to perform the test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimTest", DataType="TimeMeasure")]
        public TimeMeasure ETimTest {
            get {
                return this.eTimTestField;
            }
            set {
                this.eTimTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cement found between shoe and collar?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Cement found between shoe and collar?   Values are \"true\" (or \"1\") and \"false\" (o" +
            "r \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementShoeCollar", DataType="boolean")]
        public bool CementShoeCollar {
            get {
                return this.cementShoeCollarField;
            }
            set {
                this.cementShoeCollarField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CementShoeCollarSpecified {
            get {
                return this.cementShoeCollarFieldSpecified;
            }
            set {
                this.cementShoeCollarFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cement evaluation tool run?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Cement evaluation tool run?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CetRun", DataType="boolean")]
        public bool CetRun {
            get {
                return this.cetRunField;
            }
            set {
                this.cetRunField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CetRunSpecified {
            get {
                return this.cetRunFieldSpecified;
            }
            set {
                this.cetRunFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cement evaluation tool bond quality?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Cement evaluation tool bond quality?  Values are \"true\" (or \"1\") and \"false\" (or " +
            "\"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CetBondQual", DataType="boolean")]
        public bool CetBondQual {
            get {
                return this.cetBondQualField;
            }
            set {
                this.cetBondQualField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CetBondQualSpecified {
            get {
                return this.cetBondQualFieldSpecified;
            }
            set {
                this.cetBondQualFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cement bond log run?   Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Cement bond log run?   Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CblRun", DataType="boolean")]
        public bool CblRun {
            get {
                return this.cblRunField;
            }
            set {
                this.cblRunField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CblRunSpecified {
            get {
                return this.cblRunFieldSpecified;
            }
            set {
                this.cblRunFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cement bond log quality indication?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Cement bond log quality indication?  Values are \"true\" (or \"1\") and \"false\" (or \"" +
            "0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CblBondQual", DataType="boolean")]
        public bool CblBondQual {
            get {
                return this.cblBondQualField;
            }
            set {
                this.cblBondQualField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CblBondQualSpecified {
            get {
                return this.cblBondQualFieldSpecified;
            }
            set {
                this.cblBondQualFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cement bond log under pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Cement bond log under pressure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CblPres", DataType="PressureMeasure")]
        public PressureMeasure CblPres {
            get {
                return this.cblPresField;
            }
            set {
                this.cblPresField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Temperature survey run?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Temperature survey run?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TempSurvey", DataType="boolean")]
        public bool TempSurvey {
            get {
                return this.tempSurveyField;
            }
            set {
                this.tempSurveyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TempSurveySpecified {
            get {
                return this.tempSurveyFieldSpecified;
            }
            set {
                this.tempSurveyFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hours before logging run after cement run.</summary>
        [System.ComponentModel.DescriptionAttribute("Hours before logging run after cement run.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimCementLog", DataType="TimeMeasure")]
        public TimeMeasure ETimCementLog {
            get {
                return this.eTimCementLogField;
            }
            set {
                this.eTimCementLogField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pressure integrity test/leak-off test formation breakdown gradient or absolute pressure.</summary>
        [System.ComponentModel.DescriptionAttribute("Pressure integrity test/leak-off test formation breakdown gradient or absolute pr" +
            "essure.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormPit", DataType="ForcePerVolumeMeasure")]
        public ForcePerVolumeMeasure FormPit {
            get {
                return this.formPitField;
            }
            set {
                this.formPitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Tool name for the pressure integrity test.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Tool name for the pressure integrity test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolCompanyPit", DataType="String64")]
        public string ToolCompanyPit {
            get {
                return this.toolCompanyPitField;
            }
            set {
                this.toolCompanyPitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hours between end of cement job and the start of the pressure integrity test.</summary>
        [System.ComponentModel.DescriptionAttribute("Hours between end of cement job and the start of the pressure integrity test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimPitStart", DataType="TimeMeasure")]
        public TimeMeasure ETimPitStart {
            get {
                return this.eTimPitStartField;
            }
            set {
                this.eTimPitStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth at top of cement.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth at top of cement.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdCementTop", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdCementTop {
            get {
                return this.mdCementTopField;
            }
            set {
                this.mdCementTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Method to determine cement top.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Method to determine cement top.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TopCementMethod", DataType="String64")]
        public string TopCementMethod {
            get {
                return this.topCementMethodField;
            }
            set {
                this.topCementMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is the top of cement sufficient?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is the top of cement sufficient?  Values are \"true\" (or \"1\") and \"false\" (or \"0\")" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TocOK", DataType="boolean")]
        public bool TocOK {
            get {
                return this.tocOKField;
            }
            set {
                this.tocOKField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TocOKSpecified {
            get {
                return this.tocOKFieldSpecified;
            }
            set {
                this.tocOKFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Job rating.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Job rating.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JobRating", DataType="String64")]
        public string JobRating {
            get {
                return this.jobRatingField;
            }
            set {
                this.jobRatingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Remedial cement required?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Remedial cement required?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RemedialCement", DataType="boolean")]
        public bool RemedialCement {
            get {
                return this.remedialCementField;
            }
            set {
                this.remedialCementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RemedialCementSpecified {
            get {
                return this.remedialCementFieldSpecified;
            }
            set {
                this.remedialCementFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of remedials.</summary>
        [System.ComponentModel.DescriptionAttribute("Number of remedials.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumRemedial", DataType="int")]
        public int NumRemedial {
            get {
                return this.numRemedialField;
            }
            set {
                this.numRemedialField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumRemedialSpecified {
            get {
                return this.numRemedialFieldSpecified;
            }
            set {
                this.numRemedialFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Method used to determine that a cement job was unsuccessful.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Method used to determine that a cement job was unsuccessful.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FailureMethod", DataType="String64")]
        public string FailureMethod {
            get {
                return this.failureMethodField;
            }
            set {
                this.failureMethodField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The distance to the top of the liner.</summary>
        [System.ComponentModel.DescriptionAttribute("The distance to the top of the liner.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LinerTop", DataType="LengthMeasure")]
        public LengthMeasure LinerTop {
            get {
                return this.linerTopField;
            }
            set {
                this.linerTopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Liner overlap length.</summary>
        [System.ComponentModel.DescriptionAttribute("Liner overlap length.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LinerLap", DataType="LengthMeasure")]
        public LengthMeasure LinerLap {
            get {
                return this.linerLapField;
            }
            set {
                this.linerLapField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Hours before the liner top test.</summary>
        [System.ComponentModel.DescriptionAttribute("Hours before the liner top test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ETimBeforeTest", DataType="TimeMeasure")]
        public TimeMeasure ETimBeforeTest {
            get {
                return this.eTimBeforeTestField;
            }
            set {
                this.eTimBeforeTestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test negative tool used for the liner top seal.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Test negative tool used for the liner top seal.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNegativeTool", DataType="String64")]
        public string TestNegativeTool {
            get {
                return this.testNegativeToolField;
            }
            set {
                this.testNegativeToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Equivalent mud weight. Negative test.</summary>
        [System.ComponentModel.DescriptionAttribute("Equivalent mud weight. Negative test.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestNegativeEmw", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure TestNegativeEmw {
            get {
                return this.testNegativeEmwField;
            }
            set {
                this.testNegativeEmwField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Test positive tool for liner top seal.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Test positive tool for liner top seal.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestPositiveTool", DataType="String64")]
        public string TestPositiveTool {
            get {
                return this.testPositiveToolField;
            }
            set {
                this.testPositiveToolField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Equivalent mud weight. Positive test or absolute pressure .</summary>
        [System.ComponentModel.DescriptionAttribute("Equivalent mud weight. Positive test or absolute pressure .")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TestPositiveEmw", DataType="MassPerVolumeMeasure")]
        public MassPerVolumeMeasure TestPositiveEmw {
            get {
                return this.testPositiveEmwField;
            }
            set {
                this.testPositiveEmwField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cement found on tool?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Cement found on tool?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementFoundOnTool", DataType="boolean")]
        public bool CementFoundOnTool {
            get {
                return this.cementFoundOnToolField;
            }
            set {
                this.cementFoundOnToolField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CementFoundOnToolSpecified {
            get {
                return this.cementFoundOnToolFieldSpecified;
            }
            set {
                this.cementFoundOnToolFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Measured depth to the diverter tool.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth to the diverter tool.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdDVTool", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdDVTool {
            get {
                return this.mdDVToolField;
            }
            set {
                this.mdDVToolField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CementJob", DataType="DataObjectReference")]
        public DataObjectReference CementJob {
            get {
                return this.cementJobField;
            }
            set {
                this.cementJobField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class WellboreGeometry : AbstractObject {
        
        private MeasuredDepthCoord mdBaseField;
        
        private LengthMeasure gapAirField;
        
        private LengthMeasure depthWaterMeanField;
        
        private ChannelStatus growingStatusField;
        
        private WellboreGeometrySection[] wellboreGeometrySectionField;
        
        private DataObjectReference wellboreField;
        
        private DataObjectReference[] bhaRunField;
        
        /// <remarks/>
        /// <summary>Measured depth at bottom, at the time this report was made.</summary>
        [System.ComponentModel.DescriptionAttribute("Measured depth at bottom, at the time this report was made.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBase", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBase {
            get {
                return this.mdBaseField;
            }
            set {
                this.mdBaseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Air gap.</summary>
        [System.ComponentModel.DescriptionAttribute("Air gap.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GapAir", DataType="LengthMeasure")]
        public LengthMeasure GapAir {
            get {
                return this.gapAirField;
            }
            set {
                this.gapAirField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Water depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Water depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DepthWaterMean", DataType="LengthMeasure")]
        public LengthMeasure DepthWaterMean {
            get {
                return this.depthWaterMeanField;
            }
            set {
                this.depthWaterMeanField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Describes the growing status of the wellbore geometry, whether active, inactive or closed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Describes the growing status of the wellbore geometry, whether active, inactive o" +
            "r closed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrowingStatus", DataType="ChannelStatus")]
        public ChannelStatus GrowingStatus {
            get {
                return this.growingStatusField;
            }
            set {
                this.growingStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WellboreGeometrySection")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreGeometrySection", DataType="WellboreGeometrySection")]
        public WellboreGeometrySection[] WellboreGeometrySection {
            get {
                return this.wellboreGeometrySectionField;
            }
            set {
                this.wellboreGeometrySectionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BhaRun")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BhaRun", DataType="DataObjectReference")]
        public DataObjectReference[] BhaRun {
            get {
                return this.bhaRunField;
            }
            set {
                this.bhaRunField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Log : AbstractObject {
        
        private ChannelState channelStateField;
        
        private bool channelStateFieldSpecified;
        
        private string timeDepthField;
        
        private DataObjectReference channelClassField;
        
        private string runNumberField;
        
        private string passNumberField;
        
        private AbstractIndexValue startIndexField;
        
        private AbstractIndexValue endIndexField;
        
        private string loggingCompanyNameField;
        
        private string loggingCompanyCodeField;
        
        private string toolNameField;
        
        private string toolClassField;
        
        private ChannelDerivation derivationField;
        
        private bool derivationFieldSpecified;
        
        private LoggingMethod loggingMethodField;
        
        private bool loggingMethodFieldSpecified;
        
        private LengthMeasureExt nominalHoleSizeField;
        
        private DataObjectReference wellboreField;
        
        private ChannelSet[] channelSetField;
        
        /// <remarks/>
        /// <summary>Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines where the channel gets its data from, e.g., calculated from another sourc" +
            "e, or from archive, or raw real-time, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelState", DataType="ChannelState")]
        public ChannelState ChannelState {
            get {
                return this.channelStateField;
            }
            set {
                this.channelStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelStateSpecified {
            get {
                return this.channelStateFieldSpecified;
            }
            set {
                this.channelStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use to indicate if this is a time or depth log.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Use to indicate if this is a time or depth log.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeDepth", DataType="String64")]
        public string TimeDepth {
            get {
                return this.timeDepthField;
            }
            set {
                this.timeDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.</summary>
        [System.ComponentModel.DescriptionAttribute("A mandatory value categorizing a log channel. The classification system used in W" +
            "ITSML is the one from the PWLS group.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelClass", DataType="DataObjectReference")]
        public DataObjectReference ChannelClass {
            get {
                return this.channelClassField;
            }
            set {
                this.channelClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The nominal run number for the channel. No precise meaning is declared for this a" +
            "ttribute but it is so commonly used that it must be included.   The value here s" +
            "hould match a bit run number for LWD data and a wireline run number for logging " +
            "data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RunNumber", DataType="String64")]
        public string RunNumber {
            get {
                return this.runNumberField;
            }
            set {
                this.runNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The nominal pass number for the channel. No precise meaning is declared for this " +
            "attribute but it is so commonly used that it must be included.   The value here " +
            "should match a wireline pass number for logging data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PassNumber", DataType="String64")]
        public string PassNumber {
            get {
                return this.passNumberField;
            }
            set {
                this.passNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When the log header defines the direction as:  - "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located.</summary>
        [System.ComponentModel.DescriptionAttribute(@"When the log header defines the direction as:  - ""Increasing"", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - ""Decreasing"", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartIndex", DataType="AbstractIndexValue")]
        public AbstractIndexValue StartIndex {
            get {
                return this.startIndexField;
            }
            set {
                this.startIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When the log header defines the direction as:  - "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  - “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.</summary>
        [System.ComponentModel.DescriptionAttribute(@"When the log header defines the direction as:  - ""Increasing"", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  - “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndIndex", DataType="AbstractIndexValue")]
        public AbstractIndexValue EndIndex {
            get {
                return this.endIndexField;
            }
            set {
                this.endIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the logging company.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the logging company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingCompanyName", DataType="String64")]
        public string LoggingCompanyName {
            get {
                return this.loggingCompanyNameField;
            }
            set {
                this.loggingCompanyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The RP66 organization code assigned to a logging company. The list is available a" +
            "t http://www.energistics.org/geosciences/geology-standards/rp66-organization-cod" +
            "es")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingCompanyCode", DataType="String64")]
        public string LoggingCompanyCode {
            get {
                return this.loggingCompanyCodeField;
            }
            set {
                this.loggingCompanyCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the logging tool as given by the logging contractor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the logging tool as given by the logging contractor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolName", DataType="String64")]
        public string ToolName {
            get {
                return this.toolNameField;
            }
            set {
                this.toolNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A value categorizing a logging tool. The classification system used in WITSML is " +
            "the one from the PWLS group.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolClass", DataType="String64")]
        public string ToolClass {
            get {
                return this.toolClassField;
            }
            set {
                this.toolClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates that the channel is derived from one or more other channels.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicates that the channel is derived from one or more other channels.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Derivation", DataType="ChannelDerivation")]
        public ChannelDerivation Derivation {
            get {
                return this.derivationField;
            }
            set {
                this.derivationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DerivationSpecified {
            get {
                return this.derivationFieldSpecified;
            }
            set {
                this.derivationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether " +
            "it is computed, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingMethod", DataType="LoggingMethod")]
        public LoggingMethod LoggingMethod {
            get {
                return this.loggingMethodField;
            }
            set {
                this.loggingMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoggingMethodSpecified {
            get {
                return this.loggingMethodFieldSpecified;
            }
            set {
                this.loggingMethodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal hole size (typically the bit size) at the time the measurement tool was in the hole. The size is "nominal" to indicate that this is not the result of a caliper reading or other direct measurement of the hole size, but is just a name used to refer to the diameter. When more than one diameter holes are being drilled at the same time (e.g., where a reamer is behind the bit), this diameter is the one that was seen by the sensor that produced a particular log channel.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The nominal hole size (typically the bit size) at the time the measurement tool was in the hole. The size is ""nominal"" to indicate that this is not the result of a caliper reading or other direct measurement of the hole size, but is just a name used to refer to the diameter. When more than one diameter holes are being drilled at the same time (e.g., where a reamer is behind the bit), this diameter is the one that was seen by the sensor that produced a particular log channel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NominalHoleSize", DataType="LengthMeasureExt")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return this.nominalHoleSizeField;
            }
            set {
                this.nominalHoleSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChannelSet")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelSet", DataType="ChannelSet")]
        public ChannelSet[] ChannelSet {
            get {
                return this.channelSetField;
            }
            set {
                this.channelSetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ChannelState {
        
        /// <remarks/>
        calculated,
        
        /// <remarks/>
        final,
        
        /// <remarks/>
        memory,
        
        /// <remarks/>
        processed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("real time")]
        realtime,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ChannelDerivation {
        
        /// <remarks/>
        raw,
        
        /// <remarks/>
        simulated,
        
        /// <remarks/>
        spliced,
        
        /// <remarks/>
        sampled,
        
        /// <remarks/>
        model,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum LoggingMethod {
        
        /// <remarks/>
        computed,
        
        /// <remarks/>
        distributed,
        
        /// <remarks/>
        LWD,
        
        /// <remarks/>
        mixed,
        
        /// <remarks/>
        MWD,
        
        /// <remarks/>
        surface,
        
        /// <remarks/>
        wireline,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class ChannelSet : AbstractObject {
        
        private ChannelIndex[] indexField;
        
        private Channel[] channelField;
        
        private ChannelData dataField;
        
        private ChannelState channelStateField;
        
        private bool channelStateFieldSpecified;
        
        private string timeDepthField;
        
        private DataObjectReference channelClassField;
        
        private string runNumberField;
        
        private string passNumberField;
        
        private AbstractIndexValue startIndexField;
        
        private AbstractIndexValue endIndexField;
        
        private string loggingCompanyNameField;
        
        private string loggingCompanyCodeField;
        
        private string toolNameField;
        
        private string toolClassField;
        
        private ChannelDerivation derivationField;
        
        private bool derivationFieldSpecified;
        
        private LoggingMethod loggingMethodField;
        
        private bool loggingMethodFieldSpecified;
        
        private LengthMeasureExt nominalHoleSizeField;
        
        private DataObjectReference wellboreField;
        
        private AbstractLogDataContext dataContextField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Index")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="ChannelIndex")]
        public ChannelIndex[] Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Channel")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Channel", DataType="Channel")]
        public Channel[] Channel {
            get {
                return this.channelField;
            }
            set {
                this.channelField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Data", DataType="ChannelData")]
        public ChannelData Data {
            get {
                return this.dataField;
            }
            set {
                this.dataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines where the channel gets its data from, e.g., calculated from another sourc" +
            "e, or from archive, or raw real-time, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelState", DataType="ChannelState")]
        public ChannelState ChannelState {
            get {
                return this.channelStateField;
            }
            set {
                this.channelStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelStateSpecified {
            get {
                return this.channelStateFieldSpecified;
            }
            set {
                this.channelStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Use to indicate if this is a time or depth log.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Use to indicate if this is a time or depth log.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeDepth", DataType="String64")]
        public string TimeDepth {
            get {
                return this.timeDepthField;
            }
            set {
                this.timeDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.</summary>
        [System.ComponentModel.DescriptionAttribute("A mandatory value categorizing a log channel. The classification system used in W" +
            "ITSML is the one from the PWLS group.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelClass", DataType="DataObjectReference")]
        public DataObjectReference ChannelClass {
            get {
                return this.channelClassField;
            }
            set {
                this.channelClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The nominal run number for the channel. No precise meaning is declared for this a" +
            "ttribute but it is so commonly used that it must be included.   The value here s" +
            "hould match a bit run number for LWD data and a wireline run number for logging " +
            "data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RunNumber", DataType="String64")]
        public string RunNumber {
            get {
                return this.runNumberField;
            }
            set {
                this.runNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The nominal pass number for the channel. No precise meaning is declared for this " +
            "attribute but it is so commonly used that it must be included.   The value here " +
            "should match a wireline pass number for logging data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PassNumber", DataType="String64")]
        public string PassNumber {
            get {
                return this.passNumberField;
            }
            set {
                this.passNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When the log header defines the direction as:  - "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located.</summary>
        [System.ComponentModel.DescriptionAttribute(@"When the log header defines the direction as:  - ""Increasing"", the startIndex is the starting (minimum) index value at which the first non-null data point is located.  - ""Decreasing"", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartIndex", DataType="AbstractIndexValue")]
        public AbstractIndexValue StartIndex {
            get {
                return this.startIndexField;
            }
            set {
                this.startIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When the log header defines the direction as:  - "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  - “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.</summary>
        [System.ComponentModel.DescriptionAttribute(@"When the log header defines the direction as:  - ""Increasing"", the endIndex is the ending (maximum) index value at which the last non-null data point is located.  - “Decreasing”, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndIndex", DataType="AbstractIndexValue")]
        public AbstractIndexValue EndIndex {
            get {
                return this.endIndexField;
            }
            set {
                this.endIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the logging company.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the logging company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingCompanyName", DataType="String64")]
        public string LoggingCompanyName {
            get {
                return this.loggingCompanyNameField;
            }
            set {
                this.loggingCompanyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The RP66 organization code assigned to a logging company. The list is available a" +
            "t http://www.energistics.org/geosciences/geology-standards/rp66-organization-cod" +
            "es")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingCompanyCode", DataType="String64")]
        public string LoggingCompanyCode {
            get {
                return this.loggingCompanyCodeField;
            }
            set {
                this.loggingCompanyCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the logging tool as given by the logging contractor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the logging tool as given by the logging contractor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolName", DataType="String64")]
        public string ToolName {
            get {
                return this.toolNameField;
            }
            set {
                this.toolNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A value categorizing a logging tool. The classification system used in WITSML is " +
            "the one from the PWLS group.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolClass", DataType="String64")]
        public string ToolClass {
            get {
                return this.toolClassField;
            }
            set {
                this.toolClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates that the channel is derived from one or more other channels.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicates that the channel is derived from one or more other channels.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Derivation", DataType="ChannelDerivation")]
        public ChannelDerivation Derivation {
            get {
                return this.derivationField;
            }
            set {
                this.derivationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DerivationSpecified {
            get {
                return this.derivationFieldSpecified;
            }
            set {
                this.derivationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether " +
            "it is computed, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingMethod", DataType="LoggingMethod")]
        public LoggingMethod LoggingMethod {
            get {
                return this.loggingMethodField;
            }
            set {
                this.loggingMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoggingMethodSpecified {
            get {
                return this.loggingMethodFieldSpecified;
            }
            set {
                this.loggingMethodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal hole size (typically the bit size) at the time the measurement tool was in the hole. The size is "nominal" to indicate that this is not the result of a caliper reading or other direct measurement of the hole size, but is just a name used to refer to the diameter. When more than one diameter holes are being drilled at the same time (e.g., where a reamer is behind the bit), this diameter is the one that was seen by the sensor that produced a particular log channel.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The nominal hole size (typically the bit size) at the time the measurement tool was in the hole. The size is ""nominal"" to indicate that this is not the result of a caliper reading or other direct measurement of the hole size, but is just a name used to refer to the diameter. When more than one diameter holes are being drilled at the same time (e.g., where a reamer is behind the bit), this diameter is the one that was seen by the sensor that produced a particular log channel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NominalHoleSize", DataType="LengthMeasureExt")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return this.nominalHoleSizeField;
            }
            set {
                this.nominalHoleSizeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataContext", DataType="AbstractLogDataContext")]
        public AbstractLogDataContext DataContext {
            get {
                return this.dataContextField;
            }
            set {
                this.dataContextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Channel : AbstractObject {
        
        private string mnemonicField;
        
        private EtpDataType dataTypeField;
        
        private Energistics.DataAccess.ExtensibleEnum<UnitOfMeasure> uomField;
        
        private ChannelStatus growingStatusField;
        
        private string sourceField;
        
        private DataObjectReference wellboreField;
        
        private LogChannelAxis[] axisDefinitionField;
        
        private ChannelState channelStateField;
        
        private bool channelStateFieldSpecified;
        
        private string timeDepthField;
        
        private DataObjectReference channelClassField;
        
        private string runNumberField;
        
        private string passNumberField;
        
        private AbstractIndexValue startIndexField;
        
        private AbstractIndexValue endIndexField;
        
        private string loggingCompanyNameField;
        
        private string loggingCompanyCodeField;
        
        private string toolNameField;
        
        private string toolClassField;
        
        private ChannelDerivation derivationField;
        
        private bool derivationFieldSpecified;
        
        private LoggingMethod loggingMethodField;
        
        private bool loggingMethodFieldSpecified;
        
        private LengthMeasureExt nominalHoleSizeField;
        
        private PointMetadata[] pointMetadataField;
        
        private DataObjectReference[] derivedFromField;
        
        private ChannelIndex[] indexField;
        
        private DataObjectReference parentField;
        
        /// <remarks/>
        /// <summary>The mnemonic name for this channel. Mnemonics are not unique within a store.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The mnemonic name for this channel. Mnemonics are not unique within a store.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mnemonic", DataType="String64")]
        public string Mnemonic {
            get {
                return this.mnemonicField;
            }
            set {
                this.mnemonicField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The underlying ETP data type of the value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The underlying ETP data type of the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataType", DataType="EtpDataType")]
        public EtpDataType DataType {
            get {
                return this.dataTypeField;
            }
            set {
                this.dataTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The underlying unit of measure of the value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The underlying unit of measure of the value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uom", DataType="UnitOfMeasureExt")]
        public Energistics.DataAccess.ExtensibleEnum<UnitOfMeasure> Uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The status of a channel with respect to creating new measurements. Statuses include:  Active: A channel is actively producing data points.  Inactive: A channel is offline or not currently producing, but may begin producing again in the future.  Closed: A channel will never produce points again. The rules for when a channel is to be closed will vary some for different kinds of channels. For example, time-based surface channels may remain open for the entire life of the drilling operation, whereas depth-based wireline channels are closed at the end of the wireline job</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The status of a channel with respect to creating new measurements. Statuses include:  Active: A channel is actively producing data points.  Inactive: A channel is offline or not currently producing, but may begin producing again in the future.  Closed: A channel will never produce points again. The rules for when a channel is to be closed will vary some for different kinds of channels. For example, time-based surface channels may remain open for the entire life of the drilling operation, whereas depth-based wireline channels are closed at the end of the wireline job")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GrowingStatus", DataType="ChannelStatus")]
        public ChannelStatus GrowingStatus {
            get {
                return this.growingStatusField;
            }
            set {
                this.growingStatusField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Source of the data in the channel. Enter the contractor name who conducted the log.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Source of the data in the channel. Enter the contractor name who conducted the lo" +
            "g.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Source", DataType="String64")]
        public string Source {
            get {
                return this.sourceField;
            }
            set {
                this.sourceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AxisDefinition")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisDefinition", DataType="LogChannelAxis")]
        public LogChannelAxis[] AxisDefinition {
            get {
                return this.axisDefinitionField;
            }
            set {
                this.axisDefinitionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines where the channel gets its data from, e.g., calculated from another source, or from archive, or raw real-time, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines where the channel gets its data from, e.g., calculated from another sourc" +
            "e, or from archive, or raw real-time, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelState", DataType="ChannelState")]
        public ChannelState ChannelState {
            get {
                return this.channelStateField;
            }
            set {
                this.channelStateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChannelStateSpecified {
            get {
                return this.channelStateFieldSpecified;
            }
            set {
                this.channelStateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is this a time or depth log?</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Is this a time or depth log?")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeDepth", DataType="String64")]
        public string TimeDepth {
            get {
                return this.timeDepthField;
            }
            set {
                this.timeDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A mandatory value categorizing a log channel. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A mandatory value categorizing a log channel. The classification system used in W" +
            "ITSML is the one from the PWLS group.  NOTE: This should turn into an extensible" +
            " enumeration before WITSML is released.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChannelClass", DataType="DataObjectReference")]
        public DataObjectReference ChannelClass {
            get {
                return this.channelClassField;
            }
            set {
                this.channelClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal run number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a bit run number for LWD data and a wireline run number for logging data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The nominal run number for the channel. No precise meaning is declared for this a" +
            "ttribute but it is so commonly used that it must be included.   The value here s" +
            "hould match a bit run number for LWD data and a wireline run number for logging " +
            "data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RunNumber", DataType="String64")]
        public string RunNumber {
            get {
                return this.runNumberField;
            }
            set {
                this.runNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal pass number for the channel. No precise meaning is declared for this attribute but it is so commonly used that it must be included.   The value here should match a wireline pass number for logging data.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The nominal pass number for the channel. No precise meaning is declared for this " +
            "attribute but it is so commonly used that it must be included.   The value here " +
            "should match a wireline pass number for logging data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PassNumber", DataType="String64")]
        public string PassNumber {
            get {
                return this.passNumberField;
            }
            set {
                this.passNumberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When the log header defines the direction as "Increasing", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as "Decreasing", the startIndex is the starting (maximum) index value at which the first non-null data point is located.</summary>
        [System.ComponentModel.DescriptionAttribute(@"When the log header defines the direction as ""Increasing"", the startIndex is the starting (minimum) index value at which the first non-null data point is located. When the log header defines the direction as ""Decreasing"", the startIndex is the starting (maximum) index value at which the first non-null data point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartIndex", DataType="AbstractIndexValue")]
        public AbstractIndexValue StartIndex {
            get {
                return this.startIndexField;
            }
            set {
                this.startIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When the log header defines the direction as "Increasing", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located.</summary>
        [System.ComponentModel.DescriptionAttribute(@"When the log header defines the direction as ""Increasing"", the endIndex is the ending (maximum) index value at which the last non-null data point is located. When the log header defines the direction as Decreasing, the endIndex is the ending (minimum) index value at which the last non-null data point is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EndIndex", DataType="AbstractIndexValue")]
        public AbstractIndexValue EndIndex {
            get {
                return this.endIndexField;
            }
            set {
                this.endIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the logging company.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the logging company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingCompanyName", DataType="String64")]
        public string LoggingCompanyName {
            get {
                return this.loggingCompanyNameField;
            }
            set {
                this.loggingCompanyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The RP66 organization code assigned to a logging company. The list is available at http://www.energistics.org/geosciences/geology-standards/rp66-organization-codes</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The RP66 organization code assigned to a logging company. The list is available a" +
            "t http://www.energistics.org/geosciences/geology-standards/rp66-organization-cod" +
            "es")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingCompanyCode", DataType="String64")]
        public string LoggingCompanyCode {
            get {
                return this.loggingCompanyCodeField;
            }
            set {
                this.loggingCompanyCodeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the logging tool as given by the logging contractor.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the logging tool as given by the logging contractor.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolName", DataType="String64")]
        public string ToolName {
            get {
                return this.toolNameField;
            }
            set {
                this.toolNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A value categorizing a logging tool. The classification system used in WITSML is the one from the PWLS group.  NOTE: This should turn into an extensible enumeration before WITSML is released</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A value categorizing a logging tool. The classification system used in WITSML is " +
            "the one from the PWLS group.  NOTE: This should turn into an extensible enumerat" +
            "ion before WITSML is released")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToolClass", DataType="String64")]
        public string ToolClass {
            get {
                return this.toolClassField;
            }
            set {
                this.toolClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates that the channel is derived from one or more other channels</summary>
        [System.ComponentModel.DescriptionAttribute("Indicates that the channel is derived from one or more other channels")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Derivation", DataType="ChannelDerivation")]
        public ChannelDerivation Derivation {
            get {
                return this.derivationField;
            }
            set {
                this.derivationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DerivationSpecified {
            get {
                return this.derivationFieldSpecified;
            }
            set {
                this.derivationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines where the log channel gets its data from: LWD, MWD, wireline; or whether it is computed, etc.</summary>
        [System.ComponentModel.DescriptionAttribute("Defines where the log channel gets its data from: LWD, MWD, wireline; or whether " +
            "it is computed, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LoggingMethod", DataType="LoggingMethod")]
        public LoggingMethod LoggingMethod {
            get {
                return this.loggingMethodField;
            }
            set {
                this.loggingMethodField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LoggingMethodSpecified {
            get {
                return this.loggingMethodFieldSpecified;
            }
            set {
                this.loggingMethodFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The nominal hole size at the time the measurement tool was in the hole. The size is "nominal" to indicate that this is not the result of a caliper reading or other direct measurement of the hoe size, but is just a name used to refer to the diameter. This is normally the bit size.  In a case where there are more than one diameter hole being drilled at the same time (like where a reamer is behind the bit) this diameter is the one which was seen by the sensor which produced a particular log channel.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The nominal hole size at the time the measurement tool was in the hole. The size is ""nominal"" to indicate that this is not the result of a caliper reading or other direct measurement of the hoe size, but is just a name used to refer to the diameter. This is normally the bit size.  In a case where there are more than one diameter hole being drilled at the same time (like where a reamer is behind the bit) this diameter is the one which was seen by the sensor which produced a particular log channel.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NominalHoleSize", DataType="LengthMeasureExt")]
        public LengthMeasureExt NominalHoleSize {
            get {
                return this.nominalHoleSizeField;
            }
            set {
                this.nominalHoleSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PointMetadata")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PointMetadata", DataType="PointMetadata")]
        public PointMetadata[] PointMetadata {
            get {
                return this.pointMetadataField;
            }
            set {
                this.pointMetadataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DerivedFrom")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DerivedFrom", DataType="DataObjectReference")]
        public DataObjectReference[] DerivedFrom {
            get {
                return this.derivedFromField;
            }
            set {
                this.derivedFromField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Index")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="ChannelIndex")]
        public ChannelIndex[] Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parent", DataType="DataObjectReference")]
        public DataObjectReference Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class BhaRun : AbstractObject {
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private Energistics.DataAccess.Timestamp dTimStopField;
        
        private Energistics.DataAccess.Timestamp dTimStartDrillingField;
        
        private Energistics.DataAccess.Timestamp dTimStopDrillingField;
        
        private AnglePerLengthMeasure planDoglegField;
        
        private AnglePerLengthMeasure actDoglegField;
        
        private AnglePerLengthMeasure actDoglegMxField;
        
        private BhaStatus statusBhaField;
        
        private bool statusBhaFieldSpecified;
        
        private int numBitRunField;
        
        private bool numBitRunFieldSpecified;
        
        private int numStringRunField;
        
        private bool numStringRunFieldSpecified;
        
        private string reasonTripField;
        
        private string objectiveBhaField;
        
        private DrillingParams[] drillingParamsField;
        
        private DataObjectReference wellboreField;
        
        private DataObjectReference tubularField;
        
        /// <remarks/>
        /// <summary>Date and time that activities for this run started.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities for this run started.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that activities for this run stopped.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time that activities for this run stopped.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStop", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStop {
            get {
                return this.dTimStopField;
            }
            set {
                this.dTimStopField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start on bottom: date and time.</summary>
        [System.ComponentModel.DescriptionAttribute("Start on bottom: date and time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStartDrilling", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStartDrilling {
            get {
                return this.dTimStartDrillingField;
            }
            set {
                this.dTimStartDrillingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Stop off bottom: date and time.</summary>
        [System.ComponentModel.DescriptionAttribute("Stop off bottom: date and time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStopDrilling", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStopDrilling {
            get {
                return this.dTimStopDrillingField;
            }
            set {
                this.dTimStopDrillingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Planned dogleg severity.</summary>
        [System.ComponentModel.DescriptionAttribute("Planned dogleg severity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PlanDogleg", DataType="AnglePerLengthMeasure")]
        public AnglePerLengthMeasure PlanDogleg {
            get {
                return this.planDoglegField;
            }
            set {
                this.planDoglegField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Actual dogleg severity.</summary>
        [System.ComponentModel.DescriptionAttribute("Actual dogleg severity.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActDogleg", DataType="AnglePerLengthMeasure")]
        public AnglePerLengthMeasure ActDogleg {
            get {
                return this.actDoglegField;
            }
            set {
                this.actDoglegField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Actual dogleg severity: maximum.</summary>
        [System.ComponentModel.DescriptionAttribute("Actual dogleg severity: maximum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActDoglegMx", DataType="AnglePerLengthMeasure")]
        public AnglePerLengthMeasure ActDoglegMx {
            get {
                return this.actDoglegMxField;
            }
            set {
                this.actDoglegMxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bottomhole assembly status.</summary>
        [System.ComponentModel.DescriptionAttribute("Bottomhole assembly status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusBha", DataType="BhaStatus")]
        public BhaStatus StatusBha {
            get {
                return this.statusBhaField;
            }
            set {
                this.statusBhaField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusBhaSpecified {
            get {
                return this.statusBhaFieldSpecified;
            }
            set {
                this.statusBhaFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Bit run number.</summary>
        [System.ComponentModel.DescriptionAttribute("Bit run number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumBitRun", DataType="int")]
        public int NumBitRun {
            get {
                return this.numBitRunField;
            }
            set {
                this.numBitRunField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumBitRunSpecified {
            get {
                return this.numBitRunFieldSpecified;
            }
            set {
                this.numBitRunFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The BHA (drilling string) run number.</summary>
        [System.ComponentModel.DescriptionAttribute("The BHA (drilling string) run number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumStringRun", DataType="int")]
        public int NumStringRun {
            get {
                return this.numStringRunField;
            }
            set {
                this.numStringRunField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumStringRunSpecified {
            get {
                return this.numStringRunFieldSpecified;
            }
            set {
                this.numStringRunFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reason for a trip.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Reason for a trip.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReasonTrip", DataType="String2000")]
        public string ReasonTrip {
            get {
                return this.reasonTripField;
            }
            set {
                this.reasonTripField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Objective of the bottomhole assembly.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Objective of the bottomhole assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectiveBha", DataType="String2000")]
        public string ObjectiveBha {
            get {
                return this.objectiveBhaField;
            }
            set {
                this.objectiveBhaField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DrillingParams")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DrillingParams", DataType="DrillingParams")]
        public DrillingParams[] DrillingParams {
            get {
                return this.drillingParamsField;
            }
            set {
                this.drillingParamsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tubular", DataType="DataObjectReference")]
        public DataObjectReference Tubular {
            get {
                return this.tubularField;
            }
            set {
                this.tubularField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum BhaStatus {
        
        /// <remarks/>
        final,
        
        /// <remarks/>
        progress,
        
        /// <remarks/>
        plan,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class FluidsReport : AbstractObject {
        
        private Energistics.DataAccess.Timestamp dTimField;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private int numReportField;
        
        private bool numReportFieldSpecified;
        
        private Fluid[] fluidField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>Date and time the information is related to.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time the information is related to.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTim", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTim {
            get {
                return this.dTimField;
            }
            set {
                this.dTimField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Along-hole measured depth of measurement from the drill datum.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Along-hole measured depth of measurement from the drill datum.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Vertical depth of the measurements.</summary>
        [System.ComponentModel.DescriptionAttribute("Vertical depth of the measurements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Fluids report number.</summary>
        [System.ComponentModel.DescriptionAttribute("Fluids report number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumReport", DataType="int")]
        public int NumReport {
            get {
                return this.numReportField;
            }
            set {
                this.numReportField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NumReportSpecified {
            get {
                return this.numReportFieldSpecified;
            }
            set {
                this.numReportFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Fluid")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Fluid", DataType="Fluid")]
        public Fluid[] Fluid {
            get {
                return this.fluidField;
            }
            set {
                this.fluidField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class DrillReport : AbstractObject {
        
        private Energistics.DataAccess.Timestamp dTimStartField;
        
        private Energistics.DataAccess.Timestamp dTimEndField;
        
        private OpsReportVersion versionKindField;
        
        private bool versionKindFieldSpecified;
        
        private Energistics.DataAccess.Timestamp createDateField;
        
        private WellDatum[] wellDatumField;
        
        private BitRecord[] bitRecordField;
        
        private DrillActivity[] drillActivityField;
        
        private DrillReportLogInfo[] logInfoField;
        
        private DrillReportCoreInfo[] coreInfoField;
        
        private DrillReportWellTestInfo[] wellTestInfoField;
        
        private DrillReportFormTestInfo[] formTestInfoField;
        
        private DrillReportLithShowInfo[] lithShowInfoField;
        
        private DrillReportEquipFailureInfo[] equipFailureInfoField;
        
        private DrillReportControlIncidentInfo[] controlIncidentInfoField;
        
        private DrillReportStratInfo[] stratInfoField;
        
        private DrillReportPerfInfo[] perfInfoField;
        
        private DrillReportGasReadingInfo[] gasReadingInfoField;
        
        private DataObjectReference wellboreField;
        
        private ObjectAlias wellAliasField;
        
        private ObjectAlias[] wellboreAliasField;
        
        private DrillReportWellboreInfo wellboreInfoField;
        
        private DrillReportStatusInfo[] statusInfoField;
        
        private Fluid[] fluidField;
        
        private DrillReportPorePressure[] porePressureField;
        
        private TimestampedCommentString extendedReportField;
        
        private DrillReportSurveyStation[] surveyStationField;
        
        /// <remarks/>
        /// <summary>Date and time that the reporting period started. A report period is commonly 24 hours.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time that the reporting period started. A report period is commonly 24 h" +
            "ours.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimStart", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimStart {
            get {
                return this.dTimStartField;
            }
            set {
                this.dTimStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time that the reporting period ended. A report period is commonly 24 hours.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date and time that the reporting period ended. A report period is commonly 24 hou" +
            "rs.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimEnd", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimEnd {
            get {
                return this.dTimEndField;
            }
            set {
                this.dTimEndField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The kind of report version. For example, a  preliminary version.</summary>
        [System.ComponentModel.DescriptionAttribute("The kind of report version. For example, a  preliminary version.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VersionKind", DataType="OpsReportVersion")]
        public OpsReportVersion VersionKind {
            get {
                return this.versionKindField;
            }
            set {
                this.versionKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool VersionKindSpecified {
            get {
                return this.versionKindFieldSpecified;
            }
            set {
                this.versionKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The date and time the report was created. A later timestamp indicates a newer version of the report. To update values in a report, a full updated copy of the original report should be submitted.</summary>
        [System.ComponentModel.DescriptionAttribute("The date and time the report was created. A later timestamp indicates a newer ver" +
            "sion of the report. To update values in a report, a full updated copy of the ori" +
            "ginal report should be submitted.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CreateDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines a vertical datum used for measured depths, vertical depths, or elevations. If one of these coordinate values is included in the report, then you must specify a well datum.  This requirement only applies to this report, which is generally a copy of the same information from the well object.</summary>
        [System.Xml.Serialization.XmlElementAttribute("WellDatum")]
        [System.ComponentModel.DescriptionAttribute(@"Defines a vertical datum used for measured depths, vertical depths, or elevations. If one of these coordinate values is included in the report, then you must specify a well datum.  This requirement only applies to this report, which is generally a copy of the same information from the well object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellDatum", DataType="WellDatum")]
        public WellDatum[] WellDatum {
            get {
                return this.wellDatumField;
            }
            set {
                this.wellDatumField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Information about a bit.</summary>
        [System.Xml.Serialization.XmlElementAttribute("BitRecord")]
        [System.ComponentModel.DescriptionAttribute("Information about a bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BitRecord", DataType="BitRecord")]
        public BitRecord[] BitRecord {
            get {
                return this.bitRecordField;
            }
            set {
                this.bitRecordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DrillActivity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DrillActivity", DataType="DrillActivity")]
        public DrillActivity[] DrillActivity {
            get {
                return this.drillActivityField;
            }
            set {
                this.drillActivityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LogInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LogInfo", DataType="DrillReportLogInfo")]
        public DrillReportLogInfo[] LogInfo {
            get {
                return this.logInfoField;
            }
            set {
                this.logInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("CoreInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CoreInfo", DataType="DrillReportCoreInfo")]
        public DrillReportCoreInfo[] CoreInfo {
            get {
                return this.coreInfoField;
            }
            set {
                this.coreInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WellTestInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellTestInfo", DataType="DrillReportWellTestInfo")]
        public DrillReportWellTestInfo[] WellTestInfo {
            get {
                return this.wellTestInfoField;
            }
            set {
                this.wellTestInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FormTestInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FormTestInfo", DataType="DrillReportFormTestInfo")]
        public DrillReportFormTestInfo[] FormTestInfo {
            get {
                return this.formTestInfoField;
            }
            set {
                this.formTestInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LithShowInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LithShowInfo", DataType="DrillReportLithShowInfo")]
        public DrillReportLithShowInfo[] LithShowInfo {
            get {
                return this.lithShowInfoField;
            }
            set {
                this.lithShowInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("EquipFailureInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EquipFailureInfo", DataType="DrillReportEquipFailureInfo")]
        public DrillReportEquipFailureInfo[] EquipFailureInfo {
            get {
                return this.equipFailureInfoField;
            }
            set {
                this.equipFailureInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ControlIncidentInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ControlIncidentInfo", DataType="DrillReportControlIncidentInfo")]
        public DrillReportControlIncidentInfo[] ControlIncidentInfo {
            get {
                return this.controlIncidentInfoField;
            }
            set {
                this.controlIncidentInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StratInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StratInfo", DataType="DrillReportStratInfo")]
        public DrillReportStratInfo[] StratInfo {
            get {
                return this.stratInfoField;
            }
            set {
                this.stratInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PerfInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PerfInfo", DataType="DrillReportPerfInfo")]
        public DrillReportPerfInfo[] PerfInfo {
            get {
                return this.perfInfoField;
            }
            set {
                this.perfInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GasReadingInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GasReadingInfo", DataType="DrillReportGasReadingInfo")]
        public DrillReportGasReadingInfo[] GasReadingInfo {
            get {
                return this.gasReadingInfoField;
            }
            set {
                this.gasReadingInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellAlias", DataType="ObjectAlias")]
        public ObjectAlias WellAlias {
            get {
                return this.wellAliasField;
            }
            set {
                this.wellAliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WellboreAlias")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreAlias", DataType="ObjectAlias")]
        public ObjectAlias[] WellboreAlias {
            get {
                return this.wellboreAliasField;
            }
            set {
                this.wellboreAliasField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreInfo", DataType="DrillReportWellboreInfo")]
        public DrillReportWellboreInfo WellboreInfo {
            get {
                return this.wellboreInfoField;
            }
            set {
                this.wellboreInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StatusInfo")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusInfo", DataType="DrillReportStatusInfo")]
        public DrillReportStatusInfo[] StatusInfo {
            get {
                return this.statusInfoField;
            }
            set {
                this.statusInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Fluid")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Fluid", DataType="Fluid")]
        public Fluid[] Fluid {
            get {
                return this.fluidField;
            }
            set {
                this.fluidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PorePressure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PorePressure", DataType="DrillReportPorePressure")]
        public DrillReportPorePressure[] PorePressure {
            get {
                return this.porePressureField;
            }
            set {
                this.porePressureField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtendedReport", DataType="TimestampedCommentString")]
        public TimestampedCommentString ExtendedReport {
            get {
                return this.extendedReportField;
            }
            set {
                this.extendedReportField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SurveyStation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurveyStation", DataType="DrillReportSurveyStation")]
        public DrillReportSurveyStation[] SurveyStation {
            get {
                return this.surveyStationField;
            }
            set {
                this.surveyStationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum OpsReportVersion {
        
        /// <remarks/>
        preliminary,
        
        /// <remarks/>
        normal,
        
        /// <remarks/>
        final,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Tubular : AbstractObject {
        
        private TubularAssembly typeTubularAssyField;
        
        private bool valveFloatField;
        
        private bool valveFloatFieldSpecified;
        
        private bool sourceNuclearField;
        
        private bool sourceNuclearFieldSpecified;
        
        private LengthMeasure diaHoleAssyField;
        
        private TubularComponent[] tubularComponentField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>Type of tubular assembly.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Type of tubular assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeTubularAssy", DataType="TubularAssembly")]
        public TubularAssembly TypeTubularAssy {
            get {
                return this.typeTubularAssyField;
            }
            set {
                this.typeTubularAssyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is float valve present?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is float valve present?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ValveFloat", DataType="boolean")]
        public bool ValveFloat {
            get {
                return this.valveFloatField;
            }
            set {
                this.valveFloatField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ValveFloatSpecified {
            get {
                return this.valveFloatFieldSpecified;
            }
            set {
                this.valveFloatFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Is nuclear tool present?  Values are "true" (or "1") and "false" (or "0").</summary>
        [System.ComponentModel.DescriptionAttribute("Is nuclear tool present?  Values are \"true\" (or \"1\") and \"false\" (or \"0\").")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SourceNuclear", DataType="boolean")]
        public bool SourceNuclear {
            get {
                return this.sourceNuclearField;
            }
            set {
                this.sourceNuclearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SourceNuclearSpecified {
            get {
                return this.sourceNuclearFieldSpecified;
            }
            set {
                this.sourceNuclearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum hole size generated by the assembly.</summary>
        [System.ComponentModel.DescriptionAttribute("Maximum hole size generated by the assembly.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DiaHoleAssy", DataType="LengthMeasure")]
        public LengthMeasure DiaHoleAssy {
            get {
                return this.diaHoleAssyField;
            }
            set {
                this.diaHoleAssyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TubularComponent")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TubularComponent", DataType="TubularComponent")]
        public TubularComponent[] TubularComponent {
            get {
                return this.tubularComponentField;
            }
            set {
                this.tubularComponentField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum TubularAssembly {
        
        /// <remarks/>
        drilling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("directional drilling")]
        directionaldrilling,
        
        /// <remarks/>
        fishing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("condition mud")]
        conditionmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing conveyed logging")]
        tubingconveyedlogging,
        
        /// <remarks/>
        cementing,
        
        /// <remarks/>
        casing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("clean out")]
        cleanout,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("completion or testing")]
        completionortesting,
        
        /// <remarks/>
        coring,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hole opening or underreaming")]
        holeopeningorunderreaming,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("milling or dressing or cutting")]
        millingordressingorcutting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wiper or check or reaming")]
        wiperorcheckorreaming,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Attachment : AbstractObject {
        
        private string categoryField;
        
        private MeasuredDepthCoord mdField;
        
        private ExtensionNameValue[] paramField;
        
        private MeasuredDepthCoord mdBitField;
        
        private string fileNameField;
        
        private string fileTypeField;
        
        private byte[] contentField;
        
        private DataObjectReference objectReferenceField;
        
        private string subObjectReferenceField;
        
        private DataObjectReference wellboreField;
        
        /// <remarks/>
        /// <summary>Used to tell what the object is when you have multiple attachments of the same file type. E.g., if you have attached a picture of cuttings on a specific depth, you can tag it with Category="CuttingsPicture".</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Used to tell what the object is when you have multiple attachments of the same fi" +
            "le type. E.g., if you have attached a picture of cuttings on a specific depth, y" +
            "ou can tag it with Category=\"CuttingsPicture\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Category", DataType="String64")]
        public string Category {
            get {
                return this.categoryField;
            }
            set {
                this.categoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The along-hole measured depth represented by the attachment.</summary>
        [System.ComponentModel.DescriptionAttribute("The along-hole measured depth represented by the attachment.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Any extra numeric data. For this usage, the name attribute MUST be specified because it represents the meaning of the data. While the index attribute is mandatory, it is only significant if the same name repeats.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Param")]
        [System.ComponentModel.DescriptionAttribute("Any extra numeric data. For this usage, the name attribute MUST be specified beca" +
            "use it represents the meaning of the data. While the index attribute is mandator" +
            "y, it is only significant if the same name repeats.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Param", DataType="ExtensionNameValue")]
        public ExtensionNameValue[] Param {
            get {
                return this.paramField;
            }
            set {
                this.paramField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The along-hole measured depth of the bit.</summary>
        [System.ComponentModel.DescriptionAttribute("The along-hole measured depth of the bit.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBit", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBit {
            get {
                return this.mdBitField;
            }
            set {
                this.mdBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A file name associated with the attachment. Note this is NOT a file path and should contain a name only.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A file name associated with the attachment. Note this is NOT a file path and shou" +
            "ld contain a name only.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FileName", DataType="String64")]
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The file type. This field SHOULD be a registered mime type as cataloged at http://www.iana.org/assignments/media-types/media-types.xhtml.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The file type. This field SHOULD be a registered mime type as cataloged at http:/" +
            "/www.iana.org/assignments/media-types/media-types.xhtml.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FileType", DataType="String64")]
        public string FileType {
            get {
                return this.fileTypeField;
            }
            set {
                this.fileTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The actual attachment content.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The actual attachment content.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Content", DataType="base64Binary")]
        public byte[] Content {
            get {
                return this.contentField;
            }
            set {
                this.contentField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to an object that is defined within the context of the specified wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("A reference to an object that is defined within the context of the specified well" +
            "bore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectReference", DataType="DataObjectReference")]
        public DataObjectReference ObjectReference {
            get {
                return this.objectReferenceField;
            }
            set {
                this.objectReferenceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to a sub-object that is defined within the context of the object referenced by objectReference. This should only refer to recurring components of a growing object. The content is the UID of the sub-object.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("A reference to a sub-object that is defined within the context of the object refe" +
            "renced by objectReference. This should only refer to recurring components of a g" +
            "rowing object. The content is the UID of the sub-object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubObjectReference", DataType="String64")]
        public string SubObjectReference {
            get {
                return this.subObjectReferenceField;
            }
            set {
                this.subObjectReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Wellbore", DataType="DataObjectReference")]
        public DataObjectReference Wellbore {
            get {
                return this.wellboreField;
            }
            set {
                this.wellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Wellbore : AbstractObject {
        
        private string numberField;
        
        private string suffixAPIField;
        
        private string numGovtField;
        
        private WellStatus statusWellboreField;
        
        private bool statusWellboreFieldSpecified;
        
        private bool isActiveField;
        
        private bool isActiveFieldSpecified;
        
        private WellPurpose purposeWellboreField;
        
        private bool purposeWellboreFieldSpecified;
        
        private WellboreType typeWellboreField;
        
        private bool typeWellboreFieldSpecified;
        
        private WellboreShape shapeField;
        
        private bool shapeFieldSpecified;
        
        private Energistics.DataAccess.Timestamp dTimKickoffField;
        
        private bool achievedTDField;
        
        private bool achievedTDFieldSpecified;
        
        private MeasuredDepthCoord mdField;
        
        private WellVerticalDepthCoord tvdField;
        
        private MeasuredDepthCoord mdBitField;
        
        private WellVerticalDepthCoord tvdBitField;
        
        private MeasuredDepthCoord mdKickoffField;
        
        private WellVerticalDepthCoord tvdKickoffField;
        
        private MeasuredDepthCoord mdPlannedField;
        
        private WellVerticalDepthCoord tvdPlannedField;
        
        private MeasuredDepthCoord mdSubSeaPlannedField;
        
        private WellVerticalDepthCoord tvdSubSeaPlannedField;
        
        private TimeMeasure dayTargetField;
        
        private DataObjectReference wellField;
        
        private DataObjectReference parentWellboreField;
        
        /// <remarks/>
        /// <summary>Operator borehole number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Operator borehole number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Number", DataType="String64")]
        public string Number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>API suffix.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("API suffix.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SuffixAPI", DataType="String64")]
        public string SuffixAPI {
            get {
                return this.suffixAPIField;
            }
            set {
                this.suffixAPIField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Government assigned number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Government assigned number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumGovt", DataType="String64")]
        public string NumGovt {
            get {
                return this.numGovtField;
            }
            set {
                this.numGovtField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>POSC wellbore status.</summary>
        [System.ComponentModel.DescriptionAttribute("POSC wellbore status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusWellbore", DataType="WellStatus")]
        public WellStatus StatusWellbore {
            get {
                return this.statusWellboreField;
            }
            set {
                this.statusWellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusWellboreSpecified {
            get {
                return this.statusWellboreFieldSpecified;
            }
            set {
                this.statusWellboreFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True (="1" or "true") indicates that the wellbore is active. False (="0" or "false") indicates otherwise. It is the servers responsibility to  set this value based on its available internal data (e.g., what objects are changing).</summary>
        [System.ComponentModel.DescriptionAttribute("True (=\"1\" or \"true\") indicates that the wellbore is active. False (=\"0\" or \"fals" +
            "e\") indicates otherwise. It is the servers responsibility to  set this value bas" +
            "ed on its available internal data (e.g., what objects are changing).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsActive", DataType="boolean")]
        public bool IsActive {
            get {
                return this.isActiveField;
            }
            set {
                this.isActiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsActiveSpecified {
            get {
                return this.isActiveFieldSpecified;
            }
            set {
                this.isActiveFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>POSC wellbore purpose.</summary>
        [System.ComponentModel.DescriptionAttribute("POSC wellbore purpose.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PurposeWellbore", DataType="WellPurpose")]
        public WellPurpose PurposeWellbore {
            get {
                return this.purposeWellboreField;
            }
            set {
                this.purposeWellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PurposeWellboreSpecified {
            get {
                return this.purposeWellboreFieldSpecified;
            }
            set {
                this.purposeWellboreFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Type of wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Type of wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TypeWellbore", DataType="WellboreType")]
        public WellboreType TypeWellbore {
            get {
                return this.typeWellboreField;
            }
            set {
                this.typeWellboreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TypeWellboreSpecified {
            get {
                return this.typeWellboreFieldSpecified;
            }
            set {
                this.typeWellboreFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>POSC wellbore trajectory shape.</summary>
        [System.ComponentModel.DescriptionAttribute("POSC wellbore trajectory shape.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Shape", DataType="WellboreShape")]
        public WellboreShape Shape {
            get {
                return this.shapeField;
            }
            set {
                this.shapeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ShapeSpecified {
            get {
                return this.shapeFieldSpecified;
            }
            set {
                this.shapeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time of wellbore kickoff.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time of wellbore kickoff.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimKickoff", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimKickoff {
            get {
                return this.dTimKickoffField;
            }
            set {
                this.dTimKickoffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>True ("true" of "1") indicates that the wellbore has  acheieved total depth. That is, drilling has completed. False ("false" or "0") indicates otherwise.  Not given indicates that it is not known whether total depth has been reached.</summary>
        [System.ComponentModel.DescriptionAttribute("True (\"true\" of \"1\") indicates that the wellbore has  acheieved total depth. That" +
            " is, drilling has completed. False (\"false\" or \"0\") indicates otherwise.  Not gi" +
            "ven indicates that it is not known whether total depth has been reached.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AchievedTD", DataType="boolean")]
        public bool AchievedTD {
            get {
                return this.achievedTDField;
            }
            set {
                this.achievedTDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AchievedTDSpecified {
            get {
                return this.achievedTDFieldSpecified;
            }
            set {
                this.achievedTDFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the borehole.  If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the borehole.  If status is plugged, indicates the maximum " +
            "depth reached before plugging. It is recommended that this value be updated abou" +
            "t every 10 minutes by an assigned  raw data provider at a site.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Md", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord Md {
            get {
                return this.mdField;
            }
            set {
                this.mdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The  true vertical depth of the borehole.   If status is plugged, indicates the maximum depth reached before plugging.  It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.</summary>
        [System.ComponentModel.DescriptionAttribute("The  true vertical depth of the borehole.   If status is plugged, indicates the m" +
            "aximum depth reached before plugging.  It is recommended that this value be upda" +
            "ted about every 10 minutes by an assigned  raw data provider at a site.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Tvd", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord Tvd {
            get {
                return this.tvdField;
            }
            set {
                this.tvdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The measured depth of the bit.  If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.</summary>
        [System.ComponentModel.DescriptionAttribute("The measured depth of the bit.  If isActive=false then this value is not relevant" +
            ". It is recommended that this value be updated about every 10 minutes by an assi" +
            "gned  raw data provider at a site.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdBit", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdBit {
            get {
                return this.mdBitField;
            }
            set {
                this.mdBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The true vertical depth of the bit. If isActive=false then this value is not relevant. It is recommended that this value be updated about every 10 minutes by an assigned  raw data provider at a site.</summary>
        [System.ComponentModel.DescriptionAttribute("The true vertical depth of the bit. If isActive=false then this value is not rele" +
            "vant. It is recommended that this value be updated about every 10 minutes by an " +
            "assigned  raw data provider at a site.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdBit", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdBit {
            get {
                return this.tvdBitField;
            }
            set {
                this.tvdBitField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Kickoff measured depth of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Kickoff measured depth of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdKickoff", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdKickoff {
            get {
                return this.mdKickoffField;
            }
            set {
                this.mdKickoffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Kickoff true vertical depth of the wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Kickoff true vertical depth of the wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdKickoff", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdKickoff {
            get {
                return this.tvdKickoffField;
            }
            set {
                this.tvdKickoffField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Planned measured depth for the wellbore total depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Planned measured depth for the wellbore total depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdPlanned", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdPlanned {
            get {
                return this.mdPlannedField;
            }
            set {
                this.mdPlannedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Planned true vertical depth for the wellbore total depth.</summary>
        [System.ComponentModel.DescriptionAttribute("Planned true vertical depth for the wellbore total depth.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdPlanned", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdPlanned {
            get {
                return this.tvdPlannedField;
            }
            set {
                this.tvdPlannedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Planned measured for the wellbore total depth - with respect to seabed.</summary>
        [System.ComponentModel.DescriptionAttribute("Planned measured for the wellbore total depth - with respect to seabed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdSubSeaPlanned", DataType="MeasuredDepthCoord")]
        public MeasuredDepthCoord MdSubSeaPlanned {
            get {
                return this.mdSubSeaPlannedField;
            }
            set {
                this.mdSubSeaPlannedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Planned true vertical depth for the wellbore total depth - with respect to seabed.</summary>
        [System.ComponentModel.DescriptionAttribute("Planned true vertical depth for the wellbore total depth - with respect to seabed" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TvdSubSeaPlanned", DataType="WellVerticalDepthCoord")]
        public WellVerticalDepthCoord TvdSubSeaPlanned {
            get {
                return this.tvdSubSeaPlannedField;
            }
            set {
                this.tvdSubSeaPlannedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Target days for drilling wellbore.</summary>
        [System.ComponentModel.DescriptionAttribute("Target days for drilling wellbore.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DayTarget", DataType="TimeMeasure")]
        public TimeMeasure DayTarget {
            get {
                return this.dayTargetField;
            }
            set {
                this.dayTargetField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Well", DataType="DataObjectReference")]
        public DataObjectReference Well {
            get {
                return this.wellField;
            }
            set {
                this.wellField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentWellbore", DataType="DataObjectReference")]
        public DataObjectReference ParentWellbore {
            get {
                return this.parentWellboreField;
            }
            set {
                this.parentWellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellPurpose {
        
        /// <remarks/>
        appraisal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("appraisal -- confirmation appraisal")]
        appraisalconfirmationappraisal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("appraisal -- exploratory appraisal")]
        appraisalexploratoryappraisal,
        
        /// <remarks/>
        exploration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exploration -- deeper-pool wildcat")]
        explorationdeeperpoolwildcat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exploration -- new-field wildcat")]
        explorationnewfieldwildcat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exploration -- new-pool wildcat")]
        explorationnewpoolwildcat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exploration -- outpost wildcat")]
        explorationoutpostwildcat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exploration -- shallower-pool wildcat")]
        explorationshallowerpoolwildcat,
        
        /// <remarks/>
        development,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("development -- infill development")]
        developmentinfilldevelopment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("development -- injector")]
        developmentinjector,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("development -- producer")]
        developmentproducer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fluid storage")]
        fluidstorage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fluid storage -- gas storage")]
        fluidstoragegasstorage,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general srvc")]
        generalsrvc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general srvc -- borehole re-acquisition")]
        generalsrvcboreholereacquisition,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general srvc -- observation")]
        generalsrvcobservation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general srvc -- relief")]
        generalsrvcrelief,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general srvc -- research")]
        generalsrvcresearch,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general srvc -- research -- drill test")]
        generalsrvcresearchdrilltest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general srvc -- research -- strat test")]
        generalsrvcresearchstrattest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("general srvc -- waste disposal")]
        generalsrvcwastedisposal,
        
        /// <remarks/>
        mineral,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellboreShape {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("build and hold")]
        buildandhold,
        
        /// <remarks/>
        deviated,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("double kickoff")]
        doublekickoff,
        
        /// <remarks/>
        horizontal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S-shaped")]
        Sshaped,
        
        /// <remarks/>
        vertical,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Well : AbstractObject {
        
        private string nameLegalField;
        
        private string numLicenseField;
        
        private string numGovtField;
        
        private Energistics.DataAccess.Timestamp dTimLicenseField;
        
        private string fieldField;
        
        private string countryField;
        
        private string stateField;
        
        private string countyField;
        
        private string regionField;
        
        private string districtField;
        
        private string blockField;
        
        private string timeZoneField;
        
        private string operatorField;
        
        private string operatorDivField;
        
        private string originalOperatorField;
        
        private DimensionlessMeasure pcInterestField;
        
        private string numAPIField;
        
        private WellStatus statusWellField;
        
        private bool statusWellFieldSpecified;
        
        private WellPurpose purposeWellField;
        
        private bool purposeWellFieldSpecified;
        
        private WellFluid fluidWellField;
        
        private bool fluidWellFieldSpecified;
        
        private WellDirection directionWellField;
        
        private bool directionWellFieldSpecified;
        
        private Energistics.DataAccess.Timestamp dTimSpudField;
        
        private Energistics.DataAccess.Timestamp dTimPaField;
        
        private LengthMeasure waterDepthField;
        
        private GeodeticWellLocation geographicLocationWGS84Field;
        
        private AbstractWellLocation[] wellLocationField;
        
        private PublicLandSurveySystem wellPublicLandSurveySystemLocationField;
        
        private ReferencePoint[] referencePointField;
        
        private WellElevationCoord wellheadElevationField;
        
        private WellDatum[] wellDatumField;
        
        private WellElevationCoord groundElevationField;
        
        /// <remarks/>
        /// <summary>Legal name of the well.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Legal name of the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NameLegal", DataType="String64")]
        public string NameLegal {
            get {
                return this.nameLegalField;
            }
            set {
                this.nameLegalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>License number of the well.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("License number of the well.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumLicense", DataType="String64")]
        public string NumLicense {
            get {
                return this.numLicenseField;
            }
            set {
                this.numLicenseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Government assigned well number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Government assigned well number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumGovt", DataType="String64")]
        public string NumGovt {
            get {
                return this.numGovtField;
            }
            set {
                this.numGovtField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the license  was issued.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time the license  was issued.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimLicense", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimLicense {
            get {
                return this.dTimLicenseField;
            }
            set {
                this.dTimLicenseField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the field in which the well is located.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the field in which the well is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Field", DataType="String64")]
        public string Field {
            get {
                return this.fieldField;
            }
            set {
                this.fieldField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Country in which the well is located.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Country in which the well is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Country", DataType="String64")]
        public string Country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>State or province in which the well is located.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("State or province in which the well is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("State", DataType="String64")]
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>County in which the well is located.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("County in which the well is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("County", DataType="String64")]
        public string County {
            get {
                return this.countyField;
            }
            set {
                this.countyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Geo-political region in which the well is located.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Geo-political region in which the well is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Region", DataType="String64")]
        public string Region {
            get {
                return this.regionField;
            }
            set {
                this.regionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Geo-political district name.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Geo-political district name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("District", DataType="String64")]
        public string District {
            get {
                return this.districtField;
            }
            set {
                this.districtField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Block name in which the  well is located.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Block name in which the  well is located.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Block", DataType="String64")]
        public string Block {
            get {
                return this.blockField;
            }
            set {
                this.blockField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The time zone in which the well is located. It is the deviation in hours and minutes from UTC. This should be the normal time zone at the well and not a seasonally-adjusted value, such as daylight savings time.</summary>
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("The time zone in which the well is located. It is the deviation in hours and minu" +
            "tes from UTC. This should be the normal time zone at the well and not a seasonal" +
            "ly-adjusted value, such as daylight savings time.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeZone", DataType="TimeZone")]
        public string TimeZone {
            get {
                return this.timeZoneField;
            }
            set {
                this.timeZoneField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Operator company name.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Operator company name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Operator", DataType="String64")]
        public string Operator {
            get {
                return this.operatorField;
            }
            set {
                this.operatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Division of the operator company.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Division of the operator company.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OperatorDiv", DataType="String64")]
        public string OperatorDiv {
            get {
                return this.operatorDivField;
            }
            set {
                this.operatorDivField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Original operator of the well. This may be different than the current operator.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Original operator of the well. This may be different than the current operator.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OriginalOperator", DataType="String64")]
        public string OriginalOperator {
            get {
                return this.originalOperatorField;
            }
            set {
                this.originalOperatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Interest for operator. Commonly in percent.</summary>
        [System.ComponentModel.DescriptionAttribute("Interest for operator. Commonly in percent.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PcInterest", DataType="DimensionlessMeasure")]
        public DimensionlessMeasure PcInterest {
            get {
                return this.pcInterestField;
            }
            set {
                this.pcInterestField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>American Petroleum Institute well number.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("American Petroleum Institute well number.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NumAPI", DataType="String64")]
        public string NumAPI {
            get {
                return this.numAPIField;
            }
            set {
                this.numAPIField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>POSC well status.</summary>
        [System.ComponentModel.DescriptionAttribute("POSC well status.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StatusWell", DataType="WellStatus")]
        public WellStatus StatusWell {
            get {
                return this.statusWellField;
            }
            set {
                this.statusWellField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusWellSpecified {
            get {
                return this.statusWellFieldSpecified;
            }
            set {
                this.statusWellFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>POSC well purpose.</summary>
        [System.ComponentModel.DescriptionAttribute("POSC well purpose.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PurposeWell", DataType="WellPurpose")]
        public WellPurpose PurposeWell {
            get {
                return this.purposeWellField;
            }
            set {
                this.purposeWellField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PurposeWellSpecified {
            get {
                return this.purposeWellFieldSpecified;
            }
            set {
                this.purposeWellFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>POSC well fluid. The type of fluid being produced from or injected  into a well facility.</summary>
        [System.ComponentModel.DescriptionAttribute("POSC well fluid. The type of fluid being produced from or injected  into a well f" +
            "acility.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidWell", DataType="WellFluid")]
        public WellFluid FluidWell {
            get {
                return this.fluidWellField;
            }
            set {
                this.fluidWellField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidWellSpecified {
            get {
                return this.fluidWellFieldSpecified;
            }
            set {
                this.fluidWellFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>POSC well direction. The direction of the flow of the fluids in a well facility (generally, injected or produced, or some combination).</summary>
        [System.ComponentModel.DescriptionAttribute("POSC well direction. The direction of the flow of the fluids in a well facility (" +
            "generally, injected or produced, or some combination).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DirectionWell", DataType="WellDirection")]
        public WellDirection DirectionWell {
            get {
                return this.directionWellField;
            }
            set {
                this.directionWellField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DirectionWellSpecified {
            get {
                return this.directionWellFieldSpecified;
            }
            set {
                this.directionWellFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time at which the well was spudded.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time at which the well was spudded.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimSpud", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimSpud {
            get {
                return this.dTimSpudField;
            }
            set {
                this.dTimSpudField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time at which the well was plugged and abandoned.</summary>
        [System.ComponentModel.DescriptionAttribute("Date and time at which the well was plugged and abandoned.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DTimPa", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DTimPa {
            get {
                return this.dTimPaField;
            }
            set {
                this.dTimPaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Depth of water (not land rigs).</summary>
        [System.ComponentModel.DescriptionAttribute("Depth of water (not land rigs).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WaterDepth", DataType="LengthMeasure")]
        public LengthMeasure WaterDepth {
            get {
                return this.waterDepthField;
            }
            set {
                this.waterDepthField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The latitude (in coordinate1) and longitude (in coordinate2) of the well location in the WGS84 coordinate system (equivalent to EPSG:4326). Units are in decimal degrees. Coordinate 1 and 2 refer to the ProjectedWellLocation.</summary>
        [System.ComponentModel.DescriptionAttribute("The latitude (in coordinate1) and longitude (in coordinate2) of the well location" +
            " in the WGS84 coordinate system (equivalent to EPSG:4326). Units are in decimal " +
            "degrees. Coordinate 1 and 2 refer to the ProjectedWellLocation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeographicLocationWGS84", DataType="GeodeticWellLocation")]
        public GeodeticWellLocation GeographicLocationWGS84 {
            get {
                return this.geographicLocationWGS84Field;
            }
            set {
                this.geographicLocationWGS84Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WellLocation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellLocation", DataType="AbstractWellLocation")]
        public AbstractWellLocation[] WellLocation {
            get {
                return this.wellLocationField;
            }
            set {
                this.wellLocationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellPublicLandSurveySystemLocation", DataType="PublicLandSurveySystem")]
        public PublicLandSurveySystem WellPublicLandSurveySystemLocation {
            get {
                return this.wellPublicLandSurveySystemLocationField;
            }
            set {
                this.wellPublicLandSurveySystemLocationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ReferencePoint")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencePoint", DataType="ReferencePoint")]
        public ReferencePoint[] ReferencePoint {
            get {
                return this.referencePointField;
            }
            set {
                this.referencePointField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellheadElevation", DataType="WellElevationCoord")]
        public WellElevationCoord WellheadElevation {
            get {
                return this.wellheadElevationField;
            }
            set {
                this.wellheadElevationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WellDatum")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellDatum", DataType="WellDatum")]
        public WellDatum[] WellDatum {
            get {
                return this.wellDatumField;
            }
            set {
                this.wellDatumField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GroundElevation", DataType="WellElevationCoord")]
        public WellElevationCoord GroundElevation {
            get {
                return this.groundElevationField;
            }
            set {
                this.groundElevationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellFluid {
        
        /// <remarks/>
        air,
        
        /// <remarks/>
        condensate,
        
        /// <remarks/>
        dry,
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas-water")]
        gaswater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non HC gas")]
        nonHCgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("non HC gas -- CO2")]
        nonHCgasCO2,
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil-gas")]
        oilgas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil-water")]
        oilwater,
        
        /// <remarks/>
        steam,
        
        /// <remarks/>
        water,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water -- brine")]
        waterbrine,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water -- fresh water")]
        waterfreshwater,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum WellDirection {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("huff-n-puff")]
        huffnpuff,
        
        /// <remarks/>
        injector,
        
        /// <remarks/>
        producer,
        
        /// <remarks/>
        uncertain,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class GraphicalInformationSet : AbstractObject {
        
        private AbstractGraphicalInformation[] graphicalInformationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GraphicalInformation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GraphicalInformation", DataType="AbstractGraphicalInformation")]
        public AbstractGraphicalInformation[] GraphicalInformation {
            get {
                return this.graphicalInformationField;
            }
            set {
                this.graphicalInformationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class DataAssuranceRecord : AbstractObject {
        
        private string policyIdField;
        
        private string policyNameField;
        
        private string referencedElementNameField;
        
        private string referencedElementUidField;
        
        private string originField;
        
        private bool conformanceField;
        
        private Energistics.DataAccess.Timestamp dateField;
        
        private string commentField;
        
        private FailingRule[] failingRulesField;
        
        private IndexRange indexRangeField;
        
        private DataObjectReference referencedDataField;
        
        /// <remarks/>
        /// <summary>Identifier of the policy whose conformance is being described.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Identifier of the policy whose conformance is being described.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PolicyId", DataType="String64")]
        public string PolicyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Human-readable name of the policy</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("Human-readable name of the policy")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PolicyName", DataType="String2000")]
        public string PolicyName {
            get {
                return this.policyNameField;
            }
            set {
                this.policyNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the Policy applies to a single element within the referenced data object this attribute holds its element name.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("If the Policy applies to a single element within the referenced data object this " +
            "attribute holds its element name.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencedElementName", DataType="String64")]
        public string ReferencedElementName {
            get {
                return this.referencedElementNameField;
            }
            set {
                this.referencedElementNameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If the Policy applies to a single occurrence of a recurring element within the referenced data object this attribute holds its uid.  The name of the recurring element would be in the ReferencedElementName.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("If the Policy applies to a single occurrence of a recurring element within the re" +
            "ferenced data object this attribute holds its uid.  The name of the recurring el" +
            "ement would be in the ReferencedElementName.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencedElementUid", DataType="String64")]
        public string ReferencedElementUid {
            get {
                return this.referencedElementUidField;
            }
            set {
                this.referencedElementUidField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Agent which checked the data for conformance with the policy. This could be a person or an automated computer process or any number of other things.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Agent which checked the data for conformance with the policy. This could be a per" +
            "son or an automated computer process or any number of other things.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Origin", DataType="string")]
        public string Origin {
            get {
                return this.originField;
            }
            set {
                this.originField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Yes/no flag indicating whether this particular data ???? conforms with the policy or not.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Yes/no flag indicating whether this particular data ???? conforms with the policy" +
            " or not.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Conformance", DataType="boolean")]
        public bool Conformance {
            get {
                return this.conformanceField;
            }
            set {
                this.conformanceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date the policy was last checked. This is the date for which the Conformance value is valid.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Date the policy was last checked. This is the date for which the Conformance valu" +
            "e is valid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Date", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Comment", DataType="string")]
        public string Comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FailingRules")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FailingRules", DataType="FailingRule")]
        public FailingRule[] FailingRules {
            get {
                return this.failingRulesField;
            }
            set {
                this.failingRulesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexRange", DataType="IndexRange")]
        public IndexRange IndexRange {
            get {
                return this.indexRangeField;
            }
            set {
                this.indexRangeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencedData", DataType="DataObjectReference")]
        public DataObjectReference ReferencedData {
            get {
                return this.referencedDataField;
            }
            set {
                this.referencedDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class GeodeticCrs : AbstractObject {
        
        private AbstractGeodeticCrs abstractGeodeticCrsField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractGeodeticCrs", DataType="AbstractGeodeticCrs")]
        public AbstractGeodeticCrs AbstractGeodeticCrs {
            get {
                return this.abstractGeodeticCrsField;
            }
            set {
                this.abstractGeodeticCrsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class ProjectedCrs : AbstractObject {
        
        private AxisOrder2d axisOrderField;
        
        private AbstractProjectedCrs abstractProjectedCrsField;
        
        private string uomField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisOrder", DataType="AxisOrder2d")]
        public AxisOrder2d AxisOrder {
            get {
                return this.axisOrderField;
            }
            set {
                this.axisOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractProjectedCrs", DataType="AbstractProjectedCrs")]
        public AbstractProjectedCrs AbstractProjectedCrs {
            get {
                return this.abstractProjectedCrsField;
            }
            set {
                this.abstractProjectedCrsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AxisOrder2d {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("easting northing")]
        eastingnorthing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("northing easting")]
        northingeasting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("westing southing")]
        westingsouthing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("southing westing")]
        southingwesting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("northing westing")]
        northingwesting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("westing northing")]
        westingnorthing,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class VerticalCrs : AbstractObject {
        
        private VerticalDirection directionField;
        
        private AbstractVerticalCrs abstractVerticalCrsField;
        
        private string uomField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="VerticalDirection")]
        public VerticalDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractVerticalCrs", DataType="AbstractVerticalCrs")]
        public AbstractVerticalCrs AbstractVerticalCrs {
            get {
                return this.abstractVerticalCrsField;
            }
            set {
                this.abstractVerticalCrsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUomExt")]
        public string uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VerticalDirection {
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        down,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class ActivityTemplate : AbstractObject {
        
        private ParameterTemplate[] parameterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="ParameterTemplate")]
        public ParameterTemplate[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class Activity : AbstractObject {
        
        private DataObjectReference activityDescriptorField;
        
        private DataObjectReference parentField;
        
        private AbstractActivityParameter[] parameterField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivityDescriptor", DataType="DataObjectReference")]
        public DataObjectReference ActivityDescriptor {
            get {
                return this.activityDescriptorField;
            }
            set {
                this.activityDescriptorField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parent", DataType="DataObjectReference")]
        public DataObjectReference Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="AbstractActivityParameter")]
        public AbstractActivityParameter[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class TimeSeries : AbstractObject {
        
        private GeologicTime[] timeField;
        
        private TimeSeriesParentage timeSeriesParentageField;
        
        /// <remarks/>
        /// <summary>Individual times composing the series. The list ordering is used by the time index.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Time")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Individual times composing the series. The list ordering is used by the time inde" +
            "x.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Time", DataType="GeologicTime")]
        public GeologicTime[] Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSeriesParentage", DataType="TimeSeriesParentage")]
        public TimeSeriesParentage TimeSeriesParentage {
            get {
                return this.timeSeriesParentageField;
            }
            set {
                this.timeSeriesParentageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class PropertyKind : AbstractObject {
        
        private bool isAbstractField;
        
        private Energistics.DataAccess.Timestamp deprecationDateField;
        
        private Energistics.DataAccess.ExtensibleEnum<QuantityClassKind> quantityClassField;
        
        private DataObjectReference parentField;
        
        /// <remarks/>
        /// <summary>This boolean indicates whether the PropertyKind should be used as a real property or not.  If the Is Abstract flag is set, then this entry should be used only as the parent of a real property. For example, the PropertyKind of "force per length" shouldn't be used directly, as it is really just a description of some units of measure. This entry should only be used as the parent of the real physical property "surface tension".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"This boolean indicates whether the PropertyKind should be used as a real property or not.  If the Is Abstract flag is set, then this entry should be used only as the parent of a real property. For example, the PropertyKind of ""force per length"" shouldn't be used directly, as it is really just a description of some units of measure. This entry should only be used as the parent of the real physical property ""surface tension"".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsAbstract", DataType="boolean")]
        public bool IsAbstract {
            get {
                return this.isAbstractField;
            }
            set {
                this.isAbstractField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date at which this property dictionary entry must no longer be used. Files generated before this date would have used this entry so it is left here for reference.   A null value means the property kind is still valid.</summary>
        [System.ComponentModel.DescriptionAttribute("Date at which this property dictionary entry must no longer be used. Files genera" +
            "ted before this date would have used this entry so it is left here for reference" +
            ".   A null value means the property kind is still valid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeprecationDate", DataType="TimeStamp")]
        public Energistics.DataAccess.Timestamp DeprecationDate {
            get {
                return this.deprecationDateField;
            }
            set {
                this.deprecationDateField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A reference to the name of a quantity class in the Energistics Unit of Measure Dictionary. If there is no match in the Energistics Unit of Measure Dictionary, then this attribute is purely for human information.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A reference to the name of a quantity class in the Energistics Unit of Measure Di" +
            "ctionary. If there is no match in the Energistics Unit of Measure Dictionary, th" +
            "en this attribute is purely for human information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("QuantityClass", DataType="QuantityClassKindExt")]
        public Energistics.DataAccess.ExtensibleEnum<QuantityClassKind> QuantityClass {
            get {
                return this.quantityClassField;
            }
            set {
                this.quantityClassField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates the parent of this property kind. BUSINESS RULE : Only the top root abstract property kind has not to define a parent property kind.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicates the parent of this property kind. BUSINESS RULE : Only the top root abs" +
            "tract property kind has not to define a parent property kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parent", DataType="DataObjectReference")]
        public DataObjectReference Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class PropertyKindDictionary : AbstractObject {
        
        private PropertyKind[] propertyKindField;
        
        /// <remarks/>
        /// <summary>Defines which property kind are contained into a property kind dictionary.</summary>
        [System.Xml.Serialization.XmlElementAttribute("PropertyKind")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines which property kind are contained into a property kind dictionary.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PropertyKind", DataType="PropertyKind")]
        public PropertyKind[] PropertyKind {
            get {
                return this.propertyKindField;
            }
            set {
                this.propertyKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("WITSML", "2.0")]
    public partial class EpcExternalPartReference : AbstractObject {
        
        private string filenameField;
        
        private string mimeTypeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Filename", DataType="String2000")]
        public string Filename {
            get {
                return this.filenameField;
            }
            set {
                this.filenameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.  MIME type for HDF proxy is : application/x-hdf5 (by convention).</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2000)]
        [System.ComponentModel.DescriptionAttribute("IAMF registered, if one exists, or a free text field. Needs documentation on seis" +
            "mic especially.  MIME type for HDF proxy is : application/x-hdf5 (by convention)" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MimeType", DataType="String2000")]
        public string MimeType {
            get {
                return this.mimeTypeField;
            }
            set {
                this.mimeTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LogarithmicPowerRatioUom {
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        dB,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerTimeUom {
        
        /// <remarks/>
        kat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/h")]
        kmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/s")]
        kmols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/h")]
        lbmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/s")]
        lbmols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/s")]
        mols,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricConductivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kS/m")]
        kSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/cm")]
        mScm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/m")]
        mSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S/m")]
        Sm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerRotationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/rad")]
        ft3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rad")]
        m3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rev")]
        m3rev,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DiffusiveTimeOfFlightUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h(0.5)")]
        h05,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s(0.5)")]
        s05,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(min.ft2)")]
        ft3minft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(s.ft2)")]
        ft3sft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft2)")]
        galUKhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in2)")]
        galUKhin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft2)")]
        galUKminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft2)")]
        galUShft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in2)")]
        galUShin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft2)")]
        galUSminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m2)")]
        m3sm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MobilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/(Pa.s)")]
        DPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/cP")]
        DcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft2/(lbf.s)")]
        mDft2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.in2/(lbf.s)")]
        mDin2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/(Pa.s)")]
        mDPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/cP")]
        mDcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]/(Pa.s)")]
        TDAPIPas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatTransferCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.deltaF)")]
        BtuIThft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.deltaR)")]
        BtuIThft2deltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.m2.deltaC)")]
        BtuIThm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2.deltaF)")]
        BtuITsft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2.deltaC)")]
        calthhcm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm2.deltaC)")]
        calthscm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(s.m2.deltaC)")]
        Jsm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m2.deltaC)")]
        kcalthhm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(h.m2.deltaK)")]
        kJhm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m2.deltaK)")]
        kWm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.deltaK)")]
        Wm2deltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerEnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(kW.h)")]
        kgkWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/J")]
        kgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/MJ")]
        kgMJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(hp.h)")]
        lbmhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/J")]
        mgJ,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentOfInertiaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2")]
        lbmft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum CapacitanceUom {
        
        /// <remarks/>
        cF,
        
        /// <remarks/>
        dF,
        
        /// <remarks/>
        EF,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        fF,
        
        /// <remarks/>
        GF,
        
        /// <remarks/>
        kF,
        
        /// <remarks/>
        mF,
        
        /// <remarks/>
        MF,
        
        /// <remarks/>
        nF,
        
        /// <remarks/>
        pF,
        
        /// <remarks/>
        TF,
        
        /// <remarks/>
        uF,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxDensityPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gauss/cm")]
        gausscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mT/dm")]
        mTdm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T/m")]
        Tm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/bbl")]
        ftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft3")]
        ftft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/gal[US]")]
        ftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/dm3")]
        kmdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/L")]
        kmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m3")]
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[UK]")]
        migalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[US]")]
        migalUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum CationExchangeCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute(".01 meq/g")]
        Item01meqg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolecularWeightUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/mol")]
        gmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/mol")]
        kgmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/lbmol")]
        lbmlbmol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxUom {
        
        /// <remarks/>
        cWb,
        
        /// <remarks/>
        dWb,
        
        /// <remarks/>
        EWb,
        
        /// <remarks/>
        fWb,
        
        /// <remarks/>
        GWb,
        
        /// <remarks/>
        kWb,
        
        /// <remarks/>
        mWb,
        
        /// <remarks/>
        MWb,
        
        /// <remarks/>
        nWb,
        
        /// <remarks/>
        pWb,
        
        /// <remarks/>
        TWb,
        
        /// <remarks/>
        uWb,
        
        /// <remarks/>
        Wb,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalConductanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/deltaK")]
        WdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumePerTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3.degC")]
        kgm3degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3.K")]
        kgm3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lb/ft.degF")]
        lbftdegF,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum QuantityOfLightUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm.s")]
        lms,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceLengthPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/m")]
        kgfmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in")]
        lbfftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in/in")]
        lbfinin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m/m")]
        Nmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/ft")]
        tonfUSmift,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SolidAngleUom {
        
        /// <remarks/>
        sr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3.kPa")]
        kgm3kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lb/ft.psi")]
        lbftpsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.acre.ft)")]
        bbldacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m3)")]
        m3sm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kmol")]
        dm3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbmol")]
        ft3lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kmol")]
        Lkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/mol")]
        Lmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kmol")]
        m3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/mol")]
        m3mol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstanceUom {
        
        /// <remarks/>
        kmol,
        
        /// <remarks/>
        lbmol,
        
        /// <remarks/>
        mmol,
        
        /// <remarks/>
        mol,
        
        /// <remarks/>
        umol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DipoleMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.m")]
        Cm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APINeutronUom {
        
        /// <remarks/>
        nAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/a")]
        Item1a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/d")]
        Item1d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/h")]
        Item1h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/min")]
        Item1min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ms")]
        Item1ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/s")]
        Item1s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/us")]
        Item1us,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/wk")]
        Item1wk,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/kPa")]
        deltaCkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/psi")]
        deltaFpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/Pa")]
        deltaKPa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APIGammaRayUom {
        
        /// <remarks/>
        gAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricCurrentDensityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/cm2")]
        Acm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/ft2")]
        Aft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m2")]
        Am2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm2")]
        Amm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/cm2")]
        mAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/ft2")]
        mAft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/cm2")]
        uAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/in2")]
        uAin2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/acre")]
        Item1E6bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/acre")]
        bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft2")]
        ft3ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m2")]
        m3m2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalElectricPotentialDifferenceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/uV")]
        Item1uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/V")]
        Item1V,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 h/ft")]
        Item0001hft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/km")]
        hkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/ft")]
        minft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/m")]
        minm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/cm")]
        mscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/ft")]
        msft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/in")]
        msin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/m")]
        msm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/ft")]
        nsft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/m")]
        nsm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/cm")]
        scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft")]
        sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/in")]
        sin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m")]
        sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/ft")]
        usft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/in")]
        usin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/m")]
        usm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/psi")]
        bblpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kPa")]
        m3kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/Pa")]
        m3Pa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm2")]
        Ccm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m2")]
        Cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm2")]
        Cmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mC/m2")]
        mCm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m.s)")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.h)")]
        lbmfth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.s)")]
        lbmfts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SignalingEventPerTimeUom {
        
        /// <remarks/>
        Bd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m")]
        Jm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m")]
        MJm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureSquaredUom {
        
        /// <remarks/>
        bar2,
        
        /// <remarks/>
        GPa2,
        
        /// <remarks/>
        kPa2,
        
        /// <remarks/>
        kpsi2,
        
        /// <remarks/>
        Pa2,
        
        /// <remarks/>
        psi2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AngularAccelerationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s2")]
        rads2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rpm/s")]
        rpms,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalMassTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/(kg.s)")]
        Item1kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bq/kg")]
        Bqkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pCi/g")]
        pCig,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalDiffusivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimeLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl.ft/d")]
        Item1000bblftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m4/d")]
        Item1000m4d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m4/s")]
        m4s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SecondMomentOfAreaUom {
        
        /// <remarks/>
        cm4,
        
        /// <remarks/>
        in4,
        
        /// <remarks/>
        m4,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.cm2")]
        dynecm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m2")]
        kNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in2")]
        lbfin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN.m2")]
        mNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.cm2")]
        pdlcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK].ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft2")]
        tonfUSft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricFieldStrengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/ft")]
        mVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/m")]
        mVm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/ft")]
        uVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/m")]
        uVm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/m")]
        Vm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m2")]
        molm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerAmountOfSubstanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/mol")]
        m2mol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LogarithmicPowerRatioPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/m")]
        Bm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/ft")]
        dBft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/km")]
        dBkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/m")]
        dBm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cd/m2")]
        cdm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d2")]
        bbld2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h2")]
        bblh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s2")]
        dm3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d2")]
        ft3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h2")]
        ft3h2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min2")]
        ft3min2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s2")]
        ft3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h2")]
        galUKh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min2")]
        galUKmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h2")]
        galUSh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min2")]
        galUSmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s2")]
        Ls2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d2")]
        m3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s2")]
        m3s2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarHeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbmol.deltaF)")]
        BtuITlbmoldeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(mol.deltaC)")]
        calthmoldeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(mol.deltaK)")]
        JmoldeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kmol.deltaK)")]
        kJkmoldeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumeFlowRatePerVolumeFlowRateUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(bbl/d)/(bbl/d)")]
        bbldbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/d)/(m3/d)")]
        m3dm3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/s)/(m3/s)")]
        m3sm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 (ft3/d)/(bbl/d)")]
        Item1E6ft3dbbld,
        
        /// <remarks/>
        Euc,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum FrequencyIntervalUom {
        
        /// <remarks/>
        O,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalUom {
        
        /// <remarks/>
        deltaC,
        
        /// <remarks/>
        deltaF,
        
        /// <remarks/>
        deltaK,
        
        /// <remarks/>
        deltaR,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum RadiantIntensityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/sr")]
        Wsr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DataTransferSpeedUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit/s")]
        bits,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("byte/s")]
        bytes,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum InductanceUom {
        
        /// <remarks/>
        cH,
        
        /// <remarks/>
        dH,
        
        /// <remarks/>
        EH,
        
        /// <remarks/>
        fH,
        
        /// <remarks/>
        GH,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        kH,
        
        /// <remarks/>
        MH,
        
        /// <remarks/>
        mH,
        
        /// <remarks/>
        nH,
        
        /// <remarks/>
        TH,
        
        /// <remarks/>
        uH,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum KinematicViscosityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        cSt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s.m3/kg")]
        Pasm3kg,
        
        /// <remarks/>
        St,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerPressureLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(ft.psi.d)")]
        bblftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(ft.psi.d)")]
        ft3ftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(kPa.d)")]
        m2kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(Pa.s)")]
        m2Pas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbf")]
        Item1lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/N")]
        Item1N,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft2")]
        Item1ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/km2")]
        Item1km2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m2")]
        Item1m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi2")]
        Item1mi2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressurePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/h")]
        atmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/h")]
        barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/h")]
        kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/min")]
        kPamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/h")]
        MPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/h")]
        Pah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/s")]
        Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/h")]
        psih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/min")]
        psimin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.h")]
        Ah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s")]
        As,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        cC,
        
        /// <remarks/>
        dC,
        
        /// <remarks/>
        EC,
        
        /// <remarks/>
        fC,
        
        /// <remarks/>
        GC,
        
        /// <remarks/>
        kC,
        
        /// <remarks/>
        MC,
        
        /// <remarks/>
        mC,
        
        /// <remarks/>
        nC,
        
        /// <remarks/>
        pC,
        
        /// <remarks/>
        TC,
        
        /// <remarks/>
        uC,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousEfficacyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/W")]
        lmW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressurePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m3")]
        Pam3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2.d/(cP.ft3)")]
        psi2dcPft3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ActivityOfRadioactivityUom {
        
        /// <remarks/>
        Bq,
        
        /// <remarks/>
        Ci,
        
        /// <remarks/>
        GBq,
        
        /// <remarks/>
        MBq,
        
        /// <remarks/>
        mCi,
        
        /// <remarks/>
        nCi,
        
        /// <remarks/>
        pCi,
        
        /// <remarks/>
        TBq,
        
        /// <remarks/>
        uCi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/psi")]
        ftpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kPa")]
        mkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/Pa")]
        mPa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerCountUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("b/electron")]
        belectron,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticVectorPotentialUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/m")]
        Wbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/mm")]
        Wbmm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFieldStrengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m")]
        Am,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm")]
        Amm,
        
        /// <remarks/>
        Oe,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalResistanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/W")]
        deltaKW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/kgf")]
        kgfkgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/lbf")]
        lbflbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/N")]
        NN,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/lbm")]
        ftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kg")]
        mkg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(h.ft2)")]
        lbmolhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(s.ft2)")]
        lbmolsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/(s.m2)")]
        molsm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LinearThermalExpansionUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaK")]
        Item1deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/(in.deltaF)")]
        inindeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/(m.deltaK)")]
        mmdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/(mm.deltaK)")]
        mmmmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricalResistivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kohm.m")]
        kohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mil2/ft")]
        nohmmil2ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mm2/m")]
        nohmmm2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.cm")]
        ohmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m2/m")]
        ohmm2m,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureSquaredPerForceTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 kPa2/cP")]
        Item0001kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar2/cP")]
        bar2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa2/cP")]
        kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa2/(Pa.s)")]
        Pa2Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2/cP")]
        psi2cP,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousFluxUom {
        
        /// <remarks/>
        lm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(psi.d)")]
        Item1000ft3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(kPa.d)")]
        bblkPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(psi.d)")]
        bblpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/(bar.min)")]
        Lbarmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.d)")]
        m3bard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.h)")]
        m3barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.min)")]
        m3barmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.d)")]
        m3kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.h)")]
        m3kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(Pa.s)")]
        m3Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(psi.d)")]
        m3psid,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/m3")]
        kmolm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/ft3")]
        lbmolft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[UK]")]
        lbmolgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[US]")]
        lbmolgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m3")]
        molm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbm")]
        BtuITlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/g")]
        calthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/kg")]
        calthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/lbm")]
        calthlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/g")]
        ergg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/kg")]
        ergkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/lbm")]
        hphlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/g")]
        Jg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/kg")]
        Jkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/g")]
        kcalthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/kg")]
        kcalthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kg")]
        kJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/kg")]
        kWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/lbm")]
        lbfftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kg")]
        MJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/kg")]
        MWhkg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermittivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("F/m")]
        Fm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uF/m")]
        uFm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectromagneticMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.m2")]
        Am2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalInsulanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC.m2.h/kcal[th]")]
        deltaCm2hkcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF.ft2.h/Btu[IT]")]
        deltaFft2hBtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK.m2/kW")]
        deltaKm2kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK.m2/W")]
        deltaKm2W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2)")]
        BtuIThft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2)")]
        BtuITsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2)")]
        calthhcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/in2")]
        hpin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]/in2")]
        hphydin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/cm2")]
        kWcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m2")]
        kWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mW/m2")]
        mWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/(s.cm2)")]
        ucalthscm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/cm2")]
        Wcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m2")]
        Wm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/mm2")]
        Wmm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbm/ft2")]
        Item001lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft2")]
        lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m2")]
        Mgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/ft2")]
        tonUSft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("b/cm3")]
        bcm3,
        
        /// <remarks/>
        cu,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/in3")]
        ft2in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/cm3")]
        m2cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m3")]
        m2m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/h")]
        deltaCh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/min")]
        deltaCmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/s")]
        deltaCs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/h")]
        deltaFh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/min")]
        deltaFmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/s")]
        deltaFs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/s")]
        deltaKs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerAmountOfSubstanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[molar]")]
        molar,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/mol")]
        molmol,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum RadianceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.sr)")]
        Wm2sr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatFlowRateUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]/h")]
        Item1E6BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/h")]
        BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/min")]
        BtuITmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/s")]
        BtuITs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/h")]
        calthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EJ/a")]
        EJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/a")]
        erga,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/s")]
        Js,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/h")]
        kcalthh,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/min")]
        lbfftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/s")]
        lbffts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/a")]
        MJa,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quad/a")]
        quada,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TJ/a")]
        TJa,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/s")]
        ucalths,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DoseEquivalentUom {
        
        /// <remarks/>
        mrem,
        
        /// <remarks/>
        mSv,
        
        /// <remarks/>
        rem,
        
        /// <remarks/>
        Sv,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/kg")]
        Askg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/g")]
        Cg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/kg")]
        Ckg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm4")]
        gcm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm4")]
        kgdm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m4")]
        kgm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[UK].ft)")]
        lbmgalUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[US].ft)")]
        lbmgalUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft4")]
        lbmft4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s2/m3")]
        Pas2m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft")]
        lbmft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/m3")]
        Asm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm3")]
        Ccm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m3")]
        Cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm3")]
        Cmm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APIGravityUom {
        
        /// <remarks/>
        dAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReluctanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/H")]
        Item1H,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/deltaF")]
        ftdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/deltaK")]
        mdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(d.ft)")]
        Item1000ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(d.m)")]
        Item1000m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(h.m)")]
        Item1000m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.ft)")]
        bbldft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(d.ft)")]
        ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft)")]
        galUKhft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in)")]
        galUKhin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft)")]
        galUKminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft)")]
        galUShft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in)")]
        galUShin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft)")]
        galUSminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(d.m)")]
        m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(h.m)")]
        m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.ft)")]
        m3sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m)")]
        m3sm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]")]
        Item1E6BtuIT,
        
        /// <remarks/>
        aJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]")]
        BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[th]")]
        Btuth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[UK]")]
        BtuUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[IT]")]
        calIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]")]
        calth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ccal[th]")]
        ccalth,
        
        /// <remarks/>
        ceV,
        
        /// <remarks/>
        cJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dcal[th]")]
        dcalth,
        
        /// <remarks/>
        deV,
        
        /// <remarks/>
        dJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ecal[th]")]
        Ecalth,
        
        /// <remarks/>
        EeV,
        
        /// <remarks/>
        EJ,
        
        /// <remarks/>
        erg,
        
        /// <remarks/>
        eV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fcal[th]")]
        fcalth,
        
        /// <remarks/>
        feV,
        
        /// <remarks/>
        fJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gcal[th]")]
        Gcalth,
        
        /// <remarks/>
        GeV,
        
        /// <remarks/>
        GJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GW.h")]
        GWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h")]
        hph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric].h")]
        hpmetrich,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]")]
        kcalth,
        
        /// <remarks/>
        keV,
        
        /// <remarks/>
        kJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h")]
        kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mcal[th]")]
        mcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mcal[th]")]
        Mcalth,
        
        /// <remarks/>
        meV,
        
        /// <remarks/>
        MeV,
        
        /// <remarks/>
        MJ,
        
        /// <remarks/>
        mJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h")]
        MWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ncal[th]")]
        ncalth,
        
        /// <remarks/>
        neV,
        
        /// <remarks/>
        nJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcal[th]")]
        pcalth,
        
        /// <remarks/>
        peV,
        
        /// <remarks/>
        pJ,
        
        /// <remarks/>
        quad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tcal[th]")]
        Tcalth,
        
        /// <remarks/>
        TeV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[EC]")]
        thermEC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[UK]")]
        thermUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[US]")]
        thermUS,
        
        /// <remarks/>
        TJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TW.h")]
        TWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]")]
        ucalth,
        
        /// <remarks/>
        ueV,
        
        /// <remarks/>
        uJ,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VerticalCoordinateUom {
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ftBr(65)")]
        ftBr65,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/bbl")]
        BtuITbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/ft3")]
        BtuITft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[UK]")]
        BtuITgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[US]")]
        BtuITgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/cm3")]
        calthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mL")]
        calthmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mm3")]
        calthmm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm3")]
        ergcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/m3")]
        ergm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/bbl")]
        hphbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/dm3")]
        Jdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m3")]
        Jm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/cm3")]
        kcalthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/m3")]
        kcalthm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/dm3")]
        kJdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/m3")]
        kJm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/dm3")]
        kWhdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/m3")]
        kWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/bbl")]
        lbfftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/gal[US]")]
        lbfftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m3")]
        MJm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/m3")]
        MWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/bbl")]
        tonfUSmibbl,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticPermeabilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H/m")]
        Hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uH/m")]
        uHm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/g")]
        Item1g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kg")]
        Item1kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbm")]
        Item1lbm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PotentialDifferencePerPowerDropUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/B")]
        VB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/dB")]
        VdB,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/d")]
        m2d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/deltaK")]
        JdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermodynamicTemperaturePerThermodynamicTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/degC")]
        degCdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/degF")]
        degFdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degR/degR")]
        degRdegR,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/K")]
        KK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarEnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbmol")]
        BtuITlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/mol")]
        Jmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/mol")]
        kcalthmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kmol")]
        kJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kmol")]
        MJkmol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricConductanceUom {
        
        /// <remarks/>
        cS,
        
        /// <remarks/>
        dS,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        fS,
        
        /// <remarks/>
        GS,
        
        /// <remarks/>
        kS,
        
        /// <remarks/>
        mS,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        nS,
        
        /// <remarks/>
        pS,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        TS,
        
        /// <remarks/>
        uS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentumUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/s")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft/s")]
        lbmfts,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.ft/(cm3.s)")]
        gftcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.m/(cm3.s)")]
        gmcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m2.s)")]
        kgm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa.s/m")]
        kPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.h)")]
        lbmft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.s)")]
        lbmft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa.s/m")]
        MPasm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3)")]
        BtuIThft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3)")]
        BtuITsft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm3)")]
        calthhcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm3)")]
        calthscm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/ft3")]
        hpft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m3")]
        kWm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uW/m3")]
        uWm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m3")]
        Wm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum FrequencyUom {
        
        /// <remarks/>
        cHz,
        
        /// <remarks/>
        dHz,
        
        /// <remarks/>
        EHz,
        
        /// <remarks/>
        fHz,
        
        /// <remarks/>
        GHz,
        
        /// <remarks/>
        Hz,
        
        /// <remarks/>
        kHz,
        
        /// <remarks/>
        mHz,
        
        /// <remarks/>
        MHz,
        
        /// <remarks/>
        nHz,
        
        /// <remarks/>
        pHz,
        
        /// <remarks/>
        THz,
        
        /// <remarks/>
        uHz,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousIntensityUom {
        
        /// <remarks/>
        cd,
        
        /// <remarks/>
        kcd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AbsorbedDoseUom {
        
        /// <remarks/>
        cGy,
        
        /// <remarks/>
        crd,
        
        /// <remarks/>
        dGy,
        
        /// <remarks/>
        drd,
        
        /// <remarks/>
        EGy,
        
        /// <remarks/>
        Erd,
        
        /// <remarks/>
        fGy,
        
        /// <remarks/>
        frd,
        
        /// <remarks/>
        GGy,
        
        /// <remarks/>
        Grd,
        
        /// <remarks/>
        Gy,
        
        /// <remarks/>
        kGy,
        
        /// <remarks/>
        krd,
        
        /// <remarks/>
        mGy,
        
        /// <remarks/>
        MGy,
        
        /// <remarks/>
        Mrd,
        
        /// <remarks/>
        mrd,
        
        /// <remarks/>
        nGy,
        
        /// <remarks/>
        nrd,
        
        /// <remarks/>
        pGy,
        
        /// <remarks/>
        prd,
        
        /// <remarks/>
        rd,
        
        /// <remarks/>
        TGy,
        
        /// <remarks/>
        Trd,
        
        /// <remarks/>
        uGy,
        
        /// <remarks/>
        urd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/kg")]
        skg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumetricHeatTransferCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3.deltaF)")]
        BtuIThft3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3.deltaF)")]
        BtuITsft3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m3.deltaK)")]
        kWm3deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m3.deltaK)")]
        Wm3deltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum NormalizedPowerUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B.W")]
        BW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.mW")]
        dBmW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.MW")]
        dBMW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.W")]
        dBW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyLengthPerTimeAreaTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT].in/(h.ft2.deltaF)")]
        BtuITinhft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/(s.m2.deltaK)")]
        Jmsm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ.m/(h.m2.deltaK)")]
        kJmhm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.deltaK)")]
        WmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureTimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s/m3")]
        Pasm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.d/bbl")]
        psidbbl,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AnglePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft3")]
        radft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m3")]
        radm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DiffusionCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/s")]
        mss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/s")]
        ss,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressurePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/atm")]
        atmatm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/bar")]
        barbar,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/kPa")]
        kPakPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/MPa")]
        MPaMPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/Pa")]
        PaPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/psi")]
        psipsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerMassPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mrem/h")]
        mremh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mSv/h")]
        mSvh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rem/h")]
        remh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/h")]
        Svh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/s")]
        Svs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 deltaF/ft")]
        Item001deltaFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/ft")]
        deltaCft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/hm")]
        deltaChm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/km")]
        deltaCkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/m")]
        deltaCm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/ft")]
        deltaFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/m")]
        deltaFm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/km")]
        deltaKkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/m")]
        deltaKm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AttenuationPerFrequencyIntervalUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/O")]
        BO,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/O")]
        dBO,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricResistanceUom {
        
        /// <remarks/>
        cohm,
        
        /// <remarks/>
        dohm,
        
        /// <remarks/>
        Eohm,
        
        /// <remarks/>
        fohm,
        
        /// <remarks/>
        Gohm,
        
        /// <remarks/>
        kohm,
        
        /// <remarks/>
        Mohm,
        
        /// <remarks/>
        mohm,
        
        /// <remarks/>
        nohm,
        
        /// <remarks/>
        ohm,
        
        /// <remarks/>
        pohm,
        
        /// <remarks/>
        Tohm,
        
        /// <remarks/>
        uohm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bbl")]
        Item1bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft3")]
        Item1ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[UK]")]
        Item1galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[US]")]
        Item1galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/L")]
        Item1L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m3")]
        Item1m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 d/ft3")]
        Item0001dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/bbl")]
        dbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/ft3")]
        dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/m3")]
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/ft3")]
        hft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/m3")]
        hm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft3")]
        sft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/L")]
        sL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m3")]
        sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[UK]")]
        sqtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[US]")]
        sqtUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyLengthPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/m2")]
        Jmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th].m/cm2")]
        kcalthmcm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricResistancePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm/m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/ft")]
        uohmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/m")]
        uohmm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bar")]
        Item1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kPa")]
        Item1kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/Pa")]
        Item1Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/pPa")]
        Item1pPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/psi")]
        Item1psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/upsi")]
        Item1upsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LightExposureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("footcandle.s")]
        footcandles,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lx.s")]
        lxs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm2")]
        ergcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/cm2")]
        Jcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m2")]
        Jm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/cm2")]
        kgfmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in2")]
        lbfftin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/cm2")]
        mJcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/m2")]
        mJm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticDipoleMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb.m")]
        Wbm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReferencePressureKind {
        
        /// <remarks/>
        absolute,
        
        /// <remarks/>
        ambient,
        
        /// <remarks/>
        legal,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum ElevCodeEnum {
        
        /// <remarks/>
        CF,
        
        /// <remarks/>
        CV,
        
        /// <remarks/>
        DF,
        
        /// <remarks/>
        GL,
        
        /// <remarks/>
        KB,
        
        /// <remarks/>
        RB,
        
        /// <remarks/>
        RT,
        
        /// <remarks/>
        SF,
        
        /// <remarks/>
        LAT,
        
        /// <remarks/>
        SL,
        
        /// <remarks/>
        MHHW,
        
        /// <remarks/>
        MHW,
        
        /// <remarks/>
        MLLW,
        
        /// <remarks/>
        MLW,
        
        /// <remarks/>
        MTL,
        
        /// <remarks/>
        KO,
        
        /// <remarks/>
        unknown,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/witsmlv2")]
    public enum EquipmentType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bridge plug")]
        bridgeplug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bull plug")]
        bullplug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("capillary tubing")]
        capillarytubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing crossover")]
        casingcrossover,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing hanger")]
        casinghanger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing head")]
        casinghead,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing liner-expandable")]
        casinglinerexpandable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing shoe")]
        casingshoe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing spool")]
        casingspool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing/casing liner")]
        casingcasingliner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement (behind casing)")]
        cementbehindcasing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement basket")]
        cementbasket,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement retainer")]
        cementretainer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement squeeze")]
        cementsqueeze,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cement stage tool")]
        cementstagetool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chemical injection mandrel")]
        chemicalinjectionmandrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chemical injection valve")]
        chemicalinjectionvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corrosion coupon carrier")]
        corrosioncouponcarrier,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dip tube")]
        diptube,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("downhole choke")]
        downholechoke,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("downhole sensor")]
        downholesensor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP assembly")]
        ESPassembly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP bolt on discharge")]
        ESPboltondischarge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP bolt on intake")]
        ESPboltonintake,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP bolt on motor base")]
        ESPboltonmotorbase,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP bolt on motor head")]
        ESPboltonmotorhead,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP cable")]
        ESPcable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP gas handler")]
        ESPgashandler,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP gas separator")]
        ESPgasseparator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP lower pigtail")]
        ESPlowerpigtail,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP motor")]
        ESPmotor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP motor base centralizer")]
        ESPmotorbasecentralizer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP motor flat cable")]
        ESPmotorflatcable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP motor shroud")]
        ESPmotorshroud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP promotor")]
        ESPpromotor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP pump")]
        ESPpump,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP pump discharge sensor sub")]
        ESPpumpdischargesensorsub,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ESP seal")]
        ESPseal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("expansion joint")]
        expansionjoint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("external cementing port")]
        externalcementingport,
        
        /// <remarks/>
        fill,
        
        /// <remarks/>
        fish,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("float collar")]
        floatcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("float shoe/guide shoe")]
        floatshoeguideshoe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas anchor")]
        gasanchor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas lift mandrel")]
        gasliftmandrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas lift valve")]
        gasliftvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gravel pack screen")]
        gravelpackscreen,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hydraulic pump")]
        hydraulicpump,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("injection mandrel")]
        injectionmandrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("injection valve")]
        injectionvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("junk in wellbore")]
        junkinwellbore,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("landing collar")]
        landingcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("liner entry guide")]
        linerentryguide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("liner hanger")]
        linerhanger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mule shoe")]
        muleshoe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("notched collar")]
        notchedcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("on-off tool")]
        onofftool,
        
        /// <remarks/>
        overshot,
        
        /// <remarks/>
        packer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("packer plug")]
        packerplug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("packer-multiple strings")]
        packermultiplestrings,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("packoff (tubing)")]
        packofftubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcp-flex shaft intake")]
        pcpflexshaftintake,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcp-gear reducer (subsurface)")]
        pcpgearreducersubsurface,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcp-no turn tool/torque anchor")]
        pcpnoturntooltorqueanchor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcp-rotor")]
        pcprotor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcp-stator")]
        pcpstator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcp-tag bar")]
        pcptagbar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plug - cement")]
        plugcement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plug - mud")]
        plugmud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plunger lift ball")]
        plungerliftball,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plunger lift bottom hole bumper assembly")]
        plungerliftbottomholebumperassembly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plunger lift bumper spring")]
        plungerliftbumperspring,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plunger lift collar stop")]
        plungerliftcollarstop,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plunger lift plunger")]
        plungerliftplunger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("polished rod")]
        polishedrod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("polished rod liner")]
        polishedrodliner,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ported collar")]
        portedcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("profile nipple")]
        profilenipple,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("profile nipple plug")]
        profilenippleplug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pump-out plug")]
        pumpoutplug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sand screen-tubing")]
        sandscreentubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sand separator")]
        sandseparator,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("screen liner/insert")]
        screenlinerinsert,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("seal assembly")]
        sealassembly,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("seal bore extension")]
        sealboreextension,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("seat nipple/shoe")]
        seatnippleshoe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shear tool")]
        sheartool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sliding sleeve")]
        slidingsleeve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("steam cup mandrel")]
        steamcupmandrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("steam deflectors")]
        steamdeflectors,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("strainer nipple")]
        strainernipple,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("subsurface safety valve")]
        subsurfacesafetyvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod")]
        suckerrod,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod backoff coupling")]
        suckerrodbackoffcoupling,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod pump-insert")]
        suckerrodpumpinsert,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod pump-jacket")]
        suckerrodpumpjacket,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod pump-tubing pump barrel")]
        suckerrodpumptubingpumpbarrel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod pump-tubing pump plunger")]
        suckerrodpumptubingpumpplunger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod sub")]
        suckerrodsub,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod-continuous")]
        suckerrodcontinuous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod-ribbon")]
        suckerrodribbon,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sucker rod-sinker bar")]
        suckerrodsinkerbar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tcp gun")]
        tcpgun,
        
        /// <remarks/>
        tubing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing (coiled)")]
        tubingcoiled,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing anchor/catcher")]
        tubinganchorcatcher,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing crossover")]
        tubingcrossover,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing drain")]
        tubingdrain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing hanger")]
        tubinghanger,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing head (spool)")]
        tubingheadspool,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing purge check valve")]
        tubingpurgecheckvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tubing sub")]
        tubingsub,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wellbore notes")]
        wellborenotes,
        
        /// <remarks/>
        whipstock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("wireline re-entry guide (bell collar)")]
        wirelinereentryguidebellcollar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("y-tool")]
        ytool,
    }
}
