<#@ template debug="true" hostSpecific ="true" language="C#" linePragmas="false" #>
<#@ output extension=".cs" encoding="UTF-8" #>
<#=SchemaSetClassCreator.GetLicenseText()#>
<#@ assembly name="System"#>
<#@ assembly name="System.Core"#>
<#@ assembly name="System.Xml"#>
<#@ assembly name="System.Xml.Linq"#>
<#@ assembly name="Energistics.Generator.exe" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq"#>
<#@ import namespace="System.Xml"#>
<#@ import namespace="System.Xml.Schema"#>
<#@ import namespace="System.Xml.Linq"#>
<#@ import namespace="System.Reflection"#>
<#@ import namespace="System.Xml.Serialization"#>
<#@ import namespace="Energistics.Generator"#>
<#
    SchemaSetClassCreator generator = new SchemaSetClassCreator(mlPath, mlVersion, enumClassNames, versionString);
#>
//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.<#=mlVersion#>.ComponentSchemas;
using Energistics.DataAccess.<#=mlVersion#>.ReferenceData;
using Energistics.DataAccess.Reflection;
using Energistics.DataAccess.Validation;

namespace Energistics.DataAccess.<#=mlVersion#>
{
    #region Classes
<#
    foreach (Type type in generator.Classes)
    {
        if(generator.IsComponentSchemaType(type))
        {
#>
    namespace ComponentSchemas 
    {
<#
        }
#>
    /// <summary>
    /// <#=generator.GetDescription(type)#>
    /// </summary>
<#
        foreach (XmlIncludeAttribute include in type.GetCustomAttributes(typeof(XmlIncludeAttribute), false))
        {
#>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(<#=generator.RenameClass(include.Type)#>))]
<#
        }
#>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("<#=Assembly.GetExecutingAssembly().GetName().Name#>", "<#=Assembly.GetExecutingAssembly().GetName().Version#>")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
<#
    if(generator.GetXmlRootName(type) != null)
    {
#>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="<#=generator.GetXmlNamespace(type)#>")]
    [System.Xml.Serialization.XmlRootAttribute("<#=generator.GetXmlRootName(type)#>", Namespace="<#=generator.GetXmlNamespace(type)#>", IsNullable=false)]
<#
    }
    else
    {
#>
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="<#=type.Name#>", Namespace="<#=generator.GetXmlNamespace(type)#>")]
<#
    }
#>
	<#=generator.GetEnergisticsDataObjectAttribute(type)#>[Description("<#=generator.GetDescription(type).Replace("\"", "")#>")]
    public<#=type.IsAbstract ? " abstract" : string.Empty#> partial class <#=generator.RenameClass(type, true)#> <#=type.BaseType.Equals(typeof(object)) ?  ": Object" : string.Format(": {0}", generator.RenameClass(type.BaseType))#><#=generator.IsEnergisticsCollection(type) ? ", IEnergisticsCollection" : generator.GetDataObjectInterface(type)#>, INotifyPropertyChanged
    {
<#=generator.GetConstructor(type)#>
<#        
        foreach (var property in type.GetProperties())
        {
            if(property.DeclaringType.Equals(type))
            {
                if(property.GetCustomAttributes(typeof(XmlIgnoreAttribute), false).Length > 0)
                {
#>
        <#=generator.GetDescription(type, property.Name)#>
        [XmlIgnore]
        [Browsable(false)]
<#
                }
                else
                if(property.GetCustomAttributes(typeof(XmlTextAttribute), false).Length > 0)
                {
#>
        <#=generator.GetDescription(type, property.Name)#>
        <#=generator.GetValidationAttributes(type, property)#>
        [XmlText]
<#
                }
				else if (property.GetCustomAttributes(typeof(XmlElementAttribute), false).Length > 1)
				{
#>
<#=generator.ExpandChoiceAttributes(type, property)#>
<#				    
					continue;
				}
                else
                {				    
				    
                    object[] elementAttribute = property.GetCustomAttributes(typeof(XmlElementAttribute), false);
                    if(elementAttribute.Length > 0)
                    {
					   XmlElementAttribute xmlElemAttr = (elementAttribute[0] as XmlElementAttribute);
#>
        <#=generator.GetDescription(type, property.Name)#>
		<#=generator.GetValidationAttributes(type, property)#>
		<#=generator.GetXmlElementAttrTag(xmlElemAttr, property)#>
<#
                    }
                    else
                    {
                        object[] attributetAttributes = property.GetCustomAttributes(typeof(XmlAttributeAttribute), false);
                        if(attributetAttributes.Length > 0)
                        {
                            XmlAttributeAttribute attribute = attributetAttributes[0] as XmlAttributeAttribute;
#>
		<#=generator.GetDescription(type, property.Name)#>
		<#=generator.GetValidationAttributes(type, property)#>
        [XmlAttribute("<#=string.IsNullOrEmpty(attribute.AttributeName) ? property.Name : attribute.AttributeName#>"<#=attribute.Form.HasFlag(XmlSchemaForm.Qualified) ? ", Form = System.Xml.Schema.XmlSchemaForm.Qualified" : String.Empty#><#=string.IsNullOrEmpty(attribute.Namespace) ? String.Empty : String.Format(", Namespace = \"{0}\"", attribute.Namespace)#>)]
		<#=generator.GetSurrogate(type, property)#>
<#                      
                        }
                        else
                        {
#>
        <#=generator.GetDescription(type, property.Name)#>
		<#=generator.GetValidationAttributes(type, property)#>
		<#=generator.GetXmlElementOrXmlArray(type, property)#>
<#						}
                    }
                }

		        
#>
        public <#=generator.GetPropertyType(property)#><#=generator.MakePropertyNullable(property)#> <#=generator.RenameProperty(property)#> <#=generator.GetGetterSetter(null, type, property)#>
<#
                if (generator.IsItemsList(type, property)) {
#>
        <#=generator.GetDescription(type, property.Name)#>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return <#=generator.RenameProperty(property)#>;
			}
        }
<#
				}
            }
        }

        if (type.GetProperty("commonData") != null && type.GetProperty("customData") != null) {
#>
        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion
<#
        }
#>

<#
      if (type.BaseType == typeof(Object)) { 
#>        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
<#
  } 
#>
    } //here
<#
        if (generator.IsComponentSchemaType(type))
        {
#>
    }
<#
        }
#>

<#
    }
#>
    #endregion

    #region Enumerations
    namespace ReferenceData {
<#
    foreach (Type type in generator.Enums)
    {
	    if (!enumClassNames.Contains(type.Name)) 
		{
#>
        /// <summary>
        /// <#=generator.GetDescription(type)#>
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.0.30319.1")]
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="<#=generator.GetXmlNamespace(type)#>")]
        [Description("<#=generator.GetDescription(type).Replace("\"", "")#>")]
        public enum <#=generator.RenameClass(type, true)#> 
        {
<#
        FieldInfo[] fields = type.GetFields(BindingFlags.Static | BindingFlags.GetField | BindingFlags.Public);

        for(int i = 0; i < fields.Length; i++)
        {
            FieldInfo field = fields[i];
            object[] enumAttributes = field.GetCustomAttributes(typeof(XmlEnumAttribute), false);
#>        <#=generator.GetDescription(type, field.Name)#>
<#
            if(enumAttributes.Length > 0)
            {
                XmlEnumAttribute attribute = enumAttributes[0] as XmlEnumAttribute;
#>          [XmlEnum("<#=string.IsNullOrEmpty(field.Name) ? field.Name : attribute.Name#>")]
<#
            }
#>          <#=generator.GetEnumName(field.Name)#><#=i == fields.Length - 1 ? string.Empty : ","#>
<#
        }
#>
        }
<#
        } // end if
    } // end for
#>
    }
    #endregion
}