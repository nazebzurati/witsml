//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by xsd, Version=2.0.50727.3038.
// 
namespace Energistics.Generator.RESQML201 {
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCitedDataObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractResqmlDataObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_MdDatum))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ActivityTemplate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Activity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractValuesProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscretePropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PointsProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PropertySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractPropertyLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StringTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DoubleTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TriangulatedSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PolylineRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PolylineSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PointSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreTrajectoryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BlockedWellboreRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DeviationSurveyRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SubRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RedefinedGeometryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RepresentationSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_NonSealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GridConnectionSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RepresentationIdentitySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalGridSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_EarthModelInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyBoundaryInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GenericFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GlobalChronostratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTechnicalFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FrontierFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeologicFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractLocal3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalDepth3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalTime3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_EpcExternalPartReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDataObject", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    public abstract partial class AbstractObject {
        
        private Citation citationField;
        
        private ObjectAlias[] aliasesField;
        
        private CustomData customDataField;
        
        private string schemaVersionField;
        
        private string uuidField;
        
        private string objectVersionField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Citation", DataType="Citation")]
        public Citation Citation {
            get {
                return this.citationField;
            }
            set {
                this.citationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Aliases")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Aliases", DataType="ObjectAlias")]
        public ObjectAlias[] Aliases {
            get {
                return this.aliasesField;
            }
            set {
                this.aliasesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CustomData", DataType="CustomData")]
        public CustomData CustomData {
            get {
                return this.customDataField;
            }
            set {
                this.customDataField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The specific version of a schema from which this object is derived. This string should be exactly equivalent to the version attribute of the root element of the associated XSD schema file. In the UML model is the same as the version tagged value of the <<XSDschema>> package.</summary>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The specific version of a schema from which this object is derived. This string should be exactly equivalent to the version attribute of the root element of the associated XSD schema file. In the UML model is the same as the version tagged value of the <<XSDschema>> package.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("schemaVersion", DataType="string")]
        public string schemaVersion {
            get {
                return this.schemaVersionField;
            }
            set {
                this.schemaVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="UuidString")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("objectVersion", DataType="NameString")]
        public string objectVersion {
            get {
                return this.objectVersionField;
            }
            set {
                this.objectVersionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class Citation {
        
        private string titleField;
        
        private string originatorField;
        
        private System.DateTime creationField;
        
        private string formatField;
        
        private string editorField;
        
        private System.DateTime lastUpdateField;
        
        private bool lastUpdateFieldSpecified;
        
        private string versionStringField;
        
        private string descriptionField;
        
        private string descriptiveKeywordsField;
        
        /// <remarks/>
        /// <summary>One line description/name of the RESQML object.  This is the equivalent in ISO 19115 of CI_Citation.title  Legacy DCGroup - title</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(256)]
        [System.ComponentModel.DescriptionAttribute("One line description/name of the RESQML object.  This is the equivalent in ISO 19" +
            "115 of CI_Citation.title  Legacy DCGroup - title")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="DescriptionString")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name (or other human-readable identifier) of the person who initially originated the object or RESQML document in the source application. If that information is not available, the user who created the RESQML format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "originator".  Legacy DCGroup - author</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Name (or other human-readable identifier) of the person who initially originated the object or RESQML document in the source application. If that information is not available, the user who created the RESQML format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is ""originator"".  Legacy DCGroup - author")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Originator", DataType="NameString")]
        public string Originator {
            get {
                return this.originatorField;
            }
            set {
                this.originatorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the document was created in the source application or, if that information is not available, when it was saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation"  The type is the Energistics timestamp datatype which is the W3C xs:dateTime with the optional timezone offset from UTC made mandatory.  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Date and time the document was created in the source application or, if that information is not available, when it was saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation""  The type is the Energistics timestamp datatype which is the W3C xs:dateTime with the optional timezone offset from UTC made mandatory.  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Creation", DataType="dateTime")]
        public System.DateTime Creation {
            get {
                return this.creationField;
            }
            set {
                this.creationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes  1. RESQML  - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(256)]
        [System.ComponentModel.DescriptionAttribute(@"Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes  1. RESQML  - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Format", DataType="DescriptionString")]
        public string Format {
            get {
                return this.formatField;
            }
            set {
                this.formatField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is "editor".  Legacy DCGroup - contributor</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute(@"Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is ""editor"".  Legacy DCGroup - contributor")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Editor", DataType="NameString")]
        public string Editor {
            get {
                return this.editorField;
            }
            set {
                this.editorField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate"  The type is the Energistics timestamp datatype which is the W3C xs:dateTime with the optional timezone offset from UTC made mandatory.  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified</summary>
        [System.ComponentModel.DescriptionAttribute(@"Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate""  The type is the Energistics timestamp datatype which is the W3C xs:dateTime with the optional timezone offset from UTC made mandatory.  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LastUpdate", DataType="dateTime")]
        public System.DateTime LastUpdate {
            get {
                return this.lastUpdateField;
            }
            set {
                this.lastUpdateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastUpdateSpecified {
            get {
                return this.lastUpdateFieldSpecified;
            }
            set {
                this.lastUpdateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VersionString", DataType="string")]
        public string VersionString {
            get {
                return this.versionStringField;
            }
            set {
                this.versionStringField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.  This is the equivalent of the ISO 19115 abstract.CharacterString  Legacy DCGroup - description</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4000)]
        [System.ComponentModel.DescriptionAttribute("User descriptive comments about the object. Intended for end-user use (human read" +
            "able); not necessarily meant to be used by software.  This is the equivalent of " +
            "the ISO 19115 abstract.CharacterString  Legacy DCGroup - description")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="CommentString")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4000)]
        [System.ComponentModel.DescriptionAttribute(@"Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DescriptiveKeywords", DataType="CommentString")]
        public string DescriptiveKeywords {
            get {
                return this.descriptiveKeywordsField;
            }
            set {
                this.descriptiveKeywordsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ParameterTemplate {
        
        private string[] keyConstraintField;
        
        private bool isInputField;
        
        private ParameterKind[] allowedKindField;
        
        private bool isOutputField;
        
        private string titleField;
        
        private string dataObjectContentTypeField;
        
        private long maxOccursField;
        
        private long minOccursField;
        
        private string constraintField;
        
        private AbstractActivityParameter[] defaultValueField;
        
        /// <remarks/>
        /// <summary>Allows you to indicate that, in the same activity, this parameter template must be associated to another parameter template identified by its title.</summary>
        [System.Xml.Serialization.XmlElementAttribute("KeyConstraint")]
        [System.ComponentModel.DescriptionAttribute("Allows you to indicate that, in the same activity, this parameter template must b" +
            "e associated to another parameter template identified by its title.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KeyConstraint", DataType="string")]
        public string[] KeyConstraint {
            get {
                return this.keyConstraintField;
            }
            set {
                this.keyConstraintField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates if the parameter is an input of the activity. If the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Indicates if the parameter is an input of the activity. If the parameter is a data object and is also an output of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsInput", DataType="boolean")]
        public bool IsInput {
            get {
                return this.isInputField;
            }
            set {
                this.isInputField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If no allowed type is given, then all kind of datatypes is allowed.</summary>
        [System.Xml.Serialization.XmlElementAttribute("AllowedKind")]
        [System.ComponentModel.DescriptionAttribute("If no allowed type is given, then all kind of datatypes is allowed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AllowedKind", DataType="ParameterKind")]
        public ParameterKind[] AllowedKind {
            get {
                return this.allowedKindField;
            }
            set {
                this.allowedKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates if the parameter is an output of the activity. If the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Indicates if the parameter is an output of the activity. If the parameter is a data object and is also an input of the activity, it is strongly advised to use two parameters : one for input and one for output. The reason is to be able to give two different versions strings for the input and output dataobject which has got obviously the same UUID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsOutput", DataType="boolean")]
        public bool IsOutput {
            get {
                return this.isOutputField;
            }
            set {
                this.isOutputField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Name of the parameter in the activity. Key to identify parameter.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Name of the parameter in the activity. Key to identify parameter.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="string")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When parameter is limited to data object of given types, describe the allowed types. Used only when ParameterType is dataObject</summary>
        [System.ComponentModel.DescriptionAttribute("When parameter is limited to data object of given types, describe the allowed typ" +
            "es. Used only when ParameterType is dataObject")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObjectContentType", DataType="string")]
        public string DataObjectContentType {
            get {
                return this.dataObjectContentTypeField;
            }
            set {
                this.dataObjectContentTypeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Maximum number of parameters of this type allowed in the activity. -1 means "infinite".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Maximum number of parameters of this type allowed in the activity. -1 means \"infi" +
            "nite\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxOccurs", DataType="long")]
        public long MaxOccurs {
            get {
                return this.maxOccursField;
            }
            set {
                this.maxOccursField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Minimum number of parameters of this type required by the activity. -1 means "infinite".</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Minimum number of parameters of this type required by the activity. -1 means \"inf" +
            "inite\".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinOccurs", DataType="long")]
        public long MinOccurs {
            get {
                return this.minOccursField;
            }
            set {
                this.minOccursField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Textual description of additional constraint associated with the parameter. (note that it will be better to have a formal description of the constraint)</summary>
        [System.ComponentModel.DescriptionAttribute("Textual description of additional constraint associated with the parameter. (note" +
            " that it will be better to have a formal description of the constraint)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Constraint", DataType="string")]
        public string Constraint {
            get {
                return this.constraintField;
            }
            set {
                this.constraintField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("DefaultValue")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DefaultValue", DataType="AbstractActivityParameter")]
        public AbstractActivityParameter[] DefaultValue {
            get {
                return this.defaultValueField;
            }
            set {
                this.defaultValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ParameterKind {
        
        /// <remarks/>
        dataObject,
        
        /// <remarks/>
        floatingPoint,
        
        /// <remarks/>
        integer,
        
        /// <remarks/>
        @string,
        
        /// <remarks/>
        timestamp,
        
        /// <remarks/>
        subActivity,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FloatingPointQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerQuantityParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringParameter))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DataObjectParameter))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractActivityParameter {
        
        private string titleField;
        
        private long indexField;
        
        private bool indexFieldSpecified;
        
        private string selectionField;
        
        private AbstractParameterKey[] keyField;
        
        /// <remarks/>
        /// <summary>Name of the parameter, used to identify it in the activity. Must have an equivalent in the activity descriptor parameters.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Name of the parameter, used to identify it in the activity. Must have an equivale" +
            "nt in the activity descriptor parameters.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="string")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When parameter is an array, used to indicate the index in the array</summary>
        [System.ComponentModel.DescriptionAttribute("When parameter is an array, used to indicate the index in the array")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="long")]
        public long Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IndexSpecified {
            get {
                return this.indexFieldSpecified;
            }
            set {
                this.indexFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Textual description about how this parameter was selected.</summary>
        [System.ComponentModel.DescriptionAttribute("Textual description about how this parameter was selected.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Selection", DataType="string")]
        public string Selection {
            get {
                return this.selectionField;
            }
            set {
                this.selectionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Key")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Key", DataType="AbstractParameterKey")]
        public AbstractParameterKey[] Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeIndexParameterKey))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ObjectParameterKey))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractParameterKey {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TimeIndexParameterKey : AbstractParameterKey {
        
        private TimeIndex timeIndexField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TimeIndex {
        
        private string indexField;
        
        private DataObjectReference timeSeriesField;
        
        /// <remarks/>
        /// <summary>The index of the time in the time series.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index of the time in the time series.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSeries", DataType="DataObjectReference")]
        public DataObjectReference TimeSeries {
            get {
                return this.timeSeriesField;
            }
            set {
                this.timeSeriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactElementReference))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class DataObjectReference {
        
        private string contentTypeField;
        
        private string titleField;
        
        private string uUIDField;
        
        private string uuidAuthorityField;
        
        private string versionStringField;
        
        /// <remarks/>
        /// <summary>The content type of the referenced element.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The content type of the referenced element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContentType", DataType="string")]
        public string ContentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(256)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Title", DataType="DescriptionString")]
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to an object using its global UID.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [System.ComponentModel.DescriptionAttribute("Reference to an object using its global UID.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UUID", DataType="UuidString")]
        public string UUID {
            get {
                return this.uUIDField;
            }
            set {
                this.uUIDField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The authority that issued and maintains the uuid of the referenced object. Used mainly in alias context.</summary>
        [System.ComponentModel.DescriptionAttribute("The authority that issued and maintains the uuid of the referenced object. Used m" +
            "ainly in alias context.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UuidAuthority", DataType="string")]
        public string UuidAuthority {
            get {
                return this.uuidAuthorityField;
            }
            set {
                this.uuidAuthorityField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates the version of the object which is referenced.</summary>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Indicates the version of the object which is referenced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VersionString", DataType="NameString")]
        public string VersionString {
            get {
                return this.versionStringField;
            }
            set {
                this.versionStringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ContactElementReference : DataObjectReference {
        
        private ContactSide qualifierField;
        
        private bool qualifierFieldSpecified;
        
        private ContactMode secondaryQualifierField;
        
        private bool secondaryQualifierFieldSpecified;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Qualifier", DataType="ContactSide")]
        public ContactSide Qualifier {
            get {
                return this.qualifierField;
            }
            set {
                this.qualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool QualifierSpecified {
            get {
                return this.qualifierFieldSpecified;
            }
            set {
                this.qualifierFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SecondaryQualifier", DataType="ContactMode")]
        public ContactMode SecondaryQualifier {
            get {
                return this.secondaryQualifierField;
            }
            set {
                this.secondaryQualifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SecondaryQualifierSpecified {
            get {
                return this.secondaryQualifierFieldSpecified;
            }
            set {
                this.secondaryQualifierFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ContactSide {
        
        /// <remarks/>
        footwall,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hanging wall")]
        hangingwall,
        
        /// <remarks/>
        north,
        
        /// <remarks/>
        south,
        
        /// <remarks/>
        east,
        
        /// <remarks/>
        west,
        
        /// <remarks/>
        younger,
        
        /// <remarks/>
        older,
        
        /// <remarks/>
        both,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ContactMode {
        
        /// <remarks/>
        baselap,
        
        /// <remarks/>
        erosion,
        
        /// <remarks/>
        extended,
        
        /// <remarks/>
        proportional,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ObjectParameterKey : AbstractParameterKey {
        
        private DataObjectReference dataObjectField;
        
        /// <remarks/>
        /// <summary>Is actually a reference and not a containment relationship.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Is actually a reference and not a containment relationship.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObject", DataType="DataObjectReference")]
        public DataObjectReference DataObject {
            get {
                return this.dataObjectField;
            }
            set {
                this.dataObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TimeIndexParameter : AbstractActivityParameter {
        
        private TimeIndex timeIndexField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class FloatingPointQuantityParameter : AbstractActivityParameter {
        
        private double valueField;
        
        private ResqmlUom uomField;
        
        /// <remarks/>
        /// <summary>Double value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Double value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="double")]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measure associated with the value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure associated with the value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Uom", DataType="ResqmlUom")]
        public ResqmlUom Uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ResqmlUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[area]")]
        area,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[mass]")]
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[molar]")]
        molar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[vol]")]
        vol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(bbl/d)/(bbl/d)")]
        bbldbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/d)/(m3/d)")]
        m3dm3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/s)/(m3/s)")]
        m3sm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/ft3")]
        Item0001bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/m3")]
        Item0001bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 d/ft3")]
        Item0001dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/bbl")]
        Item0001galUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/gal[UK]")]
        Item0001galUKgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/bbl")]
        Item0001galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/ft3")]
        Item0001galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/gal[US]")]
        Item0001galUSgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 h/ft")]
        Item0001hft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 kPa2/cP")]
        Item0001kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/bbl")]
        Item0001lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[UK]")]
        Item0001lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[US]")]
        Item0001lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 psi/ft")]
        Item0001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 pt[UK]/bbl")]
        Item0001ptUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 seca")]
        Item0001seca,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 bbl/bbl")]
        Item001bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dega/ft")]
        Item001degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 degF/ft")]
        Item001degFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dm3/km")]
        Item001dm3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 ft/ft")]
        Item001ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 grain/ft3")]
        Item001grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/kg")]
        Item001Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/km")]
        Item001Lkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft")]
        Item001lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft2")]
        Item001lbfft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbm/ft2")]
        Item001lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 psi/ft")]
        Item001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft")]
        Item01ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft[US]")]
        Item01ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 gal[US]/bbl")]
        Item01galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 in")]
        Item01in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 L/bbl")]
        Item01Lbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 lbm/bbl")]
        Item01lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 pt[US]/bbl")]
        Item01ptUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 yd")]
        Item01yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/(kg.s)")]
        Item1kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/16 in")]
        Item116in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ft")]
        Item12ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ms")]
        Item12ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 cm3/min")]
        Item130cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/ft")]
        Item130degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/m")]
        Item130degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 lbf/m")]
        Item130lbfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 m/m")]
        Item130mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 N/m")]
        Item130Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/32 in")]
        Item132in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/64 in")]
        Item164in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/a")]
        Item1a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/angstrom")]
        Item1angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bar")]
        Item1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bbl")]
        Item1bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/cm")]
        Item1cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/d")]
        Item1d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degC")]
        Item1degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degF")]
        Item1degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/degR")]
        Item1degR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft")]
        Item1ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft2")]
        Item1ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft3")]
        Item1ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/g")]
        Item1g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[UK]")]
        Item1galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[US]")]
        Item1galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/H")]
        Item1H,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/h")]
        Item1h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/in")]
        Item1in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/K")]
        Item1K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kg")]
        Item1kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/km2")]
        Item1km2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kPa")]
        Item1kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/L")]
        Item1L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbf")]
        Item1lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbm")]
        Item1lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m2")]
        Item1m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m3")]
        Item1m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi")]
        Item1mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi2")]
        Item1mi2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/min")]
        Item1min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mm")]
        Item1mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ms")]
        Item1ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/N")]
        Item1N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/nm")]
        Item1nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/Pa")]
        Item1Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/pPa")]
        Item1pPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/psi")]
        Item1psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/s")]
        Item1s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/upsi")]
        Item1upsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/us")]
        Item1us,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/uV")]
        Item1uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/V")]
        Item1V,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/wk")]
        Item1wk,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/yd")]
        Item1yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 ft")]
        Item10ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 in")]
        Item10in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 km")]
        Item10km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 kN")]
        Item10kN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 Mg/m3")]
        Item10Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ft")]
        Item100ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ka[t]")]
        Item100kat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 km")]
        Item100km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl")]
        Item1000bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl.ft/d")]
        Item1000bblftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl/d")]
        Item1000bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft")]
        Item1000ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/h")]
        Item1000fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/s")]
        Item1000fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3")]
        Item1000ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(d.ft)")]
        Item1000ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(psi.d)")]
        Item1000ft3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/bbl")]
        Item1000ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/d")]
        Item1000ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[UK]")]
        Item1000galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[US]")]
        Item1000galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 lbf.ft")]
        Item1000lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3")]
        Item1000m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(d.m)")]
        Item1000m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(h.m)")]
        Item1000m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/d")]
        Item1000m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/h")]
        Item1000m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/m3")]
        Item1000m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m4/d")]
        Item1000m4d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 acre.ft/bbl")]
        Item1E6acreftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/ft3")]
        Item1E6bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/m3")]
        Item1E6bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 gal[US]")]
        Item1E6galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.degC)")]
        Item1E6m3m3degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.degF)")]
        Item1E6m3m3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-9 1/ft")]
        Item1E91ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E12 ft3")]
        Item1E12ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 (ft3/d)/(bbl/d)")]
        Item1E6ft3dbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl")]
        Item1E6bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/(acre.ft)")]
        Item1E6bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/acre")]
        Item1E6bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/d")]
        Item1E6bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]")]
        Item1E6BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]/h")]
        Item1E6BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3")]
        Item1E6ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/(acre.ft)")]
        Item1E6ft3acreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/bbl")]
        Item1E6ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/d")]
        Item1E6ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 lbm/a")]
        Item1E6lbma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3")]
        Item1E6m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3/d")]
        Item1E6m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 bbl")]
        Item1E9bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 ft3")]
        Item1E9ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 ft")]
        Item30ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 m")]
        Item30m,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.h")]
        Ah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.m2")]
        Am2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s")]
        As,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/kg")]
        Askg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/m3")]
        Asm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/cm2")]
        Acm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/ft2")]
        Aft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m")]
        Am,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m2")]
        Am21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm")]
        Amm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm2")]
        Amm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("a[t]")]
        at,
        
        /// <remarks/>
        acre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acre.ft")]
        acreft,
        
        /// <remarks/>
        ag,
        
        /// <remarks/>
        aJ,
        
        /// <remarks/>
        angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("at")]
        at1,
        
        /// <remarks/>
        atm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/ft")]
        atmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/h")]
        atmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/hm")]
        atmhm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/m")]
        atmm,
        
        /// <remarks/>
        b,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B.W")]
        BW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("b/cm3")]
        bcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/m")]
        Bm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/O")]
        BO,
        
        /// <remarks/>
        bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/h")]
        barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/km")]
        barkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/m")]
        barm,
        
        /// <remarks/>
        bar2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar2/cP")]
        bar2cP,
        
        /// <remarks/>
        bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(acre.ft)")]
        bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.acre.ft)")]
        bbldacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.ft)")]
        bbldft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(ft.psi.d)")]
        bblftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(kPa.d)")]
        bblkPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(psi.d)")]
        bblpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/acre")]
        bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/bbl")]
        bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d")]
        bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d2")]
        bbld2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft")]
        bblft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft3")]
        bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h")]
        bblh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h2")]
        bblh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/in")]
        bblin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/m3")]
        bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/mi")]
        bblmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/min")]
        bblmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/psi")]
        bblpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[UK]")]
        bbltonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[US]")]
        bbltonUS,
        
        /// <remarks/>
        Bd,
        
        /// <remarks/>
        bit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit/s")]
        bits,
        
        /// <remarks/>
        Bq,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bq/kg")]
        Bqkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]")]
        BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT].in/(h.ft2.degF)")]
        BtuITinhft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft.degF)")]
        BtuIThftdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2)")]
        BtuIThft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.degF)")]
        BtuIThft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.degR)")]
        BtuIThft2degR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3)")]
        BtuIThft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3.degF)")]
        BtuIThft3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.m2.degC)")]
        BtuIThm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(hp.h)")]
        BtuIThph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.degF)")]
        BtuITlbmdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.degR)")]
        BtuITlbmdegR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbmol.degF)")]
        BtuITlbmoldegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2)")]
        BtuITsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2.degF)")]
        BtuITsft2degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3)")]
        BtuITsft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3.degF)")]
        BtuITsft3degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/bbl")]
        BtuITbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/ft3")]
        BtuITft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[UK]")]
        BtuITgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[US]")]
        BtuITgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/h")]
        BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbm")]
        BtuITlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbmol")]
        BtuITlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/min")]
        BtuITmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/s")]
        BtuITs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[th]")]
        Btuth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[UK]")]
        BtuUK,
        
        /// <remarks/>
        @byte,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("byte/s")]
        bytes,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.m")]
        Cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm2")]
        Ccm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm3")]
        Ccm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/g")]
        Cg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/kg")]
        Ckg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m2")]
        Cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m3")]
        Cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm2")]
        Cmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm3")]
        Cmm3,
        
        /// <remarks/>
        ca,
        
        /// <remarks/>
        cA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[IT]")]
        calIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]")]
        calth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(g.K)")]
        calthgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm.degC)")]
        calthhcmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2)")]
        calthhcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2.degC)")]
        calthhcm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm3)")]
        calthhcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(mol.degC)")]
        calthmoldegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm.degC)")]
        calthscmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm2.degC)")]
        calthscm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm3)")]
        calthscm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/cm3")]
        calthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/g")]
        calthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/h")]
        calthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/kg")]
        calthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/lbm")]
        calthlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mL")]
        calthmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mm3")]
        calthmm3,
        
        /// <remarks/>
        cC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ccal[th]")]
        ccalth,
        
        /// <remarks/>
        ccgr,
        
        /// <remarks/>
        cd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cd/m2")]
        cdm2,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        ceV,
        
        /// <remarks/>
        cF,
        
        /// <remarks/>
        cg,
        
        /// <remarks/>
        cgauss,
        
        /// <remarks/>
        cgr,
        
        /// <remarks/>
        cGy,
        
        /// <remarks/>
        cH,
        
        /// <remarks/>
        chain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnA]")]
        chainBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnB]")]
        chainBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Cla]")]
        chainCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Ind37]")]
        chainInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Se]")]
        chainSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[SeT]")]
        chainSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[US]")]
        chainUS,
        
        /// <remarks/>
        cHz,
        
        /// <remarks/>
        Ci,
        
        /// <remarks/>
        cJ,
        
        /// <remarks/>
        cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/a")]
        cma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s")]
        cms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s2")]
        cms2,
        
        /// <remarks/>
        cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/g")]
        cm2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/cm3")]
        cm3cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/g")]
        cm3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/h")]
        cm3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/L")]
        cm3L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/m3")]
        cm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/min")]
        cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/s")]
        cm3s,
        
        /// <remarks/>
        cm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cmH2O[4degC]")]
        cmH2O4degC,
        
        /// <remarks/>
        cN,
        
        /// <remarks/>
        cohm,
        
        /// <remarks/>
        cP,
        
        /// <remarks/>
        cPa,
        
        /// <remarks/>
        crd,
        
        /// <remarks/>
        cS,
        
        /// <remarks/>
        cs,
        
        /// <remarks/>
        cSt,
        
        /// <remarks/>
        ct,
        
        /// <remarks/>
        cT,
        
        /// <remarks/>
        cu,
        
        /// <remarks/>
        cV,
        
        /// <remarks/>
        cW,
        
        /// <remarks/>
        cWb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[UK]")]
        cwtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[US]")]
        cwtUS,
        
        /// <remarks/>
        d,
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.ft")]
        Dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.m")]
        Dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/(Pa.s)")]
        DPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/bbl")]
        dbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/cP")]
        DcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/ft3")]
        dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/m3")]
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D[API]")]
        DAPI,
        
        /// <remarks/>
        dA,
        
        /// <remarks/>
        dam,
        
        /// <remarks/>
        daN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daN.m")]
        daNm,
        
        /// <remarks/>
        dAPI,
        
        /// <remarks/>
        dB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.MW")]
        dBMW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.mW")]
        dBmW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.W")]
        dBW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/ft")]
        dBft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/km")]
        dBkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/m")]
        dBm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/O")]
        dBO,
        
        /// <remarks/>
        dC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dcal[th]")]
        dcalth,
        
        /// <remarks/>
        dega,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/ft")]
        degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/h")]
        degah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/m")]
        degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/min")]
        degamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/s")]
        degas,
        
        /// <remarks/>
        degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC.m2.h/kcal[th]")]
        degCm2hkcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/ft")]
        degCft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/h")]
        degCh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/hm")]
        degChm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/km")]
        degCkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/kPa")]
        degCkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/m")]
        degCm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/min")]
        degCmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degC/s")]
        degCs,
        
        /// <remarks/>
        degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF.ft2.h/Btu[IT]")]
        degFft2hBtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/ft")]
        degFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/h")]
        degFh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/m")]
        degFm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/min")]
        degFmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/psi")]
        degFpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("degF/s")]
        degFs,
        
        /// <remarks/>
        degR,
        
        /// <remarks/>
        dEuc,
        
        /// <remarks/>
        deV,
        
        /// <remarks/>
        dF,
        
        /// <remarks/>
        dgauss,
        
        /// <remarks/>
        dGy,
        
        /// <remarks/>
        dH,
        
        /// <remarks/>
        dHz,
        
        /// <remarks/>
        dJ,
        
        /// <remarks/>
        dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm/s")]
        dms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3")]
        dm31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/(kW.h)")]
        dm3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kg")]
        dm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kmol")]
        dm3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m")]
        dm3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m3")]
        dm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/MJ")]
        dm3MJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s")]
        dm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s2")]
        dm3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/t")]
        dm3t,
        
        /// <remarks/>
        dN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dN.m")]
        dNm,
        
        /// <remarks/>
        dohm,
        
        /// <remarks/>
        dP,
        
        /// <remarks/>
        dPa,
        
        /// <remarks/>
        drd,
        
        /// <remarks/>
        ds,
        
        /// <remarks/>
        dS,
        
        /// <remarks/>
        dT,
        
        /// <remarks/>
        dV,
        
        /// <remarks/>
        dW,
        
        /// <remarks/>
        dWb,
        
        /// <remarks/>
        dyne,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.cm2")]
        dynecm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.s/cm2")]
        dynescm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm")]
        dynecm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm2")]
        dynecm21,
        
        /// <remarks/>
        EA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ea[t]")]
        Eat,
        
        /// <remarks/>
        EC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ecal[th]")]
        Ecalth,
        
        /// <remarks/>
        EEuc,
        
        /// <remarks/>
        EeV,
        
        /// <remarks/>
        EF,
        
        /// <remarks/>
        Eg,
        
        /// <remarks/>
        Egauss,
        
        /// <remarks/>
        EGy,
        
        /// <remarks/>
        EH,
        
        /// <remarks/>
        EHz,
        
        /// <remarks/>
        EJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EJ/a")]
        EJa,
        
        /// <remarks/>
        Em,
        
        /// <remarks/>
        EN,
        
        /// <remarks/>
        Eohm,
        
        /// <remarks/>
        EP,
        
        /// <remarks/>
        EPa,
        
        /// <remarks/>
        Erd,
        
        /// <remarks/>
        erg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/a")]
        erga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm2")]
        ergcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm3")]
        ergcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/g")]
        ergg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/kg")]
        ergkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/m3")]
        ergm3,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        ET,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        eV,
        
        /// <remarks/>
        EW,
        
        /// <remarks/>
        EWb,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("F/m")]
        Fm,
        
        /// <remarks/>
        fa,
        
        /// <remarks/>
        fA,
        
        /// <remarks/>
        fathom,
        
        /// <remarks/>
        fC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fcal[th]")]
        fcalth,
        
        /// <remarks/>
        fEuc,
        
        /// <remarks/>
        feV,
        
        /// <remarks/>
        fF,
        
        /// <remarks/>
        fg,
        
        /// <remarks/>
        fgauss,
        
        /// <remarks/>
        fGy,
        
        /// <remarks/>
        fH,
        
        /// <remarks/>
        fHz,
        
        /// <remarks/>
        fJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[UK]")]
        flozUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[US]")]
        flozUS,
        
        /// <remarks/>
        fm,
        
        /// <remarks/>
        fN,
        
        /// <remarks/>
        fohm,
        
        /// <remarks/>
        footcandle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("footcandle.s")]
        footcandles,
        
        /// <remarks/>
        fP,
        
        /// <remarks/>
        fPa,
        
        /// <remarks/>
        frd,
        
        /// <remarks/>
        fS,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        fT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/bbl")]
        ftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/d")]
        ftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/degF")]
        ftdegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft")]
        ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft3")]
        ftft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/gal[US]")]
        ftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/h")]
        fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/in")]
        ftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/lbm")]
        ftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/m")]
        ftm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/mi")]
        ftmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/min")]
        ftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ms")]
        ftms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/psi")]
        ftpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s")]
        fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s2")]
        fts2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/us")]
        ftus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnA]")]
        ftBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnB]")]
        ftBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br36]")]
        ftBr36,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br65]")]
        ftBr65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Cla]")]
        ftCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[GC]")]
        ftGC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind]")]
        ftInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind37]")]
        ftInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind62]")]
        ftInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind75]")]
        ftInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Se]")]
        ftSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[SeT]")]
        ftSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[US]")]
        ftUS,
        
        /// <remarks/>
        ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/in3")]
        ft2in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/lbm")]
        ft2lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(d.ft)")]
        ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(ft.psi.d)")]
        ft3ftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(min.ft2)")]
        ft3minft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(s.ft2)")]
        ft3sft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/bbl")]
        ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d")]
        ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d2")]
        ft3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft")]
        ft3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft2")]
        ft3ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft3")]
        ft3ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h")]
        ft3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h2")]
        ft3h2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/kg")]
        ft3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbm")]
        ft3lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbmol")]
        ft3lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min")]
        ft3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min2")]
        ft3min2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/rad")]
        ft3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s")]
        ft3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s2")]
        ft3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/sack[94lbm]")]
        ft3sack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fur[US]")]
        furUS,
        
        /// <remarks/>
        fV,
        
        /// <remarks/>
        fW,
        
        /// <remarks/>
        fWb,
        
        /// <remarks/>
        g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.ft/(cm3.s)")]
        gftcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.m/(cm3.s)")]
        gmcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm3")]
        gcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm4")]
        gcm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/dm3")]
        gdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[UK]")]
        ggalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[US]")]
        ggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/kg")]
        gkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/L")]
        gL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/m3")]
        gm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/mol")]
        gmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/s")]
        gs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/t")]
        gt,
        
        /// <remarks/>
        GA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ga[t]")]
        Gat,
        
        /// <remarks/>
        Gal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]")]
        galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft)")]
        galUKhft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft2)")]
        galUKhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in)")]
        galUKhin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in2)")]
        galUKhin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft)")]
        galUKminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft2)")]
        galUKminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/d")]
        galUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/ft3")]
        galUKft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h")]
        galUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h2")]
        galUKh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/lbm")]
        galUKlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/mi")]
        galUKmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min")]
        galUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min2")]
        galUKmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]")]
        galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft)")]
        galUShft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft2)")]
        galUShft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in)")]
        galUShin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in2)")]
        galUShin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft)")]
        galUSminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft2)")]
        galUSminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/bbl")]
        galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/d")]
        galUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft")]
        galUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft3")]
        galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h")]
        galUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h2")]
        galUSh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/lbm")]
        galUSlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/mi")]
        galUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min")]
        galUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min2")]
        galUSmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/sack[94lbm]")]
        galUSsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[UK]")]
        galUStonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[US]")]
        galUStonUS,
        
        /// <remarks/>
        gAPI,
        
        /// <remarks/>
        gauss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gauss/cm")]
        gausscm,
        
        /// <remarks/>
        GBq,
        
        /// <remarks/>
        GC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gcal[th]")]
        Gcalth,
        
        /// <remarks/>
        GEuc,
        
        /// <remarks/>
        GeV,
        
        /// <remarks/>
        gf,
        
        /// <remarks/>
        GF,
        
        /// <remarks/>
        Gg,
        
        /// <remarks/>
        Ggauss,
        
        /// <remarks/>
        GGy,
        
        /// <remarks/>
        GH,
        
        /// <remarks/>
        GHz,
        
        /// <remarks/>
        GJ,
        
        /// <remarks/>
        Gm,
        
        /// <remarks/>
        gn,
        
        /// <remarks/>
        GN,
        
        /// <remarks/>
        Gohm,
        
        /// <remarks/>
        gon,
        
        /// <remarks/>
        GP,
        
        /// <remarks/>
        GPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GPa/cm")]
        GPacm,
        
        /// <remarks/>
        GPa2,
        
        /// <remarks/>
        grain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/ft3")]
        grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/gal[US]")]
        graingalUS,
        
        /// <remarks/>
        Grd,
        
        /// <remarks/>
        GS,
        
        /// <remarks/>
        GT,
        
        /// <remarks/>
        GV,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GW.h")]
        GWh,
        
        /// <remarks/>
        GWb,
        
        /// <remarks/>
        Gy,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/ft3")]
        hft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/km")]
        hkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H/m")]
        Hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/m3")]
        hm3,
        
        /// <remarks/>
        ha,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ha.m")]
        ham,
        
        /// <remarks/>
        hbar,
        
        /// <remarks/>
        hg,
        
        /// <remarks/>
        hL,
        
        /// <remarks/>
        hm,
        
        /// <remarks/>
        hN,
        
        /// <remarks/>
        hp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h")]
        hph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/bbl")]
        hphbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/lbm")]
        hphlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/ft3")]
        hpft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/in2")]
        hpin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[elec]")]
        hpelec,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]")]
        hphyd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]/in2")]
        hphydin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric]")]
        hpmetric,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric].h")]
        hpmetrich,
        
        /// <remarks/>
        hs,
        
        /// <remarks/>
        Hz,
        
        /// <remarks/>
        @in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/(in.degF)")]
        inindegF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/a")]
        ina,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/min")]
        inmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s")]
        ins,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s2")]
        ins2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in[US]")]
        inUS,
        
        /// <remarks/>
        in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/ft2")]
        in2ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/in2")]
        in2in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in3/ft")]
        in3ft,
        
        /// <remarks/>
        in4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[39degF]")]
        inH2O39degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[60degF]")]
        inH2O60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[32degF]")]
        inHg32degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[60degF]")]
        inHg60degF,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/(s.m2.K)")]
        Jmsm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/m2")]
        Jmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(g.K)")]
        JgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(kg.K)")]
        JkgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(mol.K)")]
        JmolK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(s.m2.degC)")]
        Jsm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/cm2")]
        Jcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/dm3")]
        Jdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/g")]
        Jg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/K")]
        JK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/kg")]
        Jkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m")]
        Jm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m2")]
        Jm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m3")]
        Jm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/mol")]
        Jmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/s")]
        Js,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K.m2/kW")]
        Km2kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K.m2/W")]
        Km2W,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/km")]
        Kkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/m")]
        Km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/Pa")]
        KPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/s")]
        Ks,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("K/W")]
        KW,
        
        /// <remarks/>
        kA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ka[t]")]
        kat,
        
        /// <remarks/>
        kC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]")]
        kcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th].m/cm2")]
        kcalthmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m.degC)")]
        kcalthhmdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m2.degC)")]
        kcalthhm2degC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(kg.degC)")]
        kcalthkgdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/cm3")]
        kcalthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/g")]
        kcalthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/h")]
        kcalthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/kg")]
        kcalthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/m3")]
        kcalthm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/mol")]
        kcalthmol,
        
        /// <remarks/>
        kcd,
        
        /// <remarks/>
        kdyne,
        
        /// <remarks/>
        kEuc,
        
        /// <remarks/>
        keV,
        
        /// <remarks/>
        kF,
        
        /// <remarks/>
        kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/cm2")]
        kgmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/s")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(kW.h)")]
        kgkWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m.s)")]
        kgms1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m2.s)")]
        kgm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/d")]
        kgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm3")]
        kgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm4")]
        kgdm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/h")]
        kgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/J")]
        kgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/kg")]
        kgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/L")]
        kgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m")]
        kgm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m2")]
        kgm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3")]
        kgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m4")]
        kgm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/min")]
        kgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/MJ")]
        kgMJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/mol")]
        kgmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/s")]
        kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/sack[94lbm]")]
        kgsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/t")]
        kgt,
        
        /// <remarks/>
        kgauss,
        
        /// <remarks/>
        kgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m")]
        kgfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/cm2")]
        kgfmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/m")]
        kgfmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.s/m2")]
        kgfsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm")]
        kgfcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm2")]
        kgfcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/kgf")]
        kgfkgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/m2")]
        kgfm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/mm2")]
        kgfmm2,
        
        /// <remarks/>
        kGy,
        
        /// <remarks/>
        kH,
        
        /// <remarks/>
        kHz,
        
        /// <remarks/>
        Kibyte,
        
        /// <remarks/>
        kJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ.m/(h.m2.K)")]
        kJmhm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(h.m2.K)")]
        kJhm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kg.K)")]
        kJkgK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kmol.K)")]
        kJkmolK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/dm3")]
        kJdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kg")]
        kJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kmol")]
        kJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/m3")]
        kJm3,
        
        /// <remarks/>
        klbf,
        
        /// <remarks/>
        klbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("klbm/in")]
        klbmin,
        
        /// <remarks/>
        klx,
        
        /// <remarks/>
        km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/cm")]
        kmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/dm3")]
        kmdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/h")]
        kmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/L")]
        kmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/s")]
        kms,
        
        /// <remarks/>
        km2,
        
        /// <remarks/>
        km3,
        
        /// <remarks/>
        kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/h")]
        kmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/m3")]
        kmolm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/s")]
        kmols,
        
        /// <remarks/>
        kN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m2")]
        kNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m")]
        kNm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m2")]
        kNm21,
        
        /// <remarks/>
        knot,
        
        /// <remarks/>
        kohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kohm.m")]
        kohmm,
        
        /// <remarks/>
        kP,
        
        /// <remarks/>
        kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa.s/m")]
        kPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/h")]
        kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/hm")]
        kPahm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/m")]
        kPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/min")]
        kPamin,
        
        /// <remarks/>
        kPa2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa2/cP")]
        kPa2cP,
        
        /// <remarks/>
        kpsi,
        
        /// <remarks/>
        kpsi2,
        
        /// <remarks/>
        krad,
        
        /// <remarks/>
        krd,
        
        /// <remarks/>
        kS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kS/m")]
        kSm,
        
        /// <remarks/>
        kT,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h")]
        kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/(kg.degC)")]
        kWhkgdegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/dm3")]
        kWhdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/kg")]
        kWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/m3")]
        kWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m2.K)")]
        kWm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m3.K)")]
        kWm3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/cm2")]
        kWcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m2")]
        kWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m3")]
        kWm3,
        
        /// <remarks/>
        kWb,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/(bar.min)")]
        Lbarmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/h")]
        Lh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kg")]
        Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kmol")]
        Lkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m")]
        Lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m3")]
        Lm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/min")]
        Lmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/mol")]
        Lmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s")]
        Ls,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s2")]
        Ls2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/t")]
        Lt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/ton[UK]")]
        LtonUK,
        
        /// <remarks/>
        lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/bbl")]
        lbfftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/gal[US]")]
        lbfftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in")]
        lbfftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in2")]
        lbfftin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/lbm")]
        lbfftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/min")]
        lbfftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/s")]
        lbffts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in/in")]
        lbfinin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in2")]
        lbfin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/ft2")]
        lbfsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/in2")]
        lbfsin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft")]
        lbfft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft2")]
        lbfft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft3")]
        lbfft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/gal[US]")]
        lbfgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/in")]
        lbfin1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/lbf")]
        lbflbf,
        
        /// <remarks/>
        lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft")]
        lbmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft/s")]
        lbmfts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2")]
        lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2/s2")]
        lbmft2s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.h)")]
        lbmfth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.s)")]
        lbmfts1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.h)")]
        lbmft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.s)")]
        lbmft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[UK].ft)")]
        lbmgalUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[US].ft)")]
        lbmgalUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(hp.h)")]
        lbmhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/bbl")]
        lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/d")]
        lbmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft")]
        lbmft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft2")]
        lbmft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft3")]
        lbmft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft4")]
        lbmft4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[UK]")]
        lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[US]")]
        lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/h")]
        lbmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/in3")]
        lbmin3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/lbmol")]
        lbmlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/min")]
        lbmmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/s")]
        lbms,
        
        /// <remarks/>
        lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(h.ft2)")]
        lbmolhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(s.ft2)")]
        lbmolsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/ft3")]
        lbmolft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[UK]")]
        lbmolgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[US]")]
        lbmolgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/h")]
        lbmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/s")]
        lbmols,
        
        /// <remarks/>
        link,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnA]")]
        linkBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnB]")]
        linkBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Cla]")]
        linkCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Se]")]
        linkSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[SeT]")]
        linkSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[US]")]
        linkUS,
        
        /// <remarks/>
        lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm.s")]
        lms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/m2")]
        lmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/W")]
        lmW,
        
        /// <remarks/>
        lx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lx.s")]
        lxs,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/(m.K)")]
        mmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/cm")]
        mcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/d")]
        md,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/h")]
        mh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/K")]
        mK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kg")]
        mkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/km")]
        mkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kPa")]
        mkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m")]
        mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m3")]
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/min")]
        mmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/ms")]
        mms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/Pa")]
        mPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s")]
        ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s2")]
        ms2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m[Ger]")]
        mGer,
        
        /// <remarks/>
        m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(kPa.d)")]
        m2kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(Pa.s)")]
        m2Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/cm3")]
        m2cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/d")]
        m2d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/g")]
        m2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/kg")]
        m2kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m2")]
        m2m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m3")]
        m2m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/mol")]
        m2mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.d)")]
        m3bard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.h)")]
        m3barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.min)")]
        m3barmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(d.m)")]
        m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(h.m)")]
        m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(ha.m)")]
        m3ham,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.d)")]
        m3kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.h)")]
        m3kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kW.h)")]
        m3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(m3.K)")]
        m3m3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(Pa.s)")]
        m3Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(psi.d)")]
        m3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.ft)")]
        m3sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m)")]
        m3sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m2)")]
        m3sm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m3)")]
        m3sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/bbl")]
        m3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d")]
        m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d2")]
        m3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/g")]
        m3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/h")]
        m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/J")]
        m3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kg")]
        m3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/km")]
        m3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kmol")]
        m3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kPa")]
        m3kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m")]
        m3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m2")]
        m3m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m3")]
        m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/min")]
        m3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/mol")]
        m3mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/Pa")]
        m3Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rad")]
        m3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rev")]
        m3rev,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s")]
        m3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s2")]
        m3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/t")]
        m3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[UK]")]
        m3tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[US]")]
        m3tonUS,
        
        /// <remarks/>
        m4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m4/s")]
        m4s,
        
        /// <remarks/>
        mA,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/cm2")]
        mAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/ft2")]
        mAft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ma[t]")]
        Mat,
        
        /// <remarks/>
        mbar,
        
        /// <remarks/>
        MBq,
        
        /// <remarks/>
        mC,
        
        /// <remarks/>
        MC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mC/m2")]
        mCm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mcal[th]")]
        Mcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mcal[th]")]
        mcalth,
        
        /// <remarks/>
        mCi,
        
        /// <remarks/>
        mD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft")]
        mDft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft2/(lbf.s)")]
        mDft2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.in2/(lbf.s)")]
        mDin2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.m")]
        mDm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/(Pa.s)")]
        mDPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/cP")]
        mDcP,
        
        /// <remarks/>
        MEuc,
        
        /// <remarks/>
        mEuc,
        
        /// <remarks/>
        meV,
        
        /// <remarks/>
        MeV,
        
        /// <remarks/>
        mF,
        
        /// <remarks/>
        MF,
        
        /// <remarks/>
        Mg,
        
        /// <remarks/>
        mg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/a")]
        Mga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/d")]
        Mgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/dm3")]
        mgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/g")]
        mgg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/gal[US]")]
        mggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/h")]
        Mgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/in")]
        Mgin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/J")]
        mgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/kg")]
        mgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/L")]
        mgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m2")]
        Mgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m3")]
        Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/m3")]
        mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/min")]
        Mgmin,
        
        /// <remarks/>
        mGal,
        
        /// <remarks/>
        Mgauss,
        
        /// <remarks/>
        mgauss,
        
        /// <remarks/>
        Mgf,
        
        /// <remarks/>
        mgn,
        
        /// <remarks/>
        MGy,
        
        /// <remarks/>
        mGy,
        
        /// <remarks/>
        MH,
        
        /// <remarks/>
        mH,
        
        /// <remarks/>
        mHz,
        
        /// <remarks/>
        MHz,
        
        /// <remarks/>
        mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[UK]")]
        migalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[US]")]
        migalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/h")]
        mih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/in")]
        miin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[naut]")]
        minaut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[nautUK]")]
        minautUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]")]
        miUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]2")]
        miUS2,
        
        /// <remarks/>
        mi2,
        
        /// <remarks/>
        mi3,
        
        /// <remarks/>
        Mibyte,
        
        /// <remarks/>
        mil,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mil/a")]
        mila,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mila")]
        mila1,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/ft")]
        minft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/m")]
        minm,
        
        /// <remarks/>
        mina,
        
        /// <remarks/>
        mJ,
        
        /// <remarks/>
        MJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/a")]
        MJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/cm2")]
        mJcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kg")]
        MJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kmol")]
        MJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m")]
        MJm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/m2")]
        mJm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m3")]
        MJm3,
        
        /// <remarks/>
        mL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[UK]")]
        mLgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[US]")]
        mLgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/mL")]
        mLmL,
        
        /// <remarks/>
        Mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm")]
        mm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/(mm.K)")]
        mmmmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/a")]
        mma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/s")]
        mms1,
        
        /// <remarks/>
        mm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/mm2")]
        mm2mm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3")]
        mm31,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3/J")]
        mm3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mmHg[0degC]")]
        mmHg0degC,
        
        /// <remarks/>
        mmol,
        
        /// <remarks/>
        mN,
        
        /// <remarks/>
        MN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN.m2")]
        mNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/km")]
        mNkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/m")]
        mNm,
        
        /// <remarks/>
        mohm,
        
        /// <remarks/>
        Mohm,
        
        /// <remarks/>
        mol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol.m2/(mol.s)")]
        molm2mols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/(s.m2)")]
        molsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m2")]
        molm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m3")]
        molm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/mol")]
        molmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/s")]
        mols,
        
        /// <remarks/>
        mP,
        
        /// <remarks/>
        MP,
        
        /// <remarks/>
        MPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa")]
        mPa1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa.s")]
        mPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa.s/m")]
        MPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/h")]
        MPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/m")]
        MPam,
        
        /// <remarks/>
        Mpsi,
        
        /// <remarks/>
        mrad,
        
        /// <remarks/>
        Mrad,
        
        /// <remarks/>
        Mrd,
        
        /// <remarks/>
        mrd,
        
        /// <remarks/>
        mrem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mrem/h")]
        mremh,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        mS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms")]
        ms1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/cm")]
        mscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/cm")]
        mScm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/ft")]
        msft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/in")]
        msin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/m")]
        mSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/m")]
        msm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/s")]
        mss,
        
        /// <remarks/>
        mSv,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mSv/h")]
        mSvh,
        
        /// <remarks/>
        mT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mT/dm")]
        mTdm,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/ft")]
        mVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/m")]
        mVm,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h")]
        MWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/kg")]
        MWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/m3")]
        MWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mW/m2")]
        mWm2,
        
        /// <remarks/>
        mWb,
        
        /// <remarks/>
        MWb,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m/m")]
        Nmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.s/m2")]
        Nsm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m2")]
        Nm21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m3")]
        Nm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/mm2")]
        Nmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/N")]
        NN,
        
        /// <remarks/>
        nA,
        
        /// <remarks/>
        na,
        
        /// <remarks/>
        nAPI,
        
        /// <remarks/>
        nC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ncal[th]")]
        ncalth,
        
        /// <remarks/>
        nCi,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        neV,
        
        /// <remarks/>
        nF,
        
        /// <remarks/>
        ng,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/g")]
        ngg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/mg")]
        ngmg,
        
        /// <remarks/>
        ngauss,
        
        /// <remarks/>
        nGy,
        
        /// <remarks/>
        nH,
        
        /// <remarks/>
        nHz,
        
        /// <remarks/>
        nJ,
        
        /// <remarks/>
        nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nm/s")]
        nms,
        
        /// <remarks/>
        nN,
        
        /// <remarks/>
        nohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mil2/ft")]
        nohmmil2ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mm2/m")]
        nohmmm2m,
        
        /// <remarks/>
        nP,
        
        /// <remarks/>
        nPa,
        
        /// <remarks/>
        nrd,
        
        /// <remarks/>
        nS,
        
        /// <remarks/>
        ns,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/ft")]
        nsft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/m")]
        nsm,
        
        /// <remarks/>
        nT,
        
        /// <remarks/>
        nV,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        nWb,
        
        /// <remarks/>
        O,
        
        /// <remarks/>
        Oe,
        
        /// <remarks/>
        ohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.cm")]
        ohmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m2/m")]
        ohmm2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm/m")]
        ohmm1,
        
        /// <remarks/>
        ozf,
        
        /// <remarks/>
        ozm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ozm[troy]")]
        ozmtroy,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        pA,
        
        /// <remarks/>
        Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s.m3/kg")]
        Pasm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s/m3")]
        Pasm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s2/m3")]
        Pas2m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/h")]
        Pah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m")]
        Pam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m3")]
        Pam3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/s")]
        Pas1,
        
        /// <remarks/>
        Pa2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa2/(Pa.s)")]
        Pa2Pas,
        
        /// <remarks/>
        pC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcal[th]")]
        pcalth,
        
        /// <remarks/>
        pCi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pCi/g")]
        pCig,
        
        /// <remarks/>
        pdl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.cm2")]
        pdlcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.ft")]
        pdlft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl/cm")]
        pdlcm,
        
        /// <remarks/>
        pEuc,
        
        /// <remarks/>
        peV,
        
        /// <remarks/>
        pF,
        
        /// <remarks/>
        pg,
        
        /// <remarks/>
        pgauss,
        
        /// <remarks/>
        pGy,
        
        /// <remarks/>
        pHz,
        
        /// <remarks/>
        pJ,
        
        /// <remarks/>
        pm,
        
        /// <remarks/>
        pN,
        
        /// <remarks/>
        pohm,
        
        /// <remarks/>
        pP,
        
        /// <remarks/>
        pPa,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[mass]")]
        ppmmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]")]
        ppmvol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/degC")]
        ppmvoldegC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/degF")]
        ppmvoldegF,
        
        /// <remarks/>
        prd,
        
        /// <remarks/>
        ps,
        
        /// <remarks/>
        pS,
        
        /// <remarks/>
        psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.d/bbl")]
        psidbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.s")]
        psis,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/ft")]
        psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/h")]
        psih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/m")]
        psim,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/min")]
        psimin,
        
        /// <remarks/>
        psi2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2.d/(cP.ft3)")]
        psi2dcPft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2/cP")]
        psi2cP,
        
        /// <remarks/>
        pT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]")]
        ptUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]/(hp.h)")]
        ptUKhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[US]")]
        ptUS,
        
        /// <remarks/>
        pV,
        
        /// <remarks/>
        pW,
        
        /// <remarks/>
        pWb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[UK]")]
        qtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[US]")]
        qtUS,
        
        /// <remarks/>
        quad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quad/a")]
        quada,
        
        /// <remarks/>
        rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft")]
        radft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft3")]
        radft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m")]
        radm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m3")]
        radm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s")]
        rads,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s2")]
        rads2,
        
        /// <remarks/>
        rd,
        
        /// <remarks/>
        rem,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rem/h")]
        remh,
        
        /// <remarks/>
        rev,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/ft")]
        revft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/m")]
        revm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/s")]
        revs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rod[US]")]
        rodUS,
        
        /// <remarks/>
        rpm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rpm/s")]
        rpms,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/cm")]
        scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft")]
        sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft3")]
        sft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/in")]
        sin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/kg")]
        skg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/L")]
        sL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S/m")]
        Sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m")]
        sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m3")]
        sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[UK]")]
        sqtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[US]")]
        sqtUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/s")]
        ss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sack[94lbm]")]
        sack94lbm,
        
        /// <remarks/>
        seca,
        
        /// <remarks/>
        section,
        
        /// <remarks/>
        sr,
        
        /// <remarks/>
        St,
        
        /// <remarks/>
        Sv,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/h")]
        Svh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/s")]
        Svs,
        
        /// <remarks/>
        t,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/a")]
        ta,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/d")]
        td,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/h")]
        th,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T/m")]
        Tm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/m3")]
        tm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/min")]
        tmin,
        
        /// <remarks/>
        TA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ta[t]")]
        Tat,
        
        /// <remarks/>
        TBq,
        
        /// <remarks/>
        TC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tcal[th]")]
        Tcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]")]
        TDAPI,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API].m")]
        TDAPIm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]/(Pa.s)")]
        TDAPIPas,
        
        /// <remarks/>
        TEuc,
        
        /// <remarks/>
        TeV,
        
        /// <remarks/>
        TF,
        
        /// <remarks/>
        Tg,
        
        /// <remarks/>
        Tgauss,
        
        /// <remarks/>
        TGy,
        
        /// <remarks/>
        TH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[EC]")]
        thermEC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[UK]")]
        thermUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[US]")]
        thermUS,
        
        /// <remarks/>
        THz,
        
        /// <remarks/>
        TJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TJ/a")]
        TJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tm")]
        Tm1,
        
        /// <remarks/>
        TN,
        
        /// <remarks/>
        Tohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]")]
        tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/a")]
        tonUKa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/d")]
        tonUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/h")]
        tonUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/min")]
        tonUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]")]
        tonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/a")]
        tonUSa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/d")]
        tonUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/ft2")]
        tonUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/h")]
        tonUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/min")]
        tonUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]")]
        tonfUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK].ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft")]
        tonfUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft2")]
        tonfUKft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]")]
        tonfUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft")]
        tonfUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft2")]
        tonfUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi")]
        tonfUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/bbl")]
        tonfUSmibbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/ft")]
        tonfUSmift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft")]
        tonfUSft1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft2")]
        tonfUSft21,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/in2")]
        tonfUSin2,
        
        /// <remarks/>
        tonRefrig,
        
        /// <remarks/>
        torr,
        
        /// <remarks/>
        TP,
        
        /// <remarks/>
        TPa,
        
        /// <remarks/>
        Trd,
        
        /// <remarks/>
        TS,
        
        /// <remarks/>
        TT,
        
        /// <remarks/>
        TV,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TW.h")]
        TWh,
        
        /// <remarks/>
        TWb,
        
        /// <remarks/>
        uA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/cm2")]
        uAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/in2")]
        uAin2,
        
        /// <remarks/>
        ubar,
        
        /// <remarks/>
        uC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]")]
        ucalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/(s.cm2)")]
        ucalthscm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/s")]
        ucalths,
        
        /// <remarks/>
        uCi,
        
        /// <remarks/>
        uEuc,
        
        /// <remarks/>
        ueV,
        
        /// <remarks/>
        uF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uF/m")]
        uFm,
        
        /// <remarks/>
        ug,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/cm3")]
        ugcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/g")]
        ugg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/mg")]
        ugmg,
        
        /// <remarks/>
        ugauss,
        
        /// <remarks/>
        uGy,
        
        /// <remarks/>
        uH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uH/m")]
        uHm,
        
        /// <remarks/>
        uHz,
        
        /// <remarks/>
        uJ,
        
        /// <remarks/>
        um,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um/s")]
        ums,
        
        /// <remarks/>
        um2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um2.m")]
        um2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("umHg[0degC]")]
        umHg0degC,
        
        /// <remarks/>
        umol,
        
        /// <remarks/>
        uN,
        
        /// <remarks/>
        uohm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/ft")]
        uohmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/m")]
        uohmm,
        
        /// <remarks/>
        uP,
        
        /// <remarks/>
        uPa,
        
        /// <remarks/>
        upsi,
        
        /// <remarks/>
        urad,
        
        /// <remarks/>
        urd,
        
        /// <remarks/>
        us,
        
        /// <remarks/>
        uS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/ft")]
        usft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/in")]
        usin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/m")]
        usm,
        
        /// <remarks/>
        uT,
        
        /// <remarks/>
        uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/ft")]
        uVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/m")]
        uVm,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uW/m3")]
        uWm3,
        
        /// <remarks/>
        uWb,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/B")]
        VB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/dB")]
        VdB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/m")]
        Vm,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W.m2.K/(J.K)")]
        Wm2KJK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.K)")]
        WmK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.K)")]
        Wm2K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.sr)")]
        Wm2sr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m3.K)")]
        Wm3K,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/cm2")]
        Wcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/K")]
        WK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/kW")]
        WkW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m2")]
        Wm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m3")]
        Wm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/mm2")]
        Wmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/sr")]
        Wsr,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/W")]
        WW,
        
        /// <remarks/>
        Wb,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb.m")]
        Wbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/m")]
        Wbm1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/mm")]
        Wbmm,
        
        /// <remarks/>
        wk,
        
        /// <remarks/>
        yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnA]")]
        ydBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnB]")]
        ydBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Cla]")]
        ydCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind]")]
        ydInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind37]")]
        ydInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind62]")]
        ydInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind75]")]
        ydInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Se]")]
        ydSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[SeT]")]
        ydSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[US]")]
        ydUS,
        
        /// <remarks/>
        yd2,
        
        /// <remarks/>
        yd3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IntegerQuantityParameter : AbstractActivityParameter {
        
        private long valueField;
        
        /// <remarks/>
        /// <summary>Integer value</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Integer value")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="long")]
        public long Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class StringParameter : AbstractActivityParameter {
        
        private string valueField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="string")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class DataObjectParameter : AbstractActivityParameter {
        
        private DataObjectReference dataObjectField;
        
        /// <remarks/>
        /// <summary>Is actually a reference and not a containment relationship.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Is actually a reference and not a containment relationship.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DataObject", DataType="DataObjectReference")]
        public DataObjectReference DataObject {
            get {
                return this.dataObjectField;
            }
            set {
                this.dataObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TimeIndices {
        
        private string timeIndexCountField;
        
        private string timeIndexStartField;
        
        private AbstractIntegerArray simulatorTimeStepField;
        
        private bool useIntervalField;
        
        private DataObjectReference timeSeriesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndexCount", DataType="positiveInteger")]
        public string TimeIndexCount {
            get {
                return this.timeIndexCountField;
            }
            set {
                this.timeIndexCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The index of the start time in the time series, if not zero.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("The index of the start time in the time series, if not zero.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndexStart", DataType="nonNegativeInteger")]
        public string TimeIndexStart {
            get {
                return this.timeIndexStartField;
            }
            set {
                this.timeIndexStartField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Simulation time step for each time index</summary>
        [System.ComponentModel.DescriptionAttribute("Simulation time step for each time index")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SimulatorTimeStep", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray SimulatorTimeStep {
            get {
                return this.simulatorTimeStepField;
            }
            set {
                this.simulatorTimeStepField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>When UseInterval is true, the values are associated with each time intervals between two consecutive time entries instead of each individual time entry. As a consequence the dimension of the value array corresponding to the time series is the number of entry in the series minus one.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"When UseInterval is true, the values are associated with each time intervals between two consecutive time entries instead of each individual time entry. As a consequence the dimension of the value array corresponding to the time series is the number of entry in the series minus one.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UseInterval", DataType="boolean")]
        public bool UseInterval {
            get {
                return this.useIntervalField;
            }
            set {
                this.useIntervalField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSeries", DataType="DataObjectReference")]
        public DataObjectReference TimeSeries {
            get {
                return this.timeSeriesField;
            }
            set {
                this.timeSeriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractIntegerArray : AbstractValueArray {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractBooleanArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromDiscretePropertyArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromIndexArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractIntegerArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDoubleArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleLatticeArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractValueArray {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromDiscretePropertyArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromIndexArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractBooleanArray : AbstractValueArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class BooleanArrayFromDiscretePropertyArray : AbstractBooleanArray {
        
        private string valueField;
        
        private DataObjectReference propertyField;
        
        /// <remarks/>
        /// <summary>Integer to match for the value to be considered true</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Integer to match for the value to be considered true")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Property", DataType="DataObjectReference")]
        public DataObjectReference Property {
            get {
                return this.propertyField;
            }
            set {
                this.propertyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class BooleanHdf5Array : AbstractBooleanArray {
        
        private Hdf5Dataset valuesField;
        
        /// <remarks/>
        /// <summary>Reference to an HDF5 array of values.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to an HDF5 array of values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="Hdf5Dataset")]
        public Hdf5Dataset Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class Hdf5Dataset {
        
        private string pathInHdfFileField;
        
        private DataObjectReference hdfProxyField;
        
        /// <remarks/>
        /// <summary>The path of the referenced dataset in the HDF file.  The separator between groups and final dataset is a slash '/'</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The path of the referenced dataset in the HDF file.  The separator between groups" +
            " and final dataset is a slash \'/\'")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PathInHdfFile", DataType="string")]
        public string PathInHdfFile {
            get {
                return this.pathInHdfFileField;
            }
            set {
                this.pathInHdfFileField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HdfProxy", DataType="DataObjectReference")]
        public DataObjectReference HdfProxy {
            get {
                return this.hdfProxyField;
            }
            set {
                this.hdfProxyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class BooleanConstantArray : AbstractBooleanArray {
        
        private bool valueField;
        
        private string countField;
        
        /// <remarks/>
        /// <summary>Value inside all the elements of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Value inside all the elements of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="boolean")]
        public bool Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class BooleanArrayFromIndexArray : AbstractBooleanArray {
        
        private string countField;
        
        private AbstractIntegerArray indicesField;
        
        private bool indexIsTrueField;
        
        /// <remarks/>
        /// <summary>Total number of Boolean elements in the array. This number is different from the number of indices used to represent the array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Total number of Boolean elements in the array. This number is different from the " +
            "number of indices used to represent the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Array of integer indices.  BUSINESS RULE: Must be non-negative.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Array of integer indices.  BUSINESS RULE: Must be non-negative.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Indices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray Indices {
            get {
                return this.indicesField;
            }
            set {
                this.indicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates whether the specified elements are true or false.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates whether the specified elements are true or false.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexIsTrue", DataType="boolean")]
        public bool IndexIsTrue {
            get {
                return this.indexIsTrueField;
            }
            set {
                this.indexIsTrueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class StringHdf5Array : AbstractValueArray {
        
        private Hdf5Dataset valuesField;
        
        /// <remarks/>
        /// <summary>Reference to HDF5 array of integer or double</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to HDF5 array of integer or double")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="Hdf5Dataset")]
        public Hdf5Dataset Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleLatticeArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractDoubleArray : AbstractValueArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class DoubleHdf5Array : AbstractDoubleArray {
        
        private Hdf5Dataset valuesField;
        
        /// <remarks/>
        /// <summary>Reference to an HDF5 array of doubles.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to an HDF5 array of doubles.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="Hdf5Dataset")]
        public Hdf5Dataset Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class DoubleConstantArray : AbstractDoubleArray {
        
        private double valueField;
        
        private string countField;
        
        /// <remarks/>
        /// <summary>Values inside all the elements of the array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Values inside all the elements of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="double")]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class DoubleLatticeArray : AbstractDoubleArray {
        
        private double startValueField;
        
        private DoubleConstantArray[] offsetField;
        
        /// <remarks/>
        /// <summary>Value representing the global start for the lattice.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Value representing the global start for the lattice.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartValue", DataType="double")]
        public double StartValue {
            get {
                return this.startValueField;
            }
            set {
                this.startValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Offset")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Offset", DataType="DoubleConstantArray")]
        public DoubleConstantArray[] Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IntegerRangeArray : AbstractIntegerArray {
        
        private string countField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Start value for the range. End value is start+count-1.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Start value for the range. End value is start+count-1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IntegerLatticeArray : AbstractIntegerArray {
        
        private string startValueField;
        
        private IntegerConstantArray[] offsetField;
        
        /// <remarks/>
        /// <summary>Value representing the global start for the lattice: i.e., iStart + jStart*ni + kStart*ni*nj</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Value representing the global start for the lattice: i.e., iStart + jStart*ni + k" +
            "Start*ni*nj")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartValue", DataType="integer")]
        public string StartValue {
            get {
                return this.startValueField;
            }
            set {
                this.startValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Offset")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Offset", DataType="IntegerConstantArray")]
        public IntegerConstantArray[] Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IntegerConstantArray : AbstractIntegerArray {
        
        private string valueField;
        
        private string countField;
        
        /// <remarks/>
        /// <summary>Values inside all the elements of the array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Values inside all the elements of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="integer")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of the array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IntegerHdf5Array : AbstractIntegerArray {
        
        private string nullValueField;
        
        private Hdf5Dataset valuesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NullValue", DataType="integer")]
        public string NullValue {
            get {
                return this.nullValueField;
            }
            set {
                this.nullValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Reference to an HDF5 array of integers or doubles.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to an HDF5 array of integers or doubles.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="Hdf5Dataset")]
        public Hdf5Dataset Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IntegerArrayFromBooleanMaskArray : AbstractIntegerArray {
        
        private string totalIndexCountField;
        
        private AbstractBooleanArray maskField;
        
        /// <remarks/>
        /// <summary>Total number of integer elements in the array. This number is different from the number of Boolean mask values used to represent the array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Total number of integer elements in the array. This number is different from the " +
            "number of Boolean mask values used to represent the array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TotalIndexCount", DataType="positiveInteger")]
        public string TotalIndexCount {
            get {
                return this.totalIndexCountField;
            }
            set {
                this.totalIndexCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Boolean mask. A true element indicates that the index is included on the list of integer values.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Boolean mask. A true element indicates that the index is included on the list of " +
            "integer values.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mask", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray Mask {
            get {
                return this.maskField;
            }
            set {
                this.maskField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class PropertyKindFacet {
        
        private Facet facetField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>Facet of the property kind (see the enumeration)</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Facet of the property kind (see the enumeration)")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Facet", DataType="Facet")]
        public Facet Facet {
            get {
                return this.facetField;
            }
            set {
                this.facetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Property facet value.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Property facet value.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="string")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum Facet {
        
        /// <remarks/>
        conditions,
        
        /// <remarks/>
        direction,
        
        /// <remarks/>
        netgross,
        
        /// <remarks/>
        qualifier,
        
        /// <remarks/>
        statistics,
        
        /// <remarks/>
        what,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class PatchOfValues {
        
        private string representationPatchIndexField;
        
        private AbstractValueArray valuesField;
        
        /// <remarks/>
        /// <summary>Patch index used to attach properties to a specific patch of the indexable elements.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("Patch index used to attach properties to a specific patch of the indexable elemen" +
            "ts.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentationPatchIndex", DataType="nonNegativeInteger")]
        public string RepresentationPatchIndex {
            get {
                return this.representationPatchIndexField;
            }
            set {
                this.representationPatchIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Values to be attached to the indexable elements.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Values to be attached to the indexable elements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Values", DataType="AbstractValueArray")]
        public AbstractValueArray Values {
            get {
                return this.valuesField;
            }
            set {
                this.valuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class PatchOfPoints {
        
        private string representationPatchIndexField;
        
        private AbstractPoint3dArray pointsField;
        
        /// <remarks/>
        /// <summary>Optional patch index used to attach properties to a specific patch of the indexable elements.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("Optional patch index used to attach properties to a specific patch of the indexab" +
            "le elements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentationPatchIndex", DataType="nonNegativeInteger")]
        public string RepresentationPatchIndex {
            get {
                return this.representationPatchIndexField;
            }
            set {
                this.representationPatchIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Geometric points (or vectors) to be attached to the specified indexable elements.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Geometric points (or vectors) to be attached to the specified indexable elements." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Points", DataType="AbstractPoint3dArray")]
        public AbstractPoint3dArray Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dFromRepresentationLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dParametricArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dZValueArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point2dHdf5Array))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractPoint3dArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Point3dFromRepresentationLatticeArray : AbstractPoint3dArray {
        
        private IntegerLatticeArray nodeIndicesOnSupportingRepresentationField;
        
        private DataObjectReference supportingRepresentationField;
        
        /// <remarks/>
        /// <summary>The node indices of the selected nodes in the supporting representation. The index selection is regularly incremented from one node to the next node.  BUSINESS RULE: The node indices must be consistent with the size of supporting representation.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The node indices of the selected nodes in the supporting representation. The inde" +
            "x selection is regularly incremented from one node to the next node.  BUSINESS R" +
            "ULE: The node indices must be consistent with the size of supporting representat" +
            "ion.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeIndicesOnSupportingRepresentation", DataType="IntegerLatticeArray")]
        public IntegerLatticeArray NodeIndicesOnSupportingRepresentation {
            get {
                return this.nodeIndicesOnSupportingRepresentationField;
            }
            set {
                this.nodeIndicesOnSupportingRepresentationField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportingRepresentation", DataType="DataObjectReference")]
        public DataObjectReference SupportingRepresentation {
            get {
                return this.supportingRepresentationField;
            }
            set {
                this.supportingRepresentationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Point3dParametricArray : AbstractPoint3dArray {
        
        private AbstractValueArray parametersField;
        
        private AbstractIntegerArray parametricLineIndicesField;
        
        private AbstractIntegerArray truncatedLineIndicesField;
        
        private AbstractParametricLineArray parametricLinesField;
        
        /// <remarks/>
        /// <summary>A multi-dimensional array of parametric values that implicitly specifies an array of XYZ points.  The parametric values provided in this data-object must be consistent with the parametric values specified in the referenced parametric line array.  When constructing a column-layer grid geometry using parametric points, the array indexing follows the dimensionality of the coordinate lines x NKL, which is either a 2D or 3D array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"A multi-dimensional array of parametric values that implicitly specifies an array of XYZ points.  The parametric values provided in this data-object must be consistent with the parametric values specified in the referenced parametric line array.  When constructing a column-layer grid geometry using parametric points, the array indexing follows the dimensionality of the coordinate lines x NKL, which is either a 2D or 3D array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameters", DataType="AbstractValueArray")]
        public AbstractValueArray Parameters {
            get {
                return this.parametersField;
            }
            set {
                this.parametersField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An optional array of indices that map from the array index to the index of the corresponding parametric line.  If this information is known from context, then this array is not needed. For example, in either of these cases: (1) If the mapping from array index to parametric line is 1:1. (2) If the mapping has already been specified, as with the pillar Index from the column-layer geometry of a grid.  For example, when constructing a column-layer grid geometry using parametric lines, the array indexing follows the dimensionality of the coordinate lines.</summary>
        [System.ComponentModel.DescriptionAttribute(@"An optional array of indices that map from the array index to the index of the corresponding parametric line.  If this information is known from context, then this array is not needed. For example, in either of these cases: (1) If the mapping from array index to parametric line is 1:1. (2) If the mapping has already been specified, as with the pillar Index from the column-layer geometry of a grid.  For example, when constructing a column-layer grid geometry using parametric lines, the array indexing follows the dimensionality of the coordinate lines.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParametricLineIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParametricLineIndices {
            get {
                return this.parametricLineIndicesField;
            }
            set {
                this.parametricLineIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A 2D array of line indices for use with intersecting parametric lines. Each record consists of a single line index, which indicates the array line that uses this truncation information, followed by the parametric line indices for each of the points on that line.  For a non-truncated line, the equivalent record repeats the array line index NKL+1 times.   Size = (NKL+1) x truncatedLineCount</summary>
        [System.ComponentModel.DescriptionAttribute(@"A 2D array of line indices for use with intersecting parametric lines. Each record consists of a single line index, which indicates the array line that uses this truncation information, followed by the parametric line indices for each of the points on that line.  For a non-truncated line, the equivalent record repeats the array line index NKL+1 times.   Size = (NKL+1) x truncatedLineCount")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncatedLineIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray TruncatedLineIndices {
            get {
                return this.truncatedLineIndicesField;
            }
            set {
                this.truncatedLineIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParametricLines", DataType="AbstractParametricLineArray")]
        public AbstractParametricLineArray ParametricLines {
            get {
                return this.parametricLinesField;
            }
            set {
                this.parametricLinesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineFromRepresentationLatticeArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractParametricLineArray {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ParametricLineArray : AbstractParametricLineArray {
        
        private AbstractDoubleArray controlPointParametersField;
        
        private AbstractPoint3dArray controlPointsField;
        
        private string knotCountField;
        
        private AbstractIntegerArray lineKindIndicesField;
        
        private AbstractPoint3dArray tangentVectorsField;
        
        private ParametricLineIntersections parametricLineIntersectionsField;
        
        /// <remarks/>
        /// <summary>An optional array of explicit control point parameters for all of the control points on each of the parametric lines. Used only if control point parameters are present.  The number of explicit control point parameters per line is given by the count of non-null parameters on each line.   Described as a 1D array, the control point parameter array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D  BUSINESS RULE: This count should be zero for vertical and Z linear cubic parametric lines. For all other parametric line kinds, there should be one control point parameter for each control point.  NOTES: (1) Vertical parametric lines do not require control point parameters (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line.</summary>
        [System.ComponentModel.DescriptionAttribute(@"An optional array of explicit control point parameters for all of the control points on each of the parametric lines. Used only if control point parameters are present.  The number of explicit control point parameters per line is given by the count of non-null parameters on each line.   Described as a 1D array, the control point parameter array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D  BUSINESS RULE: This count should be zero for vertical and Z linear cubic parametric lines. For all other parametric line kinds, there should be one control point parameter for each control point.  NOTES: (1) Vertical parametric lines do not require control point parameters (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ControlPointParameters", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray ControlPointParameters {
            get {
                return this.controlPointParametersField;
            }
            set {
                this.controlPointParametersField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An array of 3D points for all of the control points on each of the parametric lines. The number of control points per line is given by the count of non-null 3D points on each line.  Described as a 1D array, the control point array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"An array of 3D points for all of the control points on each of the parametric lines. The number of control points per line is given by the count of non-null 3D points on each line.  Described as a 1D array, the control point array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ControlPoints", DataType="AbstractPoint3dArray")]
        public AbstractPoint3dArray ControlPoints {
            get {
                return this.controlPointsField;
            }
            set {
                this.controlPointsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The first dimension of the control point, control point parameter, and tangent vector arrays for the parametric splines. The Knot Count is typically chosen to be the maximum number of control points, parameters or tangent vectors on any parametric line in the array of parametric lines.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The first dimension of the control point, control point parameter, and tangent vector arrays for the parametric splines. The Knot Count is typically chosen to be the maximum number of control points, parameters or tangent vectors on any parametric line in the array of parametric lines.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KnotCount", DataType="positiveInteger")]
        public string KnotCount {
            get {
                return this.knotCountField;
            }
            set {
                this.knotCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An array of integers indicating the parametric line kind.  0 = vertical 1 = linear spline 2 = natural cubic spline 3 = cubic spline 4 = Z linear cubic spline 5 = minimum-curvature spline (-1) = null: no line   Size = #Lines, e.g., (1D or 2D)</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An array of integers indicating the parametric line kind.  0 = vertical 1 = linea" +
            "r spline 2 = natural cubic spline 3 = cubic spline 4 = Z linear cubic spline 5 =" +
            " minimum-curvature spline (-1) = null: no line   Size = #Lines, e.g., (1D or 2D)" +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineKindIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray LineKindIndices {
            get {
                return this.lineKindIndicesField;
            }
            set {
                this.lineKindIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An optional array that is of tangent vectors for all of the control points on each of the cubic and minimum-curvature parametric lines. Used only if tangent vectors are present. The number of tangent vectors per line is given by the count of non-null tangent vectors on each of these line kinds.  Described as a 1D array, the tangent vector array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D  BUSINESS RULE: For all lines other than the cubic and minimum-curvature parametric lines, this count is zero. For these line kinds, there is one tangent vector for each control point.  If a tangent vector is missing, then it is computed in the same fashion as for a natural cubic spline. Specifically, to obtain the tangent at internal knots, the control points are fit by a quadratic function with the two adjacent control points. At edge knots, the second derivative vanishes.</summary>
        [System.ComponentModel.DescriptionAttribute(@"An optional array that is of tangent vectors for all of the control points on each of the cubic and minimum-curvature parametric lines. Used only if tangent vectors are present. The number of tangent vectors per line is given by the count of non-null tangent vectors on each of these line kinds.  Described as a 1D array, the tangent vector array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D  BUSINESS RULE: For all lines other than the cubic and minimum-curvature parametric lines, this count is zero. For these line kinds, there is one tangent vector for each control point.  If a tangent vector is missing, then it is computed in the same fashion as for a natural cubic spline. Specifically, to obtain the tangent at internal knots, the control points are fit by a quadratic function with the two adjacent control points. At edge knots, the second derivative vanishes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TangentVectors", DataType="AbstractPoint3dArray")]
        public AbstractPoint3dArray TangentVectors {
            get {
                return this.tangentVectorsField;
            }
            set {
                this.tangentVectorsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParametricLineIntersections", DataType="ParametricLineIntersections")]
        public ParametricLineIntersections ParametricLineIntersections {
            get {
                return this.parametricLineIntersectionsField;
            }
            set {
                this.parametricLineIntersectionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ParametricLineIntersections {
        
        private string countField;
        
        private AbstractIntegerArray intersectionLinePairsField;
        
        private AbstractValueArray parameterValuePairsField;
        
        /// <remarks/>
        /// <summary>Number of parametric line intersections. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of parametric line intersections. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Intersected line index pair for (line 1, line 2).  Size = 2 x count</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Intersected line index pair for (line 1, line 2).  Size = 2 x count")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IntersectionLinePairs", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray IntersectionLinePairs {
            get {
                return this.intersectionLinePairsField;
            }
            set {
                this.intersectionLinePairsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Intersected line parameter value pairs for (line 1, line 2).  Size = 2 x count</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Intersected line parameter value pairs for (line 1, line 2).  Size = 2 x count")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParameterValuePairs", DataType="AbstractValueArray")]
        public AbstractValueArray ParameterValuePairs {
            get {
                return this.parameterValuePairsField;
            }
            set {
                this.parameterValuePairsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ParametricLineFromRepresentationLatticeArray : AbstractParametricLineArray {
        
        private IntegerLatticeArray lineIndicesOnSupportingRepresentationField;
        
        private DataObjectReference supportingRepresentationField;
        
        /// <remarks/>
        /// <summary>The line indices of the selected lines in the supporting representation. The index selection is regularly incremented from one node to the next node.  BUSINESS RULE: The dimensions of the integer lattice array must be consistent with the dimensions of the supporting representation.  For a column-layer grid, the parametric lines follow the indexing of the pillars.  BUSINESS RULE: The start value of the integer lattice array must be the linearized index of the starting line. Example: iStart + ni * jStart in case of a supporting 2D grid.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The line indices of the selected lines in the supporting representation. The index selection is regularly incremented from one node to the next node.  BUSINESS RULE: The dimensions of the integer lattice array must be consistent with the dimensions of the supporting representation.  For a column-layer grid, the parametric lines follow the indexing of the pillars.  BUSINESS RULE: The start value of the integer lattice array must be the linearized index of the starting line. Example: iStart + ni * jStart in case of a supporting 2D grid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineIndicesOnSupportingRepresentation", DataType="IntegerLatticeArray")]
        public IntegerLatticeArray LineIndicesOnSupportingRepresentation {
            get {
                return this.lineIndicesOnSupportingRepresentationField;
            }
            set {
                this.lineIndicesOnSupportingRepresentationField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportingRepresentation", DataType="DataObjectReference")]
        public DataObjectReference SupportingRepresentation {
            get {
                return this.supportingRepresentationField;
            }
            set {
                this.supportingRepresentationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Point3dHdf5Array : AbstractPoint3dArray {
        
        private Hdf5Dataset coordinatesField;
        
        /// <remarks/>
        /// <summary>Reference to an HDF5 3D dataset of XYZ points. The 3 coordinates are stored sequentially in HDF5, i.e., a multi-dimensional array of points is stored as a 3 x ... HDF5 array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to an HDF5 3D dataset of XYZ points. The 3 coordinates are stored seque" +
            "ntially in HDF5, i.e., a multi-dimensional array of points is stored as a 3 x .." +
            ". HDF5 array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coordinates", DataType="Hdf5Dataset")]
        public Hdf5Dataset Coordinates {
            get {
                return this.coordinatesField;
            }
            set {
                this.coordinatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Point3dZValueArray : AbstractPoint3dArray {
        
        private AbstractPoint3dArray supportingGeometryField;
        
        private AbstractDoubleArray zValuesField;
        
        /// <remarks/>
        /// <summary>Geometry defining the X and Y coordinates.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Geometry defining the X and Y coordinates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportingGeometry", DataType="AbstractPoint3dArray")]
        public AbstractPoint3dArray SupportingGeometry {
            get {
                return this.supportingGeometryField;
            }
            set {
                this.supportingGeometryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The values for Z coordinates</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The values for Z coordinates")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ZValues", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray ZValues {
            get {
                return this.zValuesField;
            }
            set {
                this.zValuesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Point3dLatticeArray : AbstractPoint3dArray {
        
        private bool allDimensionsAreOrthogonalField;
        
        private bool allDimensionsAreOrthogonalFieldSpecified;
        
        private Point3d originField;
        
        private Point3dOffset[] offsetField;
        
        /// <remarks/>
        /// <summary>The optional element that indicates that the offset vectors for each direction are mutually orthogonal to each other. This meta-information is useful to remove any doubt of orthogonality in case of numerical precision issues.  BUSINESS RULE: If you don't know it or if only one lattice dimension is given, do not provide this element.</summary>
        [System.ComponentModel.DescriptionAttribute(@"The optional element that indicates that the offset vectors for each direction are mutually orthogonal to each other. This meta-information is useful to remove any doubt of orthogonality in case of numerical precision issues.  BUSINESS RULE: If you don't know it or if only one lattice dimension is given, do not provide this element.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AllDimensionsAreOrthogonal", DataType="boolean")]
        public bool AllDimensionsAreOrthogonal {
            get {
                return this.allDimensionsAreOrthogonalField;
            }
            set {
                this.allDimensionsAreOrthogonalField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AllDimensionsAreOrthogonalSpecified {
            get {
                return this.allDimensionsAreOrthogonalFieldSpecified;
            }
            set {
                this.allDimensionsAreOrthogonalFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The origin location of the lattice given as XYZ coordinates.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The origin location of the lattice given as XYZ coordinates.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Origin", DataType="Point3d")]
        public Point3d Origin {
            get {
                return this.originField;
            }
            set {
                this.originField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Offset")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Offset", DataType="Point3dOffset")]
        public Point3dOffset[] Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Point3d {
        
        private double coordinate1Field;
        
        private double coordinate2Field;
        
        private double coordinate3Field;
        
        /// <remarks/>
        /// <summary>X Coordinate</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("X Coordinate")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coordinate1", DataType="double")]
        public double Coordinate1 {
            get {
                return this.coordinate1Field;
            }
            set {
                this.coordinate1Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Y Coordinate</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Y Coordinate")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coordinate2", DataType="double")]
        public double Coordinate2 {
            get {
                return this.coordinate2Field;
            }
            set {
                this.coordinate2Field = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Either Z or T Coordinate</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Either Z or T Coordinate")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coordinate3", DataType="double")]
        public double Coordinate3 {
            get {
                return this.coordinate3Field;
            }
            set {
                this.coordinate3Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Point3dOffset {
        
        private Point3d offsetField;
        
        private AbstractDoubleArray spacingField;
        
        /// <remarks/>
        /// <summary>The direction of the axis of this lattice dimension. This is a relative offset vector instead of an absolute 3D point.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The direction of the axis of this lattice dimension. This is a relative offset ve" +
            "ctor instead of an absolute 3D point.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Offset", DataType="Point3d")]
        public Point3d Offset {
            get {
                return this.offsetField;
            }
            set {
                this.offsetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A lattice of N offset points is described by a spacing array of size N-1. The offset between points is given by the spacing value multiplied by the offset vector. For example, the first offset is 0. The second offset is the first spacing * offset. The second offset is (first spacing + second spacing) * offset, etc.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"A lattice of N offset points is described by a spacing array of size N-1. The offset between points is given by the spacing value multiplied by the offset vector. For example, the first offset is 0. The second offset is the first spacing * offset. The second offset is (first spacing + second spacing) * offset, etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Spacing", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray Spacing {
            get {
                return this.spacingField;
            }
            set {
                this.spacingField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Point2dHdf5Array : AbstractPoint3dArray {
        
        private Hdf5Dataset coordinatesField;
        
        /// <remarks/>
        /// <summary>Reference to an HDF5 2D dataset of XY points. The 2 coordinates are stored sequentially in HDF5, i.e., a multi-dimensional array of points is stored as a 2 x ... HDF5 array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Reference to an HDF5 2D dataset of XY points. The 2 coordinates are stored sequen" +
            "tially in HDF5, i.e., a multi-dimensional array of points is stored as a 2 x ..." +
            " HDF5 array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coordinates", DataType="Hdf5Dataset")]
        public Hdf5Dataset Coordinates {
            get {
                return this.coordinatesField;
            }
            set {
                this.coordinatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class StringLookup {
        
        private string keyField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>The corresponding integer value. This value is used in HDF5 instead of the string value. The value of null integer value must be reserved for NULL. The size of this value is constrained by the size of the format used in HDF5,</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The corresponding integer value. This value is used in HDF5 instead of the string" +
            " value. The value of null integer value must be reserved for NULL. The size of t" +
            "his value is constrained by the size of the format used in HDF5,")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Key", DataType="integer")]
        public string Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A string value. Output from the lookup table.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A string value. Output from the lookup table.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="string")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class DoubleLookup {
        
        private double keyField;
        
        private double valueField;
        
        /// <remarks/>
        /// <summary>Input to a table lookup.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Input to a table lookup.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Key", DataType="double")]
        public double Key {
            get {
                return this.keyField;
            }
            set {
                this.keyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Output from a table lookup.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Output from a table lookup.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="double")]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalPropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardPropertyKind))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractPropertyKind {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class LocalPropertyKind : AbstractPropertyKind {
        
        private DataObjectReference localPropertyKind1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LocalPropertyKind")]
        public DataObjectReference LocalPropertyKind1 {
            get {
                return this.localPropertyKind1Field;
            }
            set {
                this.localPropertyKind1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class StandardPropertyKind : AbstractPropertyKind {
        
        private ResqmlPropertyKind kindField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Kind", DataType="ResqmlPropertyKind")]
        public ResqmlPropertyKind Kind {
            get {
                return this.kindField;
            }
            set {
                this.kindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ResqmlPropertyKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("absorbed dose")]
        absorbeddose,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acceleration linear")]
        accelerationlinear,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activity (of radioactivity)")]
        activityofradioactivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("amount of substance")]
        amountofsubstance,
        
        /// <remarks/>
        amplitude,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per length")]
        angleperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per time")]
        anglepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angle per volume")]
        anglepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("angular acceleration")]
        angularacceleration,
        
        /// <remarks/>
        area,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per area")]
        areaperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("area per volume")]
        areapervolume,
        
        /// <remarks/>
        attenuation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("attenuation per length")]
        attenuationperlength,
        
        /// <remarks/>
        azimuth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bubble point pressure")]
        bubblepointpressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bulk modulus")]
        bulkmodulus,
        
        /// <remarks/>
        capacitance,
        
        /// <remarks/>
        categorical,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cell length")]
        celllength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("charge density")]
        chargedensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chemical potential")]
        chemicalpotential,
        
        /// <remarks/>
        code,
        
        /// <remarks/>
        compressibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("concentration of B")]
        concentrationofB,
        
        /// <remarks/>
        conductivity,
        
        /// <remarks/>
        continuous,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cross section absorption")]
        crosssectionabsorption,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("current density")]
        currentdensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Darcy flow coefficient")]
        Darcyflowcoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("data transmission speed")]
        datatransmissionspeed,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("delta temperature")]
        deltatemperature,
        
        /// <remarks/>
        density,
        
        /// <remarks/>
        depth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("diffusion coefficient")]
        diffusioncoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("digital storage")]
        digitalstorage,
        
        /// <remarks/>
        dimensionless,
        
        /// <remarks/>
        dip,
        
        /// <remarks/>
        discrete,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dose equivalent")]
        doseequivalent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dose equivalent rate")]
        doseequivalentrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dynamic viscosity")]
        dynamicviscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric charge")]
        electriccharge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric conductance")]
        electricconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric current")]
        electriccurrent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric dipole moment")]
        electricdipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric field strength")]
        electricfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric polarization")]
        electricpolarization,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electric potential")]
        electricpotential,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrical resistivity")]
        electricalresistivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electrochemical equivalent")]
        electrochemicalequivalent,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electromagnetic moment")]
        electromagneticmoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per area")]
        energylengthperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy length per time area temperature")]
        energylengthpertimeareatemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per area")]
        energyperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("energy per length")]
        energyperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("equivalent per mass")]
        equivalentpermass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("equivalent per volume")]
        equivalentpervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("exposure (radioactivity)")]
        exposureradioactivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fluid volume")]
        fluidvolume,
        
        /// <remarks/>
        force,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force area")]
        forcearea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force length per length")]
        forcelengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per force")]
        forceperforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per length")]
        forceperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("force per volume")]
        forcepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("formation volume factor")]
        formationvolumefactor,
        
        /// <remarks/>
        frequency,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("frequency interval")]
        frequencyinterval,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gamma ray API unit")]
        gammarayAPIunit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat capacity")]
        heatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat flow rate")]
        heatflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("heat transfer coefficient")]
        heattransfercoefficient,
        
        /// <remarks/>
        illuminance,
        
        /// <remarks/>
        index,
        
        /// <remarks/>
        irradiance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("isothermal compressibility")]
        isothermalcompressibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kinematic viscosity")]
        kinematicviscosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Lambda Rho")]
        LambdaRho,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Lame constant")]
        Lameconstant,
        
        /// <remarks/>
        length,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per length")]
        lengthperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per temperature")]
        lengthpertemperature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("length per volume")]
        lengthpervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("level of power intensity")]
        levelofpowerintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("light exposure")]
        lightexposure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("linear thermal expansion")]
        linearthermalexpansion,
        
        /// <remarks/>
        luminance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous efficacy")]
        luminousefficacy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous flux")]
        luminousflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("luminous intensity")]
        luminousintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic dipole moment")]
        magneticdipolemoment,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic field strength")]
        magneticfieldstrength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic flux")]
        magneticflux,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic induction")]
        magneticinduction,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic permeability")]
        magneticpermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magnetic vector potential")]
        magneticvectorpotential,
        
        /// <remarks/>
        mass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass attenuation coefficient")]
        massattenuationcoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass concentration")]
        massconcentration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass flow rate")]
        massflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass length")]
        masslength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per energy")]
        massperenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per length")]
        massperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per area")]
        masspertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per time per length")]
        masspertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mass per volume per length")]
        masspervolumeperlength,
        
        /// <remarks/>
        mobility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("modulus of compression")]
        modulusofcompression,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar concentration")]
        molarconcentration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar heat capacity")]
        molarheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("molar volume")]
        molarvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mole per area")]
        moleperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mole per time")]
        molepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mole per time per area")]
        molepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of force")]
        momentofforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of inertia")]
        momentofinertia,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("moment of section")]
        momentofsection,
        
        /// <remarks/>
        momentum,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mu Rho")]
        MuRho,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("net to gross ratio")]
        nettogrossratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("neutron API unit")]
        neutronAPIunit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nonDarcy flow coefficient")]
        nonDarcyflowcoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("operations per time")]
        operationspertime,
        
        /// <remarks/>
        parachor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per area")]
        perarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per electric potential")]
        perelectricpotential,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per force")]
        perforce,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per length")]
        perlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per mass")]
        permass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("per volume")]
        pervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability length")]
        permeabilitylength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability rock")]
        permeabilityrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("permeability thickness")]
        permeabilitythickness,
        
        /// <remarks/>
        permeance,
        
        /// <remarks/>
        permittivity,
        
        /// <remarks/>
        pH,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plane angle")]
        planeangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Poisson ratio")]
        Poissonratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pore volume")]
        porevolume,
        
        /// <remarks/>
        porosity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("potential difference per power drop")]
        potentialdifferenceperpowerdrop,
        
        /// <remarks/>
        power,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("power per volume")]
        powerpervolume,
        
        /// <remarks/>
        pressure,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure per time")]
        pressurepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared")]
        pressuresquared,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure squared per force time per area")]
        pressuresquaredperforcetimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pressure time per volume")]
        pressuretimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("productivity index")]
        productivityindex,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("property multiplier")]
        propertymultiplier,
        
        /// <remarks/>
        quantity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quantity of light")]
        quantityoflight,
        
        /// <remarks/>
        radiance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radiant intensity")]
        radiantintensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative permeability")]
        relativepermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative power")]
        relativepower,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("relative time")]
        relativetime,
        
        /// <remarks/>
        reluctance,
        
        /// <remarks/>
        resistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resistivity per length")]
        resistivityperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("RESQML root property")]
        RESQMLrootproperty,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Rock Impedance")]
        RockImpedance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rock permeability")]
        rockpermeability,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rock volume")]
        rockvolume,
        
        /// <remarks/>
        saturation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("second moment of area")]
        secondmomentofarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("shear modulus")]
        shearmodulus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("solid angle")]
        solidangle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("solution gas-oil ratio")]
        solutiongasoilratio,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific activity (of radioactivity)")]
        specificactivityofradioactivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific energy")]
        specificenergy,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific heat capacity")]
        specificheatcapacity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific productivity index")]
        specificproductivityindex,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("specific volume")]
        specificvolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("surface density")]
        surfacedensity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature per length")]
        temperatureperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("temperature per time")]
        temperaturepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductance")]
        thermalconductance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal conductivity")]
        thermalconductivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal diffusivity")]
        thermaldiffusivity,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal insulance")]
        thermalinsulance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermal resistance")]
        thermalresistance,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("thermodynamic temperature")]
        thermodynamictemperature,
        
        /// <remarks/>
        thickness,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per length")]
        timeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("time per volume")]
        timepervolume,
        
        /// <remarks/>
        transmissibility,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("unit productivity index")]
        unitproductivityindex,
        
        /// <remarks/>
        unitless,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("vapor oil-gas ratio")]
        vaporoilgasratio,
        
        /// <remarks/>
        velocity,
        
        /// <remarks/>
        volume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume flow rate")]
        volumeflowrate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume length per time")]
        volumelengthpertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per area")]
        volumeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per length")]
        volumeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per area")]
        volumepertimeperarea,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per length")]
        volumepertimeperlength,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per time")]
        volumepertimepertime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per time per volume")]
        volumepertimepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volume per volume")]
        volumepervolume,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric heat transfer coefficient")]
        volumetricheattransfercoefficient,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("volumetric thermal expansion")]
        volumetricthermalexpansion,
        
        /// <remarks/>
        work,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Young modulus")]
        Youngmodulus,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class StreamlineWellbores {
        
        private AbstractIntegerArray injectorPerLineField;
        
        private AbstractIntegerArray producerPerLineField;
        
        private DataObjectReference[] wellboreTrajectoryRepresentationField;
        
        /// <remarks/>
        /// <summary>Size of array = LineCount.  Null values of -1 signify that that line does not initiate at a injector, e.g., it may come from fluid expansion or an aquifer.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of array = LineCount.  Null values of -1 signify that that line does not ini" +
            "tiate at a injector, e.g., it may come from fluid expansion or an aquifer.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InjectorPerLine", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray InjectorPerLine {
            get {
                return this.injectorPerLineField;
            }
            set {
                this.injectorPerLineField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of array = LineCount.   Null values of -1 signify that that line does not terminate at a producer, e.g., it may approach a stagnation area.  BUSINESS RULE: The cell count must equal the number of non-null entries in this array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of array = LineCount.   Null values of -1 signify that that line does not te" +
            "rminate at a producer, e.g., it may approach a stagnation area.  BUSINESS RULE: " +
            "The cell count must equal the number of non-null entries in this array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProducerPerLine", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ProducerPerLine {
            get {
                return this.producerPerLineField;
            }
            set {
                this.producerPerLineField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WellboreTrajectoryRepresentation")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreTrajectoryRepresentation", DataType="DataObjectReference")]
        public DataObjectReference[] WellboreTrajectoryRepresentation {
            get {
                return this.wellboreTrajectoryRepresentationField;
            }
            set {
                this.wellboreTrajectoryRepresentationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class PatchBoundaries {
        
        private DataObjectReference[] innerRingField;
        
        private DataObjectReference outerRingField;
        
        private string referencedPatchField;
        
        /// <remarks/>
        /// <summary>A hole inside a representation patch. Inside the ring, the representation patch is not defined, outside it is.  In case of contact, inner ring polyline representations should be typed as an erosion line, deposition line, or contact.  BUSINESS RULE: Must be a polyline reference to a polyline representation, either a single polyline representation or a subrepresentation. Must be closed.</summary>
        [System.Xml.Serialization.XmlElementAttribute("InnerRing")]
        [System.ComponentModel.DescriptionAttribute(@"A hole inside a representation patch. Inside the ring, the representation patch is not defined, outside it is.  In case of contact, inner ring polyline representations should be typed as an erosion line, deposition line, or contact.  BUSINESS RULE: Must be a polyline reference to a polyline representation, either a single polyline representation or a subrepresentation. Must be closed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InnerRing", DataType="DataObjectReference")]
        public DataObjectReference[] InnerRing {
            get {
                return this.innerRingField;
            }
            set {
                this.innerRingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The extension of a representation patch. Inside the ring, the representation patch is defined, outside it is not.  BUSINESS RULE: Must be a reference to a polyline, either a single polyline representation or a subrepresentation. Must be closed.</summary>
        [System.ComponentModel.DescriptionAttribute("The extension of a representation patch. Inside the ring, the representation patc" +
            "h is defined, outside it is not.  BUSINESS RULE: Must be a reference to a polyli" +
            "ne, either a single polyline representation or a subrepresentation. Must be clos" +
            "ed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OuterRing", DataType="DataObjectReference")]
        public DataObjectReference OuterRing {
            get {
                return this.outerRingField;
            }
            set {
                this.outerRingField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>UUID of the referenced topological patch.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("UUID of the referenced topological patch.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ReferencedPatch", DataType="nonNegativeInteger")]
        public string ReferencedPatch {
            get {
                return this.referencedPatchField;
            }
            set {
                this.referencedPatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class WellboreTrajectoryParentIntersection {
        
        private double kickoffMdField;
        
        private double parentMdField;
        
        private DataObjectReference parentTrajectoryField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KickoffMd", DataType="double")]
        public double KickoffMd {
            get {
                return this.kickoffMdField;
            }
            set {
                this.kickoffMdField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentMd", DataType="double")]
        public double ParentMd {
            get {
                return this.parentMdField;
            }
            set {
                this.parentMdField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentTrajectory", DataType="DataObjectReference")]
        public DataObjectReference ParentTrajectory {
            get {
                return this.parentTrajectoryField;
            }
            set {
                this.parentTrajectoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class PatchOfGeometry {
        
        private string representationPatchIndexField;
        
        private AbstractGeometry geometryField;
        
        /// <remarks/>
        /// <summary>Patch index for the geometry attachment, if required</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("Patch index for the geometry attachment, if required")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentationPatchIndex", DataType="nonNegativeInteger")]
        public string RepresentationPatchIndex {
            get {
                return this.representationPatchIndexField;
            }
            set {
                this.representationPatchIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="AbstractGeometry")]
        public AbstractGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractParametricLineGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineFromRepresentationGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractPlaneGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TiltedPlaneGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizontalPlaneGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractGeometry {
        
        private TimeIndex timeIndexField;
        
        private DataObjectReference localCrsField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalCrs", DataType="DataObjectReference")]
        public DataObjectReference LocalCrs {
            get {
                return this.localCrsField;
            }
            set {
                this.localCrsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineFromRepresentationGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractParametricLineGeometry : AbstractGeometry {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ParametricLineFromRepresentationGeometry : AbstractParametricLineGeometry {
        
        private string lineIndiexOnSupportingRepresentationField;
        
        private DataObjectReference supportingRepresentationField;
        
        /// <remarks/>
        /// <summary>The line index of the selected line in the supporting representation.  For a column-layer grid, the parametric lines follow the indexing of the pillars.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The line index of the selected line in the supporting representation.  For a colu" +
            "mn-layer grid, the parametric lines follow the indexing of the pillars.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineIndiexOnSupportingRepresentation", DataType="nonNegativeInteger")]
        public string LineIndiexOnSupportingRepresentation {
            get {
                return this.lineIndiexOnSupportingRepresentationField;
            }
            set {
                this.lineIndiexOnSupportingRepresentationField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportingRepresentation", DataType="DataObjectReference")]
        public DataObjectReference SupportingRepresentation {
            get {
                return this.supportingRepresentationField;
            }
            set {
                this.supportingRepresentationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ParametricLineGeometry : AbstractParametricLineGeometry {
        
        private AbstractDoubleArray controlPointParametersField;
        
        private AbstractPoint3dArray controlPointsField;
        
        private string knotCountField;
        
        private string lineKindIndexField;
        
        private AbstractPoint3dArray tangentVectorsField;
        
        /// <remarks/>
        /// <summary>An optional array of explicit control point parameters for the control points on the parametric line. Used only if control point parameters are present.  NOTES: (1) Vertical parametric lines do not require control point parameters. (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: If present, the size must match the number of control points.  BUSINESS RULE: For vertical and Z linear cubic parametric lines, this count must be zero. For all other parametric line kinds, each control point must have one control point parameter.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line. This is an optional array which should only be used if control point parameters are present.  BUSINESS RILE: If present, the size must match the number of control points.  BUSINESS RULE: This count should be zero for vertical and Z linear cubic parametric lines. For all other parametric line kinds there should be one control point parameter for each control point.  Notes: (1) Vertical parametric lines do not require control point parameters (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line.</summary>
        [System.ComponentModel.DescriptionAttribute(@"An optional array of explicit control point parameters for the control points on the parametric line. Used only if control point parameters are present.  NOTES: (1) Vertical parametric lines do not require control point parameters. (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: If present, the size must match the number of control points.  BUSINESS RULE: For vertical and Z linear cubic parametric lines, this count must be zero. For all other parametric line kinds, each control point must have one control point parameter.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line. This is an optional array which should only be used if control point parameters are present.  BUSINESS RILE: If present, the size must match the number of control points.  BUSINESS RULE: This count should be zero for vertical and Z linear cubic parametric lines. For all other parametric line kinds there should be one control point parameter for each control point.  Notes: (1) Vertical parametric lines do not require control point parameters (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ControlPointParameters", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray ControlPointParameters {
            get {
                return this.controlPointParametersField;
            }
            set {
                this.controlPointParametersField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An array of 3D points for the control points on the parametric line.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An array of 3D points for the control points on the parametric line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ControlPoints", DataType="AbstractPoint3dArray")]
        public AbstractPoint3dArray ControlPoints {
            get {
                return this.controlPointsField;
            }
            set {
                this.controlPointsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of spline knots in the parametric line.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of spline knots in the parametric line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KnotCount", DataType="positiveInteger")]
        public string KnotCount {
            get {
                return this.knotCountField;
            }
            set {
                this.knotCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Integer indicating the parametric line kind  0 for vertical 1 for linear spline 2 for natural cubic spline 3 for cubic spline 4 for z linear cubic spline 5 for minimum-curvature spline (-1) for null: no line</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Integer indicating the parametric line kind  0 for vertical 1 for linear spline 2" +
            " for natural cubic spline 3 for cubic spline 4 for z linear cubic spline 5 for m" +
            "inimum-curvature spline (-1) for null: no line")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineKindIndex", DataType="integer")]
        public string LineKindIndex {
            get {
                return this.lineKindIndexField;
            }
            set {
                this.lineKindIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An optional array of tangent vectors for each control point on the cubic and minimum-curvature parametric lines. Used only if tangent vectors are present.  If a tangent vector is missing, then it is computed in the same fashion as for a natural cubic spline. Specifically, to obtain the tangent at internal knots, the control points are fit by a quadratic function with the two adjacent control points. At edge knots, the second derivative vanishes.</summary>
        [System.ComponentModel.DescriptionAttribute(@"An optional array of tangent vectors for each control point on the cubic and minimum-curvature parametric lines. Used only if tangent vectors are present.  If a tangent vector is missing, then it is computed in the same fashion as for a natural cubic spline. Specifically, to obtain the tangent at internal knots, the control points are fit by a quadratic function with the two adjacent control points. At edge knots, the second derivative vanishes.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TangentVectors", DataType="AbstractPoint3dArray")]
        public AbstractPoint3dArray TangentVectors {
            get {
                return this.tangentVectorsField;
            }
            set {
                this.tangentVectorsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TiltedPlaneGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizontalPlaneGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractPlaneGeometry : AbstractGeometry {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TiltedPlaneGeometry : AbstractPlaneGeometry {
        
        private Point3d[][] planeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute(typeof(Point3d), IsNullable=false)]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Plane", DataType="ThreePoint3d")]
        public Point3d[][] Plane {
            get {
                return this.planeField;
            }
            set {
                this.planeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class HorizontalPlaneGeometry : AbstractPlaneGeometry {
        
        private double coordinateField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Coordinate", DataType="double")]
        public double Coordinate {
            get {
                return this.coordinateField;
            }
            set {
                this.coordinateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class PointGeometry : AbstractGeometry {
        
        private AbstractPoint3dArray pointsField;
        
        private AbstractSeismicCoordinates seismicCoordinatesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Points", DataType="AbstractPoint3dArray")]
        public AbstractPoint3dArray Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeismicCoordinates", DataType="AbstractSeismicCoordinates")]
        public AbstractSeismicCoordinates SeismicCoordinates {
            get {
                return this.seismicCoordinatesField;
            }
            set {
                this.seismicCoordinatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Seismic2dCoordinates))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Seismic3dCoordinates))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractSeismicCoordinates {
        
        private DataObjectReference seismicSupportField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeismicSupport", DataType="DataObjectReference")]
        public DataObjectReference SeismicSupport {
            get {
                return this.seismicSupportField;
            }
            set {
                this.seismicSupportField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Seismic2dCoordinates : AbstractSeismicCoordinates {
        
        private AbstractDoubleArray lineAbscissaField;
        
        private AbstractDoubleArray verticalCoordinatesField;
        
        /// <remarks/>
        /// <summary>The sequence of trace or inter-trace positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The sequence of trace or inter-trace positions that correspond to the geometry co" +
            "ordinates. BUSINESS RULE: Both sequences must be in the same order.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineAbscissa", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray LineAbscissa {
            get {
                return this.lineAbscissaField;
            }
            set {
                this.lineAbscissaField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sequence of vertical sample or inter-sample positions that correspond to the geometry coordinates. BUSINESS RULE: Sequence must be in the same order than previous one.</summary>
        [System.ComponentModel.DescriptionAttribute("The sequence of vertical sample or inter-sample positions that correspond to the " +
            "geometry coordinates. BUSINESS RULE: Sequence must be in the same order than pre" +
            "vious one.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VerticalCoordinates", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray VerticalCoordinates {
            get {
                return this.verticalCoordinatesField;
            }
            set {
                this.verticalCoordinatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Seismic3dCoordinates : AbstractSeismicCoordinates {
        
        private AbstractDoubleArray crosslineCoordinatesField;
        
        private AbstractDoubleArray inlineCoordinatesField;
        
        private AbstractDoubleArray verticalCoordinatesField;
        
        /// <remarks/>
        /// <summary>The sequence of trace or inter-trace crossline positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The sequence of trace or inter-trace crossline positions that correspond to the g" +
            "eometry coordinates. BUSINESS RULE: Both sequences must be in the same order.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CrosslineCoordinates", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray CrosslineCoordinates {
            get {
                return this.crosslineCoordinatesField;
            }
            set {
                this.crosslineCoordinatesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sequence of trace or inter-trace inline positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The sequence of trace or inter-trace inline positions that correspond to the geom" +
            "etry coordinates. BUSINESS RULE: Both sequences must be in the same order.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InlineCoordinates", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray InlineCoordinates {
            get {
                return this.inlineCoordinatesField;
            }
            set {
                this.inlineCoordinatesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The sequence of vertical sample or inter-sample positions that correspond to the geometry coordinates. BUSINESS RULE: Sequence must be in the same order than two previous ones.</summary>
        [System.ComponentModel.DescriptionAttribute("The sequence of vertical sample or inter-sample positions that correspond to the " +
            "geometry coordinates. BUSINESS RULE: Sequence must be in the same order than two" +
            " previous ones.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VerticalCoordinates", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray VerticalCoordinates {
            get {
                return this.verticalCoordinatesField;
            }
            set {
                this.verticalCoordinatesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractGridGeometry : PointGeometry {
        
        private AdditionalGridPoints[] additionalGridPointsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("AdditionalGridPoints")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AdditionalGridPoints", DataType="AdditionalGridPoints")]
        public AdditionalGridPoints[] AdditionalGridPoints {
            get {
                return this.additionalGridPointsField;
            }
            set {
                this.additionalGridPointsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class AdditionalGridPoints {
        
        private string representationPatchIndexField;
        
        private GridGeometryAttachment attachmentField;
        
        private AbstractPoint3dArray pointsField;
        
        /// <remarks/>
        /// <summary>Used to remove ambiguity in geometry attachment, if the attachment element is not sufficient. Usually required for subnodes and for the general purpose grid, but not otherwise.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("Used to remove ambiguity in geometry attachment, if the attachment element is not" +
            " sufficient. Usually required for subnodes and for the general purpose grid, but" +
            " not otherwise.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentationPatchIndex", DataType="nonNegativeInteger")]
        public string RepresentationPatchIndex {
            get {
                return this.representationPatchIndexField;
            }
            set {
                this.representationPatchIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Attachment", DataType="GridGeometryAttachment")]
        public GridGeometryAttachment Attachment {
            get {
                return this.attachmentField;
            }
            set {
                this.attachmentField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Points", DataType="AbstractPoint3dArray")]
        public AbstractPoint3dArray Points {
            get {
                return this.pointsField;
            }
            set {
                this.pointsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum GridGeometryAttachment {
        
        /// <remarks/>
        cells,
        
        /// <remarks/>
        edges,
        
        /// <remarks/>
        faces,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hinge node faces")]
        hingenodefaces,
        
        /// <remarks/>
        nodes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radial origin polyline")]
        radialoriginpolyline,
        
        /// <remarks/>
        subnodes,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractColumnLayerGridGeometry : AbstractGridGeometry {
        
        private KDirection kDirectionField;
        
        private AbstractBooleanArray pillarGeometryIsDefinedField;
        
        private PillarShape pillarShapeField;
        
        private AbstractBooleanArray cellGeometryIsDefinedField;
        
        private AbstractBooleanArray nodeIsColocatedInKDirectionField;
        
        private AbstractBooleanArray nodeIsColocatedOnKEdgeField;
        
        private ColumnLayerSubnodeTopology subnodeTopologyField;
        
        private ColumnLayerSplitCoordinateLines splitCoordinateLinesField;
        
        private SplitNodePatch splitNodesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KDirection", DataType="KDirection")]
        public KDirection KDirection {
            get {
                return this.kDirectionField;
            }
            set {
                this.kDirectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicator that a pillar has at least one node with a defined cell geometry. This is considered grid meta-data. If the indicator does not indicate that the pillar geometry is defined, then this over-rides any other node geometry specification.  Array index follows #Pillars and so may be either 2d or 1d.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Indicator that a pillar has at least one node with a defined cell geometry. This is considered grid meta-data. If the indicator does not indicate that the pillar geometry is defined, then this over-rides any other node geometry specification.  Array index follows #Pillars and so may be either 2d or 1d.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PillarGeometryIsDefined", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray PillarGeometryIsDefined {
            get {
                return this.pillarGeometryIsDefinedField;
            }
            set {
                this.pillarGeometryIsDefinedField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PillarShape", DataType="PillarShape")]
        public PillarShape PillarShape {
            get {
                return this.pillarShapeField;
            }
            set {
                this.pillarShapeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicator that a cell has a defined geometry. This attribute is grid metadata. If the indicator shows that the cell geometry is NOT defined, then this attribute overrides any other node geometry specification.  Array index is 2D/3D.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicator that a cell has a defined geometry. This attribute is grid metadata. If" +
            " the indicator shows that the cell geometry is NOT defined, then this attribute " +
            "overrides any other node geometry specification.  Array index is 2D/3D.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellGeometryIsDefined", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray CellGeometryIsDefined {
            get {
                return this.cellGeometryIsDefinedField;
            }
            set {
                this.cellGeometryIsDefinedField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Optional indicator that two adjacent nodes on a coordinate line are colocated. This is considered grid meta-data, and is intended to over-ride any geometric comparison of node locations.  Array index follows #CoordinateLines x (NKL-1).</summary>
        [System.ComponentModel.DescriptionAttribute("Optional indicator that two adjacent nodes on a coordinate line are colocated. Th" +
            "is is considered grid meta-data, and is intended to over-ride any geometric comp" +
            "arison of node locations.  Array index follows #CoordinateLines x (NKL-1).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeIsColocatedInKDirection", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray NodeIsColocatedInKDirection {
            get {
                return this.nodeIsColocatedInKDirectionField;
            }
            set {
                this.nodeIsColocatedInKDirectionField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Optional indicator that two adjacent nodes on the KEDGE of a cell are colocated. This is considered grid meta-data, and is intended to over-ride any geometric comparison of node locations.  Array index follows #EdgesPerColumn x NKL for unstructured column layer grids and 4 x NI x NJ x NKL for IJK grids.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Optional indicator that two adjacent nodes on the KEDGE of a cell are colocated. This is considered grid meta-data, and is intended to over-ride any geometric comparison of node locations.  Array index follows #EdgesPerColumn x NKL for unstructured column layer grids and 4 x NI x NJ x NKL for IJK grids.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeIsColocatedOnKEdge", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray NodeIsColocatedOnKEdge {
            get {
                return this.nodeIsColocatedOnKEdgeField;
            }
            set {
                this.nodeIsColocatedOnKEdgeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubnodeTopology", DataType="ColumnLayerSubnodeTopology")]
        public ColumnLayerSubnodeTopology SubnodeTopology {
            get {
                return this.subnodeTopologyField;
            }
            set {
                this.subnodeTopologyField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitCoordinateLines", DataType="ColumnLayerSplitCoordinateLines")]
        public ColumnLayerSplitCoordinateLines SplitCoordinateLines {
            get {
                return this.splitCoordinateLinesField;
            }
            set {
                this.splitCoordinateLinesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitNodes", DataType="SplitNodePatch")]
        public SplitNodePatch SplitNodes {
            get {
                return this.splitNodesField;
            }
            set {
                this.splitNodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum KDirection {
        
        /// <remarks/>
        down,
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not monotonic")]
        notmonotonic,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum PillarShape {
        
        /// <remarks/>
        vertical,
        
        /// <remarks/>
        straight,
        
        /// <remarks/>
        curved,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ColumnLayerSubnodeTopology : SubnodeTopology {
        
        private ColumnSubnodePatch[] columnSubnodesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ColumnSubnodes")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnSubnodes", DataType="ColumnSubnodePatch")]
        public ColumnSubnodePatch[] ColumnSubnodes {
            get {
                return this.columnSubnodesField;
            }
            set {
                this.columnSubnodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ColumnSubnodePatch : SubnodePatch {
        
        private AbstractIntegerArray subnodeCountPerObjectField;
        
        /// <remarks/>
        /// <summary>Number of subnodes per object, with a different number in each column of the grid.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of subnodes per object, with a different number in each column of the grid" +
            ".")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubnodeCountPerObject", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray SubnodeCountPerObject {
            get {
                return this.subnodeCountPerObjectField;
            }
            set {
                this.subnodeCountPerObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VariableSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UniformSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ColumnSubnodePatch))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class SubnodePatch : Patch {
        
        private SubnodeNodeObject subnodeNodeObjectField;
        
        private AbstractValueArray nodeWeightsPerSubnodeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubnodeNodeObject", DataType="SubnodeNodeObject")]
        public SubnodeNodeObject SubnodeNodeObject {
            get {
                return this.subnodeNodeObjectField;
            }
            set {
                this.subnodeNodeObjectField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Node weights for each subnode. Count of nodes per subnode is known for each specific subnode construction.  Data order consists of all the nodes for each subnode in turn. For example, if uniform and stored as a multi-dimensional array, the node index cycles first.  BUSINESS RULE: Weights must be non-negative.  BUSINESS RULE: Length of array must be consistent with the sum of nodeCount x subnodeCount per object, e.g., for 3 subnodes per edge (uniform), there are 6 weights.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Node weights for each subnode. Count of nodes per subnode is known for each specific subnode construction.  Data order consists of all the nodes for each subnode in turn. For example, if uniform and stored as a multi-dimensional array, the node index cycles first.  BUSINESS RULE: Weights must be non-negative.  BUSINESS RULE: Length of array must be consistent with the sum of nodeCount x subnodeCount per object, e.g., for 3 subnodes per edge (uniform), there are 6 weights.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeWeightsPerSubnode", DataType="AbstractValueArray")]
        public AbstractValueArray NodeWeightsPerSubnode {
            get {
                return this.nodeWeightsPerSubnodeField;
            }
            set {
                this.nodeWeightsPerSubnodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum SubnodeNodeObject {
        
        /// <remarks/>
        cell,
        
        /// <remarks/>
        face,
        
        /// <remarks/>
        edge,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StreamlinePolylineSetPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineSetPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Patch1d))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TrianglePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EdgePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubRepresentationPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridIjkGridPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridUnstructuredGridPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncationCellPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VariableSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UniformSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ColumnSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridUnstructuredColumnLayerGridPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SplitNodePatch))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Patch {
        
        private string patchIndexField;
        
        /// <remarks/>
        /// <summary>Local index of the patch, making it unique within the representation.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Local index of the patch, making it unique within the representation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PatchIndex", DataType="nonNegativeInteger")]
        public string PatchIndex {
            get {
                return this.patchIndexField;
            }
            set {
                this.patchIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class StreamlinePolylineSetPatch : Patch {
        
        private string nodeCountField;
        
        private string intervalCountField;
        
        private AbstractBooleanArray closedPolylinesField;
        
        private AbstractIntegerArray nodeCountPerPolylineField;
        
        private IntervalGridCells intervalGridCellsField;
        
        /// <remarks/>
        /// <summary>Total number of nodes.  BUSINESS RULE: Should be equal to the sum of the number of nodes per polyline</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Total number of nodes.  BUSINESS RULE: Should be equal to the sum of the number o" +
            "f nodes per polyline")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeCount", DataType="positiveInteger")]
        public string NodeCount {
            get {
                return this.nodeCountField;
            }
            set {
                this.nodeCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total number of intervals.  BUSINESS RULE: Should be equal to the sum of the count of intervals per polyline.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Total number of intervals.  BUSINESS RULE: Should be equal to the sum of the coun" +
            "t of intervals per polyline.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IntervalCount", DataType="positiveInteger")]
        public string IntervalCount {
            get {
                return this.intervalCountField;
            }
            set {
                this.intervalCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates whether a polyline is closed.  If closed, then the interval count for that polyline is equal to the node count.  If open, then the interval count for that polyline is one less than the node count.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates whether a polyline is closed.  If closed, then the interval count for t" +
            "hat polyline is equal to the node count.  If open, then the interval count for t" +
            "hat polyline is one less than the node count.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClosedPolylines", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray ClosedPolylines {
            get {
                return this.closedPolylinesField;
            }
            set {
                this.closedPolylinesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The first number in the list defines the node count for the first polyline in the polyline set patch. The second number in the list defines the node count for the second polyline in the polyline set patch. etc.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The first number in the list defines the node count for the first polyline in the" +
            " polyline set patch. The second number in the list defines the node count for th" +
            "e second polyline in the polyline set patch. etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeCountPerPolyline", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray NodeCountPerPolyline {
            get {
                return this.nodeCountPerPolylineField;
            }
            set {
                this.nodeCountPerPolylineField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IntervalGridCells", DataType="IntervalGridCells")]
        public IntervalGridCells IntervalGridCells {
            get {
                return this.intervalGridCellsField;
            }
            set {
                this.intervalGridCellsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IntervalGridCells {
        
        private string cellCountField;
        
        private AbstractIntegerArray gridIndicesField;
        
        private AbstractIntegerArray cellIndicesField;
        
        private AbstractIntegerArray localFacePairPerCellIndicesField;
        
        private DataObjectReference[] gridsField;
        
        /// <remarks/>
        /// <summary>The number of non-null entries in the grid indices array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of non-null entries in the grid indices array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellCount", DataType="positiveInteger")]
        public string CellCount {
            get {
                return this.cellCountField;
            }
            set {
                this.cellCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of array = IntervalCount.  Null values of -1 signify that that interval is not within a grid.  BUSINESS RULE: The cell count must equal the number of non-null entries in this array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of array = IntervalCount.  Null values of -1 signify that that interval is n" +
            "ot within a grid.  BUSINESS RULE: The cell count must equal the number of non-nu" +
            "ll entries in this array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GridIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray GridIndices {
            get {
                return this.gridIndicesField;
            }
            set {
                this.gridIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The cell index for each interval of a representation. The grid index is specified by grid index array, to give the (Grid,Cell) index pair.  BUSINESS RULE: Array length must equal cell count.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The cell index for each interval of a representation. The grid index is specified" +
            " by grid index array, to give the (Grid,Cell) index pair.  BUSINESS RULE: Array " +
            "length must equal cell count.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray CellIndices {
            get {
                return this.cellIndicesField;
            }
            set {
                this.cellIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For each cell, these are the entry and exit intersection faces of the trajectory in the cell. Use null (-1) for missing intersections, e.g., when a trajectory originates or terminates within a cell. The local face-per-cell index is used because a global face index need not have been defined on the grid.  BUSINESS RULE: The array dimensions must equal 2 x CellCount.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"For each cell, these are the entry and exit intersection faces of the trajectory in the cell. Use null (-1) for missing intersections, e.g., when a trajectory originates or terminates within a cell. The local face-per-cell index is used because a global face index need not have been defined on the grid.  BUSINESS RULE: The array dimensions must equal 2 x CellCount.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalFacePairPerCellIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray LocalFacePairPerCellIndices {
            get {
                return this.localFacePairPerCellIndicesField;
            }
            set {
                this.localFacePairPerCellIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Grids")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Grids", DataType="DataObjectReference")]
        public DataObjectReference[] Grids {
            get {
                return this.gridsField;
            }
            set {
                this.gridsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class PolylineSetPatch : Patch {
        
        private AbstractBooleanArray closedPolylinesField;
        
        private AbstractIntegerArray nodeCountPerPolylineField;
        
        private PointGeometry geometryField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ClosedPolylines", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray ClosedPolylines {
            get {
                return this.closedPolylinesField;
            }
            set {
                this.closedPolylinesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The first number in the list defines the node count for the first polyline in the polyline set patch. The second number in the list defines the node count for the second polyline in the polyline set patch. etc.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The first number in the list defines the node count for the first polyline in the" +
            " polyline set patch. The second number in the list defines the node count for th" +
            "e second polyline in the polyline set patch. etc.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeCountPerPolyline", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray NodeCountPerPolyline {
            get {
                return this.nodeCountPerPolylineField;
            }
            set {
                this.nodeCountPerPolylineField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="PointGeometry")]
        public PointGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Grid2dPatch : Patch {
        
        private string fastestAxisCountField;
        
        private string slowestAxisCountField;
        
        private PointGeometry geometryField;
        
        /// <remarks/>
        /// <summary>The number of nodes in the fastest direction.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of nodes in the fastest direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FastestAxisCount", DataType="positiveInteger")]
        public string FastestAxisCount {
            get {
                return this.fastestAxisCountField;
            }
            set {
                this.fastestAxisCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of nodes in the slowest direction.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of nodes in the slowest direction.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SlowestAxisCount", DataType="positiveInteger")]
        public string SlowestAxisCount {
            get {
                return this.slowestAxisCountField;
            }
            set {
                this.slowestAxisCountField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="PointGeometry")]
        public PointGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TrianglePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EdgePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubRepresentationPatch))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Patch1d : Patch {
        
        private string countField;
        
        /// <remarks/>
        /// <summary>Number of items in the patch.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of items in the patch.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TrianglePatch : Patch1d {
        
        private string nodeCountField;
        
        private AbstractIntegerArray trianglesField;
        
        private PointGeometry geometryField;
        
        private EdgePatch[] splitEdgePatchField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeCount", DataType="nonNegativeInteger")]
        public string NodeCount {
            get {
                return this.nodeCountField;
            }
            set {
                this.nodeCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The triangles are a 2D array of non-negative integers with the   dimensions 3 x numTriangles.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The triangles are a 2D array of non-negative integers with the   dimensions 3 x n" +
            "umTriangles.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Triangles", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray Triangles {
            get {
                return this.trianglesField;
            }
            set {
                this.trianglesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="PointGeometry")]
        public PointGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SplitEdgePatch")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitEdgePatch", DataType="EdgePatch")]
        public EdgePatch[] SplitEdgePatch {
            get {
                return this.splitEdgePatchField;
            }
            set {
                this.splitEdgePatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class EdgePatch : Patch1d {
        
        private AbstractIntegerArray splitEdgesField;
        
        /// <remarks/>
        /// <summary>An array of split edges to define patches. It points to an HDF5 dataset, which must be a 2D array of non-negative integers with dimensions 2 x numSplitEdges. integers with dimensions {2, numSplitEdges}</summary>
        [System.ComponentModel.DescriptionAttribute("An array of split edges to define patches. It points to an HDF5 dataset, which mu" +
            "st be a 2D array of non-negative integers with dimensions 2 x numSplitEdges. int" +
            "egers with dimensions {2, numSplitEdges}")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitEdges", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray SplitEdges {
            get {
                return this.splitEdgesField;
            }
            set {
                this.splitEdgesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class NodePatch : Patch1d {
        
        private PointGeometry geometryField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="PointGeometry")]
        public PointGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ContactPatch : Patch1d {
        
        private string representationIndexField;
        
        private AbstractIntegerArray supportingRepresentationNodesField;
        
        /// <remarks/>
        /// <summary>Identifies a representation by its index, in the list of representations contained in the organization.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Identifies a representation by its index, in the list of representations containe" +
            "d in the organization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentationIndex", DataType="nonNegativeInteger")]
        public string RepresentationIndex {
            get {
                return this.representationIndexField;
            }
            set {
                this.representationIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The ordered list of nodes (identified by their global index) in the supporting representation, which constitutes the contact patch.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The ordered list of nodes (identified by their global index) in the supporting re" +
            "presentation, which constitutes the contact patch.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportingRepresentationNodes", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray SupportingRepresentationNodes {
            get {
                return this.supportingRepresentationNodesField;
            }
            set {
                this.supportingRepresentationNodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class SubRepresentationPatch : Patch1d {
        
        private ElementIndices[] elementIndicesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ElementIndices")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ElementIndices", DataType="ElementIndices")]
        public ElementIndices[] ElementIndices {
            get {
                return this.elementIndicesField;
            }
            set {
                this.elementIndicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ElementIndices {
        
        private IndexableElements indexableElementField;
        
        private AbstractIntegerArray indicesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexableElement", DataType="IndexableElements")]
        public IndexableElements IndexableElement {
            get {
                return this.indexableElementField;
            }
            set {
                this.indexableElementField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Indices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray Indices {
            get {
                return this.indicesField;
            }
            set {
                this.indicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum IndexableElements {
        
        /// <remarks/>
        cells,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("column edges")]
        columnedges,
        
        /// <remarks/>
        columns,
        
        /// <remarks/>
        contacts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coordinate lines")]
        coordinatelines,
        
        /// <remarks/>
        edges,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("edges per column")]
        edgespercolumn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("enumerated elements")]
        enumeratedelements,
        
        /// <remarks/>
        faces,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("faces per cell")]
        facespercell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("interval edges")]
        intervaledges,
        
        /// <remarks/>
        intervals,
        
        /// <remarks/>
        I0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("I0 edges")]
        I0edges,
        
        /// <remarks/>
        J0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J0 edges")]
        J0edges,
        
        /// <remarks/>
        layers,
        
        /// <remarks/>
        nodes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per cell")]
        nodespercell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per edge")]
        nodesperedge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per face")]
        nodesperface,
        
        /// <remarks/>
        patches,
        
        /// <remarks/>
        pillars,
        
        /// <remarks/>
        regions,
        
        /// <remarks/>
        representation,
        
        /// <remarks/>
        subnodes,
        
        /// <remarks/>
        triangles,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class GpGridIjkGridPatch : Patch {
        
        private string niField;
        
        private string njField;
        
        private bool radialGridIsCompleteField;
        
        private bool radialGridIsCompleteFieldSpecified;
        
        private IjkGridGeometry geometryField;
        
        private TruncationCellPatch truncationCellsField;
        
        /// <remarks/>
        /// <summary>Count of I indices. Degenerate case (ni=0) is allowed for GPGrid representations.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Count of I indices. Degenerate case (ni=0) is allowed for GPGrid representations." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ni", DataType="nonNegativeInteger")]
        public string Ni {
            get {
                return this.niField;
            }
            set {
                this.niField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Count of J indices. Degenerate case (nj=0) is allowed for GPGrid representations.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Count of J indices. Degenerate case (nj=0) is allowed for GPGrid representations." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nj", DataType="nonNegativeInteger")]
        public string Nj {
            get {
                return this.njField;
            }
            set {
                this.njField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>TRUE if the grid is periodic in J, i.e., has the topology of a complete 360 degree circle.  If TRUE, then NJL=NJ. Otherwise, NJL=NJ+1</summary>
        [System.ComponentModel.DescriptionAttribute("TRUE if the grid is periodic in J, i.e., has the topology of a complete 360 degre" +
            "e circle.  If TRUE, then NJL=NJ. Otherwise, NJL=NJ+1")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RadialGridIsComplete", DataType="boolean")]
        public bool RadialGridIsComplete {
            get {
                return this.radialGridIsCompleteField;
            }
            set {
                this.radialGridIsCompleteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RadialGridIsCompleteSpecified {
            get {
                return this.radialGridIsCompleteFieldSpecified;
            }
            set {
                this.radialGridIsCompleteFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="IjkGridGeometry")]
        public IjkGridGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncationCells", DataType="TruncationCellPatch")]
        public TruncationCellPatch TruncationCells {
            get {
                return this.truncationCellsField;
            }
            set {
                this.truncationCellsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IjkGridGeometry : AbstractColumnLayerGridGeometry {
        
        private bool gridIsRighthandedField;
        
        private IjGaps ijGapsField;
        
        /// <remarks/>
        /// <summary>Indicates that the IJK grid is right handed, as determined by the triple product of tangent vectors in the I, J, and K directions.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates that the IJK grid is right handed, as determined by the triple product " +
            "of tangent vectors in the I, J, and K directions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GridIsRighthanded", DataType="boolean")]
        public bool GridIsRighthanded {
            get {
                return this.gridIsRighthandedField;
            }
            set {
                this.gridIsRighthandedField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IjGaps", DataType="IjGaps")]
        public IjGaps IjGaps {
            get {
                return this.ijGapsField;
            }
            set {
                this.ijGapsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IjGaps {
        
        private string splitPillarCountField;
        
        private AbstractIntegerArray parentPillarIndicesField;
        
        private ResqmlJaggedArray columnsPerSplitPillarField;
        
        private IjSplitColumnEdges ijSplitColumnEdgesField;
        
        /// <remarks/>
        /// <summary>Number of split pillars in the model. Count must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DescriptionAttribute("Number of split pillars in the model. Count must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitPillarCount", DataType="positiveInteger")]
        public string SplitPillarCount {
            get {
                return this.splitPillarCountField;
            }
            set {
                this.splitPillarCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Parent pillar index for each of the split pillars. This information is used to infer the grid cell geometry.  BUSINESS RULE: Array length must match splitPillarCount.</summary>
        [System.ComponentModel.DescriptionAttribute("Parent pillar index for each of the split pillars. This information is used to in" +
            "fer the grid cell geometry.  BUSINESS RULE: Array length must match splitPillarC" +
            "ount.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentPillarIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParentPillarIndices {
            get {
                return this.parentPillarIndicesField;
            }
            set {
                this.parentPillarIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>List of columns for each of the split pillars. This information is used to infer the grid cell geometry.  BUSINESS RULE: The length of the first list-of-lists array must match the splitPillarCount.</summary>
        [System.ComponentModel.DescriptionAttribute("List of columns for each of the split pillars. This information is used to infer " +
            "the grid cell geometry.  BUSINESS RULE: The length of the first list-of-lists ar" +
            "ray must match the splitPillarCount.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnsPerSplitPillar", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray ColumnsPerSplitPillar {
            get {
                return this.columnsPerSplitPillarField;
            }
            set {
                this.columnsPerSplitPillarField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IjSplitColumnEdges", DataType="IjSplitColumnEdges")]
        public IjSplitColumnEdges IjSplitColumnEdges {
            get {
                return this.ijSplitColumnEdgesField;
            }
            set {
                this.ijSplitColumnEdgesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ResqmlJaggedArray {
        
        private AbstractValueArray elementsField;
        
        private AbstractIntegerArray cumulativeLengthField;
        
        /// <remarks/>
        /// <summary>1D array of elements containing the aggregation of individual array data.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("1D array of elements containing the aggregation of individual array data.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Elements", DataType="AbstractValueArray")]
        public AbstractValueArray Elements {
            get {
                return this.elementsField;
            }
            set {
                this.elementsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>1D array of cumulative lengths to the end of the current array. This is also equal to the index of the next element, i.e., the index in the elements array, for which the current variable length array begins.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("1D array of cumulative lengths to the end of the current array. This is also equa" +
            "l to the index of the next element, i.e., the index in the elements array, for w" +
            "hich the current variable length array begins.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CumulativeLength", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray CumulativeLength {
            get {
                return this.cumulativeLengthField;
            }
            set {
                this.cumulativeLengthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IjSplitColumnEdges {
        
        private string countField;
        
        private ResqmlJaggedArray pillarsPerSplitColumnEdgeField;
        
        /// <remarks/>
        /// <summary>Number of IJ split column edges in this grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of IJ split column edges in this grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Definition of the split column edges in terms of the pillars per split column edge. Pillar count per edge is usually 2, but the list-of-lists construction is used to allow split column edges to be defined by more than 2 pillars.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Definition of the split column edges in terms of the pillars per split column edg" +
            "e. Pillar count per edge is usually 2, but the list-of-lists construction is use" +
            "d to allow split column edges to be defined by more than 2 pillars.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PillarsPerSplitColumnEdge", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray PillarsPerSplitColumnEdge {
            get {
                return this.pillarsPerSplitColumnEdgeField;
            }
            set {
                this.pillarsPerSplitColumnEdgeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TruncationCellPatch : Patch {
        
        private string truncationNodeCountField;
        
        private string truncationFaceCountField;
        
        private string truncationCellCountField;
        
        private ResqmlJaggedArray nodesPerTruncationFaceField;
        
        private AbstractIntegerArray parentCellIndicesField;
        
        private ResqmlJaggedArray localFacesPerCellField;
        
        private ResqmlJaggedArray truncationFacesPerCellField;
        
        private AbstractBooleanArray truncationCellFaceIsRightHandedField;
        
        /// <remarks/>
        /// <summary>Number of additional nodes required for the truncation construction. Must be positive. Uses a separate enumeration and does not increase the number of nodes, except as noted below.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of additional nodes required for the truncation construction. Must be posi" +
            "tive. Uses a separate enumeration and does not increase the number of nodes, exc" +
            "ept as noted below.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncationNodeCount", DataType="positiveInteger")]
        public string TruncationNodeCount {
            get {
                return this.truncationNodeCountField;
            }
            set {
                this.truncationNodeCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of additional faces required for the split and truncation construction. The construction does not modify existing face definitions, but instead uses these new faces to redefine the truncated cell geometry. Must be positive.  These faces are added to the enumeration of faces for the grid</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Number of additional faces required for the split and truncation construction. The construction does not modify existing face definitions, but instead uses these new faces to redefine the truncated cell geometry. Must be positive.  These faces are added to the enumeration of faces for the grid")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncationFaceCount", DataType="positiveInteger")]
        public string TruncationFaceCount {
            get {
                return this.truncationFaceCountField;
            }
            set {
                this.truncationFaceCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of polyhedral cells created by truncation. Must be positive. Note: Parent cells are replace</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of polyhedral cells created by truncation. Must be positive. Note: Parent " +
            "cells are replace")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncationCellCount", DataType="positiveInteger")]
        public string TruncationCellCount {
            get {
                return this.truncationCellCountField;
            }
            set {
                this.truncationCellCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Definition of the truncation faces is in terms of an ordered list of nodes. Node indexing is EXTENDED, i.e., is based on the list of untruncated grid nodes (always first) plus the split nodes (if any) and the truncation face nodes. Relative order of split nodes and truncation face nodes is set by the pillar indices.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Definition of the truncation faces is in terms of an ordered list of nodes. Node indexing is EXTENDED, i.e., is based on the list of untruncated grid nodes (always first) plus the split nodes (if any) and the truncation face nodes. Relative order of split nodes and truncation face nodes is set by the pillar indices.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodesPerTruncationFace", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray NodesPerTruncationFace {
            get {
                return this.nodesPerTruncationFaceField;
            }
            set {
                this.nodesPerTruncationFaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Parent cell index for each of the truncation cells.  BUSINESS RULE: Size must match truncationCellCount</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Parent cell index for each of the truncation cells.  BUSINESS RULE: Size must mat" +
            "ch truncationCellCount")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentCellIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParentCellIndices {
            get {
                return this.parentCellIndicesField;
            }
            set {
                this.parentCellIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Local cell face index for those faces which are retained from the parent cell in the definition of the truncation cell.  The use of a local cell face index, e.g., 0...5 for an IJK cell, can be used even if the face indices have not been defined.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Local cell face index for those faces which are retained from the parent cell in " +
            "the definition of the truncation cell.  The use of a local cell face index, e.g." +
            ", 0...5 for an IJK cell, can be used even if the face indices have not been defi" +
            "ned.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalFacesPerCell", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray LocalFacesPerCell {
            get {
                return this.localFacesPerCellField;
            }
            set {
                this.localFacesPerCellField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Truncation face index for the additional cell faces which are required to complete the definition of the truncation cell.  The resulting local cell face index follows the local faces per cell list, followed by the truncation faces in the order within the list-of-lists constructions.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Truncation face index for the additional cell faces which are required to complete the definition of the truncation cell.  The resulting local cell face index follows the local faces per cell list, followed by the truncation faces in the order within the list-of-lists constructions.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncationFacesPerCell", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray TruncationFacesPerCell {
            get {
                return this.truncationFacesPerCellField;
            }
            set {
                this.truncationFacesPerCellField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Boolean mask used to indicate which truncation cell faces have an outwardly directed normal, following a right hand rule. Data size and order follows the truncationFacesPerCell list-of-lists.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Boolean mask used to indicate which truncation cell faces have an outwardly direc" +
            "ted normal, following a right hand rule. Data size and order follows the truncat" +
            "ionFacesPerCell list-of-lists.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncationCellFaceIsRightHanded", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray TruncationCellFaceIsRightHanded {
            get {
                return this.truncationCellFaceIsRightHandedField;
            }
            set {
                this.truncationCellFaceIsRightHandedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class GpGridUnstructuredGridPatch : Patch {
        
        private string unstructuredCellCountField;
        
        private UnstructuredGridGeometry geometryField;
        
        /// <remarks/>
        /// <summary>Number of unstructured cells. Degenerate case (count=0) is allowed for GPGrid.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of unstructured cells. Degenerate case (count=0) is allowed for GPGrid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnstructuredCellCount", DataType="nonNegativeInteger")]
        public string UnstructuredCellCount {
            get {
                return this.unstructuredCellCountField;
            }
            set {
                this.unstructuredCellCountField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="UnstructuredGridGeometry")]
        public UnstructuredGridGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class UnstructuredGridGeometry : AbstractGridGeometry {
        
        private CellShape cellShapeField;
        
        private string nodeCountField;
        
        private string faceCountField;
        
        private ResqmlJaggedArray nodesPerFaceField;
        
        private ResqmlJaggedArray facesPerCellField;
        
        private AbstractBooleanArray cellFaceIsRightHandedField;
        
        private UnstructuredGridHingeNodeFaces hingeNodeFacesField;
        
        private UnstructuredSubnodeTopology subnodeTopologyField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellShape", DataType="CellShape")]
        public CellShape CellShape {
            get {
                return this.cellShapeField;
            }
            set {
                this.cellShapeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total number of nodes in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Total number of nodes in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeCount", DataType="positiveInteger")]
        public string NodeCount {
            get {
                return this.nodeCountField;
            }
            set {
                this.nodeCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Total number of faces in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Total number of faces in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FaceCount", DataType="positiveInteger")]
        public string FaceCount {
            get {
                return this.faceCountField;
            }
            set {
                this.faceCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>List of nodes per face. node count per face can be obtained from the offsets in the first list of list array.  BUSINESS RULE: faceCount must match the length of the first list of list array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("List of nodes per face. node count per face can be obtained from the offsets in t" +
            "he first list of list array.  BUSINESS RULE: faceCount must match the length of " +
            "the first list of list array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodesPerFace", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray NodesPerFace {
            get {
                return this.nodesPerFaceField;
            }
            set {
                this.nodesPerFaceField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>List of faces per cell. face count per cell can be obtained from the offsets in the first list of list array.  BUSINESS RULE: cellCount must match the length of the first list of list array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("List of faces per cell. face count per cell can be obtained from the offsets in t" +
            "he first list of list array.  BUSINESS RULE: cellCount must match the length of " +
            "the first list of list array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacesPerCell", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray FacesPerCell {
            get {
                return this.facesPerCellField;
            }
            set {
                this.facesPerCellField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Boolean mask used to indicate which cell faces have an outwardly directed normal following a right hand rule. Array length is the sum of the cell face count per cell, and the data follows the order of the faces per cell resqml list-of-lists.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Boolean mask used to indicate which cell faces have an outwardly directed normal " +
            "following a right hand rule. Array length is the sum of the cell face count per " +
            "cell, and the data follows the order of the faces per cell resqml list-of-lists." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellFaceIsRightHanded", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray CellFaceIsRightHanded {
            get {
                return this.cellFaceIsRightHandedField;
            }
            set {
                this.cellFaceIsRightHandedField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HingeNodeFaces", DataType="UnstructuredGridHingeNodeFaces")]
        public UnstructuredGridHingeNodeFaces HingeNodeFaces {
            get {
                return this.hingeNodeFacesField;
            }
            set {
                this.hingeNodeFacesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubnodeTopology", DataType="UnstructuredSubnodeTopology")]
        public UnstructuredSubnodeTopology SubnodeTopology {
            get {
                return this.subnodeTopologyField;
            }
            set {
                this.subnodeTopologyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum CellShape {
        
        /// <remarks/>
        tetrahedral,
        
        /// <remarks/>
        pyramidal,
        
        /// <remarks/>
        prism,
        
        /// <remarks/>
        hexahedral,
        
        /// <remarks/>
        polyhedral,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class UnstructuredGridHingeNodeFaces {
        
        private string countField;
        
        private AbstractIntegerArray faceIndicesField;
        
        /// <remarks/>
        /// <summary>Number of K faces. This count must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of K faces. This count must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>List of faces to be identified as K faces for hinge node geometry attachment.  BUSINESS RULE: Array length equals K face count.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("List of faces to be identified as K faces for hinge node geometry attachment.  BU" +
            "SINESS RULE: Array length equals K face count.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FaceIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray FaceIndices {
            get {
                return this.faceIndicesField;
            }
            set {
                this.faceIndicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class UnstructuredSubnodeTopology : SubnodeTopology {
        
        private Edges edgesField;
        
        private NodesPerCell nodesPerCellField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Edges", DataType="Edges")]
        public Edges Edges {
            get {
                return this.edgesField;
            }
            set {
                this.edgesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodesPerCell", DataType="NodesPerCell")]
        public NodesPerCell NodesPerCell {
            get {
                return this.nodesPerCellField;
            }
            set {
                this.nodesPerCellField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Edges {
        
        private string countField;
        
        private AbstractIntegerArray nodesPerEdgeField;
        
        /// <remarks/>
        /// <summary>Number of edges. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of edges. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines a list of 2 nodes per edge.  Count = 2 x EdgeCount</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines a list of 2 nodes per edge.  Count = 2 x EdgeCount")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodesPerEdge", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray NodesPerEdge {
            get {
                return this.nodesPerEdgeField;
            }
            set {
                this.nodesPerEdgeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class NodesPerCell {
        
        private ResqmlJaggedArray nodesPerCell1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NodesPerCell")]
        public ResqmlJaggedArray NodesPerCell1 {
            get {
                return this.nodesPerCell1Field;
            }
            set {
                this.nodesPerCell1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ColumnLayerSubnodeTopology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredSubnodeTopology))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class SubnodeTopology {
        
        private VariableSubnodePatch[] variableSubnodesField;
        
        private UniformSubnodePatch[] uniformSubnodesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("VariableSubnodes")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VariableSubnodes", DataType="VariableSubnodePatch")]
        public VariableSubnodePatch[] VariableSubnodes {
            get {
                return this.variableSubnodesField;
            }
            set {
                this.variableSubnodesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UniformSubnodes")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UniformSubnodes", DataType="UniformSubnodePatch")]
        public UniformSubnodePatch[] UniformSubnodes {
            get {
                return this.uniformSubnodesField;
            }
            set {
                this.uniformSubnodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class VariableSubnodePatch : SubnodePatch {
        
        private AbstractIntegerArray objectIndicesField;
        
        private AbstractIntegerArray subnodeCountPerSelectedObjectField;
        
        /// <remarks/>
        /// <summary>Indices of the selected objects</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indices of the selected objects")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ObjectIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ObjectIndices {
            get {
                return this.objectIndicesField;
            }
            set {
                this.objectIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of subnodes per selected object.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of subnodes per selected object.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubnodeCountPerSelectedObject", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray SubnodeCountPerSelectedObject {
            get {
                return this.subnodeCountPerSelectedObjectField;
            }
            set {
                this.subnodeCountPerSelectedObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class UniformSubnodePatch : SubnodePatch {
        
        private string subnodeCountPerObjectField;
        
        /// <remarks/>
        /// <summary>Number of subnodes per object, with the same number for each of this object kind in the grid.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of subnodes per object, with the same number for each of this object kind " +
            "in the grid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubnodeCountPerObject", DataType="positiveInteger")]
        public string SubnodeCountPerObject {
            get {
                return this.subnodeCountPerObjectField;
            }
            set {
                this.subnodeCountPerObjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class GpGridUnstructuredColumnLayerGridPatch : Patch {
        
        private string unstructuredColumnCountField;
        
        private UnstructuredColumnLayerGridGeometry geometryField;
        
        private TruncationCellPatch truncationCellsField;
        
        /// <remarks/>
        /// <summary>Number of unstructured columns. Degenerate case (count=0) is allowed for GPGrid.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of unstructured columns. Degenerate case (count=0) is allowed for GPGrid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnstructuredColumnCount", DataType="nonNegativeInteger")]
        public string UnstructuredColumnCount {
            get {
                return this.unstructuredColumnCountField;
            }
            set {
                this.unstructuredColumnCountField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="UnstructuredColumnLayerGridGeometry")]
        public UnstructuredColumnLayerGridGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncationCells", DataType="TruncationCellPatch")]
        public TruncationCellPatch TruncationCells {
            get {
                return this.truncationCellsField;
            }
            set {
                this.truncationCellsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class UnstructuredColumnLayerGridGeometry : AbstractColumnLayerGridGeometry {
        
        private ColumnShape columnShapeField;
        
        private string pillarCountField;
        
        private ResqmlJaggedArray pillarsPerColumnField;
        
        private AbstractBooleanArray columnIsRightHandedField;
        
        private UnstructuredColumnEdges columnEdgesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnShape", DataType="ColumnShape")]
        public ColumnShape ColumnShape {
            get {
                return this.columnShapeField;
            }
            set {
                this.columnShapeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of pillars in the grid. Must be positive. Pillars are used to describe the shape of the columns in the grid.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of pillars in the grid. Must be positive. Pillars are used to describe the" +
            " shape of the columns in the grid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PillarCount", DataType="positiveInteger")]
        public string PillarCount {
            get {
                return this.pillarCountField;
            }
            set {
                this.pillarCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>List of pillars for each column. The pillars define the corners of each column.  The number of pillars per column can be obtained from the offsets in the first list of list array.  BUSINESS RULE: The length of the first array in the list of list construction should equal the columnCount.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"List of pillars for each column. The pillars define the corners of each column.  The number of pillars per column can be obtained from the offsets in the first list of list array.  BUSINESS RULE: The length of the first array in the list of list construction should equal the columnCount.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PillarsPerColumn", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray PillarsPerColumn {
            get {
                return this.pillarsPerColumnField;
            }
            set {
                this.pillarsPerColumnField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>List of columns which are right handed. Right handedness is evaluated following the pillar order and the K-direction tangent vector for each column.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("List of columns which are right handed. Right handedness is evaluated following t" +
            "he pillar order and the K-direction tangent vector for each column.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnIsRightHanded", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray ColumnIsRightHanded {
            get {
                return this.columnIsRightHandedField;
            }
            set {
                this.columnIsRightHandedField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnEdges", DataType="UnstructuredColumnEdges")]
        public UnstructuredColumnEdges ColumnEdges {
            get {
                return this.columnEdgesField;
            }
            set {
                this.columnEdgesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ColumnShape {
        
        /// <remarks/>
        triangular,
        
        /// <remarks/>
        quadrilateral,
        
        /// <remarks/>
        polygonal,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class UnstructuredColumnEdges {
        
        private string countField;
        
        private ResqmlJaggedArray pillarsPerColumnEdgeField;
        
        /// <remarks/>
        /// <summary>Number of unstructured column edges in this grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of unstructured column edges in this grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Definition of the column edges in terms of the pillars per column edge. Pillar count per edge is usually 2, but the list-of-lists construction is used to allow column edges to be defined by more than 2 pillars.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Definition of the column edges in terms of the pillars per column edge. Pillar co" +
            "unt per edge is usually 2, but the list-of-lists construction is used to allow c" +
            "olumn edges to be defined by more than 2 pillars.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PillarsPerColumnEdge", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray PillarsPerColumnEdge {
            get {
                return this.pillarsPerColumnEdgeField;
            }
            set {
                this.pillarsPerColumnEdgeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class SplitNodePatch : Patch {
        
        private string countField;
        
        private AbstractIntegerArray parentNodeIndicesField;
        
        private ResqmlJaggedArray cellsPerSplitNodeField;
        
        private SplitFaces splitFacesField;
        
        /// <remarks/>
        /// <summary>Number of additional split nodes. Count must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of additional split nodes. Count must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Parent coordinate line node index for each of the split nodes. Used to implicitly define cell geometry.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Parent coordinate line node index for each of the split nodes. Used to implicitly" +
            " define cell geometry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentNodeIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParentNodeIndices {
            get {
                return this.parentNodeIndicesField;
            }
            set {
                this.parentNodeIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cell indices for each of the split nodes. Used to implicitly define cell geometry. List-of-lists construction used to support split nodes shared between multiple cells.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Cell indices for each of the split nodes. Used to implicitly define cell geometry" +
            ". List-of-lists construction used to support split nodes shared between multiple" +
            " cells.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellsPerSplitNode", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray CellsPerSplitNode {
            get {
                return this.cellsPerSplitNodeField;
            }
            set {
                this.cellsPerSplitNodeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitFaces", DataType="SplitFaces")]
        public SplitFaces SplitFaces {
            get {
                return this.splitFacesField;
            }
            set {
                this.splitFacesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class SplitFaces {
        
        private string countField;
        
        private AbstractIntegerArray parentFaceIndicesField;
        
        private AbstractIntegerArray cellIndicesField;
        
        private SplitEdges splitEdgesField;
        
        /// <remarks/>
        /// <summary>Number of additional split faces. Count must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of additional split faces. Count must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Parent unsplit face index for each of the additional split faces.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Parent unsplit face index for each of the additional split faces.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentFaceIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParentFaceIndices {
            get {
                return this.parentFaceIndicesField;
            }
            set {
                this.parentFaceIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Cell index for each split face. Used to implicitly define cell geometry.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Cell index for each split face. Used to implicitly define cell geometry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray CellIndices {
            get {
                return this.cellIndicesField;
            }
            set {
                this.cellIndicesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitEdges", DataType="SplitEdges")]
        public SplitEdges SplitEdges {
            get {
                return this.splitEdgesField;
            }
            set {
                this.splitEdgesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class SplitEdges {
        
        private string countField;
        
        private AbstractIntegerArray parentEdgeIndicesField;
        
        private ResqmlJaggedArray facesPerSplitEdgeField;
        
        /// <remarks/>
        /// <summary>Number of edges. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of edges. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Parent unsplit edge index for each of the additional split edges.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Parent unsplit edge index for each of the additional split edges.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentEdgeIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParentEdgeIndices {
            get {
                return this.parentEdgeIndicesField;
            }
            set {
                this.parentEdgeIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Association of faces with the split edges, used to infer continuity of property, geometry, or interpretation with an attachment kind of edges.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Association of faces with the split edges, used to infer continuity of property, " +
            "geometry, or interpretation with an attachment kind of edges.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FacesPerSplitEdge", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray FacesPerSplitEdge {
            get {
                return this.facesPerSplitEdgeField;
            }
            set {
                this.facesPerSplitEdgeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ColumnLayerSplitCoordinateLines {
        
        private string countField;
        
        private AbstractIntegerArray pillarIndicesField;
        
        private ResqmlJaggedArray columnsPerSplitCoordinateLineField;
        
        private ColumnLayerSplitColumnEdges splitColumnEdgesField;
        
        /// <remarks/>
        /// <summary>Number of split coordinate lines. The count must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of split coordinate lines. The count must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pillar index for each split coordinate line. Length of this array is equal to the number of split coordinate lines.  For the first pillarCount lines, the index of the coordinate line equals the index of the corresponding pillar.  This array provides the pillar indices for the additional (split) coordinate lines.  Used to implicitly define column and cell geometry.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Pillar index for each split coordinate line. Length of this array is equal to the number of split coordinate lines.  For the first pillarCount lines, the index of the coordinate line equals the index of the corresponding pillar.  This array provides the pillar indices for the additional (split) coordinate lines.  Used to implicitly define column and cell geometry.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PillarIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray PillarIndices {
            get {
                return this.pillarIndicesField;
            }
            set {
                this.pillarIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Column indices for each of the split coordinate lines. Used to implicitly define column and cell geometry. List-of-lists construction used to support shared coordinate lines.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Column indices for each of the split coordinate lines. Used to implicitly define " +
            "column and cell geometry. List-of-lists construction used to support shared coor" +
            "dinate lines.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnsPerSplitCoordinateLine", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray ColumnsPerSplitCoordinateLine {
            get {
                return this.columnsPerSplitCoordinateLineField;
            }
            set {
                this.columnsPerSplitCoordinateLineField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitColumnEdges", DataType="ColumnLayerSplitColumnEdges")]
        public ColumnLayerSplitColumnEdges SplitColumnEdges {
            get {
                return this.splitColumnEdgesField;
            }
            set {
                this.splitColumnEdgesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ColumnLayerSplitColumnEdges {
        
        private string countField;
        
        private AbstractIntegerArray parentColumnEdgeIndicesField;
        
        private AbstractIntegerArray columnPerSplitColumnEdgeField;
        
        /// <remarks/>
        /// <summary>Number of split column edges in this grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of split column edges in this grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Parent unsplit column edge index for each of the split column edges. Used to implicitly define split face indexing.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Parent unsplit column edge index for each of the split column edges. Used to impl" +
            "icitly define split face indexing.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentColumnEdgeIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParentColumnEdgeIndices {
            get {
                return this.parentColumnEdgeIndicesField;
            }
            set {
                this.parentColumnEdgeIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Column index for each of the split column edges. Used to implicitly define column and cell faces. List-of-lists construction not required since each split column edge must be in a single column.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Column index for each of the split column edges. Used to implicitly define column" +
            " and cell faces. List-of-lists construction not required since each split column" +
            " edge must be in a single column.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnPerSplitColumnEdge", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ColumnPerSplitColumnEdge {
            get {
                return this.columnPerSplitColumnEdgeField;
            }
            set {
                this.columnPerSplitColumnEdgeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class VolumeRegion {
        
        private string patchIndexField;
        
        private VolumeShell[] internalShellsField;
        
        private DataObjectReference representsField;
        
        private VolumeShell externalShellField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PatchIndex", DataType="nonNegativeInteger")]
        public string PatchIndex {
            get {
                return this.patchIndexField;
            }
            set {
                this.patchIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("InternalShells")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InternalShells", DataType="VolumeShell")]
        public VolumeShell[] InternalShells {
            get {
                return this.internalShellsField;
            }
            set {
                this.internalShellsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Represents", DataType="DataObjectReference")]
        public DataObjectReference Represents {
            get {
                return this.representsField;
            }
            set {
                this.representsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExternalShell", DataType="VolumeShell")]
        public VolumeShell ExternalShell {
            get {
                return this.externalShellField;
            }
            set {
                this.externalShellField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class VolumeShell {
        
        private string shellUidField;
        
        private OrientedMacroFace[] macroFacesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ShellUid", DataType="string")]
        public string ShellUid {
            get {
                return this.shellUidField;
            }
            set {
                this.shellUidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("MacroFaces")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MacroFaces", DataType="OrientedMacroFace")]
        public OrientedMacroFace[] MacroFaces {
            get {
                return this.macroFacesField;
            }
            set {
                this.macroFacesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class OrientedMacroFace {
        
        private string patchIndexOfRepresentationField;
        
        private string representationIndexField;
        
        private bool sideIsPlusField;
        
        /// <remarks/>
        /// <summary>Create the triangulation and 2D grid representation for which the patches match the macro faces.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Create the triangulation and 2D grid representation for which the patches match t" +
            "he macro faces.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PatchIndexOfRepresentation", DataType="nonNegativeInteger")]
        public string PatchIndexOfRepresentation {
            get {
                return this.patchIndexOfRepresentationField;
            }
            set {
                this.patchIndexOfRepresentationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Identifies the representation by its index, in the list of representations contained in the organization.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Identifies the representation by its index, in the list of representations contai" +
            "ned in the organization.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentationIndex", DataType="nonNegativeInteger")]
        public string RepresentationIndex {
            get {
                return this.representationIndexField;
            }
            set {
                this.representationIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SideIsPlus", DataType="boolean")]
        public bool SideIsPlus {
            get {
                return this.sideIsPlusField;
            }
            set {
                this.sideIsPlusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactRepresentationReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedContactRepresentationPart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonSealedContactRepresentationPart))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractContactRepresentationPart {
        
        private string indexField;
        
        /// <remarks/>
        /// <summary>The index of the contact. Indicates identity of the contact in the surface framework context. It is used for contact identities and to find the interpretation of this particular contact.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index of the contact. Indicates identity of the contact in the surface framew" +
            "ork context. It is used for contact identities and to find the interpretation of" +
            " this particular contact.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ContactRepresentationReference : AbstractContactRepresentationPart {
        
        private DataObjectReference representationField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Representation", DataType="DataObjectReference")]
        public DataObjectReference Representation {
            get {
                return this.representationField;
            }
            set {
                this.representationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class SealedContactRepresentationPart : AbstractContactRepresentationPart {
        
        private AbstractIntegerArray identicalNodeIndicesField;
        
        private IdentityKind identityKindField;
        
        private ContactPatch[] contactField;
        
        /// <remarks/>
        /// <summary>Indicate which nodes (identified by their common index in all contact patches) of the contact patches are identical.  If this list is not present, then it indicates that all nodes in each representation are identical, on an element-by-element level.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicate which nodes (identified by their common index in all contact patches) of" +
            " the contact patches are identical.  If this list is not present, then it indica" +
            "tes that all nodes in each representation are identical, on an element-by-elemen" +
            "t level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdenticalNodeIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray IdenticalNodeIndices {
            get {
                return this.identicalNodeIndicesField;
            }
            set {
                this.identicalNodeIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdentityKind", DataType="IdentityKind")]
        public IdentityKind IdentityKind {
            get {
                return this.identityKindField;
            }
            set {
                this.identityKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Contact")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Contact", DataType="ContactPatch")]
        public ContactPatch[] Contact {
            get {
                return this.contactField;
            }
            set {
                this.contactField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum IdentityKind {
        
        /// <remarks/>
        colocation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("previous colocation")]
        previouscolocation,
        
        /// <remarks/>
        equivalence,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("previous equivalence")]
        previousequivalence,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class NonSealedContactRepresentationPart : AbstractContactRepresentationPart {
        
        private ContactPatch[] contactField;
        
        private AbstractGeometry geometryField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Contact")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Contact", DataType="ContactPatch")]
        public ContactPatch[] Contact {
            get {
                return this.contactField;
            }
            set {
                this.contactField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="AbstractGeometry")]
        public AbstractGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ContactIdentity {
        
        private IdentityKind identityKindField;
        
        private AbstractIntegerArray listOfContactRepresentationsField;
        
        private AbstractIntegerArray listOfIdenticalNodesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdentityKind", DataType="IdentityKind")]
        public IdentityKind IdentityKind {
            get {
                return this.identityKindField;
            }
            set {
                this.identityKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The contact representations that share common identity as specified by their indices</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The contact representations that share common identity as specified by their indi" +
            "ces")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ListOfContactRepresentations", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ListOfContactRepresentations {
            get {
                return this.listOfContactRepresentationsField;
            }
            set {
                this.listOfContactRepresentationsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates which nodes (identified by their common index in all contact representations) of the contact representations are identical.  If this list is not present, then it indicates that all nodes in each representation are identical, on an element by element level.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Indicates which nodes (identified by their common index in all contact representations) of the contact representations are identical.  If this list is not present, then it indicates that all nodes in each representation are identical, on an element by element level.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ListOfIdenticalNodes", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ListOfIdenticalNodes {
            get {
                return this.listOfIdenticalNodesField;
            }
            set {
                this.listOfIdenticalNodesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ConnectionInterpretations {
        
        private ResqmlJaggedArray interpretationIndicesField;
        
        private DataObjectReference[] featureInterpretationField;
        
        /// <remarks/>
        /// <summary>Indices for the interpretations for each connection, if any. The use of a Resqml jagged array allows zero or more than one interpretation to be associated with a single connection.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indices for the interpretations for each connection, if any. The use of a Resqml " +
            "jagged array allows zero or more than one interpretation to be associated with a" +
            " single connection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretationIndices", DataType="ResqmlJaggedArray")]
        public ResqmlJaggedArray InterpretationIndices {
            get {
                return this.interpretationIndicesField;
            }
            set {
                this.interpretationIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("FeatureInterpretation")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FeatureInterpretation", DataType="DataObjectReference")]
        public DataObjectReference[] FeatureInterpretation {
            get {
                return this.featureInterpretationField;
            }
            set {
                this.featureInterpretationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IntervalStratigraphicUnits {
        
        private AbstractIntegerArray unitIndicesField;
        
        private DataObjectReference stratigraphicOrganizationField;
        
        /// <remarks/>
        /// <summary>Index of the stratigraphic unit per interval, of a given stratigraphic column.  Notes: 1.) For grids, intervals = layers + K gaps. 2.) If there is no stratigraphic column, e.g., within salt, use null (-1)  BUSINESS RULE: Array length must equal the number of INTERVALS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Index of the stratigraphic unit per interval, of a given stratigraphic column.  Notes: 1.) For grids, intervals = layers + K gaps. 2.) If there is no stratigraphic column, e.g., within salt, use null (-1)  BUSINESS RULE: Array length must equal the number of INTERVALS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnitIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray UnitIndices {
            get {
                return this.unitIndicesField;
            }
            set {
                this.unitIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StratigraphicOrganization", DataType="DataObjectReference")]
        public DataObjectReference StratigraphicOrganization {
            get {
                return this.stratigraphicOrganizationField;
            }
            set {
                this.stratigraphicOrganizationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class KGaps {
        
        private string countField;
        
        private AbstractBooleanArray gapAfterLayerField;
        
        /// <remarks/>
        /// <summary>Number of gaps between layers. Must be positive.  Number of INTERVALS = gapCount + NK.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DescriptionAttribute("Number of gaps between layers. Must be positive.  Number of INTERVALS = gapCount " +
            "+ NK.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Boolean array of length NK-1. TRUE if there is a gap after the corresponding layer.  NKL = NK + gapCount + 1  BUSINESS RULE: gapCount must be consistent with the number of gaps specified by the gapAfterLayer array.</summary>
        [System.ComponentModel.DescriptionAttribute("Boolean array of length NK-1. TRUE if there is a gap after the corresponding laye" +
            "r.  NKL = NK + gapCount + 1  BUSINESS RULE: gapCount must be consistent with the" +
            " number of gaps specified by the gapAfterLayer array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GapAfterLayer", DataType="AbstractBooleanArray")]
        public AbstractBooleanArray GapAfterLayer {
            get {
                return this.gapAfterLayerField;
            }
            set {
                this.gapAfterLayerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class GpGridColumnLayerGrid {
        
        private string nkField;
        
        private KGaps kGapsField;
        
        private GpGridIjkGridPatch[] ijkGridPatchField;
        
        private GpGridUnstructuredColumnLayerGridPatch[] unstructuredColumnLayerGridPatchField;
        
        /// <remarks/>
        /// <summary>Number of layers. Degenerate case (nk=0) is allowed for GPGrid.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of layers. Degenerate case (nk=0) is allowed for GPGrid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nk", DataType="nonNegativeInteger")]
        public string Nk {
            get {
                return this.nkField;
            }
            set {
                this.nkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KGaps", DataType="KGaps")]
        public KGaps KGaps {
            get {
                return this.kGapsField;
            }
            set {
                this.kGapsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("IjkGridPatch")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IjkGridPatch", DataType="GpGridIjkGridPatch")]
        public GpGridIjkGridPatch[] IjkGridPatch {
            get {
                return this.ijkGridPatchField;
            }
            set {
                this.ijkGridPatchField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UnstructuredColumnLayerGridPatch")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnstructuredColumnLayerGridPatch", DataType="GpGridUnstructuredColumnLayerGridPatch")]
        public GpGridUnstructuredColumnLayerGridPatch[] UnstructuredColumnLayerGridPatch {
            get {
                return this.unstructuredColumnLayerGridPatchField;
            }
            set {
                this.unstructuredColumnLayerGridPatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class CellStratigraphicUnits {
        
        private AbstractIntegerArray unitIndicesField;
        
        private DataObjectReference stratigraphicOrganizationField;
        
        /// <remarks/>
        /// <summary>Index of the stratigraphic unit of a given stratigraphic column for each cell.  Use null (-1) if no stratigraphic column, e.g., within salt  BUSINESS RULE: Array length is the number of cells in the grid or the blocked well</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Index of the stratigraphic unit of a given stratigraphic column for each cell.  U" +
            "se null (-1) if no stratigraphic column, e.g., within salt  BUSINESS RULE: Array" +
            " length is the number of cells in the grid or the blocked well")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnitIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray UnitIndices {
            get {
                return this.unitIndicesField;
            }
            set {
                this.unitIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StratigraphicOrganization", DataType="DataObjectReference")]
        public DataObjectReference StratigraphicOrganization {
            get {
                return this.stratigraphicOrganizationField;
            }
            set {
                this.stratigraphicOrganizationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Intervals {
        
        private string intervalCountField;
        
        private AbstractIntegerArray parentCountPerIntervalField;
        
        private AbstractIntegerArray childCountPerIntervalField;
        
        private AbstractDoubleArray childCellWeightsField;
        
        /// <remarks/>
        /// <summary>The number of intervals in the regrid description. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of intervals in the regrid description. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IntervalCount", DataType="positiveInteger")]
        public string IntervalCount {
            get {
                return this.intervalCountField;
            }
            set {
                this.intervalCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of parent cells in each interval.  BUSINESS RULES: 1.) The array length must be equal to intervalCount. 2.) For the given parentIndex, the total count of parent cells should not extend beyond the boundary of the parent grid.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of parent cells in each interval.  BUSINESS RULES: 1.) The array lengt" +
            "h must be equal to intervalCount. 2.) For the given parentIndex, the total count" +
            " of parent cells should not extend beyond the boundary of the parent grid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentCountPerInterval", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParentCountPerInterval {
            get {
                return this.parentCountPerIntervalField;
            }
            set {
                this.parentCountPerIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The number of child cells in each interval.  If the child grid type is not commensurate with the parent type, then this attribute is ignored by a reader, and its value should be set to null (-1). For example, for a parent IJK grid with a child unstructured column layer grid, then the child count is non-null for a K regrid, but null for an I or J regrid.  BUSINESS RULES: 1.) The array length must be equal to intervalCount. 2.) If the child grid type is commensurate with the parent grid, then the sum of values over all intervals must be equal to the corresponding child grid dimension.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The number of child cells in each interval.  If the child grid type is not commensurate with the parent type, then this attribute is ignored by a reader, and its value should be set to null (-1). For example, for a parent IJK grid with a child unstructured column layer grid, then the child count is non-null for a K regrid, but null for an I or J regrid.  BUSINESS RULES: 1.) The array length must be equal to intervalCount. 2.) If the child grid type is commensurate with the parent grid, then the sum of values over all intervals must be equal to the corresponding child grid dimension.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChildCountPerInterval", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ChildCountPerInterval {
            get {
                return this.childCountPerIntervalField;
            }
            set {
                this.childCountPerIntervalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Weights that are proportional to the relative sizes of child cells within each interval. The weights need not be normalized.</summary>
        [System.ComponentModel.DescriptionAttribute("Weights that are proportional to the relative sizes of child cells within each in" +
            "terval. The weights need not be normalized.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChildCellWeights", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray ChildCellWeights {
            get {
                return this.childCellWeightsField;
            }
            set {
                this.childCellWeightsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Regrid {
        
        private string initialIndexOnParentGridField;
        
        private Intervals intervalsField;
        
        /// <remarks/>
        /// <summary>0-based index for the placement of the window on the parent grid.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("0-based index for the placement of the window on the parent grid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InitialIndexOnParentGrid", DataType="nonNegativeInteger")]
        public string InitialIndexOnParentGrid {
            get {
                return this.initialIndexOnParentGridField;
            }
            set {
                this.initialIndexOnParentGridField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Intervals", DataType="Intervals")]
        public Intervals Intervals {
            get {
                return this.intervalsField;
            }
            set {
                this.intervalsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class OverlapVolume {
        
        private VolumeUom volumeUomField;
        
        private AbstractDoubleArray overlapVolumesField;
        
        /// <remarks/>
        /// <summary>Units of measure for the overlapVolume.</summary>
        [System.ComponentModel.DescriptionAttribute("Units of measure for the overlapVolume.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VolumeUom", DataType="VolumeUom")]
        public VolumeUom VolumeUom {
            get {
                return this.volumeUomField;
            }
            set {
                this.volumeUomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Parent-child cell volume overlap.  BUSINESS RULE: Length of array must equal the cell overlap count.</summary>
        [System.ComponentModel.DescriptionAttribute("Parent-child cell volume overlap.  BUSINESS RULE: Length of array must equal the " +
            "cell overlap count.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverlapVolumes", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray OverlapVolumes {
            get {
                return this.overlapVolumesField;
            }
            set {
                this.overlapVolumesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl")]
        Item1000bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3")]
        Item1000ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[UK]")]
        Item1000galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 gal[US]")]
        Item1000galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3")]
        Item1000m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 gal[US]")]
        Item1E6galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E12 ft3")]
        Item1E12ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl")]
        Item1E6bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3")]
        Item1E6ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3")]
        Item1E6m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 bbl")]
        Item1E9bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E9 ft3")]
        Item1E9ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("acre.ft")]
        acreft,
        
        /// <remarks/>
        bbl,
        
        /// <remarks/>
        cm3,
        
        /// <remarks/>
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[UK]")]
        flozUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("floz[US]")]
        flozUS,
        
        /// <remarks/>
        ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]")]
        galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]")]
        galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ha.m")]
        ham,
        
        /// <remarks/>
        hL,
        
        /// <remarks/>
        in3,
        
        /// <remarks/>
        km3,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        m3,
        
        /// <remarks/>
        mi3,
        
        /// <remarks/>
        mL,
        
        /// <remarks/>
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]")]
        ptUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[US]")]
        ptUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[UK]")]
        qtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("qt[US]")]
        qtUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um2.m")]
        um2m,
        
        /// <remarks/>
        yd3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class CellOverlap {
        
        private string countField;
        
        private AbstractIntegerArray parentChildCellPairsField;
        
        private OverlapVolume overlapVolumeField;
        
        /// <remarks/>
        /// <summary>Number of parent-child cell overlaps. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DescriptionAttribute("Number of parent-child cell overlaps. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>(Parent cell index, Child cell index) pair for each overlap.  BUSINESS RULE: Length of array must equal 2 x overlapCount.</summary>
        [System.ComponentModel.DescriptionAttribute("(Parent cell index, Child cell index) pair for each overlap.  BUSINESS RULE: Leng" +
            "th of array must equal 2 x overlapCount.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentChildCellPairs", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ParentChildCellPairs {
            get {
                return this.parentChildCellPairsField;
            }
            set {
                this.parentChildCellPairsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OverlapVolume", DataType="OverlapVolume")]
        public OverlapVolume OverlapVolume {
            get {
                return this.overlapVolumeField;
            }
            set {
                this.overlapVolumeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CellParentWindow))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ColumnLayerParentWindow))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkParentWindow))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractParentWindow {
        
        private CellOverlap cellOverlapField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellOverlap", DataType="CellOverlap")]
        public CellOverlap CellOverlap {
            get {
                return this.cellOverlapField;
            }
            set {
                this.cellOverlapField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class CellParentWindow : AbstractParentWindow {
        
        private AbstractIntegerArray cellIndicesField;
        
        private DataObjectReference parentGridField;
        
        /// <remarks/>
        /// <summary>Cell indices which list the cells in the parent window.  BUSINESS RULE: Number of cells must be consistent with the child grid cell count.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Cell indices which list the cells in the parent window.  BUSINESS RULE: Number of" +
            " cells must be consistent with the child grid cell count.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray CellIndices {
            get {
                return this.cellIndicesField;
            }
            set {
                this.cellIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentGrid", DataType="DataObjectReference")]
        public DataObjectReference ParentGrid {
            get {
                return this.parentGridField;
            }
            set {
                this.parentGridField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ColumnLayerParentWindow : AbstractParentWindow {
        
        private AbstractIntegerArray columnIndicesField;
        
        private AbstractIntegerArray omitParentCellsField;
        
        private Regrid kRegridField;
        
        private DataObjectReference parentGridField;
        
        /// <remarks/>
        /// <summary>Column indices that list the columns in the parent window.  BUSINESS RULE: Number of columns must be consistent with the child grid column count.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Column indices that list the columns in the parent window.  BUSINESS RULE: Number" +
            " of columns must be consistent with the child grid column count.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ColumnIndices {
            get {
                return this.columnIndicesField;
            }
            set {
                this.columnIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>List of parent cells that are to be retained at their original resolution and are not to be included within a local grid. The omit allows non-rectangular local grids to be specified.  0-based indexing follows #Columns x #Layers relative to the parent window cell count, not to the parent grid.</summary>
        [System.ComponentModel.DescriptionAttribute(@"List of parent cells that are to be retained at their original resolution and are not to be included within a local grid. The omit allows non-rectangular local grids to be specified.  0-based indexing follows #Columns x #Layers relative to the parent window cell count, not to the parent grid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OmitParentCells", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray OmitParentCells {
            get {
                return this.omitParentCellsField;
            }
            set {
                this.omitParentCellsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KRegrid", DataType="Regrid")]
        public Regrid KRegrid {
            get {
                return this.kRegridField;
            }
            set {
                this.kRegridField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentGrid", DataType="DataObjectReference")]
        public DataObjectReference ParentGrid {
            get {
                return this.parentGridField;
            }
            set {
                this.parentGridField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class IjkParentWindow : AbstractParentWindow {
        
        private AbstractIntegerArray omitParentCellsField;
        
        private Regrid jRegridField;
        
        private DataObjectReference parentGridField;
        
        private Regrid kRegridField;
        
        private Regrid iRegridField;
        
        /// <remarks/>
        /// <summary>List of parent cells that are to be retained at their original resolution and are not to be included within a local grid. The "omit" allows non-rectangular local grids to be specified.  0-based indexing follows NI x NJ x NK relative to the parent window cell count—not to the parent grid.</summary>
        [System.ComponentModel.DescriptionAttribute(@"List of parent cells that are to be retained at their original resolution and are not to be included within a local grid. The ""omit"" allows non-rectangular local grids to be specified.  0-based indexing follows NI x NJ x NK relative to the parent window cell count—not to the parent grid.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OmitParentCells", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray OmitParentCells {
            get {
                return this.omitParentCellsField;
            }
            set {
                this.omitParentCellsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("JRegrid", DataType="Regrid")]
        public Regrid JRegrid {
            get {
                return this.jRegridField;
            }
            set {
                this.jRegridField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentGrid", DataType="DataObjectReference")]
        public DataObjectReference ParentGrid {
            get {
                return this.parentGridField;
            }
            set {
                this.parentGridField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KRegrid", DataType="Regrid")]
        public Regrid KRegrid {
            get {
                return this.kRegridField;
            }
            set {
                this.kRegridField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IRegrid", DataType="Regrid")]
        public Regrid IRegrid {
            get {
                return this.iRegridField;
            }
            set {
                this.iRegridField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class CellFluidPhaseUnits {
        
        private AbstractIntegerArray phaseUnitIndicesField;
        
        private DataObjectReference fluidOrganizationField;
        
        /// <remarks/>
        /// <summary>Index of the phase unit kind within a given fluid phase organization for each cell. Follows the indexing defined by the PhaseUnit enumeration. When applied to the wellbore frame representation, the indexing is identical to the number of intervals.  Use null (-1) if no fluid phase is present, e.g., within the seal.  BUSINESS RULE: Array length is equal to the number of cells in the representation (grid, wellbore frame or blocked well).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Index of the phase unit kind within a given fluid phase organization for each cell. Follows the indexing defined by the PhaseUnit enumeration. When applied to the wellbore frame representation, the indexing is identical to the number of intervals.  Use null (-1) if no fluid phase is present, e.g., within the seal.  BUSINESS RULE: Array length is equal to the number of cells in the representation (grid, wellbore frame or blocked well).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PhaseUnitIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray PhaseUnitIndices {
            get {
                return this.phaseUnitIndicesField;
            }
            set {
                this.phaseUnitIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidOrganization", DataType="DataObjectReference")]
        public DataObjectReference FluidOrganization {
            get {
                return this.fluidOrganizationField;
            }
            set {
                this.fluidOrganizationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class AdditionalGridTopology {
        
        private SplitEdges splitEdgesField;
        
        private SplitNodePatch splitNodesField;
        
        private ColumnLayerSplitColumnEdges splitColumnEdgesField;
        
        private UnstructuredColumnEdges unstructuredColumnEdgesField;
        
        private SplitFaces splitFacesField;
        
        private IjSplitColumnEdges ijSplitColumnEdgesField;
        
        private UnstructuredSubnodeTopology unstructuredSubnodeTopologyField;
        
        private ColumnLayerSubnodeTopology columnLayerSubnodeTopologyField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitEdges", DataType="SplitEdges")]
        public SplitEdges SplitEdges {
            get {
                return this.splitEdgesField;
            }
            set {
                this.splitEdgesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitNodes", DataType="SplitNodePatch")]
        public SplitNodePatch SplitNodes {
            get {
                return this.splitNodesField;
            }
            set {
                this.splitNodesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitColumnEdges", DataType="ColumnLayerSplitColumnEdges")]
        public ColumnLayerSplitColumnEdges SplitColumnEdges {
            get {
                return this.splitColumnEdgesField;
            }
            set {
                this.splitColumnEdgesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnstructuredColumnEdges", DataType="UnstructuredColumnEdges")]
        public UnstructuredColumnEdges UnstructuredColumnEdges {
            get {
                return this.unstructuredColumnEdgesField;
            }
            set {
                this.unstructuredColumnEdgesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SplitFaces", DataType="SplitFaces")]
        public SplitFaces SplitFaces {
            get {
                return this.splitFacesField;
            }
            set {
                this.splitFacesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IjSplitColumnEdges", DataType="IjSplitColumnEdges")]
        public IjSplitColumnEdges IjSplitColumnEdges {
            get {
                return this.ijSplitColumnEdgesField;
            }
            set {
                this.ijSplitColumnEdgesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnstructuredSubnodeTopology", DataType="UnstructuredSubnodeTopology")]
        public UnstructuredSubnodeTopology UnstructuredSubnodeTopology {
            get {
                return this.unstructuredSubnodeTopologyField;
            }
            set {
                this.unstructuredSubnodeTopologyField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnLayerSubnodeTopology", DataType="ColumnLayerSubnodeTopology")]
        public ColumnLayerSubnodeTopology ColumnLayerSubnodeTopology {
            get {
                return this.columnLayerSubnodeTopologyField;
            }
            set {
                this.columnLayerSubnodeTopologyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ElementIdentity {
        
        private AbstractIntegerArray elementIndicesField;
        
        private IdentityKind identityKindField;
        
        private IndexableElements indexableElementField;
        
        private DataObjectReference representationField;
        
        private TimeIndex fromTimeIndexField;
        
        private TimeIndex toTimeIndexField;
        
        /// <remarks/>
        /// <summary>Indicates which elements are identical based on their indices in the (sub)representation. If not given, then the selected indexable elements of each of the selected representations are identical at the element by element level.   If not given, then all elements are specified to be identical.  BUSINESS RULE: Number of identical elements must equal identicalElementCount for each representation.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Indicates which elements are identical based on their indices in the (sub)representation. If not given, then the selected indexable elements of each of the selected representations are identical at the element by element level.   If not given, then all elements are specified to be identical.  BUSINESS RULE: Number of identical elements must equal identicalElementCount for each representation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ElementIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ElementIndices {
            get {
                return this.elementIndicesField;
            }
            set {
                this.elementIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdentityKind", DataType="IdentityKind")]
        public IdentityKind IdentityKind {
            get {
                return this.identityKindField;
            }
            set {
                this.identityKindField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexableElement", DataType="IndexableElements")]
        public IndexableElements IndexableElement {
            get {
                return this.indexableElementField;
            }
            set {
                this.indexableElementField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Representation", DataType="DataObjectReference")]
        public DataObjectReference Representation {
            get {
                return this.representationField;
            }
            set {
                this.representationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FromTimeIndex", DataType="TimeIndex")]
        public TimeIndex FromTimeIndex {
            get {
                return this.fromTimeIndexField;
            }
            set {
                this.fromTimeIndexField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ToTimeIndex", DataType="TimeIndex")]
        public TimeIndex ToTimeIndex {
            get {
                return this.toTimeIndexField;
            }
            set {
                this.toTimeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class RepresentationIdentity {
        
        private string identicalElementCountField;
        
        private ElementIdentity[] elementIdentityField;
        
        private AdditionalGridTopology additionalGridTopologyField;
        
        /// <remarks/>
        /// <summary>Number of elements within each representation for which a representation identity is specified.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of elements within each representation for which a representation identity" +
            " is specified.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IdenticalElementCount", DataType="positiveInteger")]
        public string IdenticalElementCount {
            get {
                return this.identicalElementCountField;
            }
            set {
                this.identicalElementCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ElementIdentity")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ElementIdentity", DataType="ElementIdentity")]
        public ElementIdentity[] ElementIdentity {
            get {
                return this.elementIdentityField;
            }
            set {
                this.elementIdentityField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AdditionalGridTopology", DataType="AdditionalGridTopology")]
        public AdditionalGridTopology AdditionalGridTopology {
            get {
                return this.additionalGridTopologyField;
            }
            set {
                this.additionalGridTopologyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Activation {
        
        private AbstractIntegerArray activationToggleIndicesField;
        
        private DataObjectReference timeSeriesField;
        
        /// <remarks/>
        /// <summary>The index in the time series at which the state of the referencing object is changed. Toggle will change state from inactive to active, or toggle will change state from active to inactive.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index in the time series at which the state of the referencing object is chan" +
            "ged. Toggle will change state from inactive to active, or toggle will change sta" +
            "te from active to inactive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivationToggleIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray ActivationToggleIndices {
            get {
                return this.activationToggleIndicesField;
            }
            set {
                this.activationToggleIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSeries", DataType="DataObjectReference")]
        public DataObjectReference TimeSeries {
            get {
                return this.timeSeriesField;
            }
            set {
                this.timeSeriesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class FaultThrow {
        
        private ThrowKind[] throwField;
        
        private TimeInterval hasOccuredDuringField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Throw")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Throw", DataType="ThrowKind")]
        public ThrowKind[] Throw {
            get {
                return this.throwField;
            }
            set {
                this.throwField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HasOccuredDuring", DataType="TimeInterval")]
        public TimeInterval HasOccuredDuring {
            get {
                return this.hasOccuredDuringField;
            }
            set {
                this.hasOccuredDuringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ThrowKind {
        
        /// <remarks/>
        reverse,
        
        /// <remarks/>
        normal,
        
        /// <remarks/>
        thrust,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("strike and slip")]
        strikeandslip,
        
        /// <remarks/>
        scissor,
        
        /// <remarks/>
        variable,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TimeInterval {
        
        private DataObjectReference chronoBottomField;
        
        private DataObjectReference chronoTopField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChronoBottom", DataType="DataObjectReference")]
        public DataObjectReference ChronoBottom {
            get {
                return this.chronoBottomField;
            }
            set {
                this.chronoBottomField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChronoTop", DataType="DataObjectReference")]
        public DataObjectReference ChronoTop {
            get {
                return this.chronoTopField;
            }
            set {
                this.chronoTopField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class LengthMeasure {
        
        private LengthUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft")]
        Item01ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 ft[US]")]
        Item01ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 in")]
        Item01in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 yd")]
        Item01yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/16 in")]
        Item116in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ft")]
        Item12ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/32 in")]
        Item132in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/64 in")]
        Item164in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 ft")]
        Item10ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 in")]
        Item10in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 km")]
        Item10km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ft")]
        Item100ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 km")]
        Item100km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft")]
        Item1000ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 ft")]
        Item30ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("30 m")]
        Item30m,
        
        /// <remarks/>
        angstrom,
        
        /// <remarks/>
        chain,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnA]")]
        chainBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[BnB]")]
        chainBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Cla]")]
        chainCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Ind37]")]
        chainInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[Se]")]
        chainSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[SeT]")]
        chainSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("chain[US]")]
        chainUS,
        
        /// <remarks/>
        cm,
        
        /// <remarks/>
        dam,
        
        /// <remarks/>
        dm,
        
        /// <remarks/>
        Em,
        
        /// <remarks/>
        fathom,
        
        /// <remarks/>
        fm,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnA]")]
        ftBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[BnB]")]
        ftBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br36]")]
        ftBr36,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Br65]")]
        ftBr65,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Cla]")]
        ftCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[GC]")]
        ftGC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind]")]
        ftInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind37]")]
        ftInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind62]")]
        ftInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Ind75]")]
        ftInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[Se]")]
        ftSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[SeT]")]
        ftSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft[US]")]
        ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fur[US]")]
        furUS,
        
        /// <remarks/>
        Gm,
        
        /// <remarks/>
        hm,
        
        /// <remarks/>
        @in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in[US]")]
        inUS,
        
        /// <remarks/>
        km,
        
        /// <remarks/>
        link,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnA]")]
        linkBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[BnB]")]
        linkBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Cla]")]
        linkCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[Se]")]
        linkSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[SeT]")]
        linkSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("link[US]")]
        linkUS,
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m[Ger]")]
        mGer,
        
        /// <remarks/>
        mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[naut]")]
        minaut,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[nautUK]")]
        minautUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]")]
        miUS,
        
        /// <remarks/>
        mil,
        
        /// <remarks/>
        Mm,
        
        /// <remarks/>
        mm,
        
        /// <remarks/>
        nm,
        
        /// <remarks/>
        pm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rod[US]")]
        rodUS,
        
        /// <remarks/>
        Tm,
        
        /// <remarks/>
        um,
        
        /// <remarks/>
        yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnA]")]
        ydBnA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[BnB]")]
        ydBnB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Cla]")]
        ydCla,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind]")]
        ydInd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind37]")]
        ydInd37,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind62]")]
        ydInd62,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Ind75]")]
        ydInd75,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[Se]")]
        ydSe,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[SeT]")]
        ydSeT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("yd[US]")]
        ydUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class GeologicUnitInterpretationIndex {
        
        private string indexField;
        
        private DataObjectReference unitField;
        
        /// <remarks/>
        /// <summary>An index value associated to an instance of this type interpretation, given a specific ordering criteria.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An index value associated to an instance of this type interpretation, given a spe" +
            "cific ordering criteria.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="DataObjectReference")]
        public DataObjectReference Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class StratigraphicUnitInterpretationIndex {
        
        private string indexField;
        
        private DataObjectReference unitField;
        
        /// <remarks/>
        /// <summary>An index value associated to an instance of this type of interpretation, given a specific ordering criteria.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An index value associated to an instance of this type of interpretation, given a " +
            "specific ordering criteria.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unit", DataType="DataObjectReference")]
        public DataObjectReference Unit {
            get {
                return this.unitField;
            }
            set {
                this.unitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class HorizonInterpretationIndex {
        
        private string indexField;
        
        private string stratigraphicRankField;
        
        private DataObjectReference horizonField;
        
        /// <remarks/>
        /// <summary>An index value associated to an instance of this type of interpretation, given a specific ordering criteria</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("An index value associated to an instance of this type of interpretation, given a " +
            "specific ordering criteria")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of the stratigraphic rank on which the previous indices have been defined.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("Number of the stratigraphic rank on which the previous indices have been defined." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StratigraphicRank", DataType="nonNegativeInteger")]
        public string StratigraphicRank {
            get {
                return this.stratigraphicRankField;
            }
            set {
                this.stratigraphicRankField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Horizon", DataType="DataObjectReference")]
        public DataObjectReference Horizon {
            get {
                return this.horizonField;
            }
            set {
                this.horizonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class RockFluidUnitInterpretationIndex {
        
        private string indexField;
        
        private DataObjectReference rockFluidUnitField;
        
        /// <remarks/>
        /// <summary>Index of the fluid feature interpretation.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Index of the fluid feature interpretation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RockFluidUnit", DataType="DataObjectReference")]
        public DataObjectReference RockFluidUnit {
            get {
                return this.rockFluidUnitField;
            }
            set {
                this.rockFluidUnitField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultipleContactInterpretationPart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BinaryContactInterpretationPart))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractContactInterpretationPart {
        
        private ContactRelationship contactRelationshipField;
        
        private string indexField;
        
        private DataObjectReference partOfField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContactRelationship", DataType="ContactRelationship")]
        public ContactRelationship ContactRelationship {
            get {
                return this.contactRelationshipField;
            }
            set {
                this.contactRelationshipField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>contact index</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("contact index")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PartOf", DataType="DataObjectReference")]
        public DataObjectReference PartOf {
            get {
                return this.partOfField;
            }
            set {
                this.partOfField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ContactRelationship {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("frontier feature to frontier feature")]
        frontierfeaturetofrontierfeature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("genetic boundary to frontier feature")]
        geneticboundarytofrontierfeature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("genetic boundary to genetic boundary")]
        geneticboundarytogeneticboundary,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("genetic boundary to tectonic boundary")]
        geneticboundarytotectonicboundary,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stratigraphic unit to frontier feature")]
        stratigraphicunittofrontierfeature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stratigraphic unit to stratigraphic unit")]
        stratigraphicunittostratigraphicunit,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tectonic boundary to frontier feature")]
        tectonicboundarytofrontierfeature,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tectonic boundary to genetic boundary")]
        tectonicboundarytogeneticboundary,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tectonic boundary to tectonic boundary")]
        tectonicboundarytotectonicboundary,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class MultipleContactInterpretationPart : AbstractContactInterpretationPart {
        
        private string[] withField;
        
        /// <remarks/>
        /// <summary>Indicates a list of binary contacts (by their UUIDs) that participate in this multiple contact.</summary>
        [System.Xml.Serialization.XmlElementAttribute("With", DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates a list of binary contacts (by their UUIDs) that participate in this mul" +
            "tiple contact.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("With", DataType="nonNegativeInteger")]
        public string[] With {
            get {
                return this.withField;
            }
            set {
                this.withField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class BinaryContactInterpretationPart : AbstractContactInterpretationPart {
        
        private ContactElementReference directObjectField;
        
        private ContactVerb verbField;
        
        private ContactElementReference subjectField;
        
        /// <remarks/>
        /// <summary>Data-object reference (by UUID link) to a geologic feature interpretation, which is the direct object of the sentence that defines how the contact was constructed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Data-object reference (by UUID link) to a geologic feature interpretation, which " +
            "is the direct object of the sentence that defines how the contact was constructe" +
            "d.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DirectObject", DataType="ContactElementReference")]
        public ContactElementReference DirectObject {
            get {
                return this.directObjectField;
            }
            set {
                this.directObjectField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Verb", DataType="ContactVerb")]
        public ContactVerb Verb {
            get {
                return this.verbField;
            }
            set {
                this.verbField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Data-object reference (by UUID link) to a geologic feature interpretation, which is the subject of the sentence that defines how the contact was constructed.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Data-object reference (by UUID link) to a geologic feature interpretation, which " +
            "is the subject of the sentence that defines how the contact was constructed.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Subject", DataType="ContactElementReference")]
        public ContactElementReference Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum ContactVerb {
        
        /// <remarks/>
        splits,
        
        /// <remarks/>
        interrupts,
        
        /// <remarks/>
        contains,
        
        /// <remarks/>
        conforms,
        
        /// <remarks/>
        erodes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("stops at")]
        stopsat,
        
        /// <remarks/>
        crosses,
        
        /// <remarks/>
        includes,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class ChronostratigraphicRank {
        
        private string nameField;
        
        private DataObjectReference[] containsField;
        
        /// <remarks/>
        /// <summary>Name of the chrono rank such as "epoch, era, ..."</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [System.ComponentModel.DescriptionAttribute("Name of the chrono rank such as \"epoch, era, ...\"")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="NameString")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Contains")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Contains", DataType="DataObjectReference")]
        public DataObjectReference[] Contains {
            get {
                return this.containsField;
            }
            set {
                this.containsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class WitsmlWellboreReference {
        
        private DataObjectReference witsmlWellField;
        
        private DataObjectReference witsmlWellboreField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WitsmlWell", DataType="DataObjectReference")]
        public DataObjectReference WitsmlWell {
            get {
                return this.witsmlWellField;
            }
            set {
                this.witsmlWellField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WitsmlWellbore", DataType="DataObjectReference")]
        public DataObjectReference WitsmlWellbore {
            get {
                return this.witsmlWellboreField;
            }
            set {
                this.witsmlWellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class TimeSeriesParentage {
        
        private bool hasOverlapField;
        
        private TimeIndex parentTimeIndexField;
        
        /// <remarks/>
        /// <summary>Used to indicate that a time series overlaps with its parent time series, e.g., as may be done for simulation studies, where the end state of one calculation is the initial state of the next.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Used to indicate that a time series overlaps with its parent time series, e.g., a" +
            "s may be done for simulation studies, where the end state of one calculation is " +
            "the initial state of the next.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HasOverlap", DataType="boolean")]
        public bool HasOverlap {
            get {
                return this.hasOverlapField;
            }
            set {
                this.hasOverlapField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentTimeIndex", DataType="TimeIndex")]
        public TimeIndex ParentTimeIndex {
            get {
                return this.parentTimeIndexField;
            }
            set {
                this.parentTimeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class Timestamp {
        
        private System.DateTime dateTimeField;
        
        private long yearOffsetField;
        
        private bool yearOffsetFieldSpecified;
        
        /// <remarks/>
        /// <summary>A date which can be represented according to the W3CDTF format.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A date which can be represented according to the W3CDTF format.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DateTime", DataType="dateTime")]
        public System.DateTime DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates that the dateTime attribute must be translated according to this value.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicates that the dateTime attribute must be translated according to this value." +
            "")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("YearOffset", DataType="long")]
        public long YearOffset {
            get {
                return this.yearOffsetField;
            }
            set {
                this.yearOffsetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool YearOffsetSpecified {
            get {
                return this.yearOffsetFieldSpecified;
            }
            set {
                this.yearOffsetFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class PlaneAngleMeasure {
        
        private PlaneAngleUom uomField;
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="PlaneAngleUom")]
        public PlaneAngleUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PlaneAngleUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 seca")]
        Item0001seca,
        
        /// <remarks/>
        ccgr,
        
        /// <remarks/>
        cgr,
        
        /// <remarks/>
        dega,
        
        /// <remarks/>
        gon,
        
        /// <remarks/>
        krad,
        
        /// <remarks/>
        mila,
        
        /// <remarks/>
        mina,
        
        /// <remarks/>
        Mrad,
        
        /// <remarks/>
        mrad,
        
        /// <remarks/>
        rad,
        
        /// <remarks/>
        rev,
        
        /// <remarks/>
        seca,
        
        /// <remarks/>
        urad,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class NameValuePair {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        /// <summary>Name of the metadata information.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Name of the metadata information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Name", DataType="string")]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Value of the metadata information.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Value of the metadata information.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="string")]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GmlVerticalCrsDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrsEpsgCode))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractVerticalCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalUnknownCrs : AbstractVerticalCrs {
        
        private string unknownField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(256)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unknown", DataType="DescriptionString")]
        public string Unknown {
            get {
                return this.unknownField;
            }
            set {
                this.unknownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GmlVerticalCrsDefinition : AbstractVerticalCrs {
        
        private VerticalCRSType gmlVerticalCrsDefinition1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GmlVerticalCrsDefinition")]
        public VerticalCRSType GmlVerticalCrsDefinition1 {
            get {
                return this.gmlVerticalCrsDefinition1Field;
            }
            set {
                this.gmlVerticalCrsDefinition1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCRSType : AbstractCRSType {
        
        private VerticalCSPropertyType verticalCSField;
        
        private VerticalDatumPropertyType verticalDatumField;
        
        /// <remarks/>
        public VerticalCSPropertyType verticalCS {
            get {
                return this.verticalCSField;
            }
            set {
                this.verticalCSField = value;
            }
        }
        
        /// <remarks/>
        public VerticalDatumPropertyType verticalDatum {
            get {
                return this.verticalDatumField;
            }
            set {
                this.verticalDatumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCSPropertyType {
        
        private VerticalCSType verticalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public VerticalCSType VerticalCS {
            get {
                return this.verticalCSField;
            }
            set {
                this.verticalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCoordinateSystem", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCoordinateSystemType : IdentifiedObjectType {
        
        private CoordinateSystemAxisPropertyType[] axisField;
        
        private AggregationType aggregationTypeField;
        
        private bool aggregationTypeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("axis")]
        public CoordinateSystemAxisPropertyType[] axis {
            get {
                return this.axisField;
            }
            set {
                this.axisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("aggregationType", DataType="AggregationType")]
        public AggregationType aggregationType {
            get {
                return this.aggregationTypeField;
            }
            set {
                this.aggregationTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool aggregationTypeSpecified {
            get {
                return this.aggregationTypeFieldSpecified;
            }
            set {
                this.aggregationTypeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("axis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CoordinateSystemAxisPropertyType {
        
        private CoordinateSystemAxisType coordinateSystemAxisField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CoordinateSystemAxisType CoordinateSystemAxis {
            get {
                return this.coordinateSystemAxisField;
            }
            set {
                this.coordinateSystemAxisField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CoordinateSystemAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CoordinateSystemAxisType : IdentifiedObjectType {
        
        private CodeType axisAbbrevField;
        
        private CodeWithAuthorityType axisDirectionField;
        
        private double minimumValueField;
        
        private bool minimumValueFieldSpecified;
        
        private double maximumValueField;
        
        private bool maximumValueFieldSpecified;
        
        private CodeWithAuthorityType rangeMeaningField;
        
        /// <remarks/>
        public CodeType axisAbbrev {
            get {
                return this.axisAbbrevField;
            }
            set {
                this.axisAbbrevField = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType axisDirection {
            get {
                return this.axisDirectionField;
            }
            set {
                this.axisDirectionField = value;
            }
        }
        
        /// <remarks/>
        public double minimumValue {
            get {
                return this.minimumValueField;
            }
            set {
                this.minimumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minimumValueSpecified {
            get {
                return this.minimumValueFieldSpecified;
            }
            set {
                this.minimumValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double maximumValue {
            get {
                return this.maximumValueField;
            }
            set {
                this.maximumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maximumValueSpecified {
            get {
                return this.maximumValueFieldSpecified;
            }
            set {
                this.maximumValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType rangeMeaning {
            get {
                return this.rangeMeaningField;
            }
            set {
                this.rangeMeaningField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeWithAuthorityType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("name", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CodeType {
        
        private string codeSpaceField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeSpace", DataType="anyURI")]
        public string codeSpace {
            get {
                return this.codeSpaceField;
            }
            set {
                this.codeSpaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("identifier", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CodeWithAuthorityType : CodeType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public abstract partial class IdentifiedObjectType : DefinitionType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Definition", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class DefinitionType : DefinitionBaseType {
        
        private string remarksField;
        
        /// <remarks/>
        public string remarks {
            get {
                return this.remarksField;
            }
            set {
                this.remarksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class DefinitionBaseType : AbstractGMLType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimeObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGML", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGMLType {
        
        private StringOrRefType descriptionField;
        
        private ReferenceType descriptionReferenceField;
        
        private CodeWithAuthorityType identifierField;
        
        private CodeType[] nameField;
        
        private string idField;
        
        /// <remarks/>
        public StringOrRefType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public ReferenceType descriptionReference {
            get {
                return this.descriptionReferenceField;
            }
            set {
                this.descriptionReferenceField = value;
            }
        }
        
        /// <remarks/>
        public CodeWithAuthorityType identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("name")]
        public CodeType[] name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("description", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class StringOrRefType {
        
        private string nilReasonField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("descriptionReference", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class ReferenceType {
        
        private bool ownsField;
        
        private string nilReasonField;
        
        public ReferenceType() {
            this.ownsField = false;
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("owns", DataType="boolean")]
        public bool owns {
            get {
                return this.ownsField;
            }
            set {
                this.ownsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimeObject", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractTimeObjectType : AbstractGMLType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractTimePrimitiveType : AbstractTimeObjectType {
        
        private RelatedTimeType[] relatedTimeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("relatedTime")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("relatedTime", DataType="RelatedTimeType")]
        public RelatedTimeType[] relatedTime {
            get {
                return this.relatedTimeField;
            }
            set {
                this.relatedTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class RelatedTimeType : TimePrimitivePropertyType {
        
        private RelatedTimeTypeRelativePosition relativePositionField;
        
        private bool relativePositionFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public RelatedTimeTypeRelativePosition relativePosition {
            get {
                return this.relativePositionField;
            }
            set {
                this.relativePositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool relativePositionSpecified {
            get {
                return this.relativePositionFieldSpecified;
            }
            set {
                this.relativePositionFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    public enum RelatedTimeTypeRelativePosition {
        
        /// <remarks/>
        Before,
        
        /// <remarks/>
        After,
        
        /// <remarks/>
        Begins,
        
        /// <remarks/>
        Ends,
        
        /// <remarks/>
        During,
        
        /// <remarks/>
        Equals,
        
        /// <remarks/>
        Contains,
        
        /// <remarks/>
        Overlaps,
        
        /// <remarks/>
        Meets,
        
        /// <remarks/>
        OverlappedBy,
        
        /// <remarks/>
        MetBy,
        
        /// <remarks/>
        BegunBy,
        
        /// <remarks/>
        EndedBy,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedTimeType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class TimePrimitivePropertyType {
        
        private AbstractTimePrimitiveType abstractTimePrimitiveField;
        
        private string nilReasonField;
        
        private bool ownsField;
        
        public TimePrimitivePropertyType() {
            this.ownsField = false;
        }
        
        /// <remarks/>
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return this.abstractTimePrimitiveField;
            }
            set {
                this.abstractTimePrimitiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("owns", DataType="boolean")]
        public bool owns {
            get {
                return this.ownsField;
            }
            set {
                this.ownsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOperation", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCoordinateOperationType : IdentifiedObjectType {
        
        private domainOfValidity domainOfValidityField;
        
        private string[] scopeField;
        
        private string operationVersionField;
        
        private coordinateOperationAccuracy[] coordinateOperationAccuracyField;
        
        private CRSPropertyType sourceCRSField;
        
        private CRSPropertyType targetCRSField;
        
        /// <remarks/>
        public domainOfValidity domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
        
        /// <remarks/>
        public string operationVersion {
            get {
                return this.operationVersionField;
            }
            set {
                this.operationVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("coordinateOperationAccuracy")]
        public coordinateOperationAccuracy[] coordinateOperationAccuracy {
            get {
                return this.coordinateOperationAccuracyField;
            }
            set {
                this.coordinateOperationAccuracyField = value;
            }
        }
        
        /// <remarks/>
        public CRSPropertyType sourceCRS {
            get {
                return this.sourceCRSField;
            }
            set {
                this.sourceCRSField = value;
            }
        }
        
        /// <remarks/>
        public CRSPropertyType targetCRS {
            get {
                return this.targetCRSField;
            }
            set {
                this.targetCRSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class domainOfValidity {
        
        private EX_Extent_Type eX_ExtentField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
        public EX_Extent_Type EX_Extent {
            get {
                return this.eX_ExtentField;
            }
            set {
                this.eX_ExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_Extent_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType descriptionField;
        
        private EX_GeographicExtent_PropertyType[] geographicElementField;
        
        private EX_TemporalExtent_PropertyType[] temporalElementField;
        
        private EX_VerticalExtent_PropertyType[] verticalElementField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("description", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("geographicElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("geographicElement", DataType="EX_GeographicExtent_PropertyType")]
        public EX_GeographicExtent_PropertyType[] geographicElement {
            get {
                return this.geographicElementField;
            }
            set {
                this.geographicElementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("temporalElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("temporalElement", DataType="EX_TemporalExtent_PropertyType")]
        public EX_TemporalExtent_PropertyType[] temporalElement {
            get {
                return this.temporalElementField;
            }
            set {
                this.temporalElementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("verticalElement")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("verticalElement", DataType="EX_VerticalExtent_PropertyType")]
        public EX_VerticalExtent_PropertyType[] verticalElement {
            get {
                return this.verticalElementField;
            }
            set {
                this.verticalElementField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class CharacterString_PropertyType {
        
        private string characterStringField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public string CharacterString {
            get {
                return this.characterStringField;
            }
            set {
                this.characterStringField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_GeographicExtent_PropertyType {
        
        private AbstractEX_GeographicExtent_Type abstractEX_GeographicExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtent {
            get {
                return this.abstractEX_GeographicExtentField;
            }
            set {
                this.abstractEX_GeographicExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractEX_GeographicExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractEX_GeographicExtent_Type : AbstractObject_Type {
        
        private Boolean_PropertyType extentTypeCodeField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("extentTypeCode", DataType="Boolean_PropertyType")]
        public Boolean_PropertyType extentTypeCode {
            get {
                return this.extentTypeCodeField;
            }
            set {
                this.extentTypeCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Boolean_PropertyType {
        
        private bool booleanField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public bool Boolean {
            get {
                return this.booleanField;
            }
            set {
                this.booleanField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Result_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Series_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_OnlineResource_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Address_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Telephone_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Contact_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_ResponsibleParty_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Date_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Citation_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MD_Identifier_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Element_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_VerticalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_TemporalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractEX_GeographicExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_Extent_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public abstract partial class AbstractObject_Type {
        
        private string idField;
        
        private string uuidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="ID")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("id", DataType="ID")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuid", DataType="string")]
        public string uuid {
            get {
                return this.uuidField;
            }
            set {
                this.uuidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Result", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_Result_Type : AbstractObject_Type {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Series", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Series_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType nameField;
        
        private CharacterString_PropertyType issueIdentificationField;
        
        private CharacterString_PropertyType pageField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("issueIdentification", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType issueIdentification {
            get {
                return this.issueIdentificationField;
            }
            set {
                this.issueIdentificationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("page", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType page {
            get {
                return this.pageField;
            }
            set {
                this.pageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_OnlineResource", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_OnlineResource_Type : AbstractObject_Type {
        
        private URL_PropertyType linkageField;
        
        private CharacterString_PropertyType protocolField;
        
        private CharacterString_PropertyType applicationProfileField;
        
        private CharacterString_PropertyType nameField;
        
        private CharacterString_PropertyType descriptionField;
        
        private CI_OnLineFunctionCode_PropertyType functionField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("linkage", DataType="URL_PropertyType")]
        public URL_PropertyType linkage {
            get {
                return this.linkageField;
            }
            set {
                this.linkageField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("protocol", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType protocol {
            get {
                return this.protocolField;
            }
            set {
                this.protocolField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("applicationProfile", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType applicationProfile {
            get {
                return this.applicationProfileField;
            }
            set {
                this.applicationProfileField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("name", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("description", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("function", DataType="CI_OnLineFunctionCode_PropertyType")]
        public CI_OnLineFunctionCode_PropertyType function {
            get {
                return this.functionField;
            }
            set {
                this.functionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class URL_PropertyType {
        
        private string uRLField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        public string URL {
            get {
                return this.uRLField;
            }
            set {
                this.uRLField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_OnLineFunctionCode_PropertyType {
        
        private CodeListValue_Type cI_OnLineFunctionCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_OnLineFunctionCode {
            get {
                return this.cI_OnLineFunctionCodeField;
            }
            set {
                this.cI_OnLineFunctionCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    [System.Xml.Serialization.XmlRootAttribute("CI_DateTypeCode", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CodeListValue_Type {
        
        private string codeListField;
        
        private string codeListValueField;
        
        private string codeSpaceField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeList", DataType="anyURI")]
        public string codeList {
            get {
                return this.codeListField;
            }
            set {
                this.codeListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeListValue", DataType="anyURI")]
        public string codeListValue {
            get {
                return this.codeListValueField;
            }
            set {
                this.codeListValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="anyURI")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("codeSpace", DataType="anyURI")]
        public string codeSpace {
            get {
                return this.codeSpaceField;
            }
            set {
                this.codeSpaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Address", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Address_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] deliveryPointField;
        
        private CharacterString_PropertyType cityField;
        
        private CharacterString_PropertyType administrativeAreaField;
        
        private CharacterString_PropertyType postalCodeField;
        
        private CharacterString_PropertyType countryField;
        
        private CharacterString_PropertyType[] electronicMailAddressField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("deliveryPoint")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("deliveryPoint", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] deliveryPoint {
            get {
                return this.deliveryPointField;
            }
            set {
                this.deliveryPointField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("city", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("administrativeArea", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType administrativeArea {
            get {
                return this.administrativeAreaField;
            }
            set {
                this.administrativeAreaField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("postalCode", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType postalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("country", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("electronicMailAddress")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("electronicMailAddress", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] electronicMailAddress {
            get {
                return this.electronicMailAddressField;
            }
            set {
                this.electronicMailAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Telephone", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Telephone_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] voiceField;
        
        private CharacterString_PropertyType[] facsimileField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("voice")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("voice", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] voice {
            get {
                return this.voiceField;
            }
            set {
                this.voiceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("facsimile")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("facsimile", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] facsimile {
            get {
                return this.facsimileField;
            }
            set {
                this.facsimileField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Contact", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Contact_Type : AbstractObject_Type {
        
        private CI_Telephone_PropertyType phoneField;
        
        private CI_Address_PropertyType addressField;
        
        private CI_OnlineResource_PropertyType onlineResourceField;
        
        private CharacterString_PropertyType hoursOfServiceField;
        
        private CharacterString_PropertyType contactInstructionsField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("phone", DataType="CI_Telephone_PropertyType")]
        public CI_Telephone_PropertyType phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("address", DataType="CI_Address_PropertyType")]
        public CI_Address_PropertyType address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("onlineResource", DataType="CI_OnlineResource_PropertyType")]
        public CI_OnlineResource_PropertyType onlineResource {
            get {
                return this.onlineResourceField;
            }
            set {
                this.onlineResourceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("hoursOfService", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType hoursOfService {
            get {
                return this.hoursOfServiceField;
            }
            set {
                this.hoursOfServiceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("contactInstructions", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType contactInstructions {
            get {
                return this.contactInstructionsField;
            }
            set {
                this.contactInstructionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Telephone_PropertyType {
        
        private CI_Telephone_Type cI_TelephoneField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Telephone_Type CI_Telephone {
            get {
                return this.cI_TelephoneField;
            }
            set {
                this.cI_TelephoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Address_PropertyType {
        
        private CI_Address_Type cI_AddressField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Address_Type CI_Address {
            get {
                return this.cI_AddressField;
            }
            set {
                this.cI_AddressField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_OnlineResource_PropertyType {
        
        private CI_OnlineResource_Type cI_OnlineResourceField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_OnlineResource_Type CI_OnlineResource {
            get {
                return this.cI_OnlineResourceField;
            }
            set {
                this.cI_OnlineResourceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_ResponsibleParty", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_ResponsibleParty_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType individualNameField;
        
        private CharacterString_PropertyType organisationNameField;
        
        private CharacterString_PropertyType positionNameField;
        
        private CI_Contact_PropertyType contactInfoField;
        
        private CI_RoleCode_PropertyType roleField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("individualName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType individualName {
            get {
                return this.individualNameField;
            }
            set {
                this.individualNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("organisationName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType organisationName {
            get {
                return this.organisationNameField;
            }
            set {
                this.organisationNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("positionName", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType positionName {
            get {
                return this.positionNameField;
            }
            set {
                this.positionNameField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("contactInfo", DataType="CI_Contact_PropertyType")]
        public CI_Contact_PropertyType contactInfo {
            get {
                return this.contactInfoField;
            }
            set {
                this.contactInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("role", DataType="CI_RoleCode_PropertyType")]
        public CI_RoleCode_PropertyType role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Contact_PropertyType {
        
        private CI_Contact_Type cI_ContactField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Contact_Type CI_Contact {
            get {
                return this.cI_ContactField;
            }
            set {
                this.cI_ContactField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_RoleCode_PropertyType {
        
        private CodeListValue_Type cI_RoleCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_RoleCode {
            get {
                return this.cI_RoleCodeField;
            }
            set {
                this.cI_RoleCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Date", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Date_Type : AbstractObject_Type {
        
        private Date_PropertyType dateField;
        
        private CI_DateTypeCode_PropertyType dateTypeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("date", DataType="Date_PropertyType")]
        public Date_PropertyType date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dateType", DataType="CI_DateTypeCode_PropertyType")]
        public CI_DateTypeCode_PropertyType dateType {
            get {
                return this.dateTypeField;
            }
            set {
                this.dateTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Date_PropertyType {
        
        private object itemField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Date", typeof(string), IsNullable=true)]
        [System.Xml.Serialization.XmlElementAttribute("DateTime", typeof(System.DateTime))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_DateTypeCode_PropertyType {
        
        private CodeListValue_Type cI_DateTypeCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_DateTypeCode {
            get {
                return this.cI_DateTypeCodeField;
            }
            set {
                this.cI_DateTypeCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Citation", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class CI_Citation_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType titleField;
        
        private CharacterString_PropertyType[] alternateTitleField;
        
        private CI_Date_PropertyType[] dateField;
        
        private CharacterString_PropertyType editionField;
        
        private Date_PropertyType editionDateField;
        
        private MD_Identifier_PropertyType[] identifierField;
        
        private CI_ResponsibleParty_PropertyType[] citedResponsiblePartyField;
        
        private CI_PresentationFormCode_PropertyType[] presentationFormField;
        
        private CI_Series_PropertyType seriesField;
        
        private CharacterString_PropertyType otherCitationDetailsField;
        
        private CharacterString_PropertyType collectiveTitleField;
        
        private CharacterString_PropertyType iSBNField;
        
        private CharacterString_PropertyType iSSNField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("title", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("alternateTitle")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("alternateTitle", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] alternateTitle {
            get {
                return this.alternateTitleField;
            }
            set {
                this.alternateTitleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("date")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("date", DataType="CI_Date_PropertyType")]
        public CI_Date_PropertyType[] date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("edition", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType edition {
            get {
                return this.editionField;
            }
            set {
                this.editionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("editionDate", DataType="Date_PropertyType")]
        public Date_PropertyType editionDate {
            get {
                return this.editionDateField;
            }
            set {
                this.editionDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("identifier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("identifier", DataType="MD_Identifier_PropertyType")]
        public MD_Identifier_PropertyType[] identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("citedResponsibleParty")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("citedResponsibleParty", DataType="CI_ResponsibleParty_PropertyType")]
        public CI_ResponsibleParty_PropertyType[] citedResponsibleParty {
            get {
                return this.citedResponsiblePartyField;
            }
            set {
                this.citedResponsiblePartyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("presentationForm")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("presentationForm", DataType="CI_PresentationFormCode_PropertyType")]
        public CI_PresentationFormCode_PropertyType[] presentationForm {
            get {
                return this.presentationFormField;
            }
            set {
                this.presentationFormField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("series", DataType="CI_Series_PropertyType")]
        public CI_Series_PropertyType series {
            get {
                return this.seriesField;
            }
            set {
                this.seriesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("otherCitationDetails", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType otherCitationDetails {
            get {
                return this.otherCitationDetailsField;
            }
            set {
                this.otherCitationDetailsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("collectiveTitle", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType collectiveTitle {
            get {
                return this.collectiveTitleField;
            }
            set {
                this.collectiveTitleField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ISBN", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType ISBN {
            get {
                return this.iSBNField;
            }
            set {
                this.iSBNField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ISSN", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType ISSN {
            get {
                return this.iSSNField;
            }
            set {
                this.iSSNField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Date_PropertyType {
        
        private CI_Date_Type cI_DateField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Date_Type CI_Date {
            get {
                return this.cI_DateField;
            }
            set {
                this.cI_DateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class MD_Identifier_PropertyType {
        
        private MD_Identifier_Type mD_IdentifierField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public MD_Identifier_Type MD_Identifier {
            get {
                return this.mD_IdentifierField;
            }
            set {
                this.mD_IdentifierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("MD_Identifier", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class MD_Identifier_Type : AbstractObject_Type {
        
        private CI_Citation_PropertyType authorityField;
        
        private CharacterString_PropertyType codeField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="CI_Citation_PropertyType")]
        public CI_Citation_PropertyType authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("code", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Citation_PropertyType {
        
        private CI_Citation_Type cI_CitationField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Citation_Type CI_Citation {
            get {
                return this.cI_CitationField;
            }
            set {
                this.cI_CitationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_ResponsibleParty_PropertyType {
        
        private CI_ResponsibleParty_Type cI_ResponsiblePartyField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_ResponsibleParty_Type CI_ResponsibleParty {
            get {
                return this.cI_ResponsiblePartyField;
            }
            set {
                this.cI_ResponsiblePartyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_PresentationFormCode_PropertyType {
        
        private CodeListValue_Type cI_PresentationFormCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type CI_PresentationFormCode {
            get {
                return this.cI_PresentationFormCodeField;
            }
            set {
                this.cI_PresentationFormCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class CI_Series_PropertyType {
        
        private CI_Series_Type cI_SeriesField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CI_Series_Type CI_Series {
            get {
                return this.cI_SeriesField;
            }
            set {
                this.cI_SeriesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Element", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_Element_Type : AbstractObject_Type {
        
        private CharacterString_PropertyType[] nameOfMeasureField;
        
        private MD_Identifier_PropertyType measureIdentificationField;
        
        private CharacterString_PropertyType measureDescriptionField;
        
        private DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodTypeField;
        
        private CharacterString_PropertyType evaluationMethodDescriptionField;
        
        private CI_Citation_PropertyType evaluationProcedureField;
        
        private DateTime_PropertyType[] dateTimeField;
        
        private DQ_Result_PropertyType[] resultField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("nameOfMeasure")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nameOfMeasure", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType[] nameOfMeasure {
            get {
                return this.nameOfMeasureField;
            }
            set {
                this.nameOfMeasureField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("measureIdentification", DataType="MD_Identifier_PropertyType")]
        public MD_Identifier_PropertyType measureIdentification {
            get {
                return this.measureIdentificationField;
            }
            set {
                this.measureIdentificationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("measureDescription", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType measureDescription {
            get {
                return this.measureDescriptionField;
            }
            set {
                this.measureDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationMethodType", DataType="DQ_EvaluationMethodTypeCode_PropertyType")]
        public DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodType {
            get {
                return this.evaluationMethodTypeField;
            }
            set {
                this.evaluationMethodTypeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationMethodDescription", DataType="CharacterString_PropertyType")]
        public CharacterString_PropertyType evaluationMethodDescription {
            get {
                return this.evaluationMethodDescriptionField;
            }
            set {
                this.evaluationMethodDescriptionField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("evaluationProcedure", DataType="CI_Citation_PropertyType")]
        public CI_Citation_PropertyType evaluationProcedure {
            get {
                return this.evaluationProcedureField;
            }
            set {
                this.evaluationProcedureField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("dateTime")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("dateTime", DataType="DateTime_PropertyType")]
        public DateTime_PropertyType[] dateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("result")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("result", DataType="DQ_Result_PropertyType")]
        public DQ_Result_PropertyType[] result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class DQ_EvaluationMethodTypeCode_PropertyType {
        
        private CodeListValue_Type dQ_EvaluationMethodTypeCodeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CodeListValue_Type DQ_EvaluationMethodTypeCode {
            get {
                return this.dQ_EvaluationMethodTypeCodeField;
            }
            set {
                this.dQ_EvaluationMethodTypeCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class DateTime_PropertyType {
        
        private System.DateTime dateTimeField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public System.DateTime DateTime {
            get {
                return this.dateTimeField;
            }
            set {
                this.dateTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class DQ_Result_PropertyType {
        
        private AbstractDQ_Result_Type abstractDQ_ResultField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractDQ_Result_Type AbstractDQ_Result {
            get {
                return this.abstractDQ_ResultField;
            }
            set {
                this.abstractDQ_ResultField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public abstract partial class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_VerticalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_VerticalExtent_Type : AbstractObject_Type {
        
        private Real_PropertyType minimumValueField;
        
        private Real_PropertyType maximumValueField;
        
        private SC_CRS_PropertyType verticalCRSField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("minimumValue", DataType="Real_PropertyType")]
        public Real_PropertyType minimumValue {
            get {
                return this.minimumValueField;
            }
            set {
                this.minimumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("maximumValue", DataType="Real_PropertyType")]
        public Real_PropertyType maximumValue {
            get {
                return this.maximumValueField;
            }
            set {
                this.maximumValueField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("verticalCRS", DataType="SC_CRS_PropertyType")]
        public SC_CRS_PropertyType verticalCRS {
            get {
                return this.verticalCRSField;
            }
            set {
                this.verticalCRSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    public partial class Real_PropertyType {
        
        private double realField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public double Real {
            get {
                return this.realField;
            }
            set {
                this.realField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified)]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gsr")]
    public partial class SC_CRS_PropertyType {
        
        private AbstractCRSType abstractCRSField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractCRSType AbstractCRS {
            get {
                return this.abstractCRSField;
            }
            set {
                this.abstractCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractCRSType : IdentifiedObjectType {
        
        private domainOfValidity[] domainOfValidityField;
        
        private string[] scopeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("domainOfValidity")]
        public domainOfValidity[] domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralDerivedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGeneralDerivedCRSType : AbstractCRSType {
        
        private GeneralConversionPropertyType conversionField;
        
        /// <remarks/>
        public GeneralConversionPropertyType conversion {
            get {
                return this.conversionField;
            }
            set {
                this.conversionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("conversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeneralConversionPropertyType {
        
        private AbstractGeneralConversionType abstractGeneralConversionField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractGeneralConversionType AbstractGeneralConversion {
            get {
                return this.abstractGeneralConversionField;
            }
            set {
                this.abstractGeneralConversionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralConversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractGeneralConversionType : AbstractCoordinateOperationType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class ProjectedCRSType : AbstractGeneralDerivedCRSType {
        
        private GeodeticCRSPropertyType itemField;
        
        private CartesianCSPropertyType cartesianCSField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("baseGeodeticCRS")]
        public GeodeticCRSPropertyType Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public CartesianCSPropertyType cartesianCS {
            get {
                return this.cartesianCSField;
            }
            set {
                this.cartesianCSField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("baseGeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticCRSPropertyType {
        
        private GeodeticCRSType geodeticCRSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public GeodeticCRSType GeodeticCRS {
            get {
                return this.geodeticCRSField;
            }
            set {
                this.geodeticCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticCRSType : AbstractCRSType {
        
        private object itemField;
        
        private GeodeticDatumPropertyType geodeticDatumField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("cartesianCS", typeof(CartesianCSPropertyType))]
        [System.Xml.Serialization.XmlElementAttribute("ellipsoidalCS", typeof(EllipsoidalCSPropertyType))]
        [System.Xml.Serialization.XmlElementAttribute("sphericalCS", typeof(SphericalCSPropertyType))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public GeodeticDatumPropertyType geodeticDatum {
            get {
                return this.geodeticDatumField;
            }
            set {
                this.geodeticDatumField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("cartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CartesianCSPropertyType {
        
        private CartesianCSType cartesianCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public CartesianCSType CartesianCS {
            get {
                return this.cartesianCSField;
            }
            set {
                this.cartesianCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CartesianCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidalCSPropertyType {
        
        private EllipsoidalCSType ellipsoidalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EllipsoidalCSType EllipsoidalCS {
            get {
                return this.ellipsoidalCSField;
            }
            set {
                this.ellipsoidalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("EllipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SphericalCSPropertyType {
        
        private SphericalCSType sphericalCSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public SphericalCSType SphericalCS {
            get {
                return this.sphericalCSField;
            }
            set {
                this.sphericalCSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("SphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SphericalCSType : AbstractCoordinateSystemType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("geodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticDatumPropertyType {
        
        private GeodeticDatumType geodeticDatumField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public GeodeticDatumType GeodeticDatum {
            get {
                return this.geodeticDatumField;
            }
            set {
                this.geodeticDatumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class GeodeticDatumType : AbstractDatumType {
        
        private PrimeMeridianPropertyType primeMeridianField;
        
        private EllipsoidPropertyType ellipsoidField;
        
        /// <remarks/>
        public PrimeMeridianPropertyType primeMeridian {
            get {
                return this.primeMeridianField;
            }
            set {
                this.primeMeridianField = value;
            }
        }
        
        /// <remarks/>
        public EllipsoidPropertyType ellipsoid {
            get {
                return this.ellipsoidField;
            }
            set {
                this.ellipsoidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("primeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class PrimeMeridianPropertyType {
        
        private PrimeMeridianType primeMeridianField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public PrimeMeridianType PrimeMeridian {
            get {
                return this.primeMeridianField;
            }
            set {
                this.primeMeridianField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("PrimeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class PrimeMeridianType : IdentifiedObjectType {
        
        private AngleType greenwichLongitudeField;
        
        /// <remarks/>
        public AngleType greenwichLongitude {
            get {
                return this.greenwichLongitudeField;
            }
            set {
                this.greenwichLongitudeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("greenwichLongitude", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class AngleType : MeasureType {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AngleType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("semiMajorAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class MeasureType {
        
        private double valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public partial class LengthType : MeasureType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidPropertyType {
        
        private EllipsoidType ellipsoidField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EllipsoidType Ellipsoid {
            get {
                return this.ellipsoidField;
            }
            set {
                this.ellipsoidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class EllipsoidType : IdentifiedObjectType {
        
        private MeasureType semiMajorAxisField;
        
        private secondDefiningParameter secondDefiningParameterField;
        
        /// <remarks/>
        public MeasureType semiMajorAxis {
            get {
                return this.semiMajorAxisField;
            }
            set {
                this.semiMajorAxisField = value;
            }
        }
        
        /// <remarks/>
        public secondDefiningParameter secondDefiningParameter {
            get {
                return this.secondDefiningParameterField;
            }
            set {
                this.secondDefiningParameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class secondDefiningParameter {
        
        private SecondDefiningParameter secondDefiningParameterField;
        
        /// <remarks/>
        public SecondDefiningParameter SecondDefiningParameter {
            get {
                return this.secondDefiningParameterField;
            }
            set {
                this.secondDefiningParameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class SecondDefiningParameter {
        
        private object itemField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("inverseFlattening", typeof(MeasureType))]
        [System.Xml.Serialization.XmlElementAttribute("isSphere", typeof(bool))]
        [System.Xml.Serialization.XmlElementAttribute("semiMinorAxis", typeof(LengthType))]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public abstract partial class AbstractDatumType : IdentifiedObjectType {
        
        private domainOfValidity domainOfValidityField;
        
        private string[] scopeField;
        
        private CodeType anchorDefinitionField;
        
        private System.DateTime realizationEpochField;
        
        private bool realizationEpochFieldSpecified;
        
        /// <remarks/>
        public domainOfValidity domainOfValidity {
            get {
                return this.domainOfValidityField;
            }
            set {
                this.domainOfValidityField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("scope")]
        public string[] scope {
            get {
                return this.scopeField;
            }
            set {
                this.scopeField = value;
            }
        }
        
        /// <remarks/>
        public CodeType anchorDefinition {
            get {
                return this.anchorDefinitionField;
            }
            set {
                this.anchorDefinitionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime realizationEpoch {
            get {
                return this.realizationEpochField;
            }
            set {
                this.realizationEpochField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool realizationEpochSpecified {
            get {
                return this.realizationEpochFieldSpecified;
            }
            set {
                this.realizationEpochFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalDatumType : AbstractDatumType {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_TemporalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
    public partial class EX_TemporalExtent_Type : AbstractObject_Type {
        
        private TM_Primitive_PropertyType extentField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("extent", DataType="TM_Primitive_PropertyType")]
        public TM_Primitive_PropertyType extent {
            get {
                return this.extentField;
            }
            set {
                this.extentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gts")]
    public partial class TM_Primitive_PropertyType {
        
        private AbstractTimePrimitiveType abstractTimePrimitiveField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return this.abstractTimePrimitiveField;
            }
            set {
                this.abstractTimePrimitiveField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_TemporalExtent_PropertyType {
        
        private EX_TemporalExtent_Type eX_TemporalExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EX_TemporalExtent_Type EX_TemporalExtent {
            get {
                return this.eX_TemporalExtentField;
            }
            set {
                this.eX_TemporalExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    public partial class EX_VerticalExtent_PropertyType {
        
        private EX_VerticalExtent_Type eX_VerticalExtentField;
        
        private string uuidrefField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public EX_VerticalExtent_Type EX_VerticalExtent {
            get {
                return this.eX_VerticalExtentField;
            }
            set {
                this.eX_VerticalExtentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uuidref", DataType="string")]
        public string uuidref {
            get {
                return this.uuidrefField;
            }
            set {
                this.uuidrefField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute(Form=System.Xml.Schema.XmlSchemaForm.Qualified, Namespace="http://www.isotc211.org/2005/gco")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class coordinateOperationAccuracy {
        
        private AbstractDQ_PositionalAccuracy_Type abstractDQ_PositionalAccuracyField;
        
        private string nilReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracy {
            get {
                return this.abstractDQ_PositionalAccuracyField;
            }
            set {
                this.abstractDQ_PositionalAccuracyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sourceCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class CRSPropertyType {
        
        private AbstractCRSType abstractCRSField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public AbstractCRSType AbstractCRS {
            get {
                return this.abstractCRSField;
            }
            set {
                this.abstractCRSField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    public enum AggregationType {
        
        /// <remarks/>
        set,
        
        /// <remarks/>
        bag,
        
        /// <remarks/>
        sequence,
        
        /// <remarks/>
        array,
        
        /// <remarks/>
        record,
        
        /// <remarks/>
        table,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
    public partial class VerticalDatumPropertyType {
        
        private VerticalDatumType verticalDatumField;
        
        private string nilReasonField;
        
        /// <remarks/>
        public VerticalDatumType VerticalDatum {
            get {
                return this.verticalDatumField;
            }
            set {
                this.verticalDatumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("nilReason", DataType="NilReasonType")]
        public string nilReason {
            get {
                return this.nilReasonField;
            }
            set {
                this.nilReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalCrsEpsgCode : AbstractVerticalCrs {
        
        private string epsgCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpsgCode", DataType="positiveInteger")]
        public string EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                this.epsgCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GmlProjectedCrsDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrsEpsgCode))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public abstract partial class AbstractProjectedCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedUnknownCrs : AbstractProjectedCrs {
        
        private string unknownField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(256)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Unknown", DataType="DescriptionString")]
        public string Unknown {
            get {
                return this.unknownField;
            }
            set {
                this.unknownField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class GmlProjectedCrsDefinition : AbstractProjectedCrs {
        
        private ProjectedCRSType gmlProjectedCrsDefinition1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GmlProjectedCrsDefinition")]
        public ProjectedCRSType GmlProjectedCrsDefinition1 {
            get {
                return this.gmlProjectedCrsDefinition1Field;
            }
            set {
                this.gmlProjectedCrsDefinition1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedCrsEpsgCode : AbstractProjectedCrs {
        
        private string epsgCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("EpsgCode", DataType="positiveInteger")]
        public string EpsgCode {
            get {
                return this.epsgCodeField;
            }
            set {
                this.epsgCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class CustomData {
        
        private System.Xml.XmlElement[] anyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement[] Any {
            get {
                return this.anyField;
            }
            set {
                this.anyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ObjectAlias {
        
        private string identifierField;
        
        private string descriptionField;
        
        private string authorityField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Identifier", DataType="string")]
        public string Identifier {
            get {
                return this.identifierField;
            }
            set {
                this.identifierField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(256)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Description", DataType="DescriptionString")]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(64)]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("authority", DataType="NameString")]
        public string authority {
            get {
                return this.authorityField;
            }
            set {
                this.authorityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractResqmlDataObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_MdDatum))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ActivityTemplate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Activity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractValuesProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscretePropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PointsProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PropertySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractPropertyLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StringTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DoubleTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TriangulatedSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PolylineRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PolylineSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PointSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreTrajectoryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BlockedWellboreRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DeviationSurveyRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SubRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RedefinedGeometryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RepresentationSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_NonSealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GridConnectionSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RepresentationIdentitySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalGridSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_EarthModelInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyBoundaryInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GenericFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GlobalChronostratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTechnicalFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FrontierFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeologicFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractLocal3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalDepth3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalTime3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_EpcExternalPartReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public abstract partial class AbstractCitedDataObject : AbstractObject {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_MdDatum))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ActivityTemplate))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Activity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractValuesProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscretePropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PointsProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PropertySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractPropertyLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StringTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DoubleTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TriangulatedSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PolylineRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PolylineSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PointSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreTrajectoryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BlockedWellboreRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DeviationSurveyRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SubRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RedefinedGeometryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RepresentationSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_NonSealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GridConnectionSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RepresentationIdentitySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalGridSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_EarthModelInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyBoundaryInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GenericFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GlobalChronostratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTechnicalFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FrontierFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeologicFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractLocal3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalDepth3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalTime3dCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractResqmlDataObject : AbstractCitedDataObject {
        
        private NameValuePair[] extraMetadataField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ExtraMetadata")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ExtraMetadata", DataType="NameValuePair")]
        public NameValuePair[] ExtraMetadata {
            get {
                return this.extraMetadataField;
            }
            set {
                this.extraMetadataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("MdDatum", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_MdDatum : AbstractResqmlDataObject {
        
        private Point3d locationField;
        
        private MdReference mdReferenceField;
        
        private DataObjectReference localCrsField;
        
        /// <remarks/>
        /// <summary>The location of the md reference point relative to a local CRS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The location of the md reference point relative to a local CRS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Location", DataType="Point3d")]
        public Point3d Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdReference", DataType="MdReference")]
        public MdReference MdReference {
            get {
                return this.mdReferenceField;
            }
            set {
                this.mdReferenceField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalCrs", DataType="DataObjectReference")]
        public DataObjectReference LocalCrs {
            get {
                return this.localCrsField;
            }
            set {
                this.localCrsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum MdReference {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ground level")]
        groundlevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kelly bushing")]
        kellybushing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean sea level")]
        meansealevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("derrick floor")]
        derrickfloor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("casing flange")]
        casingflange,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("arbitrary point")]
        arbitrarypoint,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("crown valve")]
        crownvalve,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rotary bushing")]
        rotarybushing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rotary table")]
        rotarytable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sea floor")]
        seafloor,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lowest astronomical tide")]
        lowestastronomicaltide,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean higher high water")]
        meanhigherhighwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean high water")]
        meanhighwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean lower low water")]
        meanlowerlowwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean low water")]
        meanlowwater,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mean tide level")]
        meantidelevel,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kickoff point")]
        kickoffpoint,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("ActivityTemplate", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_ActivityTemplate : AbstractResqmlDataObject {
        
        private ParameterTemplate[] parameterField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="ParameterTemplate")]
        public ParameterTemplate[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("Activity", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_Activity : AbstractResqmlDataObject {
        
        private DataObjectReference parentField;
        
        private DataObjectReference activityDescriptorField;
        
        private AbstractActivityParameter[] parameterField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parent", DataType="DataObjectReference")]
        public DataObjectReference Parent {
            get {
                return this.parentField;
            }
            set {
                this.parentField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ActivityDescriptor", DataType="DataObjectReference")]
        public DataObjectReference ActivityDescriptor {
            get {
                return this.activityDescriptorField;
            }
            set {
                this.activityDescriptorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Parameter")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Parameter", DataType="AbstractActivityParameter")]
        public AbstractActivityParameter[] Parameter {
            get {
                return this.parameterField;
            }
            set {
                this.parameterField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractValuesProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscretePropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PointsProperty))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractProperty : AbstractResqmlDataObject {
        
        private string countField;
        
        private IndexableElements indexableElementField;
        
        private string realizationIndexField;
        
        private string timeStepField;
        
        private TimeIndex timeIndexField;
        
        private DataObjectReference supportingRepresentationField;
        
        private DataObjectReference localCrsField;
        
        private AbstractPropertyKind propertyKindField;
        
        /// <remarks/>
        /// <summary>Number of elements in a 1D list of properties. When used in a multi-dimensional array, count is always the fastest.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of elements in a 1D list of properties. When used in a multi-dimensional a" +
            "rray, count is always the fastest.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IndexableElement", DataType="IndexableElements")]
        public IndexableElements IndexableElement {
            get {
                return this.indexableElementField;
            }
            set {
                this.indexableElementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Optional element indicating the realization index (metadata). Used if the property is the result of a multi-realization process.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("Optional element indicating the realization index (metadata). Used if the propert" +
            "y is the result of a multi-realization process.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RealizationIndex", DataType="nonNegativeInteger")]
        public string RealizationIndex {
            get {
                return this.realizationIndexField;
            }
            set {
                this.realizationIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates that the property is the output of a specific time step from a flow simulator. Time step is metadata that makes sense in the context of a specific simulation run, and should not be confused with the time index.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DescriptionAttribute("Indicates that the property is the output of a specific time step from a flow sim" +
            "ulator. Time step is metadata that makes sense in the context of a specific simu" +
            "lation run, and should not be confused with the time index.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeStep", DataType="nonNegativeInteger")]
        public string TimeStep {
            get {
                return this.timeStepField;
            }
            set {
                this.timeStepField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportingRepresentation", DataType="DataObjectReference")]
        public DataObjectReference SupportingRepresentation {
            get {
                return this.supportingRepresentationField;
            }
            set {
                this.supportingRepresentationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalCrs", DataType="DataObjectReference")]
        public DataObjectReference LocalCrs {
            get {
                return this.localCrsField;
            }
            set {
                this.localCrsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PropertyKind", DataType="AbstractPropertyKind")]
        public AbstractPropertyKind PropertyKind {
            get {
                return this.propertyKindField;
            }
            set {
                this.propertyKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscretePropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentPropertySeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousPropertySeries))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractValuesProperty : AbstractProperty {
        
        private PatchOfValues[] patchOfValuesField;
        
        private PropertyKindFacet[] facetField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PatchOfValues")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PatchOfValues", DataType="PatchOfValues")]
        public PatchOfValues[] PatchOfValues {
            get {
                return this.patchOfValuesField;
            }
            set {
                this.patchOfValuesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Facet")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Facet", DataType="PropertyKindFacet")]
        public PropertyKindFacet[] Facet {
            get {
                return this.facetField;
            }
            set {
                this.facetField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CategoricalPropertySeries))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("CategoricalProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_CategoricalProperty : AbstractValuesProperty {
        
        private DataObjectReference lookupField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Lookup", DataType="DataObjectReference")]
        public DataObjectReference Lookup {
            get {
                return this.lookupField;
            }
            set {
                this.lookupField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("CategoricalPropertySeries", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_CategoricalPropertySeries : obj_CategoricalProperty {
        
        private AbstractIntegerArray realizationIndicesField;
        
        private TimeIndices seriesTimeIndicesField;
        
        /// <remarks/>
        /// <summary>Provide the list of indices corresponding to realizations number. For example, if a user wants to send the realization corresponding to p10, p20, ... he would write the array 10, 20, ... If not provided, then the realization count (which could be 1) does not introduce a dimension to the multi-dimensional array storage.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Provide the list of indices corresponding to realizations number. For example, if a user wants to send the realization corresponding to p10, p20, ... he would write the array 10, 20, ... If not provided, then the realization count (which could be 1) does not introduce a dimension to the multi-dimensional array storage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RealizationIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray RealizationIndices {
            get {
                return this.realizationIndicesField;
            }
            set {
                this.realizationIndicesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeriesTimeIndices", DataType="TimeIndices")]
        public TimeIndices SeriesTimeIndices {
            get {
                return this.seriesTimeIndicesField;
            }
            set {
                this.seriesTimeIndicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DiscretePropertySeries))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("DiscreteProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_DiscreteProperty : AbstractValuesProperty {
        
        private string[] minimumValueField;
        
        private string[] maximumValueField;
        
        /// <remarks/>
        /// <summary>The minimum of the associated property values.  BUSINESS RULE: There can only be one value per number of elements.</summary>
        [System.Xml.Serialization.XmlElementAttribute("MinimumValue", DataType="integer")]
        [System.ComponentModel.DescriptionAttribute("The minimum of the associated property values.  BUSINESS RULE: There can only be " +
            "one value per number of elements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinimumValue", DataType="integer")]
        public string[] MinimumValue {
            get {
                return this.minimumValueField;
            }
            set {
                this.minimumValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum of the associated property values.  BUSINESS RULE: There can only be one value per number of elements.</summary>
        [System.Xml.Serialization.XmlElementAttribute("MaximumValue", DataType="integer")]
        [System.ComponentModel.DescriptionAttribute("The maximum of the associated property values.  BUSINESS RULE: There can only be " +
            "one value per number of elements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaximumValue", DataType="integer")]
        public string[] MaximumValue {
            get {
                return this.maximumValueField;
            }
            set {
                this.maximumValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("DiscretePropertySeries", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_DiscretePropertySeries : obj_DiscreteProperty {
        
        private AbstractIntegerArray realizationIndicesField;
        
        private TimeIndices seriesTimeIndicesField;
        
        /// <remarks/>
        /// <summary>Provide the list of indices corresponding to realizations number. For example, if a user wants to send the realization corresponding to p10, p20, ... he would write the array 10, 20, ... If not provided, then the realization count (which could be 1) does not introduce a dimension to the multi-dimensional array storage.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Provide the list of indices corresponding to realizations number. For example, if a user wants to send the realization corresponding to p10, p20, ... he would write the array 10, 20, ... If not provided, then the realization count (which could be 1) does not introduce a dimension to the multi-dimensional array storage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RealizationIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray RealizationIndices {
            get {
                return this.realizationIndicesField;
            }
            set {
                this.realizationIndicesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeriesTimeIndices", DataType="TimeIndices")]
        public TimeIndices SeriesTimeIndices {
            get {
                return this.seriesTimeIndicesField;
            }
            set {
                this.seriesTimeIndicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_CommentPropertySeries))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("CommentProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_CommentProperty : AbstractValuesProperty {
        
        private string languageField;
        
        /// <remarks/>
        /// <summary>Identify the language (e.g., US English or French) of the string. It is recommended that language names conform to ISO 639.</summary>
        [System.ComponentModel.DescriptionAttribute("Identify the language (e.g., US English or French) of the string. It is recommend" +
            "ed that language names conform to ISO 639.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Language", DataType="string")]
        public string Language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("CommentPropertySeries", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_CommentPropertySeries : obj_CommentProperty {
        
        private AbstractIntegerArray realizationIndicesField;
        
        private TimeIndices seriesTimeIndicesField;
        
        /// <remarks/>
        /// <summary>Provide the list of indices corresponding to realizations number. For example, if a user wants to send the realization corresponding to p10, p20, ... he would write the array 10, 20, ... If not provided, then the realization count (which could be 1) does not introduce a dimension to the multi-dimensional array storage.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Provide the list of indices corresponding to realizations number. For example, if a user wants to send the realization corresponding to p10, p20, ... he would write the array 10, 20, ... If not provided, then the realization count (which could be 1) does not introduce a dimension to the multi-dimensional array storage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RealizationIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray RealizationIndices {
            get {
                return this.realizationIndicesField;
            }
            set {
                this.realizationIndicesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeriesTimeIndices", DataType="TimeIndices")]
        public TimeIndices SeriesTimeIndices {
            get {
                return this.seriesTimeIndicesField;
            }
            set {
                this.seriesTimeIndicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_ContinuousPropertySeries))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("ContinuousProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_ContinuousProperty : AbstractValuesProperty {
        
        private double[] minimumValueField;
        
        private double[] maximumValueField;
        
        private ResqmlUom uOMField;
        
        /// <remarks/>
        /// <summary>The minimum of the associated property values.  BUSINESS RULE: There can be only one value per number of elements.</summary>
        [System.Xml.Serialization.XmlElementAttribute("MinimumValue")]
        [System.ComponentModel.DescriptionAttribute("The minimum of the associated property values.  BUSINESS RULE: There can be only " +
            "one value per number of elements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinimumValue", DataType="double")]
        public double[] MinimumValue {
            get {
                return this.minimumValueField;
            }
            set {
                this.minimumValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The maximum of the associated property values.  BUSINESS RULE: There can be only one value per number of elements.</summary>
        [System.Xml.Serialization.XmlElementAttribute("MaximumValue")]
        [System.ComponentModel.DescriptionAttribute("The maximum of the associated property values.  BUSINESS RULE: There can be only " +
            "one value per number of elements.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaximumValue", DataType="double")]
        public double[] MaximumValue {
            get {
                return this.maximumValueField;
            }
            set {
                this.maximumValueField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measure for the property.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure for the property.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UOM", DataType="ResqmlUom")]
        public ResqmlUom UOM {
            get {
                return this.uOMField;
            }
            set {
                this.uOMField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("ContinuousPropertySeries", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_ContinuousPropertySeries : obj_ContinuousProperty {
        
        private AbstractIntegerArray realizationIndicesField;
        
        private TimeIndices seriesTimeIndicesField;
        
        /// <remarks/>
        /// <summary>Provide the list of indices corresponding to realizations number. For example, if a user wants to send the realization corresponding to p10, p20, ... he would write the array 10, 20, ... If not provided, then the realization count (which could be 1) does not introduce a dimension to the multi-dimensional array storage.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Provide the list of indices corresponding to realizations number. For example, if a user wants to send the realization corresponding to p10, p20, ... he would write the array 10, 20, ... If not provided, then the realization count (which could be 1) does not introduce a dimension to the multi-dimensional array storage.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RealizationIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray RealizationIndices {
            get {
                return this.realizationIndicesField;
            }
            set {
                this.realizationIndicesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SeriesTimeIndices", DataType="TimeIndices")]
        public TimeIndices SeriesTimeIndices {
            get {
                return this.seriesTimeIndicesField;
            }
            set {
                this.seriesTimeIndicesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PointsProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_PointsProperty : AbstractProperty {
        
        private PatchOfPoints[] patchOfPointsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PatchOfPoints")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PatchOfPoints", DataType="PatchOfPoints")]
        public PatchOfPoints[] PatchOfPoints {
            get {
                return this.patchOfPointsField;
            }
            set {
                this.patchOfPointsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PropertySet", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_PropertySet : AbstractResqmlDataObject {
        
        private TimeSetKind timeSetKindField;
        
        private bool hasSinglePropertyKindField;
        
        private bool hasMultipleRealizationsField;
        
        private DataObjectReference[] parentSetField;
        
        private DataObjectReference[] propertiesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSetKind", DataType="TimeSetKind")]
        public TimeSetKind TimeSetKind {
            get {
                return this.timeSetKindField;
            }
            set {
                this.timeSetKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If true, indicates that the collection contains only property values associated with a single property kind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("If true, indicates that the collection contains only property values associated w" +
            "ith a single property kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HasSinglePropertyKind", DataType="boolean")]
        public bool HasSinglePropertyKind {
            get {
                return this.hasSinglePropertyKindField;
            }
            set {
                this.hasSinglePropertyKindField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>If true, indicates that the collection contains properties with defined realization indices.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("If true, indicates that the collection contains properties with defined realizati" +
            "on indices.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HasMultipleRealizations", DataType="boolean")]
        public bool HasMultipleRealizations {
            get {
                return this.hasMultipleRealizationsField;
            }
            set {
                this.hasMultipleRealizationsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A pointer to the parent property group of this property group.</summary>
        [System.Xml.Serialization.XmlElementAttribute("ParentSet")]
        [System.ComponentModel.DescriptionAttribute("A pointer to the parent property group of this property group.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentSet", DataType="DataObjectReference")]
        public DataObjectReference[] ParentSet {
            get {
                return this.parentSetField;
            }
            set {
                this.parentSetField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Properties")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Properties", DataType="DataObjectReference")]
        public DataObjectReference[] Properties {
            get {
                return this.propertiesField;
            }
            set {
                this.propertiesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum TimeSetKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("single time")]
        singletime,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("equivalent times")]
        equivalenttimes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("not a time set")]
        notatimeset,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StringTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DoubleTableLookup))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractPropertyLookup : AbstractResqmlDataObject {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StringTableLookup", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StringTableLookup : AbstractPropertyLookup {
        
        private StringLookup[] valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Value")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="StringLookup")]
        public StringLookup[] Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("DoubleTableLookup", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_DoubleTableLookup : AbstractPropertyLookup {
        
        private DoubleLookup[] valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Value")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Value", DataType="DoubleLookup")]
        public DoubleLookup[] Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PropertyKind", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_PropertyKind : AbstractResqmlDataObject {
        
        private string namingSystemField;
        
        private bool isAbstractField;
        
        private ResqmlUom representativeUomField;
        
        private AbstractPropertyKind parentPropertyKindField;
        
        /// <remarks/>
        /// <summary>The name of the dictionary within which the property is unique. This also defines the name of the controlling authority.  Use a URN of the form "urn:x-resqml:domainOrEmail:dictionaryName".  An example public dictionary: "urn:resqml:energistics.org:RESQML" assigned to values defined by ResqmlPropertyKind.  An example corporate dictionary: "urn:resqml:slb.com:product-x".  An example personal dictionary: "urn:resqml:first.last@mycompany.com:my.first.dictionary". The purpose of this scheme is to generate a unique name. Parsing for semantics is not intended.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="anyURI")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The name of the dictionary within which the property is unique. This also defines the name of the controlling authority.  Use a URN of the form ""urn:x-resqml:domainOrEmail:dictionaryName"".  An example public dictionary: ""urn:resqml:energistics.org:RESQML"" assigned to values defined by ResqmlPropertyKind.  An example corporate dictionary: ""urn:resqml:slb.com:product-x"".  An example personal dictionary: ""urn:resqml:first.last@mycompany.com:my.first.dictionary"". The purpose of this scheme is to generate a unique name. Parsing for semantics is not intended.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NamingSystem", DataType="anyURI")]
        public string NamingSystem {
            get {
                return this.namingSystemField;
            }
            set {
                this.namingSystemField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>A value of true indicates that the property kind is abstract and an instance of property values must not represent this kind.  A value of false indicates otherwise (i.e., that an instance of property values may represent this kind).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("A value of true indicates that the property kind is abstract and an instance of p" +
            "roperty values must not represent this kind.  A value of false indicates otherwi" +
            "se (i.e., that an instance of property values may represent this kind).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsAbstract", DataType="boolean")]
        public bool IsAbstract {
            get {
                return this.isAbstractField;
            }
            set {
                this.isAbstractField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Generally matches the base for conversion, except where multiple classes have the same underlying dimensional analysis. In this case, the representative unit may provide additional information about the underlying concept of the class. For example, “area per volume” has the same dimensional analysis as “per length”, but it specifies a representative unit of “m2/m3” instead of “1/m”.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Generally matches the base for conversion, except where multiple classes have the same underlying dimensional analysis. In this case, the representative unit may provide additional information about the underlying concept of the class. For example, “area per volume” has the same dimensional analysis as “per length”, but it specifies a representative unit of “m2/m3” instead of “1/m”.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentativeUom", DataType="ResqmlUom")]
        public ResqmlUom RepresentativeUom {
            get {
                return this.representativeUomField;
            }
            set {
                this.representativeUomField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentPropertyKind", DataType="AbstractPropertyKind")]
        public AbstractPropertyKind ParentPropertyKind {
            get {
                return this.parentPropertyKindField;
            }
            set {
                this.parentPropertyKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class WellboreMarker : AbstractResqmlDataObject {
        
        private FluidContact fluidContactField;
        
        private bool fluidContactFieldSpecified;
        
        private FluidMarker fluidMarkerField;
        
        private bool fluidMarkerFieldSpecified;
        
        private GeologicBoundaryKind geologicBoundaryKindField;
        
        private bool geologicBoundaryKindFieldSpecified;
        
        private DataObjectReference witsmlFormationMarkerField;
        
        private DataObjectReference interpretationField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidContact", DataType="FluidContact")]
        public FluidContact FluidContact {
            get {
                return this.fluidContactField;
            }
            set {
                this.fluidContactField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidContactSpecified {
            get {
                return this.fluidContactFieldSpecified;
            }
            set {
                this.fluidContactFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidMarker", DataType="FluidMarker")]
        public FluidMarker FluidMarker {
            get {
                return this.fluidMarkerField;
            }
            set {
                this.fluidMarkerField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FluidMarkerSpecified {
            get {
                return this.fluidMarkerFieldSpecified;
            }
            set {
                this.fluidMarkerFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologicBoundaryKind", DataType="GeologicBoundaryKind")]
        public GeologicBoundaryKind GeologicBoundaryKind {
            get {
                return this.geologicBoundaryKindField;
            }
            set {
                this.geologicBoundaryKindField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GeologicBoundaryKindSpecified {
            get {
                return this.geologicBoundaryKindFieldSpecified;
            }
            set {
                this.geologicBoundaryKindFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Optional WITSML wellbore reference of the well marker frame.</summary>
        [System.ComponentModel.DescriptionAttribute("Optional WITSML wellbore reference of the well marker frame.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WitsmlFormationMarker", DataType="DataObjectReference")]
        public DataObjectReference WitsmlFormationMarker {
            get {
                return this.witsmlFormationMarkerField;
            }
            set {
                this.witsmlFormationMarkerField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Interpretation", DataType="DataObjectReference")]
        public DataObjectReference Interpretation {
            get {
                return this.interpretationField;
            }
            set {
                this.interpretationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum FluidContact {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("free water contact")]
        freewatercontact,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas oil contact")]
        gasoilcontact,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas water contact")]
        gaswatercontact,
        
        /// <remarks/>
        seal,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water oil contact")]
        wateroilcontact,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum FluidMarker {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas down to")]
        gasdownto,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas up to")]
        gasupto,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil down to")]
        oildownto,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil up to")]
        oilupto,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water down to")]
        waterdownto,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("water up to")]
        waterupto,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum GeologicBoundaryKind {
        
        /// <remarks/>
        fault,
        
        /// <remarks/>
        geobody,
        
        /// <remarks/>
        horizon,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TriangulatedSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PolylineRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PolylineSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PointSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreTrajectoryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BlockedWellboreRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_DeviationSurveyRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SubRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RedefinedGeometryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RepresentationSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_NonSealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GridConnectionSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredGridRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractRepresentation : AbstractResqmlDataObject {
        
        private DataObjectReference representedInterpretationField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentedInterpretation", DataType="DataObjectReference")]
        public DataObjectReference RepresentedInterpretation {
            get {
                return this.representedInterpretationField;
            }
            set {
                this.representedInterpretationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StreamlinesRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StreamlinesRepresentation : AbstractRepresentation {
        
        private string lineCountField;
        
        private StreamlineWellbores streamlineWellboresField;
        
        private StreamlinePolylineSetPatch geometryField;
        
        /// <remarks/>
        /// <summary>Number of streamlines.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of streamlines.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineCount", DataType="positiveInteger")]
        public string LineCount {
            get {
                return this.lineCountField;
            }
            set {
                this.lineCountField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StreamlineWellbores", DataType="StreamlineWellbores")]
        public StreamlineWellbores StreamlineWellbores {
            get {
                return this.streamlineWellboresField;
            }
            set {
                this.streamlineWellboresField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="StreamlinePolylineSetPatch")]
        public StreamlinePolylineSetPatch Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TriangulatedSetRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractSurfaceRepresentation : AbstractRepresentation {
        
        private SurfaceRole surfaceRoleField;
        
        private PatchBoundaries[] boundariesField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SurfaceRole", DataType="SurfaceRole")]
        public SurfaceRole SurfaceRole {
            get {
                return this.surfaceRoleField;
            }
            set {
                this.surfaceRoleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Boundaries")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Boundaries", DataType="PatchBoundaries")]
        public PatchBoundaries[] Boundaries {
            get {
                return this.boundariesField;
            }
            set {
                this.boundariesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum SurfaceRole {
        
        /// <remarks/>
        map,
        
        /// <remarks/>
        pick,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("Grid2dSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_Grid2dSetRepresentation : AbstractSurfaceRepresentation {
        
        private Grid2dPatch[] grid2dPatchField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Grid2dPatch")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Grid2dPatch", DataType="Grid2dPatch")]
        public Grid2dPatch[] Grid2dPatch {
            get {
                return this.grid2dPatchField;
            }
            set {
                this.grid2dPatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("Grid2dRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_Grid2dRepresentation : AbstractSurfaceRepresentation {
        
        private Grid2dPatch grid2dPatchField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Grid2dPatch", DataType="Grid2dPatch")]
        public Grid2dPatch Grid2dPatch {
            get {
                return this.grid2dPatchField;
            }
            set {
                this.grid2dPatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PlaneSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_PlaneSetRepresentation : AbstractSurfaceRepresentation {
        
        private AbstractPlaneGeometry[] planesField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Planes")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Planes", DataType="AbstractPlaneGeometry")]
        public AbstractPlaneGeometry[] Planes {
            get {
                return this.planesField;
            }
            set {
                this.planesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TriangulatedSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_TriangulatedSetRepresentation : AbstractSurfaceRepresentation {
        
        private TrianglePatch[] trianglePatchField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TrianglePatch")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TrianglePatch", DataType="TrianglePatch")]
        public TrianglePatch[] TrianglePatch {
            get {
                return this.trianglePatchField;
            }
            set {
                this.trianglePatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PolylineRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_PolylineRepresentation : AbstractRepresentation {
        
        private LineRole lineRoleField;
        
        private bool lineRoleFieldSpecified;
        
        private bool isClosedField;
        
        private NodePatch nodePatchField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineRole", DataType="LineRole")]
        public LineRole LineRole {
            get {
                return this.lineRoleField;
            }
            set {
                this.lineRoleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineRoleSpecified {
            get {
                return this.lineRoleFieldSpecified;
            }
            set {
                this.lineRoleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsClosed", DataType="boolean")]
        public bool IsClosed {
            get {
                return this.isClosedField;
            }
            set {
                this.isClosedField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodePatch", DataType="NodePatch")]
        public NodePatch NodePatch {
            get {
                return this.nodePatchField;
            }
            set {
                this.nodePatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum LineRole {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fault center line")]
        faultcenterline,
        
        /// <remarks/>
        pick,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inner ring")]
        innerring,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("outer ring")]
        outerring,
        
        /// <remarks/>
        trajectory,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("interpretation line")]
        interpretationline,
        
        /// <remarks/>
        contact,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("depositional line")]
        depositionalline,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erosion line")]
        erosionline,
        
        /// <remarks/>
        contouring,
        
        /// <remarks/>
        pillar,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PolylineSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_PolylineSetRepresentation : AbstractRepresentation {
        
        private LineRole lineRoleField;
        
        private bool lineRoleFieldSpecified;
        
        private PolylineSetPatch[] linePatchField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LineRole", DataType="LineRole")]
        public LineRole LineRole {
            get {
                return this.lineRoleField;
            }
            set {
                this.lineRoleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LineRoleSpecified {
            get {
                return this.lineRoleFieldSpecified;
            }
            set {
                this.lineRoleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LinePatch")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LinePatch", DataType="PolylineSetPatch")]
        public PolylineSetPatch[] LinePatch {
            get {
                return this.linePatchField;
            }
            set {
                this.linePatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PointSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_PointSetRepresentation : AbstractRepresentation {
        
        private NodePatch[] nodePatchField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NodePatch")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodePatch", DataType="NodePatch")]
        public NodePatch[] NodePatch {
            get {
                return this.nodePatchField;
            }
            set {
                this.nodePatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreTrajectoryRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_WellboreTrajectoryRepresentation : AbstractRepresentation {
        
        private double startMdField;
        
        private double finishMdField;
        
        private LengthUom mdUomField;
        
        private MdDomain mdDomainField;
        
        private bool mdDomainFieldSpecified;
        
        private DataObjectReference witsmlTrajectoryField;
        
        private AbstractParametricLineGeometry geometryField;
        
        private DataObjectReference mdDatumField;
        
        private DataObjectReference deviationSurveyField;
        
        private WellboreTrajectoryParentIntersection parentIntersectionField;
        
        /// <remarks/>
        /// <summary>Specifies the measured depth  for the start of the wellbore trajectory.  Range may often be from kickoff to TD, but this is not necessary.   BUSINESS RULE: Start MD is always less than the Finish MD.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Specifies the measured depth  for the start of the wellbore trajectory.  Range ma" +
            "y often be from kickoff to TD, but this is not necessary.   BUSINESS RULE: Start" +
            " MD is always less than the Finish MD.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StartMd", DataType="double")]
        public double StartMd {
            get {
                return this.startMdField;
            }
            set {
                this.startMdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Specifies the ending measured depth of the range for the wellbore trajectory.  Range may often be from kickoff to TD, but this is not necessary.   BUSINESS RULE: Start MD is always less than the Finish MD.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Specifies the ending measured depth of the range for the wellbore trajectory.  Ra" +
            "nge may often be from kickoff to TD, but this is not necessary.   BUSINESS RULE:" +
            " Start MD is always less than the Finish MD.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FinishMd", DataType="double")]
        public double FinishMd {
            get {
                return this.finishMdField;
            }
            set {
                this.finishMdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The unit of measure of the reference MD.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The unit of measure of the reference MD.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdUom", DataType="LengthUom")]
        public LengthUom MdUom {
            get {
                return this.mdUomField;
            }
            set {
                this.mdUomField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdDomain", DataType="MdDomain")]
        public MdDomain MdDomain {
            get {
                return this.mdDomainField;
            }
            set {
                this.mdDomainField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MdDomainSpecified {
            get {
                return this.mdDomainFieldSpecified;
            }
            set {
                this.mdDomainFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Pointer to the WITSML trajectory that is contained in the referenced wellbore. (For information about WITSML well and wellbore references, see the definition for RESQML technical feature, WellboreFeature).</summary>
        [System.ComponentModel.DescriptionAttribute("Pointer to the WITSML trajectory that is contained in the referenced wellbore. (F" +
            "or information about WITSML well and wellbore references, see the definition for" +
            " RESQML technical feature, WellboreFeature).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WitsmlTrajectory", DataType="DataObjectReference")]
        public DataObjectReference WitsmlTrajectory {
            get {
                return this.witsmlTrajectoryField;
            }
            set {
                this.witsmlTrajectoryField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Explicit geometry is not required for vertical wells</summary>
        [System.ComponentModel.DescriptionAttribute("Explicit geometry is not required for vertical wells")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="AbstractParametricLineGeometry")]
        public AbstractParametricLineGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdDatum", DataType="DataObjectReference")]
        public DataObjectReference MdDatum {
            get {
                return this.mdDatumField;
            }
            set {
                this.mdDatumField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DeviationSurvey", DataType="DataObjectReference")]
        public DataObjectReference DeviationSurvey {
            get {
                return this.deviationSurveyField;
            }
            set {
                this.deviationSurveyField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentIntersection", DataType="WellboreTrajectoryParentIntersection")]
        public WellboreTrajectoryParentIntersection ParentIntersection {
            get {
                return this.parentIntersectionField;
            }
            set {
                this.parentIntersectionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum MdDomain {
        
        /// <remarks/>
        driller,
        
        /// <remarks/>
        logger,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BlockedWellboreRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreFrameRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_WellboreFrameRepresentation : AbstractRepresentation {
        
        private string nodeCountField;
        
        private AbstractDoubleArray nodeMdField;
        
        private DataObjectReference witsmlLogReferenceField;
        
        private IntervalStratigraphicUnits intervalStratigraphiUnitsField;
        
        private CellFluidPhaseUnits cellFluidPhaseUnitsField;
        
        private DataObjectReference trajectoryField;
        
        /// <remarks/>
        /// <summary>Number of nodes. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of nodes. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeCount", DataType="positiveInteger")]
        public string NodeCount {
            get {
                return this.nodeCountField;
            }
            set {
                this.nodeCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>MD values for each node. BUSINESS RULE: MD values and UOM must be consistent with the trajectory representation.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("MD values for each node. BUSINESS RULE: MD values and UOM must be consistent with" +
            " the trajectory representation.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NodeMd", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray NodeMd {
            get {
                return this.nodeMdField;
            }
            set {
                this.nodeMdField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The reference to the equivalent WITSML well log.</summary>
        [System.ComponentModel.DescriptionAttribute("The reference to the equivalent WITSML well log.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WitsmlLogReference", DataType="DataObjectReference")]
        public DataObjectReference WitsmlLogReference {
            get {
                return this.witsmlLogReferenceField;
            }
            set {
                this.witsmlLogReferenceField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IntervalStratigraphiUnits", DataType="IntervalStratigraphicUnits")]
        public IntervalStratigraphicUnits IntervalStratigraphiUnits {
            get {
                return this.intervalStratigraphiUnitsField;
            }
            set {
                this.intervalStratigraphiUnitsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellFluidPhaseUnits", DataType="CellFluidPhaseUnits")]
        public CellFluidPhaseUnits CellFluidPhaseUnits {
            get {
                return this.cellFluidPhaseUnitsField;
            }
            set {
                this.cellFluidPhaseUnitsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Trajectory", DataType="DataObjectReference")]
        public DataObjectReference Trajectory {
            get {
                return this.trajectoryField;
            }
            set {
                this.trajectoryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreMarkerFrameRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_WellboreMarkerFrameRepresentation : obj_WellboreFrameRepresentation {
        
        private WellboreMarker[] wellboreMarkerField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("WellboreMarker")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WellboreMarker", DataType="WellboreMarker")]
        public WellboreMarker[] WellboreMarker {
            get {
                return this.wellboreMarkerField;
            }
            set {
                this.wellboreMarkerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("BlockedWellboreRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_BlockedWellboreRepresentation : obj_WellboreFrameRepresentation {
        
        private string cellCountField;
        
        private AbstractIntegerArray cellIndicesField;
        
        private AbstractIntegerArray gridIndicesField;
        
        private AbstractIntegerArray localFacePairPerCellIndicesField;
        
        private DataObjectReference[] gridField;
        
        /// <remarks/>
        /// <summary>The number of non-null entries in the grid indices array.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The number of non-null entries in the grid indices array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellCount", DataType="nonNegativeInteger")]
        public string CellCount {
            get {
                return this.cellCountField;
            }
            set {
                this.cellCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The grid cell index for each blocked well cell. BUSINESS RULE: Array length must equal cell count.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The grid cell index for each blocked well cell. BUSINESS RULE: Array length must " +
            "equal cell count.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray CellIndices {
            get {
                return this.cellIndicesField;
            }
            set {
                this.cellIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Size of array = IntervalCount.  Null values of -1 signify that that interval is not within a grid.  BUSINESS RULE: The cell count must equal the number of non-null entries in this array.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Size of array = IntervalCount.  Null values of -1 signify that that interval is n" +
            "ot within a grid.  BUSINESS RULE: The cell count must equal the number of non-nu" +
            "ll entries in this array.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GridIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray GridIndices {
            get {
                return this.gridIndicesField;
            }
            set {
                this.gridIndicesField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>For each cell, these are the entry and exit faces of the trajectory. Use null (-1), for instance, at TD when there only one intersection. The local face-per-cell index is used because a global face index need not have been defined on the grid.  BUSINESS RULE: The array dimensions must equal 2 x CellCount.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"For each cell, these are the entry and exit faces of the trajectory. Use null (-1), for instance, at TD when there only one intersection. The local face-per-cell index is used because a global face index need not have been defined on the grid.  BUSINESS RULE: The array dimensions must equal 2 x CellCount.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalFacePairPerCellIndices", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray LocalFacePairPerCellIndices {
            get {
                return this.localFacePairPerCellIndicesField;
            }
            set {
                this.localFacePairPerCellIndicesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Grid")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Grid", DataType="DataObjectReference")]
        public DataObjectReference[] Grid {
            get {
                return this.gridField;
            }
            set {
                this.gridField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("DeviationSurveyRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_DeviationSurveyRepresentation : AbstractRepresentation {
        
        private DataObjectReference witsmlDeviationSurveyField;
        
        private bool isFinalField;
        
        private string stationCountField;
        
        private LengthUom mdUomField;
        
        private AbstractDoubleArray mdsField;
        
        private Point3d firstStationLocationField;
        
        private PlaneAngleUom angleUomField;
        
        private AbstractDoubleArray azimuthsField;
        
        private AbstractDoubleArray inclinationsField;
        
        private DataObjectReference mdDatumField;
        
        private TimeIndex timeIndexField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WitsmlDeviationSurvey", DataType="DataObjectReference")]
        public DataObjectReference WitsmlDeviationSurvey {
            get {
                return this.witsmlDeviationSurveyField;
            }
            set {
                this.witsmlDeviationSurveyField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Used to indicate that this is a final version of the deviation survey, as distinct from the interim interpretations.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Used to indicate that this is a final version of the deviation survey, as distinc" +
            "t from the interim interpretations.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsFinal", DataType="boolean")]
        public bool IsFinal {
            get {
                return this.isFinalField;
            }
            set {
                this.isFinalField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Number of Stations</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of Stations")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StationCount", DataType="positiveInteger")]
        public string StationCount {
            get {
                return this.stationCountField;
            }
            set {
                this.stationCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Units of Measure of the measured depths along this deviation survey.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Units of Measure of the measured depths along this deviation survey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdUom", DataType="LengthUom")]
        public LengthUom MdUom {
            get {
                return this.mdUomField;
            }
            set {
                this.mdUomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>MD values for the position of the stations  BUSINESS RULE: Array length equals station count</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("MD values for the position of the stations  BUSINESS RULE: Array length equals st" +
            "ation count")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Mds", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray Mds {
            get {
                return this.mdsField;
            }
            set {
                this.mdsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>XYZ location of the first station of the deviation survey.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("XYZ location of the first station of the deviation survey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FirstStationLocation", DataType="Point3d")]
        public Point3d FirstStationLocation {
            get {
                return this.firstStationLocationField;
            }
            set {
                this.firstStationLocationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the units of measure for the azimuth and inclination</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines the units of measure for the azimuth and inclination")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AngleUom", DataType="PlaneAngleUom")]
        public PlaneAngleUom AngleUom {
            get {
                return this.angleUomField;
            }
            set {
                this.angleUomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>An array of azimuth angles, one for each survey station. The rotation is relative to the ProjectedCrs north with a positive value indication a clockwise rotation as seen from above.   If the local CRS - whether a LocalTime3dCrs or a LocalDepth3dCrs - is rotated relative to the ProjectedCrs, the azimuths remain relative to the ProjectedCrs not the local CRS.   Note that the projection’s north is not the same as true north or magnetic north. A good definition of the different kinds of “north” can be found in the OGP Surveying & Positioning Guidance Note 1 http://www.ogp.org.uk/pubs/373-01.pdf (the "True, Grid and Magnetic North bearings" paragraph).   BUSINESS RULE: Array length equals station count</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"An array of azimuth angles, one for each survey station. The rotation is relative to the ProjectedCrs north with a positive value indication a clockwise rotation as seen from above.   If the local CRS - whether a LocalTime3dCrs or a LocalDepth3dCrs - is rotated relative to the ProjectedCrs, the azimuths remain relative to the ProjectedCrs not the local CRS.   Note that the projection’s north is not the same as true north or magnetic north. A good definition of the different kinds of “north” can be found in the OGP Surveying & Positioning Guidance Note 1 http://www.ogp.org.uk/pubs/373-01.pdf (the ""True, Grid and Magnetic North bearings"" paragraph).   BUSINESS RULE: Array length equals station count")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Azimuths", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray Azimuths {
            get {
                return this.azimuthsField;
            }
            set {
                this.azimuthsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Dip (or inclination) angle for each station.  BUSINESS RULE: Array length equals station count</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Dip (or inclination) angle for each station.  BUSINESS RULE: Array length equals " +
            "station count")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Inclinations", DataType="AbstractDoubleArray")]
        public AbstractDoubleArray Inclinations {
            get {
                return this.inclinationsField;
            }
            set {
                this.inclinationsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MdDatum", DataType="DataObjectReference")]
        public DataObjectReference MdDatum {
            get {
                return this.mdDatumField;
            }
            set {
                this.mdDatumField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SubRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_SubRepresentation : AbstractRepresentation {
        
        private AdditionalGridTopology additionalGridTopologyField;
        
        private DataObjectReference supportingRepresentationField;
        
        private SubRepresentationPatch[] subRepresentationPatchField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AdditionalGridTopology", DataType="AdditionalGridTopology")]
        public AdditionalGridTopology AdditionalGridTopology {
            get {
                return this.additionalGridTopologyField;
            }
            set {
                this.additionalGridTopologyField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportingRepresentation", DataType="DataObjectReference")]
        public DataObjectReference SupportingRepresentation {
            get {
                return this.supportingRepresentationField;
            }
            set {
                this.supportingRepresentationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SubRepresentationPatch")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SubRepresentationPatch", DataType="SubRepresentationPatch")]
        public SubRepresentationPatch[] SubRepresentationPatch {
            get {
                return this.subRepresentationPatchField;
            }
            set {
                this.subRepresentationPatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RedefinedGeometryRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_RedefinedGeometryRepresentation : AbstractRepresentation {
        
        private PatchOfGeometry[] patchOfGeometryField;
        
        private DataObjectReference supportingRepresentationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("PatchOfGeometry")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("PatchOfGeometry", DataType="PatchOfGeometry")]
        public PatchOfGeometry[] PatchOfGeometry {
            get {
                return this.patchOfGeometryField;
            }
            set {
                this.patchOfGeometryField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SupportingRepresentation", DataType="DataObjectReference")]
        public DataObjectReference SupportingRepresentation {
            get {
                return this.supportingRepresentationField;
            }
            set {
                this.supportingRepresentationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_NonSealedSurfaceFrameworkRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RepresentationSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_RepresentationSetRepresentation : AbstractRepresentation {
        
        private bool isHomogeneousField;
        
        private DataObjectReference[] representationField;
        
        /// <remarks/>
        /// <summary>Indicates that all of the selected representations are of a single kind.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates that all of the selected representations are of a single kind.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsHomogeneous", DataType="boolean")]
        public bool IsHomogeneous {
            get {
                return this.isHomogeneousField;
            }
            set {
                this.isHomogeneousField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Representation")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Representation", DataType="DataObjectReference")]
        public DataObjectReference[] Representation {
            get {
                return this.representationField;
            }
            set {
                this.representationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SealedVolumeFrameworkRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_SealedVolumeFrameworkRepresentation : obj_RepresentationSetRepresentation {
        
        private DataObjectReference basedOnField;
        
        private VolumeShell[] shellsField;
        
        private VolumeRegion[] regionsField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BasedOn", DataType="DataObjectReference")]
        public DataObjectReference BasedOn {
            get {
                return this.basedOnField;
            }
            set {
                this.basedOnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Shells")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Shells", DataType="VolumeShell")]
        public VolumeShell[] Shells {
            get {
                return this.shellsField;
            }
            set {
                this.shellsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Regions")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Regions", DataType="VolumeRegion")]
        public VolumeRegion[] Regions {
            get {
                return this.regionsField;
            }
            set {
                this.regionsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_NonSealedSurfaceFrameworkRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractSurfaceFrameworkRepresentation : obj_RepresentationSetRepresentation {
        
        private ContactIdentity[] contactIdentityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ContactIdentity")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContactIdentity", DataType="ContactIdentity")]
        public ContactIdentity[] ContactIdentity {
            get {
                return this.contactIdentityField;
            }
            set {
                this.contactIdentityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SealedSurfaceFrameworkRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_SealedSurfaceFrameworkRepresentation : AbstractSurfaceFrameworkRepresentation {
        
        private SealedContactRepresentationPart[] sealedContactRepresentationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("SealedContactRepresentation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SealedContactRepresentation", DataType="SealedContactRepresentationPart")]
        public SealedContactRepresentationPart[] SealedContactRepresentation {
            get {
                return this.sealedContactRepresentationField;
            }
            set {
                this.sealedContactRepresentationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("NonSealedSurfaceFrameworkRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_NonSealedSurfaceFrameworkRepresentation : AbstractSurfaceFrameworkRepresentation {
        
        private AbstractContactRepresentationPart[] nonSealedContactRepresentationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("NonSealedContactRepresentation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("NonSealedContactRepresentation", DataType="AbstractContactRepresentationPart")]
        public AbstractContactRepresentationPart[] NonSealedContactRepresentation {
            get {
                return this.nonSealedContactRepresentationField;
            }
            set {
                this.nonSealedContactRepresentationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GridConnectionSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GridConnectionSetRepresentation : AbstractRepresentation {
        
        private string countField;
        
        private AbstractIntegerArray cellIndexPairsField;
        
        private AbstractIntegerArray gridIndexPairsField;
        
        private AbstractIntegerArray localFacePerCellIndexPairsField;
        
        private ConnectionInterpretations connectionInterpretationsField;
        
        private DataObjectReference[] gridField;
        
        /// <remarks/>
        /// <summary>count of connections. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("count of connections. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>2 x #Connections array of cell indices for (Cell1,Cell2) for each connection.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("2 x #Connections array of cell indices for (Cell1,Cell2) for each connection.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellIndexPairs", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray CellIndexPairs {
            get {
                return this.cellIndexPairsField;
            }
            set {
                this.cellIndexPairsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>2 x #Connections array of grid indices for (Cell1,Cell2) for each connection. The grid indices are obtained from the grid index pairs.  If only a single grid is referenced from the grid index, then this array need not be used.  BUSINESS RULE: This array should appear if more than one grid index pair is referenced.</summary>
        [System.ComponentModel.DescriptionAttribute(@"2 x #Connections array of grid indices for (Cell1,Cell2) for each connection. The grid indices are obtained from the grid index pairs.  If only a single grid is referenced from the grid index, then this array need not be used.  BUSINESS RULE: This array should appear if more than one grid index pair is referenced.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GridIndexPairs", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray GridIndexPairs {
            get {
                return this.gridIndexPairsField;
            }
            set {
                this.gridIndexPairsField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Optional 2 x #Connections array of local face per cell indices for (Cell1,Cell2) for each connection. Local face per cell indices are used because global face indices need not have been defined. Null value = -1.  If no face per cell definition occur as part of the grid representation, e.g., for a block centered grid, then this array need not appear.</summary>
        [System.ComponentModel.DescriptionAttribute(@"Optional 2 x #Connections array of local face per cell indices for (Cell1,Cell2) for each connection. Local face per cell indices are used because global face indices need not have been defined. Null value = -1.  If no face per cell definition occur as part of the grid representation, e.g., for a block centered grid, then this array need not appear.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("LocalFacePerCellIndexPairs", DataType="AbstractIntegerArray")]
        public AbstractIntegerArray LocalFacePerCellIndexPairs {
            get {
                return this.localFacePerCellIndexPairsField;
            }
            set {
                this.localFacePerCellIndexPairsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ConnectionInterpretations", DataType="ConnectionInterpretations")]
        public ConnectionInterpretations ConnectionInterpretations {
            get {
                return this.connectionInterpretationsField;
            }
            set {
                this.connectionInterpretationsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Grid")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Grid", DataType="DataObjectReference")]
        public DataObjectReference[] Grid {
            get {
                return this.gridField;
            }
            set {
                this.gridField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredGridRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractGridRepresentation : AbstractRepresentation {
        
        private CellFluidPhaseUnits cellFluidPhaseUnitsField;
        
        private AbstractParentWindow parentWindowField;
        
        private CellStratigraphicUnits cellStratigraphicUnitsField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellFluidPhaseUnits", DataType="CellFluidPhaseUnits")]
        public CellFluidPhaseUnits CellFluidPhaseUnits {
            get {
                return this.cellFluidPhaseUnitsField;
            }
            set {
                this.cellFluidPhaseUnitsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ParentWindow", DataType="AbstractParentWindow")]
        public AbstractParentWindow ParentWindow {
            get {
                return this.parentWindowField;
            }
            set {
                this.parentWindowField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellStratigraphicUnits", DataType="CellStratigraphicUnits")]
        public CellStratigraphicUnits CellStratigraphicUnits {
            get {
                return this.cellStratigraphicUnitsField;
            }
            set {
                this.cellStratigraphicUnitsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_UnstructuredColumnLayerGridRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractColumnLayerGridRepresentation : AbstractGridRepresentation {
        
        private string nkField;
        
        private IntervalStratigraphicUnits intervalStratigraphicUnitsField;
        
        /// <remarks/>
        /// <summary>Number of layers in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of layers in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nk", DataType="positiveInteger")]
        public string Nk {
            get {
                return this.nkField;
            }
            set {
                this.nkField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IntervalStratigraphicUnits", DataType="IntervalStratigraphicUnits")]
        public IntervalStratigraphicUnits IntervalStratigraphicUnits {
            get {
                return this.intervalStratigraphicUnitsField;
            }
            set {
                this.intervalStratigraphicUnitsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("IjkGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_IjkGridRepresentation : AbstractColumnLayerGridRepresentation {
        
        private string niField;
        
        private string njField;
        
        private bool radialGridIsCompleteField;
        
        private bool radialGridIsCompleteFieldSpecified;
        
        private KGaps kGapsField;
        
        private IjkGridGeometry geometryField;
        
        /// <remarks/>
        /// <summary>Count of cells in the I-direction in the grid. Must be positive. I=1,...,NI, I0=0,...,NI-1.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Count of cells in the I-direction in the grid. Must be positive. I=1,...,NI, I0=0" +
            ",...,NI-1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ni", DataType="positiveInteger")]
        public string Ni {
            get {
                return this.niField;
            }
            set {
                this.niField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Count of cells in the J-direction in the grid. Must be positive. J=1,...,NJ, J0=0,...,NJ-1.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Count of cells in the J-direction in the grid. Must be positive. J=1,...,NJ, J0=0" +
            ",...,NJ-1.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nj", DataType="positiveInteger")]
        public string Nj {
            get {
                return this.njField;
            }
            set {
                this.njField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>TRUE if the grid is periodic in J, i.e., has the topology of a complete 360 degree circle.  If TRUE, then NJL=NJ. Otherwise, NJL=NJ+1  May be used to change the grid topology for either a cartesian or a radial grid, although radial grid usage is by far the more common.</summary>
        [System.ComponentModel.DescriptionAttribute(@"TRUE if the grid is periodic in J, i.e., has the topology of a complete 360 degree circle.  If TRUE, then NJL=NJ. Otherwise, NJL=NJ+1  May be used to change the grid topology for either a cartesian or a radial grid, although radial grid usage is by far the more common.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RadialGridIsComplete", DataType="boolean")]
        public bool RadialGridIsComplete {
            get {
                return this.radialGridIsCompleteField;
            }
            set {
                this.radialGridIsCompleteField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RadialGridIsCompleteSpecified {
            get {
                return this.radialGridIsCompleteFieldSpecified;
            }
            set {
                this.radialGridIsCompleteFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("KGaps", DataType="KGaps")]
        public KGaps KGaps {
            get {
                return this.kGapsField;
            }
            set {
                this.kGapsField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="IjkGridGeometry")]
        public IjkGridGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("UnstructuredColumnLayerGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_UnstructuredColumnLayerGridRepresentation : AbstractColumnLayerGridRepresentation {
        
        private string columnCountField;
        
        private UnstructuredColumnLayerGridGeometry geometryField;
        
        /// <remarks/>
        /// <summary>Number of unstructured columns in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of unstructured columns in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnCount", DataType="positiveInteger")]
        public string ColumnCount {
            get {
                return this.columnCountField;
            }
            set {
                this.columnCountField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="UnstructuredColumnLayerGridGeometry")]
        public UnstructuredColumnLayerGridGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractTruncatedColumnLayerGridRepresentation : AbstractGridRepresentation {
        
        private string nkField;
        
        private TruncationCellPatch truncationCellsField;
        
        /// <remarks/>
        /// <summary>Number of layers in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of layers in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nk", DataType="positiveInteger")]
        public string Nk {
            get {
                return this.nkField;
            }
            set {
                this.nkField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TruncationCells", DataType="TruncationCellPatch")]
        public TruncationCellPatch TruncationCells {
            get {
                return this.truncationCellsField;
            }
            set {
                this.truncationCellsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TruncatedIjkGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_TruncatedIjkGridRepresentation : AbstractTruncatedColumnLayerGridRepresentation {
        
        private string niField;
        
        private string njField;
        
        private IjkGridGeometry geometryField;
        
        /// <remarks/>
        /// <summary>Count of I-indices in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Count of I-indices in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ni", DataType="positiveInteger")]
        public string Ni {
            get {
                return this.niField;
            }
            set {
                this.niField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Count of J-indices in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Count of J-indices in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Nj", DataType="positiveInteger")]
        public string Nj {
            get {
                return this.njField;
            }
            set {
                this.njField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="IjkGridGeometry")]
        public IjkGridGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TruncatedUnstructuredColumnLayerGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_TruncatedUnstructuredColumnLayerGridRepresentation : AbstractTruncatedColumnLayerGridRepresentation {
        
        private string columnCountField;
        
        private UnstructuredColumnLayerGridGeometry geometryField;
        
        /// <remarks/>
        /// <summary>Number of unstructured columns in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of unstructured columns in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnCount", DataType="positiveInteger")]
        public string ColumnCount {
            get {
                return this.columnCountField;
            }
            set {
                this.columnCountField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="UnstructuredColumnLayerGridGeometry")]
        public UnstructuredColumnLayerGridGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GpGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GpGridRepresentation : AbstractGridRepresentation {
        
        private GpGridColumnLayerGrid[] columnLayerGridField;
        
        private GpGridUnstructuredGridPatch[] unstructuredGridPatchField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ColumnLayerGrid")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ColumnLayerGrid", DataType="GpGridColumnLayerGrid")]
        public GpGridColumnLayerGrid[] ColumnLayerGrid {
            get {
                return this.columnLayerGridField;
            }
            set {
                this.columnLayerGridField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("UnstructuredGridPatch")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("UnstructuredGridPatch", DataType="GpGridUnstructuredGridPatch")]
        public GpGridUnstructuredGridPatch[] UnstructuredGridPatch {
            get {
                return this.unstructuredGridPatchField;
            }
            set {
                this.unstructuredGridPatchField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("UnstructuredGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_UnstructuredGridRepresentation : AbstractGridRepresentation {
        
        private string cellCountField;
        
        private UnstructuredGridGeometry geometryField;
        
        /// <remarks/>
        /// <summary>Number of cells in the grid. Must be positive.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Number of cells in the grid. Must be positive.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CellCount", DataType="positiveInteger")]
        public string CellCount {
            get {
                return this.cellCountField;
            }
            set {
                this.cellCountField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geometry", DataType="UnstructuredGridGeometry")]
        public UnstructuredGridGeometry Geometry {
            get {
                return this.geometryField;
            }
            set {
                this.geometryField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RepresentationIdentitySet", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_RepresentationIdentitySet : AbstractResqmlDataObject {
        
        private RepresentationIdentity[] representationIdentityField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RepresentationIdentity")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RepresentationIdentity", DataType="RepresentationIdentity")]
        public RepresentationIdentity[] RepresentationIdentity {
            get {
                return this.representationIdentityField;
            }
            set {
                this.representationIdentityField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("LocalGridSet", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_LocalGridSet : AbstractResqmlDataObject {
        
        private Activation activationField;
        
        private DataObjectReference[] childGridField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Activation", DataType="Activation")]
        public Activation Activation {
            get {
                return this.activationField;
            }
            set {
                this.activationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChildGrid")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChildGrid", DataType="DataObjectReference")]
        public DataObjectReference[] ChildGrid {
            get {
                return this.childGridField;
            }
            set {
                this.childGridField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicColumn", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StratigraphicColumn : AbstractResqmlDataObject {
        
        private DataObjectReference[] ranksField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Ranks")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Ranks", DataType="DataObjectReference")]
        public DataObjectReference[] Ranks {
            get {
                return this.ranksField;
            }
            set {
                this.ranksField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_EarthModelInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyBoundaryInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GenericFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidOrganizationInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractFeatureInterpretation : AbstractResqmlDataObject {
        
        private Domain domainField;
        
        private DataObjectReference interpretedFeatureField;
        
        private TimeInterval hasOccuredDuringField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Domain", DataType="Domain")]
        public Domain Domain {
            get {
                return this.domainField;
            }
            set {
                this.domainField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InterpretedFeature", DataType="DataObjectReference")]
        public DataObjectReference InterpretedFeature {
            get {
                return this.interpretedFeatureField;
            }
            set {
                this.interpretedFeatureField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("HasOccuredDuring", DataType="TimeInterval")]
        public TimeInterval HasOccuredDuring {
            get {
                return this.hasOccuredDuringField;
            }
            set {
                this.hasOccuredDuringField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum Domain {
        
        /// <remarks/>
        depth,
        
        /// <remarks/>
        time,
        
        /// <remarks/>
        mixed,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeologicUnitInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GeologicUnitInterpretation : AbstractFeatureInterpretation {
        
        private GeologicUnitComposition geologicUnitCompositionField;
        
        private bool geologicUnitCompositionFieldSpecified;
        
        private GeologicUnitMaterialImplacement geologicUnitMaterialImplacementField;
        
        private bool geologicUnitMaterialImplacementFieldSpecified;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologicUnitComposition", DataType="GeologicUnitComposition")]
        public GeologicUnitComposition GeologicUnitComposition {
            get {
                return this.geologicUnitCompositionField;
            }
            set {
                this.geologicUnitCompositionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GeologicUnitCompositionSpecified {
            get {
                return this.geologicUnitCompositionFieldSpecified;
            }
            set {
                this.geologicUnitCompositionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologicUnitMaterialImplacement", DataType="GeologicUnitMaterialImplacement")]
        public GeologicUnitMaterialImplacement GeologicUnitMaterialImplacement {
            get {
                return this.geologicUnitMaterialImplacementField;
            }
            set {
                this.geologicUnitMaterialImplacementField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GeologicUnitMaterialImplacementSpecified {
            get {
                return this.geologicUnitMaterialImplacementFieldSpecified;
            }
            set {
                this.geologicUnitMaterialImplacementFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum GeologicUnitComposition {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("intrusive clay ")]
        intrusiveclay,
        
        /// <remarks/>
        organic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("intrusive mud ")]
        intrusivemud,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("evaporite salt")]
        evaporitesalt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("evaporite non salt")]
        evaporitenonsalt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sedimentary siliclastic")]
        sedimentarysiliclastic,
        
        /// <remarks/>
        carbonate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magmatic intrusive granitoid")]
        magmaticintrusivegranitoid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magmatic intrusive pyroclastic")]
        magmaticintrusivepyroclastic,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("magmatic extrusive lava flow")]
        magmaticextrusivelavaflow,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("other chemichal rock")]
        otherchemichalrock,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sedimentary turbidite")]
        sedimentaryturbidite,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum GeologicUnitMaterialImplacement {
        
        /// <remarks/>
        autochtonous,
        
        /// <remarks/>
        allochtonous,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicUnitInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StratigraphicUnitInterpretation : obj_GeologicUnitInterpretation {
        
        private DepositionMode depositionModeField;
        
        private bool depositionModeFieldSpecified;
        
        private LengthMeasure maxThicknessField;
        
        private LengthMeasure minThicknessField;
        
        /// <remarks/>
        /// <summary>BUSINESS RULE / The Deposition mode for a Geological Unit MUST be conssitent with the Boundary Relations of A Genetic Boundary. If it is not the case the Boundary Relation declaration is retained.</summary>
        [System.ComponentModel.DescriptionAttribute("BUSINESS RULE / The Deposition mode for a Geological Unit MUST be conssitent with" +
            " the Boundary Relations of A Genetic Boundary. If it is not the case the Boundar" +
            "y Relation declaration is retained.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("DepositionMode", DataType="DepositionMode")]
        public DepositionMode DepositionMode {
            get {
                return this.depositionModeField;
            }
            set {
                this.depositionModeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DepositionModeSpecified {
            get {
                return this.depositionModeFieldSpecified;
            }
            set {
                this.depositionModeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaxThickness", DataType="LengthMeasure")]
        public LengthMeasure MaxThickness {
            get {
                return this.maxThicknessField;
            }
            set {
                this.maxThicknessField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MinThickness", DataType="LengthMeasure")]
        public LengthMeasure MinThickness {
            get {
                return this.minThicknessField;
            }
            set {
                this.minThicknessField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum DepositionMode {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("proportional between top and bottom")]
        proportionalbetweentopandbottom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("parallel to bottom")]
        paralleltobottom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("parallel to top")]
        paralleltotop,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("parallel to another boundary")]
        paralleltoanotherboundary,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeobodyInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GeobodyInterpretation : obj_GeologicUnitInterpretation {
        
        private Geobody3dShape geobody3dShapeField;
        
        private bool geobody3dShapeFieldSpecified;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Geobody3dShape", DataType="Geobody3dShape")]
        public Geobody3dShape Geobody3dShape {
            get {
                return this.geobody3dShapeField;
            }
            set {
                this.geobody3dShapeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool Geobody3dShapeSpecified {
            get {
                return this.geobody3dShapeFieldSpecified;
            }
            set {
                this.geobody3dShapeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum Geobody3dShape {
        
        /// <remarks/>
        dyke,
        
        /// <remarks/>
        silt,
        
        /// <remarks/>
        dome,
        
        /// <remarks/>
        sheeth,
        
        /// <remarks/>
        diapir,
        
        /// <remarks/>
        batholith,
        
        /// <remarks/>
        channel,
        
        /// <remarks/>
        delta,
        
        /// <remarks/>
        dune,
        
        /// <remarks/>
        fan,
        
        /// <remarks/>
        reef,
        
        /// <remarks/>
        wedge,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RockFluidUnitInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_RockFluidUnitInterpretation : obj_GeologicUnitInterpretation {
        
        private Phase phaseField;
        
        private bool phaseFieldSpecified;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phase", DataType="Phase")]
        public Phase Phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool PhaseSpecified {
            get {
                return this.phaseFieldSpecified;
            }
            set {
                this.phaseFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum Phase {
        
        /// <remarks/>
        aquifer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gas cap")]
        gascap,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("oil column")]
        oilcolumn,
        
        /// <remarks/>
        seal,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("EarthModelInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_EarthModelInterpretation : AbstractFeatureInterpretation {
        
        private DataObjectReference[] stratigraphicOccurrencesField;
        
        private DataObjectReference stratigraphicColumnField;
        
        private DataObjectReference structureField;
        
        private DataObjectReference fluidField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StratigraphicOccurrences")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StratigraphicOccurrences", DataType="DataObjectReference")]
        public DataObjectReference[] StratigraphicOccurrences {
            get {
                return this.stratigraphicOccurrencesField;
            }
            set {
                this.stratigraphicOccurrencesField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StratigraphicColumn", DataType="DataObjectReference")]
        public DataObjectReference StratigraphicColumn {
            get {
                return this.stratigraphicColumnField;
            }
            set {
                this.stratigraphicColumnField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Structure", DataType="DataObjectReference")]
        public DataObjectReference Structure {
            get {
                return this.structureField;
            }
            set {
                this.structureField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Fluid", DataType="DataObjectReference")]
        public DataObjectReference Fluid {
            get {
                return this.fluidField;
            }
            set {
                this.fluidField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyBoundaryInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("BoundaryFeatureInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_BoundaryFeatureInterpretation : AbstractFeatureInterpretation {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("HorizonInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_HorizonInterpretation : obj_BoundaryFeatureInterpretation {
        
        private BoundaryRelation[] boundaryRelationField;
        
        private SequenceStratigraphySurface sequenceStratigraphySurfaceField;
        
        private bool sequenceStratigraphySurfaceFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BoundaryRelation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BoundaryRelation", DataType="BoundaryRelation")]
        public BoundaryRelation[] BoundaryRelation {
            get {
                return this.boundaryRelationField;
            }
            set {
                this.boundaryRelationField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("SequenceStratigraphySurface", DataType="SequenceStratigraphySurface")]
        public SequenceStratigraphySurface SequenceStratigraphySurface {
            get {
                return this.sequenceStratigraphySurfaceField;
            }
            set {
                this.sequenceStratigraphySurfaceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SequenceStratigraphySurfaceSpecified {
            get {
                return this.sequenceStratigraphySurfaceFieldSpecified;
            }
            set {
                this.sequenceStratigraphySurfaceFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum BoundaryRelation {
        
        /// <remarks/>
        conformable,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("unconformable below and above")]
        unconformablebelowandabove,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("unconformable above")]
        unconformableabove,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("unconformable below")]
        unconformablebelow,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum SequenceStratigraphySurface {
        
        /// <remarks/>
        flooding,
        
        /// <remarks/>
        ravinement,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("maximum flooding")]
        maximumflooding,
        
        /// <remarks/>
        transgressive,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("FaultInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_FaultInterpretation : obj_BoundaryFeatureInterpretation {
        
        private bool isListricField;
        
        private bool isListricFieldSpecified;
        
        private LengthMeasure maximumThrowField;
        
        private PlaneAngleMeasure meanAzimuthField;
        
        private PlaneAngleMeasure meanDipField;
        
        private FaultThrow[] throwInterpretationField;
        
        /// <remarks/>
        /// <summary>Indicates if the normal fault is listric or not.  BUSINESS RULE: Must be present if the fault is normal. Must not be present if the fault is not normal.</summary>
        [System.ComponentModel.DescriptionAttribute("Indicates if the normal fault is listric or not.  BUSINESS RULE: Must be present " +
            "if the fault is normal. Must not be present if the fault is not normal.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsListric", DataType="boolean")]
        public bool IsListric {
            get {
                return this.isListricField;
            }
            set {
                this.isListricField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IsListricSpecified {
            get {
                return this.isListricFieldSpecified;
            }
            set {
                this.isListricFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MaximumThrow", DataType="LengthMeasure")]
        public LengthMeasure MaximumThrow {
            get {
                return this.maximumThrowField;
            }
            set {
                this.maximumThrowField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeanAzimuth", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure MeanAzimuth {
            get {
                return this.meanAzimuthField;
            }
            set {
                this.meanAzimuthField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MeanDip", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure MeanDip {
            get {
                return this.meanDipField;
            }
            set {
                this.meanDipField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ThrowInterpretation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ThrowInterpretation", DataType="FaultThrow")]
        public FaultThrow[] ThrowInterpretation {
            get {
                return this.throwInterpretationField;
            }
            set {
                this.throwInterpretationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeobodyBoundaryInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GeobodyBoundaryInterpretation : obj_BoundaryFeatureInterpretation {
        
        private BoundaryRelation[] boundaryRelationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BoundaryRelation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BoundaryRelation", DataType="BoundaryRelation")]
        public BoundaryRelation[] BoundaryRelation {
            get {
                return this.boundaryRelationField;
            }
            set {
                this.boundaryRelationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_WellboreInterpretation : AbstractFeatureInterpretation {
        
        private bool isDrilledField;
        
        /// <remarks/>
        /// <summary>Used to indicate that this wellbore has been, or is being, drilled. This distinguishes from planned wells. For one wellbore feature we may expect to have multiple wellbore interpretations: IsDrilled=TRUE for instance will be used for updated drilled trajectories. IsDrilled=FALSE for planned trajectories.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"Used to indicate that this wellbore has been, or is being, drilled. This distinguishes from planned wells. For one wellbore feature we may expect to have multiple wellbore interpretations: IsDrilled=TRUE for instance will be used for updated drilled trajectories. IsDrilled=FALSE for planned trajectories.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsDrilled", DataType="boolean")]
        public bool IsDrilled {
            get {
                return this.isDrilledField;
            }
            set {
                this.isDrilledField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GenericFeatureInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GenericFeatureInterpretation : AbstractFeatureInterpretation {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidOrganizationInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractOrganizationInterpretation : AbstractFeatureInterpretation {
        
        private AbstractContactInterpretationPart[] contactInterpretationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ContactInterpretation")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ContactInterpretation", DataType="AbstractContactInterpretationPart")]
        public AbstractContactInterpretationPart[] ContactInterpretation {
            get {
                return this.contactInterpretationField;
            }
            set {
                this.contactInterpretationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicColumnRankInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractStratigraphicOrganizationInterpretation : AbstractOrganizationInterpretation {
        
        private OrderingCriteria orderingCriteriaField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OrderingCriteria", DataType="OrderingCriteria")]
        public OrderingCriteria OrderingCriteria {
            get {
                return this.orderingCriteriaField;
            }
            set {
                this.orderingCriteriaField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum OrderingCriteria {
        
        /// <remarks/>
        age,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("apparent depth")]
        apparentdepth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("measured depth")]
        measureddepth,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicOccurrenceInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StratigraphicOccurrenceInterpretation : AbstractStratigraphicOrganizationInterpretation {
        
        private DataObjectReference isOccurrenceOfField;
        
        private GeologicUnitInterpretationIndex[] geologicUnitIndexField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsOccurrenceOf", DataType="DataObjectReference")]
        public DataObjectReference IsOccurrenceOf {
            get {
                return this.isOccurrenceOfField;
            }
            set {
                this.isOccurrenceOfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("GeologicUnitIndex")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeologicUnitIndex", DataType="GeologicUnitInterpretationIndex")]
        public GeologicUnitInterpretationIndex[] GeologicUnitIndex {
            get {
                return this.geologicUnitIndexField;
            }
            set {
                this.geologicUnitIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicColumnRankInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StratigraphicColumnRankInterpretation : AbstractStratigraphicOrganizationInterpretation {
        
        private string indexField;
        
        private StratigraphicUnitInterpretationIndex[] stratigraphicUnitsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="nonNegativeInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return this.indexField;
            }
            set {
                this.indexField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("StratigraphicUnits")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("StratigraphicUnits", DataType="StratigraphicUnitInterpretationIndex")]
        public StratigraphicUnitInterpretationIndex[] StratigraphicUnits {
            get {
                return this.stratigraphicUnitsField;
            }
            set {
                this.stratigraphicUnitsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StructuralOrganizationInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StructuralOrganizationInterpretation : AbstractOrganizationInterpretation {
        
        private OrderingCriteria orderingCriteriaField;
        
        private DataObjectReference[] faultsField;
        
        private HorizonInterpretationIndex[] horizonsField;
        
        private DataObjectReference[] sidesField;
        
        private DataObjectReference[] topFrontierField;
        
        private DataObjectReference[] bottomFrontierField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OrderingCriteria", DataType="OrderingCriteria")]
        public OrderingCriteria OrderingCriteria {
            get {
                return this.orderingCriteriaField;
            }
            set {
                this.orderingCriteriaField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Faults")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Faults", DataType="DataObjectReference")]
        public DataObjectReference[] Faults {
            get {
                return this.faultsField;
            }
            set {
                this.faultsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Horizons")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Horizons", DataType="HorizonInterpretationIndex")]
        public HorizonInterpretationIndex[] Horizons {
            get {
                return this.horizonsField;
            }
            set {
                this.horizonsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Sides")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Sides", DataType="DataObjectReference")]
        public DataObjectReference[] Sides {
            get {
                return this.sidesField;
            }
            set {
                this.sidesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("TopFrontier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TopFrontier", DataType="DataObjectReference")]
        public DataObjectReference[] TopFrontier {
            get {
                return this.topFrontierField;
            }
            set {
                this.topFrontierField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("BottomFrontier")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("BottomFrontier", DataType="DataObjectReference")]
        public DataObjectReference[] BottomFrontier {
            get {
                return this.bottomFrontierField;
            }
            set {
                this.bottomFrontierField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RockFluidOrganizationInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_RockFluidOrganizationInterpretation : AbstractOrganizationInterpretation {
        
        private RockFluidUnitInterpretationIndex rockFluidUnitIndexField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("RockFluidUnitIndex", DataType="RockFluidUnitInterpretationIndex")]
        public RockFluidUnitInterpretationIndex RockFluidUnitIndex {
            get {
                return this.rockFluidUnitIndexField;
            }
            set {
                this.rockFluidUnitIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GlobalChronostratigraphicColumn", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GlobalChronostratigraphicColumn : AbstractResqmlDataObject {
        
        private ChronostratigraphicRank[] chronostratigraphicColumnComponentField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("ChronostratigraphicColumnComponent")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChronostratigraphicColumnComponent", DataType="ChronostratigraphicRank")]
        public ChronostratigraphicRank[] ChronostratigraphicColumnComponent {
            get {
                return this.chronostratigraphicColumnComponentField;
            }
            set {
                this.chronostratigraphicColumnComponentField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTechnicalFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FrontierFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeologicFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractFeature : AbstractResqmlDataObject {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StreamlinesFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FrontierFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractTechnicalFeature : AbstractFeature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StreamlinesFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StreamlinesFeature : AbstractTechnicalFeature {
        
        private StreamlineFlux fluxField;
        
        private string otherFluxField;
        
        private TimeIndex timeIndexField;
        
        /// <remarks/>
        /// <summary>Specification of the streamline flux, drawn from the enumeration.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Specification of the streamline flux, drawn from the enumeration.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Flux", DataType="StreamlineFlux")]
        public StreamlineFlux Flux {
            get {
                return this.fluxField;
            }
            set {
                this.fluxField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Optional specification of the streamline flux, if an extension is required beyond the enumeration.  BUSINESS RULE: OtherFlux should appear if Flux has the value of other.</summary>
        [System.ComponentModel.DescriptionAttribute("Optional specification of the streamline flux, if an extension is required beyond" +
            " the enumeration.  BUSINESS RULE: OtherFlux should appear if Flux has the value " +
            "of other.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OtherFlux", DataType="string")]
        public string OtherFlux {
            get {
                return this.otherFluxField;
            }
            set {
                this.otherFluxField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeIndex", DataType="TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return this.timeIndexField;
            }
            set {
                this.timeIndexField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum StreamlineFlux {
        
        /// <remarks/>
        oil,
        
        /// <remarks/>
        gas,
        
        /// <remarks/>
        water,
        
        /// <remarks/>
        total,
        
        /// <remarks/>
        other,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractSeismicSurveyFeature : AbstractTechnicalFeature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SeismicLatticeFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_SeismicLatticeFeature : AbstractSeismicSurveyFeature {
        
        private string crosslineCountField;
        
        private string crosslineIndexIncrementField;
        
        private string firstCrosslineIndexField;
        
        private string firstInlineIndexField;
        
        private string inlineCountField;
        
        private string inlineIndexIncrementField;
        
        private SeismicLatticeSetFeature isPartOfField;
        
        /// <remarks/>
        /// <summary>The count of crosslines in the 3D seismic survey.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The count of crosslines in the 3D seismic survey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CrosslineCount", DataType="positiveInteger")]
        public string CrosslineCount {
            get {
                return this.crosslineCountField;
            }
            set {
                this.crosslineCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The constant index increment between two consecutive crosslines of the 3D seismic survey.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The constant index increment between two consecutive crosslines of the 3D seismic" +
            " survey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("CrosslineIndexIncrement", DataType="integer")]
        public string CrosslineIndexIncrement {
            get {
                return this.crosslineIndexIncrementField;
            }
            set {
                this.crosslineIndexIncrementField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The index of the first crossline of the 3D seismic survey.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index of the first crossline of the 3D seismic survey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FirstCrosslineIndex", DataType="integer")]
        public string FirstCrosslineIndex {
            get {
                return this.firstCrosslineIndexField;
            }
            set {
                this.firstCrosslineIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The index of the first inline of the 3D seismic survey.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index of the first inline of the 3D seismic survey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FirstInlineIndex", DataType="integer")]
        public string FirstInlineIndex {
            get {
                return this.firstInlineIndexField;
            }
            set {
                this.firstInlineIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The count of inlines in the 3D seismic survey.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The count of inlines in the 3D seismic survey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InlineCount", DataType="positiveInteger")]
        public string InlineCount {
            get {
                return this.inlineCountField;
            }
            set {
                this.inlineCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The constant index increment between two consecutive inlines of the 3D seismic survey.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The constant index increment between two consecutive inlines of the 3D seismic su" +
            "rvey.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("InlineIndexIncrement", DataType="integer")]
        public string InlineIndexIncrement {
            get {
                return this.inlineIndexIncrementField;
            }
            set {
                this.inlineIndexIncrementField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsPartOf", DataType="SeismicLatticeSetFeature")]
        public SeismicLatticeSetFeature IsPartOf {
            get {
                return this.isPartOfField;
            }
            set {
                this.isPartOfField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public partial class SeismicLatticeSetFeature : AbstractSeismicSurveyFeature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SeismicLineFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_SeismicLineFeature : AbstractSeismicSurveyFeature {
        
        private string firstTraceIndexField;
        
        private string traceCountField;
        
        private string traceIndexIncrementField;
        
        private DataObjectReference isPartOfField;
        
        /// <remarks/>
        /// <summary>The index of the first trace of the seismic line.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The index of the first trace of the seismic line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FirstTraceIndex", DataType="integer")]
        public string FirstTraceIndex {
            get {
                return this.firstTraceIndexField;
            }
            set {
                this.firstTraceIndexField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The count of traces in the seismic line.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The count of traces in the seismic line.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TraceCount", DataType="positiveInteger")]
        public string TraceCount {
            get {
                return this.traceCountField;
            }
            set {
                this.traceCountField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The constant index increment between two consecutive traces.</summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The constant index increment between two consecutive traces.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TraceIndexIncrement", DataType="integer")]
        public string TraceIndexIncrement {
            get {
                return this.traceIndexIncrementField;
            }
            set {
                this.traceIndexIncrementField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("IsPartOf", DataType="DataObjectReference")]
        public DataObjectReference IsPartOf {
            get {
                return this.isPartOfField;
            }
            set {
                this.isPartOfField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SeismicLineSetFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_SeismicLineSetFeature : AbstractSeismicSurveyFeature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_WellboreFeature : AbstractTechnicalFeature {
        
        private WitsmlWellboreReference witsmlWellboreField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("WitsmlWellbore", DataType="WitsmlWellboreReference")]
        public WitsmlWellboreReference WitsmlWellbore {
            get {
                return this.witsmlWellboreField;
            }
            set {
                this.witsmlWellboreField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("FrontierFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_FrontierFeature : AbstractTechnicalFeature {
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractGeologicFeature : AbstractFeature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("OrganizationFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_OrganizationFeature : AbstractGeologicFeature {
        
        private OrganizationKind organizationKindField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("OrganizationKind", DataType="OrganizationKind")]
        public OrganizationKind OrganizationKind {
            get {
                return this.organizationKindField;
            }
            set {
                this.organizationKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum OrganizationKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("earth model")]
        earthmodel,
        
        /// <remarks/>
        fluid,
        
        /// <remarks/>
        stratigraphic,
        
        /// <remarks/>
        structural,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_FluidBoundaryFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("BoundaryFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_BoundaryFeature : AbstractGeologicFeature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TectonicBoundaryFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_TectonicBoundaryFeature : obj_BoundaryFeature {
        
        private TectonicBoundaryKind tectonicBoundaryKindField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TectonicBoundaryKind", DataType="TectonicBoundaryKind")]
        public TectonicBoundaryKind TectonicBoundaryKind {
            get {
                return this.tectonicBoundaryKindField;
            }
            set {
                this.tectonicBoundaryKindField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum TectonicBoundaryKind {
        
        /// <remarks/>
        fault,
        
        /// <remarks/>
        fracture,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeneticBoundaryFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GeneticBoundaryFeature : obj_BoundaryFeature {
        
        private GeneticBoundaryKind geneticBoundaryKindField;
        
        private Timestamp absoluteAgeField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("GeneticBoundaryKind", DataType="GeneticBoundaryKind")]
        public GeneticBoundaryKind GeneticBoundaryKind {
            get {
                return this.geneticBoundaryKindField;
            }
            set {
                this.geneticBoundaryKindField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbsoluteAge", DataType="Timestamp")]
        public Timestamp AbsoluteAge {
            get {
                return this.absoluteAgeField;
            }
            set {
                this.absoluteAgeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum GeneticBoundaryKind {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("geobody boundary")]
        geobodyboundary,
        
        /// <remarks/>
        horizon,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("FluidBoundaryFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_FluidBoundaryFeature : obj_BoundaryFeature {
        
        private FluidContact fluidContactField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidContact", DataType="FluidContact")]
        public FluidContact FluidContact {
            get {
                return this.fluidContactField;
            }
            set {
                this.fluidContactField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_RockFluidUnitFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeologicUnitFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GeologicUnitFeature : AbstractGeologicFeature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeobodyFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_GeobodyFeature : obj_GeologicUnitFeature {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicUnitFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_StratigraphicUnitFeature : obj_GeologicUnitFeature {
        
        private DataObjectReference chronostratigraphicBottomField;
        
        private DataObjectReference chronostratigraphicTopField;
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChronostratigraphicBottom", DataType="DataObjectReference")]
        public DataObjectReference ChronostratigraphicBottom {
            get {
                return this.chronostratigraphicBottomField;
            }
            set {
                this.chronostratigraphicBottomField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ChronostratigraphicTop", DataType="DataObjectReference")]
        public DataObjectReference ChronostratigraphicTop {
            get {
                return this.chronostratigraphicTopField;
            }
            set {
                this.chronostratigraphicTopField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RockFluidUnitFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_RockFluidUnitFeature : obj_GeologicUnitFeature {
        
        private Phase phaseField;
        
        private DataObjectReference fluidBoundaryBottomField;
        
        private DataObjectReference fluidBoundaryTopField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Phase", DataType="Phase")]
        public Phase Phase {
            get {
                return this.phaseField;
            }
            set {
                this.phaseField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidBoundaryBottom", DataType="DataObjectReference")]
        public DataObjectReference FluidBoundaryBottom {
            get {
                return this.fluidBoundaryBottomField;
            }
            set {
                this.fluidBoundaryBottomField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("FluidBoundaryTop", DataType="DataObjectReference")]
        public DataObjectReference FluidBoundaryTop {
            get {
                return this.fluidBoundaryTopField;
            }
            set {
                this.fluidBoundaryTopField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TimeSeries", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_TimeSeries : AbstractResqmlDataObject {
        
        private Timestamp[] timeField;
        
        private TimeSeriesParentage timeSeriesParentageField;
        
        /// <remarks/>
        /// <summary>Individual times composing the series. The list ordering is used by the time index.</summary>
        [System.Xml.Serialization.XmlElementAttribute("Time")]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Individual times composing the series. The list ordering is used by the time inde" +
            "x.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Time", DataType="Timestamp")]
        public Timestamp[] Time {
            get {
                return this.timeField;
            }
            set {
                this.timeField = value;
            }
        }
        
        /// <remarks/>
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeSeriesParentage", DataType="TimeSeriesParentage")]
        public TimeSeriesParentage TimeSeriesParentage {
            get {
                return this.timeSeriesParentageField;
            }
            set {
                this.timeSeriesParentageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalDepth3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(obj_LocalTime3dCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public abstract partial class AbstractLocal3dCrs : AbstractResqmlDataObject {
        
        private double yOffsetField;
        
        private double zOffsetField;
        
        private PlaneAngleMeasure arealRotationField;
        
        private AxisOrder2d projectedAxisOrderField;
        
        private LengthUom projectedUomField;
        
        private LengthUom verticalUomField;
        
        private double xOffsetField;
        
        private bool zIncreasingDownwardField;
        
        private AbstractVerticalCrs verticalCrsField;
        
        private AbstractProjectedCrs projectedCrsField;
        
        /// <remarks/>
        /// <summary>The Y offset of the origin of the local areal axes relative to the projected CRS origin. The value MUST represent the second axis of the coordinate system. The unit of measure is defined by the unit of measure for the projected 2D CRS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The Y offset of the origin of the local areal axes relative to the projected CRS " +
            "origin. The value MUST represent the second axis of the coordinate system. The u" +
            "nit of measure is defined by the unit of measure for the projected 2D CRS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("YOffset", DataType="double")]
        public double YOffset {
            get {
                return this.yOffsetField;
            }
            set {
                this.yOffsetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The Z offset of the origin of the local vertical axis relative to the vertical CRS origin. According to CRS type (depth or time) it corresponds to the depth or time datum  The value MUST represent the third axis of the coordinate system. The unit of measure is defined by the unit of measure for the vertical CRS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute(@"The Z offset of the origin of the local vertical axis relative to the vertical CRS origin. According to CRS type (depth or time) it corresponds to the depth or time datum  The value MUST represent the third axis of the coordinate system. The unit of measure is defined by the unit of measure for the vertical CRS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ZOffset", DataType="double")]
        public double ZOffset {
            get {
                return this.zOffsetField;
            }
            set {
                this.zOffsetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The rotation of the local Y axis relative to the projected Y axis.   - A positive value indicates a clockwise rotation from the projected Y axis.   - A negative value indicates a counter-clockwise rotation form the projected Y axis.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The rotation of the local Y axis relative to the projected Y axis.   - A positive" +
            " value indicates a clockwise rotation from the projected Y axis.   - A negative " +
            "value indicates a counter-clockwise rotation form the projected Y axis.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ArealRotation", DataType="PlaneAngleMeasure")]
        public PlaneAngleMeasure ArealRotation {
            get {
                return this.arealRotationField;
            }
            set {
                this.arealRotationField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Defines the coordinate system axis order of the global projected CRS when the projected CRS is an unknown CRS, else it must be correspond to the axis order of the projected  CRS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines the coordinate system axis order of the global projected CRS when the pro" +
            "jected CRS is an unknown CRS, else it must be correspond to the axis order of th" +
            "e projected  CRS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProjectedAxisOrder", DataType="AxisOrder2d")]
        public AxisOrder2d ProjectedAxisOrder {
            get {
                return this.projectedAxisOrderField;
            }
            set {
                this.projectedAxisOrderField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measure of the associated Projected CRS. When the projected CRS is not unknown, it must be the same than the unit defined by the Projected CRS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure of the associated Projected CRS. When the projected CRS is not un" +
            "known, it must be the same than the unit defined by the Projected CRS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProjectedUom", DataType="LengthUom")]
        public LengthUom ProjectedUom {
            get {
                return this.projectedUomField;
            }
            set {
                this.projectedUomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Unit of measure of the associated Vertical CRS. When the vertical CRS is not unknown, it must be the same than the unit defined by the Vertical CRS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Unit of measure of the associated Vertical CRS. When the vertical CRS is not unkn" +
            "own, it must be the same than the unit defined by the Vertical CRS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VerticalUom", DataType="LengthUom")]
        public LengthUom VerticalUom {
            get {
                return this.verticalUomField;
            }
            set {
                this.verticalUomField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>The X location of the origin of the local areal axes relative to the projected CRS origin. The value MUST represent the first axis of the coordinate system. The unit of measure is defined by the unit of measure for the projected 2D CRS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("The X location of the origin of the local areal axes relative to the projected CR" +
            "S origin. The value MUST represent the first axis of the coordinate system. The " +
            "unit of measure is defined by the unit of measure for the projected 2D CRS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("XOffset", DataType="double")]
        public double XOffset {
            get {
                return this.xOffsetField;
            }
            set {
                this.xOffsetField = value;
            }
        }
        
        /// <remarks/>
        /// <summary>Indicates that Z values correspond to depth values and are increasing downward, as opposite to elevation values increasing upward. When the vertical CRS is not an unknown, it must correspond to the axis orientation of the vertical CRS.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Indicates that Z values correspond to depth values and are increasing downward, a" +
            "s opposite to elevation values increasing upward. When the vertical CRS is not a" +
            "n unknown, it must correspond to the axis orientation of the vertical CRS.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ZIncreasingDownward", DataType="boolean")]
        public bool ZIncreasingDownward {
            get {
                return this.zIncreasingDownwardField;
            }
            set {
                this.zIncreasingDownwardField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("VerticalCrs", DataType="AbstractVerticalCrs")]
        public AbstractVerticalCrs VerticalCrs {
            get {
                return this.verticalCrsField;
            }
            set {
                this.verticalCrsField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("ProjectedCrs", DataType="AbstractProjectedCrs")]
        public AbstractProjectedCrs ProjectedCrs {
            get {
                return this.projectedCrsField;
            }
            set {
                this.projectedCrsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AxisOrder2d {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("easting northing")]
        eastingnorthing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("northing easting")]
        northingeasting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("westing southing")]
        westingsouthing,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("southing westing")]
        southingwesting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("northing westing")]
        northingwesting,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("westing northing")]
        westingnorthing,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("LocalDepth3dCrs", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_LocalDepth3dCrs : AbstractLocal3dCrs {
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("LocalTime3dCrs", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
    [Energistics.SchemaGatherer.EnergisticsDataObjectAttribute("RESQML", "2.0.1")]
    public partial class obj_LocalTime3dCrs : AbstractLocal3dCrs {
        
        private TimeUom timeUomField;
        
        /// <remarks/>
        /// <summary>Defines the unit of measure of the third (time) coordinates, for the geometries that refers to it.</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("Defines the unit of measure of the third (time) coordinates, for the geometries t" +
            "hat refers to it.")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("TimeUom", DataType="TimeUom")]
        public TimeUom TimeUom {
            get {
                return this.timeUomField;
            }
            set {
                this.timeUomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/2 ms")]
        Item12ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("100 ka[t]")]
        Item100kat,
        
        /// <remarks/>
        a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("a[t]")]
        at,
        
        /// <remarks/>
        ca,
        
        /// <remarks/>
        cs,
        
        /// <remarks/>
        d,
        
        /// <remarks/>
        ds,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ea[t]")]
        Eat,
        
        /// <remarks/>
        fa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ga[t]")]
        Gat,
        
        /// <remarks/>
        h,
        
        /// <remarks/>
        hs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ka[t]")]
        kat,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ma[t]")]
        Mat,
        
        /// <remarks/>
        min,
        
        /// <remarks/>
        ms,
        
        /// <remarks/>
        na,
        
        /// <remarks/>
        ns,
        
        /// <remarks/>
        ps,
        
        /// <remarks/>
        s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ta[t]")]
        Tat,
        
        /// <remarks/>
        us,
        
        /// <remarks/>
        wk,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("EpcExternalPartReference", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
    public partial class obj_EpcExternalPartReference : AbstractCitedDataObject {
        
        private string mimeTypeField;
        
        /// <remarks/>
        /// <summary>IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.  MIME type for HDF proxy is : application/x-hdf5 (by RESQML convention).</summary>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [System.ComponentModel.DescriptionAttribute("IAMF registered, if one exists, or a free text field. Needs documentation on seis" +
            "mic especially.  MIME type for HDF proxy is : application/x-hdf5 (by RESQML conv" +
            "ention).")]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("MimeType", DataType="string")]
        public string MimeType {
            get {
                return this.mimeTypeField;
            }
            set {
                this.mimeTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class VerticalCrs : AbstractCitedDataObject {
        
        private VerticalDirection directionField;
        
        private AbstractVerticalCrs abstractVerticalCrsField;
        
        private LengthUom uomField;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("Direction", DataType="VerticalDirection")]
        public VerticalDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractVerticalCrs", DataType="AbstractVerticalCrs")]
        public AbstractVerticalCrs AbstractVerticalCrs {
            get {
                return this.abstractVerticalCrsField;
            }
            set {
                this.abstractVerticalCrsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VerticalDirection {
        
        /// <remarks/>
        up,
        
        /// <remarks/>
        down,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public partial class ProjectedCrs : AbstractCitedDataObject {
        
        private AxisOrder2d axisOrderField;
        
        private AbstractProjectedCrs abstractProjectedCrsField;
        
        private LengthUom uomField;
        
        private bool uomFieldSpecified;
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AxisOrder", DataType="AxisOrder2d")]
        public AxisOrder2d AxisOrder {
            get {
                return this.axisOrderField;
            }
            set {
                this.axisOrderField = value;
            }
        }
        
        /// <remarks/>
        [System.ComponentModel.DataAnnotations.RequiredAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("AbstractProjectedCrs", DataType="AbstractProjectedCrs")]
        public AbstractProjectedCrs AbstractProjectedCrs {
            get {
                return this.abstractProjectedCrsField;
            }
            set {
                this.abstractProjectedCrsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        [Energistics.DataAccess.Reflection.EnergisticsDataTypeAttribute("uom", DataType="LengthUom")]
        public LengthUom uom {
            get {
                return this.uomField;
            }
            set {
                this.uomField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool uomSpecified {
            get {
                return this.uomFieldSpecified;
            }
            set {
                this.uomFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LogarithmicPowerRatioUom {
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        dB,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/h")]
        kmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/s")]
        kmols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/h")]
        lbmolh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/s")]
        lbmols,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/s")]
        mols,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricConductivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kS/m")]
        kSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/cm")]
        mScm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mS/m")]
        mSm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("S/m")]
        Sm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerRotationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/rad")]
        ft3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rad")]
        m3rad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/rev")]
        m3rev,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(min.ft2)")]
        ft3minft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(s.ft2)")]
        ft3sft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft2)")]
        galUKhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in2)")]
        galUKhin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft2)")]
        galUKminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft2)")]
        galUShft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in2)")]
        galUShin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft2)")]
        galUSminft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m2)")]
        m3sm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MobilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/(Pa.s)")]
        DPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D/cP")]
        DcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft2/(lbf.s)")]
        mDft2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.in2/(lbf.s)")]
        mDin2lbfs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/(Pa.s)")]
        mDPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD/cP")]
        mDcP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]/(Pa.s)")]
        TDAPIPas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatTransferCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.deltaF)")]
        BtuIThft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2.deltaR)")]
        BtuIThft2deltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.m2.deltaC)")]
        BtuIThm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2.deltaF)")]
        BtuITsft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2.deltaC)")]
        calthhcm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm2.deltaC)")]
        calthscm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(s.m2.deltaC)")]
        Jsm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m2.deltaC)")]
        kcalthhm2deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(h.m2.deltaK)")]
        kJhm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m2.deltaK)")]
        kWm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.deltaK)")]
        Wm2deltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerEnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(kW.h)")]
        kgkWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/J")]
        kgJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/MJ")]
        kgMJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(hp.h)")]
        lbmhph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/J")]
        mgJ,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentOfInertiaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2")]
        lbmft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum CapacitanceUom {
        
        /// <remarks/>
        cF,
        
        /// <remarks/>
        dF,
        
        /// <remarks/>
        EF,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        fF,
        
        /// <remarks/>
        GF,
        
        /// <remarks/>
        kF,
        
        /// <remarks/>
        mF,
        
        /// <remarks/>
        MF,
        
        /// <remarks/>
        nF,
        
        /// <remarks/>
        pF,
        
        /// <remarks/>
        TF,
        
        /// <remarks/>
        uF,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxDensityPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gauss/cm")]
        gausscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mT/dm")]
        mTdm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("T/m")]
        Tm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/bbl")]
        ftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft3")]
        ftft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/gal[US]")]
        ftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/dm3")]
        kmdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/L")]
        kmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m3")]
        mm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[UK]")]
        migalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/gal[US]")]
        migalUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 lbm/a")]
        Item1E6lbma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/s")]
        gs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/d")]
        kgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/h")]
        kgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/min")]
        kgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/s")]
        kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/d")]
        lbmd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/h")]
        lbmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/min")]
        lbmmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/s")]
        lbms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/a")]
        Mga,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/d")]
        Mgd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/h")]
        Mgh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/min")]
        Mgmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/a")]
        ta,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/d")]
        td,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/h")]
        th,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/min")]
        tmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/a")]
        tonUKa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/d")]
        tonUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/h")]
        tonUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]/min")]
        tonUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/a")]
        tonUSa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/d")]
        tonUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/h")]
        tonUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/min")]
        tonUSmin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolecularWeightUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/mol")]
        gmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/mol")]
        kgmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/lbmol")]
        lbmlbmol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxUom {
        
        /// <remarks/>
        cWb,
        
        /// <remarks/>
        dWb,
        
        /// <remarks/>
        EWb,
        
        /// <remarks/>
        fWb,
        
        /// <remarks/>
        GWb,
        
        /// <remarks/>
        kWb,
        
        /// <remarks/>
        MWb,
        
        /// <remarks/>
        mWb,
        
        /// <remarks/>
        nWb,
        
        /// <remarks/>
        pWb,
        
        /// <remarks/>
        TWb,
        
        /// <remarks/>
        uWb,
        
        /// <remarks/>
        Wb,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalConductanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/deltaK")]
        WdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum QuantityOfLightUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm.s")]
        lms,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/h")]
        Item1000fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft/s")]
        Item1000fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/a")]
        cma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s")]
        cms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm/s")]
        dms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/d")]
        ftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/h")]
        fth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/min")]
        ftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ms")]
        ftms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s")]
        fts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/us")]
        ftus,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/a")]
        ina,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/min")]
        inmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s")]
        ins,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/h")]
        kmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/s")]
        kms,
        
        /// <remarks/>
        knot,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/d")]
        md,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/h")]
        mh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/min")]
        mmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/ms")]
        mms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s")]
        ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/h")]
        mih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mil/a")]
        mila,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/a")]
        mma,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/s")]
        mms1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nm/s")]
        nms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("um/s")]
        ums,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceLengthPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/m")]
        kgfmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in")]
        lbfftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in/in")]
        lbfinin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m/m")]
        Nmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/ft")]
        tonfUSmift,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SolidAngleUom {
        
        /// <remarks/>
        sr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.acre.ft)")]
        bbldacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m3)")]
        m3sm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentOfForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 lbf.ft")]
        Item1000lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("daN.m")]
        daNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dN.m")]
        dNm,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m")]
        kgfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft2/s2")]
        lbmft2s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.ft")]
        pdlft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft")]
        tonfUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi")]
        tonfUSmi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/bbl")]
        Item0001lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[UK]")]
        Item0001lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 lbm/gal[US]")]
        Item0001lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 grain/ft3")]
        Item001grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 lbm/bbl")]
        Item01lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 Mg/m3")]
        Item10Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm3")]
        gcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/dm3")]
        gdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[UK]")]
        ggalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/gal[US]")]
        ggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/L")]
        gL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/m3")]
        gm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/ft3")]
        grainft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("grain/gal[US]")]
        graingalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm3")]
        kgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/L")]
        kgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m3")]
        kgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/bbl")]
        lbmbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft3")]
        lbmft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[UK]")]
        lbmgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/gal[US]")]
        lbmgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/in3")]
        lbmin3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/dm3")]
        mgdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/gal[US]")]
        mggalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/L")]
        mgL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/m3")]
        mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m3")]
        Mgm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("t/m3")]
        tm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/cm3")]
        ugcm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kmol")]
        dm3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbmol")]
        ft3lbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kmol")]
        Lkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/mol")]
        Lmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kmol")]
        m3kmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/mol")]
        m3mol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstanceUom {
        
        /// <remarks/>
        kmol,
        
        /// <remarks/>
        lbmol,
        
        /// <remarks/>
        mmol,
        
        /// <remarks/>
        mol,
        
        /// <remarks/>
        umol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DipoleMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C.m")]
        Cm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APINeutronUom {
        
        /// <remarks/>
        nAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/a")]
        Item1a,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/d")]
        Item1d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/h")]
        Item1h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/min")]
        Item1min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ms")]
        Item1ms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/s")]
        Item1s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/us")]
        Item1us,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/wk")]
        Item1wk,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/kPa")]
        deltaCkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/psi")]
        deltaFpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/Pa")]
        deltaKPa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 ft/ft")]
        Item001ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 m/m")]
        Item130mm,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/ft")]
        ftft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/in")]
        ftin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/m")]
        ftm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/mi")]
        ftmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("km/cm")]
        kmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/cm")]
        mcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/km")]
        mkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/m")]
        mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi/in")]
        miin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaUom {
        
        /// <remarks/>
        acre,
        
        /// <remarks/>
        b,
        
        /// <remarks/>
        cm2,
        
        /// <remarks/>
        ft2,
        
        /// <remarks/>
        ha,
        
        /// <remarks/>
        in2,
        
        /// <remarks/>
        km2,
        
        /// <remarks/>
        m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mi[US]2")]
        miUS2,
        
        /// <remarks/>
        mi2,
        
        /// <remarks/>
        mm2,
        
        /// <remarks/>
        section,
        
        /// <remarks/>
        um2,
        
        /// <remarks/>
        yd2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APIGammaRayUom {
        
        /// <remarks/>
        gAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumetricThermalExpansionUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaC")]
        Item1deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaF")]
        Item1deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaK")]
        Item1deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaR")]
        Item1deltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.deltaC)")]
        Item1E6m3m3deltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 m3/(m3.deltaF)")]
        Item1E6m3m3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(m3.deltaK)")]
        m3m3deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/deltaC")]
        ppmvoldeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]/deltaF")]
        ppmvoldeltaF,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricCurrentDensityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/cm2")]
        Acm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/ft2")]
        Aft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m2")]
        Am2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm2")]
        Amm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/cm2")]
        mAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mA/ft2")]
        mAft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/cm2")]
        uAcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uA/in2")]
        uAin2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("10 kN")]
        Item10kN,
        
        /// <remarks/>
        cN,
        
        /// <remarks/>
        daN,
        
        /// <remarks/>
        dN,
        
        /// <remarks/>
        dyne,
        
        /// <remarks/>
        EN,
        
        /// <remarks/>
        fN,
        
        /// <remarks/>
        gf,
        
        /// <remarks/>
        GN,
        
        /// <remarks/>
        hN,
        
        /// <remarks/>
        kdyne,
        
        /// <remarks/>
        kgf,
        
        /// <remarks/>
        klbf,
        
        /// <remarks/>
        kN,
        
        /// <remarks/>
        lbf,
        
        /// <remarks/>
        Mgf,
        
        /// <remarks/>
        mN,
        
        /// <remarks/>
        MN,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        nN,
        
        /// <remarks/>
        ozf,
        
        /// <remarks/>
        pdl,
        
        /// <remarks/>
        pN,
        
        /// <remarks/>
        TN,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]")]
        tonfUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]")]
        tonfUS,
        
        /// <remarks/>
        uN,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/acre")]
        Item1E6bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/acre")]
        bblacre,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft2")]
        ft3ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m2")]
        m3m2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalElectricPotentialDifferenceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/uV")]
        Item1uV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/V")]
        Item1V,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 h/ft")]
        Item0001hft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/km")]
        hkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/ft")]
        minft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("min/m")]
        minm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/cm")]
        mscm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/ft")]
        msft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/in")]
        msin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/m")]
        msm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/ft")]
        nsft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ns/m")]
        nsm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/cm")]
        scm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft")]
        sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/in")]
        sin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m")]
        sm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/ft")]
        usft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/in")]
        usin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("us/m")]
        usm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/psi")]
        bblpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kPa")]
        m3kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/Pa")]
        m3Pa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm2")]
        Ccm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m2")]
        Cm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm2")]
        Cmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mC/m2")]
        mCm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m.s)")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.h)")]
        lbmfth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft.s)")]
        lbmfts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFluxDensityUom {
        
        /// <remarks/>
        cgauss,
        
        /// <remarks/>
        cT,
        
        /// <remarks/>
        dgauss,
        
        /// <remarks/>
        dT,
        
        /// <remarks/>
        Egauss,
        
        /// <remarks/>
        ET,
        
        /// <remarks/>
        fgauss,
        
        /// <remarks/>
        fT,
        
        /// <remarks/>
        gauss,
        
        /// <remarks/>
        Ggauss,
        
        /// <remarks/>
        GT,
        
        /// <remarks/>
        kgauss,
        
        /// <remarks/>
        kT,
        
        /// <remarks/>
        mgauss,
        
        /// <remarks/>
        Mgauss,
        
        /// <remarks/>
        mT,
        
        /// <remarks/>
        ngauss,
        
        /// <remarks/>
        nT,
        
        /// <remarks/>
        pgauss,
        
        /// <remarks/>
        pT,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        Tgauss,
        
        /// <remarks/>
        TT,
        
        /// <remarks/>
        ugauss,
        
        /// <remarks/>
        uT,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SignalingEventPerTimeUom {
        
        /// <remarks/>
        Bd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m")]
        Jm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m")]
        MJm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricCurrentUom {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        cA,
        
        /// <remarks/>
        dA,
        
        /// <remarks/>
        EA,
        
        /// <remarks/>
        fA,
        
        /// <remarks/>
        GA,
        
        /// <remarks/>
        kA,
        
        /// <remarks/>
        mA,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        nA,
        
        /// <remarks/>
        pA,
        
        /// <remarks/>
        TA,
        
        /// <remarks/>
        uA,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureSquaredUom {
        
        /// <remarks/>
        bar2,
        
        /// <remarks/>
        GPa2,
        
        /// <remarks/>
        kPa2,
        
        /// <remarks/>
        kpsi2,
        
        /// <remarks/>
        Pa2,
        
        /// <remarks/>
        psi2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AngularAccelerationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s2")]
        rads2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rpm/s")]
        rpms,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalMassTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/(kg.s)")]
        Item1kgs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Bq/kg")]
        Bqkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pCi/g")]
        pCig,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalDiffusivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimeLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl.ft/d")]
        Item1000bblftd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m4/d")]
        Item1000m4d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m4/s")]
        m4s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermeabilityRockUom {
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D[API]")]
        DAPI,
        
        /// <remarks/>
        mD,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API]")]
        TDAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SecondMomentOfAreaUom {
        
        /// <remarks/>
        cm4,
        
        /// <remarks/>
        in4,
        
        /// <remarks/>
        m4,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForceAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.cm2")]
        dynecm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN.m2")]
        kNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.in2")]
        lbfin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN.m2")]
        mNm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl.cm2")]
        pdlcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK].ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].ft2")]
        tonfUSft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricFieldStrengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/ft")]
        mVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mV/m")]
        mVm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/ft")]
        uVft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uV/m")]
        uVm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/m")]
        Vm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m2")]
        molm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalConductivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft.deltaF)")]
        BtuIThftdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm.deltaC)")]
        calthhcmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm.deltaC)")]
        calthscmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(h.m.deltaC)")]
        kcalthhmdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.deltaK)")]
        WmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerAmountOfSubstanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/mol")]
        m2mol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LogarithmicPowerRatioPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/m")]
        Bm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/ft")]
        dBft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/km")]
        dBkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/m")]
        dBm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/angstrom")]
        Item1angstrom,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/cm")]
        Item1cm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft")]
        Item1ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/in")]
        Item1in,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi")]
        Item1mi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mm")]
        Item1mm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/nm")]
        Item1nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/yd")]
        Item1yd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-9 1/ft")]
        Item1E91ft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cd/m2")]
        cdm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d2")]
        bbld2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h2")]
        bblh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s2")]
        dm3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d2")]
        ft3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h2")]
        ft3h2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min2")]
        ft3min2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s2")]
        ft3s2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h2")]
        galUKh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min2")]
        galUKmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h2")]
        galUSh2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min2")]
        galUSmin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s2")]
        Ls2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d2")]
        m3d2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s2")]
        m3s2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarHeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbmol.deltaF)")]
        BtuITlbmoldeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(mol.deltaC)")]
        calthmoldeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(mol.deltaK)")]
        JmoldeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kmol.deltaK)")]
        kJkmoldeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumeFlowRatePerVolumeFlowRateUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(bbl/d)/(bbl/d)")]
        bbldbbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/d)/(m3/d)")]
        m3dm3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("(m3/s)/(m3/s)")]
        m3sm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 (ft3/d)/(bbl/d)")]
        Item1E6ft3dbbld,
        
        /// <remarks/>
        Euc,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum FrequencyIntervalUom {
        
        /// <remarks/>
        O,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalUom {
        
        /// <remarks/>
        deltaC,
        
        /// <remarks/>
        deltaF,
        
        /// <remarks/>
        deltaK,
        
        /// <remarks/>
        deltaR,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum RadiantIntensityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/sr")]
        Wsr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermeabilityLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.ft")]
        Dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("D.m")]
        Dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.ft")]
        mDft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mD.m")]
        mDm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TD[API].m")]
        TDAPIm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DataTransferSpeedUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bit/s")]
        bits,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("byte/s")]
        bytes,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum InductanceUom {
        
        /// <remarks/>
        cH,
        
        /// <remarks/>
        dH,
        
        /// <remarks/>
        EH,
        
        /// <remarks/>
        fH,
        
        /// <remarks/>
        GH,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        kH,
        
        /// <remarks/>
        MH,
        
        /// <remarks/>
        mH,
        
        /// <remarks/>
        nH,
        
        /// <remarks/>
        TH,
        
        /// <remarks/>
        uH,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum KinematicViscosityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        cSt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s.m3/kg")]
        Pasm3kg,
        
        /// <remarks/>
        St,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerPressureLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(ft.psi.d)")]
        bblftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(ft.psi.d)")]
        ft3ftpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(kPa.d)")]
        m2kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/(Pa.s)")]
        m2Pas,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbf")]
        Item1lbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/N")]
        Item1N,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft2")]
        Item1ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/km2")]
        Item1km2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m2")]
        Item1m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/mi2")]
        Item1mi2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressurePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/h")]
        atmh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/h")]
        barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/h")]
        kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/min")]
        kPamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/h")]
        MPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/h")]
        Pah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/s")]
        Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/h")]
        psih,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/min")]
        psimin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.h")]
        Ah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s")]
        As,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        cC,
        
        /// <remarks/>
        dC,
        
        /// <remarks/>
        EC,
        
        /// <remarks/>
        fC,
        
        /// <remarks/>
        GC,
        
        /// <remarks/>
        kC,
        
        /// <remarks/>
        MC,
        
        /// <remarks/>
        mC,
        
        /// <remarks/>
        nC,
        
        /// <remarks/>
        pC,
        
        /// <remarks/>
        TC,
        
        /// <remarks/>
        uC,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousEfficacyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/W")]
        lmW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerUom {
        
        /// <remarks/>
        cW,
        
        /// <remarks/>
        dW,
        
        /// <remarks/>
        EW,
        
        /// <remarks/>
        fW,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        hp,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[elec]")]
        hpelec,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]")]
        hphyd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric]")]
        hpmetric,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        pW,
        
        /// <remarks/>
        tonRefrig,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressurePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m3")]
        Pam3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2.d/(cP.ft3)")]
        psi2dcPft3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ActivityOfRadioactivityUom {
        
        /// <remarks/>
        Bq,
        
        /// <remarks/>
        Ci,
        
        /// <remarks/>
        GBq,
        
        /// <remarks/>
        MBq,
        
        /// <remarks/>
        mCi,
        
        /// <remarks/>
        nCi,
        
        /// <remarks/>
        pCi,
        
        /// <remarks/>
        TBq,
        
        /// <remarks/>
        uCi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricPotentialDifferenceUom {
        
        /// <remarks/>
        cV,
        
        /// <remarks/>
        dV,
        
        /// <remarks/>
        fV,
        
        /// <remarks/>
        GV,
        
        /// <remarks/>
        kV,
        
        /// <remarks/>
        mV,
        
        /// <remarks/>
        MV,
        
        /// <remarks/>
        nV,
        
        /// <remarks/>
        pV,
        
        /// <remarks/>
        TV,
        
        /// <remarks/>
        uV,
        
        /// <remarks/>
        V,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/psi")]
        ftpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kPa")]
        mkPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/Pa")]
        mPa,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticVectorPotentialUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/m")]
        Wbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb/mm")]
        Wbmm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticFieldStrengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/m")]
        Am,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A/mm")]
        Amm,
        
        /// <remarks/>
        Oe,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 cm3/min")]
        Item130cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 bbl/d")]
        Item1000bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/d")]
        Item1000ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/d")]
        Item1000m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/h")]
        Item1000m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/d")]
        Item1E6bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/d")]
        Item1E6ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 m3/d")]
        Item1E6m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/d")]
        bbld,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/h")]
        bblh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/min")]
        bblmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/h")]
        cm3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/min")]
        cm3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/s")]
        cm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/s")]
        dm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/d")]
        ft3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/h")]
        ft3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/min")]
        ft3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/s")]
        ft3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/d")]
        galUKd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/h")]
        galUKh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/min")]
        galUKmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/d")]
        galUSd,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/h")]
        galUSh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/min")]
        galUSmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/h")]
        Lh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/min")]
        Lmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/s")]
        Ls,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/d")]
        m3d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/h")]
        m3h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/min")]
        m3min,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/s")]
        m3s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/g")]
        cm2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/lbm")]
        ft2lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/g")]
        m2g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/kg")]
        m2kg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalResistanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/W")]
        deltaKW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerForceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/kgf")]
        kgfkgf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/lbf")]
        lbflbf,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/N")]
        NN,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassUom {
        
        /// <remarks/>
        ag,
        
        /// <remarks/>
        cg,
        
        /// <remarks/>
        ct,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[UK]")]
        cwtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cwt[US]")]
        cwtUS,
        
        /// <remarks/>
        Eg,
        
        /// <remarks/>
        fg,
        
        /// <remarks/>
        g,
        
        /// <remarks/>
        Gg,
        
        /// <remarks/>
        grain,
        
        /// <remarks/>
        hg,
        
        /// <remarks/>
        kg,
        
        /// <remarks/>
        klbm,
        
        /// <remarks/>
        lbm,
        
        /// <remarks/>
        mg,
        
        /// <remarks/>
        Mg,
        
        /// <remarks/>
        ng,
        
        /// <remarks/>
        ozm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ozm[troy]")]
        ozmtroy,
        
        /// <remarks/>
        pg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sack[94lbm]")]
        sack94lbm,
        
        /// <remarks/>
        t,
        
        /// <remarks/>
        Tg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[UK]")]
        tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]")]
        tonUS,
        
        /// <remarks/>
        ug,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum SpecificHeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.deltaF)")]
        BtuITlbmdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(lbm.deltaR)")]
        BtuITlbmdeltaR,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(g.deltaK)")]
        calthgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(g.deltaK)")]
        JgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/(kg.deltaK)")]
        JkgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/(kg.deltaC)")]
        kcalthkgdeltaC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/(kg.deltaK)")]
        kJkgdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/(kg.deltaC)")]
        kWhkgdeltaC,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/lbm")]
        ftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/kg")]
        mkg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(h.ft2)")]
        lbmolhft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/(s.ft2)")]
        lbmolsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/(s.m2)")]
        molsm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermodynamicTemperatureUom {
        
        /// <remarks/>
        degC,
        
        /// <remarks/>
        degF,
        
        /// <remarks/>
        degR,
        
        /// <remarks/>
        K,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LinearThermalExpansionUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/deltaK")]
        Item1deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/(in.deltaF)")]
        inindeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/(m.deltaK)")]
        mmdeltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm/(mm.deltaK)")]
        mmmmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/cm2")]
        kgmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("klbm/in")]
        klbmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft")]
        lbmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/in")]
        Mgin,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricalResistivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kohm.m")]
        kohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mil2/ft")]
        nohmmil2ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nohm.mm2/m")]
        nohmmm2m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.cm")]
        ohmcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm.m2/m")]
        ohmm2m,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[mass]")]
        mass,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/kg")]
        gkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/t")]
        gt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/kg")]
        kgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/sack[94lbm]")]
        kgsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/t")]
        kgt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/g")]
        mgg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mg/kg")]
        mgkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/g")]
        ngg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ng/mg")]
        ngmg,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[mass]")]
        ppmmass,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/g")]
        ugg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ug/mg")]
        ugmg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureSquaredPerForceTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 kPa2/cP")]
        Item0001kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar2/cP")]
        bar2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa2/cP")]
        kPa2cP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa2/(Pa.s)")]
        Pa2Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi2/cP")]
        psi2cP,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousFluxUom {
        
        /// <remarks/>
        lm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(psi.d)")]
        Item1000ft3psid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(kPa.d)")]
        bblkPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(psi.d)")]
        bblpsid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/(bar.min)")]
        Lbarmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.d)")]
        m3bard,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.h)")]
        m3barh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(bar.min)")]
        m3barmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.d)")]
        m3kPad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kPa.h)")]
        m3kPah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(Pa.s)")]
        m3Pas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(psi.d)")]
        m3psid,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kmol/m3")]
        kmolm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/ft3")]
        lbmolft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[UK]")]
        lbmolgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbmol/gal[US]")]
        lbmolgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/m3")]
        molm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbm")]
        BtuITlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/g")]
        calthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/kg")]
        calthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/lbm")]
        calthlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/g")]
        ergg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/kg")]
        ergkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/lbm")]
        hphlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/g")]
        Jg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/kg")]
        Jkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/g")]
        kcalthg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/kg")]
        kcalthkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kg")]
        kJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/kg")]
        kWhkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/lbm")]
        lbfftlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kg")]
        MJkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/kg")]
        MWhkg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PermittivityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("F/m")]
        Fm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uF/m")]
        uFm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectromagneticMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.m2")]
        Am2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ThermalInsulanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC.m2.h/kcal[th]")]
        deltaCm2hkcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF.ft2.h/Btu[IT]")]
        deltaFft2hBtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK.m2/kW")]
        deltaKm2kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK.m2/W")]
        deltaKm2W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft2)")]
        BtuIThft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft2)")]
        BtuITsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm2)")]
        calthhcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/in2")]
        hpin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[hyd]/in2")]
        hphydin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/cm2")]
        kWcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m2")]
        kWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mW/m2")]
        mWm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/(s.cm2)")]
        ucalthscm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/cm2")]
        Wcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m2")]
        Wm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/mm2")]
        Wmm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbm/ft2")]
        Item001lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m2")]
        kgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft2")]
        lbmft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mg/m2")]
        Mgm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ton[US]/ft2")]
        tonUSft2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum IlluminanceUom {
        
        /// <remarks/>
        footcandle,
        
        /// <remarks/>
        klx,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lm/m2")]
        lmm2,
        
        /// <remarks/>
        lx,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m")]
        Item1m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("b/cm3")]
        bcm3,
        
        /// <remarks/>
        cu,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/in3")]
        ft2in3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/cm3")]
        m2cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m3")]
        m2m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/h")]
        deltaCh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/min")]
        deltaCmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/s")]
        deltaCs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/h")]
        deltaFh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/min")]
        deltaFmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/s")]
        deltaFs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/s")]
        deltaKs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AmountOfSubstancePerAmountOfSubstanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[molar]")]
        molar,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mol/mol")]
        molmol,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum RadianceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m2.sr)")]
        Wm2sr,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatFlowRateUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]/h")]
        Item1E6BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/h")]
        BtuITh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/min")]
        BtuITmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/s")]
        BtuITs,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/h")]
        calthh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("EJ/a")]
        EJa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/a")]
        erga,
        
        /// <remarks/>
        GW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/s")]
        Js,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/h")]
        kcalthh,
        
        /// <remarks/>
        kW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/min")]
        lbfftmin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/s")]
        lbffts,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/a")]
        MJa,
        
        /// <remarks/>
        MW,
        
        /// <remarks/>
        mW,
        
        /// <remarks/>
        nW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("quad/a")]
        quada,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TJ/a")]
        TJa,
        
        /// <remarks/>
        TW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]/s")]
        ucalths,
        
        /// <remarks/>
        uW,
        
        /// <remarks/>
        W,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DoseEquivalentUom {
        
        /// <remarks/>
        mrem,
        
        /// <remarks/>
        mSv,
        
        /// <remarks/>
        rem,
        
        /// <remarks/>
        Sv,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerPowerUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(hp.h)")]
        BtuIThph,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/kW")]
        WkW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/W")]
        WW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/kg")]
        Askg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/g")]
        Cg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/kg")]
        Ckg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerVolumePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g/cm4")]
        gcm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/dm4")]
        kgdm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/m4")]
        kgm4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[UK].ft)")]
        lbmgalUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(gal[US].ft)")]
        lbmgalUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/ft4")]
        lbmft4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s2/m3")]
        Pas2m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m")]
        kgm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft")]
        lbmft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 psi/ft")]
        Item0001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 psi/ft")]
        Item001psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/ft")]
        atmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/hm")]
        atmhm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("atm/m")]
        atmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/km")]
        barkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bar/m")]
        barm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GPa/cm")]
        GPacm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/hm")]
        kPahm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa/m")]
        kPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft3")]
        lbfft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/gal[US]")]
        lbfgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa/m")]
        MPam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m3")]
        Nm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa/m")]
        Pam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/ft")]
        psift,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi/m")]
        psim,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricChargePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("A.s/m3")]
        Asm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/cm3")]
        Ccm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/m3")]
        Cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("C/mm3")]
        Cmm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum APIGravityUom {
        
        /// <remarks/>
        dAPI,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReluctanceUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/H")]
        Item1H,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LengthPerTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/deltaF")]
        ftdeltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/deltaK")]
        mdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerTimePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/(d.ft)")]
        Item1000ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(d.m)")]
        Item1000m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/(h.m)")]
        Item1000m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(d.ft)")]
        bbldft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/(d.ft)")]
        ft3dft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.ft)")]
        galUKhft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(h.in)")]
        galUKhin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/(min.ft)")]
        galUKminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.ft)")]
        galUShft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(h.in)")]
        galUShin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/(min.ft)")]
        galUSminft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(d.m)")]
        m3dm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(h.m)")]
        m3hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.ft)")]
        m3sft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(s.m)")]
        m3sm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LinearAccelerationUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm/s2")]
        cms2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft/s2")]
        fts2,
        
        /// <remarks/>
        Gal,
        
        /// <remarks/>
        gn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in/s2")]
        ins2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m/s2")]
        ms2,
        
        /// <remarks/>
        mGal,
        
        /// <remarks/>
        mgn,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DimensionlessUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        dEuc,
        
        /// <remarks/>
        EEuc,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        fEuc,
        
        /// <remarks/>
        GEuc,
        
        /// <remarks/>
        kEuc,
        
        /// <remarks/>
        MEuc,
        
        /// <remarks/>
        mEuc,
        
        /// <remarks/>
        nEuc,
        
        /// <remarks/>
        pEuc,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        TEuc,
        
        /// <remarks/>
        uEuc,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 Btu[IT]")]
        Item1E6BtuIT,
        
        /// <remarks/>
        aJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]")]
        BtuIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[th]")]
        Btuth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[UK]")]
        BtuUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[IT]")]
        calIT,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]")]
        calth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ccal[th]")]
        ccalth,
        
        /// <remarks/>
        ceV,
        
        /// <remarks/>
        cJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dcal[th]")]
        dcalth,
        
        /// <remarks/>
        deV,
        
        /// <remarks/>
        dJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Ecal[th]")]
        Ecalth,
        
        /// <remarks/>
        EeV,
        
        /// <remarks/>
        EJ,
        
        /// <remarks/>
        erg,
        
        /// <remarks/>
        eV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("fcal[th]")]
        fcalth,
        
        /// <remarks/>
        feV,
        
        /// <remarks/>
        fJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Gcal[th]")]
        Gcalth,
        
        /// <remarks/>
        GeV,
        
        /// <remarks/>
        GJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("GW.h")]
        GWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h")]
        hph,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp[metric].h")]
        hpmetrich,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]")]
        kcalth,
        
        /// <remarks/>
        keV,
        
        /// <remarks/>
        kJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h")]
        kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Mcal[th]")]
        Mcalth,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mcal[th]")]
        mcalth,
        
        /// <remarks/>
        meV,
        
        /// <remarks/>
        MeV,
        
        /// <remarks/>
        MJ,
        
        /// <remarks/>
        mJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h")]
        MWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ncal[th]")]
        ncalth,
        
        /// <remarks/>
        neV,
        
        /// <remarks/>
        nJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pcal[th]")]
        pcalth,
        
        /// <remarks/>
        peV,
        
        /// <remarks/>
        pJ,
        
        /// <remarks/>
        quad,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Tcal[th]")]
        Tcalth,
        
        /// <remarks/>
        TeV,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[EC]")]
        thermEC,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[UK]")]
        thermUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("therm[US]")]
        thermUS,
        
        /// <remarks/>
        TJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("TW.h")]
        TWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ucal[th]")]
        ucalth,
        
        /// <remarks/>
        ueV,
        
        /// <remarks/>
        uJ,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AnglePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dega/ft")]
        Item001degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/ft")]
        Item130degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 dega/m")]
        Item130degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/ft")]
        degaft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/m")]
        degam,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft")]
        radft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m")]
        radm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/ft")]
        revft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/m")]
        revm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VerticalCoordinateUom {
        
        /// <remarks/>
        m,
        
        /// <remarks/>
        ft,
        
        /// <remarks/>
        ftUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ftBr(65)")]
        ftBr65,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 dm3/km")]
        Item001dm3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/km")]
        Item001Lkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft")]
        bblft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/in")]
        bblin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/mi")]
        bblmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m")]
        dm3m,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft")]
        ft3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/mi")]
        galUKmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft")]
        galUSft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/mi")]
        galUSmi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in3/ft")]
        in3ft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m")]
        Lm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/km")]
        m3km,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m")]
        m3m,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/bbl")]
        BtuITbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/ft3")]
        BtuITft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[UK]")]
        BtuITgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/gal[US]")]
        BtuITgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/cm3")]
        calthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mL")]
        calthmL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/mm3")]
        calthmm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm3")]
        ergcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/m3")]
        ergm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp.h/bbl")]
        hphbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/dm3")]
        Jdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m3")]
        Jm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/cm3")]
        kcalthcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/m3")]
        kcalthm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/dm3")]
        kJdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/m3")]
        kJm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/dm3")]
        kWhdm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW.h/m3")]
        kWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/bbl")]
        lbfftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/gal[US]")]
        lbfftgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/m3")]
        MJm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MW.h/m3")]
        MWhm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US].mi/bbl")]
        tonfUSmibbl,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticPermeabilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("H/m")]
        Hm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uH/m")]
        uHm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/g")]
        Item1g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kg")]
        Item1kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/lbm")]
        Item1lbm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DynamicViscosityUom {
        
        /// <remarks/>
        cP,
        
        /// <remarks/>
        dP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne.s/cm2")]
        dynescm2,
        
        /// <remarks/>
        EP,
        
        /// <remarks/>
        fP,
        
        /// <remarks/>
        GP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.s/m2")]
        kgfsm2,
        
        /// <remarks/>
        kP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/ft2")]
        lbfsft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.s/in2")]
        lbfsin2,
        
        /// <remarks/>
        mP,
        
        /// <remarks/>
        MP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mPa.s")]
        mPas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N.s/m2")]
        Nsm2,
        
        /// <remarks/>
        nP,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s")]
        Pas,
        
        /// <remarks/>
        pP,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.s")]
        psis,
        
        /// <remarks/>
        TP,
        
        /// <remarks/>
        uP,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PotentialDifferencePerPowerDropUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/B")]
        VB,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("V/dB")]
        VdB,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm2/s")]
        cm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/h")]
        ft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft2/s")]
        ft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/s")]
        in2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/d")]
        m2d,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/h")]
        m2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/s")]
        mm2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum HeatCapacityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/deltaK")]
        JdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MolarEnergyUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/lbmol")]
        BtuITlbmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/mol")]
        Jmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th]/mol")]
        kcalthmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ/kmol")]
        kJkmol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MJ/kmol")]
        MJkmol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricConductanceUom {
        
        /// <remarks/>
        cS,
        
        /// <remarks/>
        dS,
        
        /// <remarks/>
        ES,
        
        /// <remarks/>
        fS,
        
        /// <remarks/>
        GS,
        
        /// <remarks/>
        kS,
        
        /// <remarks/>
        mS,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        nS,
        
        /// <remarks/>
        pS,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        TS,
        
        /// <remarks/>
        uS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MomentumUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg.m/s")]
        kgms,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm.ft/s")]
        lbmfts,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MassPerTimePerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.ft/(cm3.s)")]
        gftcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("g.m/(cm3.s)")]
        gmcm3s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kg/(m2.s)")]
        kgm2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kPa.s/m")]
        kPasm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.h)")]
        lbmft2h,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbm/(ft2.s)")]
        lbmft2s,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("MPa.s/m")]
        MPasm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PowerPerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3)")]
        BtuIThft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3)")]
        BtuITsft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(h.cm3)")]
        calthhcm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cal[th]/(s.cm3)")]
        calthscm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hp/ft3")]
        hpft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/m3")]
        kWm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uW/m3")]
        uWm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/m3")]
        Wm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum FrequencyUom {
        
        /// <remarks/>
        cHz,
        
        /// <remarks/>
        dHz,
        
        /// <remarks/>
        EHz,
        
        /// <remarks/>
        fHz,
        
        /// <remarks/>
        GHz,
        
        /// <remarks/>
        Hz,
        
        /// <remarks/>
        kHz,
        
        /// <remarks/>
        mHz,
        
        /// <remarks/>
        MHz,
        
        /// <remarks/>
        nHz,
        
        /// <remarks/>
        pHz,
        
        /// <remarks/>
        THz,
        
        /// <remarks/>
        uHz,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LuminousIntensityUom {
        
        /// <remarks/>
        cd,
        
        /// <remarks/>
        kcd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AbsorbedDoseUom {
        
        /// <remarks/>
        cGy,
        
        /// <remarks/>
        crd,
        
        /// <remarks/>
        dGy,
        
        /// <remarks/>
        drd,
        
        /// <remarks/>
        EGy,
        
        /// <remarks/>
        Erd,
        
        /// <remarks/>
        fGy,
        
        /// <remarks/>
        frd,
        
        /// <remarks/>
        GGy,
        
        /// <remarks/>
        Grd,
        
        /// <remarks/>
        Gy,
        
        /// <remarks/>
        kGy,
        
        /// <remarks/>
        krd,
        
        /// <remarks/>
        mGy,
        
        /// <remarks/>
        MGy,
        
        /// <remarks/>
        Mrd,
        
        /// <remarks/>
        mrd,
        
        /// <remarks/>
        nGy,
        
        /// <remarks/>
        nrd,
        
        /// <remarks/>
        pGy,
        
        /// <remarks/>
        prd,
        
        /// <remarks/>
        rd,
        
        /// <remarks/>
        TGy,
        
        /// <remarks/>
        Trd,
        
        /// <remarks/>
        uGy,
        
        /// <remarks/>
        urd,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/kg")]
        skg,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumetricHeatTransferCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(h.ft3.deltaF)")]
        BtuIThft3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT]/(s.ft3.deltaF)")]
        BtuITsft3deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kW/(m3.deltaK)")]
        kWm3deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m3.deltaK)")]
        Wm3deltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum NormalizedPowerUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B.W")]
        BW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.MW")]
        dBMW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.mW")]
        dBmW,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB.W")]
        dBW,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyLengthPerTimeAreaTemperatureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Btu[IT].in/(h.ft2.deltaF)")]
        BtuITinhft2deltaF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/(s.m2.deltaK)")]
        Jmsm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kJ.m/(h.m2.deltaK)")]
        kJmhm2deltaK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("W/(m.deltaK)")]
        WmdeltaK,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureTimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Pa.s/m3")]
        Pasm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("psi.d/bbl")]
        psidbbl,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[vol]")]
        vol,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/ft3")]
        Item0001bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 bbl/m3")]
        Item0001bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/bbl")]
        Item0001galUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[UK]/gal[UK]")]
        Item0001galUKgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/bbl")]
        Item0001galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/ft3")]
        Item0001galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 gal[US]/gal[US]")]
        Item0001galUSgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 pt[UK]/bbl")]
        Item0001ptUKbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 bbl/bbl")]
        Item001bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 gal[US]/bbl")]
        Item01galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 L/bbl")]
        Item01Lbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.1 pt[US]/bbl")]
        Item01ptUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 ft3/bbl")]
        Item1000ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1000 m3/m3")]
        Item1000m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 acre.ft/bbl")]
        Item1E6acreftbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/ft3")]
        Item1E6bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E-6 bbl/m3")]
        Item1E6bblm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 bbl/(acre.ft)")]
        Item1E6bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/(acre.ft)")]
        Item1E6ft3acreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1E6 ft3/bbl")]
        Item1E6ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/(acre.ft)")]
        bblacreft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/bbl")]
        bblbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ft3")]
        bblft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/m3")]
        bblm3,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/cm3")]
        cm3cm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/L")]
        cm3L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/m3")]
        cm3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/m3")]
        dm3m3,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/bbl")]
        ft3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/ft3")]
        ft3ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/ft3")]
        galUKft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/bbl")]
        galUSbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ft3")]
        galUSft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/m3")]
        Lm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(ha.m)")]
        m3ham,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/bbl")]
        m3bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/m3")]
        m3m3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[UK]")]
        mLgalUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/gal[US]")]
        mLgalUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mL/mL")]
        mLmL,
        
        /// <remarks/>
        ppk,
        
        /// <remarks/>
        ppm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ppm[vol]")]
        ppmvol,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AnglePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/ft3")]
        radft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/m3")]
        radm3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DiffusionCoefficientUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/s")]
        m2s,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ms/s")]
        mss,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/s")]
        ss,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerMassPerTimeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mrem/h")]
        mremh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mSv/h")]
        mSvh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rem/h")]
        remh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/h")]
        Svh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Sv/s")]
        Svs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum VolumePerMassUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 L/kg")]
        Item001Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[UK]")]
        bbltonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bbl/ton[US]")]
        bbltonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cm3/g")]
        cm3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/kg")]
        dm3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/t")]
        dm3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/kg")]
        ft3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/lbm")]
        ft3lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ft3/sack[94lbm]")]
        ft3sack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[UK]/lbm")]
        galUKlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/lbm")]
        galUSlbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/sack[94lbm]")]
        galUSsack94lbm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[UK]")]
        galUStonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("gal[US]/ton[US]")]
        galUStonUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/kg")]
        Lkg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/t")]
        Lt,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("L/ton[UK]")]
        LtonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/g")]
        m3g,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/kg")]
        m3kg,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/t")]
        m3t,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[UK]")]
        m3tonUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/ton[US]")]
        m3tonUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TemperatureIntervalPerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 deltaF/ft")]
        Item001deltaFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/ft")]
        deltaCft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/hm")]
        deltaChm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/km")]
        deltaCkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaC/m")]
        deltaCm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/ft")]
        deltaFft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaF/m")]
        deltaFm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/km")]
        deltaKkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deltaK/m")]
        deltaKm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AttenuationPerFrequencyIntervalUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("B/O")]
        BO,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dB/O")]
        dBO,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum IsothermalCompressibilityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/(kW.h)")]
        dm3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dm3/MJ")]
        dm3MJ,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/(kW.h)")]
        m3kWh,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m3/J")]
        m3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm3/J")]
        mm3J,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pt[UK]/(hp.h)")]
        ptUKhph,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricResistanceUom {
        
        /// <remarks/>
        cohm,
        
        /// <remarks/>
        dohm,
        
        /// <remarks/>
        Eohm,
        
        /// <remarks/>
        fohm,
        
        /// <remarks/>
        Gohm,
        
        /// <remarks/>
        kohm,
        
        /// <remarks/>
        Mohm,
        
        /// <remarks/>
        mohm,
        
        /// <remarks/>
        nohm,
        
        /// <remarks/>
        ohm,
        
        /// <remarks/>
        pohm,
        
        /// <remarks/>
        Tohm,
        
        /// <remarks/>
        uohm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bbl")]
        Item1bbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/ft3")]
        Item1ft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[UK]")]
        Item1galUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/gal[US]")]
        Item1galUS,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/L")]
        Item1L,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/m3")]
        Item1m3,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum PressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft2")]
        Item001lbfft2,
        
        /// <remarks/>
        at,
        
        /// <remarks/>
        atm,
        
        /// <remarks/>
        bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("cmH2O[4degC]")]
        cmH2O4degC,
        
        /// <remarks/>
        cPa,
        
        /// <remarks/>
        dPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm2")]
        dynecm2,
        
        /// <remarks/>
        EPa,
        
        /// <remarks/>
        fPa,
        
        /// <remarks/>
        GPa,
        
        /// <remarks/>
        hbar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[39degF]")]
        inH2O39degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inH2O[60degF]")]
        inH2O60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[32degF]")]
        inHg32degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inHg[60degF]")]
        inHg60degF,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm2")]
        kgfcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/m2")]
        kgfm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/mm2")]
        kgfmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m2")]
        kNm2,
        
        /// <remarks/>
        kPa,
        
        /// <remarks/>
        kpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft2")]
        lbfft2,
        
        /// <remarks/>
        mbar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mmHg[0degC]")]
        mmHg0degC,
        
        /// <remarks/>
        mPa,
        
        /// <remarks/>
        MPa,
        
        /// <remarks/>
        Mpsi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m2")]
        Nm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/mm2")]
        Nmm2,
        
        /// <remarks/>
        nPa,
        
        /// <remarks/>
        Pa,
        
        /// <remarks/>
        pPa,
        
        /// <remarks/>
        psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft2")]
        tonfUKft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft2")]
        tonfUSft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/in2")]
        tonfUSin2,
        
        /// <remarks/>
        torr,
        
        /// <remarks/>
        TPa,
        
        /// <remarks/>
        ubar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("umHg[0degC]")]
        umHg0degC,
        
        /// <remarks/>
        uPa,
        
        /// <remarks/>
        upsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AreaPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%")]
        Item,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("%[area]")]
        area,
        
        /// <remarks/>
        cEuc,
        
        /// <remarks/>
        Euc,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/ft2")]
        in2ft2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("in2/in2")]
        in2in2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("m2/m2")]
        m2m2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mm2/mm2")]
        mm2mm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum AngularVelocityUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/h")]
        degah,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/min")]
        degamin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dega/s")]
        degas,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rad/s")]
        rads,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("rev/s")]
        revs,
        
        /// <remarks/>
        rpm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum TimePerVolumeUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.001 d/ft3")]
        Item0001dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/bbl")]
        dbbl,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/ft3")]
        dft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("d/m3")]
        dm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/ft3")]
        hft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("h/m3")]
        hm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/ft3")]
        sft3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/L")]
        sL,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/m3")]
        sm3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[UK]")]
        sqtUK,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("s/qt[US]")]
        sqtUS,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyLengthPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J.m/m2")]
        Jmm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kcal[th].m/cm2")]
        kcalthmcm2,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ElectricResistancePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ohm/m")]
        ohmm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/ft")]
        uohmft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("uohm/m")]
        uohmm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ForcePerLengthUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0.01 lbf/ft")]
        Item001lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 lbf/m")]
        Item130lbfm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/30 N/m")]
        Item130Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("dyne/cm")]
        dynecm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf/cm")]
        kgfcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kN/m")]
        kNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/ft")]
        lbfft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf/in")]
        lbfin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/km")]
        mNkm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mN/m")]
        mNm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pdl/cm")]
        pdlcm,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[UK]/ft")]
        tonfUKft,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tonf[US]/ft")]
        tonfUSft,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum ReciprocalPressureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/bar")]
        Item1bar,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/kPa")]
        Item1kPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/Pa")]
        Item1Pa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/pPa")]
        Item1pPa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/psi")]
        Item1psi,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1/upsi")]
        Item1upsi,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum LightExposureUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("footcandle.s")]
        footcandles,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lx.s")]
        lxs,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum EnergyPerAreaUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("erg/cm2")]
        ergcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/cm2")]
        Jcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J/m2")]
        Jm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("kgf.m/cm2")]
        kgfmcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lbf.ft/in2")]
        lbfftin2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/cm2")]
        mJcm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mJ/m2")]
        mJm2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/m")]
        Nm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum MagneticDipoleMomentUom {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Wb.m")]
        Wbm,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    public enum DigitalStorageUom {
        
        /// <remarks/>
        bit,
        
        /// <remarks/>
        @byte,
        
        /// <remarks/>
        Kibyte,
        
        /// <remarks/>
        Mibyte,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum UnstructuredColumnLayerIndexableElements {
        
        /// <remarks/>
        cells,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("column edges")]
        columnedges,
        
        /// <remarks/>
        columns,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coordinate lines")]
        coordinatelines,
        
        /// <remarks/>
        edges,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("edges per column")]
        edgespercolumn,
        
        /// <remarks/>
        faces,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("faces per cell")]
        facespercell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hinge node faces")]
        hingenodefaces,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("interval edges")]
        intervaledges,
        
        /// <remarks/>
        intervals,
        
        /// <remarks/>
        layers,
        
        /// <remarks/>
        nodes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per cell")]
        nodespercell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per edge")]
        nodesperedge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per face")]
        nodesperface,
        
        /// <remarks/>
        pillars,
        
        /// <remarks/>
        subnodes,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum IjkIndexableElements {
        
        /// <remarks/>
        cells,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("column edges")]
        columnedges,
        
        /// <remarks/>
        columns,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coordinate lines")]
        coordinatelines,
        
        /// <remarks/>
        edges,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("edges per column")]
        edgespercolumn,
        
        /// <remarks/>
        faces,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("faces per cell")]
        facespercell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hinge node faces")]
        hingenodefaces,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("interval edges")]
        intervaledges,
        
        /// <remarks/>
        intervals,
        
        /// <remarks/>
        I0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("I0 edges")]
        I0edges,
        
        /// <remarks/>
        J0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("J0 edges")]
        J0edges,
        
        /// <remarks/>
        layers,
        
        /// <remarks/>
        nodes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per cell")]
        nodespercell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per edge")]
        nodesperedge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per face")]
        nodesperface,
        
        /// <remarks/>
        pillars,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("radial origin polyline")]
        radialoriginpolyline,
        
        /// <remarks/>
        subnodes,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum UnstructuredCellIndexableElements {
        
        /// <remarks/>
        cells,
        
        /// <remarks/>
        edges,
        
        /// <remarks/>
        faces,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("faces per cell")]
        facespercell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("hinge node faces")]
        hingenodefaces,
        
        /// <remarks/>
        nodes,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per cell")]
        nodespercell,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per edge")]
        nodesperedge,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("nodes per face")]
        nodesperface,
        
        /// <remarks/>
        subnodes,
    }
    
    /// <remarks/>
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    public enum WellboreFrameIndexableElements {
        
        /// <remarks/>
        intervals,
        
        /// <remarks/>
        nodes,
        
        /// <remarks/>
        cells,
    }
}
