
//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.RESQML200.ComponentSchemas;
using Energistics.DataAccess.RESQML200.ReferenceData;
using Energistics.DataAccess.Reflection;
using Energistics.DataAccess.Validation;

namespace Energistics.DataAccess.RESQML200
{
    #region Classes
    /// <summary>
    /// This class represents the AbstractObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCitedDataObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractResqmlDataObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MdDatum))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GlobalChronostratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTechnicalFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrontierFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeologicFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractLocal3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalDepth3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalTime3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractValuesProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointsProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractPropertyLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TriangulatedSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreTrajectoryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BlockedWellboreRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeviationSurveyRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RedefinedGeometryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RepresentationSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonSealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridConnectionSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RepresentationIdentitySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalGridSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EarthModelInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyBoundaryInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EpcExternalPartReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDataObject", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the AbstractObject xsd type.")]
    public abstract partial class AbstractObject : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Citation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Citation")]
		[XmlElement("Citation")]
        public Citation Citation {
            get {
                return CitationField;
            } 
            set {
                CitationField = value;
                NotifyPropertyChanged("Citation");
            }
        }

        private Citation CitationField; 

        /// <summary>
        /// Aliases property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ObjectAlias")]
		[XmlElement("Aliases")]
        public List<ObjectAlias> Aliases {
            get {
                return AliasesField;
            } 
            set {
                AliasesField = value;
                NotifyPropertyChanged("Aliases");
            }
        }

         /// <summary>
         /// bool to indicate if Aliases has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AliasesSpecified
         {
             get {
             if(AliasesField!=null)
                 return AliasesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ObjectAlias> AliasesField; 

        /// <summary>
        /// CustomData property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "CustomData")]
		[XmlElement("CustomData")]
        public CustomData CustomData {
            get {
                return CustomDataField;
            } 
            set {
                CustomDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData CustomDataField; 

		/// <summary>
        /// schemaVersion property
        /// </summary>
		[Required]
        [Description("The specific version of a schema from which this object is derived. This string should be exactly equivalent to the version attribute of the root element of the associated XSD schema file. In the UML model is the same as the version tagged value of the <<XSDschema>> package.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("schemaVersion")]
		
        public string SchemaVersion {
            get {
                return schemaVersionField;
            } 
            set {
                schemaVersionField = value;
                NotifyPropertyChanged("SchemaVersion");
            }
        }

        private string schemaVersionField; 

		/// <summary>
        /// uuid property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 

		/// <summary>
        /// objectVersion property
        /// </summary>
		[StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "NameString")]
        [XmlAttribute("objectVersion")]
		
        public string ObjectVersion {
            get {
                return objectVersionField;
            } 
            set {
                objectVersionField = value;
                NotifyPropertyChanged("ObjectVersion");
            }
        }

        private string objectVersionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Citation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Citation", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the Citation xsd type.")]
    public partial class Citation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(256)]
        [Description("One line description/name of the RESQML object.  This is the equivalent in ISO 19115 of CI_Citation.title  Legacy DCGroup - title")]
        [EnergisticsDataTypeAttribute(DataType = "DescriptionString")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// Originator property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name (or other human-readable identifier) of the person who initially originated the object or RESQML document in the source application. If that information is not available, the user who created the RESQML format file. The originator remains the same as the object is subsequently edited.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is \"originator\".  Legacy DCGroup - author")]
        [EnergisticsDataTypeAttribute(DataType = "NameString")]
		[XmlElement("Originator")]
        public string Originator {
            get {
                return OriginatorField;
            } 
            set {
                OriginatorField = value;
                NotifyPropertyChanged("Originator");
            }
        }

        private string OriginatorField; 

        /// <summary>
        /// Creation property
        /// </summary>
		[Required]
        [Description("Date and time the document was created in the source application or, if that information is not available, when it was saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”creation\"  The type is the Energistics timestamp datatype which is the W3C xs:dateTime with the optional timezone offset from UTC made mandatory.  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - created")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("Creation")]
        public DateTime? Creation {
            get {
                return CreationField;
            } 
            set {
                CreationField = value;
                NotifyPropertyChanged("Creation");
            }
        }

        private DateTime? CreationField; 

        /// <summary>
        /// Format property
        /// </summary>
		[Required]
        [StringLength(256)]
        [Description("Software or service that was used to originate the object and the file format created. Must be human and machine readable and unambiguously identify the software by including the company name, software name and software version. This is the equivalent in ISO 19115 to the distributionFormat.MD_Format.  The ISO format for this is [vendor:applicationName]/fileExtension where the application name includes the version number of the application.  SIG Implementation Notes  1. RESQML  - Legacy DCGroup from v1.1 - publisher - fileExtension is not relevant and will be ignored if present. - vendor and applicationName are mandatory.")]
        [EnergisticsDataTypeAttribute(DataType = "DescriptionString")]
		[XmlElement("Format")]
        public string Format {
            get {
                return FormatField;
            } 
            set {
                FormatField = value;
                NotifyPropertyChanged("Format");
            }
        }

        private string FormatField; 

        /// <summary>
        /// Editor property
        /// </summary>
		[StringLength(64)]
        [Description("Name (or other human-readable identifier) of the last person who updated the object.   This is the equivalent in ISO 19115 to the CI_Individual.name or the CI_Organization.name of the citedResponsibleParty whose role is \"editor\".  Legacy DCGroup - contributor")]
        [EnergisticsDataTypeAttribute(DataType = "NameString")]
		[XmlElement("Editor")]
        public string Editor {
            get {
                return EditorField;
            } 
            set {
                EditorField = value;
                NotifyPropertyChanged("Editor");
            }
        }

        private string EditorField; 

        /// <summary>
        /// LastUpdate property
        /// </summary>
		[Description("Date and time the document was last modified in the source application or, if that information is not available, when it was last saved to the RESQML format file.  This is the equivalent of the ISO 19115 CI_Date where the CI_DateTypeCode = ”lastUpdate\"  The type is the Energistics timestamp datatype which is the W3C xs:dateTime with the optional timezone offset from UTC made mandatory.  Format: YYYY-MM-DDThh:mm:ssZ[+/-]hh:mm  Legacy DCGroup - modified")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("LastUpdate")]
        public DateTime? LastUpdate {
            get {
                return LastUpdateField;
            } 
            set {
                LastUpdateField = value;
                 this.LastUpdateSpecified = true;
                NotifyPropertyChanged("LastUpdate");
            }
        }

        private DateTime? LastUpdateField; 

        /// <summary>
        /// LastUpdateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastUpdateSpecified {
            get {
                return LastUpdateSpecifiedField;
            } 
            set {
                LastUpdateSpecifiedField = value;
                NotifyPropertyChanged("LastUpdateSpecified");
            }
        }

        private bool LastUpdateSpecifiedField; 

        /// <summary>
        /// VersionString property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("VersionString")]
        public string VersionString {
            get {
                return VersionStringField;
            } 
            set {
                VersionStringField = value;
                NotifyPropertyChanged("VersionString");
            }
        }

        private string VersionStringField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(4000)]
        [Description("User descriptive comments about the object. Intended for end-user use (human readable); not necessarily meant to be used by software.  This is the equivalent of the ISO 19115 abstract.CharacterString  Legacy DCGroup - description")]
        [EnergisticsDataTypeAttribute(DataType = "CommentString")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

        /// <summary>
        /// DescriptiveKeywords property
        /// </summary>
		[StringLength(4000)]
        [Description("Key words to describe the activity, for example, history match or volumetric calculations, relevant to this object. Intended to be used in a search function by software.  This is the equivalent in ISO 19115 of descriptiveKeywords.MD_Keywords  Legacy DCGroup - subject")]
        [EnergisticsDataTypeAttribute(DataType = "CommentString")]
		[XmlElement("DescriptiveKeywords")]
        public string DescriptiveKeywords {
            get {
                return DescriptiveKeywordsField;
            } 
            set {
                DescriptiveKeywordsField = value;
                NotifyPropertyChanged("DescriptiveKeywords");
            }
        }

        private string DescriptiveKeywordsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ChronostratigraphicRank xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ChronostratigraphicRank", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ChronostratigraphicRank xsd type.")]
    public partial class ChronostratigraphicRank : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Name of the chrono rank such as \"epoch, era, ...\"")]
        [EnergisticsDataTypeAttribute(DataType = "NameString")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Contains property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Contains")]
        public List<DataObjectReference> Contains {
            get {
                return ContainsField;
            } 
            set {
                ContainsField = value;
                NotifyPropertyChanged("Contains");
            }
        }

         /// <summary>
         /// bool to indicate if Contains has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContainsSpecified
         {
             get {
             if(ContainsField!=null)
                 return ContainsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> ContainsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DataObjectReference xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactElementReference))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DataObjectReference", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the DataObjectReference xsd type.")]
    public partial class DataObjectReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ContentType property
        /// </summary>
		[Required]
        [Description("The content type of the referenced element.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("ContentType")]
        public string ContentType {
            get {
                return ContentTypeField;
            } 
            set {
                ContentTypeField = value;
                NotifyPropertyChanged("ContentType");
            }
        }

        private string ContentTypeField; 

        /// <summary>
        /// Title property
        /// </summary>
		[Required]
        [StringLength(256)]
        [EnergisticsDataTypeAttribute(DataType = "DescriptionString")]
		[XmlElement("Title")]
        public string Title {
            get {
                return TitleField;
            } 
            set {
                TitleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private string TitleField; 

        /// <summary>
        /// UUID property
        /// </summary>
		[Required]
        [RegularExpression("[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        [Description("Reference to an object using its global UID.")]
        [EnergisticsDataTypeAttribute(DataType = "UuidString")]
		[XmlElement("UUID")]
        public string UUID {
            get {
                return UUIDField;
            } 
            set {
                UUIDField = value;
                NotifyPropertyChanged("UUID");
            }
        }

        private string UUIDField; 

        /// <summary>
        /// UuidAuthority property
        /// </summary>
		[Description("The authority that issued and maintains the uuid of the referenced object. Used mainly in alias context.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("UuidAuthority")]
        public string UuidAuthority {
            get {
                return UuidAuthorityField;
            } 
            set {
                UuidAuthorityField = value;
                NotifyPropertyChanged("UuidAuthority");
            }
        }

        private string UuidAuthorityField; 

        /// <summary>
        /// VersionString property
        /// </summary>
		[StringLength(64)]
        [Description("Indicates the version of the object which is referenced.")]
        [EnergisticsDataTypeAttribute(DataType = "NameString")]
		[XmlElement("VersionString")]
        public string VersionString {
            get {
                return VersionStringField;
            } 
            set {
                VersionStringField = value;
                NotifyPropertyChanged("VersionString");
            }
        }

        private string VersionStringField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ContactElementReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ContactElementReference", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ContactElementReference xsd type.")]
    public partial class ContactElementReference : DataObjectReference, INotifyPropertyChanged
    {

        /// <summary>
        /// Qualifier property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ContactSide")]
		[XmlElement("Qualifier")]
        public ContactSide? Qualifier {
            get {
                return QualifierField;
            } 
            set {
                QualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private ContactSide? QualifierField; 

        /// <summary>
        /// QualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return QualifierSpecifiedField;
            } 
            set {
                QualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool QualifierSpecifiedField; 

        /// <summary>
        /// SecondaryQualifier property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ContactMode")]
		[XmlElement("SecondaryQualifier")]
        public ContactMode? SecondaryQualifier {
            get {
                return SecondaryQualifierField;
            } 
            set {
                SecondaryQualifierField = value;
                 this.SecondaryQualifierSpecified = true;
                NotifyPropertyChanged("SecondaryQualifier");
            }
        }

        private ContactMode? SecondaryQualifierField; 

        /// <summary>
        /// SecondaryQualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SecondaryQualifierSpecified {
            get {
                return SecondaryQualifierSpecifiedField;
            } 
            set {
                SecondaryQualifierSpecifiedField = value;
                NotifyPropertyChanged("SecondaryQualifierSpecified");
            }
        }

        private bool SecondaryQualifierSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WitsmlWellboreReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WitsmlWellboreReference", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the WitsmlWellboreReference xsd type.")]
    public partial class WitsmlWellboreReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// WitsmlWell property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WitsmlWell")]
        public DataObjectReference WitsmlWell {
            get {
                return WitsmlWellField;
            } 
            set {
                WitsmlWellField = value;
                NotifyPropertyChanged("WitsmlWell");
            }
        }

        private DataObjectReference WitsmlWellField; 

        /// <summary>
        /// WitsmlWellbore property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WitsmlWellbore")]
        public DataObjectReference WitsmlWellbore {
            get {
                return WitsmlWellboreField;
            } 
            set {
                WitsmlWellboreField = value;
                NotifyPropertyChanged("WitsmlWellbore");
            }
        }

        private DataObjectReference WitsmlWellboreField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeSeriesParentage xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeSeriesParentage", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the TimeSeriesParentage xsd type.")]
    public partial class TimeSeriesParentage : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// HasOverlap property
        /// </summary>
		[Required]
        [Description("Used to indicate that a time series overlaps with its parent time series, e.g., as may be done for simulation studies, where the end state of one calculation is the initial state of the next.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("HasOverlap")]
        public bool? HasOverlap {
            get {
                return HasOverlapField;
            } 
            set {
                HasOverlapField = value;
                NotifyPropertyChanged("HasOverlap");
            }
        }

        private bool? HasOverlapField; 

        /// <summary>
        /// ParentTimeIndex property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("ParentTimeIndex")]
        public TimeIndex ParentTimeIndex {
            get {
                return ParentTimeIndexField;
            } 
            set {
                ParentTimeIndexField = value;
                NotifyPropertyChanged("ParentTimeIndex");
            }
        }

        private TimeIndex ParentTimeIndexField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeIndex", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the TimeIndex xsd type.")]
    public partial class TimeIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("The index of the time in the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private string IndexField; 

        /// <summary>
        /// TimeSeries property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TimeSeries")]
        public DataObjectReference TimeSeries {
            get {
                return TimeSeriesField;
            } 
            set {
                TimeSeriesField = value;
                NotifyPropertyChanged("TimeSeries");
            }
        }

        private DataObjectReference TimeSeriesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Timestamp xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Timestamp", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Timestamp xsd type.")]
    public partial class Timestamp : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A date which can be represented according to the W3CDTF format.
        /// </summary>
		[Required]
        [Description("A date which can be represented according to the W3CDTF format.")]
        [EnergisticsDataTypeAttribute(DataType = "dateTime")]
		[XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 

        /// <summary>
        /// Indicates that the dateTime attribute must be translated according to this value.
        /// </summary>
		[Description("Indicates that the dateTime attribute must be translated according to this value.")]
        [EnergisticsDataTypeAttribute(DataType = "long")]
		[XmlElement("YearOffset")]
        public long? YearOffset {
            get {
                return YearOffsetField;
            } 
            set {
                YearOffsetField = value;
                 this.YearOffsetSpecified = true;
                NotifyPropertyChanged("YearOffset");
            }
        }

        private long? YearOffsetField; 

        /// <summary>
        /// YearOffsetSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool YearOffsetSpecified {
            get {
                return YearOffsetSpecifiedField;
            } 
            set {
                YearOffsetSpecifiedField = value;
                NotifyPropertyChanged("YearOffsetSpecified");
            }
        }

        private bool YearOffsetSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PropertyKindFacet xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PropertyKindFacet", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the PropertyKindFacet xsd type.")]
    public partial class PropertyKindFacet : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PropertyKindFacet class.
        /// </summary>
        public PropertyKindFacet() {}

        /// <summary>
        /// Initializes a new instance of the PropertyKindFacet class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public PropertyKindFacet(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Facet of the property kind (see the enumeration)
        /// </summary>
		[Required]
        [Description("Facet of the property kind (see the enumeration)")]
        [EnergisticsDataTypeAttribute(DataType = "Facet")]
		[XmlElement("Facet")]
        public Facet? Facet {
            get {
                return FacetField;
            } 
            set {
                FacetField = value;
                 this.FacetSpecified = true;
                NotifyPropertyChanged("Facet");
            }
        }

        
        private bool FacetSpecifiedField = false;
        
        /// <summary>
        /// FacetSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FacetSpecified {
            get {
                return FacetSpecifiedField;
            } 
            set {
                FacetSpecifiedField = value;
                NotifyPropertyChanged("FacetSpecified");
            }
        }
        
        private Facet? FacetField; 

        /// <summary>
        /// Property facet value.
        /// </summary>
		[Required]
        [Description("Property facet value.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PatchOfValues xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PatchOfValues", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the PatchOfValues xsd type.")]
    public partial class PatchOfValues : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Patch index used to attach properties to a specific patch of the indexable elements.
        /// </summary>
		[Description("Patch index used to attach properties to a specific patch of the indexable elements.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("RepresentationPatchIndex", DataType="nonNegativeInteger")]
        public string RepresentationPatchIndex {
            get {
                return RepresentationPatchIndexField;
            } 
            set {
                RepresentationPatchIndexField = value;
                NotifyPropertyChanged("RepresentationPatchIndex");
            }
        }

        private string RepresentationPatchIndexField; 

        /// <summary>
        /// Values to be attached to the indexable elements.
        /// </summary>
		[Required]
        [Description("Values to be attached to the indexable elements.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractValueArray")]
		[XmlElement("Values")]
        public AbstractValueArray Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

        private AbstractValueArray ValuesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractValueArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractBooleanArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromDiscretePropertyArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromIndexArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractIntegerArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDoubleArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleLatticeArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractValueArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractValueArray xsd type.")]
    public abstract partial class AbstractValueArray : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractBooleanArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromDiscretePropertyArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BooleanArrayFromIndexArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractBooleanArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractBooleanArray xsd type.")]
    public abstract partial class AbstractBooleanArray : AbstractValueArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BooleanArrayFromDiscretePropertyArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BooleanArrayFromDiscretePropertyArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the BooleanArrayFromDiscretePropertyArray xsd type.")]
    public partial class BooleanArrayFromDiscretePropertyArray : AbstractBooleanArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the BooleanArrayFromDiscretePropertyArray class.
        /// </summary>
        public BooleanArrayFromDiscretePropertyArray() {}

        /// <summary>
        /// Initializes a new instance of the BooleanArrayFromDiscretePropertyArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public BooleanArrayFromDiscretePropertyArray(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [Description("Integer to match for the value to be considered true")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("Value", DataType="integer")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 

        /// <summary>
        /// Property property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Property")]
        public DataObjectReference Property {
            get {
                return PropertyField;
            } 
            set {
                PropertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

        private DataObjectReference PropertyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BooleanHdf5Array xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BooleanHdf5Array", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the BooleanHdf5Array xsd type.")]
    public partial class BooleanHdf5Array : AbstractBooleanArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to an HDF5 array of values.
        /// </summary>
		[Required]
        [Description("Reference to an HDF5 array of values.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Hdf5Dataset")]
		[XmlElement("Values")]
        public Hdf5Dataset Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

        private Hdf5Dataset ValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Hdf5Dataset xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Hdf5Dataset", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the Hdf5Dataset xsd type.")]
    public partial class Hdf5Dataset : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PathInHdfFile property
        /// </summary>
		[Required]
        [Description("The path of the referenced dataset in the HDF file.  The separator between groups and final dataset is a slash '/'")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("PathInHdfFile")]
        public string PathInHdfFile {
            get {
                return PathInHdfFileField;
            } 
            set {
                PathInHdfFileField = value;
                NotifyPropertyChanged("PathInHdfFile");
            }
        }

        private string PathInHdfFileField; 

        /// <summary>
        /// HdfProxy property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("HdfProxy")]
        public DataObjectReference HdfProxy {
            get {
                return HdfProxyField;
            } 
            set {
                HdfProxyField = value;
                NotifyPropertyChanged("HdfProxy");
            }
        }

        private DataObjectReference HdfProxyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BooleanConstantArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BooleanConstantArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the BooleanConstantArray xsd type.")]
    public partial class BooleanConstantArray : AbstractBooleanArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the BooleanConstantArray class.
        /// </summary>
        public BooleanConstantArray() {}

        /// <summary>
        /// Initializes a new instance of the BooleanConstantArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public BooleanConstantArray(bool value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value inside all the elements of the array.
        /// </summary>
		[Required]
        [Description("Value inside all the elements of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("Value")]
        public bool? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private bool? ValueField; 

        /// <summary>
        /// Size of the array.
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BooleanArrayFromIndexArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BooleanArrayFromIndexArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the BooleanArrayFromIndexArray xsd type.")]
    public partial class BooleanArrayFromIndexArray : AbstractBooleanArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Total number of Boolean elements in the array. This number is different from the number of indices used to represent the array.
        /// </summary>
		[Required]
        [Description("Total number of Boolean elements in the array. This number is different from the number of indices used to represent the array.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Array of integer indices. BUSINESS RULE: Must be non-negative.
        /// </summary>
		[Required]
        [Description("Array of integer indices.  BUSINESS RULE: Must be non-negative.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("Indices")]
        public AbstractIntegerArray Indices {
            get {
                return IndicesField;
            } 
            set {
                IndicesField = value;
                NotifyPropertyChanged("Indices");
            }
        }

        private AbstractIntegerArray IndicesField; 

        /// <summary>
        /// Indicates whether the specified elements are true or false.
        /// </summary>
		[Required]
        [Description("Indicates whether the specified elements are true or false.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IndexIsTrue")]
        public bool? IndexIsTrue {
            get {
                return IndexIsTrueField;
            } 
            set {
                IndexIsTrueField = value;
                NotifyPropertyChanged("IndexIsTrue");
            }
        }

        private bool? IndexIsTrueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractIntegerArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerRangeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IntegerArrayFromBooleanMaskArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractIntegerArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractIntegerArray xsd type.")]
    public abstract partial class AbstractIntegerArray : AbstractValueArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerRangeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerRangeArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IntegerRangeArray xsd type.")]
    public partial class IntegerRangeArray : AbstractIntegerArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IntegerRangeArray class.
        /// </summary>
        public IntegerRangeArray() {}

        /// <summary>
        /// Initializes a new instance of the IntegerRangeArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IntegerRangeArray(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Size of the array.
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Start value for the range. End value is start+count-1.
        /// </summary>
		[Required]
        [Description("Start value for the range. End value is start+count-1.")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("Value", DataType="integer")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerLatticeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerLatticeArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IntegerLatticeArray xsd type.")]
    public partial class IntegerLatticeArray : AbstractIntegerArray, INotifyPropertyChanged
    {

        /// <summary>
        /// StartValue property
        /// </summary>
		[Required]
        [Description("Value representing the global start for the lattice: i.e., iStart + jStart*ni + kStart*ni*nj")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("StartValue", DataType="integer")]
        public string StartValue {
            get {
                return StartValueField;
            } 
            set {
                StartValueField = value;
                NotifyPropertyChanged("StartValue");
            }
        }

        private string StartValueField; 

        /// <summary>
        /// Offset property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "IntegerConstantArray")]
		[XmlElement("Offset")]
        public List<IntegerConstantArray> Offset {
            get {
                return OffsetField;
            } 
            set {
                OffsetField = value;
                NotifyPropertyChanged("Offset");
            }
        }

         /// <summary>
         /// bool to indicate if Offset has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OffsetSpecified
         {
             get {
             if(OffsetField!=null)
                 return OffsetField.Count>0?true:false;
             else return false;
             }
         }
        private List<IntegerConstantArray> OffsetField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerConstantArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerConstantArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IntegerConstantArray xsd type.")]
    public partial class IntegerConstantArray : AbstractIntegerArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IntegerConstantArray class.
        /// </summary>
        public IntegerConstantArray() {}

        /// <summary>
        /// Initializes a new instance of the IntegerConstantArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IntegerConstantArray(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Values inside all the elements of the array.
        /// </summary>
		[Required]
        [Description("Values inside all the elements of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("Value", DataType="integer")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 

        /// <summary>
        /// Size of the array.
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerHdf5Array xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerHdf5Array", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IntegerHdf5Array xsd type.")]
    public partial class IntegerHdf5Array : AbstractIntegerArray, INotifyPropertyChanged
    {

        /// <summary>
        /// NullValue property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("NullValue", DataType="integer")]
        public string NullValue {
            get {
                return NullValueField;
            } 
            set {
                NullValueField = value;
                NotifyPropertyChanged("NullValue");
            }
        }

        private string NullValueField; 

        /// <summary>
        /// Reference to an HDF5 array of integers or doubles.
        /// </summary>
		[Required]
        [Description("Reference to an HDF5 array of integers or doubles.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Hdf5Dataset")]
		[XmlElement("Values")]
        public Hdf5Dataset Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

        private Hdf5Dataset ValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntegerArrayFromBooleanMaskArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntegerArrayFromBooleanMaskArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IntegerArrayFromBooleanMaskArray xsd type.")]
    public partial class IntegerArrayFromBooleanMaskArray : AbstractIntegerArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Total number of integer elements in the array. This number is different from the number of Boolean mask values used to represent the array.
        /// </summary>
		[Required]
        [Description("Total number of integer elements in the array. This number is different from the number of Boolean mask values used to represent the array.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("TotalIndexCount", DataType="positiveInteger")]
        public string TotalIndexCount {
            get {
                return TotalIndexCountField;
            } 
            set {
                TotalIndexCountField = value;
                NotifyPropertyChanged("TotalIndexCount");
            }
        }

        private string TotalIndexCountField; 

        /// <summary>
        /// Boolean mask. A true element indicates that the index is included on the list of integer values.
        /// </summary>
		[Required]
        [Description("Boolean mask. A true element indicates that the index is included on the list of integer values.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("Mask")]
        public AbstractBooleanArray Mask {
            get {
                return MaskField;
            } 
            set {
                MaskField = value;
                NotifyPropertyChanged("Mask");
            }
        }

        private AbstractBooleanArray MaskField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringHdf5Array xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringHdf5Array", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the StringHdf5Array xsd type.")]
    public partial class StringHdf5Array : AbstractValueArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to HDF5 array of integer or double
        /// </summary>
		[Required]
        [Description("Reference to HDF5 array of integer or double")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Hdf5Dataset")]
		[XmlElement("Values")]
        public Hdf5Dataset Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

        private Hdf5Dataset ValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractDoubleArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleConstantArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleLatticeArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractDoubleArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractDoubleArray xsd type.")]
    public abstract partial class AbstractDoubleArray : AbstractValueArray, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DoubleHdf5Array xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DoubleHdf5Array", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the DoubleHdf5Array xsd type.")]
    public partial class DoubleHdf5Array : AbstractDoubleArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to an HDF5 array of doubles.
        /// </summary>
		[Required]
        [Description("Reference to an HDF5 array of doubles.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Hdf5Dataset")]
		[XmlElement("Values")]
        public Hdf5Dataset Values {
            get {
                return ValuesField;
            } 
            set {
                ValuesField = value;
                NotifyPropertyChanged("Values");
            }
        }

        private Hdf5Dataset ValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DoubleConstantArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DoubleConstantArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the DoubleConstantArray xsd type.")]
    public partial class DoubleConstantArray : AbstractDoubleArray, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DoubleConstantArray class.
        /// </summary>
        public DoubleConstantArray() {}

        /// <summary>
        /// Initializes a new instance of the DoubleConstantArray class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public DoubleConstantArray(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Values inside all the elements of the array.
        /// </summary>
		[Required]
        [Description("Values inside all the elements of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Value")]
        public double? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double? ValueField; 

        /// <summary>
        /// Size of the array.
        /// </summary>
		[Required]
        [Description("Size of the array.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DoubleLatticeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DoubleLatticeArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the DoubleLatticeArray xsd type.")]
    public partial class DoubleLatticeArray : AbstractDoubleArray, INotifyPropertyChanged
    {

        /// <summary>
        /// StartValue property
        /// </summary>
		[Required]
        [Description("Value representing the global start for the lattice.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("StartValue")]
        public double? StartValue {
            get {
                return StartValueField;
            } 
            set {
                StartValueField = value;
                NotifyPropertyChanged("StartValue");
            }
        }

        private double? StartValueField; 

        /// <summary>
        /// Offset property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DoubleConstantArray")]
		[XmlElement("Offset")]
        public List<DoubleConstantArray> Offset {
            get {
                return OffsetField;
            } 
            set {
                OffsetField = value;
                NotifyPropertyChanged("Offset");
            }
        }

         /// <summary>
         /// bool to indicate if Offset has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OffsetSpecified
         {
             get {
             if(OffsetField!=null)
                 return OffsetField.Count>0?true:false;
             else return false;
             }
         }
        private List<DoubleConstantArray> OffsetField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PatchOfPoints xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PatchOfPoints", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the PatchOfPoints xsd type.")]
    public partial class PatchOfPoints : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Optional patch index used to attach properties to a specific patch of the indexable elements.
        /// </summary>
		[Description("Optional patch index used to attach properties to a specific patch of the indexable elements.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("RepresentationPatchIndex", DataType="nonNegativeInteger")]
        public string RepresentationPatchIndex {
            get {
                return RepresentationPatchIndexField;
            } 
            set {
                RepresentationPatchIndexField = value;
                NotifyPropertyChanged("RepresentationPatchIndex");
            }
        }

        private string RepresentationPatchIndexField; 

        /// <summary>
        /// Geometric points (or vectors) to be attached to the specified indexable elements.
        /// </summary>
		[Required]
        [Description("Geometric points (or vectors) to be attached to the specified indexable elements.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPoint3dArray")]
		[XmlElement("Points")]
        public AbstractPoint3dArray Points {
            get {
                return PointsField;
            } 
            set {
                PointsField = value;
                NotifyPropertyChanged("Points");
            }
        }

        private AbstractPoint3dArray PointsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractPoint3dArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dFromRepresentationLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dParametricArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dHdf5Array))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dZValueArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point3dLatticeArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Point2dHdf5Array))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractPoint3dArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractPoint3dArray xsd type.")]
    public abstract partial class AbstractPoint3dArray : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Point3dFromRepresentationLatticeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Point3dFromRepresentationLatticeArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Point3dFromRepresentationLatticeArray xsd type.")]
    public partial class Point3dFromRepresentationLatticeArray : AbstractPoint3dArray, INotifyPropertyChanged
    {

        /// <summary>
        /// NodeIndicesOnSupportingRepresentation property
        /// </summary>
		[Required]
        [Description("The node indices of the selected nodes in the supporting representation. The index selection is regularly incremented from one node to the next node.  BUSINESS RULE: The node indices must be consistent with the size of supporting representation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IntegerLatticeArray")]
		[XmlElement("NodeIndicesOnSupportingRepresentation")]
        public IntegerLatticeArray NodeIndicesOnSupportingRepresentation {
            get {
                return NodeIndicesOnSupportingRepresentationField;
            } 
            set {
                NodeIndicesOnSupportingRepresentationField = value;
                NotifyPropertyChanged("NodeIndicesOnSupportingRepresentation");
            }
        }

        private IntegerLatticeArray NodeIndicesOnSupportingRepresentationField; 

        /// <summary>
        /// SupportingRepresentation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SupportingRepresentation")]
        public DataObjectReference SupportingRepresentation {
            get {
                return SupportingRepresentationField;
            } 
            set {
                SupportingRepresentationField = value;
                NotifyPropertyChanged("SupportingRepresentation");
            }
        }

        private DataObjectReference SupportingRepresentationField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Point3dParametricArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Point3dParametricArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Point3dParametricArray xsd type.")]
    public partial class Point3dParametricArray : AbstractPoint3dArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Parameters property
        /// </summary>
		[Required]
        [Description("A multi-dimensional array of parametric values that implicitly specifies an array of XYZ points.  The parametric values provided in this data-object must be consistent with the parametric values specified in the referenced parametric line array.  When constructing a column-layer grid geometry using parametric points, the array indexing follows the dimensionality of the coordinate lines x NKL, which is either a 2D or 3D array.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractValueArray")]
		[XmlElement("Parameters")]
        public AbstractValueArray Parameters {
            get {
                return ParametersField;
            } 
            set {
                ParametersField = value;
                NotifyPropertyChanged("Parameters");
            }
        }

        private AbstractValueArray ParametersField; 

        /// <summary>
        /// ParametricLineIndices property
        /// </summary>
		[Description("An optional array of indices that map from the array index to the index of the corresponding parametric line.  If this information is known from context, then this array is not needed. For example, in either of these cases: (1) If the mapping from array index to parametric line is 1:1. (2) If the mapping has already been specified, as with the pillar Index from the column-layer geometry of a grid.  For example, when constructing a column-layer grid geometry using parametric lines, the array indexing follows the dimensionality of the coordinate lines.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParametricLineIndices")]
        public AbstractIntegerArray ParametricLineIndices {
            get {
                return ParametricLineIndicesField;
            } 
            set {
                ParametricLineIndicesField = value;
                NotifyPropertyChanged("ParametricLineIndices");
            }
        }

        private AbstractIntegerArray ParametricLineIndicesField; 

        /// <summary>
        /// TruncatedLineIndices property
        /// </summary>
		[Description("A 2D array of line indices for use with intersecting parametric lines. Each record consists of a single line index, which indicates the array line that uses this truncation information, followed by the parametric line indices for each of the points on that line.  For a non-truncated line, the equivalent record repeats the array line index NKL+1 times.   Size = (NKL+1) x truncatedLineCount")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("TruncatedLineIndices")]
        public AbstractIntegerArray TruncatedLineIndices {
            get {
                return TruncatedLineIndicesField;
            } 
            set {
                TruncatedLineIndicesField = value;
                NotifyPropertyChanged("TruncatedLineIndices");
            }
        }

        private AbstractIntegerArray TruncatedLineIndicesField; 

        /// <summary>
        /// ParametricLines property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractParametricLineArray")]
		[XmlElement("ParametricLines")]
        public AbstractParametricLineArray ParametricLines {
            get {
                return ParametricLinesField;
            } 
            set {
                ParametricLinesField = value;
                NotifyPropertyChanged("ParametricLines");
            }
        }

        private AbstractParametricLineArray ParametricLinesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractParametricLineArray xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineArray))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineFromRepresentationLatticeArray))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractParametricLineArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractParametricLineArray xsd type.")]
    public abstract partial class AbstractParametricLineArray : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ParametricLineArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ParametricLineArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ParametricLineArray xsd type.")]
    public partial class ParametricLineArray : AbstractParametricLineArray, INotifyPropertyChanged
    {

        /// <summary>
        /// ControlPointParameters property
        /// </summary>
		[Description("An optional array of explicit control point parameters for all of the control points on each of the parametric lines. Used only if control point parameters are present.  The number of explicit control point parameters per line is given by the count of non-null parameters on each line.   Described as a 1D array, the control point parameter array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D  BUSINESS RULE: This count should be zero for vertical and Z linear cubic parametric lines. For all other parametric line kinds, there should be one control point parameter for each control point.  NOTES: (1) Vertical parametric lines do not require control point parameters (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("ControlPointParameters")]
        public AbstractDoubleArray ControlPointParameters {
            get {
                return ControlPointParametersField;
            } 
            set {
                ControlPointParametersField = value;
                NotifyPropertyChanged("ControlPointParameters");
            }
        }

        private AbstractDoubleArray ControlPointParametersField; 

        /// <summary>
        /// ControlPoints property
        /// </summary>
		[Required]
        [Description("An array of 3D points for all of the control points on each of the parametric lines. The number of control points per line is given by the count of non-null 3D points on each line.  Described as a 1D array, the control point array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPoint3dArray")]
		[XmlElement("ControlPoints")]
        public AbstractPoint3dArray ControlPoints {
            get {
                return ControlPointsField;
            } 
            set {
                ControlPointsField = value;
                NotifyPropertyChanged("ControlPoints");
            }
        }

        private AbstractPoint3dArray ControlPointsField; 

        /// <summary>
        /// KnotCount property
        /// </summary>
		[Required]
        [Description("The first dimension of the control point, control point parameter, and tangent vector arrays for the parametric splines. The Knot Count is typically chosen to be the maximum number of control points, parameters or tangent vectors on any parametric line in the array of parametric lines.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("KnotCount", DataType="positiveInteger")]
        public string KnotCount {
            get {
                return KnotCountField;
            } 
            set {
                KnotCountField = value;
                NotifyPropertyChanged("KnotCount");
            }
        }

        private string KnotCountField; 

        /// <summary>
        /// LineKindIndices property
        /// </summary>
		[Required]
        [Description("An array of integers indicating the parametric line kind.  0 = vertical 1 = linear spline 2 = natural cubic spline 3 = cubic spline 4 = Z linear cubic spline 5 = minimum-curvature spline (-1) = null: no line   Size = #Lines, e.g., (1D or 2D)")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("LineKindIndices")]
        public AbstractIntegerArray LineKindIndices {
            get {
                return LineKindIndicesField;
            } 
            set {
                LineKindIndicesField = value;
                NotifyPropertyChanged("LineKindIndices");
            }
        }

        private AbstractIntegerArray LineKindIndicesField; 

        /// <summary>
        /// TangentVectors property
        /// </summary>
		[Description("An optional array that is of tangent vectors for all of the control points on each of the cubic and minimum-curvature parametric lines. Used only if tangent vectors are present. The number of tangent vectors per line is given by the count of non-null tangent vectors on each of these line kinds.  Described as a 1D array, the tangent vector array is divided into segments of length count, with null (NaN) values added to each segment to fill it up.  Size = count x #Lines, e.g., 2D or 3D  BUSINESS RULE: For all lines other than the cubic and minimum-curvature parametric lines, this count is zero. For these line kinds, there is one tangent vector for each control point.  If a tangent vector is missing, then it is computed in the same fashion as for a natural cubic spline. Specifically, to obtain the tangent at internal knots, the control points are fit by a quadratic function with the two adjacent control points. At edge knots, the second derivative vanishes.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPoint3dArray")]
		[XmlElement("TangentVectors")]
        public AbstractPoint3dArray TangentVectors {
            get {
                return TangentVectorsField;
            } 
            set {
                TangentVectorsField = value;
                NotifyPropertyChanged("TangentVectors");
            }
        }

        private AbstractPoint3dArray TangentVectorsField; 

        /// <summary>
        /// ParametricLineIntersections property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ParametricLineIntersections")]
		[XmlElement("ParametricLineIntersections")]
        public ParametricLineIntersections ParametricLineIntersections {
            get {
                return ParametricLineIntersectionsField;
            } 
            set {
                ParametricLineIntersectionsField = value;
                NotifyPropertyChanged("ParametricLineIntersections");
            }
        }

        private ParametricLineIntersections ParametricLineIntersectionsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ParametricLineIntersections xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ParametricLineIntersections", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ParametricLineIntersections xsd type.")]
    public partial class ParametricLineIntersections : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of parametric line intersections. Must be positive.
        /// </summary>
		[Required]
        [Description("Number of parametric line intersections. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Intersected line index pair for (line 1, line 2). Size = 2 x count
        /// </summary>
		[Required]
        [Description("Intersected line index pair for (line 1, line 2).  Size = 2 x count")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("IntersectionLinePairs")]
        public AbstractIntegerArray IntersectionLinePairs {
            get {
                return IntersectionLinePairsField;
            } 
            set {
                IntersectionLinePairsField = value;
                NotifyPropertyChanged("IntersectionLinePairs");
            }
        }

        private AbstractIntegerArray IntersectionLinePairsField; 

        /// <summary>
        /// Intersected line parameter value pairs for (line 1, line 2). Size = 2 x count
        /// </summary>
		[Required]
        [Description("Intersected line parameter value pairs for (line 1, line 2).  Size = 2 x count")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractValueArray")]
		[XmlElement("ParameterValuePairs")]
        public AbstractValueArray ParameterValuePairs {
            get {
                return ParameterValuePairsField;
            } 
            set {
                ParameterValuePairsField = value;
                NotifyPropertyChanged("ParameterValuePairs");
            }
        }

        private AbstractValueArray ParameterValuePairsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ParametricLineFromRepresentationLatticeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ParametricLineFromRepresentationLatticeArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ParametricLineFromRepresentationLatticeArray xsd type.")]
    public partial class ParametricLineFromRepresentationLatticeArray : AbstractParametricLineArray, INotifyPropertyChanged
    {

        /// <summary>
        /// LineIndicesOnSupportingRepresentation property
        /// </summary>
		[Required]
        [Description("The line indices of the selected lines in the supporting representation. The index selection is regularly incremented from one node to the next node.  BUSINESS RULE: The dimensions of the integer lattice array must be consistent with the dimensions of the supporting representation.  For a column-layer grid, the parametric lines follow the indexing of the pillars.  BUSINESS RULE: The start value of the integer lattice array must be the linearized index of the starting line. Example: iStart + ni * jStart in case of a supporting 2D grid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IntegerLatticeArray")]
		[XmlElement("LineIndicesOnSupportingRepresentation")]
        public IntegerLatticeArray LineIndicesOnSupportingRepresentation {
            get {
                return LineIndicesOnSupportingRepresentationField;
            } 
            set {
                LineIndicesOnSupportingRepresentationField = value;
                NotifyPropertyChanged("LineIndicesOnSupportingRepresentation");
            }
        }

        private IntegerLatticeArray LineIndicesOnSupportingRepresentationField; 

        /// <summary>
        /// SupportingRepresentation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SupportingRepresentation")]
        public DataObjectReference SupportingRepresentation {
            get {
                return SupportingRepresentationField;
            } 
            set {
                SupportingRepresentationField = value;
                NotifyPropertyChanged("SupportingRepresentation");
            }
        }

        private DataObjectReference SupportingRepresentationField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Point3dHdf5Array xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Point3dHdf5Array", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Point3dHdf5Array xsd type.")]
    public partial class Point3dHdf5Array : AbstractPoint3dArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to an HDF5 3D dataset of XYZ points. The 3 coordinates are stored sequentially in HDF5, i.e., a multi-dimensional array of points is stored as a 3 x ... HDF5 array.
        /// </summary>
		[Required]
        [Description("Reference to an HDF5 3D dataset of XYZ points. The 3 coordinates are stored sequentially in HDF5, i.e., a multi-dimensional array of points is stored as a 3 x ... HDF5 array.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Hdf5Dataset")]
		[XmlElement("Coordinates")]
        public Hdf5Dataset Coordinates {
            get {
                return CoordinatesField;
            } 
            set {
                CoordinatesField = value;
                NotifyPropertyChanged("Coordinates");
            }
        }

        private Hdf5Dataset CoordinatesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Point3dZValueArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Point3dZValueArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Point3dZValueArray xsd type.")]
    public partial class Point3dZValueArray : AbstractPoint3dArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Geometry defining the X and Y coordinates.
        /// </summary>
		[Required]
        [Description("Geometry defining the X and Y coordinates.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPoint3dArray")]
		[XmlElement("SupportingGeometry")]
        public AbstractPoint3dArray SupportingGeometry {
            get {
                return SupportingGeometryField;
            } 
            set {
                SupportingGeometryField = value;
                NotifyPropertyChanged("SupportingGeometry");
            }
        }

        private AbstractPoint3dArray SupportingGeometryField; 

        /// <summary>
        /// The values for Z coordinates
        /// </summary>
		[Required]
        [Description("The values for Z coordinates")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("ZValues")]
        public AbstractDoubleArray ZValues {
            get {
                return ZValuesField;
            } 
            set {
                ZValuesField = value;
                NotifyPropertyChanged("ZValues");
            }
        }

        private AbstractDoubleArray ZValuesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Point3dLatticeArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Point3dLatticeArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Point3dLatticeArray xsd type.")]
    public partial class Point3dLatticeArray : AbstractPoint3dArray, INotifyPropertyChanged
    {

        /// <summary>
        /// AllDimensionsAreOrthogonal property
        /// </summary>
		[Description("The optional element that indicates that the offset vectors for each direction are mutually orthogonal to each other. This meta-information is useful to remove any doubt of orthogonality in case of numerical precision issues.  BUSINESS RULE: If you don't know it or if only one lattice dimension is given, do not provide this element.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("AllDimensionsAreOrthogonal")]
        public bool? AllDimensionsAreOrthogonal {
            get {
                return AllDimensionsAreOrthogonalField;
            } 
            set {
                AllDimensionsAreOrthogonalField = value;
                 this.AllDimensionsAreOrthogonalSpecified = true;
                NotifyPropertyChanged("AllDimensionsAreOrthogonal");
            }
        }

        private bool? AllDimensionsAreOrthogonalField; 

        /// <summary>
        /// AllDimensionsAreOrthogonalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AllDimensionsAreOrthogonalSpecified {
            get {
                return AllDimensionsAreOrthogonalSpecifiedField;
            } 
            set {
                AllDimensionsAreOrthogonalSpecifiedField = value;
                NotifyPropertyChanged("AllDimensionsAreOrthogonalSpecified");
            }
        }

        private bool AllDimensionsAreOrthogonalSpecifiedField; 

        /// <summary>
        /// Origin property
        /// </summary>
		[Required]
        [Description("The origin location of the lattice given as XYZ coordinates.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Point3d")]
		[XmlElement("Origin")]
        public Point3d Origin {
            get {
                return OriginField;
            } 
            set {
                OriginField = value;
                NotifyPropertyChanged("Origin");
            }
        }

        private Point3d OriginField; 

        /// <summary>
        /// Offset property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Point3dOffset")]
		[XmlElement("Offset")]
        public List<Point3dOffset> Offset {
            get {
                return OffsetField;
            } 
            set {
                OffsetField = value;
                NotifyPropertyChanged("Offset");
            }
        }

         /// <summary>
         /// bool to indicate if Offset has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OffsetSpecified
         {
             get {
             if(OffsetField!=null)
                 return OffsetField.Count>0?true:false;
             else return false;
             }
         }
        private List<Point3dOffset> OffsetField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Point3d xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Point3d", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Point3d xsd type.")]
    public partial class Point3d : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// X Coordinate
        /// </summary>
		[Required]
        [Description("X Coordinate")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Coordinate1")]
        public double? Coordinate1 {
            get {
                return Coordinate1Field;
            } 
            set {
                Coordinate1Field = value;
                NotifyPropertyChanged("Coordinate1");
            }
        }

        private double? Coordinate1Field; 

        /// <summary>
        /// Y Coordinate
        /// </summary>
		[Required]
        [Description("Y Coordinate")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Coordinate2")]
        public double? Coordinate2 {
            get {
                return Coordinate2Field;
            } 
            set {
                Coordinate2Field = value;
                NotifyPropertyChanged("Coordinate2");
            }
        }

        private double? Coordinate2Field; 

        /// <summary>
        /// Either Z or T Coordinate
        /// </summary>
		[Required]
        [Description("Either Z or T Coordinate")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Coordinate3")]
        public double? Coordinate3 {
            get {
                return Coordinate3Field;
            } 
            set {
                Coordinate3Field = value;
                NotifyPropertyChanged("Coordinate3");
            }
        }

        private double? Coordinate3Field; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Point3dOffset xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Point3dOffset", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Point3dOffset xsd type.")]
    public partial class Point3dOffset : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The direction of the axis of this lattice dimension. This is a relative offset vector instead of an absolute 3D point.
        /// </summary>
		[Required]
        [Description("The direction of the axis of this lattice dimension. This is a relative offset vector instead of an absolute 3D point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Point3d")]
		[XmlElement("Offset")]
        public Point3d Offset {
            get {
                return OffsetField;
            } 
            set {
                OffsetField = value;
                NotifyPropertyChanged("Offset");
            }
        }

        private Point3d OffsetField; 

        /// <summary>
        /// A lattice of N offset points is described by a spacing array of size N-1. The offset between points is given by the spacing value multiplied by the offset vector. For example, the first offset is 0. The second offset is the first spacing * offset. The second offset is (first spacing + second spacing) * offset, etc.
        /// </summary>
		[Required]
        [Description("A lattice of N offset points is described by a spacing array of size N-1. The offset between points is given by the spacing value multiplied by the offset vector. For example, the first offset is 0. The second offset is the first spacing * offset. The second offset is (first spacing + second spacing) * offset, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("Spacing")]
        public AbstractDoubleArray Spacing {
            get {
                return SpacingField;
            } 
            set {
                SpacingField = value;
                NotifyPropertyChanged("Spacing");
            }
        }

        private AbstractDoubleArray SpacingField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Point2dHdf5Array xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Point2dHdf5Array", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Point2dHdf5Array xsd type.")]
    public partial class Point2dHdf5Array : AbstractPoint3dArray, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to an HDF5 2D dataset of XY points. The 2 coordinates are stored sequentially in HDF5, i.e., a multi-dimensional array of points is stored as a 2 x ... HDF5 array.
        /// </summary>
		[Required]
        [Description("Reference to an HDF5 2D dataset of XY points. The 2 coordinates are stored sequentially in HDF5, i.e., a multi-dimensional array of points is stored as a 2 x ... HDF5 array.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Hdf5Dataset")]
		[XmlElement("Coordinates")]
        public Hdf5Dataset Coordinates {
            get {
                return CoordinatesField;
            } 
            set {
                CoordinatesField = value;
                NotifyPropertyChanged("Coordinates");
            }
        }

        private Hdf5Dataset CoordinatesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StringLookup xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StringLookup", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the StringLookup xsd type.")]
    public partial class StringLookup : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringLookup class.
        /// </summary>
        public StringLookup() {}

        /// <summary>
        /// Initializes a new instance of the StringLookup class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringLookup(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// The corresponding integer value. This value is used in HDF5 instead of the string value. The value of null integer value must be reserved for NULL. The size of this value is constrained by the size of the format used in HDF5,
        /// </summary>
		[Required]
        [Description("The corresponding integer value. This value is used in HDF5 instead of the string value. The value of null integer value must be reserved for NULL. The size of this value is constrained by the size of the format used in HDF5,")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("Key", DataType="integer")]
        public string Key {
            get {
                return KeyField;
            } 
            set {
                KeyField = value;
                NotifyPropertyChanged("Key");
            }
        }

        private string KeyField; 

        /// <summary>
        /// A string value. Output from the lookup table.
        /// </summary>
		[Required]
        [Description("A string value. Output from the lookup table.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DoubleLookup xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DoubleLookup", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the DoubleLookup xsd type.")]
    public partial class DoubleLookup : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DoubleLookup class.
        /// </summary>
        public DoubleLookup() {}

        /// <summary>
        /// Initializes a new instance of the DoubleLookup class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public DoubleLookup(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Input to a table lookup.
        /// </summary>
		[Required]
        [Description("Input to a table lookup.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Key")]
        public double? Key {
            get {
                return KeyField;
            } 
            set {
                KeyField = value;
                NotifyPropertyChanged("Key");
            }
        }

        private double? KeyField; 

        /// <summary>
        /// Output from a table lookup.
        /// </summary>
		[Required]
        [Description("Output from a table lookup.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Value")]
        public double? Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double? ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractPropertyKind xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalPropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardPropertyKind))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractPropertyKind", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractPropertyKind xsd type.")]
    public abstract partial class AbstractPropertyKind : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LocalPropertyKind xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LocalPropertyKind", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the LocalPropertyKind xsd type.")]
    public partial class LocalPropertyKind : AbstractPropertyKind, INotifyPropertyChanged
    {

        /// <summary>
        /// LocalPropertyKind1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("LocalPropertyKind")]
        public DataObjectReference LocalPropertyKind1 {
            get {
                return LocalPropertyKind1Field;
            } 
            set {
                LocalPropertyKind1Field = value;
                NotifyPropertyChanged("LocalPropertyKind1");
            }
        }

        private DataObjectReference LocalPropertyKind1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StandardPropertyKind xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StandardPropertyKind", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the StandardPropertyKind xsd type.")]
    public partial class StandardPropertyKind : AbstractPropertyKind, INotifyPropertyChanged
    {

        /// <summary>
        /// Kind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlPropertyKind")]
		[XmlElement("Kind")]
        public ResqmlPropertyKind? Kind {
            get {
                return KindField;
            } 
            set {
                KindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        
        private bool KindSpecifiedField = false;
        
        /// <summary>
        /// KindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return KindSpecifiedField;
            } 
            set {
                KindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }
        
        private ResqmlPropertyKind? KindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PatchBoundaries xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PatchBoundaries", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the PatchBoundaries xsd type.")]
    public partial class PatchBoundaries : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A hole inside a representation patch. Inside the ring, the representation patch is not defined, outside it is. In case of contact, inner ring polyline representations should be typed as an erosion line, deposition line, or contact. BUSINESS RULE: Must be a polyline reference to a polyline representation, either a single polyline representation or a subrepresentation. Must be closed.
        /// </summary>
		[Description("A hole inside a representation patch. Inside the ring, the representation patch is not defined, outside it is.  In case of contact, inner ring polyline representations should be typed as an erosion line, deposition line, or contact.  BUSINESS RULE: Must be a polyline reference to a polyline representation, either a single polyline representation or a subrepresentation. Must be closed.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("InnerRing")]
        public List<DataObjectReference> InnerRing {
            get {
                return InnerRingField;
            } 
            set {
                InnerRingField = value;
                NotifyPropertyChanged("InnerRing");
            }
        }

         /// <summary>
         /// bool to indicate if InnerRing has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InnerRingSpecified
         {
             get {
             if(InnerRingField!=null)
                 return InnerRingField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> InnerRingField; 

        /// <summary>
        /// The extension of a representation patch. Inside the ring, the representation patch is defined, outside it is not. BUSINESS RULE: Must be a reference to a polyline, either a single polyline representation or a subrepresentation. Must be closed.
        /// </summary>
		[Description("The extension of a representation patch. Inside the ring, the representation patch is defined, outside it is not.  BUSINESS RULE: Must be a reference to a polyline, either a single polyline representation or a subrepresentation. Must be closed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("OuterRing")]
        public DataObjectReference OuterRing {
            get {
                return OuterRingField;
            } 
            set {
                OuterRingField = value;
                NotifyPropertyChanged("OuterRing");
            }
        }

        private DataObjectReference OuterRingField; 

        /// <summary>
        /// UUID of the referenced topological patch.
        /// </summary>
		[Required]
        [Description("UUID of the referenced topological patch.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("ReferencedPatch", DataType="nonNegativeInteger")]
        public string ReferencedPatch {
            get {
                return ReferencedPatchField;
            } 
            set {
                ReferencedPatchField = value;
                NotifyPropertyChanged("ReferencedPatch");
            }
        }

        private string ReferencedPatchField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellboreTrajectoryParentIntersection xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellboreTrajectoryParentIntersection", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the WellboreTrajectoryParentIntersection xsd type.")]
    public partial class WellboreTrajectoryParentIntersection : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// KickoffMd property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("KickoffMd")]
        public double? KickoffMD {
            get {
                return KickoffMdField;
            } 
            set {
                KickoffMdField = value;
                NotifyPropertyChanged("KickoffMD");
            }
        }

        private double? KickoffMdField; 

        /// <summary>
        /// ParentMd property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("ParentMd")]
        public double? ParentMD {
            get {
                return ParentMdField;
            } 
            set {
                ParentMdField = value;
                NotifyPropertyChanged("ParentMD");
            }
        }

        private double? ParentMdField; 

        /// <summary>
        /// ParentTrajectory property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ParentTrajectory")]
        public DataObjectReference ParentTrajectory {
            get {
                return ParentTrajectoryField;
            } 
            set {
                ParentTrajectoryField = value;
                NotifyPropertyChanged("ParentTrajectory");
            }
        }

        private DataObjectReference ParentTrajectoryField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PatchOfGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PatchOfGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the PatchOfGeometry xsd type.")]
    public partial class PatchOfGeometry : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RepresentationPatchIndex property
        /// </summary>
		[Description("Patch index for the geometry attachment, if required")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("RepresentationPatchIndex", DataType="nonNegativeInteger")]
        public string RepresentationPatchIndex {
            get {
                return RepresentationPatchIndexField;
            } 
            set {
                RepresentationPatchIndexField = value;
                NotifyPropertyChanged("RepresentationPatchIndex");
            }
        }

        private string RepresentationPatchIndexField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractGeometry")]
		[XmlElement("Geometry")]
        public AbstractGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private AbstractGeometry GeometryField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGeometry xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractParametricLineGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineFromRepresentationGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractPlaneGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TiltedPlaneGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizontalPlaneGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractGeometry xsd type.")]
    public abstract partial class AbstractGeometry : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// TimeIndex property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return TimeIndexField;
            } 
            set {
                TimeIndexField = value;
                NotifyPropertyChanged("TimeIndex");
            }
        }

        private TimeIndex TimeIndexField; 

        /// <summary>
        /// LocalCrs property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("LocalCrs")]
        public DataObjectReference LocalCrs {
            get {
                return LocalCrsField;
            } 
            set {
                LocalCrsField = value;
                NotifyPropertyChanged("LocalCrs");
            }
        }

        private DataObjectReference LocalCrsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractParametricLineGeometry xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineFromRepresentationGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ParametricLineGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractParametricLineGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractParametricLineGeometry xsd type.")]
    public abstract partial class AbstractParametricLineGeometry : AbstractGeometry, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ParametricLineFromRepresentationGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ParametricLineFromRepresentationGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ParametricLineFromRepresentationGeometry xsd type.")]
    public partial class ParametricLineFromRepresentationGeometry : AbstractParametricLineGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// LineIndiexOnSupportingRepresentation property
        /// </summary>
		[Required]
        [Description("The line index of the selected line in the supporting representation.  For a column-layer grid, the parametric lines follow the indexing of the pillars.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("LineIndiexOnSupportingRepresentation", DataType="nonNegativeInteger")]
        public string LineIndiexOnSupportingRepresentation {
            get {
                return LineIndiexOnSupportingRepresentationField;
            } 
            set {
                LineIndiexOnSupportingRepresentationField = value;
                NotifyPropertyChanged("LineIndiexOnSupportingRepresentation");
            }
        }

        private string LineIndiexOnSupportingRepresentationField; 

        /// <summary>
        /// SupportingRepresentation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SupportingRepresentation")]
        public DataObjectReference SupportingRepresentation {
            get {
                return SupportingRepresentationField;
            } 
            set {
                SupportingRepresentationField = value;
                NotifyPropertyChanged("SupportingRepresentation");
            }
        }

        private DataObjectReference SupportingRepresentationField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ParametricLineGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ParametricLineGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ParametricLineGeometry xsd type.")]
    public partial class ParametricLineGeometry : AbstractParametricLineGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// An optional array of explicit control point parameters for the control points on the parametric line. Used only if control point parameters are present. NOTES: (1) Vertical parametric lines do not require control point parameters. (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N. BUSINESS RULE: If present, the size must match the number of control points. BUSINESS RULE: For vertical and Z linear cubic parametric lines, this count must be zero. For all other parametric line kinds, each control point must have one control point parameter. BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line. This is an optional array which should only be used if control point parameters are present. BUSINESS RILE: If present, the size must match the number of control points. BUSINESS RULE: This count should be zero for vertical and Z linear cubic parametric lines. For all other parametric line kinds there should be one control point parameter for each control point. Notes: (1) Vertical parametric lines do not require control point parameters (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N. BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line.
        /// </summary>
		[Description("An optional array of explicit control point parameters for the control points on the parametric line. Used only if control point parameters are present.  NOTES: (1) Vertical parametric lines do not require control point parameters. (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: If present, the size must match the number of control points.  BUSINESS RULE: For vertical and Z linear cubic parametric lines, this count must be zero. For all other parametric line kinds, each control point must have one control point parameter.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line. This is an optional array which should only be used if control point parameters are present.  BUSINESS RILE: If present, the size must match the number of control points.  BUSINESS RULE: This count should be zero for vertical and Z linear cubic parametric lines. For all other parametric line kinds there should be one control point parameter for each control point.  Notes: (1) Vertical parametric lines do not require control point parameters (2) Z linear cubic splines have implicitly defined parameters. For a line with N intervals (N+1 control points), the parametric values are P=0,...,N.  BUSINESS RULE: The parametric values must be strictly monotonically increasing on each parametric line.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("ControlPointParameters")]
        public AbstractDoubleArray ControlPointParameters {
            get {
                return ControlPointParametersField;
            } 
            set {
                ControlPointParametersField = value;
                NotifyPropertyChanged("ControlPointParameters");
            }
        }

        private AbstractDoubleArray ControlPointParametersField; 

        /// <summary>
        /// An array of 3D points for the control points on the parametric line.
        /// </summary>
		[Required]
        [Description("An array of 3D points for the control points on the parametric line.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPoint3dArray")]
		[XmlElement("ControlPoints")]
        public AbstractPoint3dArray ControlPoints {
            get {
                return ControlPointsField;
            } 
            set {
                ControlPointsField = value;
                NotifyPropertyChanged("ControlPoints");
            }
        }

        private AbstractPoint3dArray ControlPointsField; 

        /// <summary>
        /// Number of spline knots in the parametric line.
        /// </summary>
		[Required]
        [Description("Number of spline knots in the parametric line.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("KnotCount", DataType="positiveInteger")]
        public string KnotCount {
            get {
                return KnotCountField;
            } 
            set {
                KnotCountField = value;
                NotifyPropertyChanged("KnotCount");
            }
        }

        private string KnotCountField; 

        /// <summary>
        /// Integer indicating the parametric line kind 0 for vertical 1 for linear spline 2 for natural cubic spline 3 for cubic spline 4 for z linear cubic spline 5 for minimum-curvature spline (-1) for null: no line
        /// </summary>
		[Required]
        [Description("Integer indicating the parametric line kind  0 for vertical 1 for linear spline 2 for natural cubic spline 3 for cubic spline 4 for z linear cubic spline 5 for minimum-curvature spline (-1) for null: no line")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("LineKindIndex", DataType="integer")]
        public string LineKindIndex {
            get {
                return LineKindIndexField;
            } 
            set {
                LineKindIndexField = value;
                NotifyPropertyChanged("LineKindIndex");
            }
        }

        private string LineKindIndexField; 

        /// <summary>
        /// An optional array of tangent vectors for each control point on the cubic and minimum-curvature parametric lines. Used only if tangent vectors are present. If a tangent vector is missing, then it is computed in the same fashion as for a natural cubic spline. Specifically, to obtain the tangent at internal knots, the control points are fit by a quadratic function with the two adjacent control points. At edge knots, the second derivative vanishes.
        /// </summary>
		[Description("An optional array of tangent vectors for each control point on the cubic and minimum-curvature parametric lines. Used only if tangent vectors are present.  If a tangent vector is missing, then it is computed in the same fashion as for a natural cubic spline. Specifically, to obtain the tangent at internal knots, the control points are fit by a quadratic function with the two adjacent control points. At edge knots, the second derivative vanishes.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPoint3dArray")]
		[XmlElement("TangentVectors")]
        public AbstractPoint3dArray TangentVectors {
            get {
                return TangentVectorsField;
            } 
            set {
                TangentVectorsField = value;
                NotifyPropertyChanged("TangentVectors");
            }
        }

        private AbstractPoint3dArray TangentVectorsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractPlaneGeometry xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TiltedPlaneGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizontalPlaneGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractPlaneGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractPlaneGeometry xsd type.")]
    public abstract partial class AbstractPlaneGeometry : AbstractGeometry, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TiltedPlaneGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TiltedPlaneGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the TiltedPlaneGeometry xsd type.")]
    public partial class TiltedPlaneGeometry : AbstractPlaneGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// Plane property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ThreePoint3d")]
		[XmlArrayItem("ThreePoint3d")]
        [XmlArray("Plane")]
        public List<List<Point3d>> Plane {
            get {
                return PlaneField;
            } 
            set {
                PlaneField = value;
                NotifyPropertyChanged("Plane");
            }
        }

         /// <summary>
         /// bool to indicate if Plane has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PlaneSpecified
         {
             get {
             if(PlaneField!=null)
                 return PlaneField.Count>0?true:false;
             else return false;
             }
         }
        private List<List<Point3d>> PlaneField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the HorizontalPlaneGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="HorizontalPlaneGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the HorizontalPlaneGeometry xsd type.")]
    public partial class HorizontalPlaneGeometry : AbstractPlaneGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// Coordinate property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("Coordinate")]
        public double? Coordinate {
            get {
                return CoordinateField;
            } 
            set {
                CoordinateField = value;
                NotifyPropertyChanged("Coordinate");
            }
        }

        private double? CoordinateField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PointGeometry xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PointGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the PointGeometry xsd type.")]
    public partial class PointGeometry : AbstractGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// Points property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPoint3dArray")]
		[XmlElement("Points")]
        public AbstractPoint3dArray Points {
            get {
                return PointsField;
            } 
            set {
                PointsField = value;
                NotifyPropertyChanged("Points");
            }
        }

        private AbstractPoint3dArray PointsField; 

        /// <summary>
        /// SeismicCoordinates property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractSeismicCoordinates")]
		[XmlElement("SeismicCoordinates")]
        public AbstractSeismicCoordinates SeismicCoordinates {
            get {
                return SeismicCoordinatesField;
            } 
            set {
                SeismicCoordinatesField = value;
                NotifyPropertyChanged("SeismicCoordinates");
            }
        }

        private AbstractSeismicCoordinates SeismicCoordinatesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractSeismicCoordinates xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Seismic2dCoordinates))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Seismic3dCoordinates))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractSeismicCoordinates", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractSeismicCoordinates xsd type.")]
    public abstract partial class AbstractSeismicCoordinates : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SeismicSupport property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SeismicSupport")]
        public DataObjectReference SeismicSupport {
            get {
                return SeismicSupportField;
            } 
            set {
                SeismicSupportField = value;
                NotifyPropertyChanged("SeismicSupport");
            }
        }

        private DataObjectReference SeismicSupportField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Seismic2dCoordinates xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Seismic2dCoordinates", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Seismic2dCoordinates xsd type.")]
    public partial class Seismic2dCoordinates : AbstractSeismicCoordinates, INotifyPropertyChanged
    {

        /// <summary>
        /// The sequence of trace or inter-trace positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.
        /// </summary>
		[Required]
        [Description("The sequence of trace or inter-trace positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("LineAbscissa")]
        public AbstractDoubleArray LineAbscissa {
            get {
                return LineAbscissaField;
            } 
            set {
                LineAbscissaField = value;
                NotifyPropertyChanged("LineAbscissa");
            }
        }

        private AbstractDoubleArray LineAbscissaField; 

        /// <summary>
        /// The sequence of vertical sample or inter-sample positions that correspond to the geometry coordinates. BUSINESS RULE: Sequence must be in the same order than previous one.
        /// </summary>
		[Description("The sequence of vertical sample or inter-sample positions that correspond to the geometry coordinates. BUSINESS RULE: Sequence must be in the same order than previous one.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("VerticalCoordinates")]
        public AbstractDoubleArray VerticalCoordinates {
            get {
                return VerticalCoordinatesField;
            } 
            set {
                VerticalCoordinatesField = value;
                NotifyPropertyChanged("VerticalCoordinates");
            }
        }

        private AbstractDoubleArray VerticalCoordinatesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Seismic3dCoordinates xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Seismic3dCoordinates", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Seismic3dCoordinates xsd type.")]
    public partial class Seismic3dCoordinates : AbstractSeismicCoordinates, INotifyPropertyChanged
    {

        /// <summary>
        /// The sequence of trace or inter-trace crossline positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.
        /// </summary>
		[Required]
        [Description("The sequence of trace or inter-trace crossline positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("CrosslineCoordinates")]
        public AbstractDoubleArray CrosslineCoordinates {
            get {
                return CrosslineCoordinatesField;
            } 
            set {
                CrosslineCoordinatesField = value;
                NotifyPropertyChanged("CrosslineCoordinates");
            }
        }

        private AbstractDoubleArray CrosslineCoordinatesField; 

        /// <summary>
        /// The sequence of trace or inter-trace inline positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.
        /// </summary>
		[Required]
        [Description("The sequence of trace or inter-trace inline positions that correspond to the geometry coordinates. BUSINESS RULE: Both sequences must be in the same order.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("InlineCoordinates")]
        public AbstractDoubleArray InlineCoordinates {
            get {
                return InlineCoordinatesField;
            } 
            set {
                InlineCoordinatesField = value;
                NotifyPropertyChanged("InlineCoordinates");
            }
        }

        private AbstractDoubleArray InlineCoordinatesField; 

        /// <summary>
        /// The sequence of vertical sample or inter-sample positions that correspond to the geometry coordinates. BUSINESS RULE: Sequence must be in the same order than two previous ones.
        /// </summary>
		[Description("The sequence of vertical sample or inter-sample positions that correspond to the geometry coordinates. BUSINESS RULE: Sequence must be in the same order than two previous ones.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("VerticalCoordinates")]
        public AbstractDoubleArray VerticalCoordinates {
            get {
                return VerticalCoordinatesField;
            } 
            set {
                VerticalCoordinatesField = value;
                NotifyPropertyChanged("VerticalCoordinates");
            }
        }

        private AbstractDoubleArray VerticalCoordinatesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGridGeometry xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGridGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractGridGeometry xsd type.")]
    public abstract partial class AbstractGridGeometry : PointGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// AdditionalGridPoints property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AdditionalGridPoints")]
		[XmlElement("AdditionalGridPoints")]
        public List<AdditionalGridPoints> AdditionalGridPoints {
            get {
                return AdditionalGridPointsField;
            } 
            set {
                AdditionalGridPointsField = value;
                NotifyPropertyChanged("AdditionalGridPoints");
            }
        }

         /// <summary>
         /// bool to indicate if AdditionalGridPoints has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AdditionalGridPointsSpecified
         {
             get {
             if(AdditionalGridPointsField!=null)
                 return AdditionalGridPointsField.Count>0?true:false;
             else return false;
             }
         }
        private List<AdditionalGridPoints> AdditionalGridPointsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AdditionalGridPoints xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AdditionalGridPoints", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AdditionalGridPoints xsd type.")]
    public partial class AdditionalGridPoints : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// RepresentationPatchIndex property
        /// </summary>
		[Description("Used to remove ambiguity in geometry attachment, if the attachment element is not sufficient. Usually required for subnodes and for the general purpose grid, but not otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("RepresentationPatchIndex", DataType="nonNegativeInteger")]
        public string RepresentationPatchIndex {
            get {
                return RepresentationPatchIndexField;
            } 
            set {
                RepresentationPatchIndexField = value;
                NotifyPropertyChanged("RepresentationPatchIndex");
            }
        }

        private string RepresentationPatchIndexField; 

        /// <summary>
        /// Attachment property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "GridGeometryAttachment")]
		[XmlElement("Attachment")]
        public GridGeometryAttachment? Attachment {
            get {
                return AttachmentField;
            } 
            set {
                AttachmentField = value;
                 this.AttachmentSpecified = true;
                NotifyPropertyChanged("Attachment");
            }
        }

        
        private bool AttachmentSpecifiedField = false;
        
        /// <summary>
        /// AttachmentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AttachmentSpecified {
            get {
                return AttachmentSpecifiedField;
            } 
            set {
                AttachmentSpecifiedField = value;
                NotifyPropertyChanged("AttachmentSpecified");
            }
        }
        
        private GridGeometryAttachment? AttachmentField; 

        /// <summary>
        /// Points property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPoint3dArray")]
		[XmlElement("Points")]
        public AbstractPoint3dArray Points {
            get {
                return PointsField;
            } 
            set {
                PointsField = value;
                NotifyPropertyChanged("Points");
            }
        }

        private AbstractPoint3dArray PointsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractColumnLayerGridGeometry xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridGeometry))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridGeometry))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractColumnLayerGridGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractColumnLayerGridGeometry xsd type.")]
    public abstract partial class AbstractColumnLayerGridGeometry : AbstractGridGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// KDirection property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "KDirection")]
		[XmlElement("KDirection")]
        public KDirection? KDirection {
            get {
                return KDirectionField;
            } 
            set {
                KDirectionField = value;
                 this.KDirectionSpecified = true;
                NotifyPropertyChanged("KDirection");
            }
        }

        
        private bool KDirectionSpecifiedField = false;
        
        /// <summary>
        /// KDirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KDirectionSpecified {
            get {
                return KDirectionSpecifiedField;
            } 
            set {
                KDirectionSpecifiedField = value;
                NotifyPropertyChanged("KDirectionSpecified");
            }
        }
        
        private KDirection? KDirectionField; 

        /// <summary>
        /// PillarGeometryIsDefined property
        /// </summary>
		[Required]
        [Description("Indicator that a pillar has at least one node with a defined cell geometry. This is considered grid meta-data. If the indicator does not indicate that the pillar geometry is defined, then this over-rides any other node geometry specification.  Array index follows #Pillars and so may be either 2d or 1d.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("PillarGeometryIsDefined")]
        public AbstractBooleanArray PillarGeometryIsDefined {
            get {
                return PillarGeometryIsDefinedField;
            } 
            set {
                PillarGeometryIsDefinedField = value;
                NotifyPropertyChanged("PillarGeometryIsDefined");
            }
        }

        private AbstractBooleanArray PillarGeometryIsDefinedField; 

        /// <summary>
        /// PillarShape property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PillarShape")]
		[XmlElement("PillarShape")]
        public PillarShape? PillarShape {
            get {
                return PillarShapeField;
            } 
            set {
                PillarShapeField = value;
                 this.PillarShapeSpecified = true;
                NotifyPropertyChanged("PillarShape");
            }
        }

        
        private bool PillarShapeSpecifiedField = false;
        
        /// <summary>
        /// PillarShapeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PillarShapeSpecified {
            get {
                return PillarShapeSpecifiedField;
            } 
            set {
                PillarShapeSpecifiedField = value;
                NotifyPropertyChanged("PillarShapeSpecified");
            }
        }
        
        private PillarShape? PillarShapeField; 

        /// <summary>
        /// CellGeometryIsDefined property
        /// </summary>
		[Description("Indicator that a cell has a defined geometry. This attribute is grid metadata. If the indicator shows that the cell geometry is NOT defined, then this attribute overrides any other node geometry specification.  Array index is 2D/3D.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("CellGeometryIsDefined")]
        public AbstractBooleanArray CellGeometryIsDefined {
            get {
                return CellGeometryIsDefinedField;
            } 
            set {
                CellGeometryIsDefinedField = value;
                NotifyPropertyChanged("CellGeometryIsDefined");
            }
        }

        private AbstractBooleanArray CellGeometryIsDefinedField; 

        /// <summary>
        /// NodeIsColocatedInKDirection property
        /// </summary>
		[Description("Optional indicator that two adjacent nodes on a coordinate line are colocated. This is considered grid meta-data, and is intended to over-ride any geometric comparison of node locations.  Array index follows #CoordinateLines x (NKL-1).")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("NodeIsColocatedInKDirection")]
        public AbstractBooleanArray NodeIsColocatedInKDirection {
            get {
                return NodeIsColocatedInKDirectionField;
            } 
            set {
                NodeIsColocatedInKDirectionField = value;
                NotifyPropertyChanged("NodeIsColocatedInKDirection");
            }
        }

        private AbstractBooleanArray NodeIsColocatedInKDirectionField; 

        /// <summary>
        /// NodeIsColocatedOnKEdge property
        /// </summary>
		[Description("Optional indicator that two adjacent nodes on the KEDGE of a cell are colocated. This is considered grid meta-data, and is intended to over-ride any geometric comparison of node locations.  Array index follows #EdgesPerColumn x NKL for unstructured column layer grids and 4 x NI x NJ x NKL for IJK grids.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("NodeIsColocatedOnKEdge")]
        public AbstractBooleanArray NodeIsColocatedOnKEdge {
            get {
                return NodeIsColocatedOnKEdgeField;
            } 
            set {
                NodeIsColocatedOnKEdgeField = value;
                NotifyPropertyChanged("NodeIsColocatedOnKEdge");
            }
        }

        private AbstractBooleanArray NodeIsColocatedOnKEdgeField; 

        /// <summary>
        /// SubnodeTopology property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ColumnLayerSubnodeTopology")]
		[XmlElement("SubnodeTopology")]
        public ColumnLayerSubnodeTopology SubnodeTopology {
            get {
                return SubnodeTopologyField;
            } 
            set {
                SubnodeTopologyField = value;
                NotifyPropertyChanged("SubnodeTopology");
            }
        }

        private ColumnLayerSubnodeTopology SubnodeTopologyField; 

        /// <summary>
        /// SplitCoordinateLines property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ColumnLayerSplitCoordinateLines")]
		[XmlElement("SplitCoordinateLines")]
        public ColumnLayerSplitCoordinateLines SplitCoordinateLines {
            get {
                return SplitCoordinateLinesField;
            } 
            set {
                SplitCoordinateLinesField = value;
                NotifyPropertyChanged("SplitCoordinateLines");
            }
        }

        private ColumnLayerSplitCoordinateLines SplitCoordinateLinesField; 

        /// <summary>
        /// SplitNodes property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SplitNodePatch")]
		[XmlElement("SplitNodes")]
        public SplitNodePatch SplitNodes {
            get {
                return SplitNodesField;
            } 
            set {
                SplitNodesField = value;
                NotifyPropertyChanged("SplitNodes");
            }
        }

        private SplitNodePatch SplitNodesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ColumnLayerSubnodeTopology xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ColumnLayerSubnodeTopology", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ColumnLayerSubnodeTopology xsd type.")]
    public partial class ColumnLayerSubnodeTopology : SubnodeTopology, INotifyPropertyChanged
    {

        /// <summary>
        /// ColumnSubnodes property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ColumnSubnodePatch")]
		[XmlElement("ColumnSubnodes")]
        public List<ColumnSubnodePatch> ColumnSubnodes {
            get {
                return ColumnSubnodesField;
            } 
            set {
                ColumnSubnodesField = value;
                NotifyPropertyChanged("ColumnSubnodes");
            }
        }

         /// <summary>
         /// bool to indicate if ColumnSubnodes has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ColumnSubnodesSpecified
         {
             get {
             if(ColumnSubnodesField!=null)
                 return ColumnSubnodesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ColumnSubnodePatch> ColumnSubnodesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ColumnSubnodePatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ColumnSubnodePatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ColumnSubnodePatch xsd type.")]
    public partial class ColumnSubnodePatch : SubnodePatch, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of subnodes per object, with a different number in each column of the grid.
        /// </summary>
		[Required]
        [Description("Number of subnodes per object, with a different number in each column of the grid.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("SubnodeCountPerObject")]
        public AbstractIntegerArray SubnodeCountPerObject {
            get {
                return SubnodeCountPerObjectField;
            } 
            set {
                SubnodeCountPerObjectField = value;
                NotifyPropertyChanged("SubnodeCountPerObject");
            }
        }

        private AbstractIntegerArray SubnodeCountPerObjectField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SubnodePatch xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VariableSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UniformSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ColumnSubnodePatch))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SubnodePatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the SubnodePatch xsd type.")]
    public partial class SubnodePatch : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// SubnodeNodeObject property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "SubnodeNodeObject")]
		[XmlElement("SubnodeNodeObject")]
        public SubnodeNodeObject? SubnodeNodeObject {
            get {
                return SubnodeNodeObjectField;
            } 
            set {
                SubnodeNodeObjectField = value;
                 this.SubnodeNodeObjectSpecified = true;
                NotifyPropertyChanged("SubnodeNodeObject");
            }
        }

        
        private bool SubnodeNodeObjectSpecifiedField = false;
        
        /// <summary>
        /// SubnodeNodeObjectSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubnodeNodeObjectSpecified {
            get {
                return SubnodeNodeObjectSpecifiedField;
            } 
            set {
                SubnodeNodeObjectSpecifiedField = value;
                NotifyPropertyChanged("SubnodeNodeObjectSpecified");
            }
        }
        
        private SubnodeNodeObject? SubnodeNodeObjectField; 

        /// <summary>
        /// Node weights for each subnode. Count of nodes per subnode is known for each specific subnode construction. Data order consists of all the nodes for each subnode in turn. For example, if uniform and stored as a multi-dimensional array, the node index cycles first. BUSINESS RULE: Weights must be non-negative. BUSINESS RULE: Length of array must be consistent with the sum of nodeCount x subnodeCount per object, e.g., for 3 subnodes per edge (uniform), there are 6 weights.
        /// </summary>
		[Required]
        [Description("Node weights for each subnode. Count of nodes per subnode is known for each specific subnode construction.  Data order consists of all the nodes for each subnode in turn. For example, if uniform and stored as a multi-dimensional array, the node index cycles first.  BUSINESS RULE: Weights must be non-negative.  BUSINESS RULE: Length of array must be consistent with the sum of nodeCount x subnodeCount per object, e.g., for 3 subnodes per edge (uniform), there are 6 weights.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractValueArray")]
		[XmlElement("NodeWeightsPerSubnode")]
        public AbstractValueArray NodeWeightsPerSubnode {
            get {
                return NodeWeightsPerSubnodeField;
            } 
            set {
                NodeWeightsPerSubnodeField = value;
                NotifyPropertyChanged("NodeWeightsPerSubnode");
            }
        }

        private AbstractValueArray NodeWeightsPerSubnodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Patch xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineSetPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Patch1d))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TrianglePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EdgePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubRepresentationPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridIjkGridPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridUnstructuredGridPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncationCellPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VariableSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UniformSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ColumnSubnodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridUnstructuredColumnLayerGridPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SplitNodePatch))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Patch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Patch xsd type.")]
    public partial class Patch : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Local index of the patch, making it unique within the representation.
        /// </summary>
		[Required]
        [Description("Local index of the patch, making it unique within the representation.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("PatchIndex", DataType="nonNegativeInteger")]
        public string PatchIndex {
            get {
                return PatchIndexField;
            } 
            set {
                PatchIndexField = value;
                NotifyPropertyChanged("PatchIndex");
            }
        }

        private string PatchIndexField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PolylineSetPatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PolylineSetPatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the PolylineSetPatch xsd type.")]
    public partial class PolylineSetPatch : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// ClosedPolylines property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("ClosedPolylines")]
        public AbstractBooleanArray ClosedPolylines {
            get {
                return ClosedPolylinesField;
            } 
            set {
                ClosedPolylinesField = value;
                NotifyPropertyChanged("ClosedPolylines");
            }
        }

        private AbstractBooleanArray ClosedPolylinesField; 

        /// <summary>
        /// NodeCountPerPolyline property
        /// </summary>
		[Required]
        [Description("The first number in the list defines the node count for the first polyline in the polyline set patch. The second number in the list defines the node count for the second polyline in the polyline set patch. etc.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("NodeCountPerPolyline")]
        public AbstractIntegerArray NodeCountPerPolyline {
            get {
                return NodeCountPerPolylineField;
            } 
            set {
                NodeCountPerPolylineField = value;
                NotifyPropertyChanged("NodeCountPerPolyline");
            }
        }

        private AbstractIntegerArray NodeCountPerPolylineField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PointGeometry")]
		[XmlElement("Geometry")]
        public PointGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private PointGeometry GeometryField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Grid2dPatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Grid2dPatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Grid2dPatch xsd type.")]
    public partial class Grid2dPatch : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// FastestAxisCount property
        /// </summary>
		[Required]
        [Description("The number of nodes in the fastest direction.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("FastestAxisCount", DataType="positiveInteger")]
        public string FastestAxisCount {
            get {
                return FastestAxisCountField;
            } 
            set {
                FastestAxisCountField = value;
                NotifyPropertyChanged("FastestAxisCount");
            }
        }

        private string FastestAxisCountField; 

        /// <summary>
        /// SlowestAxisCount property
        /// </summary>
		[Required]
        [Description("The number of nodes in the slowest direction.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("SlowestAxisCount", DataType="positiveInteger")]
        public string SlowestAxisCount {
            get {
                return SlowestAxisCountField;
            } 
            set {
                SlowestAxisCountField = value;
                NotifyPropertyChanged("SlowestAxisCount");
            }
        }

        private string SlowestAxisCountField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PointGeometry")]
		[XmlElement("Geometry")]
        public PointGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private PointGeometry GeometryField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Patch1d xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TrianglePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NodePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EdgePatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactPatch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubRepresentationPatch))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Patch1d", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Patch1d xsd type.")]
    public partial class Patch1d : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of items in the patch.
        /// </summary>
		[Required]
        [Description("Number of items in the patch.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TrianglePatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TrianglePatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the TrianglePatch xsd type.")]
    public partial class TrianglePatch : Patch1d, INotifyPropertyChanged
    {

        /// <summary>
        /// NodeCount property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("NodeCount", DataType="nonNegativeInteger")]
        public string NodeCount {
            get {
                return NodeCountField;
            } 
            set {
                NodeCountField = value;
                NotifyPropertyChanged("NodeCount");
            }
        }

        private string NodeCountField; 

        /// <summary>
        /// Triangles property
        /// </summary>
		[Required]
        [Description("The triangles are a 2D array of non-negative integers with the   dimensions 3 x numTriangles.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("Triangles")]
        public AbstractIntegerArray Triangles {
            get {
                return TrianglesField;
            } 
            set {
                TrianglesField = value;
                NotifyPropertyChanged("Triangles");
            }
        }

        private AbstractIntegerArray TrianglesField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PointGeometry")]
		[XmlElement("Geometry")]
        public PointGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private PointGeometry GeometryField; 

        /// <summary>
        /// SplitEdgePatch property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EdgePatch")]
		[XmlElement("SplitEdgePatch")]
        public List<EdgePatch> SplitEdgePatch {
            get {
                return SplitEdgePatchField;
            } 
            set {
                SplitEdgePatchField = value;
                NotifyPropertyChanged("SplitEdgePatch");
            }
        }

         /// <summary>
         /// bool to indicate if SplitEdgePatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SplitEdgePatchSpecified
         {
             get {
             if(SplitEdgePatchField!=null)
                 return SplitEdgePatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<EdgePatch> SplitEdgePatchField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EdgePatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EdgePatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the EdgePatch xsd type.")]
    public partial class EdgePatch : Patch1d, INotifyPropertyChanged
    {

        /// <summary>
        /// An array of split edges to define patches. It points to an HDF5 dataset, which must be a 2D array of non-negative integers with dimensions 2 x numSplitEdges. integers with dimensions {2, numSplitEdges}
        /// </summary>
		[Description("An array of split edges to define patches. It points to an HDF5 dataset, which must be a 2D array of non-negative integers with dimensions 2 x numSplitEdges. integers with dimensions {2, numSplitEdges}")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("SplitEdges")]
        public AbstractIntegerArray SplitEdges {
            get {
                return SplitEdgesField;
            } 
            set {
                SplitEdgesField = value;
                NotifyPropertyChanged("SplitEdges");
            }
        }

        private AbstractIntegerArray SplitEdgesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NodePatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NodePatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the NodePatch xsd type.")]
    public partial class NodePatch : Patch1d, INotifyPropertyChanged
    {

        /// <summary>
        /// Geometry property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PointGeometry")]
		[XmlElement("Geometry")]
        public PointGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private PointGeometry GeometryField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ContactPatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ContactPatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ContactPatch xsd type.")]
    public partial class ContactPatch : Patch1d, INotifyPropertyChanged
    {

        /// <summary>
        /// Identifies a representation by its index, in the list of representations contained in the organization.
        /// </summary>
		[Required]
        [Description("Identifies a representation by its index, in the list of representations contained in the organization.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("RepresentationIndex", DataType="nonNegativeInteger")]
        public string RepresentationIndex {
            get {
                return RepresentationIndexField;
            } 
            set {
                RepresentationIndexField = value;
                NotifyPropertyChanged("RepresentationIndex");
            }
        }

        private string RepresentationIndexField; 

        /// <summary>
        /// The ordered list of nodes (identified by their global index) in the supporting representation, which constitutes the contact patch.
        /// </summary>
		[Required]
        [Description("The ordered list of nodes (identified by their global index) in the supporting representation, which constitutes the contact patch.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("SupportingRepresentationNodes")]
        public AbstractIntegerArray SupportingRepresentationNodes {
            get {
                return SupportingRepresentationNodesField;
            } 
            set {
                SupportingRepresentationNodesField = value;
                NotifyPropertyChanged("SupportingRepresentationNodes");
            }
        }

        private AbstractIntegerArray SupportingRepresentationNodesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SubRepresentationPatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SubRepresentationPatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the SubRepresentationPatch xsd type.")]
    public partial class SubRepresentationPatch : Patch1d, INotifyPropertyChanged
    {

        /// <summary>
        /// ElementIndices property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ElementIndices")]
		[XmlElement("ElementIndices")]
        public List<ElementIndices> ElementIndices {
            get {
                return ElementIndicesField;
            } 
            set {
                ElementIndicesField = value;
                NotifyPropertyChanged("ElementIndices");
            }
        }

         /// <summary>
         /// bool to indicate if ElementIndices has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ElementIndicesSpecified
         {
             get {
             if(ElementIndicesField!=null)
                 return ElementIndicesField.Count>0?true:false;
             else return false;
             }
         }
        private List<ElementIndices> ElementIndicesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElementIndices xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElementIndices", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ElementIndices xsd type.")]
    public partial class ElementIndices : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// IndexableElement property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IndexableElements")]
		[XmlElement("IndexableElement")]
        public IndexableElements? IndexableElement {
            get {
                return IndexableElementField;
            } 
            set {
                IndexableElementField = value;
                 this.IndexableElementSpecified = true;
                NotifyPropertyChanged("IndexableElement");
            }
        }

        
        private bool IndexableElementSpecifiedField = false;
        
        /// <summary>
        /// IndexableElementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexableElementSpecified {
            get {
                return IndexableElementSpecifiedField;
            } 
            set {
                IndexableElementSpecifiedField = value;
                NotifyPropertyChanged("IndexableElementSpecified");
            }
        }
        
        private IndexableElements? IndexableElementField; 

        /// <summary>
        /// Indices property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("Indices")]
        public AbstractIntegerArray Indices {
            get {
                return IndicesField;
            } 
            set {
                IndicesField = value;
                NotifyPropertyChanged("Indices");
            }
        }

        private AbstractIntegerArray IndicesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GpGridIjkGridPatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GpGridIjkGridPatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the GpGridIjkGridPatch xsd type.")]
    public partial class GpGridIjkGridPatch : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// Ni property
        /// </summary>
		[Required]
        [Description("Count of I indices. Degenerate case (ni=0) is allowed for GPGrid representations.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Ni", DataType="nonNegativeInteger")]
        public string Ni {
            get {
                return NiField;
            } 
            set {
                NiField = value;
                NotifyPropertyChanged("Ni");
            }
        }

        private string NiField; 

        /// <summary>
        /// Nj property
        /// </summary>
		[Required]
        [Description("Count of J indices. Degenerate case (nj=0) is allowed for GPGrid representations.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Nj", DataType="nonNegativeInteger")]
        public string Nj {
            get {
                return NjField;
            } 
            set {
                NjField = value;
                NotifyPropertyChanged("Nj");
            }
        }

        private string NjField; 

        /// <summary>
        /// RadialGridIsComplete property
        /// </summary>
		[Description("TRUE if the grid is periodic in J, i.e., has the topology of a complete 360 degree circle.  If TRUE, then NJL=NJ. Otherwise, NJL=NJ+1")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("RadialGridIsComplete")]
        public bool? RadialGridIsComplete {
            get {
                return RadialGridIsCompleteField;
            } 
            set {
                RadialGridIsCompleteField = value;
                 this.RadialGridIsCompleteSpecified = true;
                NotifyPropertyChanged("RadialGridIsComplete");
            }
        }

        private bool? RadialGridIsCompleteField; 

        /// <summary>
        /// RadialGridIsCompleteSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RadialGridIsCompleteSpecified {
            get {
                return RadialGridIsCompleteSpecifiedField;
            } 
            set {
                RadialGridIsCompleteSpecifiedField = value;
                NotifyPropertyChanged("RadialGridIsCompleteSpecified");
            }
        }

        private bool RadialGridIsCompleteSpecifiedField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IjkGridGeometry")]
		[XmlElement("Geometry")]
        public IjkGridGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private IjkGridGeometry GeometryField; 

        /// <summary>
        /// TruncationCells property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TruncationCellPatch")]
		[XmlElement("TruncationCells")]
        public TruncationCellPatch TruncationCells {
            get {
                return TruncationCellsField;
            } 
            set {
                TruncationCellsField = value;
                NotifyPropertyChanged("TruncationCells");
            }
        }

        private TruncationCellPatch TruncationCellsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IjkGridGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IjkGridGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IjkGridGeometry xsd type.")]
    public partial class IjkGridGeometry : AbstractColumnLayerGridGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// GridIsRighthanded property
        /// </summary>
		[Required]
        [Description("Indicates that the IJK grid is right handed, as determined by the triple product of tangent vectors in the I, J, and K directions.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("GridIsRighthanded")]
        public bool? GridIsRighthanded {
            get {
                return GridIsRighthandedField;
            } 
            set {
                GridIsRighthandedField = value;
                NotifyPropertyChanged("GridIsRighthanded");
            }
        }

        private bool? GridIsRighthandedField; 

        /// <summary>
        /// IjGaps property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IjGaps")]
		[XmlElement("IjGaps")]
        public IjGaps IjGaps {
            get {
                return IjGapsField;
            } 
            set {
                IjGapsField = value;
                NotifyPropertyChanged("IjGaps");
            }
        }

        private IjGaps IjGapsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IjGaps xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IjGaps", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IjGaps xsd type.")]
    public partial class IjGaps : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SplitPillarCount property
        /// </summary>
		[Description("Number of split pillars in the model. Count must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("SplitPillarCount", DataType="positiveInteger")]
        public string SplitPillarCount {
            get {
                return SplitPillarCountField;
            } 
            set {
                SplitPillarCountField = value;
                NotifyPropertyChanged("SplitPillarCount");
            }
        }

        private string SplitPillarCountField; 

        /// <summary>
        /// ParentPillarIndices property
        /// </summary>
		[Description("Parent pillar index for each of the split pillars. This information is used to infer the grid cell geometry.  BUSINESS RULE: Array length must match splitPillarCount.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParentPillarIndices")]
        public AbstractIntegerArray ParentPillarIndices {
            get {
                return ParentPillarIndicesField;
            } 
            set {
                ParentPillarIndicesField = value;
                NotifyPropertyChanged("ParentPillarIndices");
            }
        }

        private AbstractIntegerArray ParentPillarIndicesField; 

        /// <summary>
        /// ColumnsPerSplitPillar property
        /// </summary>
		[Description("List of columns for each of the split pillars. This information is used to infer the grid cell geometry.  BUSINESS RULE: The length of the first list-of-lists array must match the splitPillarCount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("ColumnsPerSplitPillar")]
        public ResqmlJaggedArray ColumnsPerSplitPillar {
            get {
                return ColumnsPerSplitPillarField;
            } 
            set {
                ColumnsPerSplitPillarField = value;
                NotifyPropertyChanged("ColumnsPerSplitPillar");
            }
        }

        private ResqmlJaggedArray ColumnsPerSplitPillarField; 

        /// <summary>
        /// IjSplitColumnEdges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IjSplitColumnEdges")]
		[XmlElement("IjSplitColumnEdges")]
        public IjSplitColumnEdges IjSplitColumnEdges {
            get {
                return IjSplitColumnEdgesField;
            } 
            set {
                IjSplitColumnEdgesField = value;
                NotifyPropertyChanged("IjSplitColumnEdges");
            }
        }

        private IjSplitColumnEdges IjSplitColumnEdgesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ResqmlJaggedArray xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ResqmlJaggedArray", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ResqmlJaggedArray xsd type.")]
    public partial class ResqmlJaggedArray : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// 1D array of elements containing the aggregation of individual array data.
        /// </summary>
		[Required]
        [Description("1D array of elements containing the aggregation of individual array data.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractValueArray")]
		[XmlElement("Elements")]
        public AbstractValueArray Elements {
            get {
                return ElementsField;
            } 
            set {
                ElementsField = value;
                NotifyPropertyChanged("Elements");
            }
        }

        private AbstractValueArray ElementsField; 

        /// <summary>
        /// 1D array of cumulative lengths to the end of the current array. This is also equal to the index of the next element, i.e., the index in the elements array, for which the current variable length array begins.
        /// </summary>
		[Required]
        [Description("1D array of cumulative lengths to the end of the current array. This is also equal to the index of the next element, i.e., the index in the elements array, for which the current variable length array begins.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("CumulativeLength")]
        public AbstractIntegerArray CumulativeLength {
            get {
                return CumulativeLengthField;
            } 
            set {
                CumulativeLengthField = value;
                NotifyPropertyChanged("CumulativeLength");
            }
        }

        private AbstractIntegerArray CumulativeLengthField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IjSplitColumnEdges xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IjSplitColumnEdges", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IjSplitColumnEdges xsd type.")]
    public partial class IjSplitColumnEdges : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of IJ split column edges in this grid. Must be positive.
        /// </summary>
		[Required]
        [Description("Number of IJ split column edges in this grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Definition of the split column edges in terms of the pillars per split column edge. Pillar count per edge is usually 2, but the list-of-lists construction is used to allow split column edges to be defined by more than 2 pillars.
        /// </summary>
		[Required]
        [Description("Definition of the split column edges in terms of the pillars per split column edge. Pillar count per edge is usually 2, but the list-of-lists construction is used to allow split column edges to be defined by more than 2 pillars.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("PillarsPerSplitColumnEdge")]
        public ResqmlJaggedArray PillarsPerSplitColumnEdge {
            get {
                return PillarsPerSplitColumnEdgeField;
            } 
            set {
                PillarsPerSplitColumnEdgeField = value;
                NotifyPropertyChanged("PillarsPerSplitColumnEdge");
            }
        }

        private ResqmlJaggedArray PillarsPerSplitColumnEdgeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TruncationCellPatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TruncationCellPatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the TruncationCellPatch xsd type.")]
    public partial class TruncationCellPatch : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of additional nodes required for the truncation construction. Must be positive. Uses a separate enumeration and does not increase the number of nodes, except as noted below.
        /// </summary>
		[Required]
        [Description("Number of additional nodes required for the truncation construction. Must be positive. Uses a separate enumeration and does not increase the number of nodes, except as noted below.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("TruncationNodeCount", DataType="positiveInteger")]
        public string TruncationNodeCount {
            get {
                return TruncationNodeCountField;
            } 
            set {
                TruncationNodeCountField = value;
                NotifyPropertyChanged("TruncationNodeCount");
            }
        }

        private string TruncationNodeCountField; 

        /// <summary>
        /// Number of additional faces required for the split and truncation construction. The construction does not modify existing face definitions, but instead uses these new faces to redefine the truncated cell geometry. Must be positive. These faces are added to the enumeration of faces for the grid
        /// </summary>
		[Required]
        [Description("Number of additional faces required for the split and truncation construction. The construction does not modify existing face definitions, but instead uses these new faces to redefine the truncated cell geometry. Must be positive.  These faces are added to the enumeration of faces for the grid")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("TruncationFaceCount", DataType="positiveInteger")]
        public string TruncationFaceCount {
            get {
                return TruncationFaceCountField;
            } 
            set {
                TruncationFaceCountField = value;
                NotifyPropertyChanged("TruncationFaceCount");
            }
        }

        private string TruncationFaceCountField; 

        /// <summary>
        /// Number of polyhedral cells created by truncation. Must be positive. Note: Parent cells are replace
        /// </summary>
		[Required]
        [Description("Number of polyhedral cells created by truncation. Must be positive. Note: Parent cells are replace")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("TruncationCellCount", DataType="positiveInteger")]
        public string TruncationCellCount {
            get {
                return TruncationCellCountField;
            } 
            set {
                TruncationCellCountField = value;
                NotifyPropertyChanged("TruncationCellCount");
            }
        }

        private string TruncationCellCountField; 

        /// <summary>
        /// Definition of the truncation faces is in terms of an ordered list of nodes. Node indexing is EXTENDED, i.e., is based on the list of untruncated grid nodes (always first) plus the split nodes (if any) and the truncation face nodes. Relative order of split nodes and truncation face nodes is set by the pillar indices.
        /// </summary>
		[Required]
        [Description("Definition of the truncation faces is in terms of an ordered list of nodes. Node indexing is EXTENDED, i.e., is based on the list of untruncated grid nodes (always first) plus the split nodes (if any) and the truncation face nodes. Relative order of split nodes and truncation face nodes is set by the pillar indices.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("NodesPerTruncationFace")]
        public ResqmlJaggedArray NodesPerTruncationFace {
            get {
                return NodesPerTruncationFaceField;
            } 
            set {
                NodesPerTruncationFaceField = value;
                NotifyPropertyChanged("NodesPerTruncationFace");
            }
        }

        private ResqmlJaggedArray NodesPerTruncationFaceField; 

        /// <summary>
        /// Parent cell index for each of the truncation cells. BUSINESS RULE: Size must match truncationCellCount
        /// </summary>
		[Required]
        [Description("Parent cell index for each of the truncation cells.  BUSINESS RULE: Size must match truncationCellCount")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParentCellIndices")]
        public AbstractIntegerArray ParentCellIndices {
            get {
                return ParentCellIndicesField;
            } 
            set {
                ParentCellIndicesField = value;
                NotifyPropertyChanged("ParentCellIndices");
            }
        }

        private AbstractIntegerArray ParentCellIndicesField; 

        /// <summary>
        /// Local cell face index for those faces which are retained from the parent cell in the definition of the truncation cell. The use of a local cell face index, e.g., 0...5 for an IJK cell, can be used even if the face indices have not been defined.
        /// </summary>
		[Required]
        [Description("Local cell face index for those faces which are retained from the parent cell in the definition of the truncation cell.  The use of a local cell face index, e.g., 0...5 for an IJK cell, can be used even if the face indices have not been defined.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("LocalFacesPerCell")]
        public ResqmlJaggedArray LocalFacesPerCell {
            get {
                return LocalFacesPerCellField;
            } 
            set {
                LocalFacesPerCellField = value;
                NotifyPropertyChanged("LocalFacesPerCell");
            }
        }

        private ResqmlJaggedArray LocalFacesPerCellField; 

        /// <summary>
        /// Truncation face index for the additional cell faces which are required to complete the definition of the truncation cell. The resulting local cell face index follows the local faces per cell list, followed by the truncation faces in the order within the list-of-lists constructions.
        /// </summary>
		[Required]
        [Description("Truncation face index for the additional cell faces which are required to complete the definition of the truncation cell.  The resulting local cell face index follows the local faces per cell list, followed by the truncation faces in the order within the list-of-lists constructions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("TruncationFacesPerCell")]
        public ResqmlJaggedArray TruncationFacesPerCell {
            get {
                return TruncationFacesPerCellField;
            } 
            set {
                TruncationFacesPerCellField = value;
                NotifyPropertyChanged("TruncationFacesPerCell");
            }
        }

        private ResqmlJaggedArray TruncationFacesPerCellField; 

        /// <summary>
        /// Boolean mask used to indicate which truncation cell faces have an outwardly directed normal, following a right hand rule. Data size and order follows the truncationFacesPerCell list-of-lists.
        /// </summary>
		[Required]
        [Description("Boolean mask used to indicate which truncation cell faces have an outwardly directed normal, following a right hand rule. Data size and order follows the truncationFacesPerCell list-of-lists.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("TruncationCellFaceIsRightHanded")]
        public AbstractBooleanArray TruncationCellFaceIsRightHanded {
            get {
                return TruncationCellFaceIsRightHandedField;
            } 
            set {
                TruncationCellFaceIsRightHandedField = value;
                NotifyPropertyChanged("TruncationCellFaceIsRightHanded");
            }
        }

        private AbstractBooleanArray TruncationCellFaceIsRightHandedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GpGridUnstructuredGridPatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GpGridUnstructuredGridPatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the GpGridUnstructuredGridPatch xsd type.")]
    public partial class GpGridUnstructuredGridPatch : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// UnstructuredCellCount property
        /// </summary>
		[Required]
        [Description("Number of unstructured cells. Degenerate case (count=0) is allowed for GPGrid.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("UnstructuredCellCount", DataType="nonNegativeInteger")]
        public string UnstructuredCellCount {
            get {
                return UnstructuredCellCountField;
            } 
            set {
                UnstructuredCellCountField = value;
                NotifyPropertyChanged("UnstructuredCellCount");
            }
        }

        private string UnstructuredCellCountField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredGridGeometry")]
		[XmlElement("Geometry")]
        public UnstructuredGridGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private UnstructuredGridGeometry GeometryField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the UnstructuredGridGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="UnstructuredGridGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the UnstructuredGridGeometry xsd type.")]
    public partial class UnstructuredGridGeometry : AbstractGridGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// CellShape property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "CellShape")]
		[XmlElement("CellShape")]
        public CellShape? CellShape {
            get {
                return CellShapeField;
            } 
            set {
                CellShapeField = value;
                 this.CellShapeSpecified = true;
                NotifyPropertyChanged("CellShape");
            }
        }

        
        private bool CellShapeSpecifiedField = false;
        
        /// <summary>
        /// CellShapeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CellShapeSpecified {
            get {
                return CellShapeSpecifiedField;
            } 
            set {
                CellShapeSpecifiedField = value;
                NotifyPropertyChanged("CellShapeSpecified");
            }
        }
        
        private CellShape? CellShapeField; 

        /// <summary>
        /// NodeCount property
        /// </summary>
		[Required]
        [Description("Total number of nodes in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("NodeCount", DataType="positiveInteger")]
        public string NodeCount {
            get {
                return NodeCountField;
            } 
            set {
                NodeCountField = value;
                NotifyPropertyChanged("NodeCount");
            }
        }

        private string NodeCountField; 

        /// <summary>
        /// FaceCount property
        /// </summary>
		[Required]
        [Description("Total number of faces in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("FaceCount", DataType="positiveInteger")]
        public string FaceCount {
            get {
                return FaceCountField;
            } 
            set {
                FaceCountField = value;
                NotifyPropertyChanged("FaceCount");
            }
        }

        private string FaceCountField; 

        /// <summary>
        /// NodesPerFace property
        /// </summary>
		[Required]
        [Description("List of nodes per face. node count per face can be obtained from the offsets in the first list of list array.  BUSINESS RULE: faceCount must match the length of the first list of list array.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("NodesPerFace")]
        public ResqmlJaggedArray NodesPerFace {
            get {
                return NodesPerFaceField;
            } 
            set {
                NodesPerFaceField = value;
                NotifyPropertyChanged("NodesPerFace");
            }
        }

        private ResqmlJaggedArray NodesPerFaceField; 

        /// <summary>
        /// FacesPerCell property
        /// </summary>
		[Required]
        [Description("List of faces per cell. face count per cell can be obtained from the offsets in the first list of list array.  BUSINESS RULE: cellCount must match the length of the first list of list array.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("FacesPerCell")]
        public ResqmlJaggedArray FacesPerCell {
            get {
                return FacesPerCellField;
            } 
            set {
                FacesPerCellField = value;
                NotifyPropertyChanged("FacesPerCell");
            }
        }

        private ResqmlJaggedArray FacesPerCellField; 

        /// <summary>
        /// CellFaceIsRightHanded property
        /// </summary>
		[Required]
        [Description("Boolean mask used to indicate which cell faces have an outwardly directed normal following a right hand rule. Array length is the sum of the cell face count per cell, and the data follows the order of the faces per cell resqml list-of-lists.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("CellFaceIsRightHanded")]
        public AbstractBooleanArray CellFaceIsRightHanded {
            get {
                return CellFaceIsRightHandedField;
            } 
            set {
                CellFaceIsRightHandedField = value;
                NotifyPropertyChanged("CellFaceIsRightHanded");
            }
        }

        private AbstractBooleanArray CellFaceIsRightHandedField; 

        /// <summary>
        /// HingeNodeFaces property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredGridHingeNodeFaces")]
		[XmlElement("HingeNodeFaces")]
        public UnstructuredGridHingeNodeFaces HingeNodeFaces {
            get {
                return HingeNodeFacesField;
            } 
            set {
                HingeNodeFacesField = value;
                NotifyPropertyChanged("HingeNodeFaces");
            }
        }

        private UnstructuredGridHingeNodeFaces HingeNodeFacesField; 

        /// <summary>
        /// SubnodeTopology property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredSubnodeTopology")]
		[XmlElement("SubnodeTopology")]
        public UnstructuredSubnodeTopology SubnodeTopology {
            get {
                return SubnodeTopologyField;
            } 
            set {
                SubnodeTopologyField = value;
                NotifyPropertyChanged("SubnodeTopology");
            }
        }

        private UnstructuredSubnodeTopology SubnodeTopologyField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the UnstructuredGridHingeNodeFaces xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="UnstructuredGridHingeNodeFaces", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the UnstructuredGridHingeNodeFaces xsd type.")]
    public partial class UnstructuredGridHingeNodeFaces : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of K faces. This count must be positive.
        /// </summary>
		[Required]
        [Description("Number of K faces. This count must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// List of faces to be identified as K faces for hinge node geometry attachment. BUSINESS RULE: Array length equals K face count.
        /// </summary>
		[Required]
        [Description("List of faces to be identified as K faces for hinge node geometry attachment.  BUSINESS RULE: Array length equals K face count.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("FaceIndices")]
        public AbstractIntegerArray FaceIndices {
            get {
                return FaceIndicesField;
            } 
            set {
                FaceIndicesField = value;
                NotifyPropertyChanged("FaceIndices");
            }
        }

        private AbstractIntegerArray FaceIndicesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the UnstructuredSubnodeTopology xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="UnstructuredSubnodeTopology", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the UnstructuredSubnodeTopology xsd type.")]
    public partial class UnstructuredSubnodeTopology : SubnodeTopology, INotifyPropertyChanged
    {

        /// <summary>
        /// Edges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Edges")]
		[XmlElement("Edges")]
        public Edges Edges {
            get {
                return EdgesField;
            } 
            set {
                EdgesField = value;
                NotifyPropertyChanged("Edges");
            }
        }

        private Edges EdgesField; 

        /// <summary>
        /// NodesPerCell property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NodesPerCell")]
		[XmlElement("NodesPerCell")]
        public NodesPerCell NodesPerCell {
            get {
                return NodesPerCellField;
            } 
            set {
                NodesPerCellField = value;
                NotifyPropertyChanged("NodesPerCell");
            }
        }

        private NodesPerCell NodesPerCellField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Edges xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Edges", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Edges xsd type.")]
    public partial class Edges : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of edges. Must be positive.
        /// </summary>
		[Required]
        [Description("Number of edges. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Defines a list of 2 nodes per edge. Count = 2 x EdgeCount
        /// </summary>
		[Required]
        [Description("Defines a list of 2 nodes per edge.  Count = 2 x EdgeCount")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("NodesPerEdge")]
        public AbstractIntegerArray NodesPerEdge {
            get {
                return NodesPerEdgeField;
            } 
            set {
                NodesPerEdgeField = value;
                NotifyPropertyChanged("NodesPerEdge");
            }
        }

        private AbstractIntegerArray NodesPerEdgeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NodesPerCell xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NodesPerCell", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the NodesPerCell xsd type.")]
    public partial class NodesPerCell : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// NodesPerCell1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("NodesPerCell")]
        public ResqmlJaggedArray NodesPerCell1 {
            get {
                return NodesPerCell1Field;
            } 
            set {
                NodesPerCell1Field = value;
                NotifyPropertyChanged("NodesPerCell1");
            }
        }

        private ResqmlJaggedArray NodesPerCell1Field; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SubnodeTopology xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ColumnLayerSubnodeTopology))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredSubnodeTopology))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SubnodeTopology", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the SubnodeTopology xsd type.")]
    public partial class SubnodeTopology : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VariableSubnodes property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VariableSubnodePatch")]
		[XmlElement("VariableSubnodes")]
        public List<VariableSubnodePatch> VariableSubnodes {
            get {
                return VariableSubnodesField;
            } 
            set {
                VariableSubnodesField = value;
                NotifyPropertyChanged("VariableSubnodes");
            }
        }

         /// <summary>
         /// bool to indicate if VariableSubnodes has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VariableSubnodesSpecified
         {
             get {
             if(VariableSubnodesField!=null)
                 return VariableSubnodesField.Count>0?true:false;
             else return false;
             }
         }
        private List<VariableSubnodePatch> VariableSubnodesField; 

        /// <summary>
        /// UniformSubnodes property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "UniformSubnodePatch")]
		[XmlElement("UniformSubnodes")]
        public List<UniformSubnodePatch> UniformSubnodes {
            get {
                return UniformSubnodesField;
            } 
            set {
                UniformSubnodesField = value;
                NotifyPropertyChanged("UniformSubnodes");
            }
        }

         /// <summary>
         /// bool to indicate if UniformSubnodes has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool UniformSubnodesSpecified
         {
             get {
             if(UniformSubnodesField!=null)
                 return UniformSubnodesField.Count>0?true:false;
             else return false;
             }
         }
        private List<UniformSubnodePatch> UniformSubnodesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VariableSubnodePatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VariableSubnodePatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the VariableSubnodePatch xsd type.")]
    public partial class VariableSubnodePatch : SubnodePatch, INotifyPropertyChanged
    {

        /// <summary>
        /// Indices of the selected objects
        /// </summary>
		[Required]
        [Description("Indices of the selected objects")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ObjectIndices")]
        public AbstractIntegerArray ObjectIndices {
            get {
                return ObjectIndicesField;
            } 
            set {
                ObjectIndicesField = value;
                NotifyPropertyChanged("ObjectIndices");
            }
        }

        private AbstractIntegerArray ObjectIndicesField; 

        /// <summary>
        /// Number of subnodes per selected object.
        /// </summary>
		[Required]
        [Description("Number of subnodes per selected object.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("SubnodeCountPerSelectedObject")]
        public AbstractIntegerArray SubnodeCountPerSelectedObject {
            get {
                return SubnodeCountPerSelectedObjectField;
            } 
            set {
                SubnodeCountPerSelectedObjectField = value;
                NotifyPropertyChanged("SubnodeCountPerSelectedObject");
            }
        }

        private AbstractIntegerArray SubnodeCountPerSelectedObjectField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the UniformSubnodePatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="UniformSubnodePatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the UniformSubnodePatch xsd type.")]
    public partial class UniformSubnodePatch : SubnodePatch, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of subnodes per object, with the same number for each of this object kind in the grid.
        /// </summary>
		[Required]
        [Description("Number of subnodes per object, with the same number for each of this object kind in the grid.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("SubnodeCountPerObject", DataType="positiveInteger")]
        public string SubnodeCountPerObject {
            get {
                return SubnodeCountPerObjectField;
            } 
            set {
                SubnodeCountPerObjectField = value;
                NotifyPropertyChanged("SubnodeCountPerObject");
            }
        }

        private string SubnodeCountPerObjectField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GpGridUnstructuredColumnLayerGridPatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GpGridUnstructuredColumnLayerGridPatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the GpGridUnstructuredColumnLayerGridPatch xsd type.")]
    public partial class GpGridUnstructuredColumnLayerGridPatch : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// UnstructuredColumnCount property
        /// </summary>
		[Required]
        [Description("Number of unstructured columns. Degenerate case (count=0) is allowed for GPGrid.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("UnstructuredColumnCount", DataType="nonNegativeInteger")]
        public string UnstructuredColumnCount {
            get {
                return UnstructuredColumnCountField;
            } 
            set {
                UnstructuredColumnCountField = value;
                NotifyPropertyChanged("UnstructuredColumnCount");
            }
        }

        private string UnstructuredColumnCountField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredColumnLayerGridGeometry")]
		[XmlElement("Geometry")]
        public UnstructuredColumnLayerGridGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private UnstructuredColumnLayerGridGeometry GeometryField; 

        /// <summary>
        /// TruncationCells property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TruncationCellPatch")]
		[XmlElement("TruncationCells")]
        public TruncationCellPatch TruncationCells {
            get {
                return TruncationCellsField;
            } 
            set {
                TruncationCellsField = value;
                NotifyPropertyChanged("TruncationCells");
            }
        }

        private TruncationCellPatch TruncationCellsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the UnstructuredColumnLayerGridGeometry xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="UnstructuredColumnLayerGridGeometry", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the UnstructuredColumnLayerGridGeometry xsd type.")]
    public partial class UnstructuredColumnLayerGridGeometry : AbstractColumnLayerGridGeometry, INotifyPropertyChanged
    {

        /// <summary>
        /// ColumnShape property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ColumnShape")]
		[XmlElement("ColumnShape")]
        public ColumnShape? ColumnShape {
            get {
                return ColumnShapeField;
            } 
            set {
                ColumnShapeField = value;
                 this.ColumnShapeSpecified = true;
                NotifyPropertyChanged("ColumnShape");
            }
        }

        
        private bool ColumnShapeSpecifiedField = false;
        
        /// <summary>
        /// ColumnShapeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ColumnShapeSpecified {
            get {
                return ColumnShapeSpecifiedField;
            } 
            set {
                ColumnShapeSpecifiedField = value;
                NotifyPropertyChanged("ColumnShapeSpecified");
            }
        }
        
        private ColumnShape? ColumnShapeField; 

        /// <summary>
        /// PillarCount property
        /// </summary>
		[Required]
        [Description("Number of pillars in the grid. Must be positive. Pillars are used to describe the shape of the columns in the grid.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("PillarCount", DataType="positiveInteger")]
        public string PillarCount {
            get {
                return PillarCountField;
            } 
            set {
                PillarCountField = value;
                NotifyPropertyChanged("PillarCount");
            }
        }

        private string PillarCountField; 

        /// <summary>
        /// PillarsPerColumn property
        /// </summary>
		[Required]
        [Description("List of pillars for each column. The pillars define the corners of each column.  The number of pillars per column can be obtained from the offsets in the first list of list array.  BUSINESS RULE: The length of the first array in the list of list construction should equal the columnCount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("PillarsPerColumn")]
        public ResqmlJaggedArray PillarsPerColumn {
            get {
                return PillarsPerColumnField;
            } 
            set {
                PillarsPerColumnField = value;
                NotifyPropertyChanged("PillarsPerColumn");
            }
        }

        private ResqmlJaggedArray PillarsPerColumnField; 

        /// <summary>
        /// ColumnIsRightHanded property
        /// </summary>
		[Required]
        [Description("List of columns which are right handed. Right handedness is evaluated following the pillar order and the K-direction tangent vector for each column.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("ColumnIsRightHanded")]
        public AbstractBooleanArray ColumnIsRightHanded {
            get {
                return ColumnIsRightHandedField;
            } 
            set {
                ColumnIsRightHandedField = value;
                NotifyPropertyChanged("ColumnIsRightHanded");
            }
        }

        private AbstractBooleanArray ColumnIsRightHandedField; 

        /// <summary>
        /// ColumnEdges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredColumnEdges")]
		[XmlElement("ColumnEdges")]
        public UnstructuredColumnEdges ColumnEdges {
            get {
                return ColumnEdgesField;
            } 
            set {
                ColumnEdgesField = value;
                NotifyPropertyChanged("ColumnEdges");
            }
        }

        private UnstructuredColumnEdges ColumnEdgesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the UnstructuredColumnEdges xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="UnstructuredColumnEdges", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the UnstructuredColumnEdges xsd type.")]
    public partial class UnstructuredColumnEdges : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of unstructured column edges in this grid. Must be positive.
        /// </summary>
		[Required]
        [Description("Number of unstructured column edges in this grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Definition of the column edges in terms of the pillars per column edge. Pillar count per edge is usually 2, but the list-of-lists construction is used to allow column edges to be defined by more than 2 pillars.
        /// </summary>
		[Required]
        [Description("Definition of the column edges in terms of the pillars per column edge. Pillar count per edge is usually 2, but the list-of-lists construction is used to allow column edges to be defined by more than 2 pillars.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("PillarsPerColumnEdge")]
        public ResqmlJaggedArray PillarsPerColumnEdge {
            get {
                return PillarsPerColumnEdgeField;
            } 
            set {
                PillarsPerColumnEdgeField = value;
                NotifyPropertyChanged("PillarsPerColumnEdge");
            }
        }

        private ResqmlJaggedArray PillarsPerColumnEdgeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SplitNodePatch xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SplitNodePatch", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the SplitNodePatch xsd type.")]
    public partial class SplitNodePatch : Patch, INotifyPropertyChanged
    {

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Number of additional split nodes. Count must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// ParentNodeIndices property
        /// </summary>
		[Required]
        [Description("Parent coordinate line node index for each of the split nodes. Used to implicitly define cell geometry.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParentNodeIndices")]
        public AbstractIntegerArray ParentNodeIndices {
            get {
                return ParentNodeIndicesField;
            } 
            set {
                ParentNodeIndicesField = value;
                NotifyPropertyChanged("ParentNodeIndices");
            }
        }

        private AbstractIntegerArray ParentNodeIndicesField; 

        /// <summary>
        /// CellsPerSplitNode property
        /// </summary>
		[Required]
        [Description("Cell indices for each of the split nodes. Used to implicitly define cell geometry. List-of-lists construction used to support split nodes shared between multiple cells.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("CellsPerSplitNode")]
        public ResqmlJaggedArray CellsPerSplitNode {
            get {
                return CellsPerSplitNodeField;
            } 
            set {
                CellsPerSplitNodeField = value;
                NotifyPropertyChanged("CellsPerSplitNode");
            }
        }

        private ResqmlJaggedArray CellsPerSplitNodeField; 

        /// <summary>
        /// SplitFaces property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SplitFaces")]
		[XmlElement("SplitFaces")]
        public SplitFaces SplitFaces {
            get {
                return SplitFacesField;
            } 
            set {
                SplitFacesField = value;
                NotifyPropertyChanged("SplitFaces");
            }
        }

        private SplitFaces SplitFacesField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SplitFaces xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SplitFaces", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the SplitFaces xsd type.")]
    public partial class SplitFaces : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Number of additional split faces. Count must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// ParentFaceIndices property
        /// </summary>
		[Required]
        [Description("Parent unsplit face index for each of the additional split faces.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParentFaceIndices")]
        public AbstractIntegerArray ParentFaceIndices {
            get {
                return ParentFaceIndicesField;
            } 
            set {
                ParentFaceIndicesField = value;
                NotifyPropertyChanged("ParentFaceIndices");
            }
        }

        private AbstractIntegerArray ParentFaceIndicesField; 

        /// <summary>
        /// CellIndices property
        /// </summary>
		[Required]
        [Description("Cell index for each split face. Used to implicitly define cell geometry.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("CellIndices")]
        public AbstractIntegerArray CellIndices {
            get {
                return CellIndicesField;
            } 
            set {
                CellIndicesField = value;
                NotifyPropertyChanged("CellIndices");
            }
        }

        private AbstractIntegerArray CellIndicesField; 

        /// <summary>
        /// SplitEdges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SplitEdges")]
		[XmlElement("SplitEdges")]
        public SplitEdges SplitEdges {
            get {
                return SplitEdgesField;
            } 
            set {
                SplitEdgesField = value;
                NotifyPropertyChanged("SplitEdges");
            }
        }

        private SplitEdges SplitEdgesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SplitEdges xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SplitEdges", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the SplitEdges xsd type.")]
    public partial class SplitEdges : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of edges. Must be positive.
        /// </summary>
		[Required]
        [Description("Number of edges. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Parent unsplit edge index for each of the additional split edges.
        /// </summary>
		[Required]
        [Description("Parent unsplit edge index for each of the additional split edges.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParentEdgeIndices")]
        public AbstractIntegerArray ParentEdgeIndices {
            get {
                return ParentEdgeIndicesField;
            } 
            set {
                ParentEdgeIndicesField = value;
                NotifyPropertyChanged("ParentEdgeIndices");
            }
        }

        private AbstractIntegerArray ParentEdgeIndicesField; 

        /// <summary>
        /// Association of faces with the split edges, used to infer continuity of property, geometry, or interpretation with an attachment kind of edges.
        /// </summary>
		[Required]
        [Description("Association of faces with the split edges, used to infer continuity of property, geometry, or interpretation with an attachment kind of edges.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("FacesPerSplitEdge")]
        public ResqmlJaggedArray FacesPerSplitEdge {
            get {
                return FacesPerSplitEdgeField;
            } 
            set {
                FacesPerSplitEdgeField = value;
                NotifyPropertyChanged("FacesPerSplitEdge");
            }
        }

        private ResqmlJaggedArray FacesPerSplitEdgeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ColumnLayerSplitCoordinateLines xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ColumnLayerSplitCoordinateLines", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ColumnLayerSplitCoordinateLines xsd type.")]
    public partial class ColumnLayerSplitCoordinateLines : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Number of split coordinate lines. The count must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// PillarIndices property
        /// </summary>
		[Required]
        [Description("Pillar index for each split coordinate line. Length of this array is equal to the number of split coordinate lines.  For the first pillarCount lines, the index of the coordinate line equals the index of the corresponding pillar.  This array provides the pillar indices for the additional (split) coordinate lines.  Used to implicitly define column and cell geometry.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("PillarIndices")]
        public AbstractIntegerArray PillarIndices {
            get {
                return PillarIndicesField;
            } 
            set {
                PillarIndicesField = value;
                NotifyPropertyChanged("PillarIndices");
            }
        }

        private AbstractIntegerArray PillarIndicesField; 

        /// <summary>
        /// ColumnsPerSplitCoordinateLine property
        /// </summary>
		[Required]
        [Description("Column indices for each of the split coordinate lines. Used to implicitly define column and cell geometry. List-of-lists construction used to support shared coordinate lines.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("ColumnsPerSplitCoordinateLine")]
        public ResqmlJaggedArray ColumnsPerSplitCoordinateLine {
            get {
                return ColumnsPerSplitCoordinateLineField;
            } 
            set {
                ColumnsPerSplitCoordinateLineField = value;
                NotifyPropertyChanged("ColumnsPerSplitCoordinateLine");
            }
        }

        private ResqmlJaggedArray ColumnsPerSplitCoordinateLineField; 

        /// <summary>
        /// SplitColumnEdges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ColumnLayerSplitColumnEdges")]
		[XmlElement("SplitColumnEdges")]
        public ColumnLayerSplitColumnEdges SplitColumnEdges {
            get {
                return SplitColumnEdgesField;
            } 
            set {
                SplitColumnEdgesField = value;
                NotifyPropertyChanged("SplitColumnEdges");
            }
        }

        private ColumnLayerSplitColumnEdges SplitColumnEdgesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ColumnLayerSplitColumnEdges xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ColumnLayerSplitColumnEdges", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ColumnLayerSplitColumnEdges xsd type.")]
    public partial class ColumnLayerSplitColumnEdges : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of split column edges in this grid. Must be positive.
        /// </summary>
		[Required]
        [Description("Number of split column edges in this grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Parent unsplit column edge index for each of the split column edges. Used to implicitly define split face indexing.
        /// </summary>
		[Required]
        [Description("Parent unsplit column edge index for each of the split column edges. Used to implicitly define split face indexing.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParentColumnEdgeIndices")]
        public AbstractIntegerArray ParentColumnEdgeIndices {
            get {
                return ParentColumnEdgeIndicesField;
            } 
            set {
                ParentColumnEdgeIndicesField = value;
                NotifyPropertyChanged("ParentColumnEdgeIndices");
            }
        }

        private AbstractIntegerArray ParentColumnEdgeIndicesField; 

        /// <summary>
        /// Column index for each of the split column edges. Used to implicitly define column and cell faces. List-of-lists construction not required since each split column edge must be in a single column.
        /// </summary>
		[Required]
        [Description("Column index for each of the split column edges. Used to implicitly define column and cell faces. List-of-lists construction not required since each split column edge must be in a single column.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ColumnPerSplitColumnEdge")]
        public AbstractIntegerArray ColumnPerSplitColumnEdge {
            get {
                return ColumnPerSplitColumnEdgeField;
            } 
            set {
                ColumnPerSplitColumnEdgeField = value;
                NotifyPropertyChanged("ColumnPerSplitColumnEdge");
            }
        }

        private AbstractIntegerArray ColumnPerSplitColumnEdgeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumeRegion xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumeRegion", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the VolumeRegion xsd type.")]
    public partial class VolumeRegion : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PatchIndex property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("PatchIndex", DataType="nonNegativeInteger")]
        public string PatchIndex {
            get {
                return PatchIndexField;
            } 
            set {
                PatchIndexField = value;
                NotifyPropertyChanged("PatchIndex");
            }
        }

        private string PatchIndexField; 

        /// <summary>
        /// InternalShells property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeShell")]
		[XmlElement("InternalShells")]
        public List<VolumeShell> InternalShells {
            get {
                return InternalShellsField;
            } 
            set {
                InternalShellsField = value;
                NotifyPropertyChanged("InternalShells");
            }
        }

         /// <summary>
         /// bool to indicate if InternalShells has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InternalShellsSpecified
         {
             get {
             if(InternalShellsField!=null)
                 return InternalShellsField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeShell> InternalShellsField; 

        /// <summary>
        /// Represents property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Represents")]
        public DataObjectReference Represents {
            get {
                return RepresentsField;
            } 
            set {
                RepresentsField = value;
                NotifyPropertyChanged("Represents");
            }
        }

        private DataObjectReference RepresentsField; 

        /// <summary>
        /// ExternalShell property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeShell")]
		[XmlElement("ExternalShell")]
        public VolumeShell ExternalShell {
            get {
                return ExternalShellField;
            } 
            set {
                ExternalShellField = value;
                NotifyPropertyChanged("ExternalShell");
            }
        }

        private VolumeShell ExternalShellField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VolumeShell xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VolumeShell", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the VolumeShell xsd type.")]
    public partial class VolumeShell : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ShellUid property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("ShellUid")]
        public string ShellUid {
            get {
                return ShellUidField;
            } 
            set {
                ShellUidField = value;
                NotifyPropertyChanged("ShellUid");
            }
        }

        private string ShellUidField; 

        /// <summary>
        /// MacroFaces property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "OrientedMacroFace")]
		[XmlElement("MacroFaces")]
        public List<OrientedMacroFace> MacroFaces {
            get {
                return MacroFacesField;
            } 
            set {
                MacroFacesField = value;
                NotifyPropertyChanged("MacroFaces");
            }
        }

         /// <summary>
         /// bool to indicate if MacroFaces has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MacroFacesSpecified
         {
             get {
             if(MacroFacesField!=null)
                 return MacroFacesField.Count>0?true:false;
             else return false;
             }
         }
        private List<OrientedMacroFace> MacroFacesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OrientedMacroFace xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OrientedMacroFace", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the OrientedMacroFace xsd type.")]
    public partial class OrientedMacroFace : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PatchIndexOfRepresentation property
        /// </summary>
		[Required]
        [Description("Create the triangulation and 2D grid representation for which the patches match the macro faces.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("PatchIndexOfRepresentation", DataType="nonNegativeInteger")]
        public string PatchIndexOfRepresentation {
            get {
                return PatchIndexOfRepresentationField;
            } 
            set {
                PatchIndexOfRepresentationField = value;
                NotifyPropertyChanged("PatchIndexOfRepresentation");
            }
        }

        private string PatchIndexOfRepresentationField; 

        /// <summary>
        /// RepresentationIndex property
        /// </summary>
		[Required]
        [Description("Identifies the representation by its index, in the list of representations contained in the organization.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("RepresentationIndex", DataType="nonNegativeInteger")]
        public string RepresentationIndex {
            get {
                return RepresentationIndexField;
            } 
            set {
                RepresentationIndexField = value;
                NotifyPropertyChanged("RepresentationIndex");
            }
        }

        private string RepresentationIndexField; 

        /// <summary>
        /// SideIsPlus property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("SideIsPlus")]
        public bool? SideIsPlus {
            get {
                return SideIsPlusField;
            } 
            set {
                SideIsPlusField = value;
                NotifyPropertyChanged("SideIsPlus");
            }
        }

        private bool? SideIsPlusField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractContactRepresentationPart xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContactRepresentationReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedContactRepresentationPart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonSealedContactRepresentationPart))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractContactRepresentationPart", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractContactRepresentationPart xsd type.")]
    public abstract partial class AbstractContactRepresentationPart : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The index of the contact. Indicates identity of the contact in the surface framework context. It is used for contact identities and to find the interpretation of this particular contact.
        /// </summary>
		[Required]
        [Description("The index of the contact. Indicates identity of the contact in the surface framework context. It is used for contact identities and to find the interpretation of this particular contact.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private string IndexField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ContactRepresentationReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ContactRepresentationReference", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ContactRepresentationReference xsd type.")]
    public partial class ContactRepresentationReference : AbstractContactRepresentationPart, INotifyPropertyChanged
    {

        /// <summary>
        /// Representation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Representation")]
        public DataObjectReference Representation {
            get {
                return RepresentationField;
            } 
            set {
                RepresentationField = value;
                NotifyPropertyChanged("Representation");
            }
        }

        private DataObjectReference RepresentationField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SealedContactRepresentationPart xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SealedContactRepresentationPart", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the SealedContactRepresentationPart xsd type.")]
    public partial class SealedContactRepresentationPart : AbstractContactRepresentationPart, INotifyPropertyChanged
    {

        /// <summary>
        /// IdenticalNodeIndices property
        /// </summary>
		[Description("Indicate which nodes (identified by their common index in all contact patches) of the contact patches are identical.  If this list is not present, then it indicates that all nodes in each representation are identical, on an element-by-element level.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("IdenticalNodeIndices")]
        public AbstractIntegerArray IdenticalNodeIndices {
            get {
                return IdenticalNodeIndicesField;
            } 
            set {
                IdenticalNodeIndicesField = value;
                NotifyPropertyChanged("IdenticalNodeIndices");
            }
        }

        private AbstractIntegerArray IdenticalNodeIndicesField; 

        /// <summary>
        /// IdentityKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IdentityKind")]
		[XmlElement("IdentityKind")]
        public IdentityKind? IdentityKind {
            get {
                return IdentityKindField;
            } 
            set {
                IdentityKindField = value;
                 this.IdentityKindSpecified = true;
                NotifyPropertyChanged("IdentityKind");
            }
        }

        
        private bool IdentityKindSpecifiedField = false;
        
        /// <summary>
        /// IdentityKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IdentityKindSpecified {
            get {
                return IdentityKindSpecifiedField;
            } 
            set {
                IdentityKindSpecifiedField = value;
                NotifyPropertyChanged("IdentityKindSpecified");
            }
        }
        
        private IdentityKind? IdentityKindField; 

        /// <summary>
        /// Contact property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ContactPatch")]
		[XmlElement("Contact")]
        public List<ContactPatch> Contact {
            get {
                return ContactField;
            } 
            set {
                ContactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

         /// <summary>
         /// bool to indicate if Contact has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContactSpecified
         {
             get {
             if(ContactField!=null)
                 return ContactField.Count>0?true:false;
             else return false;
             }
         }
        private List<ContactPatch> ContactField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NonSealedContactRepresentationPart xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NonSealedContactRepresentationPart", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the NonSealedContactRepresentationPart xsd type.")]
    public partial class NonSealedContactRepresentationPart : AbstractContactRepresentationPart, INotifyPropertyChanged
    {

        /// <summary>
        /// Contact property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ContactPatch")]
		[XmlElement("Contact")]
        public List<ContactPatch> Contact {
            get {
                return ContactField;
            } 
            set {
                ContactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

         /// <summary>
         /// bool to indicate if Contact has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContactSpecified
         {
             get {
             if(ContactField!=null)
                 return ContactField.Count>0?true:false;
             else return false;
             }
         }
        private List<ContactPatch> ContactField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractGeometry")]
		[XmlElement("Geometry")]
        public AbstractGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private AbstractGeometry GeometryField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ContactIdentity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ContactIdentity", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ContactIdentity xsd type.")]
    public partial class ContactIdentity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// IdentityKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IdentityKind")]
		[XmlElement("IdentityKind")]
        public IdentityKind? IdentityKind {
            get {
                return IdentityKindField;
            } 
            set {
                IdentityKindField = value;
                 this.IdentityKindSpecified = true;
                NotifyPropertyChanged("IdentityKind");
            }
        }

        
        private bool IdentityKindSpecifiedField = false;
        
        /// <summary>
        /// IdentityKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IdentityKindSpecified {
            get {
                return IdentityKindSpecifiedField;
            } 
            set {
                IdentityKindSpecifiedField = value;
                NotifyPropertyChanged("IdentityKindSpecified");
            }
        }
        
        private IdentityKind? IdentityKindField; 

        /// <summary>
        /// The contact representations that share common identity as specified by their indices
        /// </summary>
		[Required]
        [Description("The contact representations that share common identity as specified by their indices")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ListOfContactRepresentations")]
        public AbstractIntegerArray ListOfContactRepresentations {
            get {
                return ListOfContactRepresentationsField;
            } 
            set {
                ListOfContactRepresentationsField = value;
                NotifyPropertyChanged("ListOfContactRepresentations");
            }
        }

        private AbstractIntegerArray ListOfContactRepresentationsField; 

        /// <summary>
        /// Indicates which nodes (identified by their common index in all contact representations) of the contact representations are identical. If this list is not present, then it indicates that all nodes in each representation are identical, on an element by element level.
        /// </summary>
		[Description("Indicates which nodes (identified by their common index in all contact representations) of the contact representations are identical.  If this list is not present, then it indicates that all nodes in each representation are identical, on an element by element level.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ListOfIdenticalNodes")]
        public AbstractIntegerArray ListOfIdenticalNodes {
            get {
                return ListOfIdenticalNodesField;
            } 
            set {
                ListOfIdenticalNodesField = value;
                NotifyPropertyChanged("ListOfIdenticalNodes");
            }
        }

        private AbstractIntegerArray ListOfIdenticalNodesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ConnectionInterpretations xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ConnectionInterpretations", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ConnectionInterpretations xsd type.")]
    public partial class ConnectionInterpretations : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// InterpretationIndices property
        /// </summary>
		[Required]
        [Description("Indices for the interpretations for each connection, if any. The use of a Resqml jagged array allows zero or more than one interpretation to be associated with a single connection.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlJaggedArray")]
		[XmlElement("InterpretationIndices")]
        public ResqmlJaggedArray InterpretationIndices {
            get {
                return InterpretationIndicesField;
            } 
            set {
                InterpretationIndicesField = value;
                NotifyPropertyChanged("InterpretationIndices");
            }
        }

        private ResqmlJaggedArray InterpretationIndicesField; 

        /// <summary>
        /// FeatureInterpretation property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FeatureInterpretation")]
        public List<DataObjectReference> FeatureInterpretation {
            get {
                return FeatureInterpretationField;
            } 
            set {
                FeatureInterpretationField = value;
                NotifyPropertyChanged("FeatureInterpretation");
            }
        }

         /// <summary>
         /// bool to indicate if FeatureInterpretation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FeatureInterpretationSpecified
         {
             get {
             if(FeatureInterpretationField!=null)
                 return FeatureInterpretationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> FeatureInterpretationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IntervalStratigraphicUnits xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IntervalStratigraphicUnits", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IntervalStratigraphicUnits xsd type.")]
    public partial class IntervalStratigraphicUnits : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// UnitIndices property
        /// </summary>
		[Required]
        [Description("Index of the stratigraphic unit per interval, of a given stratigraphic column.  Notes: 1.) For grids, intervals = layers + K gaps. 2.) If there is no stratigraphic column, e.g., within salt, use null (-1)  BUSINESS RULE: Array length must equal the number of INTERVALS.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("UnitIndices")]
        public AbstractIntegerArray UnitIndices {
            get {
                return UnitIndicesField;
            } 
            set {
                UnitIndicesField = value;
                NotifyPropertyChanged("UnitIndices");
            }
        }

        private AbstractIntegerArray UnitIndicesField; 

        /// <summary>
        /// StratigraphicOrganization property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("StratigraphicOrganization")]
        public DataObjectReference StratigraphicOrganization {
            get {
                return StratigraphicOrganizationField;
            } 
            set {
                StratigraphicOrganizationField = value;
                NotifyPropertyChanged("StratigraphicOrganization");
            }
        }

        private DataObjectReference StratigraphicOrganizationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the KGaps xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="KGaps", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the KGaps xsd type.")]
    public partial class KGaps : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Number of gaps between layers. Must be positive. Number of INTERVALS = gapCount + NK.
        /// </summary>
		[Description("Number of gaps between layers. Must be positive.  Number of INTERVALS = gapCount + NK.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// Boolean array of length NK-1. TRUE if there is a gap after the corresponding layer. NKL = NK + gapCount + 1 BUSINESS RULE: gapCount must be consistent with the number of gaps specified by the gapAfterLayer array.
        /// </summary>
		[Description("Boolean array of length NK-1. TRUE if there is a gap after the corresponding layer.  NKL = NK + gapCount + 1  BUSINESS RULE: gapCount must be consistent with the number of gaps specified by the gapAfterLayer array.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractBooleanArray")]
		[XmlElement("GapAfterLayer")]
        public AbstractBooleanArray GapAfterLayer {
            get {
                return GapAfterLayerField;
            } 
            set {
                GapAfterLayerField = value;
                NotifyPropertyChanged("GapAfterLayer");
            }
        }

        private AbstractBooleanArray GapAfterLayerField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GpGridColumnLayerGrid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GpGridColumnLayerGrid", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the GpGridColumnLayerGrid xsd type.")]
    public partial class GpGridColumnLayerGrid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Nk property
        /// </summary>
		[Required]
        [Description("Number of layers. Degenerate case (nk=0) is allowed for GPGrid.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Nk", DataType="nonNegativeInteger")]
        public string Nk {
            get {
                return NkField;
            } 
            set {
                NkField = value;
                NotifyPropertyChanged("Nk");
            }
        }

        private string NkField; 

        /// <summary>
        /// KGaps property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "KGaps")]
		[XmlElement("KGaps")]
        public KGaps KGaps {
            get {
                return KGapsField;
            } 
            set {
                KGapsField = value;
                NotifyPropertyChanged("KGaps");
            }
        }

        private KGaps KGapsField; 

        /// <summary>
        /// IjkGridPatch property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GpGridIjkGridPatch")]
		[XmlElement("IjkGridPatch")]
        public List<GpGridIjkGridPatch> IjkGridPatch {
            get {
                return IjkGridPatchField;
            } 
            set {
                IjkGridPatchField = value;
                NotifyPropertyChanged("IjkGridPatch");
            }
        }

         /// <summary>
         /// bool to indicate if IjkGridPatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IjkGridPatchSpecified
         {
             get {
             if(IjkGridPatchField!=null)
                 return IjkGridPatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<GpGridIjkGridPatch> IjkGridPatchField; 

        /// <summary>
        /// UnstructuredColumnLayerGridPatch property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GpGridUnstructuredColumnLayerGridPatch")]
		[XmlElement("UnstructuredColumnLayerGridPatch")]
        public List<GpGridUnstructuredColumnLayerGridPatch> UnstructuredColumnLayerGridPatch {
            get {
                return UnstructuredColumnLayerGridPatchField;
            } 
            set {
                UnstructuredColumnLayerGridPatchField = value;
                NotifyPropertyChanged("UnstructuredColumnLayerGridPatch");
            }
        }

         /// <summary>
         /// bool to indicate if UnstructuredColumnLayerGridPatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool UnstructuredColumnLayerGridPatchSpecified
         {
             get {
             if(UnstructuredColumnLayerGridPatchField!=null)
                 return UnstructuredColumnLayerGridPatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<GpGridUnstructuredColumnLayerGridPatch> UnstructuredColumnLayerGridPatchField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CellStratigraphicUnits xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CellStratigraphicUnits", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the CellStratigraphicUnits xsd type.")]
    public partial class CellStratigraphicUnits : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// UnitIndices property
        /// </summary>
		[Required]
        [Description("Index of the stratigraphic unit of a given stratigraphic column for each cell.  Use null (-1) if no stratigraphic column, e.g., within salt  BUSINESS RULE: Array length is the number of cells in the grid or the blocked well")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("UnitIndices")]
        public AbstractIntegerArray UnitIndices {
            get {
                return UnitIndicesField;
            } 
            set {
                UnitIndicesField = value;
                NotifyPropertyChanged("UnitIndices");
            }
        }

        private AbstractIntegerArray UnitIndicesField; 

        /// <summary>
        /// StratigraphicOrganization property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("StratigraphicOrganization")]
        public DataObjectReference StratigraphicOrganization {
            get {
                return StratigraphicOrganizationField;
            } 
            set {
                StratigraphicOrganizationField = value;
                NotifyPropertyChanged("StratigraphicOrganization");
            }
        }

        private DataObjectReference StratigraphicOrganizationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Intervals xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Intervals", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Intervals xsd type.")]
    public partial class Intervals : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The number of intervals in the regrid description. Must be positive.
        /// </summary>
		[Required]
        [Description("The number of intervals in the regrid description. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("IntervalCount", DataType="positiveInteger")]
        public string IntervalCount {
            get {
                return IntervalCountField;
            } 
            set {
                IntervalCountField = value;
                NotifyPropertyChanged("IntervalCount");
            }
        }

        private string IntervalCountField; 

        /// <summary>
        /// The number of parent cells in each interval. BUSINESS RULES: 1.) The array length must be equal to intervalCount. 2.) For the given parentIndex, the total count of parent cells should not extend beyond the boundary of the parent grid.
        /// </summary>
		[Required]
        [Description("The number of parent cells in each interval.  BUSINESS RULES: 1.) The array length must be equal to intervalCount. 2.) For the given parentIndex, the total count of parent cells should not extend beyond the boundary of the parent grid.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParentCountPerInterval")]
        public AbstractIntegerArray ParentCountPerInterval {
            get {
                return ParentCountPerIntervalField;
            } 
            set {
                ParentCountPerIntervalField = value;
                NotifyPropertyChanged("ParentCountPerInterval");
            }
        }

        private AbstractIntegerArray ParentCountPerIntervalField; 

        /// <summary>
        /// The number of child cells in each interval. If the child grid type is not commensurate with the parent type, then this attribute is ignored by a reader, and its value should be set to null (-1). For example, for a parent IJK grid with a child unstructured column layer grid, then the child count is non-null for a K regrid, but null for an I or J regrid. BUSINESS RULES: 1.) The array length must be equal to intervalCount. 2.) If the child grid type is commensurate with the parent grid, then the sum of values over all intervals must be equal to the corresponding child grid dimension.
        /// </summary>
		[Required]
        [Description("The number of child cells in each interval.  If the child grid type is not commensurate with the parent type, then this attribute is ignored by a reader, and its value should be set to null (-1). For example, for a parent IJK grid with a child unstructured column layer grid, then the child count is non-null for a K regrid, but null for an I or J regrid.  BUSINESS RULES: 1.) The array length must be equal to intervalCount. 2.) If the child grid type is commensurate with the parent grid, then the sum of values over all intervals must be equal to the corresponding child grid dimension.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ChildCountPerInterval")]
        public AbstractIntegerArray ChildCountPerInterval {
            get {
                return ChildCountPerIntervalField;
            } 
            set {
                ChildCountPerIntervalField = value;
                NotifyPropertyChanged("ChildCountPerInterval");
            }
        }

        private AbstractIntegerArray ChildCountPerIntervalField; 

        /// <summary>
        /// Weights that are proportional to the relative sizes of child cells within each interval. The weights need not be normalized.
        /// </summary>
		[Description("Weights that are proportional to the relative sizes of child cells within each interval. The weights need not be normalized.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("ChildCellWeights")]
        public AbstractDoubleArray ChildCellWeights {
            get {
                return ChildCellWeightsField;
            } 
            set {
                ChildCellWeightsField = value;
                NotifyPropertyChanged("ChildCellWeights");
            }
        }

        private AbstractDoubleArray ChildCellWeightsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Regrid xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Regrid", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Regrid xsd type.")]
    public partial class Regrid : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// InitialIndexOnParentGrid property
        /// </summary>
		[Required]
        [Description("0-based index for the placement of the window on the parent grid.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("InitialIndexOnParentGrid", DataType="nonNegativeInteger")]
        public string InitialIndexOnParentGrid {
            get {
                return InitialIndexOnParentGridField;
            } 
            set {
                InitialIndexOnParentGridField = value;
                NotifyPropertyChanged("InitialIndexOnParentGrid");
            }
        }

        private string InitialIndexOnParentGridField; 

        /// <summary>
        /// Intervals property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Intervals")]
		[XmlElement("Intervals")]
        public Intervals Intervals {
            get {
                return IntervalsField;
            } 
            set {
                IntervalsField = value;
                NotifyPropertyChanged("Intervals");
            }
        }

        private Intervals IntervalsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the OverlapVolume xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="OverlapVolume", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the OverlapVolume xsd type.")]
    public partial class OverlapVolume : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Units of measure for the overlapVolume.
        /// </summary>
		[Description("Units of measure for the overlapVolume.")]
        [EnergisticsDataTypeAttribute(DataType = "VolumeUom")]
		[XmlElement("VolumeUom")]
        public VolumeUom? VolumeUom {
            get {
                return VolumeUomField;
            } 
            set {
                VolumeUomField = value;
                 this.VolumeUomSpecified = true;
                NotifyPropertyChanged("VolumeUom");
            }
        }

        
        private bool VolumeUomSpecifiedField = false;
        
        /// <summary>
        /// VolumeUomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VolumeUomSpecified {
            get {
                return VolumeUomSpecifiedField;
            } 
            set {
                VolumeUomSpecifiedField = value;
                NotifyPropertyChanged("VolumeUomSpecified");
            }
        }
        
        private VolumeUom? VolumeUomField; 

        /// <summary>
        /// Parent-child cell volume overlap. BUSINESS RULE: Length of array must equal the cell overlap count.
        /// </summary>
		[Description("Parent-child cell volume overlap.  BUSINESS RULE: Length of array must equal the cell overlap count.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("OverlapVolumes")]
        public AbstractDoubleArray OverlapVolumes {
            get {
                return OverlapVolumesField;
            } 
            set {
                OverlapVolumesField = value;
                NotifyPropertyChanged("OverlapVolumes");
            }
        }

        private AbstractDoubleArray OverlapVolumesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CellOverlap xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CellOverlap", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the CellOverlap xsd type.")]
    public partial class CellOverlap : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Count property
        /// </summary>
		[Description("Number of parent-child cell overlaps. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// ParentChildCellPairs property
        /// </summary>
		[Description("(Parent cell index, Child cell index) pair for each overlap.  BUSINESS RULE: Length of array must equal 2 x overlapCount.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ParentChildCellPairs")]
        public AbstractIntegerArray ParentChildCellPairs {
            get {
                return ParentChildCellPairsField;
            } 
            set {
                ParentChildCellPairsField = value;
                NotifyPropertyChanged("ParentChildCellPairs");
            }
        }

        private AbstractIntegerArray ParentChildCellPairsField; 

        /// <summary>
        /// OverlapVolume property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "OverlapVolume")]
		[XmlElement("OverlapVolume")]
        public OverlapVolume OverlapVolume {
            get {
                return OverlapVolumeField;
            } 
            set {
                OverlapVolumeField = value;
                NotifyPropertyChanged("OverlapVolume");
            }
        }

        private OverlapVolume OverlapVolumeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractParentWindow xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CellParentWindow))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ColumnLayerParentWindow))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkParentWindow))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractParentWindow", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractParentWindow xsd type.")]
    public abstract partial class AbstractParentWindow : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CellOverlap property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CellOverlap")]
		[XmlElement("CellOverlap")]
        public CellOverlap CellOverlap {
            get {
                return CellOverlapField;
            } 
            set {
                CellOverlapField = value;
                NotifyPropertyChanged("CellOverlap");
            }
        }

        private CellOverlap CellOverlapField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CellParentWindow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CellParentWindow", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the CellParentWindow xsd type.")]
    public partial class CellParentWindow : AbstractParentWindow, INotifyPropertyChanged
    {

        /// <summary>
        /// CellIndices property
        /// </summary>
		[Required]
        [Description("Cell indices which list the cells in the parent window.  BUSINESS RULE: Number of cells must be consistent with the child grid cell count.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("CellIndices")]
        public AbstractIntegerArray CellIndices {
            get {
                return CellIndicesField;
            } 
            set {
                CellIndicesField = value;
                NotifyPropertyChanged("CellIndices");
            }
        }

        private AbstractIntegerArray CellIndicesField; 

        /// <summary>
        /// ParentGrid property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ParentGrid")]
        public DataObjectReference ParentGrid {
            get {
                return ParentGridField;
            } 
            set {
                ParentGridField = value;
                NotifyPropertyChanged("ParentGrid");
            }
        }

        private DataObjectReference ParentGridField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ColumnLayerParentWindow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ColumnLayerParentWindow", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ColumnLayerParentWindow xsd type.")]
    public partial class ColumnLayerParentWindow : AbstractParentWindow, INotifyPropertyChanged
    {

        /// <summary>
        /// ColumnIndices property
        /// </summary>
		[Required]
        [Description("Column indices that list the columns in the parent window.  BUSINESS RULE: Number of columns must be consistent with the child grid column count.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ColumnIndices")]
        public AbstractIntegerArray ColumnIndices {
            get {
                return ColumnIndicesField;
            } 
            set {
                ColumnIndicesField = value;
                NotifyPropertyChanged("ColumnIndices");
            }
        }

        private AbstractIntegerArray ColumnIndicesField; 

        /// <summary>
        /// OmitParentCells property
        /// </summary>
		[Description("List of parent cells that are to be retained at their original resolution and are not to be included within a local grid. The omit allows non-rectangular local grids to be specified.  0-based indexing follows #Columns x #Layers relative to the parent window cell count, not to the parent grid.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("OmitParentCells")]
        public AbstractIntegerArray OmitParentCells {
            get {
                return OmitParentCellsField;
            } 
            set {
                OmitParentCellsField = value;
                NotifyPropertyChanged("OmitParentCells");
            }
        }

        private AbstractIntegerArray OmitParentCellsField; 

        /// <summary>
        /// KRegrid property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Regrid")]
		[XmlElement("KRegrid")]
        public Regrid KRegrid {
            get {
                return KRegridField;
            } 
            set {
                KRegridField = value;
                NotifyPropertyChanged("KRegrid");
            }
        }

        private Regrid KRegridField; 

        /// <summary>
        /// ParentGrid property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ParentGrid")]
        public DataObjectReference ParentGrid {
            get {
                return ParentGridField;
            } 
            set {
                ParentGridField = value;
                NotifyPropertyChanged("ParentGrid");
            }
        }

        private DataObjectReference ParentGridField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IjkParentWindow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IjkParentWindow", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the IjkParentWindow xsd type.")]
    public partial class IjkParentWindow : AbstractParentWindow, INotifyPropertyChanged
    {

        /// <summary>
        /// OmitParentCells property
        /// </summary>
		[Description("List of parent cells that are to be retained at their original resolution and are not to be included within a local grid. The \"omit\" allows non-rectangular local grids to be specified.  0-based indexing follows NI x NJ x NK relative to the parent window cell count—not to the parent grid.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("OmitParentCells")]
        public AbstractIntegerArray OmitParentCells {
            get {
                return OmitParentCellsField;
            } 
            set {
                OmitParentCellsField = value;
                NotifyPropertyChanged("OmitParentCells");
            }
        }

        private AbstractIntegerArray OmitParentCellsField; 

        /// <summary>
        /// JRegrid property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Regrid")]
		[XmlElement("JRegrid")]
        public Regrid JRegrid {
            get {
                return JRegridField;
            } 
            set {
                JRegridField = value;
                NotifyPropertyChanged("JRegrid");
            }
        }

        private Regrid JRegridField; 

        /// <summary>
        /// ParentGrid property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ParentGrid")]
        public DataObjectReference ParentGrid {
            get {
                return ParentGridField;
            } 
            set {
                ParentGridField = value;
                NotifyPropertyChanged("ParentGrid");
            }
        }

        private DataObjectReference ParentGridField; 

        /// <summary>
        /// KRegrid property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Regrid")]
		[XmlElement("KRegrid")]
        public Regrid KRegrid {
            get {
                return KRegridField;
            } 
            set {
                KRegridField = value;
                NotifyPropertyChanged("KRegrid");
            }
        }

        private Regrid KRegridField; 

        /// <summary>
        /// IRegrid property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Regrid")]
		[XmlElement("IRegrid")]
        public Regrid IRegrid {
            get {
                return IRegridField;
            } 
            set {
                IRegridField = value;
                NotifyPropertyChanged("IRegrid");
            }
        }

        private Regrid IRegridField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CellFluidPhaseUnits xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CellFluidPhaseUnits", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the CellFluidPhaseUnits xsd type.")]
    public partial class CellFluidPhaseUnits : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PhaseUnitIndices property
        /// </summary>
		[Required]
        [Description("Index of the phase unit kind within a given fluid phase organization for each cell. Follows the indexing defined by the PhaseUnit enumeration. When applied to the wellbore frame representation, the indexing is identical to the number of intervals.  Use null (-1) if no fluid phase is present, e.g., within the seal.  BUSINESS RULE: Array length is equal to the number of cells in the representation (grid, wellbore frame or blocked well).")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("PhaseUnitIndices")]
        public AbstractIntegerArray PhaseUnitIndices {
            get {
                return PhaseUnitIndicesField;
            } 
            set {
                PhaseUnitIndicesField = value;
                NotifyPropertyChanged("PhaseUnitIndices");
            }
        }

        private AbstractIntegerArray PhaseUnitIndicesField; 

        /// <summary>
        /// FluidOrganization property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidOrganization")]
        public DataObjectReference FluidOrganization {
            get {
                return FluidOrganizationField;
            } 
            set {
                FluidOrganizationField = value;
                NotifyPropertyChanged("FluidOrganization");
            }
        }

        private DataObjectReference FluidOrganizationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AdditionalGridTopology xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AdditionalGridTopology", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AdditionalGridTopology xsd type.")]
    public partial class AdditionalGridTopology : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SplitEdges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SplitEdges")]
		[XmlElement("SplitEdges")]
        public SplitEdges SplitEdges {
            get {
                return SplitEdgesField;
            } 
            set {
                SplitEdgesField = value;
                NotifyPropertyChanged("SplitEdges");
            }
        }

        private SplitEdges SplitEdgesField; 

        /// <summary>
        /// SplitNodes property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SplitNodePatch")]
		[XmlElement("SplitNodes")]
        public SplitNodePatch SplitNodes {
            get {
                return SplitNodesField;
            } 
            set {
                SplitNodesField = value;
                NotifyPropertyChanged("SplitNodes");
            }
        }

        private SplitNodePatch SplitNodesField; 

        /// <summary>
        /// SplitColumnEdges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ColumnLayerSplitColumnEdges")]
		[XmlElement("SplitColumnEdges")]
        public ColumnLayerSplitColumnEdges SplitColumnEdges {
            get {
                return SplitColumnEdgesField;
            } 
            set {
                SplitColumnEdgesField = value;
                NotifyPropertyChanged("SplitColumnEdges");
            }
        }

        private ColumnLayerSplitColumnEdges SplitColumnEdgesField; 

        /// <summary>
        /// UnstructuredColumnEdges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredColumnEdges")]
		[XmlElement("UnstructuredColumnEdges")]
        public UnstructuredColumnEdges UnstructuredColumnEdges {
            get {
                return UnstructuredColumnEdgesField;
            } 
            set {
                UnstructuredColumnEdgesField = value;
                NotifyPropertyChanged("UnstructuredColumnEdges");
            }
        }

        private UnstructuredColumnEdges UnstructuredColumnEdgesField; 

        /// <summary>
        /// SplitFaces property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SplitFaces")]
		[XmlElement("SplitFaces")]
        public SplitFaces SplitFaces {
            get {
                return SplitFacesField;
            } 
            set {
                SplitFacesField = value;
                NotifyPropertyChanged("SplitFaces");
            }
        }

        private SplitFaces SplitFacesField; 

        /// <summary>
        /// IjSplitColumnEdges property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IjSplitColumnEdges")]
		[XmlElement("IjSplitColumnEdges")]
        public IjSplitColumnEdges IjSplitColumnEdges {
            get {
                return IjSplitColumnEdgesField;
            } 
            set {
                IjSplitColumnEdgesField = value;
                NotifyPropertyChanged("IjSplitColumnEdges");
            }
        }

        private IjSplitColumnEdges IjSplitColumnEdgesField; 

        /// <summary>
        /// UnstructuredSubnodeTopology property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredSubnodeTopology")]
		[XmlElement("UnstructuredSubnodeTopology")]
        public UnstructuredSubnodeTopology UnstructuredSubnodeTopology {
            get {
                return UnstructuredSubnodeTopologyField;
            } 
            set {
                UnstructuredSubnodeTopologyField = value;
                NotifyPropertyChanged("UnstructuredSubnodeTopology");
            }
        }

        private UnstructuredSubnodeTopology UnstructuredSubnodeTopologyField; 

        /// <summary>
        /// ColumnLayerSubnodeTopology property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ColumnLayerSubnodeTopology")]
		[XmlElement("ColumnLayerSubnodeTopology")]
        public ColumnLayerSubnodeTopology ColumnLayerSubnodeTopology {
            get {
                return ColumnLayerSubnodeTopologyField;
            } 
            set {
                ColumnLayerSubnodeTopologyField = value;
                NotifyPropertyChanged("ColumnLayerSubnodeTopology");
            }
        }

        private ColumnLayerSubnodeTopology ColumnLayerSubnodeTopologyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ElementIdentity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ElementIdentity", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the ElementIdentity xsd type.")]
    public partial class ElementIdentity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ElementIndices property
        /// </summary>
		[Description("Indicates which elements are identical based on their indices in the (sub)representation. If not given, then the selected indexable elements of each of the selected representations are identical at the element by element level.   If not given, then all elements are specified to be identical.  BUSINESS RULE: Number of identical elements must equal identicalElementCount for each representation.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ElementIndices")]
        public AbstractIntegerArray ElementIndices {
            get {
                return ElementIndicesField;
            } 
            set {
                ElementIndicesField = value;
                NotifyPropertyChanged("ElementIndices");
            }
        }

        private AbstractIntegerArray ElementIndicesField; 

        /// <summary>
        /// IdentityKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IdentityKind")]
		[XmlElement("IdentityKind")]
        public IdentityKind? IdentityKind {
            get {
                return IdentityKindField;
            } 
            set {
                IdentityKindField = value;
                 this.IdentityKindSpecified = true;
                NotifyPropertyChanged("IdentityKind");
            }
        }

        
        private bool IdentityKindSpecifiedField = false;
        
        /// <summary>
        /// IdentityKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IdentityKindSpecified {
            get {
                return IdentityKindSpecifiedField;
            } 
            set {
                IdentityKindSpecifiedField = value;
                NotifyPropertyChanged("IdentityKindSpecified");
            }
        }
        
        private IdentityKind? IdentityKindField; 

        /// <summary>
        /// IndexableElement property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IndexableElements")]
		[XmlElement("IndexableElement")]
        public IndexableElements? IndexableElement {
            get {
                return IndexableElementField;
            } 
            set {
                IndexableElementField = value;
                 this.IndexableElementSpecified = true;
                NotifyPropertyChanged("IndexableElement");
            }
        }

        
        private bool IndexableElementSpecifiedField = false;
        
        /// <summary>
        /// IndexableElementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexableElementSpecified {
            get {
                return IndexableElementSpecifiedField;
            } 
            set {
                IndexableElementSpecifiedField = value;
                NotifyPropertyChanged("IndexableElementSpecified");
            }
        }
        
        private IndexableElements? IndexableElementField; 

        /// <summary>
        /// Representation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Representation")]
        public DataObjectReference Representation {
            get {
                return RepresentationField;
            } 
            set {
                RepresentationField = value;
                NotifyPropertyChanged("Representation");
            }
        }

        private DataObjectReference RepresentationField; 

        /// <summary>
        /// FromTimeIndex property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("FromTimeIndex")]
        public TimeIndex FromTimeIndex {
            get {
                return FromTimeIndexField;
            } 
            set {
                FromTimeIndexField = value;
                NotifyPropertyChanged("FromTimeIndex");
            }
        }

        private TimeIndex FromTimeIndexField; 

        /// <summary>
        /// ToTimeIndex property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("ToTimeIndex")]
        public TimeIndex ToTimeIndex {
            get {
                return ToTimeIndexField;
            } 
            set {
                ToTimeIndexField = value;
                NotifyPropertyChanged("ToTimeIndex");
            }
        }

        private TimeIndex ToTimeIndexField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RepresentationIdentity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RepresentationIdentity", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the RepresentationIdentity xsd type.")]
    public partial class RepresentationIdentity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// IdenticalElementCount property
        /// </summary>
		[Required]
        [Description("Number of elements within each representation for which a representation identity is specified.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("IdenticalElementCount", DataType="positiveInteger")]
        public string IdenticalElementCount {
            get {
                return IdenticalElementCountField;
            } 
            set {
                IdenticalElementCountField = value;
                NotifyPropertyChanged("IdenticalElementCount");
            }
        }

        private string IdenticalElementCountField; 

        /// <summary>
        /// ElementIdentity property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ElementIdentity")]
		[XmlElement("ElementIdentity")]
        public List<ElementIdentity> ElementIdentity {
            get {
                return ElementIdentityField;
            } 
            set {
                ElementIdentityField = value;
                NotifyPropertyChanged("ElementIdentity");
            }
        }

         /// <summary>
         /// bool to indicate if ElementIdentity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ElementIdentitySpecified
         {
             get {
             if(ElementIdentityField!=null)
                 return ElementIdentityField.Count>0?true:false;
             else return false;
             }
         }
        private List<ElementIdentity> ElementIdentityField; 

        /// <summary>
        /// AdditionalGridTopology property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AdditionalGridTopology")]
		[XmlElement("AdditionalGridTopology")]
        public AdditionalGridTopology AdditionalGridTopology {
            get {
                return AdditionalGridTopologyField;
            } 
            set {
                AdditionalGridTopologyField = value;
                NotifyPropertyChanged("AdditionalGridTopology");
            }
        }

        private AdditionalGridTopology AdditionalGridTopologyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Activation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Activation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the Activation xsd type.")]
    public partial class Activation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ActivationToggleIndices property
        /// </summary>
		[Required]
        [Description("The index in the time series at which the state of the referencing object is changed. Toggle will change state from inactive to active, or toggle will change state from active to inactive.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("ActivationToggleIndices")]
        public AbstractIntegerArray ActivationToggleIndices {
            get {
                return ActivationToggleIndicesField;
            } 
            set {
                ActivationToggleIndicesField = value;
                NotifyPropertyChanged("ActivationToggleIndices");
            }
        }

        private AbstractIntegerArray ActivationToggleIndicesField; 

        /// <summary>
        /// TimeSeries property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TimeSeries")]
        public DataObjectReference TimeSeries {
            get {
                return TimeSeriesField;
            } 
            set {
                TimeSeriesField = value;
                NotifyPropertyChanged("TimeSeries");
            }
        }

        private DataObjectReference TimeSeriesField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the FaultThrow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="FaultThrow", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the FaultThrow xsd type.")]
    public partial class FaultThrow : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Throw property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ThrowKind")]
		[XmlElement("Throw")]
        public List<ThrowKind> Throw {
            get {
                return ThrowField;
            } 
            set {
                ThrowField = value;
                NotifyPropertyChanged("Throw");
            }
        }

         /// <summary>
         /// bool to indicate if Throw has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ThrowSpecified
         {
             get {
             if(ThrowField!=null)
                 return ThrowField.Count>0?true:false;
             else return false;
             }
         }
        private List<ThrowKind> ThrowField; 

        /// <summary>
        /// HasOccuredDuring property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeInterval")]
		[XmlElement("HasOccuredDuring")]
        public TimeInterval HasOccuredDuring {
            get {
                return HasOccuredDuringField;
            } 
            set {
                HasOccuredDuringField = value;
                NotifyPropertyChanged("HasOccuredDuring");
            }
        }

        private TimeInterval HasOccuredDuringField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimeInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimeInterval", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the TimeInterval xsd type.")]
    public partial class TimeInterval : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ChronoBottom property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChronoBottom")]
        public DataObjectReference ChronoBottom {
            get {
                return ChronoBottomField;
            } 
            set {
                ChronoBottomField = value;
                NotifyPropertyChanged("ChronoBottom");
            }
        }

        private DataObjectReference ChronoBottomField; 

        /// <summary>
        /// ChronoTop property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChronoTop")]
        public DataObjectReference ChronoTop {
            get {
                return ChronoTopField;
            } 
            set {
                ChronoTopField = value;
                NotifyPropertyChanged("ChronoTop");
            }
        }

        private DataObjectReference ChronoTopField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the PlaneAngleMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="PlaneAngleMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the PlaneAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        public PlaneAngleMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasure(double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthMeasure", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the LengthMeasure xsd type.")]
    public partial class LengthMeasure : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        public LengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasure(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GeologicUnitInterpretationIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GeologicUnitInterpretationIndex", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the GeologicUnitInterpretationIndex xsd type.")]
    public partial class GeologicUnitInterpretationIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("An index value associated to an instance of this type interpretation, given a specific ordering criteria.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private string IndexField; 

        /// <summary>
        /// Unit property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Unit")]
        public DataObjectReference Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private DataObjectReference UnitField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the StratigraphicUnitInterpretationIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="StratigraphicUnitInterpretationIndex", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the StratigraphicUnitInterpretationIndex xsd type.")]
    public partial class StratigraphicUnitInterpretationIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("An index value associated to an instance of this type of interpretation, given a specific ordering criteria.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private string IndexField; 

        /// <summary>
        /// Unit property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Unit")]
        public DataObjectReference Unit {
            get {
                return UnitField;
            } 
            set {
                UnitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private DataObjectReference UnitField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the HorizonInterpretationIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="HorizonInterpretationIndex", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the HorizonInterpretationIndex xsd type.")]
    public partial class HorizonInterpretationIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("An index value associated to an instance of this type of interpretation, given a specific ordering criteria")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private string IndexField; 

        /// <summary>
        /// StratigraphicRank property
        /// </summary>
		[Description("Number of the stratigraphic rank on which the previous indices have been defined.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("StratigraphicRank", DataType="nonNegativeInteger")]
        public string StratigraphicRank {
            get {
                return StratigraphicRankField;
            } 
            set {
                StratigraphicRankField = value;
                NotifyPropertyChanged("StratigraphicRank");
            }
        }

        private string StratigraphicRankField; 

        /// <summary>
        /// Horizon property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Horizon")]
        public DataObjectReference Horizon {
            get {
                return HorizonField;
            } 
            set {
                HorizonField = value;
                NotifyPropertyChanged("Horizon");
            }
        }

        private DataObjectReference HorizonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RockFluidUnitInterpretationIndex xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RockFluidUnitInterpretationIndex", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the RockFluidUnitInterpretationIndex xsd type.")]
    public partial class RockFluidUnitInterpretationIndex : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("Index of the fluid feature interpretation.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private string IndexField; 

        /// <summary>
        /// RockFluidUnit property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("RockFluidUnit")]
        public DataObjectReference RockFluidUnit {
            get {
                return RockFluidUnitField;
            } 
            set {
                RockFluidUnitField = value;
                NotifyPropertyChanged("RockFluidUnit");
            }
        }

        private DataObjectReference RockFluidUnitField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractContactInterpretationPart xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MultipleContactInterpretationPart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BinaryContactInterpretationPart))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractContactInterpretationPart", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractContactInterpretationPart xsd type.")]
    public abstract partial class AbstractContactInterpretationPart : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// ContactRelationship property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ContactRelationship")]
		[XmlElement("ContactRelationship")]
        public ContactRelationship? ContactRelationship {
            get {
                return ContactRelationshipField;
            } 
            set {
                ContactRelationshipField = value;
                 this.ContactRelationshipSpecified = true;
                NotifyPropertyChanged("ContactRelationship");
            }
        }

        
        private bool ContactRelationshipSpecifiedField = false;
        
        /// <summary>
        /// ContactRelationshipSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ContactRelationshipSpecified {
            get {
                return ContactRelationshipSpecifiedField;
            } 
            set {
                ContactRelationshipSpecifiedField = value;
                NotifyPropertyChanged("ContactRelationshipSpecified");
            }
        }
        
        private ContactRelationship? ContactRelationshipField; 

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [Description("contact index")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private string IndexField; 

        /// <summary>
        /// PartOf property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("PartOf")]
        public DataObjectReference PartOf {
            get {
                return PartOfField;
            } 
            set {
                PartOfField = value;
                NotifyPropertyChanged("PartOf");
            }
        }

        private DataObjectReference PartOfField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MultipleContactInterpretationPart xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MultipleContactInterpretationPart", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the MultipleContactInterpretationPart xsd type.")]
    public partial class MultipleContactInterpretationPart : AbstractContactInterpretationPart, INotifyPropertyChanged
    {

        /// <summary>
        /// Indicates a list of binary contacts (by their UUIDs) that participate in this multiple contact.
        /// </summary>
		[Required]
        [Description("Indicates a list of binary contacts (by their UUIDs) that participate in this multiple contact.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("With", DataType="nonNegativeInteger")]
        public List<string> With {
            get {
                return WithField;
            } 
            set {
                WithField = value;
                NotifyPropertyChanged("With");
            }
        }

         /// <summary>
         /// bool to indicate if With has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WithSpecified
         {
             get {
             if(WithField!=null)
                 return WithField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> WithField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the BinaryContactInterpretationPart xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="BinaryContactInterpretationPart", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the BinaryContactInterpretationPart xsd type.")]
    public partial class BinaryContactInterpretationPart : AbstractContactInterpretationPart, INotifyPropertyChanged
    {

        /// <summary>
        /// DirectObject property
        /// </summary>
		[Required]
        [Description("Data-object reference (by UUID link) to a geologic feature interpretation, which is the direct object of the sentence that defines how the contact was constructed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ContactElementReference")]
		[XmlElement("DirectObject")]
        public ContactElementReference DirectObject {
            get {
                return DirectObjectField;
            } 
            set {
                DirectObjectField = value;
                NotifyPropertyChanged("DirectObject");
            }
        }

        private ContactElementReference DirectObjectField; 

        /// <summary>
        /// Verb property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ContactVerb")]
		[XmlElement("Verb")]
        public ContactVerb? Verb {
            get {
                return VerbField;
            } 
            set {
                VerbField = value;
                 this.VerbSpecified = true;
                NotifyPropertyChanged("Verb");
            }
        }

        
        private bool VerbSpecifiedField = false;
        
        /// <summary>
        /// VerbSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VerbSpecified {
            get {
                return VerbSpecifiedField;
            } 
            set {
                VerbSpecifiedField = value;
                NotifyPropertyChanged("VerbSpecified");
            }
        }
        
        private ContactVerb? VerbField; 

        /// <summary>
        /// Data-object reference (by UUID link) to a geologic feature interpretation, which is the subject of the sentence that defines how the contact was constructed.
        /// </summary>
		[Required]
        [Description("Data-object reference (by UUID link) to a geologic feature interpretation, which is the subject of the sentence that defines how the contact was constructed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ContactElementReference")]
		[XmlElement("Subject")]
        public ContactElementReference Subject {
            get {
                return SubjectField;
            } 
            set {
                SubjectField = value;
                NotifyPropertyChanged("Subject");
            }
        }

        private ContactElementReference SubjectField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the NameValuePair xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="NameValuePair", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the NameValuePair xsd type.")]
    public partial class NameValuePair : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the NameValuePair class.
        /// </summary>
        public NameValuePair() {}

        /// <summary>
        /// Initializes a new instance of the NameValuePair class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public NameValuePair(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Name of the metadata information.
        /// </summary>
		[Required]
        [Description("Name of the metadata information.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Name")]
        public string Name {
            get {
                return NameField;
            } 
            set {
                NameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string NameField; 

        /// <summary>
        /// Value of the metadata information.
        /// </summary>
		[Required]
        [Description("Value of the metadata information.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Value")]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractVerticalCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GmlVerticalCrsDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrsEpsgCode))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractVerticalCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractVerticalCrs xsd type.")]
    public abstract partial class AbstractVerticalCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalUnknownCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalUnknownCrs xsd type.")]
    public partial class VerticalUnknownCrs : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		[Required]
        [StringLength(256)]
        [EnergisticsDataTypeAttribute(DataType = "DescriptionString")]
		[XmlElement("Unknown")]
        public string Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private string UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GmlVerticalCrsDefinition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GmlVerticalCrsDefinition", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GmlVerticalCrsDefinition xsd type.")]
    public partial class GmlVerticalCrsDefinition : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlVerticalCrsDefinition1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("GmlVerticalCrsDefinition")]
        public VerticalCRSType GmlVerticalCrsDefinition1 {
            get {
                return GmlVerticalCrsDefinition1Field;
            } 
            set {
                GmlVerticalCrsDefinition1Field = value;
                NotifyPropertyChanged("GmlVerticalCrsDefinition1");
            }
        }

        private VerticalCRSType GmlVerticalCrsDefinition1Field; 


    } //here
    }

    /// <summary>
    /// This class represents the VerticalCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCRSType xsd type.")]
    public partial class VerticalCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// verticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalCS")]
        public VerticalCSPropertyType VerticalCS {
            get {
                return verticalCSField;
            } 
            set {
                verticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSPropertyType verticalCSField; 

        /// <summary>
        /// verticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("verticalDatum")]
        public VerticalDatumPropertyType VerticalDatum {
            get {
                return verticalDatumField;
            } 
            set {
                verticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumPropertyType verticalDatumField; 


    } //here

    /// <summary>
    /// This class represents the VerticalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSPropertyType xsd type.")]
    public partial class VerticalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalCS")]
        public VerticalCSType VerticalCS {
            get {
                return VerticalCSField;
            } 
            set {
                VerticalCSField = value;
                NotifyPropertyChanged("VerticalCS");
            }
        }

        private VerticalCSType VerticalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalCSType xsd type.")]
    public partial class VerticalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractCoordinateSystemType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCoordinateSystem", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateSystemType xsd type.")]
    public abstract partial class AbstractCoordinateSystemType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axis property
        /// </summary>
		[RecurringElement]
		[XmlElement("axis")]
        public List<CoordinateSystemAxisPropertyType> Axis {
            get {
                return axisField;
            } 
            set {
                axisField = value;
                NotifyPropertyChanged("Axis");
            }
        }

         /// <summary>
         /// bool to indicate if Axis has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AxisSpecified
         {
             get {
             if(axisField!=null)
                 return axisField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateSystemAxisPropertyType> axisField; 

		/// <summary>
        /// aggregationType property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AggregationType")]
        [XmlAttribute("aggregationType")]
		
        public AggregationType AggregationType {
            get {
                return aggregationTypeField;
            } 
            set {
                aggregationTypeField = value;
                 this.AggregationTypeSpecified = true;
                NotifyPropertyChanged("AggregationType");
            }
        }

        private AggregationType aggregationTypeField; 

        /// <summary>
        /// aggregationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AggregationTypeSpecified {
            get {
                return aggregationTypeSpecifiedField;
            } 
            set {
                aggregationTypeSpecifiedField = value;
                NotifyPropertyChanged("AggregationTypeSpecified");
            }
        }

        private bool aggregationTypeSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("axis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisPropertyType xsd type.")]
    public partial class CoordinateSystemAxisPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CoordinateSystemAxis property
        /// </summary>
		[ComponentElement]
		[XmlElement("CoordinateSystemAxis")]
        public CoordinateSystemAxisType CoordinateSystemAxis {
            get {
                return CoordinateSystemAxisField;
            } 
            set {
                CoordinateSystemAxisField = value;
                NotifyPropertyChanged("CoordinateSystemAxis");
            }
        }

        private CoordinateSystemAxisType CoordinateSystemAxisField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CoordinateSystemAxisType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CoordinateSystemAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CoordinateSystemAxisType xsd type.")]
    public partial class CoordinateSystemAxisType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// axisAbbrev property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisAbbrev")]
        public CodeType AxisAbbrev {
            get {
                return axisAbbrevField;
            } 
            set {
                axisAbbrevField = value;
                NotifyPropertyChanged("AxisAbbrev");
            }
        }

        private CodeType axisAbbrevField; 

        /// <summary>
        /// axisDirection property
        /// </summary>
		[ComponentElement]
		[XmlElement("axisDirection")]
        public CodeWithAuthorityType AxisDirection {
            get {
                return axisDirectionField;
            } 
            set {
                axisDirectionField = value;
                NotifyPropertyChanged("AxisDirection");
            }
        }

        private CodeWithAuthorityType axisDirectionField; 

        /// <summary>
        /// minimumValue property
        /// </summary>
		
		[XmlElement("minimumValue")]
        public double? MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                 this.MinimumValueSpecified = true;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private double? minimumValueField; 

        /// <summary>
        /// minimumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MinimumValueSpecified {
            get {
                return minimumValueSpecifiedField;
            } 
            set {
                minimumValueSpecifiedField = value;
                NotifyPropertyChanged("MinimumValueSpecified");
            }
        }

        private bool minimumValueSpecifiedField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		
		[XmlElement("maximumValue")]
        public double? MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                 this.MaximumValueSpecified = true;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private double? maximumValueField; 

        /// <summary>
        /// maximumValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaximumValueSpecified {
            get {
                return maximumValueSpecifiedField;
            } 
            set {
                maximumValueSpecifiedField = value;
                NotifyPropertyChanged("MaximumValueSpecified");
            }
        }

        private bool maximumValueSpecifiedField; 

        /// <summary>
        /// rangeMeaning property
        /// </summary>
		[ComponentElement]
		[XmlElement("rangeMeaning")]
        public CodeWithAuthorityType RangeMeaning {
            get {
                return rangeMeaningField;
            } 
            set {
                rangeMeaningField = value;
                NotifyPropertyChanged("RangeMeaning");
            }
        }

        private CodeWithAuthorityType rangeMeaningField; 


    } //here

    /// <summary>
    /// This class represents the CodeType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CodeWithAuthorityType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("name", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeType xsd type.")]
    public partial class CodeType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        public CodeType() {}

        /// <summary>
        /// Initializes a new instance of the CodeType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeSpace property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeSpace")]
		
        public string CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private string codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CodeWithAuthorityType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("identifier", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CodeWithAuthorityType xsd type.")]
    public partial class CodeWithAuthorityType : CodeType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        public CodeWithAuthorityType() {}

        /// <summary>
        /// Initializes a new instance of the CodeWithAuthorityType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeWithAuthorityType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the IdentifiedObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="IdentifiedObjectType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the IdentifiedObjectType xsd type.")]
    public abstract partial class IdentifiedObjectType : DefinitionType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the DefinitionType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Definition", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the DefinitionType xsd type.")]
    public partial class DefinitionType : DefinitionBaseType, INotifyPropertyChanged
    {

        /// <summary>
        /// remarks property
        /// </summary>
		
		[XmlElement("remarks")]
        public string Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string remarksField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DefinitionBaseType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DefinitionBaseType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the DefinitionBaseType xsd type.")]
    public partial class DefinitionBaseType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// This class represents the AbstractGMLType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimeObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionBaseType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DefinitionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IdentifiedObjectType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateOperationType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PrimeMeridianType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CoordinateSystemAxisType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCoordinateSystemType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SphericalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CartesianCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EllipsoidalCSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGML", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGMLType xsd type.")]
    public abstract partial class AbstractGMLType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
		[XmlElement("description")]
        public StringOrRefType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private StringOrRefType descriptionField; 

        /// <summary>
        /// descriptionReference property
        /// </summary>
		[ComponentElement]
		[XmlElement("descriptionReference")]
        public ReferenceType DescriptionReference {
            get {
                return descriptionReferenceField;
            } 
            set {
                descriptionReferenceField = value;
                NotifyPropertyChanged("DescriptionReference");
            }
        }

        private ReferenceType descriptionReferenceField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("identifier")]
        public CodeWithAuthorityType Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private CodeWithAuthorityType identifierField; 

        /// <summary>
        /// name property
        /// </summary>
		[RecurringElement]
		[XmlElement("name")]
        public List<CodeType> Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

         /// <summary>
         /// bool to indicate if Name has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameSpecified
         {
             get {
             if(nameField!=null)
                 return nameField.Count>0?true:false;
             else return false;
             }
         }
        private List<CodeType> nameField; 

		/// <summary>
        /// id property
        /// </summary>
		
        [XmlAttribute("id", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the StringOrRefType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("description", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the StringOrRefType xsd type.")]
    public partial class StringOrRefType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        public StringOrRefType() {}

        /// <summary>
        /// Initializes a new instance of the StringOrRefType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringOrRefType(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the ReferenceType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("descriptionReference", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ReferenceType xsd type.")]
    public partial class ReferenceType : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// owns property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "boolean")]
        [XmlAttribute("owns")]
		
        public bool Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private bool ownsField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractTimeObjectType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTimePrimitiveType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimeObject", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimeObjectType xsd type.")]
    public abstract partial class AbstractTimeObjectType : AbstractGMLType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the AbstractTimePrimitiveType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractTimePrimitiveType xsd type.")]
    public abstract partial class AbstractTimePrimitiveType : AbstractTimeObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// relatedTime property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RelatedTimeType")]
		[XmlElement("relatedTime")]
        public List<RelatedTimeType> RelatedTime {
            get {
                return relatedTimeField;
            } 
            set {
                relatedTimeField = value;
                NotifyPropertyChanged("RelatedTime");
            }
        }

         /// <summary>
         /// bool to indicate if RelatedTime has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RelatedTimeSpecified
         {
             get {
             if(relatedTimeField!=null)
                 return relatedTimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<RelatedTimeType> relatedTimeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the RelatedTimeType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="RelatedTimeType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the RelatedTimeType xsd type.")]
    public partial class RelatedTimeType : TimePrimitivePropertyType, INotifyPropertyChanged
    {

		/// <summary>
        /// relativePosition property
        /// </summary>
		
        [XmlAttribute("relativePosition")]
		
        public RelatedTimeTypeRelativePosition RelativePosition {
            get {
                return relativePositionField;
            } 
            set {
                relativePositionField = value;
                 this.RelativePositionSpecified = true;
                NotifyPropertyChanged("RelativePosition");
            }
        }

        private RelatedTimeTypeRelativePosition relativePositionField; 

        /// <summary>
        /// relativePositionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RelativePositionSpecified {
            get {
                return relativePositionSpecifiedField;
            } 
            set {
                relativePositionSpecifiedField = value;
                NotifyPropertyChanged("RelativePositionSpecified");
            }
        }

        private bool relativePositionSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TimePrimitivePropertyType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RelatedTimeType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TimePrimitivePropertyType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the TimePrimitivePropertyType xsd type.")]
    public partial class TimePrimitivePropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 

		/// <summary>
        /// owns property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "boolean")]
        [XmlAttribute("owns")]
		
        public bool Owns {
            get {
                return ownsField;
            } 
            set {
                ownsField = value;
                NotifyPropertyChanged("Owns");
            }
        }

        private bool ownsField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCoordinateOperationType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralConversionType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractOperation", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCoordinateOperationType xsd type.")]
    public abstract partial class AbstractCoordinateOperationType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 

        /// <summary>
        /// operationVersion property
        /// </summary>
		
		[XmlElement("operationVersion")]
        public string OperationVersion {
            get {
                return operationVersionField;
            } 
            set {
                operationVersionField = value;
                NotifyPropertyChanged("OperationVersion");
            }
        }

        private string operationVersionField; 

        /// <summary>
        /// coordinateOperationAccuracy property
        /// </summary>
		[RecurringElement]
		[XmlElement("coordinateOperationAccuracy")]
        public List<CoordinateOperationAccuracy> CoordinateOperationAccuracy {
            get {
                return coordinateOperationAccuracyField;
            } 
            set {
                coordinateOperationAccuracyField = value;
                NotifyPropertyChanged("CoordinateOperationAccuracy");
            }
        }

         /// <summary>
         /// bool to indicate if CoordinateOperationAccuracy has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CoordinateOperationAccuracySpecified
         {
             get {
             if(coordinateOperationAccuracyField!=null)
                 return coordinateOperationAccuracyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CoordinateOperationAccuracy> coordinateOperationAccuracyField; 

        /// <summary>
        /// sourceCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("sourceCRS")]
        public CRSPropertyType SourceCRS {
            get {
                return sourceCRSField;
            } 
            set {
                sourceCRSField = value;
                NotifyPropertyChanged("SourceCRS");
            }
        }

        private CRSPropertyType sourceCRSField; 

        /// <summary>
        /// targetCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("targetCRS")]
        public CRSPropertyType TargetCRS {
            get {
                return targetCRSField;
            } 
            set {
                targetCRSField = value;
                NotifyPropertyChanged("TargetCRS");
            }
        }

        private CRSPropertyType targetCRSField; 


    } //here

    /// <summary>
    /// This class represents the domainOfValidity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the domainOfValidity xsd type.")]
    public partial class DomainOfValidity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_Extent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd")]
        public EX_Extent_Type EX_Extent {
            get {
                return EX_ExtentField;
            } 
            set {
                EX_ExtentField = value;
                NotifyPropertyChanged("EX_Extent");
            }
        }

        private EX_Extent_Type EX_ExtentField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EX_Extent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_Extent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_Extent_Type xsd type.")]
    public partial class EX_Extent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// geographicElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_GeographicExtent_PropertyType")]
		[XmlElement("geographicElement")]
        public List<EX_GeographicExtent_PropertyType> GeographicElement {
            get {
                return geographicElementField;
            } 
            set {
                geographicElementField = value;
                NotifyPropertyChanged("GeographicElement");
            }
        }

         /// <summary>
         /// bool to indicate if GeographicElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeographicElementSpecified
         {
             get {
             if(geographicElementField!=null)
                 return geographicElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_GeographicExtent_PropertyType> geographicElementField; 

        /// <summary>
        /// temporalElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_TemporalExtent_PropertyType")]
		[XmlElement("temporalElement")]
        public List<EX_TemporalExtent_PropertyType> TemporalElement {
            get {
                return temporalElementField;
            } 
            set {
                temporalElementField = value;
                NotifyPropertyChanged("TemporalElement");
            }
        }

         /// <summary>
         /// bool to indicate if TemporalElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TemporalElementSpecified
         {
             get {
             if(temporalElementField!=null)
                 return temporalElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_TemporalExtent_PropertyType> temporalElementField; 

        /// <summary>
        /// verticalElement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "EX_VerticalExtent_PropertyType")]
		[XmlElement("verticalElement")]
        public List<EX_VerticalExtent_PropertyType> VerticalElement {
            get {
                return verticalElementField;
            } 
            set {
                verticalElementField = value;
                NotifyPropertyChanged("VerticalElement");
            }
        }

         /// <summary>
         /// bool to indicate if VerticalElement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VerticalElementSpecified
         {
             get {
             if(verticalElementField!=null)
                 return verticalElementField.Count>0?true:false;
             else return false;
             }
         }
        private List<EX_VerticalExtent_PropertyType> verticalElementField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CharacterString_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CharacterString_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the CharacterString_PropertyType xsd type.")]
    public partial class CharacterString_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CharacterString property
        /// </summary>
		
		[XmlElement("CharacterString")]
        public string CharacterString {
            get {
                return CharacterStringField;
            } 
            set {
                CharacterStringField = value;
                NotifyPropertyChanged("CharacterString");
            }
        }

        private string CharacterStringField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_GeographicExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_GeographicExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_GeographicExtent_PropertyType xsd type.")]
    public partial class EX_GeographicExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractEX_GeographicExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractEX_GeographicExtent")]
        public AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtent {
            get {
                return AbstractEX_GeographicExtentField;
            } 
            set {
                AbstractEX_GeographicExtentField = value;
                NotifyPropertyChanged("AbstractEX_GeographicExtent");
            }
        }

        private AbstractEX_GeographicExtent_Type AbstractEX_GeographicExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractEX_GeographicExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractEX_GeographicExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractEX_GeographicExtent_Type xsd type.")]
    public abstract partial class AbstractEX_GeographicExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extentTypeCode property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Boolean_PropertyType")]
		[XmlElement("extentTypeCode")]
        public Boolean_PropertyType ExtentTypeCode {
            get {
                return extentTypeCodeField;
            } 
            set {
                extentTypeCodeField = value;
                NotifyPropertyChanged("ExtentTypeCode");
            }
        }

        private Boolean_PropertyType extentTypeCodeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Boolean_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Boolean_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Boolean_PropertyType xsd type.")]
    public partial class Boolean_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Boolean property
        /// </summary>
		
		[XmlElement("Boolean")]
        public bool? Boolean {
            get {
                return BooleanField;
            } 
            set {
                BooleanField = value;
                NotifyPropertyChanged("Boolean");
            }
        }

        private bool? BooleanField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractObject_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Result_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Series_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_OnlineResource_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Address_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Telephone_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Contact_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_ResponsibleParty_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Date_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CI_Citation_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MD_Identifier_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_Element_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_VerticalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_TemporalExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractEX_GeographicExtent_Type))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EX_Extent_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractObject_Type", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the AbstractObject_Type xsd type.")]
    public abstract partial class AbstractObject_Type : Object, INotifyPropertyChanged
    {

		/// <summary>
        /// id property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "ID")]
        [XmlAttribute("id")]
		
        public string Id {
            get {
                return idField;
            } 
            set {
                idField = value;
                NotifyPropertyChanged("Id");
            }
        }

        private string idField; 

		/// <summary>
        /// uuid property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuid")]
		
        public string Uuid {
            get {
                return uuidField;
            } 
            set {
                uuidField = value;
                NotifyPropertyChanged("Uuid");
            }
        }

        private string uuidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Result_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Result", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Result_Type xsd type.")]
    public abstract partial class AbstractDQ_Result_Type : AbstractObject_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the CI_Series_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Series", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Series_Type xsd type.")]
    public partial class CI_Series_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// issueIdentification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("issueIdentification")]
        public CharacterString_PropertyType IssueIdentification {
            get {
                return issueIdentificationField;
            } 
            set {
                issueIdentificationField = value;
                NotifyPropertyChanged("IssueIdentification");
            }
        }

        private CharacterString_PropertyType issueIdentificationField; 

        /// <summary>
        /// page property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("page")]
        public CharacterString_PropertyType Page {
            get {
                return pageField;
            } 
            set {
                pageField = value;
                NotifyPropertyChanged("Page");
            }
        }

        private CharacterString_PropertyType pageField; 


    } //here

    /// <summary>
    /// This class represents the CI_OnlineResource_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_OnlineResource", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_OnlineResource_Type xsd type.")]
    public partial class CI_OnlineResource_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// linkage property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "URL_PropertyType")]
		[XmlElement("linkage")]
        public URL_PropertyType Linkage {
            get {
                return linkageField;
            } 
            set {
                linkageField = value;
                NotifyPropertyChanged("Linkage");
            }
        }

        private URL_PropertyType linkageField; 

        /// <summary>
        /// protocol property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("protocol")]
        public CharacterString_PropertyType Protocol {
            get {
                return protocolField;
            } 
            set {
                protocolField = value;
                NotifyPropertyChanged("Protocol");
            }
        }

        private CharacterString_PropertyType protocolField; 

        /// <summary>
        /// applicationProfile property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("applicationProfile")]
        public CharacterString_PropertyType ApplicationProfile {
            get {
                return applicationProfileField;
            } 
            set {
                applicationProfileField = value;
                NotifyPropertyChanged("ApplicationProfile");
            }
        }

        private CharacterString_PropertyType applicationProfileField; 

        /// <summary>
        /// name property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("name")]
        public CharacterString_PropertyType Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private CharacterString_PropertyType nameField; 

        /// <summary>
        /// description property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("description")]
        public CharacterString_PropertyType Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private CharacterString_PropertyType descriptionField; 

        /// <summary>
        /// function property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_OnLineFunctionCode_PropertyType")]
		[XmlElement("function")]
        public CI_OnLineFunctionCode_PropertyType Function {
            get {
                return functionField;
            } 
            set {
                functionField = value;
                NotifyPropertyChanged("Function");
            }
        }

        private CI_OnLineFunctionCode_PropertyType functionField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the URL_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="URL_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the URL_PropertyType xsd type.")]
    public partial class URL_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// URL property
        /// </summary>
		
		[XmlElement("URL", DataType="anyURI")]
        public string URL {
            get {
                return URLField;
            } 
            set {
                URLField = value;
                NotifyPropertyChanged("URL");
            }
        }

        private string URLField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnLineFunctionCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnLineFunctionCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnLineFunctionCode_PropertyType xsd type.")]
    public partial class CI_OnLineFunctionCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnLineFunctionCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnLineFunctionCode")]
        public CodeListValue_Type CI_OnLineFunctionCode {
            get {
                return CI_OnLineFunctionCodeField;
            } 
            set {
                CI_OnLineFunctionCodeField = value;
                NotifyPropertyChanged("CI_OnLineFunctionCode");
            }
        }

        private CodeListValue_Type CI_OnLineFunctionCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CodeListValue_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gco")]
    [System.Xml.Serialization.XmlRootAttribute("CI_DateTypeCode", Namespace="http://www.isotc211.org/2005/gco", IsNullable=false)]
	[Description("This class represents the CodeListValue_Type xsd type.")]
    public partial class CodeListValue_Type : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        public CodeListValue_Type() {}

        /// <summary>
        /// Initializes a new instance of the CodeListValue_Type class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CodeListValue_Type(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// codeList property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeList")]
		
        public string CodeList {
            get {
                return codeListField;
            } 
            set {
                codeListField = value;
                NotifyPropertyChanged("CodeList");
            }
        }

        private string codeListField; 

		/// <summary>
        /// codeListValue property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeListValue")]
		
        public string CodeListValue {
            get {
                return codeListValueField;
            } 
            set {
                codeListValueField = value;
                NotifyPropertyChanged("CodeListValue");
            }
        }

        private string codeListValueField; 

		/// <summary>
        /// codeSpace property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "anyURI")]
        [XmlAttribute("codeSpace")]
		
        public string CodeSpace {
            get {
                return codeSpaceField;
            } 
            set {
                codeSpaceField = value;
                NotifyPropertyChanged("CodeSpace");
            }
        }

        private string codeSpaceField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CI_Address_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Address", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Address_Type xsd type.")]
    public partial class CI_Address_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// deliveryPoint property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("deliveryPoint")]
        public List<CharacterString_PropertyType> DeliveryPoint {
            get {
                return deliveryPointField;
            } 
            set {
                deliveryPointField = value;
                NotifyPropertyChanged("DeliveryPoint");
            }
        }

         /// <summary>
         /// bool to indicate if DeliveryPoint has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DeliveryPointSpecified
         {
             get {
             if(deliveryPointField!=null)
                 return deliveryPointField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> deliveryPointField; 

        /// <summary>
        /// city property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("city")]
        public CharacterString_PropertyType City {
            get {
                return cityField;
            } 
            set {
                cityField = value;
                NotifyPropertyChanged("City");
            }
        }

        private CharacterString_PropertyType cityField; 

        /// <summary>
        /// administrativeArea property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("administrativeArea")]
        public CharacterString_PropertyType AdministrativeArea {
            get {
                return administrativeAreaField;
            } 
            set {
                administrativeAreaField = value;
                NotifyPropertyChanged("AdministrativeArea");
            }
        }

        private CharacterString_PropertyType administrativeAreaField; 

        /// <summary>
        /// postalCode property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("postalCode")]
        public CharacterString_PropertyType PostalCode {
            get {
                return postalCodeField;
            } 
            set {
                postalCodeField = value;
                NotifyPropertyChanged("PostalCode");
            }
        }

        private CharacterString_PropertyType postalCodeField; 

        /// <summary>
        /// country property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("country")]
        public CharacterString_PropertyType Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private CharacterString_PropertyType countryField; 

        /// <summary>
        /// electronicMailAddress property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("electronicMailAddress")]
        public List<CharacterString_PropertyType> ElectronicMailAddress {
            get {
                return electronicMailAddressField;
            } 
            set {
                electronicMailAddressField = value;
                NotifyPropertyChanged("ElectronicMailAddress");
            }
        }

         /// <summary>
         /// bool to indicate if ElectronicMailAddress has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ElectronicMailAddressSpecified
         {
             get {
             if(electronicMailAddressField!=null)
                 return electronicMailAddressField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> electronicMailAddressField; 


    } //here

    /// <summary>
    /// This class represents the CI_Telephone_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Telephone", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Telephone_Type xsd type.")]
    public partial class CI_Telephone_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// voice property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("voice")]
        public List<CharacterString_PropertyType> Voice {
            get {
                return voiceField;
            } 
            set {
                voiceField = value;
                NotifyPropertyChanged("Voice");
            }
        }

         /// <summary>
         /// bool to indicate if Voice has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VoiceSpecified
         {
             get {
             if(voiceField!=null)
                 return voiceField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> voiceField; 

        /// <summary>
        /// facsimile property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("facsimile")]
        public List<CharacterString_PropertyType> Facsimile {
            get {
                return facsimileField;
            } 
            set {
                facsimileField = value;
                NotifyPropertyChanged("Facsimile");
            }
        }

         /// <summary>
         /// bool to indicate if Facsimile has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacsimileSpecified
         {
             get {
             if(facsimileField!=null)
                 return facsimileField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> facsimileField; 


    } //here

    /// <summary>
    /// This class represents the CI_Contact_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Contact", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Contact_Type xsd type.")]
    public partial class CI_Contact_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// phone property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Telephone_PropertyType")]
		[XmlElement("phone")]
        public CI_Telephone_PropertyType Phone {
            get {
                return phoneField;
            } 
            set {
                phoneField = value;
                NotifyPropertyChanged("Phone");
            }
        }

        private CI_Telephone_PropertyType phoneField; 

        /// <summary>
        /// address property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Address_PropertyType")]
		[XmlElement("address")]
        public CI_Address_PropertyType Address {
            get {
                return addressField;
            } 
            set {
                addressField = value;
                NotifyPropertyChanged("Address");
            }
        }

        private CI_Address_PropertyType addressField; 

        /// <summary>
        /// onlineResource property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_OnlineResource_PropertyType")]
		[XmlElement("onlineResource")]
        public CI_OnlineResource_PropertyType OnlineResource {
            get {
                return onlineResourceField;
            } 
            set {
                onlineResourceField = value;
                NotifyPropertyChanged("OnlineResource");
            }
        }

        private CI_OnlineResource_PropertyType onlineResourceField; 

        /// <summary>
        /// hoursOfService property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("hoursOfService")]
        public CharacterString_PropertyType HoursOfService {
            get {
                return hoursOfServiceField;
            } 
            set {
                hoursOfServiceField = value;
                NotifyPropertyChanged("HoursOfService");
            }
        }

        private CharacterString_PropertyType hoursOfServiceField; 

        /// <summary>
        /// contactInstructions property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("contactInstructions")]
        public CharacterString_PropertyType ContactInstructions {
            get {
                return contactInstructionsField;
            } 
            set {
                contactInstructionsField = value;
                NotifyPropertyChanged("ContactInstructions");
            }
        }

        private CharacterString_PropertyType contactInstructionsField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Telephone_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Telephone_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Telephone_PropertyType xsd type.")]
    public partial class CI_Telephone_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Telephone property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Telephone")]
        public CI_Telephone_Type CI_Telephone {
            get {
                return CI_TelephoneField;
            } 
            set {
                CI_TelephoneField = value;
                NotifyPropertyChanged("CI_Telephone");
            }
        }

        private CI_Telephone_Type CI_TelephoneField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Address_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Address_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Address_PropertyType xsd type.")]
    public partial class CI_Address_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Address property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Address")]
        public CI_Address_Type CI_Address {
            get {
                return CI_AddressField;
            } 
            set {
                CI_AddressField = value;
                NotifyPropertyChanged("CI_Address");
            }
        }

        private CI_Address_Type CI_AddressField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_OnlineResource_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_OnlineResource_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_OnlineResource_PropertyType xsd type.")]
    public partial class CI_OnlineResource_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_OnlineResource property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_OnlineResource")]
        public CI_OnlineResource_Type CI_OnlineResource {
            get {
                return CI_OnlineResourceField;
            } 
            set {
                CI_OnlineResourceField = value;
                NotifyPropertyChanged("CI_OnlineResource");
            }
        }

        private CI_OnlineResource_Type CI_OnlineResourceField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_ResponsibleParty_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_ResponsibleParty", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_ResponsibleParty_Type xsd type.")]
    public partial class CI_ResponsibleParty_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// individualName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("individualName")]
        public CharacterString_PropertyType IndividualName {
            get {
                return individualNameField;
            } 
            set {
                individualNameField = value;
                NotifyPropertyChanged("IndividualName");
            }
        }

        private CharacterString_PropertyType individualNameField; 

        /// <summary>
        /// organisationName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("organisationName")]
        public CharacterString_PropertyType OrganisationName {
            get {
                return organisationNameField;
            } 
            set {
                organisationNameField = value;
                NotifyPropertyChanged("OrganisationName");
            }
        }

        private CharacterString_PropertyType organisationNameField; 

        /// <summary>
        /// positionName property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("positionName")]
        public CharacterString_PropertyType PositionName {
            get {
                return positionNameField;
            } 
            set {
                positionNameField = value;
                NotifyPropertyChanged("PositionName");
            }
        }

        private CharacterString_PropertyType positionNameField; 

        /// <summary>
        /// contactInfo property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Contact_PropertyType")]
		[XmlElement("contactInfo")]
        public CI_Contact_PropertyType ContactInfo {
            get {
                return contactInfoField;
            } 
            set {
                contactInfoField = value;
                NotifyPropertyChanged("ContactInfo");
            }
        }

        private CI_Contact_PropertyType contactInfoField; 

        /// <summary>
        /// role property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_RoleCode_PropertyType")]
		[XmlElement("role")]
        public CI_RoleCode_PropertyType Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private CI_RoleCode_PropertyType roleField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Contact_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Contact_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Contact_PropertyType xsd type.")]
    public partial class CI_Contact_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Contact property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Contact")]
        public CI_Contact_Type CI_Contact {
            get {
                return CI_ContactField;
            } 
            set {
                CI_ContactField = value;
                NotifyPropertyChanged("CI_Contact");
            }
        }

        private CI_Contact_Type CI_ContactField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_RoleCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_RoleCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_RoleCode_PropertyType xsd type.")]
    public partial class CI_RoleCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_RoleCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_RoleCode")]
        public CodeListValue_Type CI_RoleCode {
            get {
                return CI_RoleCodeField;
            } 
            set {
                CI_RoleCodeField = value;
                NotifyPropertyChanged("CI_RoleCode");
            }
        }

        private CodeListValue_Type CI_RoleCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Date_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Date", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Date_Type xsd type.")]
    public partial class CI_Date_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Date_PropertyType")]
		[XmlElement("date")]
        public Date_PropertyType Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private Date_PropertyType dateField; 

        /// <summary>
        /// dateType property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_DateTypeCode_PropertyType")]
		[XmlElement("dateType")]
        public CI_DateTypeCode_PropertyType DateType {
            get {
                return dateTypeField;
            } 
            set {
                dateTypeField = value;
                NotifyPropertyChanged("DateType");
            }
        }

        private CI_DateTypeCode_PropertyType dateTypeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Date_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Date_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Date_PropertyType xsd type.")]
    public partial class Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date property
        /// </summary>
        [XmlElement("Date")]
        public string Date {
            get {
                return DateField;
            } 
            set {
                DateField = value;
                DateSpecified = (value!=null);
                NotifyPropertyChanged("Date");
            }
        }

        private string DateField; 
        private bool dateSpecified = false; 

        /// <summary>
        /// bool to indicate if Date has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateSpecified
        {
            get {
                return dateSpecified;
            }
            set {
                dateSpecified= value;
            }
        }

        /// <summary>
        /// DateTime property
        /// </summary>
        [XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                DateTimeSpecified = (value!=null);
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 
        private bool dateTimeSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTime has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeSpecified
        {
            get {
                return dateTimeSpecified;
            }
            set {
                dateTimeSpecified= value;
            }
        }


		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_DateTypeCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_DateTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_DateTypeCode_PropertyType xsd type.")]
    public partial class CI_DateTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_DateTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_DateTypeCode")]
        public CodeListValue_Type CI_DateTypeCode {
            get {
                return CI_DateTypeCodeField;
            } 
            set {
                CI_DateTypeCodeField = value;
                NotifyPropertyChanged("CI_DateTypeCode");
            }
        }

        private CodeListValue_Type CI_DateTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the CI_Citation_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("CI_Citation", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the CI_Citation_Type xsd type.")]
    public partial class CI_Citation_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// title property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("title")]
        public CharacterString_PropertyType Title {
            get {
                return titleField;
            } 
            set {
                titleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private CharacterString_PropertyType titleField; 

        /// <summary>
        /// alternateTitle property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("alternateTitle")]
        public List<CharacterString_PropertyType> AlternateTitle {
            get {
                return alternateTitleField;
            } 
            set {
                alternateTitleField = value;
                NotifyPropertyChanged("AlternateTitle");
            }
        }

         /// <summary>
         /// bool to indicate if AlternateTitle has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AlternateTitleSpecified
         {
             get {
             if(alternateTitleField!=null)
                 return alternateTitleField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> alternateTitleField; 

        /// <summary>
        /// date property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Date_PropertyType")]
		[XmlElement("date")]
        public List<CI_Date_PropertyType> Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

         /// <summary>
         /// bool to indicate if Date has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DateSpecified
         {
             get {
             if(dateField!=null)
                 return dateField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_Date_PropertyType> dateField; 

        /// <summary>
        /// edition property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("edition")]
        public CharacterString_PropertyType Edition {
            get {
                return editionField;
            } 
            set {
                editionField = value;
                NotifyPropertyChanged("Edition");
            }
        }

        private CharacterString_PropertyType editionField; 

        /// <summary>
        /// editionDate property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Date_PropertyType")]
		[XmlElement("editionDate")]
        public Date_PropertyType EditionDate {
            get {
                return editionDateField;
            } 
            set {
                editionDateField = value;
                NotifyPropertyChanged("EditionDate");
            }
        }

        private Date_PropertyType editionDateField; 

        /// <summary>
        /// identifier property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "MD_Identifier_PropertyType")]
		[XmlElement("identifier")]
        public List<MD_Identifier_PropertyType> Identifier {
            get {
                return identifierField;
            } 
            set {
                identifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

         /// <summary>
         /// bool to indicate if Identifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IdentifierSpecified
         {
             get {
             if(identifierField!=null)
                 return identifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<MD_Identifier_PropertyType> identifierField; 

        /// <summary>
        /// citedResponsibleParty property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_ResponsibleParty_PropertyType")]
		[XmlElement("citedResponsibleParty")]
        public List<CI_ResponsibleParty_PropertyType> CitedResponsibleParty {
            get {
                return citedResponsiblePartyField;
            } 
            set {
                citedResponsiblePartyField = value;
                NotifyPropertyChanged("CitedResponsibleParty");
            }
        }

         /// <summary>
         /// bool to indicate if CitedResponsibleParty has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CitedResponsiblePartySpecified
         {
             get {
             if(citedResponsiblePartyField!=null)
                 return citedResponsiblePartyField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_ResponsibleParty_PropertyType> citedResponsiblePartyField; 

        /// <summary>
        /// presentationForm property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_PresentationFormCode_PropertyType")]
		[XmlElement("presentationForm")]
        public List<CI_PresentationFormCode_PropertyType> PresentationForm {
            get {
                return presentationFormField;
            } 
            set {
                presentationFormField = value;
                NotifyPropertyChanged("PresentationForm");
            }
        }

         /// <summary>
         /// bool to indicate if PresentationForm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PresentationFormSpecified
         {
             get {
             if(presentationFormField!=null)
                 return presentationFormField.Count>0?true:false;
             else return false;
             }
         }
        private List<CI_PresentationFormCode_PropertyType> presentationFormField; 

        /// <summary>
        /// series property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Series_PropertyType")]
		[XmlElement("series")]
        public CI_Series_PropertyType Series {
            get {
                return seriesField;
            } 
            set {
                seriesField = value;
                NotifyPropertyChanged("Series");
            }
        }

        private CI_Series_PropertyType seriesField; 

        /// <summary>
        /// otherCitationDetails property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("otherCitationDetails")]
        public CharacterString_PropertyType OtherCitationDetails {
            get {
                return otherCitationDetailsField;
            } 
            set {
                otherCitationDetailsField = value;
                NotifyPropertyChanged("OtherCitationDetails");
            }
        }

        private CharacterString_PropertyType otherCitationDetailsField; 

        /// <summary>
        /// collectiveTitle property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("collectiveTitle")]
        public CharacterString_PropertyType CollectiveTitle {
            get {
                return collectiveTitleField;
            } 
            set {
                collectiveTitleField = value;
                NotifyPropertyChanged("CollectiveTitle");
            }
        }

        private CharacterString_PropertyType collectiveTitleField; 

        /// <summary>
        /// ISBN property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("ISBN")]
        public CharacterString_PropertyType ISBN {
            get {
                return ISBNField;
            } 
            set {
                ISBNField = value;
                NotifyPropertyChanged("ISBN");
            }
        }

        private CharacterString_PropertyType ISBNField; 

        /// <summary>
        /// ISSN property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("ISSN")]
        public CharacterString_PropertyType ISSN {
            get {
                return ISSNField;
            } 
            set {
                ISSNField = value;
                NotifyPropertyChanged("ISSN");
            }
        }

        private CharacterString_PropertyType ISSNField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Date_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Date_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Date_PropertyType xsd type.")]
    public partial class CI_Date_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Date property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Date")]
        public CI_Date_Type CI_Date {
            get {
                return CI_DateField;
            } 
            set {
                CI_DateField = value;
                NotifyPropertyChanged("CI_Date");
            }
        }

        private CI_Date_Type CI_DateField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the MD_Identifier_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="MD_Identifier_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the MD_Identifier_PropertyType xsd type.")]
    public partial class MD_Identifier_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// MD_Identifier property
        /// </summary>
		[ComponentElement]
		[XmlElement("MD_Identifier")]
        public MD_Identifier_Type MD_Identifier {
            get {
                return MD_IdentifierField;
            } 
            set {
                MD_IdentifierField = value;
                NotifyPropertyChanged("MD_Identifier");
            }
        }

        private MD_Identifier_Type MD_IdentifierField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the MD_Identifier_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("MD_Identifier", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the MD_Identifier_Type xsd type.")]
    public partial class MD_Identifier_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// authority property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Citation_PropertyType")]
		[XmlElement("authority")]
        public CI_Citation_PropertyType Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private CI_Citation_PropertyType authorityField; 

        /// <summary>
        /// code property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("code")]
        public CharacterString_PropertyType Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private CharacterString_PropertyType codeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Citation_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Citation_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Citation_PropertyType xsd type.")]
    public partial class CI_Citation_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Citation property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Citation")]
        public CI_Citation_Type CI_Citation {
            get {
                return CI_CitationField;
            } 
            set {
                CI_CitationField = value;
                NotifyPropertyChanged("CI_Citation");
            }
        }

        private CI_Citation_Type CI_CitationField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_ResponsibleParty_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_ResponsibleParty_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_ResponsibleParty_PropertyType xsd type.")]
    public partial class CI_ResponsibleParty_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_ResponsibleParty property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_ResponsibleParty")]
        public CI_ResponsibleParty_Type CI_ResponsibleParty {
            get {
                return CI_ResponsiblePartyField;
            } 
            set {
                CI_ResponsiblePartyField = value;
                NotifyPropertyChanged("CI_ResponsibleParty");
            }
        }

        private CI_ResponsibleParty_Type CI_ResponsiblePartyField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_PresentationFormCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_PresentationFormCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_PresentationFormCode_PropertyType xsd type.")]
    public partial class CI_PresentationFormCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_PresentationFormCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_PresentationFormCode")]
        public CodeListValue_Type CI_PresentationFormCode {
            get {
                return CI_PresentationFormCodeField;
            } 
            set {
                CI_PresentationFormCodeField = value;
                NotifyPropertyChanged("CI_PresentationFormCode");
            }
        }

        private CodeListValue_Type CI_PresentationFormCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CI_Series_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CI_Series_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the CI_Series_PropertyType xsd type.")]
    public partial class CI_Series_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CI_Series property
        /// </summary>
		[ComponentElement]
		[XmlElement("CI_Series")]
        public CI_Series_Type CI_Series {
            get {
                return CI_SeriesField;
            } 
            set {
                CI_SeriesField = value;
                NotifyPropertyChanged("CI_Series");
            }
        }

        private CI_Series_Type CI_SeriesField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_Element_Type xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractDQ_PositionalAccuracy_Type))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_Element", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_Element_Type xsd type.")]
    public abstract partial class AbstractDQ_Element_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// nameOfMeasure property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("nameOfMeasure")]
        public List<CharacterString_PropertyType> NameOfMeasure {
            get {
                return nameOfMeasureField;
            } 
            set {
                nameOfMeasureField = value;
                NotifyPropertyChanged("NameOfMeasure");
            }
        }

         /// <summary>
         /// bool to indicate if NameOfMeasure has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NameOfMeasureSpecified
         {
             get {
             if(nameOfMeasureField!=null)
                 return nameOfMeasureField.Count>0?true:false;
             else return false;
             }
         }
        private List<CharacterString_PropertyType> nameOfMeasureField; 

        /// <summary>
        /// measureIdentification property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "MD_Identifier_PropertyType")]
		[XmlElement("measureIdentification")]
        public MD_Identifier_PropertyType MeasureIdentification {
            get {
                return measureIdentificationField;
            } 
            set {
                measureIdentificationField = value;
                NotifyPropertyChanged("MeasureIdentification");
            }
        }

        private MD_Identifier_PropertyType measureIdentificationField; 

        /// <summary>
        /// measureDescription property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("measureDescription")]
        public CharacterString_PropertyType MeasureDescription {
            get {
                return measureDescriptionField;
            } 
            set {
                measureDescriptionField = value;
                NotifyPropertyChanged("MeasureDescription");
            }
        }

        private CharacterString_PropertyType measureDescriptionField; 

        /// <summary>
        /// evaluationMethodType property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DQ_EvaluationMethodTypeCode_PropertyType")]
		[XmlElement("evaluationMethodType")]
        public DQ_EvaluationMethodTypeCode_PropertyType EvaluationMethodType {
            get {
                return evaluationMethodTypeField;
            } 
            set {
                evaluationMethodTypeField = value;
                NotifyPropertyChanged("EvaluationMethodType");
            }
        }

        private DQ_EvaluationMethodTypeCode_PropertyType evaluationMethodTypeField; 

        /// <summary>
        /// evaluationMethodDescription property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CharacterString_PropertyType")]
		[XmlElement("evaluationMethodDescription")]
        public CharacterString_PropertyType EvaluationMethodDescription {
            get {
                return evaluationMethodDescriptionField;
            } 
            set {
                evaluationMethodDescriptionField = value;
                NotifyPropertyChanged("EvaluationMethodDescription");
            }
        }

        private CharacterString_PropertyType evaluationMethodDescriptionField; 

        /// <summary>
        /// evaluationProcedure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CI_Citation_PropertyType")]
		[XmlElement("evaluationProcedure")]
        public CI_Citation_PropertyType EvaluationProcedure {
            get {
                return evaluationProcedureField;
            } 
            set {
                evaluationProcedureField = value;
                NotifyPropertyChanged("EvaluationProcedure");
            }
        }

        private CI_Citation_PropertyType evaluationProcedureField; 

        /// <summary>
        /// dateTime property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DateTime_PropertyType")]
		[XmlElement("dateTime")]
        public List<DateTime_PropertyType> DateTime {
            get {
                return dateTimeField;
            } 
            set {
                dateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

         /// <summary>
         /// bool to indicate if DateTime has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DateTimeSpecified
         {
             get {
             if(dateTimeField!=null)
                 return dateTimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<DateTime_PropertyType> dateTimeField; 

        /// <summary>
        /// result property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DQ_Result_PropertyType")]
		[XmlElement("result")]
        public List<DQ_Result_PropertyType> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(resultField!=null)
                 return resultField.Count>0?true:false;
             else return false;
             }
         }
        private List<DQ_Result_PropertyType> resultField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_EvaluationMethodTypeCode_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_EvaluationMethodTypeCode_PropertyType xsd type.")]
    public partial class DQ_EvaluationMethodTypeCode_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DQ_EvaluationMethodTypeCode property
        /// </summary>
		[ComponentElement]
		[XmlElement("DQ_EvaluationMethodTypeCode")]
        public CodeListValue_Type DQ_EvaluationMethodTypeCode {
            get {
                return DQ_EvaluationMethodTypeCodeField;
            } 
            set {
                DQ_EvaluationMethodTypeCodeField = value;
                NotifyPropertyChanged("DQ_EvaluationMethodTypeCode");
            }
        }

        private CodeListValue_Type DQ_EvaluationMethodTypeCodeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DateTime_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DateTime_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the DateTime_PropertyType xsd type.")]
    public partial class DateTime_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// DateTime property
        /// </summary>
		
		[XmlElement("DateTime")]
        public DateTime? DateTime {
            get {
                return DateTimeField;
            } 
            set {
                DateTimeField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? DateTimeField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the DQ_Result_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="DQ_Result_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the DQ_Result_PropertyType xsd type.")]
    public partial class DQ_Result_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_Result property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_Result")]
        public AbstractDQ_Result_Type AbstractDQ_Result {
            get {
                return AbstractDQ_ResultField;
            } 
            set {
                AbstractDQ_ResultField = value;
                NotifyPropertyChanged("AbstractDQ_Result");
            }
        }

        private AbstractDQ_Result_Type AbstractDQ_ResultField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the AbstractDQ_PositionalAccuracy_Type xsd type.")]
    public abstract partial class AbstractDQ_PositionalAccuracy_Type : AbstractDQ_Element_Type, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_VerticalExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_VerticalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_VerticalExtent_Type xsd type.")]
    public partial class EX_VerticalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// minimumValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Real_PropertyType")]
		[XmlElement("minimumValue")]
        public Real_PropertyType MinimumValue {
            get {
                return minimumValueField;
            } 
            set {
                minimumValueField = value;
                NotifyPropertyChanged("MinimumValue");
            }
        }

        private Real_PropertyType minimumValueField; 

        /// <summary>
        /// maximumValue property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Real_PropertyType")]
		[XmlElement("maximumValue")]
        public Real_PropertyType MaximumValue {
            get {
                return maximumValueField;
            } 
            set {
                maximumValueField = value;
                NotifyPropertyChanged("MaximumValue");
            }
        }

        private Real_PropertyType maximumValueField; 

        /// <summary>
        /// verticalCRS property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SC_CRS_PropertyType")]
		[XmlElement("verticalCRS")]
        public SC_CRS_PropertyType VerticalCRS {
            get {
                return verticalCRSField;
            } 
            set {
                verticalCRSField = value;
                NotifyPropertyChanged("VerticalCRS");
            }
        }

        private SC_CRS_PropertyType verticalCRSField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the Real_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="Real_PropertyType", Namespace="http://www.isotc211.org/2005/gco")]
	[Description("This class represents the Real_PropertyType xsd type.")]
    public partial class Real_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Real property
        /// </summary>
		
		[XmlElement("Real")]
        public double? Real {
            get {
                return RealField;
            } 
            set {
                RealField = value;
                NotifyPropertyChanged("Real");
            }
        }

        private double? RealField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified)]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SC_CRS_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SC_CRS_PropertyType", Namespace="http://www.isotc211.org/2005/gsr")]
	[Description("This class represents the SC_CRS_PropertyType xsd type.")]
    public partial class SC_CRS_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the AbstractCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeneralDerivedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractCRSType xsd type.")]
    public abstract partial class AbstractCRSType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[RecurringElement]
		[XmlElement("domainOfValidity")]
        public List<DomainOfValidity> DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

         /// <summary>
         /// bool to indicate if DomainOfValidity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DomainOfValiditySpecified
         {
             get {
             if(domainOfValidityField!=null)
                 return domainOfValidityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DomainOfValidity> domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 


    } //here

    /// <summary>
    /// This class represents the AbstractGeneralDerivedCRSType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCRSType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralDerivedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralDerivedCRSType xsd type.")]
    public abstract partial class AbstractGeneralDerivedCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// conversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("conversion")]
        public GeneralConversionPropertyType Conversion {
            get {
                return conversionField;
            } 
            set {
                conversionField = value;
                NotifyPropertyChanged("Conversion");
            }
        }

        private GeneralConversionPropertyType conversionField; 


    } //here

    /// <summary>
    /// This class represents the GeneralConversionPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("conversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeneralConversionPropertyType xsd type.")]
    public partial class GeneralConversionPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractGeneralConversion property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractGeneralConversion")]
        public AbstractGeneralConversionType AbstractGeneralConversion {
            get {
                return AbstractGeneralConversionField;
            } 
            set {
                AbstractGeneralConversionField = value;
                NotifyPropertyChanged("AbstractGeneralConversion");
            }
        }

        private AbstractGeneralConversionType AbstractGeneralConversionField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractGeneralConversionType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractGeneralConversion", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractGeneralConversionType xsd type.")]
    public abstract partial class AbstractGeneralConversionType : AbstractCoordinateOperationType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the ProjectedCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ProjectedCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the ProjectedCRSType xsd type.")]
    public partial class ProjectedCRSType : AbstractGeneralDerivedCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// Item property
        /// </summary>
		[ComponentElement]
		[XmlElement("baseGeodeticCRS")]
        public GeodeticCRSPropertyType Item {
            get {
                return ItemField;
            } 
            set {
                ItemField = value;
                NotifyPropertyChanged("Item");
            }
        }

        private GeodeticCRSPropertyType ItemField; 

        /// <summary>
        /// cartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 


    } //here

    /// <summary>
    /// This class represents the GeodeticCRSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("baseGeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSPropertyType xsd type.")]
    public partial class GeodeticCRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticCRS")]
        public GeodeticCRSType GeodeticCRS {
            get {
                return GeodeticCRSField;
            } 
            set {
                GeodeticCRSField = value;
                NotifyPropertyChanged("GeodeticCRS");
            }
        }

        private GeodeticCRSType GeodeticCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticCRSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticCRSType xsd type.")]
    public partial class GeodeticCRSType : AbstractCRSType, INotifyPropertyChanged
    {

        /// <summary>
        /// cartesianCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("cartesianCS")]
        public CartesianCSPropertyType CartesianCS {
            get {
                return cartesianCSField;
            } 
            set {
                cartesianCSField = value;
                CartesianCSSpecified = (value!=null);
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSPropertyType cartesianCSField; 
        private bool cartesianCSSpecified = false; 

        /// <summary>
        /// bool to indicate if CartesianCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CartesianCSSpecified
        {
            get {
                return cartesianCSSpecified;
            }
            set {
                cartesianCSSpecified= value;
            }
        }

        /// <summary>
        /// ellipsoidalCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("ellipsoidalCS")]
        public EllipsoidalCSPropertyType EllipsoidalCS {
            get {
                return ellipsoidalCSField;
            } 
            set {
                ellipsoidalCSField = value;
                EllipsoidalCSSpecified = (value!=null);
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSPropertyType ellipsoidalCSField; 
        private bool ellipsoidalCSSpecified = false; 

        /// <summary>
        /// bool to indicate if EllipsoidalCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool EllipsoidalCSSpecified
        {
            get {
                return ellipsoidalCSSpecified;
            }
            set {
                ellipsoidalCSSpecified= value;
            }
        }

        /// <summary>
        /// sphericalCS property
        /// </summary>
        [ComponentElement]
        [XmlElement("sphericalCS")]
        public SphericalCSPropertyType SphericalCS {
            get {
                return sphericalCSField;
            } 
            set {
                sphericalCSField = value;
                SphericalCSSpecified = (value!=null);
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSPropertyType sphericalCSField; 
        private bool sphericalCSSpecified = false; 

        /// <summary>
        /// bool to indicate if SphericalCS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SphericalCSSpecified
        {
            get {
                return sphericalCSSpecified;
            }
            set {
                sphericalCSSpecified= value;
            }
        }


        /// <summary>
        /// geodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("geodeticDatum")]
        public GeodeticDatumPropertyType GeodeticDatum {
            get {
                return geodeticDatumField;
            } 
            set {
                geodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumPropertyType geodeticDatumField; 


    } //here

    /// <summary>
    /// This class represents the CartesianCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("cartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSPropertyType xsd type.")]
    public partial class CartesianCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// CartesianCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("CartesianCS")]
        public CartesianCSType CartesianCS {
            get {
                return CartesianCSField;
            } 
            set {
                CartesianCSField = value;
                NotifyPropertyChanged("CartesianCS");
            }
        }

        private CartesianCSType CartesianCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CartesianCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("CartesianCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CartesianCSType xsd type.")]
    public partial class CartesianCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSPropertyType xsd type.")]
    public partial class EllipsoidalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EllipsoidalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("EllipsoidalCS")]
        public EllipsoidalCSType EllipsoidalCS {
            get {
                return EllipsoidalCSField;
            } 
            set {
                EllipsoidalCSField = value;
                NotifyPropertyChanged("EllipsoidalCS");
            }
        }

        private EllipsoidalCSType EllipsoidalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EllipsoidalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("EllipsoidalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidalCSType xsd type.")]
    public partial class EllipsoidalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the SphericalCSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSPropertyType xsd type.")]
    public partial class SphericalCSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SphericalCS property
        /// </summary>
		[ComponentElement]
		[XmlElement("SphericalCS")]
        public SphericalCSType SphericalCS {
            get {
                return SphericalCSField;
            } 
            set {
                SphericalCSField = value;
                NotifyPropertyChanged("SphericalCS");
            }
        }

        private SphericalCSType SphericalCSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SphericalCSType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("SphericalCS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SphericalCSType xsd type.")]
    public partial class SphericalCSType : AbstractCoordinateSystemType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the GeodeticDatumPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("geodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumPropertyType xsd type.")]
    public partial class GeodeticDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// GeodeticDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("GeodeticDatum")]
        public GeodeticDatumType GeodeticDatum {
            get {
                return GeodeticDatumField;
            } 
            set {
                GeodeticDatumField = value;
                NotifyPropertyChanged("GeodeticDatum");
            }
        }

        private GeodeticDatumType GeodeticDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the GeodeticDatumType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("GeodeticDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the GeodeticDatumType xsd type.")]
    public partial class GeodeticDatumType : AbstractDatumType, INotifyPropertyChanged
    {

        /// <summary>
        /// primeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("primeMeridian")]
        public PrimeMeridianPropertyType PrimeMeridian {
            get {
                return primeMeridianField;
            } 
            set {
                primeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianPropertyType primeMeridianField; 

        /// <summary>
        /// ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("ellipsoid")]
        public EllipsoidPropertyType Ellipsoid {
            get {
                return ellipsoidField;
            } 
            set {
                ellipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidPropertyType ellipsoidField; 


    } //here

    /// <summary>
    /// This class represents the PrimeMeridianPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("primeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianPropertyType xsd type.")]
    public partial class PrimeMeridianPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// PrimeMeridian property
        /// </summary>
		[ComponentElement]
		[XmlElement("PrimeMeridian")]
        public PrimeMeridianType PrimeMeridian {
            get {
                return PrimeMeridianField;
            } 
            set {
                PrimeMeridianField = value;
                NotifyPropertyChanged("PrimeMeridian");
            }
        }

        private PrimeMeridianType PrimeMeridianField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the PrimeMeridianType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("PrimeMeridian", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the PrimeMeridianType xsd type.")]
    public partial class PrimeMeridianType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// greenwichLongitude property
        /// </summary>
		
		[XmlElement("greenwichLongitude")]
        public AngleType GreenwichLongitude {
            get {
                return greenwichLongitudeField;
            } 
            set {
                greenwichLongitudeField = value;
                NotifyPropertyChanged("GreenwichLongitude");
            }
        }

        private AngleType greenwichLongitudeField; 


    } //here

    /// <summary>
    /// This class represents the AngleType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("greenwichLongitude", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AngleType xsd type.")]
    public partial class AngleType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        public AngleType() {}

        /// <summary>
        /// Initializes a new instance of the AngleType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public AngleType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here

    /// <summary>
    /// This class represents the MeasureType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AngleType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("semiMajorAxis", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the MeasureType xsd type.")]
    public partial class MeasureType : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        public MeasureType() {}

        /// <summary>
        /// Initializes a new instance of the MeasureType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public MeasureType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the LengthType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="LengthType", Namespace="http://www.opengis.net/gml/3.2")]
	[Description("This class represents the LengthType xsd type.")]
    public partial class LengthType : MeasureType, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        public LengthType() {}

        /// <summary>
        /// Initializes a new instance of the LengthType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public LengthType(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }


    } //here
    }

    /// <summary>
    /// This class represents the EllipsoidPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidPropertyType xsd type.")]
    public partial class EllipsoidPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Ellipsoid property
        /// </summary>
		[ComponentElement]
		[XmlElement("Ellipsoid")]
        public EllipsoidType Ellipsoid {
            get {
                return EllipsoidField;
            } 
            set {
                EllipsoidField = value;
                NotifyPropertyChanged("Ellipsoid");
            }
        }

        private EllipsoidType EllipsoidField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the EllipsoidType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("Ellipsoid", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the EllipsoidType xsd type.")]
    public partial class EllipsoidType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// semiMajorAxis property
        /// </summary>
		
		[XmlElement("semiMajorAxis")]
        public MeasureType SemiMajorAxis {
            get {
                return semiMajorAxisField;
            } 
            set {
                semiMajorAxisField = value;
                NotifyPropertyChanged("SemiMajorAxis");
            }
        }

        private MeasureType semiMajorAxisField; 

        /// <summary>
        /// secondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("secondDefiningParameter")]
        public SecondDefParameter SecondDefPara {
            get {
                return secondDefiningParameterField;
            } 
            set {
                secondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefPara");
            }
        }

        private SecondDefParameter secondDefiningParameterField; 


    } //here

    /// <summary>
    /// This class represents the secondDefiningParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the secondDefiningParameter xsd type.")]
    public partial class SecondDefParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// SecondDefiningParameter property
        /// </summary>
		[ComponentElement]
		[XmlElement("SecondDefiningParameter")]
        public SecondDefiningParameter SecondDefPara {
            get {
                return SecondDefiningParameterField;
            } 
            set {
                SecondDefiningParameterField = value;
                NotifyPropertyChanged("SecondDefPara");
            }
        }

        private SecondDefiningParameter SecondDefiningParameterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the SecondDefiningParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the SecondDefiningParameter xsd type.")]
    public partial class SecondDefiningParameter : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// inverseFlattening property
        /// </summary>
        [XmlElement("inverseFlattening")]
        public MeasureType InverseFlattening {
            get {
                return inverseFlatteningField;
            } 
            set {
                inverseFlatteningField = value;
                InverseFlatteningSpecified = (value!=null);
                NotifyPropertyChanged("InverseFlattening");
            }
        }

        private MeasureType inverseFlatteningField; 
        private bool inverseFlatteningSpecified = false; 

        /// <summary>
        /// bool to indicate if InverseFlattening has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool InverseFlatteningSpecified
        {
            get {
                return inverseFlatteningSpecified;
            }
            set {
                inverseFlatteningSpecified= value;
            }
        }

        /// <summary>
        /// isSphere property
        /// </summary>
        [XmlElement("isSphere")]
        public bool? IsSphere {
            get {
                return isSphereField;
            } 
            set {
                isSphereField = value;
                IsSphereSpecified = (value!=null);
                NotifyPropertyChanged("IsSphere");
            }
        }

        private bool? isSphereField; 
        private bool isSphereSpecified = false; 

        /// <summary>
        /// bool to indicate if IsSphere has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool IsSphereSpecified
        {
            get {
                return isSphereSpecified;
            }
            set {
                isSphereSpecified= value;
            }
        }

        /// <summary>
        /// semiMinorAxis property
        /// </summary>
        [XmlElement("semiMinorAxis")]
        public LengthType SemiMinorAxis {
            get {
                return semiMinorAxisField;
            } 
            set {
                semiMinorAxisField = value;
                SemiMinorAxisSpecified = (value!=null);
                NotifyPropertyChanged("SemiMinorAxis");
            }
        }

        private LengthType semiMinorAxisField; 
        private bool semiMinorAxisSpecified = false; 

        /// <summary>
        /// bool to indicate if SemiMinorAxis has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SemiMinorAxisSpecified
        {
            get {
                return semiMinorAxisSpecified;
            }
            set {
                semiMinorAxisSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the AbstractDatumType xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalDatumType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeodeticDatumType))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("AbstractDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the AbstractDatumType xsd type.")]
    public abstract partial class AbstractDatumType : IdentifiedObjectType, INotifyPropertyChanged
    {

        /// <summary>
        /// domainOfValidity property
        /// </summary>
		[ComponentElement]
		[XmlElement("domainOfValidity")]
        public DomainOfValidity DomainOfValidity {
            get {
                return domainOfValidityField;
            } 
            set {
                domainOfValidityField = value;
                NotifyPropertyChanged("DomainOfValidity");
            }
        }

        private DomainOfValidity domainOfValidityField; 

        /// <summary>
        /// scope property
        /// </summary>
		[RecurringElement]
		[XmlElement("scope")]
        public List<string> Scope {
            get {
                return scopeField;
            } 
            set {
                scopeField = value;
                NotifyPropertyChanged("Scope");
            }
        }

         /// <summary>
         /// bool to indicate if Scope has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ScopeSpecified
         {
             get {
             if(scopeField!=null)
                 return scopeField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> scopeField; 

        /// <summary>
        /// anchorDefinition property
        /// </summary>
		[ComponentElement]
		[XmlElement("anchorDefinition")]
        public CodeType AnchorDefinition {
            get {
                return anchorDefinitionField;
            } 
            set {
                anchorDefinitionField = value;
                NotifyPropertyChanged("AnchorDefinition");
            }
        }

        private CodeType anchorDefinitionField; 

        /// <summary>
        /// realizationEpoch property
        /// </summary>
		
		[XmlElement("realizationEpoch", DataType="date")]
        public DateTime? RealizationEpoch {
            get {
                return realizationEpochField;
            } 
            set {
                realizationEpochField = value;
                 this.RealizationEpochSpecified = true;
                NotifyPropertyChanged("RealizationEpoch");
            }
        }

        private DateTime? realizationEpochField; 

        /// <summary>
        /// realizationEpochSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RealizationEpochSpecified {
            get {
                return realizationEpochSpecifiedField;
            } 
            set {
                realizationEpochSpecifiedField = value;
                NotifyPropertyChanged("RealizationEpochSpecified");
            }
        }

        private bool realizationEpochSpecifiedField; 


    } //here

    /// <summary>
    /// This class represents the VerticalDatumType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("VerticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumType xsd type.")]
    public partial class VerticalDatumType : AbstractDatumType, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// This class represents the EX_TemporalExtent_Type xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.isotc211.org/2005/gmd")]
    [System.Xml.Serialization.XmlRootAttribute("EX_TemporalExtent", Namespace="http://www.isotc211.org/2005/gmd", IsNullable=false)]
	[Description("This class represents the EX_TemporalExtent_Type xsd type.")]
    public partial class EX_TemporalExtent_Type : AbstractObject_Type, INotifyPropertyChanged
    {

        /// <summary>
        /// extent property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TM_Primitive_PropertyType")]
		[XmlElement("extent")]
        public TM_Primitive_PropertyType Extent {
            get {
                return extentField;
            } 
            set {
                extentField = value;
                NotifyPropertyChanged("Extent");
            }
        }

        private TM_Primitive_PropertyType extentField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the TM_Primitive_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="TM_Primitive_PropertyType", Namespace="http://www.isotc211.org/2005/gts")]
	[Description("This class represents the TM_Primitive_PropertyType xsd type.")]
    public partial class TM_Primitive_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractTimePrimitive property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractTimePrimitive", Namespace="http://www.opengis.net/gml/3.2")]
        public AbstractTimePrimitiveType AbstractTimePrimitive {
            get {
                return AbstractTimePrimitiveField;
            } 
            set {
                AbstractTimePrimitiveField = value;
                NotifyPropertyChanged("AbstractTimePrimitive");
            }
        }

        private AbstractTimePrimitiveType AbstractTimePrimitiveField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_TemporalExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_TemporalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_TemporalExtent_PropertyType xsd type.")]
    public partial class EX_TemporalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_TemporalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_TemporalExtent")]
        public EX_TemporalExtent_Type EX_TemporalExtent {
            get {
                return EX_TemporalExtentField;
            } 
            set {
                EX_TemporalExtentField = value;
                NotifyPropertyChanged("EX_TemporalExtent");
            }
        }

        private EX_TemporalExtent_Type EX_TemporalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the EX_VerticalExtent_PropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="EX_VerticalExtent_PropertyType", Namespace="http://www.isotc211.org/2005/gmd")]
	[Description("This class represents the EX_VerticalExtent_PropertyType xsd type.")]
    public partial class EX_VerticalExtent_PropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// EX_VerticalExtent property
        /// </summary>
		[ComponentElement]
		[XmlElement("EX_VerticalExtent")]
        public EX_VerticalExtent_Type EX_VerticalExtent {
            get {
                return EX_VerticalExtentField;
            } 
            set {
                EX_VerticalExtentField = value;
                NotifyPropertyChanged("EX_VerticalExtent");
            }
        }

        private EX_VerticalExtent_Type EX_VerticalExtentField; 

		/// <summary>
        /// uuidref property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "string")]
        [XmlAttribute("uuidref")]
		
        public string Uuidref {
            get {
                return uuidrefField;
            } 
            set {
                uuidrefField = value;
                NotifyPropertyChanged("Uuidref");
            }
        }

        private string uuidrefField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason", Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.isotc211.org/2005/gco")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the coordinateOperationAccuracy xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the coordinateOperationAccuracy xsd type.")]
    public partial class CoordinateOperationAccuracy : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractDQ_PositionalAccuracy property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractDQ_PositionalAccuracy", Namespace="http://www.isotc211.org/2005/gmd")]
        public AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracy {
            get {
                return AbstractDQ_PositionalAccuracyField;
            } 
            set {
                AbstractDQ_PositionalAccuracyField = value;
                NotifyPropertyChanged("AbstractDQ_PositionalAccuracy");
            }
        }

        private AbstractDQ_PositionalAccuracy_Type AbstractDQ_PositionalAccuracyField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the CRSPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("sourceCRS", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the CRSPropertyType xsd type.")]
    public partial class CRSPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// AbstractCRS property
        /// </summary>
		[ComponentElement]
		[XmlElement("AbstractCRS")]
        public AbstractCRSType AbstractCRS {
            get {
                return AbstractCRSField;
            } 
            set {
                AbstractCRSField = value;
                NotifyPropertyChanged("AbstractCRS");
            }
        }

        private AbstractCRSType AbstractCRSField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the VerticalDatumPropertyType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
    [System.Xml.Serialization.XmlRootAttribute("verticalDatum", Namespace="http://www.opengis.net/gml/3.2", IsNullable=false)]
	[Description("This class represents the VerticalDatumPropertyType xsd type.")]
    public partial class VerticalDatumPropertyType : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// VerticalDatum property
        /// </summary>
		[ComponentElement]
		[XmlElement("VerticalDatum")]
        public VerticalDatumType VerticalDatum {
            get {
                return VerticalDatumField;
            } 
            set {
                VerticalDatumField = value;
                NotifyPropertyChanged("VerticalDatum");
            }
        }

        private VerticalDatumType VerticalDatumField; 

		/// <summary>
        /// nilReason property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "NilReasonType")]
        [XmlAttribute("nilReason")]
		
        public string NilReason {
            get {
                return nilReasonField;
            } 
            set {
                nilReasonField = value;
                NotifyPropertyChanged("NilReason");
            }
        }

        private string nilReasonField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalCrsEpsgCode xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalCrsEpsgCode", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalCrsEpsgCode xsd type.")]
    public partial class VerticalCrsEpsgCode : AbstractVerticalCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("EpsgCode", DataType="positiveInteger")]
        public string EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private string EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractProjectedCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedUnknownCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GmlProjectedCrsDefinition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrsEpsgCode))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractProjectedCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the AbstractProjectedCrs xsd type.")]
    public abstract partial class AbstractProjectedCrs : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedUnknownCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedUnknownCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedUnknownCrs xsd type.")]
    public partial class ProjectedUnknownCrs : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// Unknown property
        /// </summary>
		[Required]
        [StringLength(256)]
        [EnergisticsDataTypeAttribute(DataType = "DescriptionString")]
		[XmlElement("Unknown")]
        public string Unknown {
            get {
                return UnknownField;
            } 
            set {
                UnknownField = value;
                NotifyPropertyChanged("Unknown");
            }
        }

        private string UnknownField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the GmlProjectedCrsDefinition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="GmlProjectedCrsDefinition", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the GmlProjectedCrsDefinition xsd type.")]
    public partial class GmlProjectedCrsDefinition : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// GmlProjectedCrsDefinition1 property
        /// </summary>
		[ComponentElement]
		[XmlElement("GmlProjectedCrsDefinition")]
        public ProjectedCRSType GmlProjectedCrsDefinition1 {
            get {
                return GmlProjectedCrsDefinition1Field;
            } 
            set {
                GmlProjectedCrsDefinition1Field = value;
                NotifyPropertyChanged("GmlProjectedCrsDefinition1");
            }
        }

        private ProjectedCRSType GmlProjectedCrsDefinition1Field; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedCrsEpsgCode xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedCrsEpsgCode", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedCrsEpsgCode xsd type.")]
    public partial class ProjectedCrsEpsgCode : AbstractProjectedCrs, INotifyPropertyChanged
    {

        /// <summary>
        /// EpsgCode property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("EpsgCode", DataType="positiveInteger")]
        public string EpsgCode {
            get {
                return EpsgCodeField;
            } 
            set {
                EpsgCodeField = value;
                NotifyPropertyChanged("EpsgCode");
            }
        }

        private string EpsgCodeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the CustomData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="CustomData", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the CustomData xsd type.")]
    public partial class CustomData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ObjectAlias xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ObjectAlias", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ObjectAlias xsd type.")]
    public partial class ObjectAlias : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Identifier property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Identifier")]
        public string Identifier {
            get {
                return IdentifierField;
            } 
            set {
                IdentifierField = value;
                NotifyPropertyChanged("Identifier");
            }
        }

        private string IdentifierField; 

        /// <summary>
        /// Description property
        /// </summary>
		[StringLength(256)]
        [EnergisticsDataTypeAttribute(DataType = "DescriptionString")]
		[XmlElement("Description")]
        public string Description {
            get {
                return DescriptionField;
            } 
            set {
                DescriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string DescriptionField; 

		/// <summary>
        /// authority property
        /// </summary>
		[StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "NameString")]
        [XmlAttribute("authority")]
		
        public string Authority {
            get {
                return authorityField;
            } 
            set {
                authorityField = value;
                NotifyPropertyChanged("Authority");
            }
        }

        private string authorityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractCitedDataObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractResqmlDataObject))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MdDatum))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GlobalChronostratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTechnicalFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrontierFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeologicFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractLocal3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalDepth3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalTime3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractValuesProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointsProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractPropertyLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TriangulatedSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreTrajectoryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BlockedWellboreRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeviationSurveyRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RedefinedGeometryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RepresentationSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonSealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridConnectionSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RepresentationIdentitySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalGridSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EarthModelInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyBoundaryInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EpcExternalPartReference))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VerticalCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProjectedCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractCitedDataObject", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("This class represents the AbstractCitedDataObject xsd type.")]
    public abstract partial class AbstractCitedDataObject : AbstractObject, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractResqmlDataObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MdDatum))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GlobalChronostratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTechnicalFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrontierFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeologicFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeries))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractLocal3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalDepth3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalTime3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractValuesProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointsProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractPropertyLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PropertyKind))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarker))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TriangulatedSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreTrajectoryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BlockedWellboreRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeviationSurveyRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RedefinedGeometryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RepresentationSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonSealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridConnectionSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RepresentationIdentitySet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalGridSet))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumn))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EarthModelInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyBoundaryInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidOrganizationInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractResqmlDataObject", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractResqmlDataObject xsd type.")]
    public abstract partial class AbstractResqmlDataObject : AbstractCitedDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ExtraMetadata property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NameValuePair")]
		[XmlElement("ExtraMetadata")]
        public List<NameValuePair> ExtraMetadata {
            get {
                return ExtraMetadataField;
            } 
            set {
                ExtraMetadataField = value;
                NotifyPropertyChanged("ExtraMetadata");
            }
        }

         /// <summary>
         /// bool to indicate if ExtraMetadata has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtraMetadataSpecified
         {
             get {
             if(ExtraMetadataField!=null)
                 return ExtraMetadataField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameValuePair> ExtraMetadataField; 


    } //here
    }

    /// <summary>
    /// Specifies the location of the measured depth = 0 reference point. The location of this reference point is defined with respect to a CRS, which need not be the same as the CRS of a wellbore trajectory representation, which may reference this location.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("MdDatum", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Specifies the location of the measured depth = 0 reference point. The location of this reference point is defined with respect to a CRS, which need not be the same as the CRS of a wellbore trajectory representation, which may reference this location.")]
    public partial class MdDatum : AbstractResqmlDataObject, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Location property
        /// </summary>
		[Required]
        [Description("The location of the md reference point relative to a local CRS.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Point3d")]
		[XmlElement("Location")]
        public Point3d Location {
            get {
                return LocationField;
            } 
            set {
                LocationField = value;
                NotifyPropertyChanged("Location");
            }
        }

        private Point3d LocationField; 

        /// <summary>
        /// MdReference property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MdReference")]
		[XmlElement("MdReference")]
        public MdReference? MDReference {
            get {
                return MdReferenceField;
            } 
            set {
                MdReferenceField = value;
                 this.MDReferenceSpecified = true;
                NotifyPropertyChanged("MDReference");
            }
        }

        
        private bool MDReferenceSpecifiedField = false;
        
        /// <summary>
        /// MDReferenceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MDReferenceSpecified {
            get {
                return MDReferenceSpecifiedField;
            } 
            set {
                MDReferenceSpecifiedField = value;
                NotifyPropertyChanged("MDReferenceSpecified");
            }
        }
        
        private MdReference? MdReferenceField; 

        /// <summary>
        /// LocalCrs property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("LocalCrs")]
        public DataObjectReference LocalCrs {
            get {
                return LocalCrsField;
            } 
            set {
                LocalCrsField = value;
                NotifyPropertyChanged("LocalCrs");
            }
        }

        private DataObjectReference LocalCrsField; 


    } //here

    /// <summary>
    /// Chronological successions of some chronostratigraphic units organized into 1 to n chronological ranks.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GlobalChronostratigraphicColumn", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Chronological successions of some chronostratigraphic units organized into 1 to n chronological ranks.")]
    public partial class GlobalChronostratigraphicColumn : AbstractResqmlDataObject, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ChronostratigraphicColumnComponent property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ChronostratigraphicRank")]
		[XmlElement("ChronostratigraphicColumnComponent")]
        public List<ChronostratigraphicRank> ChronostratigraphicColumnComponent {
            get {
                return ChronostratigraphicColumnComponentField;
            } 
            set {
                ChronostratigraphicColumnComponentField = value;
                NotifyPropertyChanged("ChronostratigraphicColumnComponent");
            }
        }

         /// <summary>
         /// bool to indicate if ChronostratigraphicColumnComponent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChronostratigraphicColumnComponentSpecified
         {
             get {
             if(ChronostratigraphicColumnComponentField!=null)
                 return ChronostratigraphicColumnComponentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ChronostratigraphicRank> ChronostratigraphicColumnComponentField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractFeature xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTechnicalFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrontierFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGeologicFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractFeature xsd type.")]
    public abstract partial class AbstractFeature : AbstractResqmlDataObject, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractTechnicalFeature xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSeismicSurveyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrontierFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractTechnicalFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractTechnicalFeature xsd type.")]
    public abstract partial class AbstractTechnicalFeature : AbstractFeature, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractSeismicSurveyFeature xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLineSetFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SeismicLatticeSetFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractSeismicSurveyFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractSeismicSurveyFeature xsd type.")]
    public abstract partial class AbstractSeismicSurveyFeature : AbstractTechnicalFeature, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// Defined by two lateral ordered dimensions: inline (lateral), crossline (lateral and orthogonal to the inline dimension), which are fixed. To specify its location, a seismic feature can be associated with the seismic coordinates of the points of a representation.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SeismicLatticeFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Defined by two lateral ordered dimensions: inline (lateral), crossline (lateral and orthogonal to the inline dimension), which are fixed. To specify its location, a seismic feature can be associated with the seismic coordinates of the points of a representation.")]
    public partial class SeismicLatticeFeature : AbstractSeismicSurveyFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// CrosslineCount property
        /// </summary>
		[Required]
        [Description("The count of crosslines in the 3D seismic survey.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("CrosslineCount", DataType="positiveInteger")]
        public string CrosslineCount {
            get {
                return CrosslineCountField;
            } 
            set {
                CrosslineCountField = value;
                NotifyPropertyChanged("CrosslineCount");
            }
        }

        private string CrosslineCountField; 

        /// <summary>
        /// CrosslineIndexIncrement property
        /// </summary>
		[Required]
        [Description("The constant index increment between two consecutive crosslines of the 3D seismic survey.")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("CrosslineIndexIncrement", DataType="integer")]
        public string CrosslineIndexIncrement {
            get {
                return CrosslineIndexIncrementField;
            } 
            set {
                CrosslineIndexIncrementField = value;
                NotifyPropertyChanged("CrosslineIndexIncrement");
            }
        }

        private string CrosslineIndexIncrementField; 

        /// <summary>
        /// FirstCrosslineIndex property
        /// </summary>
		[Required]
        [Description("The index of the first crossline of the 3D seismic survey.")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("FirstCrosslineIndex", DataType="integer")]
        public string FirstCrosslineIndex {
            get {
                return FirstCrosslineIndexField;
            } 
            set {
                FirstCrosslineIndexField = value;
                NotifyPropertyChanged("FirstCrosslineIndex");
            }
        }

        private string FirstCrosslineIndexField; 

        /// <summary>
        /// FirstInlineIndex property
        /// </summary>
		[Required]
        [Description("The index of the first inline of the 3D seismic survey.")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("FirstInlineIndex", DataType="integer")]
        public string FirstInlineIndex {
            get {
                return FirstInlineIndexField;
            } 
            set {
                FirstInlineIndexField = value;
                NotifyPropertyChanged("FirstInlineIndex");
            }
        }

        private string FirstInlineIndexField; 

        /// <summary>
        /// InlineCount property
        /// </summary>
		[Required]
        [Description("The count of inlines in the 3D seismic survey.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("InlineCount", DataType="positiveInteger")]
        public string InlineCount {
            get {
                return InlineCountField;
            } 
            set {
                InlineCountField = value;
                NotifyPropertyChanged("InlineCount");
            }
        }

        private string InlineCountField; 

        /// <summary>
        /// InlineIndexIncrement property
        /// </summary>
		[Required]
        [Description("The constant index increment between two consecutive inlines of the 3D seismic survey.")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("InlineIndexIncrement", DataType="integer")]
        public string InlineIndexIncrement {
            get {
                return InlineIndexIncrementField;
            } 
            set {
                InlineIndexIncrementField = value;
                NotifyPropertyChanged("InlineIndexIncrement");
            }
        }

        private string InlineIndexIncrementField; 

        /// <summary>
        /// IsPartOf property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "SeismicLatticeSetFeature")]
		[XmlElement("IsPartOf")]
        public SeismicLatticeSetFeature IsPartOf {
            get {
                return IsPartOfField;
            } 
            set {
                IsPartOfField = value;
                NotifyPropertyChanged("IsPartOf");
            }
        }

        private SeismicLatticeSetFeature IsPartOfField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the SeismicLatticeSetFeature xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="SeismicLatticeSetFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the SeismicLatticeSetFeature xsd type.")]
    public partial class SeismicLatticeSetFeature : AbstractSeismicSurveyFeature, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// Defined by one lateral dimension: trace (lateral). Seismic trace of the 3D seismic survey. To specify its location, the seismic feature can be associated with the seismic coordinates of the points of a representation.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SeismicLineFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Defined by one lateral dimension: trace (lateral). Seismic trace of the 3D seismic survey. To specify its location, the seismic feature can be associated with the seismic coordinates of the points of a representation.")]
    public partial class SeismicLineFeature : AbstractSeismicSurveyFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// FirstTraceIndex property
        /// </summary>
		[Required]
        [Description("The index of the first trace of the seismic line.")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("FirstTraceIndex", DataType="integer")]
        public string FirstTraceIndex {
            get {
                return FirstTraceIndexField;
            } 
            set {
                FirstTraceIndexField = value;
                NotifyPropertyChanged("FirstTraceIndex");
            }
        }

        private string FirstTraceIndexField; 

        /// <summary>
        /// TraceCount property
        /// </summary>
		[Required]
        [Description("The count of traces in the seismic line.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("TraceCount", DataType="positiveInteger")]
        public string TraceCount {
            get {
                return TraceCountField;
            } 
            set {
                TraceCountField = value;
                NotifyPropertyChanged("TraceCount");
            }
        }

        private string TraceCountField; 

        /// <summary>
        /// TraceIndexIncrement property
        /// </summary>
		[Required]
        [Description("The constant index increment between two consecutive traces.")]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("TraceIndexIncrement", DataType="integer")]
        public string TraceIndexIncrement {
            get {
                return TraceIndexIncrementField;
            } 
            set {
                TraceIndexIncrementField = value;
                NotifyPropertyChanged("TraceIndexIncrement");
            }
        }

        private string TraceIndexIncrementField; 

        /// <summary>
        /// IsPartOf property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("IsPartOf")]
        public DataObjectReference IsPartOf {
            get {
                return IsPartOfField;
            } 
            set {
                IsPartOfField = value;
                NotifyPropertyChanged("IsPartOf");
            }
        }

        private DataObjectReference IsPartOfField; 


    } //here

    /// <summary>
    /// An unordered set of several seismic lines. Generally, it has no direct interpretation or representation.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SeismicLineSetFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("An unordered set of several seismic lines. Generally, it has no direct interpretation or representation.")]
    public partial class SeismicLineSetFeature : AbstractSeismicSurveyFeature, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// May refer to one of these: wellbore. A unique, oriented path from the bottom of a drilled borehole to the surface of the earth. The path must not overlap or cross itself. borehole. A hole excavated in the earth as a result of drilling or boring operations. The borehole may represent the hole of an entire wellbore (when no sidetracks are present), or a sidetrack extension. A borehole extends from an originating point (the surface location for the initial borehole or kickoff point for sidetracks) to a terminating (bottomhole) point. sidetrack. A borehole that originates in another borehole as opposed to originating at the surface.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("May refer to one of these: wellbore. A unique, oriented path from the bottom of a drilled borehole to the surface of the earth. The path must not overlap or cross itself. borehole. A hole excavated in the earth as a result of drilling or boring operations. The borehole may represent the hole of an entire wellbore (when no sidetracks are present), or a sidetrack extension. A borehole extends from an originating point (the surface location for the initial borehole or kickoff point for sidetracks) to a terminating (bottomhole) point. sidetrack. A borehole that originates in another borehole as opposed to originating at the surface.")]
    public partial class WellboreFeature : AbstractTechnicalFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// WitsmlWellbore property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WitsmlWellboreReference")]
		[XmlElement("WitsmlWellbore")]
        public WitsmlWellboreReference WitsmlWellbore {
            get {
                return WitsmlWellboreField;
            } 
            set {
                WitsmlWellboreField = value;
                NotifyPropertyChanged("WitsmlWellbore");
            }
        }

        private WitsmlWellboreReference WitsmlWellboreField; 


    } //here

    /// <summary>
    /// Identifies a frontier or boundary in the earth model that is not a geological feature but an arbitrary geographic/geometric surface used to delineate the boundary of the model.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("FrontierFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Identifies a frontier or boundary in the earth model that is not a geological feature but an arbitrary geographic/geometric surface used to delineate the boundary of the model.")]
    public partial class FrontierFeature : AbstractTechnicalFeature, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGeologicFeature xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OrganizationFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGeologicFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractGeologicFeature xsd type.")]
    public abstract partial class AbstractGeologicFeature : AbstractFeature, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// The explicit description of the relationships between geologic features, such as rock features (e.g., stratigraphic units, geobodies, phase unit) and boundary features (e.g., genetic, tectonic, and fluid boundaries). For types of organizations, see OrganizationKind.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("OrganizationFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("The explicit description of the relationships between geologic features, such as rock features (e.g., stratigraphic units, geobodies, phase unit) and boundary features (e.g., genetic, tectonic, and fluid boundaries). For types of organizations, see OrganizationKind.")]
    public partial class OrganizationFeature : AbstractGeologicFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// OrganizationKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "OrganizationKind")]
		[XmlElement("OrganizationKind")]
        public OrganizationKind? OrganizationKind {
            get {
                return OrganizationKindField;
            } 
            set {
                OrganizationKindField = value;
                 this.OrganizationKindSpecified = true;
                NotifyPropertyChanged("OrganizationKind");
            }
        }

        
        private bool OrganizationKindSpecifiedField = false;
        
        /// <summary>
        /// OrganizationKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OrganizationKindSpecified {
            get {
                return OrganizationKindSpecifiedField;
            } 
            set {
                OrganizationKindSpecifiedField = value;
                NotifyPropertyChanged("OrganizationKindSpecified");
            }
        }
        
        private OrganizationKind? OrganizationKindField; 


    } //here

    /// <summary>
    /// An interface between two geological objects, such as horizons and faults. It is a surface object. 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TectonicBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneticBoundaryFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidBoundaryFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("BoundaryFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("An interface between two geological objects, such as horizons and faults. It is a surface object. ")]
    public partial class BoundaryFeature : AbstractGeologicFeature, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// A boundary caused by tectonic movement or metamorphism, such as a fault or a fracture. For types, see TectonicBoundaryKind.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TectonicBoundaryFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A boundary caused by tectonic movement or metamorphism, such as a fault or a fracture. For types, see TectonicBoundaryKind.")]
    public partial class TectonicBoundaryFeature : BoundaryFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// TectonicBoundaryKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "TectonicBoundaryKind")]
		[XmlElement("TectonicBoundaryKind")]
        public TectonicBoundaryKind? TectonicBoundaryKind {
            get {
                return TectonicBoundaryKindField;
            } 
            set {
                TectonicBoundaryKindField = value;
                 this.TectonicBoundaryKindSpecified = true;
                NotifyPropertyChanged("TectonicBoundaryKind");
            }
        }

        
        private bool TectonicBoundaryKindSpecifiedField = false;
        
        /// <summary>
        /// TectonicBoundaryKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TectonicBoundaryKindSpecified {
            get {
                return TectonicBoundaryKindSpecifiedField;
            } 
            set {
                TectonicBoundaryKindSpecifiedField = value;
                NotifyPropertyChanged("TectonicBoundaryKindSpecified");
            }
        }
        
        private TectonicBoundaryKind? TectonicBoundaryKindField; 


    } //here

    /// <summary>
    /// A boundary between two units produced by a contrast between two deposits that occurred at two different geologic time periods. For types, see GeneticBoundaryKind.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeneticBoundaryFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A boundary between two units produced by a contrast between two deposits that occurred at two different geologic time periods. For types, see GeneticBoundaryKind.")]
    public partial class GeneticBoundaryFeature : BoundaryFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// GeneticBoundaryKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "GeneticBoundaryKind")]
		[XmlElement("GeneticBoundaryKind")]
        public GeneticBoundaryKind? GeneticBoundaryKind {
            get {
                return GeneticBoundaryKindField;
            } 
            set {
                GeneticBoundaryKindField = value;
                 this.GeneticBoundaryKindSpecified = true;
                NotifyPropertyChanged("GeneticBoundaryKind");
            }
        }

        
        private bool GeneticBoundaryKindSpecifiedField = false;
        
        /// <summary>
        /// GeneticBoundaryKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GeneticBoundaryKindSpecified {
            get {
                return GeneticBoundaryKindSpecifiedField;
            } 
            set {
                GeneticBoundaryKindSpecifiedField = value;
                NotifyPropertyChanged("GeneticBoundaryKindSpecified");
            }
        }
        
        private GeneticBoundaryKind? GeneticBoundaryKindField; 

        /// <summary>
        /// AbsoluteAge property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Timestamp")]
		[XmlElement("AbsoluteAge")]
        public Timestamp AbsoluteAge {
            get {
                return AbsoluteAgeField;
            } 
            set {
                AbsoluteAgeField = value;
                NotifyPropertyChanged("AbsoluteAge");
            }
        }

        private Timestamp AbsoluteAgeField; 


    } //here

    /// <summary>
    /// A boundary (usually a plane) separating two fluid phases, such as a gas-oil contact (GOC), a water-oil contact (WOC), a gas-oil contact (GOC), or others. For types, see FluidContact.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("FluidBoundaryFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A boundary (usually a plane) separating two fluid phases, such as a gas-oil contact (GOC), a water-oil contact (WOC), a gas-oil contact (GOC), or others. For types, see FluidContact.")]
    public partial class FluidBoundaryFeature : BoundaryFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidContact property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "FluidContact")]
		[XmlElement("FluidContact")]
        public FluidContact? FluidContact {
            get {
                return FluidContactField;
            } 
            set {
                FluidContactField = value;
                 this.FluidContactSpecified = true;
                NotifyPropertyChanged("FluidContact");
            }
        }

        
        private bool FluidContactSpecifiedField = false;
        
        /// <summary>
        /// FluidContactSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidContactSpecified {
            get {
                return FluidContactSpecifiedField;
            } 
            set {
                FluidContactSpecifiedField = value;
                NotifyPropertyChanged("FluidContactSpecified");
            }
        }
        
        private FluidContact? FluidContactField; 


    } //here

    /// <summary>
    /// A volume of rock located between one or more boundary features. The limiting boundary features should be genetic boundary features (i.e. should not be faults).
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitFeature))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitFeature))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeologicUnitFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A volume of rock located between one or more boundary features. The limiting boundary features should be genetic boundary features (i.e. should not be faults).")]
    public partial class GeologicUnitFeature : AbstractGeologicFeature, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// A volume of rock that is identified based on some specific attribute, like its mineral content or other physical characteristic. Unlike stratigraphic or phase units, there is no associated time or fluid content semantic. For types, see GeobodyKind.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeobodyFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A volume of rock that is identified based on some specific attribute, like its mineral content or other physical characteristic. Unlike stratigraphic or phase units, there is no associated time or fluid content semantic. For types, see GeobodyKind.")]
    public partial class GeobodyFeature : GeologicUnitFeature, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// A stratigraphic unit that can have a well-known (e.g., "Jurassic") chronostratigraphic top and chronostratigraphic bottom. These chronostratigraphic units have no associated interpretations or representations. BUSINESS RULE: The name must reference a well-known chronostratigraphic unit (such as "Jurassic"), for example, from the International Commission on Stratigraphy (http://www.stratigraphy.org).
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicUnitFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A stratigraphic unit that can have a well-known (e.g., Jurassic) chronostratigraphic top and chronostratigraphic bottom. These chronostratigraphic units have no associated interpretations or representations. BUSINESS RULE: The name must reference a well-known chronostratigraphic unit (such as Jurassic), for example, from the International Commission on Stratigraphy (http://www.stratigraphy.org).")]
    public partial class StratigraphicUnitFeature : GeologicUnitFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ChronostratigraphicBottom property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChronostratigraphicBottom")]
        public DataObjectReference ChronostratigraphicBottom {
            get {
                return ChronostratigraphicBottomField;
            } 
            set {
                ChronostratigraphicBottomField = value;
                NotifyPropertyChanged("ChronostratigraphicBottom");
            }
        }

        private DataObjectReference ChronostratigraphicBottomField; 

        /// <summary>
        /// ChronostratigraphicTop property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChronostratigraphicTop")]
        public DataObjectReference ChronostratigraphicTop {
            get {
                return ChronostratigraphicTopField;
            } 
            set {
                ChronostratigraphicTopField = value;
                NotifyPropertyChanged("ChronostratigraphicTop");
            }
        }

        private DataObjectReference ChronostratigraphicTopField; 


    } //here

    /// <summary>
    /// A fluid phase plus one or more stratigraphic units. A unit may correspond to a pair of horizons that are not adjacent stratigraphically, e.g., a coarse zonation, and is often used to define the reservoir. For types, see Phase.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RockFluidUnitFeature", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A fluid phase plus one or more stratigraphic units. A unit may correspond to a pair of horizons that are not adjacent stratigraphically, e.g., a coarse zonation, and is often used to define the reservoir. For types, see Phase.")]
    public partial class RockFluidUnitFeature : GeologicUnitFeature, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Phase property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "Phase")]
		[XmlElement("Phase")]
        public Phase? Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                 this.PhaseSpecified = true;
                NotifyPropertyChanged("Phase");
            }
        }

        
        private bool PhaseSpecifiedField = false;
        
        /// <summary>
        /// PhaseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhaseSpecified {
            get {
                return PhaseSpecifiedField;
            } 
            set {
                PhaseSpecifiedField = value;
                NotifyPropertyChanged("PhaseSpecified");
            }
        }
        
        private Phase? PhaseField; 

        /// <summary>
        /// FluidBoundaryBottom property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidBoundaryBottom")]
        public DataObjectReference FluidBoundaryBottom {
            get {
                return FluidBoundaryBottomField;
            } 
            set {
                FluidBoundaryBottomField = value;
                NotifyPropertyChanged("FluidBoundaryBottom");
            }
        }

        private DataObjectReference FluidBoundaryBottomField; 

        /// <summary>
        /// FluidBoundaryTop property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("FluidBoundaryTop")]
        public DataObjectReference FluidBoundaryTop {
            get {
                return FluidBoundaryTopField;
            } 
            set {
                FluidBoundaryTopField = value;
                NotifyPropertyChanged("FluidBoundaryTop");
            }
        }

        private DataObjectReference FluidBoundaryTopField; 


    } //here

    /// <summary>
    /// Stores an ordered list of times, for example, for time-dependent properties, geometries, or representations. It is used in conjunction with the time index to specify times for RESQML.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TimeSeries", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Stores an ordered list of times, for example, for time-dependent properties, geometries, or representations. It is used in conjunction with the time index to specify times for RESQML.")]
    public partial class TimeSeries : AbstractResqmlDataObject, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Time property
        /// </summary>
		[Required]
        [Description("Individual times composing the series. The list ordering is used by the time index.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Timestamp")]
		[XmlElement("Time")]
        public List<Timestamp> Time {
            get {
                return TimeField;
            } 
            set {
                TimeField = value;
                NotifyPropertyChanged("Time");
            }
        }

         /// <summary>
         /// bool to indicate if Time has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeSpecified
         {
             get {
             if(TimeField!=null)
                 return TimeField.Count>0?true:false;
             else return false;
             }
         }
        private List<Timestamp> TimeField; 

        /// <summary>
        /// TimeSeriesParentage property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeSeriesParentage")]
		[XmlElement("TimeSeriesParentage")]
        public TimeSeriesParentage TimeSeriesParentage {
            get {
                return TimeSeriesParentageField;
            } 
            set {
                TimeSeriesParentageField = value;
                NotifyPropertyChanged("TimeSeriesParentage");
            }
        }

        private TimeSeriesParentage TimeSeriesParentageField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractLocal3dCrs xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalDepth3dCrs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LocalTime3dCrs))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractLocal3dCrs", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractLocal3dCrs xsd type.")]
    public abstract partial class AbstractLocal3dCrs : AbstractResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// YOffset property
        /// </summary>
		[Required]
        [Description("The Y offset of the origin of the local areal axes relative to the projected CRS origin. The value MUST represent the second axis of the coordinate system. The unit of measure is defined by the unit of measure for the projected 2D CRS.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("YOffset")]
        public double? YOffset {
            get {
                return YOffsetField;
            } 
            set {
                YOffsetField = value;
                NotifyPropertyChanged("YOffset");
            }
        }

        private double? YOffsetField; 

        /// <summary>
        /// ZOffset property
        /// </summary>
		[Required]
        [Description("The Z offset of the origin of the local vertical axis relative to the vertical CRS origin. According to CRS type (depth or time) it corresponds to the depth or time datum  The value MUST represent the third axis of the coordinate system. The unit of measure is defined by the unit of measure for the vertical CRS.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("ZOffset")]
        public double? ZOffset {
            get {
                return ZOffsetField;
            } 
            set {
                ZOffsetField = value;
                NotifyPropertyChanged("ZOffset");
            }
        }

        private double? ZOffsetField; 

        /// <summary>
        /// ArealRotation property
        /// </summary>
		[Required]
        [Description("The rotation of the local Y axis relative to the projected Y axis.   - A positive value indicates a clockwise rotation from the projected Y axis.   - A negative value indicates a counter-clockwise rotation form the projected Y axis.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("ArealRotation")]
        public PlaneAngleMeasure ArealRotation {
            get {
                return ArealRotationField;
            } 
            set {
                ArealRotationField = value;
                NotifyPropertyChanged("ArealRotation");
            }
        }

        private PlaneAngleMeasure ArealRotationField; 

        /// <summary>
        /// ProjectedAxisOrder property
        /// </summary>
		[Required]
        [Description("Defines the coordinate system axis order of the global projected CRS when the projected CRS is an unknown CRS, else it must be correspond to the axis order of the projected  CRS.")]
        [EnergisticsDataTypeAttribute(DataType = "AxisOrder2d")]
		[XmlElement("ProjectedAxisOrder")]
        public AxisOrder2d? ProjectedAxisOrder {
            get {
                return ProjectedAxisOrderField;
            } 
            set {
                ProjectedAxisOrderField = value;
                 this.ProjectedAxisOrderSpecified = true;
                NotifyPropertyChanged("ProjectedAxisOrder");
            }
        }

        
        private bool ProjectedAxisOrderSpecifiedField = false;
        
        /// <summary>
        /// ProjectedAxisOrderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProjectedAxisOrderSpecified {
            get {
                return ProjectedAxisOrderSpecifiedField;
            } 
            set {
                ProjectedAxisOrderSpecifiedField = value;
                NotifyPropertyChanged("ProjectedAxisOrderSpecified");
            }
        }
        
        private AxisOrder2d? ProjectedAxisOrderField; 

        /// <summary>
        /// ProjectedUom property
        /// </summary>
		[Required]
        [Description("Unit of measure of the associated Projected CRS. When the projected CRS is not unknown, it must be the same than the unit defined by the Projected CRS.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
		[XmlElement("ProjectedUom")]
        public LengthUom? ProjectedUom {
            get {
                return ProjectedUomField;
            } 
            set {
                ProjectedUomField = value;
                 this.ProjectedUomSpecified = true;
                NotifyPropertyChanged("ProjectedUom");
            }
        }

        
        private bool ProjectedUomSpecifiedField = false;
        
        /// <summary>
        /// ProjectedUomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProjectedUomSpecified {
            get {
                return ProjectedUomSpecifiedField;
            } 
            set {
                ProjectedUomSpecifiedField = value;
                NotifyPropertyChanged("ProjectedUomSpecified");
            }
        }
        
        private LengthUom? ProjectedUomField; 

        /// <summary>
        /// VerticalUom property
        /// </summary>
		[Required]
        [Description("Unit of measure of the associated Vertical CRS. When the vertical CRS is not unknown, it must be the same than the unit defined by the Vertical CRS.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
		[XmlElement("VerticalUom")]
        public LengthUom? VerticalUom {
            get {
                return VerticalUomField;
            } 
            set {
                VerticalUomField = value;
                 this.VerticalUomSpecified = true;
                NotifyPropertyChanged("VerticalUom");
            }
        }

        
        private bool VerticalUomSpecifiedField = false;
        
        /// <summary>
        /// VerticalUomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VerticalUomSpecified {
            get {
                return VerticalUomSpecifiedField;
            } 
            set {
                VerticalUomSpecifiedField = value;
                NotifyPropertyChanged("VerticalUomSpecified");
            }
        }
        
        private LengthUom? VerticalUomField; 

        /// <summary>
        /// XOffset property
        /// </summary>
		[Required]
        [Description("The X location of the origin of the local areal axes relative to the projected CRS origin. The value MUST represent the first axis of the coordinate system. The unit of measure is defined by the unit of measure for the projected 2D CRS.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("XOffset")]
        public double? XOffset {
            get {
                return XOffsetField;
            } 
            set {
                XOffsetField = value;
                NotifyPropertyChanged("XOffset");
            }
        }

        private double? XOffsetField; 

        /// <summary>
        /// ZIncreasingDownward property
        /// </summary>
		[Required]
        [Description("Indicates that Z values correspond to depth values and are increasing downward, as opposite to elevation values increasing upward. When the vertical CRS is not an unknown, it must correspond to the axis orientation of the vertical CRS.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("ZIncreasingDownward")]
        public bool? ZIncreasingDownward {
            get {
                return ZIncreasingDownwardField;
            } 
            set {
                ZIncreasingDownwardField = value;
                NotifyPropertyChanged("ZIncreasingDownward");
            }
        }

        private bool? ZIncreasingDownwardField; 

        /// <summary>
        /// VerticalCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractVerticalCrs")]
		[XmlElement("VerticalCrs")]
        public AbstractVerticalCrs VerticalCrs {
            get {
                return VerticalCrsField;
            } 
            set {
                VerticalCrsField = value;
                NotifyPropertyChanged("VerticalCrs");
            }
        }

        private AbstractVerticalCrs VerticalCrsField; 

        /// <summary>
        /// ProjectedCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProjectedCrs")]
		[XmlElement("ProjectedCrs")]
        public AbstractProjectedCrs ProjectedCrs {
            get {
                return ProjectedCrsField;
            } 
            set {
                ProjectedCrsField = value;
                NotifyPropertyChanged("ProjectedCrs");
            }
        }

        private AbstractProjectedCrs ProjectedCrsField; 


    } //here
    }

    /// <summary>
    /// Defines a local depth coordinate system, the geometrical origin and location is defined by the elements of the base class AbstractLocal3dCRS. This CRS uses the units of measure of its projected and vertical CRS.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("LocalDepth3dCrs", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Defines a local depth coordinate system, the geometrical origin and location is defined by the elements of the base class AbstractLocal3dCRS. This CRS uses the units of measure of its projected and vertical CRS.")]
    public partial class LocalDepth3dCrs : AbstractLocal3dCrs, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// Defines a local time coordinate system, the geometrical origin and location is defined by the elements of the base class AbstractLocal3dCRS. This CRS defines the time unit that the time-based geometries that refers it will use.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("LocalTime3dCrs", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Defines a local time coordinate system, the geometrical origin and location is defined by the elements of the base class AbstractLocal3dCRS. This CRS defines the time unit that the time-based geometries that refers it will use.")]
    public partial class LocalTime3dCrs : AbstractLocal3dCrs, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Defines the unit of measure of the third (time) coordinates, for the geometries that refers to it.
        /// </summary>
		[Required]
        [Description("Defines the unit of measure of the third (time) coordinates, for the geometries that refers to it.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeUom")]
		[XmlElement("TimeUom")]
        public TimeUom? TimeUom {
            get {
                return TimeUomField;
            } 
            set {
                TimeUomField = value;
                 this.TimeUomSpecified = true;
                NotifyPropertyChanged("TimeUom");
            }
        }

        
        private bool TimeUomSpecifiedField = false;
        
        /// <summary>
        /// TimeUomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TimeUomSpecified {
            get {
                return TimeUomSpecifiedField;
            } 
            set {
                TimeUomSpecifiedField = value;
                NotifyPropertyChanged("TimeUomSpecified");
            }
        }
        
        private TimeUom? TimeUomField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractProperty xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractValuesProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContinuousProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointsProperty))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractProperty xsd type.")]
    public abstract partial class AbstractProperty : AbstractResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("Number of elements in a 1D list of properties. When used in a multi-dimensional array, count is always the fastest.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// IndexableElement property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "IndexableElements")]
		[XmlElement("IndexableElement")]
        public IndexableElements? IndexableElement {
            get {
                return IndexableElementField;
            } 
            set {
                IndexableElementField = value;
                 this.IndexableElementSpecified = true;
                NotifyPropertyChanged("IndexableElement");
            }
        }

        
        private bool IndexableElementSpecifiedField = false;
        
        /// <summary>
        /// IndexableElementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexableElementSpecified {
            get {
                return IndexableElementSpecifiedField;
            } 
            set {
                IndexableElementSpecifiedField = value;
                NotifyPropertyChanged("IndexableElementSpecified");
            }
        }
        
        private IndexableElements? IndexableElementField; 

        /// <summary>
        /// RealizationIndex property
        /// </summary>
		[Description("Optional element indicating the realization index (metadata). Used if the property is the result of a multi-realization process.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("RealizationIndex", DataType="nonNegativeInteger")]
        public string RealizationIndex {
            get {
                return RealizationIndexField;
            } 
            set {
                RealizationIndexField = value;
                NotifyPropertyChanged("RealizationIndex");
            }
        }

        private string RealizationIndexField; 

        /// <summary>
        /// TimeStep property
        /// </summary>
		[Description("Indicates that the property is the output of a specific time step from a flow simulator. Time step is metadata that makes sense in the context of a specific simulation run, and should not be confused with the time index.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("TimeStep", DataType="nonNegativeInteger")]
        public string TimeStep {
            get {
                return TimeStepField;
            } 
            set {
                TimeStepField = value;
                NotifyPropertyChanged("TimeStep");
            }
        }

        private string TimeStepField; 

        /// <summary>
        /// TimeIndex property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return TimeIndexField;
            } 
            set {
                TimeIndexField = value;
                NotifyPropertyChanged("TimeIndex");
            }
        }

        private TimeIndex TimeIndexField; 

        /// <summary>
        /// SupportingRepresentation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SupportingRepresentation")]
        public DataObjectReference SupportingRepresentation {
            get {
                return SupportingRepresentationField;
            } 
            set {
                SupportingRepresentationField = value;
                NotifyPropertyChanged("SupportingRepresentation");
            }
        }

        private DataObjectReference SupportingRepresentationField; 

        /// <summary>
        /// LocalCrs property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("LocalCrs")]
        public DataObjectReference LocalCrs {
            get {
                return LocalCrsField;
            } 
            set {
                LocalCrsField = value;
                NotifyPropertyChanged("LocalCrs");
            }
        }

        private DataObjectReference LocalCrsField; 

        /// <summary>
        /// PropertyKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPropertyKind")]
		[XmlElement("PropertyKind")]
        public AbstractPropertyKind PropertyKind {
            get {
                return PropertyKindField;
            } 
            set {
                PropertyKindField = value;
                NotifyPropertyChanged("PropertyKind");
            }
        }

        private AbstractPropertyKind PropertyKindField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractValuesProperty xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CategoricalProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DiscreteProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CommentProperty))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ContinuousProperty))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractValuesProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractValuesProperty xsd type.")]
    public abstract partial class AbstractValuesProperty : AbstractProperty, INotifyPropertyChanged
    {

        /// <summary>
        /// PatchOfValues property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PatchOfValues")]
		[XmlElement("PatchOfValues")]
        public List<PatchOfValues> PatchOfValues {
            get {
                return PatchOfValuesField;
            } 
            set {
                PatchOfValuesField = value;
                NotifyPropertyChanged("PatchOfValues");
            }
        }

         /// <summary>
         /// bool to indicate if PatchOfValues has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PatchOfValuesSpecified
         {
             get {
             if(PatchOfValuesField!=null)
                 return PatchOfValuesField.Count>0?true:false;
             else return false;
             }
         }
        private List<PatchOfValues> PatchOfValuesField; 

        /// <summary>
        /// Facet property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PropertyKindFacet")]
		[XmlElement("Facet")]
        public List<PropertyKindFacet> Facet {
            get {
                return FacetField;
            } 
            set {
                FacetField = value;
                NotifyPropertyChanged("Facet");
            }
        }

         /// <summary>
         /// bool to indicate if Facet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacetSpecified
         {
             get {
             if(FacetField!=null)
                 return FacetField.Count>0?true:false;
             else return false;
             }
         }
        private List<PropertyKindFacet> FacetField; 


    } //here
    }

    /// <summary>
    /// Information specific to one categorical property. Contains discrete integer. This type of property is associated either as: - an internally stored index to a string through a lookup mapping. - an internally stored double to another double value through an explicitly provided table.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("CategoricalProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Information specific to one categorical property. Contains discrete integer. This type of property is associated either as: - an internally stored index to a string through a lookup mapping. - an internally stored double to another double value through an explicitly provided table.")]
    public partial class CategoricalProperty : AbstractValuesProperty, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Lookup property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Lookup")]
        public DataObjectReference Lookup {
            get {
                return LookupField;
            } 
            set {
                LookupField = value;
                NotifyPropertyChanged("Lookup");
            }
        }

        private DataObjectReference LookupField; 


    } //here

    /// <summary>
    /// Contains discrete integer values; typically used to store any type of index. So that the value range can be known before accessing all values, it also stores the minimum and maximum value in the range.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("DiscreteProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Contains discrete integer values; typically used to store any type of index. So that the value range can be known before accessing all values, it also stores the minimum and maximum value in the range.")]
    public partial class DiscreteProperty : AbstractValuesProperty, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The minimum of the associated property values. BUSINESS RULE: There can only be one value per number of elements.
        /// </summary>
		[Description("The minimum of the associated property values.  BUSINESS RULE: There can only be one value per number of elements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("MinimumValue", DataType="integer")]
        public List<string> MinimumValue {
            get {
                return MinimumValueField;
            } 
            set {
                MinimumValueField = value;
                NotifyPropertyChanged("MinimumValue");
            }
        }

         /// <summary>
         /// bool to indicate if MinimumValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MinimumValueSpecified
         {
             get {
             if(MinimumValueField!=null)
                 return MinimumValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> MinimumValueField; 

        /// <summary>
        /// The maximum of the associated property values. BUSINESS RULE: There can only be one value per number of elements.
        /// </summary>
		[Description("The maximum of the associated property values.  BUSINESS RULE: There can only be one value per number of elements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "integer")]
		[XmlElement("MaximumValue", DataType="integer")]
        public List<string> MaximumValue {
            get {
                return MaximumValueField;
            } 
            set {
                MaximumValueField = value;
                NotifyPropertyChanged("MaximumValue");
            }
        }

         /// <summary>
         /// bool to indicate if MaximumValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MaximumValueSpecified
         {
             get {
             if(MaximumValueField!=null)
                 return MaximumValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> MaximumValueField; 


    } //here

    /// <summary>
    /// Information specific to one comment property. Used to capture comments or annotations associated with a given element type in a data-object, for example, associating comments on the specific location of a well path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("CommentProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Information specific to one comment property. Used to capture comments or annotations associated with a given element type in a data-object, for example, associating comments on the specific location of a well path.")]
    public partial class CommentProperty : AbstractValuesProperty, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Identify the language (e.g., US English or French) of the string. It is recommended that language names conform to ISO 639.
        /// </summary>
		[Description("Identify the language (e.g., US English or French) of the string. It is recommended that language names conform to ISO 639.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("Language")]
        public string Language {
            get {
                return LanguageField;
            } 
            set {
                LanguageField = value;
                NotifyPropertyChanged("Language");
            }
        }

        private string LanguageField; 


    } //here

    /// <summary>
    /// Most common type of property used for storing rock or fluid attributes; all are represented as doubles. So that the value range can be known before accessing all values, the min and max values of the range are also stored. BUSINESS RULE: It also contains a unit of measure that can be different from the unit of measure of its property type, but it must be convertible into this unit.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("ContinuousProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Most common type of property used for storing rock or fluid attributes; all are represented as doubles. So that the value range can be known before accessing all values, the min and max values of the range are also stored. BUSINESS RULE: It also contains a unit of measure that can be different from the unit of measure of its property type, but it must be convertible into this unit.")]
    public partial class ContinuousProperty : AbstractValuesProperty, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The minimum of the associated property values. BUSINESS RULE: There can be only one value per number of elements.
        /// </summary>
		[Description("The minimum of the associated property values.  BUSINESS RULE: There can be only one value per number of elements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("MinimumValue")]
        public List<double> MinimumValue {
            get {
                return MinimumValueField;
            } 
            set {
                MinimumValueField = value;
                NotifyPropertyChanged("MinimumValue");
            }
        }

         /// <summary>
         /// bool to indicate if MinimumValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MinimumValueSpecified
         {
             get {
             if(MinimumValueField!=null)
                 return MinimumValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<double> MinimumValueField; 

        /// <summary>
        /// The maximum of the associated property values. BUSINESS RULE: There can be only one value per number of elements.
        /// </summary>
		[Description("The maximum of the associated property values.  BUSINESS RULE: There can be only one value per number of elements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("MaximumValue")]
        public List<double> MaximumValue {
            get {
                return MaximumValueField;
            } 
            set {
                MaximumValueField = value;
                NotifyPropertyChanged("MaximumValue");
            }
        }

         /// <summary>
         /// bool to indicate if MaximumValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MaximumValueSpecified
         {
             get {
             if(MaximumValueField!=null)
                 return MaximumValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<double> MaximumValueField; 

        /// <summary>
        /// Unit of measure for the property.
        /// </summary>
		[Required]
        [Description("Unit of measure for the property.")]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlUom")]
		[XmlElement("UOM")]
        public ResqmlUom? UOM {
            get {
                return UOMField;
            } 
            set {
                UOMField = value;
                 this.UOMSpecified = true;
                NotifyPropertyChanged("UOM");
            }
        }

        
        private bool UOMSpecifiedField = false;
        
        /// <summary>
        /// UOMSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UOMSpecified {
            get {
                return UOMSpecifiedField;
            } 
            set {
                UOMSpecifiedField = value;
                NotifyPropertyChanged("UOMSpecified");
            }
        }
        
        private ResqmlUom? UOMField; 


    } //here

    /// <summary>
    /// Represents the geometric information that should *not* be used as representation geometry, but should be used in another context where the location or geometrical vectorial distances are needed.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PointsProperty", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Represents the geometric information that should *not* be used as representation geometry, but should be used in another context where the location or geometrical vectorial distances are needed.")]
    public partial class PointsProperty : AbstractProperty, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PatchOfPoints property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PatchOfPoints")]
		[XmlElement("PatchOfPoints")]
        public List<PatchOfPoints> PatchOfPoints {
            get {
                return PatchOfPointsField;
            } 
            set {
                PatchOfPointsField = value;
                NotifyPropertyChanged("PatchOfPoints");
            }
        }

         /// <summary>
         /// bool to indicate if PatchOfPoints has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PatchOfPointsSpecified
         {
             get {
             if(PatchOfPointsField!=null)
                 return PatchOfPointsField.Count>0?true:false;
             else return false;
             }
         }
        private List<PatchOfPoints> PatchOfPointsField; 


    } //here

    /// <summary>
    /// A set of properties collected together for a specific purpose. For example, a property set can be used to collect all the properties corresponding to the simulation output at a single time, or all the values of a single property type for all times.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PropertySet", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A set of properties collected together for a specific purpose. For example, a property set can be used to collect all the properties corresponding to the simulation output at a single time, or all the values of a single property type for all times.")]
    public partial class PropertySet : AbstractResqmlDataObject, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// TimeSetKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "TimeSetKind")]
		[XmlElement("TimeSetKind")]
        public TimeSetKind? TimeSetKind {
            get {
                return TimeSetKindField;
            } 
            set {
                TimeSetKindField = value;
                 this.TimeSetKindSpecified = true;
                NotifyPropertyChanged("TimeSetKind");
            }
        }

        
        private bool TimeSetKindSpecifiedField = false;
        
        /// <summary>
        /// TimeSetKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TimeSetKindSpecified {
            get {
                return TimeSetKindSpecifiedField;
            } 
            set {
                TimeSetKindSpecifiedField = value;
                NotifyPropertyChanged("TimeSetKindSpecified");
            }
        }
        
        private TimeSetKind? TimeSetKindField; 

        /// <summary>
        /// HasSinglePropertyKind property
        /// </summary>
		[Required]
        [Description("If true, indicates that the collection contains only property values associated with a single property kind.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("HasSinglePropertyKind")]
        public bool? HasSinglePropertyKind {
            get {
                return HasSinglePropertyKindField;
            } 
            set {
                HasSinglePropertyKindField = value;
                NotifyPropertyChanged("HasSinglePropertyKind");
            }
        }

        private bool? HasSinglePropertyKindField; 

        /// <summary>
        /// HasMultipleRealizations property
        /// </summary>
		[Required]
        [Description("If true, indicates that the collection contains properties with defined realization indices.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("HasMultipleRealizations")]
        public bool? HasMultipleRealizations {
            get {
                return HasMultipleRealizationsField;
            } 
            set {
                HasMultipleRealizationsField = value;
                NotifyPropertyChanged("HasMultipleRealizations");
            }
        }

        private bool? HasMultipleRealizationsField; 

        /// <summary>
        /// ParentSet property
        /// </summary>
		[Description("A pointer to the parent property group of this property group.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ParentSet")]
        public List<DataObjectReference> ParentSet {
            get {
                return ParentSetField;
            } 
            set {
                ParentSetField = value;
                NotifyPropertyChanged("ParentSet");
            }
        }

         /// <summary>
         /// bool to indicate if ParentSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParentSetSpecified
         {
             get {
             if(ParentSetField!=null)
                 return ParentSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> ParentSetField; 

        /// <summary>
        /// Properties property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Properties")]
        public List<DataObjectReference> Properties {
            get {
                return PropertiesField;
            } 
            set {
                PropertiesField = value;
                NotifyPropertyChanged("Properties");
            }
        }

         /// <summary>
         /// bool to indicate if Properties has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PropertiesSpecified
         {
             get {
             if(PropertiesField!=null)
                 return PropertiesField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> PropertiesField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractPropertyLookup xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StringTableLookup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DoubleTableLookup))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractPropertyLookup", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractPropertyLookup xsd type.")]
    public abstract partial class AbstractPropertyLookup : AbstractResqmlDataObject, INotifyPropertyChanged
    {


    } //here
    }

    /// <summary>
    /// Defines an integer-to-string lookup table, for example, stores facies properties, where a facies index is associated with a facies name. . Used for categorical properties, which also may use a double table lookup. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StringTableLookup", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Defines an integer-to-string lookup table, for example, stores facies properties, where a facies index is associated with a facies name. . Used for categorical properties, which also may use a double table lookup. ")]
    public partial class StringTableLookup : AbstractPropertyLookup, IResqmlDataObject, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StringTableLookup class.
        /// </summary>
        public StringTableLookup() {}

        /// <summary>
        /// Initializes a new instance of the StringTableLookup class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public StringTableLookup(List<StringLookup> value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StringLookup")]
		[XmlElement("Value")]
        public List<StringLookup> Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

         /// <summary>
         /// bool to indicate if Value has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValueSpecified
         {
             get {
             if(ValueField!=null)
                 return ValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<StringLookup> ValueField; 


    } //here

    /// <summary>
    /// Defines a function for table lookups. For example, used for linear interpolation, such as PVT. Used for categorical property, which also may use StringTableLookup.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("DoubleTableLookup", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Defines a function for table lookups. For example, used for linear interpolation, such as PVT. Used for categorical property, which also may use StringTableLookup.")]
    public partial class DoubleTableLookup : AbstractPropertyLookup, IResqmlDataObject, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DoubleTableLookup class.
        /// </summary>
        public DoubleTableLookup() {}

        /// <summary>
        /// Initializes a new instance of the DoubleTableLookup class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public DoubleTableLookup(List<DoubleLookup> value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

        /// <summary>
        /// Value property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DoubleLookup")]
		[XmlElement("Value")]
        public List<DoubleLookup> Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

         /// <summary>
         /// bool to indicate if Value has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValueSpecified
         {
             get {
             if(ValueField!=null)
                 return ValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<DoubleLookup> ValueField; 


    } //here

    /// <summary>
    /// A description of a property name relative to a standard definition. For example, you may specify if the property kind is abstract, the dictionary in which the property is unique, and the representative unit of measure. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PropertyKind", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A description of a property name relative to a standard definition. For example, you may specify if the property kind is abstract, the dictionary in which the property is unique, and the representative unit of measure. ")]
    public partial class PropertyKind : AbstractResqmlDataObject, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// NamingSystem property
        /// </summary>
		[Required]
        [Description("The name of the dictionary within which the property is unique. This also defines the name of the controlling authority.  Use a URN of the form \"urn:x-resqml:domainOrEmail:dictionaryName\".  An example public dictionary: \"urn:resqml:energistics.org:RESQML\" assigned to values defined by ResqmlPropertyKind.  An example corporate dictionary: \"urn:resqml:slb.com:product-x\".  An example personal dictionary: \"urn:resqml:first.last@mycompany.com:my.first.dictionary\". The purpose of this scheme is to generate a unique name. Parsing for semantics is not intended.")]
        [EnergisticsDataTypeAttribute(DataType = "anyURI")]
		[XmlElement("NamingSystem", DataType="anyURI")]
        public string NamingSystem {
            get {
                return NamingSystemField;
            } 
            set {
                NamingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string NamingSystemField; 

        /// <summary>
        /// IsAbstract property
        /// </summary>
		[Required]
        [Description("A value of true indicates that the property kind is abstract and an instance of property values must not represent this kind.  A value of false indicates otherwise (i.e., that an instance of property values may represent this kind).")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsAbstract")]
        public bool? IsAbstract {
            get {
                return IsAbstractField;
            } 
            set {
                IsAbstractField = value;
                NotifyPropertyChanged("IsAbstract");
            }
        }

        private bool? IsAbstractField; 

        /// <summary>
        /// RepresentativeUom property
        /// </summary>
		[Required]
        [Description("Generally matches the base for conversion, except where multiple classes have the same underlying dimensional analysis. In this case, the representative unit may provide additional information about the underlying concept of the class. For example, “area per volume” has the same dimensional analysis as “per length”, but it specifies a representative unit of “m2/m3” instead of “1/m”.")]
        [EnergisticsDataTypeAttribute(DataType = "ResqmlUom")]
		[XmlElement("RepresentativeUom")]
        public ResqmlUom? RepresentativeUom {
            get {
                return RepresentativeUomField;
            } 
            set {
                RepresentativeUomField = value;
                 this.RepresentativeUomSpecified = true;
                NotifyPropertyChanged("RepresentativeUom");
            }
        }

        
        private bool RepresentativeUomSpecifiedField = false;
        
        /// <summary>
        /// RepresentativeUomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RepresentativeUomSpecified {
            get {
                return RepresentativeUomSpecifiedField;
            } 
            set {
                RepresentativeUomSpecifiedField = value;
                NotifyPropertyChanged("RepresentativeUomSpecified");
            }
        }
        
        private ResqmlUom? RepresentativeUomField; 

        /// <summary>
        /// ParentPropertyKind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPropertyKind")]
		[XmlElement("ParentPropertyKind")]
        public AbstractPropertyKind ParentPropertyKind {
            get {
                return ParentPropertyKindField;
            } 
            set {
                ParentPropertyKindField = value;
                NotifyPropertyChanged("ParentPropertyKind");
            }
        }

        private AbstractPropertyKind ParentPropertyKindField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the WellboreMarker xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="WellboreMarker", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the WellboreMarker xsd type.")]
    public partial class WellboreMarker : AbstractResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// FluidContact property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "FluidContact")]
		[XmlElement("FluidContact")]
        public FluidContact? FluidContact {
            get {
                return FluidContactField;
            } 
            set {
                FluidContactField = value;
                 this.FluidContactSpecified = true;
                NotifyPropertyChanged("FluidContact");
            }
        }

        private FluidContact? FluidContactField; 

        /// <summary>
        /// FluidContactSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidContactSpecified {
            get {
                return FluidContactSpecifiedField;
            } 
            set {
                FluidContactSpecifiedField = value;
                NotifyPropertyChanged("FluidContactSpecified");
            }
        }

        private bool FluidContactSpecifiedField; 

        /// <summary>
        /// FluidMarker property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "FluidMarker")]
		[XmlElement("FluidMarker")]
        public FluidMarker? FluidMarker {
            get {
                return FluidMarkerField;
            } 
            set {
                FluidMarkerField = value;
                 this.FluidMarkerSpecified = true;
                NotifyPropertyChanged("FluidMarker");
            }
        }

        private FluidMarker? FluidMarkerField; 

        /// <summary>
        /// FluidMarkerSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidMarkerSpecified {
            get {
                return FluidMarkerSpecifiedField;
            } 
            set {
                FluidMarkerSpecifiedField = value;
                NotifyPropertyChanged("FluidMarkerSpecified");
            }
        }

        private bool FluidMarkerSpecifiedField; 

        /// <summary>
        /// GeologicBoundaryKind property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "GeologicBoundaryKind")]
		[XmlElement("GeologicBoundaryKind")]
        public GeologicBoundaryKind? GeologicBoundaryKind {
            get {
                return GeologicBoundaryKindField;
            } 
            set {
                GeologicBoundaryKindField = value;
                 this.GeologicBoundaryKindSpecified = true;
                NotifyPropertyChanged("GeologicBoundaryKind");
            }
        }

        private GeologicBoundaryKind? GeologicBoundaryKindField; 

        /// <summary>
        /// GeologicBoundaryKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GeologicBoundaryKindSpecified {
            get {
                return GeologicBoundaryKindSpecifiedField;
            } 
            set {
                GeologicBoundaryKindSpecifiedField = value;
                NotifyPropertyChanged("GeologicBoundaryKindSpecified");
            }
        }

        private bool GeologicBoundaryKindSpecifiedField; 

        /// <summary>
        /// WitsmlFormationMarker property
        /// </summary>
		[Description("Optional WITSML wellbore reference of the well marker frame.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WitsmlFormationMarker")]
        public DataObjectReference WitsmlFormationMarker {
            get {
                return WitsmlFormationMarkerField;
            } 
            set {
                WitsmlFormationMarkerField = value;
                NotifyPropertyChanged("WitsmlFormationMarker");
            }
        }

        private DataObjectReference WitsmlFormationMarkerField; 

        /// <summary>
        /// Interpretation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Interpretation")]
        public DataObjectReference Interpretation {
            get {
                return InterpretationField;
            } 
            set {
                InterpretationField = value;
                NotifyPropertyChanged("Interpretation");
            }
        }

        private DataObjectReference InterpretationField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractRepresentation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TriangulatedSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PolylineSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PointSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreTrajectoryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BlockedWellboreRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DeviationSurveyRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SubRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RedefinedGeometryRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RepresentationSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonSealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GridConnectionSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractRepresentation xsd type.")]
    public abstract partial class AbstractRepresentation : AbstractResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// RepresentedInterpretation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("RepresentedInterpretation")]
        public DataObjectReference RepresentedInterpretation {
            get {
                return RepresentedInterpretationField;
            } 
            set {
                RepresentedInterpretationField = value;
                NotifyPropertyChanged("RepresentedInterpretation");
            }
        }

        private DataObjectReference RepresentedInterpretationField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractSurfaceRepresentation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grid2dRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneSetRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TriangulatedSetRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractSurfaceRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractSurfaceRepresentation xsd type.")]
    public abstract partial class AbstractSurfaceRepresentation : AbstractRepresentation, INotifyPropertyChanged
    {

        /// <summary>
        /// SurfaceRole property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "SurfaceRole")]
		[XmlElement("SurfaceRole")]
        public SurfaceRole? SurfaceRole {
            get {
                return SurfaceRoleField;
            } 
            set {
                SurfaceRoleField = value;
                 this.SurfaceRoleSpecified = true;
                NotifyPropertyChanged("SurfaceRole");
            }
        }

        
        private bool SurfaceRoleSpecifiedField = false;
        
        /// <summary>
        /// SurfaceRoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SurfaceRoleSpecified {
            get {
                return SurfaceRoleSpecifiedField;
            } 
            set {
                SurfaceRoleSpecifiedField = value;
                NotifyPropertyChanged("SurfaceRoleSpecified");
            }
        }
        
        private SurfaceRole? SurfaceRoleField; 

        /// <summary>
        /// Boundaries property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PatchBoundaries")]
		[XmlElement("Boundaries")]
        public List<PatchBoundaries> Boundaries {
            get {
                return BoundariesField;
            } 
            set {
                BoundariesField = value;
                NotifyPropertyChanged("Boundaries");
            }
        }

         /// <summary>
         /// bool to indicate if Boundaries has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoundariesSpecified
         {
             get {
             if(BoundariesField!=null)
                 return BoundariesField.Count>0?true:false;
             else return false;
             }
         }
        private List<PatchBoundaries> BoundariesField; 


    } //here
    }

    /// <summary>
    /// Set of representations based on a 2D grid. Each 2D grid representation corresponds to one patch of the set.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("Grid2dSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Set of representations based on a 2D grid. Each 2D grid representation corresponds to one patch of the set.")]
    public partial class Grid2dSetRepresentation : AbstractSurfaceRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Grid2dPatch property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "Grid2dPatch")]
		[XmlElement("Grid2dPatch")]
        public List<Grid2dPatch> Grid2dPatch {
            get {
                return Grid2dPatchField;
            } 
            set {
                Grid2dPatchField = value;
                NotifyPropertyChanged("Grid2dPatch");
            }
        }

         /// <summary>
         /// bool to indicate if Grid2dPatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool Grid2dPatchSpecified
         {
             get {
             if(Grid2dPatchField!=null)
                 return Grid2dPatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<Grid2dPatch> Grid2dPatchField; 


    } //here

    /// <summary>
    /// Representation based on a 2D grid. For definitions of slowest and fastest axes of the array, see Grid2dPatch. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("Grid2dRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Representation based on a 2D grid. For definitions of slowest and fastest axes of the array, see Grid2dPatch. ")]
    public partial class Grid2dRepresentation : AbstractSurfaceRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Grid2dPatch property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Grid2dPatch")]
		[XmlElement("Grid2dPatch")]
        public Grid2dPatch Grid2dPatch {
            get {
                return Grid2dPatchField;
            } 
            set {
                Grid2dPatchField = value;
                NotifyPropertyChanged("Grid2dPatch");
            }
        }

        private Grid2dPatch Grid2dPatchField; 


    } //here

    /// <summary>
    /// Defines a plane representation, which can be made up of multiple patches. Commonly represented features are fluid contacts or frontiers. Common geometries of this representation are titled or horizontal planes. BUSINESS RULE: If the plane representation is made up of multiple patches, then you must specify the outer rings for each plane patch.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PlaneSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Defines a plane representation, which can be made up of multiple patches. Commonly represented features are fluid contacts or frontiers. Common geometries of this representation are titled or horizontal planes. BUSINESS RULE: If the plane representation is made up of multiple patches, then you must specify the outer rings for each plane patch.")]
    public partial class PlaneSetRepresentation : AbstractSurfaceRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Planes property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractPlaneGeometry")]
		[XmlElement("Planes")]
        public List<AbstractPlaneGeometry> Planes {
            get {
                return PlanesField;
            } 
            set {
                PlanesField = value;
                NotifyPropertyChanged("Planes");
            }
        }

         /// <summary>
         /// bool to indicate if Planes has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PlanesSpecified
         {
             get {
             if(PlanesField!=null)
                 return PlanesField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractPlaneGeometry> PlanesField; 


    } //here

    /// <summary>
    /// A representation based on set of triangulated mesh patches, which gets its geometry from a 1D array of points. BUSINESS RULE: The orientation of all the triangles of this representation must be consistent.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TriangulatedSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A representation based on set of triangulated mesh patches, which gets its geometry from a 1D array of points. BUSINESS RULE: The orientation of all the triangles of this representation must be consistent.")]
    public partial class TriangulatedSetRepresentation : AbstractSurfaceRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// TrianglePatch property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "TrianglePatch")]
		[XmlElement("TrianglePatch")]
        public List<TrianglePatch> TrianglePatch {
            get {
                return TrianglePatchField;
            } 
            set {
                TrianglePatchField = value;
                NotifyPropertyChanged("TrianglePatch");
            }
        }

         /// <summary>
         /// bool to indicate if TrianglePatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TrianglePatchSpecified
         {
             get {
             if(TrianglePatchField!=null)
                 return TrianglePatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<TrianglePatch> TrianglePatchField; 


    } //here

    /// <summary>
    /// A representation made up of a single polyline or "polygonal chain", which may be closed or not. Definition from Wikipedia (http://en.wikipedia.org/wiki/Piecewise_linear_curve): A polygonal chain, polygonal curve, polygonal path, or piecewise linear curve, is a connected series of line segments. More formally, a polygonal chain P is a curve specified by a sequence of points A_1, A_2, ..., A_n called its vertices so that the curve consists of the line segments connecting the consecutive vertices. In computer graphics a polygonal chain is called a polyline and is often used to approximate curved paths. BUSINESS RULE: To record a polyline the writer software must give the values of the geometry of each node in an order corresponding to the logical series of segments (edges). The geometry of a polyline must be a 1D array of points. A simple polygonal chain is one in which only consecutive (or the first and the last) segments intersect and only at their endpoints. A closed polygonal chain (isClosed=True) is one in which the first vertex coincides with the last one, or the first and the last vertices are connected by a line segment. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PolylineRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A representation made up of a single polyline or polygonal chain, which may be closed or not. Definition from Wikipedia (http://en.wikipedia.org/wiki/Piecewise_linear_curve): A polygonal chain, polygonal curve, polygonal path, or piecewise linear curve, is a connected series of line segments. More formally, a polygonal chain P is a curve specified by a sequence of points A_1, A_2, ..., A_n called its vertices so that the curve consists of the line segments connecting the consecutive vertices. In computer graphics a polygonal chain is called a polyline and is often used to approximate curved paths. BUSINESS RULE: To record a polyline the writer software must give the values of the geometry of each node in an order corresponding to the logical series of segments (edges). The geometry of a polyline must be a 1D array of points. A simple polygonal chain is one in which only consecutive (or the first and the last) segments intersect and only at their endpoints. A closed polygonal chain (isClosed=True) is one in which the first vertex coincides with the last one, or the first and the last vertices are connected by a line segment. ")]
    public partial class PolylineRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// LineRole property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "LineRole")]
		[XmlElement("LineRole")]
        public LineRole? LineRole {
            get {
                return LineRoleField;
            } 
            set {
                LineRoleField = value;
                 this.LineRoleSpecified = true;
                NotifyPropertyChanged("LineRole");
            }
        }

        private LineRole? LineRoleField; 

        /// <summary>
        /// LineRoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LineRoleSpecified {
            get {
                return LineRoleSpecifiedField;
            } 
            set {
                LineRoleSpecifiedField = value;
                NotifyPropertyChanged("LineRoleSpecified");
            }
        }

        private bool LineRoleSpecifiedField; 

        /// <summary>
        /// IsClosed property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsClosed")]
        public bool? IsClosed {
            get {
                return IsClosedField;
            } 
            set {
                IsClosedField = value;
                NotifyPropertyChanged("IsClosed");
            }
        }

        private bool? IsClosedField; 

        /// <summary>
        /// NodePatch property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "NodePatch")]
		[XmlElement("NodePatch")]
        public NodePatch NodePatch {
            get {
                return NodePatchField;
            } 
            set {
                NodePatchField = value;
                NotifyPropertyChanged("NodePatch");
            }
        }

        private NodePatch NodePatchField; 


    } //here

    /// <summary>
    /// A representation made up of a set of polylines or a set of polygonal chains (for more information, see PolylineRepresentation). For compactness, it is organized by line patch as a unique polyline set patch. if allPolylineClosed = True, all the polylines are connected between the first and the last point. Its geometry is a 1D array of points, corresponding to the concatenation of the points of all polyline points.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PolylineSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A representation made up of a set of polylines or a set of polygonal chains (for more information, see PolylineRepresentation). For compactness, it is organized by line patch as a unique polyline set patch. if allPolylineClosed = True, all the polylines are connected between the first and the last point. Its geometry is a 1D array of points, corresponding to the concatenation of the points of all polyline points.")]
    public partial class PolylineSetRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// LineRole property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "LineRole")]
		[XmlElement("LineRole")]
        public LineRole? LineRole {
            get {
                return LineRoleField;
            } 
            set {
                LineRoleField = value;
                 this.LineRoleSpecified = true;
                NotifyPropertyChanged("LineRole");
            }
        }

        private LineRole? LineRoleField; 

        /// <summary>
        /// LineRoleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LineRoleSpecified {
            get {
                return LineRoleSpecifiedField;
            } 
            set {
                LineRoleSpecifiedField = value;
                NotifyPropertyChanged("LineRoleSpecified");
            }
        }

        private bool LineRoleSpecifiedField; 

        /// <summary>
        /// LinePatch property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PolylineSetPatch")]
		[XmlElement("LinePatch")]
        public List<PolylineSetPatch> LinePatch {
            get {
                return LinePatchField;
            } 
            set {
                LinePatchField = value;
                NotifyPropertyChanged("LinePatch");
            }
        }

         /// <summary>
         /// bool to indicate if LinePatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LinePatchSpecified
         {
             get {
             if(LinePatchField!=null)
                 return LinePatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<PolylineSetPatch> LinePatchField; 


    } //here

    /// <summary>
    /// A representation that consists of one or more node patches. Each node patch is an array of XYZ coordinates for the 3D points. There is no implied linkage between the multiple patches.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("PointSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A representation that consists of one or more node patches. Each node patch is an array of XYZ coordinates for the 3D points. There is no implied linkage between the multiple patches.")]
    public partial class PointSetRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// NodePatch property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "NodePatch")]
		[XmlElement("NodePatch")]
        public List<NodePatch> NodePatch {
            get {
                return NodePatchField;
            } 
            set {
                NodePatchField = value;
                NotifyPropertyChanged("NodePatch");
            }
        }

         /// <summary>
         /// bool to indicate if NodePatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NodePatchSpecified
         {
             get {
             if(NodePatchField!=null)
                 return NodePatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<NodePatch> NodePatchField; 


    } //here

    /// <summary>
    /// Representation of a wellbore trajectory.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreTrajectoryRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Representation of a wellbore trajectory.")]
    public partial class WellboreTrajectoryRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// StartMd property
        /// </summary>
		[Required]
        [Description("Specifies the measured depth  for the start of the wellbore trajectory.  Range may often be from kickoff to TD, but this is not necessary.   BUSINESS RULE: Start MD is always less than the Finish MD.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("StartMd")]
        public double? StartMD {
            get {
                return StartMdField;
            } 
            set {
                StartMdField = value;
                NotifyPropertyChanged("StartMD");
            }
        }

        private double? StartMdField; 

        /// <summary>
        /// FinishMd property
        /// </summary>
		[Required]
        [Description("Specifies the ending measured depth of the range for the wellbore trajectory.  Range may often be from kickoff to TD, but this is not necessary.   BUSINESS RULE: Start MD is always less than the Finish MD.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("FinishMd")]
        public double? FinishMD {
            get {
                return FinishMdField;
            } 
            set {
                FinishMdField = value;
                NotifyPropertyChanged("FinishMD");
            }
        }

        private double? FinishMdField; 

        /// <summary>
        /// MdUom property
        /// </summary>
		[Required]
        [Description("The unit of measure of the reference MD.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
		[XmlElement("MdUom")]
        public LengthUom? MDUom {
            get {
                return MdUomField;
            } 
            set {
                MdUomField = value;
                 this.MDUomSpecified = true;
                NotifyPropertyChanged("MDUom");
            }
        }

        
        private bool MDUomSpecifiedField = false;
        
        /// <summary>
        /// MDUomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MDUomSpecified {
            get {
                return MDUomSpecifiedField;
            } 
            set {
                MDUomSpecifiedField = value;
                NotifyPropertyChanged("MDUomSpecified");
            }
        }
        
        private LengthUom? MdUomField; 

        /// <summary>
        /// MdDomain property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "MdDomain")]
		[XmlElement("MdDomain")]
        public MdDomain? MDDomain {
            get {
                return MdDomainField;
            } 
            set {
                MdDomainField = value;
                 this.MDDomainSpecified = true;
                NotifyPropertyChanged("MDDomain");
            }
        }

        private MdDomain? MdDomainField; 

        /// <summary>
        /// MdDomainSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MDDomainSpecified {
            get {
                return MdDomainSpecifiedField;
            } 
            set {
                MdDomainSpecifiedField = value;
                NotifyPropertyChanged("MDDomainSpecified");
            }
        }

        private bool MdDomainSpecifiedField; 

        /// <summary>
        /// WitsmlTrajectory property
        /// </summary>
		[Description("Pointer to the WITSML trajectory that is contained in the referenced wellbore. (For information about WITSML well and wellbore references, see the definition for RESQML technical feature, WellboreFeature).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WitsmlTrajectory")]
        public DataObjectReference WitsmlTrajectory {
            get {
                return WitsmlTrajectoryField;
            } 
            set {
                WitsmlTrajectoryField = value;
                NotifyPropertyChanged("WitsmlTrajectory");
            }
        }

        private DataObjectReference WitsmlTrajectoryField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[Description("Explicit geometry is not required for vertical wells")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractParametricLineGeometry")]
		[XmlElement("Geometry")]
        public AbstractParametricLineGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private AbstractParametricLineGeometry GeometryField; 

        /// <summary>
        /// MdDatum property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("MdDatum")]
        public DataObjectReference MDDatum {
            get {
                return MdDatumField;
            } 
            set {
                MdDatumField = value;
                NotifyPropertyChanged("MDDatum");
            }
        }

        private DataObjectReference MdDatumField; 

        /// <summary>
        /// DeviationSurvey property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("DeviationSurvey")]
        public DataObjectReference DeviationSurvey {
            get {
                return DeviationSurveyField;
            } 
            set {
                DeviationSurveyField = value;
                NotifyPropertyChanged("DeviationSurvey");
            }
        }

        private DataObjectReference DeviationSurveyField; 

        /// <summary>
        /// ParentIntersection property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "WellboreTrajectoryParentIntersection")]
		[XmlElement("ParentIntersection")]
        public WellboreTrajectoryParentIntersection ParentIntersection {
            get {
                return ParentIntersectionField;
            } 
            set {
                ParentIntersectionField = value;
                NotifyPropertyChanged("ParentIntersection");
            }
        }

        private WellboreTrajectoryParentIntersection ParentIntersectionField; 


    } //here

    /// <summary>
    /// Representation of a wellbore that is organized along a wellbore trajectory by its MD values. RESQML uses MD values to associate properties on points and to organize association of properties on intervals between MD points. 
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreMarkerFrameRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BlockedWellboreRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreFrameRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Representation of a wellbore that is organized along a wellbore trajectory by its MD values. RESQML uses MD values to associate properties on points and to organize association of properties on intervals between MD points. ")]
    public partial class WellboreFrameRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// NodeCount property
        /// </summary>
		[Required]
        [Description("Number of nodes. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("NodeCount", DataType="positiveInteger")]
        public string NodeCount {
            get {
                return NodeCountField;
            } 
            set {
                NodeCountField = value;
                NotifyPropertyChanged("NodeCount");
            }
        }

        private string NodeCountField; 

        /// <summary>
        /// NodeMd property
        /// </summary>
		[Required]
        [Description("MD values for each node. BUSINESS RULE: MD values and UOM must be consistent with the trajectory representation.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("NodeMd")]
        public AbstractDoubleArray NodeMD {
            get {
                return NodeMdField;
            } 
            set {
                NodeMdField = value;
                NotifyPropertyChanged("NodeMD");
            }
        }

        private AbstractDoubleArray NodeMdField; 

        /// <summary>
        /// WitsmlLogReference property
        /// </summary>
		[Description("The reference to the equivalent WITSML well log.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WitsmlLogReference")]
        public DataObjectReference WitsmlLogReference {
            get {
                return WitsmlLogReferenceField;
            } 
            set {
                WitsmlLogReferenceField = value;
                NotifyPropertyChanged("WitsmlLogReference");
            }
        }

        private DataObjectReference WitsmlLogReferenceField; 

        /// <summary>
        /// IntervalStratigraphiUnits property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IntervalStratigraphicUnits")]
		[XmlElement("IntervalStratigraphiUnits")]
        public IntervalStratigraphicUnits IntervalStratigraphiUnits {
            get {
                return IntervalStratigraphiUnitsField;
            } 
            set {
                IntervalStratigraphiUnitsField = value;
                NotifyPropertyChanged("IntervalStratigraphiUnits");
            }
        }

        private IntervalStratigraphicUnits IntervalStratigraphiUnitsField; 

        /// <summary>
        /// CellFluidPhaseUnits property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CellFluidPhaseUnits")]
		[XmlElement("CellFluidPhaseUnits")]
        public CellFluidPhaseUnits CellFluidPhaseUnits {
            get {
                return CellFluidPhaseUnitsField;
            } 
            set {
                CellFluidPhaseUnitsField = value;
                NotifyPropertyChanged("CellFluidPhaseUnits");
            }
        }

        private CellFluidPhaseUnits CellFluidPhaseUnitsField; 

        /// <summary>
        /// Trajectory property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Trajectory")]
        public DataObjectReference Trajectory {
            get {
                return TrajectoryField;
            } 
            set {
                TrajectoryField = value;
                NotifyPropertyChanged("Trajectory");
            }
        }

        private DataObjectReference TrajectoryField; 


    } //here

    /// <summary>
    /// A well log frame where each entry represents a well marker
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreMarkerFrameRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A well log frame where each entry represents a well marker")]
    public partial class WellboreMarkerFrameRepresentation : WellboreFrameRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// WellboreMarker property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "WellboreMarker")]
		[XmlElement("WellboreMarker")]
        public List<WellboreMarker> WellboreMarker {
            get {
                return WellboreMarkerField;
            } 
            set {
                WellboreMarkerField = value;
                NotifyPropertyChanged("WellboreMarker");
            }
        }

         /// <summary>
         /// bool to indicate if WellboreMarker has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellboreMarkerSpecified
         {
             get {
             if(WellboreMarkerField!=null)
                 return WellboreMarkerField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellboreMarker> WellboreMarkerField; 


    } //here

    /// <summary>
    /// The information that allows you to locate, on one or several grids (existing or planned), the intersection of volume (cells) and surface (faces) elements with a wellbore trajectory (existing or planned).
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("BlockedWellboreRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("The information that allows you to locate, on one or several grids (existing or planned), the intersection of volume (cells) and surface (faces) elements with a wellbore trajectory (existing or planned).")]
    public partial class BlockedWellboreRepresentation : WellboreFrameRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// CellCount property
        /// </summary>
		[Required]
        [Description("The number of non-null entries in the grid indices array.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("CellCount", DataType="nonNegativeInteger")]
        public string CellCount {
            get {
                return CellCountField;
            } 
            set {
                CellCountField = value;
                NotifyPropertyChanged("CellCount");
            }
        }

        private string CellCountField; 

        /// <summary>
        /// CellIndices property
        /// </summary>
		[Required]
        [Description("The grid cell index for each blocked well cell. BUSINESS RULE: Array length must equal cell count.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("CellIndices")]
        public AbstractIntegerArray CellIndices {
            get {
                return CellIndicesField;
            } 
            set {
                CellIndicesField = value;
                NotifyPropertyChanged("CellIndices");
            }
        }

        private AbstractIntegerArray CellIndicesField; 

        /// <summary>
        /// GridIndices property
        /// </summary>
		[Required]
        [Description("Size of array = IntervalCount.  Null values of -1 signify that that interval is not within a grid.  BUSINESS RULE: The cell count must equal the number of non-null entries in this array.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("GridIndices")]
        public AbstractIntegerArray GridIndices {
            get {
                return GridIndicesField;
            } 
            set {
                GridIndicesField = value;
                NotifyPropertyChanged("GridIndices");
            }
        }

        private AbstractIntegerArray GridIndicesField; 

        /// <summary>
        /// LocalFacePairPerCellIndices property
        /// </summary>
		[Required]
        [Description("For each cell, these are the entry and exit faces of the trajectory. Use null (-1), for instance, at TD when there only one intersection. The local face-per-cell index is used because a global face index need not have been defined on the grid.  BUSINESS RULE: The array dimensions must equal 2 x CellCount.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("LocalFacePairPerCellIndices")]
        public AbstractIntegerArray LocalFacePairPerCellIndices {
            get {
                return LocalFacePairPerCellIndicesField;
            } 
            set {
                LocalFacePairPerCellIndicesField = value;
                NotifyPropertyChanged("LocalFacePairPerCellIndices");
            }
        }

        private AbstractIntegerArray LocalFacePairPerCellIndicesField; 

        /// <summary>
        /// Grid property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Grid")]
        public List<DataObjectReference> Grid {
            get {
                return GridField;
            } 
            set {
                GridField = value;
                NotifyPropertyChanged("Grid");
            }
        }

         /// <summary>
         /// bool to indicate if Grid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GridSpecified
         {
             get {
             if(GridField!=null)
                 return GridField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> GridField; 


    } //here

    /// <summary>
    /// Specifies the station data from a deviation survey. The deviation survey does not provide a complete specification of the geometry of a wellbore trajectory. Although a minimum-curvature algorithm is used in most cases, the implementation varies sufficiently that no single algorithmic specification is available as a data transfer standard. Instead, the geometry of a RESQML wellbore trajectory is represented by a parametric line, parameterized by the MD. CRS and units of measure do not need to be consistent with the CRS and units of measure for wellbore trajectory representation.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("DeviationSurveyRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Specifies the station data from a deviation survey. The deviation survey does not provide a complete specification of the geometry of a wellbore trajectory. Although a minimum-curvature algorithm is used in most cases, the implementation varies sufficiently that no single algorithmic specification is available as a data transfer standard. Instead, the geometry of a RESQML wellbore trajectory is represented by a parametric line, parameterized by the MD. CRS and units of measure do not need to be consistent with the CRS and units of measure for wellbore trajectory representation.")]
    public partial class DeviationSurveyRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// WitsmlDeviationSurvey property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("WitsmlDeviationSurvey")]
        public DataObjectReference WitsmlDeviationSurvey {
            get {
                return WitsmlDeviationSurveyField;
            } 
            set {
                WitsmlDeviationSurveyField = value;
                NotifyPropertyChanged("WitsmlDeviationSurvey");
            }
        }

        private DataObjectReference WitsmlDeviationSurveyField; 

        /// <summary>
        /// IsFinal property
        /// </summary>
		[Required]
        [Description("Used to indicate that this is a final version of the deviation survey, as distinct from the interim interpretations.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsFinal")]
        public bool? IsFinal {
            get {
                return IsFinalField;
            } 
            set {
                IsFinalField = value;
                NotifyPropertyChanged("IsFinal");
            }
        }

        private bool? IsFinalField; 

        /// <summary>
        /// StationCount property
        /// </summary>
		[Required]
        [Description("Number of Stations")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("StationCount", DataType="positiveInteger")]
        public string StationCount {
            get {
                return StationCountField;
            } 
            set {
                StationCountField = value;
                NotifyPropertyChanged("StationCount");
            }
        }

        private string StationCountField; 

        /// <summary>
        /// MdUom property
        /// </summary>
		[Required]
        [Description("Units of Measure of the measured depths along this deviation survey.")]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
		[XmlElement("MdUom")]
        public LengthUom? MDUom {
            get {
                return MdUomField;
            } 
            set {
                MdUomField = value;
                 this.MDUomSpecified = true;
                NotifyPropertyChanged("MDUom");
            }
        }

        
        private bool MDUomSpecifiedField = false;
        
        /// <summary>
        /// MDUomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MDUomSpecified {
            get {
                return MDUomSpecifiedField;
            } 
            set {
                MDUomSpecifiedField = value;
                NotifyPropertyChanged("MDUomSpecified");
            }
        }
        
        private LengthUom? MdUomField; 

        /// <summary>
        /// Mds property
        /// </summary>
		[Required]
        [Description("MD values for the position of the stations  BUSINESS RULE: Array length equals station count")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("Mds")]
        public AbstractDoubleArray Mds {
            get {
                return MdsField;
            } 
            set {
                MdsField = value;
                NotifyPropertyChanged("Mds");
            }
        }

        private AbstractDoubleArray MdsField; 

        /// <summary>
        /// FirstStationLocation property
        /// </summary>
		[Required]
        [Description("XYZ location of the first station of the deviation survey.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Point3d")]
		[XmlElement("FirstStationLocation")]
        public Point3d FirstStationLocation {
            get {
                return FirstStationLocationField;
            } 
            set {
                FirstStationLocationField = value;
                NotifyPropertyChanged("FirstStationLocation");
            }
        }

        private Point3d FirstStationLocationField; 

        /// <summary>
        /// AngleUom property
        /// </summary>
		[Required]
        [Description("Defines the units of measure for the azimuth and inclination")]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
		[XmlElement("AngleUom")]
        public PlaneAngleUom? AngleUom {
            get {
                return AngleUomField;
            } 
            set {
                AngleUomField = value;
                 this.AngleUomSpecified = true;
                NotifyPropertyChanged("AngleUom");
            }
        }

        
        private bool AngleUomSpecifiedField = false;
        
        /// <summary>
        /// AngleUomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AngleUomSpecified {
            get {
                return AngleUomSpecifiedField;
            } 
            set {
                AngleUomSpecifiedField = value;
                NotifyPropertyChanged("AngleUomSpecified");
            }
        }
        
        private PlaneAngleUom? AngleUomField; 

        /// <summary>
        /// Azimuths property
        /// </summary>
		[Required]
        [Description("An array of azimuth angles, one for each survey station. The rotation is relative to the ProjectedCrs north with a positive value indication a clockwise rotation as seen from above.   If the local CRS - whether a LocalTime3dCrs or a LocalDepth3dCrs - is rotated relative to the ProjectedCrs, the azimuths remain relative to the ProjectedCrs not the local CRS.   Note that the projection’s north is not the same as true north or magnetic north. A good definition of the different kinds of “north” can be found in the OGP Surveying & Positioning Guidance Note 1 http://www.ogp.org.uk/pubs/373-01.pdf (the \"True, Grid and Magnetic North bearings\" paragraph).   BUSINESS RULE: Array length equals station count")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("Azimuths")]
        public AbstractDoubleArray Azimuths {
            get {
                return AzimuthsField;
            } 
            set {
                AzimuthsField = value;
                NotifyPropertyChanged("Azimuths");
            }
        }

        private AbstractDoubleArray AzimuthsField; 

        /// <summary>
        /// Inclinations property
        /// </summary>
		[Required]
        [Description("Dip (or inclination) angle for each station.  BUSINESS RULE: Array length equals station count")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractDoubleArray")]
		[XmlElement("Inclinations")]
        public AbstractDoubleArray Inclinations {
            get {
                return InclinationsField;
            } 
            set {
                InclinationsField = value;
                NotifyPropertyChanged("Inclinations");
            }
        }

        private AbstractDoubleArray InclinationsField; 

        /// <summary>
        /// MdDatum property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("MdDatum")]
        public DataObjectReference MDDatum {
            get {
                return MdDatumField;
            } 
            set {
                MdDatumField = value;
                NotifyPropertyChanged("MDDatum");
            }
        }

        private DataObjectReference MdDatumField; 

        /// <summary>
        /// TimeIndex property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeIndex")]
		[XmlElement("TimeIndex")]
        public TimeIndex TimeIndex {
            get {
                return TimeIndexField;
            } 
            set {
                TimeIndexField = value;
                NotifyPropertyChanged("TimeIndex");
            }
        }

        private TimeIndex TimeIndexField; 


    } //here

    /// <summary>
    /// An ordered list of indexable elements and/or indexable element pairs of an existing representation. Because the representation concepts of topology, geometry, and property values are separate in RESQML, it is now possible to select a range of nodes, edges, faces, or volumes (cell) indices from the topological support of an existing representation to define a sub-representation. A sub-representation may describe a different feature interpretation using the same geometry or property as the "parent" representation. In this case, the only information exchanged is a set of potentially non-consecutive indices of the topological support of the representation.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SubRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("An ordered list of indexable elements and/or indexable element pairs of an existing representation. Because the representation concepts of topology, geometry, and property values are separate in RESQML, it is now possible to select a range of nodes, edges, faces, or volumes (cell) indices from the topological support of an existing representation to define a sub-representation. A sub-representation may describe a different feature interpretation using the same geometry or property as the parent representation. In this case, the only information exchanged is a set of potentially non-consecutive indices of the topological support of the representation.")]
    public partial class SubRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AdditionalGridTopology property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AdditionalGridTopology")]
		[XmlElement("AdditionalGridTopology")]
        public AdditionalGridTopology AdditionalGridTopology {
            get {
                return AdditionalGridTopologyField;
            } 
            set {
                AdditionalGridTopologyField = value;
                NotifyPropertyChanged("AdditionalGridTopology");
            }
        }

        private AdditionalGridTopology AdditionalGridTopologyField; 

        /// <summary>
        /// SupportingRepresentation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SupportingRepresentation")]
        public DataObjectReference SupportingRepresentation {
            get {
                return SupportingRepresentationField;
            } 
            set {
                SupportingRepresentationField = value;
                NotifyPropertyChanged("SupportingRepresentation");
            }
        }

        private DataObjectReference SupportingRepresentationField; 

        /// <summary>
        /// SubRepresentationPatch property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SubRepresentationPatch")]
		[XmlElement("SubRepresentationPatch")]
        public List<SubRepresentationPatch> SubRepresentationPatch {
            get {
                return SubRepresentationPatchField;
            } 
            set {
                SubRepresentationPatchField = value;
                NotifyPropertyChanged("SubRepresentationPatch");
            }
        }

         /// <summary>
         /// bool to indicate if SubRepresentationPatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SubRepresentationPatchSpecified
         {
             get {
             if(SubRepresentationPatchField!=null)
                 return SubRepresentationPatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<SubRepresentationPatch> SubRepresentationPatchField; 


    } //here

    /// <summary>
    /// A representation derived from an existing representation by redefining its geometry. Example use cases include deformation of the geometry of an object, change of coordinate system, and change of time &lt;=&gt; depth.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RedefinedGeometryRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A representation derived from an existing representation by redefining its geometry. Example use cases include deformation of the geometry of an object, change of coordinate system, and change of time &lt;=&gt; depth.")]
    public partial class RedefinedGeometryRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// PatchOfGeometry property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PatchOfGeometry")]
		[XmlElement("PatchOfGeometry")]
        public List<PatchOfGeometry> PatchOfGeometry {
            get {
                return PatchOfGeometryField;
            } 
            set {
                PatchOfGeometryField = value;
                NotifyPropertyChanged("PatchOfGeometry");
            }
        }

         /// <summary>
         /// bool to indicate if PatchOfGeometry has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PatchOfGeometrySpecified
         {
             get {
             if(PatchOfGeometryField!=null)
                 return PatchOfGeometryField.Count>0?true:false;
             else return false;
             }
         }
        private List<PatchOfGeometry> PatchOfGeometryField; 

        /// <summary>
        /// SupportingRepresentation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("SupportingRepresentation")]
        public DataObjectReference SupportingRepresentation {
            get {
                return SupportingRepresentationField;
            } 
            set {
                SupportingRepresentationField = value;
                NotifyPropertyChanged("SupportingRepresentation");
            }
        }

        private DataObjectReference SupportingRepresentationField; 


    } //here

    /// <summary>
    /// The parent class of the framework representations. It is used to group together individual representations which may be of the same kind to represent a “bag” of representations. If the bag is homogeneous, then this may be indicated. These “bags” do not imply any geologic consistency. For example, you can define a set of wellbore frames, a set of wellbore trajectories, a set of blocked wellbores. Because the framework representations inherit from this class, they inherit the capability to gather individual representations into sealed and non-sealed surface framework representations, or sealed volume framework representations.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedVolumeFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonSealedSurfaceFrameworkRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RepresentationSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("The parent class of the framework representations. It is used to group together individual representations which may be of the same kind to represent a “bag” of representations. If the bag is homogeneous, then this may be indicated. These “bags” do not imply any geologic consistency. For example, you can define a set of wellbore frames, a set of wellbore trajectories, a set of blocked wellbores. Because the framework representations inherit from this class, they inherit the capability to gather individual representations into sealed and non-sealed surface framework representations, or sealed volume framework representations.")]
    public partial class RepresentationSetRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// IsHomogeneous property
        /// </summary>
		[Required]
        [Description("Indicates that all of the selected representations are of a single kind.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsHomogeneous")]
        public bool? IsHomogeneous {
            get {
                return IsHomogeneousField;
            } 
            set {
                IsHomogeneousField = value;
                NotifyPropertyChanged("IsHomogeneous");
            }
        }

        private bool? IsHomogeneousField; 

        /// <summary>
        /// Representation property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Representation")]
        public List<DataObjectReference> Representation {
            get {
                return RepresentationField;
            } 
            set {
                RepresentationField = value;
                NotifyPropertyChanged("Representation");
            }
        }

         /// <summary>
         /// bool to indicate if Representation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RepresentationSpecified
         {
             get {
             if(RepresentationField!=null)
                 return RepresentationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> RepresentationField; 


    } //here

    /// <summary>
    /// A strict boundary representation (BREP), which represents the volume region by assembling together shells. BUSINESS RULE: The sealed structural framework must be part of the same earth model as this sealed volume framework.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SealedVolumeFrameworkRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A strict boundary representation (BREP), which represents the volume region by assembling together shells. BUSINESS RULE: The sealed structural framework must be part of the same earth model as this sealed volume framework.")]
    public partial class SealedVolumeFrameworkRepresentation : RepresentationSetRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// BasedOn property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("BasedOn")]
        public DataObjectReference BasedOn {
            get {
                return BasedOnField;
            } 
            set {
                BasedOnField = value;
                NotifyPropertyChanged("BasedOn");
            }
        }

        private DataObjectReference BasedOnField; 

        /// <summary>
        /// Shells property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeShell")]
		[XmlElement("Shells")]
        public List<VolumeShell> Shells {
            get {
                return ShellsField;
            } 
            set {
                ShellsField = value;
                NotifyPropertyChanged("Shells");
            }
        }

         /// <summary>
         /// bool to indicate if Shells has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShellsSpecified
         {
             get {
             if(ShellsField!=null)
                 return ShellsField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeShell> ShellsField; 

        /// <summary>
        /// Regions property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "VolumeRegion")]
		[XmlElement("Regions")]
        public List<VolumeRegion> Regions {
            get {
                return RegionsField;
            } 
            set {
                RegionsField = value;
                NotifyPropertyChanged("Regions");
            }
        }

         /// <summary>
         /// bool to indicate if Regions has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RegionsSpecified
         {
             get {
             if(RegionsField!=null)
                 return RegionsField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeRegion> RegionsField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractSurfaceFrameworkRepresentation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(SealedSurfaceFrameworkRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(NonSealedSurfaceFrameworkRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractSurfaceFrameworkRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractSurfaceFrameworkRepresentation xsd type.")]
    public abstract partial class AbstractSurfaceFrameworkRepresentation : RepresentationSetRepresentation, INotifyPropertyChanged
    {

        /// <summary>
        /// ContactIdentity property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ContactIdentity")]
		[XmlElement("ContactIdentity")]
        public List<ContactIdentity> ContactIdentity {
            get {
                return ContactIdentityField;
            } 
            set {
                ContactIdentityField = value;
                NotifyPropertyChanged("ContactIdentity");
            }
        }

         /// <summary>
         /// bool to indicate if ContactIdentity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContactIdentitySpecified
         {
             get {
             if(ContactIdentityField!=null)
                 return ContactIdentityField.Count>0?true:false;
             else return false;
             }
         }
        private List<ContactIdentity> ContactIdentityField; 


    } //here
    }

    /// <summary>
    /// A collection of contact representations parts, which are a list of contact patches and their identities. This collection of contact representations is completed by a set of representations gathered at the representation set representation level.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("SealedSurfaceFrameworkRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A collection of contact representations parts, which are a list of contact patches and their identities. This collection of contact representations is completed by a set of representations gathered at the representation set representation level.")]
    public partial class SealedSurfaceFrameworkRepresentation : AbstractSurfaceFrameworkRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// SealedContactRepresentation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "SealedContactRepresentationPart")]
		[XmlElement("SealedContactRepresentation")]
        public List<SealedContactRepresentationPart> SealedContactRepresentation {
            get {
                return SealedContactRepresentationField;
            } 
            set {
                SealedContactRepresentationField = value;
                NotifyPropertyChanged("SealedContactRepresentation");
            }
        }

         /// <summary>
         /// bool to indicate if SealedContactRepresentation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SealedContactRepresentationSpecified
         {
             get {
             if(SealedContactRepresentationField!=null)
                 return SealedContactRepresentationField.Count>0?true:false;
             else return false;
             }
         }
        private List<SealedContactRepresentationPart> SealedContactRepresentationField; 


    } //here

    /// <summary>
    /// A collection of contact representations parts, which are a list of contact patches with no identity. This collection of contact representations is completed by a set of representations gathered at the representation set representation level.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("NonSealedSurfaceFrameworkRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A collection of contact representations parts, which are a list of contact patches with no identity. This collection of contact representations is completed by a set of representations gathered at the representation set representation level.")]
    public partial class NonSealedSurfaceFrameworkRepresentation : AbstractSurfaceFrameworkRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// NonSealedContactRepresentation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractContactRepresentationPart")]
		[XmlElement("NonSealedContactRepresentation")]
        public List<AbstractContactRepresentationPart> NonSealedContactRepresentation {
            get {
                return NonSealedContactRepresentationField;
            } 
            set {
                NonSealedContactRepresentationField = value;
                NotifyPropertyChanged("NonSealedContactRepresentation");
            }
        }

         /// <summary>
         /// bool to indicate if NonSealedContactRepresentation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NonSealedContactRepresentationSpecified
         {
             get {
             if(NonSealedContactRepresentationField!=null)
                 return NonSealedContactRepresentationField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractContactRepresentationPart> NonSealedContactRepresentationField; 


    } //here

    /// <summary>
    /// Representation which consists of a list of connections between grid cells, potentially on different grids. Connections are in the form of (Grid,Cell,Face)1&lt;=&gt;(Grid,Cell,Face)2 and are stored as three integer pair arrays corresponding to these six elements. Grid connection sets are the preferred means of representing faults on a grid. The use of cell-face-pairs is more complete than single cell-faces, which are missing a corresponding cell face entry, and only provide an incomplete representation of the topology of a fault. Unlike what is sometimes the case in reservoir simulation software, RESQML does not distinguish between standard and non-standard connections. Within RESQML if a grid connection corresponds to a "nearest neighbor" as defined by the cell indices, then it is never additive to the implicit nearest neighbor connection. BUSINESS RULE: A single cell-face-pair should not appear within more than a single grid connection set. This rule is designed to simplify the interpretation of properties assigned to multiple grid connection sets, which might otherwise have the same property defined more than once on a single connection, with no clear means of resolving the multiple values.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GridConnectionSetRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Representation which consists of a list of connections between grid cells, potentially on different grids. Connections are in the form of (Grid,Cell,Face)1&lt;=&gt;(Grid,Cell,Face)2 and are stored as three integer pair arrays corresponding to these six elements. Grid connection sets are the preferred means of representing faults on a grid. The use of cell-face-pairs is more complete than single cell-faces, which are missing a corresponding cell face entry, and only provide an incomplete representation of the topology of a fault. Unlike what is sometimes the case in reservoir simulation software, RESQML does not distinguish between standard and non-standard connections. Within RESQML if a grid connection corresponds to a nearest neighbor as defined by the cell indices, then it is never additive to the implicit nearest neighbor connection. BUSINESS RULE: A single cell-face-pair should not appear within more than a single grid connection set. This rule is designed to simplify the interpretation of properties assigned to multiple grid connection sets, which might otherwise have the same property defined more than once on a single connection, with no clear means of resolving the multiple values.")]
    public partial class GridConnectionSetRepresentation : AbstractRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Count property
        /// </summary>
		[Required]
        [Description("count of connections. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Count", DataType="positiveInteger")]
        public string Count {
            get {
                return CountField;
            } 
            set {
                CountField = value;
                NotifyPropertyChanged("Count");
            }
        }

        private string CountField; 

        /// <summary>
        /// CellIndexPairs property
        /// </summary>
		[Required]
        [Description("2 x #Connections array of cell indices for (Cell1,Cell2) for each connection.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("CellIndexPairs")]
        public AbstractIntegerArray CellIndexPairs {
            get {
                return CellIndexPairsField;
            } 
            set {
                CellIndexPairsField = value;
                NotifyPropertyChanged("CellIndexPairs");
            }
        }

        private AbstractIntegerArray CellIndexPairsField; 

        /// <summary>
        /// GridIndexPairs property
        /// </summary>
		[Description("2 x #Connections array of grid indices for (Cell1,Cell2) for each connection. The grid indices are obtained from the grid index pairs.  If only a single grid is referenced from the grid index, then this array need not be used.  BUSINESS RULE: This array should appear if more than one grid index pair is referenced.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("GridIndexPairs")]
        public AbstractIntegerArray GridIndexPairs {
            get {
                return GridIndexPairsField;
            } 
            set {
                GridIndexPairsField = value;
                NotifyPropertyChanged("GridIndexPairs");
            }
        }

        private AbstractIntegerArray GridIndexPairsField; 

        /// <summary>
        /// LocalFacePerCellIndexPairs property
        /// </summary>
		[Description("Optional 2 x #Connections array of local face per cell indices for (Cell1,Cell2) for each connection. Local face per cell indices are used because global face indices need not have been defined. Null value = -1.  If no face per cell definition occur as part of the grid representation, e.g., for a block centered grid, then this array need not appear.")]
        [EnergisticsDataTypeAttribute(DataType = "AbstractIntegerArray")]
		[XmlElement("LocalFacePerCellIndexPairs")]
        public AbstractIntegerArray LocalFacePerCellIndexPairs {
            get {
                return LocalFacePerCellIndexPairsField;
            } 
            set {
                LocalFacePerCellIndexPairsField = value;
                NotifyPropertyChanged("LocalFacePerCellIndexPairs");
            }
        }

        private AbstractIntegerArray LocalFacePerCellIndexPairsField; 

        /// <summary>
        /// ConnectionInterpretations property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "ConnectionInterpretations")]
		[XmlElement("ConnectionInterpretations")]
        public ConnectionInterpretations ConnectionInterpretations {
            get {
                return ConnectionInterpretationsField;
            } 
            set {
                ConnectionInterpretationsField = value;
                NotifyPropertyChanged("ConnectionInterpretations");
            }
        }

        private ConnectionInterpretations ConnectionInterpretationsField; 

        /// <summary>
        /// Grid property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Grid")]
        public List<DataObjectReference> Grid {
            get {
                return GridField;
            } 
            set {
                GridField = value;
                NotifyPropertyChanged("Grid");
            }
        }

         /// <summary>
         /// bool to indicate if Grid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GridSpecified
         {
             get {
             if(GridField!=null)
                 return GridField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> GridField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractGridRepresentation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractTruncatedColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GpGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredGridRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractGridRepresentation xsd type.")]
    public abstract partial class AbstractGridRepresentation : AbstractRepresentation, INotifyPropertyChanged
    {

        /// <summary>
        /// CellFluidPhaseUnits property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CellFluidPhaseUnits")]
		[XmlElement("CellFluidPhaseUnits")]
        public CellFluidPhaseUnits CellFluidPhaseUnits {
            get {
                return CellFluidPhaseUnitsField;
            } 
            set {
                CellFluidPhaseUnitsField = value;
                NotifyPropertyChanged("CellFluidPhaseUnits");
            }
        }

        private CellFluidPhaseUnits CellFluidPhaseUnitsField; 

        /// <summary>
        /// ParentWindow property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractParentWindow")]
		[XmlElement("ParentWindow")]
        public AbstractParentWindow ParentWindow {
            get {
                return ParentWindowField;
            } 
            set {
                ParentWindowField = value;
                NotifyPropertyChanged("ParentWindow");
            }
        }

        private AbstractParentWindow ParentWindowField; 

        /// <summary>
        /// CellStratigraphicUnits property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "CellStratigraphicUnits")]
		[XmlElement("CellStratigraphicUnits")]
        public CellStratigraphicUnits CellStratigraphicUnits {
            get {
                return CellStratigraphicUnitsField;
            } 
            set {
                CellStratigraphicUnitsField = value;
                NotifyPropertyChanged("CellStratigraphicUnits");
            }
        }

        private CellStratigraphicUnits CellStratigraphicUnitsField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractColumnLayerGridRepresentation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(IjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(UnstructuredColumnLayerGridRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractColumnLayerGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractColumnLayerGridRepresentation xsd type.")]
    public abstract partial class AbstractColumnLayerGridRepresentation : AbstractGridRepresentation, INotifyPropertyChanged
    {

        /// <summary>
        /// Nk property
        /// </summary>
		[Required]
        [Description("Number of layers in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Nk", DataType="positiveInteger")]
        public string Nk {
            get {
                return NkField;
            } 
            set {
                NkField = value;
                NotifyPropertyChanged("Nk");
            }
        }

        private string NkField; 

        /// <summary>
        /// IntervalStratigraphicUnits property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IntervalStratigraphicUnits")]
		[XmlElement("IntervalStratigraphicUnits")]
        public IntervalStratigraphicUnits IntervalStratigraphicUnits {
            get {
                return IntervalStratigraphicUnitsField;
            } 
            set {
                IntervalStratigraphicUnitsField = value;
                NotifyPropertyChanged("IntervalStratigraphicUnits");
            }
        }

        private IntervalStratigraphicUnits IntervalStratigraphicUnitsField; 


    } //here
    }

    /// <summary>
    /// Grid whose topology is characterized by structured column indices (I,J) and a layer index, K. Cell geometry is characterized by nodes on coordinate lines, where each column of the model has 4 sides. Geometric degeneracy is permitted. IJK grids support the following specific extensions: IJK radial grids K-Layer gaps IJ-Column gaps
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("IjkGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Grid whose topology is characterized by structured column indices (I,J) and a layer index, K. Cell geometry is characterized by nodes on coordinate lines, where each column of the model has 4 sides. Geometric degeneracy is permitted. IJK grids support the following specific extensions: IJK radial grids K-Layer gaps IJ-Column gaps")]
    public partial class IjkGridRepresentation : AbstractColumnLayerGridRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Ni property
        /// </summary>
		[Required]
        [Description("Count of cells in the I-direction in the grid. Must be positive. I=1,...,NI, I0=0,...,NI-1.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Ni", DataType="positiveInteger")]
        public string Ni {
            get {
                return NiField;
            } 
            set {
                NiField = value;
                NotifyPropertyChanged("Ni");
            }
        }

        private string NiField; 

        /// <summary>
        /// Nj property
        /// </summary>
		[Required]
        [Description("Count of cells in the J-direction in the grid. Must be positive. J=1,...,NJ, J0=0,...,NJ-1.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Nj", DataType="positiveInteger")]
        public string Nj {
            get {
                return NjField;
            } 
            set {
                NjField = value;
                NotifyPropertyChanged("Nj");
            }
        }

        private string NjField; 

        /// <summary>
        /// RadialGridIsComplete property
        /// </summary>
		[Description("TRUE if the grid is periodic in J, i.e., has the topology of a complete 360 degree circle.  If TRUE, then NJL=NJ. Otherwise, NJL=NJ+1  May be used to change the grid topology for either a cartesian or a radial grid, although radial grid usage is by far the more common.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("RadialGridIsComplete")]
        public bool? RadialGridIsComplete {
            get {
                return RadialGridIsCompleteField;
            } 
            set {
                RadialGridIsCompleteField = value;
                 this.RadialGridIsCompleteSpecified = true;
                NotifyPropertyChanged("RadialGridIsComplete");
            }
        }

        private bool? RadialGridIsCompleteField; 

        /// <summary>
        /// RadialGridIsCompleteSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RadialGridIsCompleteSpecified {
            get {
                return RadialGridIsCompleteSpecifiedField;
            } 
            set {
                RadialGridIsCompleteSpecifiedField = value;
                NotifyPropertyChanged("RadialGridIsCompleteSpecified");
            }
        }

        private bool RadialGridIsCompleteSpecifiedField; 

        /// <summary>
        /// KGaps property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "KGaps")]
		[XmlElement("KGaps")]
        public KGaps KGaps {
            get {
                return KGapsField;
            } 
            set {
                KGapsField = value;
                NotifyPropertyChanged("KGaps");
            }
        }

        private KGaps KGapsField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IjkGridGeometry")]
		[XmlElement("Geometry")]
        public IjkGridGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private IjkGridGeometry GeometryField; 


    } //here

    /// <summary>
    /// Grid whose topology is characterized by an unstructured column index and a layer index, K. Cell geometry is characterized by nodes on coordinate lines, where each column of the model may have an arbitrary number of sides.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("UnstructuredColumnLayerGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Grid whose topology is characterized by an unstructured column index and a layer index, K. Cell geometry is characterized by nodes on coordinate lines, where each column of the model may have an arbitrary number of sides.")]
    public partial class UnstructuredColumnLayerGridRepresentation : AbstractColumnLayerGridRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ColumnCount property
        /// </summary>
		[Required]
        [Description("Number of unstructured columns in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("ColumnCount", DataType="positiveInteger")]
        public string ColumnCount {
            get {
                return ColumnCountField;
            } 
            set {
                ColumnCountField = value;
                NotifyPropertyChanged("ColumnCount");
            }
        }

        private string ColumnCountField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredColumnLayerGridGeometry")]
		[XmlElement("Geometry")]
        public UnstructuredColumnLayerGridGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private UnstructuredColumnLayerGridGeometry GeometryField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractTruncatedColumnLayerGridRepresentation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedIjkGridRepresentation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TruncatedUnstructuredColumnLayerGridRepresentation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractTruncatedColumnLayerGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractTruncatedColumnLayerGridRepresentation xsd type.")]
    public abstract partial class AbstractTruncatedColumnLayerGridRepresentation : AbstractGridRepresentation, INotifyPropertyChanged
    {

        /// <summary>
        /// Nk property
        /// </summary>
		[Required]
        [Description("Number of layers in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Nk", DataType="positiveInteger")]
        public string Nk {
            get {
                return NkField;
            } 
            set {
                NkField = value;
                NotifyPropertyChanged("Nk");
            }
        }

        private string NkField; 

        /// <summary>
        /// TruncationCells property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TruncationCellPatch")]
		[XmlElement("TruncationCells")]
        public TruncationCellPatch TruncationCells {
            get {
                return TruncationCellsField;
            } 
            set {
                TruncationCellsField = value;
                NotifyPropertyChanged("TruncationCells");
            }
        }

        private TruncationCellPatch TruncationCellsField; 


    } //here
    }

    /// <summary>
    /// Grid class with an underlying IJK topology, together with a 1D split cell list. The truncated IJK cells have more than the usual 6 faces. The split cells are arbitrary polyhedra, identical to those of an unstructured cell grid.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TruncatedIjkGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Grid class with an underlying IJK topology, together with a 1D split cell list. The truncated IJK cells have more than the usual 6 faces. The split cells are arbitrary polyhedra, identical to those of an unstructured cell grid.")]
    public partial class TruncatedIjkGridRepresentation : AbstractTruncatedColumnLayerGridRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Ni property
        /// </summary>
		[Required]
        [Description("Count of I-indices in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Ni", DataType="positiveInteger")]
        public string Ni {
            get {
                return NiField;
            } 
            set {
                NiField = value;
                NotifyPropertyChanged("Ni");
            }
        }

        private string NiField; 

        /// <summary>
        /// Nj property
        /// </summary>
		[Required]
        [Description("Count of J-indices in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("Nj", DataType="positiveInteger")]
        public string Nj {
            get {
                return NjField;
            } 
            set {
                NjField = value;
                NotifyPropertyChanged("Nj");
            }
        }

        private string NjField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "IjkGridGeometry")]
		[XmlElement("Geometry")]
        public IjkGridGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private IjkGridGeometry GeometryField; 


    } //here

    /// <summary>
    /// Grid class with an underlying unstructured column layer topology, together with a 1D split cell list. The truncated cells have more than the usual number of faces within each column. The split cells are arbitrary polyhedra, identical to those of an unstructured cell grid.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("TruncatedUnstructuredColumnLayerGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Grid class with an underlying unstructured column layer topology, together with a 1D split cell list. The truncated cells have more than the usual number of faces within each column. The split cells are arbitrary polyhedra, identical to those of an unstructured cell grid.")]
    public partial class TruncatedUnstructuredColumnLayerGridRepresentation : AbstractTruncatedColumnLayerGridRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ColumnCount property
        /// </summary>
		[Required]
        [Description("Number of unstructured columns in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("ColumnCount", DataType="positiveInteger")]
        public string ColumnCount {
            get {
                return ColumnCountField;
            } 
            set {
                ColumnCountField = value;
                NotifyPropertyChanged("ColumnCount");
            }
        }

        private string ColumnCountField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredColumnLayerGridGeometry")]
		[XmlElement("Geometry")]
        public UnstructuredColumnLayerGridGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private UnstructuredColumnLayerGridGeometry GeometryField; 


    } //here

    /// <summary>
    /// General purpose (GP) grid representation, which includes and/or extends the features from all other grid representations. This general purpose representation is included in the schema for research and/or advanced modeling purposes, but is not expected to be used for routine data transfer.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GpGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("General purpose (GP) grid representation, which includes and/or extends the features from all other grid representations. This general purpose representation is included in the schema for research and/or advanced modeling purposes, but is not expected to be used for routine data transfer.")]
    public partial class GpGridRepresentation : AbstractGridRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// ColumnLayerGrid property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GpGridColumnLayerGrid")]
		[XmlElement("ColumnLayerGrid")]
        public List<GpGridColumnLayerGrid> ColumnLayerGrid {
            get {
                return ColumnLayerGridField;
            } 
            set {
                ColumnLayerGridField = value;
                NotifyPropertyChanged("ColumnLayerGrid");
            }
        }

         /// <summary>
         /// bool to indicate if ColumnLayerGrid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ColumnLayerGridSpecified
         {
             get {
             if(ColumnLayerGridField!=null)
                 return ColumnLayerGridField.Count>0?true:false;
             else return false;
             }
         }
        private List<GpGridColumnLayerGrid> ColumnLayerGridField; 

        /// <summary>
        /// UnstructuredGridPatch property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GpGridUnstructuredGridPatch")]
		[XmlElement("UnstructuredGridPatch")]
        public List<GpGridUnstructuredGridPatch> UnstructuredGridPatch {
            get {
                return UnstructuredGridPatchField;
            } 
            set {
                UnstructuredGridPatchField = value;
                NotifyPropertyChanged("UnstructuredGridPatch");
            }
        }

         /// <summary>
         /// bool to indicate if UnstructuredGridPatch has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool UnstructuredGridPatchSpecified
         {
             get {
             if(UnstructuredGridPatchField!=null)
                 return UnstructuredGridPatchField.Count>0?true:false;
             else return false;
             }
         }
        private List<GpGridUnstructuredGridPatch> UnstructuredGridPatchField; 


    } //here

    /// <summary>
    /// Unstructured grid representation characterized by a cell count, and potentially nothing else. Both the oldest and newest simulation formats are based on this format.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("UnstructuredGridRepresentation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Unstructured grid representation characterized by a cell count, and potentially nothing else. Both the oldest and newest simulation formats are based on this format.")]
    public partial class UnstructuredGridRepresentation : AbstractGridRepresentation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// CellCount property
        /// </summary>
		[Required]
        [Description("Number of cells in the grid. Must be positive.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveInteger")]
		[XmlElement("CellCount", DataType="positiveInteger")]
        public string CellCount {
            get {
                return CellCountField;
            } 
            set {
                CellCountField = value;
                NotifyPropertyChanged("CellCount");
            }
        }

        private string CellCountField; 

        /// <summary>
        /// Geometry property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "UnstructuredGridGeometry")]
		[XmlElement("Geometry")]
        public UnstructuredGridGeometry Geometry {
            get {
                return GeometryField;
            } 
            set {
                GeometryField = value;
                NotifyPropertyChanged("Geometry");
            }
        }

        private UnstructuredGridGeometry GeometryField; 


    } //here

    /// <summary>
    /// A collection of representation identities.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RepresentationIdentitySet", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A collection of representation identities.")]
    public partial class RepresentationIdentitySet : AbstractResqmlDataObject, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// RepresentationIdentity property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "RepresentationIdentity")]
		[XmlElement("RepresentationIdentity")]
        public List<RepresentationIdentity> RepresentationIdentity {
            get {
                return RepresentationIdentityField;
            } 
            set {
                RepresentationIdentityField = value;
                NotifyPropertyChanged("RepresentationIdentity");
            }
        }

         /// <summary>
         /// bool to indicate if RepresentationIdentity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RepresentationIdentitySpecified
         {
             get {
             if(RepresentationIdentityField!=null)
                 return RepresentationIdentityField.Count>0?true:false;
             else return false;
             }
         }
        private List<RepresentationIdentity> RepresentationIdentityField; 


    } //here

    /// <summary>
    /// Used to activate and/or deactivate the specified children grids as local grids on their parents. Once activated, this object indicates that a child grid replaces local portions of the corresponding parent grid. Parentage is inferred from the child grid construction. Without a grid set activation, the local grids are always active. Otherwise, the grid set activation is used to activate and/or deactivate the local grids in the set at specific times.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("LocalGridSet", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Used to activate and/or deactivate the specified children grids as local grids on their parents. Once activated, this object indicates that a child grid replaces local portions of the corresponding parent grid. Parentage is inferred from the child grid construction. Without a grid set activation, the local grids are always active. Otherwise, the grid set activation is used to activate and/or deactivate the local grids in the set at specific times.")]
    public partial class LocalGridSet : AbstractResqmlDataObject, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Activation property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "Activation")]
		[XmlElement("Activation")]
        public Activation Activation {
            get {
                return ActivationField;
            } 
            set {
                ActivationField = value;
                NotifyPropertyChanged("Activation");
            }
        }

        private Activation ActivationField; 

        /// <summary>
        /// ChildGrid property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("ChildGrid")]
        public List<DataObjectReference> ChildGrid {
            get {
                return ChildGridField;
            } 
            set {
                ChildGridField = value;
                NotifyPropertyChanged("ChildGrid");
            }
        }

         /// <summary>
         /// bool to indicate if ChildGrid has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChildGridSpecified
         {
             get {
             if(ChildGridField!=null)
                 return ChildGridField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> ChildGridField; 


    } //here

    /// <summary>
    /// A global interpretation of the stratigraphy, which can be made up of several ranks of stratigraphic unit interpretations. BUSINESS RULE: All stratigraphic column rank interpretations that make up a stratigraphic column must be ordered by age.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicColumn", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A global interpretation of the stratigraphy, which can be made up of several ranks of stratigraphic unit interpretations. BUSINESS RULE: All stratigraphic column rank interpretations that make up a stratigraphic column must be ordered by age.")]
    public partial class StratigraphicColumn : AbstractResqmlDataObject, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Ranks property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Ranks")]
        public List<DataObjectReference> Ranks {
            get {
                return RanksField;
            } 
            set {
                RanksField = value;
                NotifyPropertyChanged("Ranks");
            }
        }

         /// <summary>
         /// bool to indicate if Ranks has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RanksSpecified
         {
             get {
             if(RanksField!=null)
                 return RanksField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> RanksField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractFeatureInterpretation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeologicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EarthModelInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(BoundaryFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyBoundaryInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellboreInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GenericFeatureInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidOrganizationInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractFeatureInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractFeatureInterpretation xsd type.")]
    public abstract partial class AbstractFeatureInterpretation : AbstractResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Domain property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "Domain")]
		[XmlElement("Domain")]
        public Domain? Domain {
            get {
                return DomainField;
            } 
            set {
                DomainField = value;
                 this.DomainSpecified = true;
                NotifyPropertyChanged("Domain");
            }
        }

        
        private bool DomainSpecifiedField = false;
        
        /// <summary>
        /// DomainSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DomainSpecified {
            get {
                return DomainSpecifiedField;
            } 
            set {
                DomainSpecifiedField = value;
                NotifyPropertyChanged("DomainSpecified");
            }
        }
        
        private Domain? DomainField; 

        /// <summary>
        /// InterpretedFeature property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("InterpretedFeature")]
        public DataObjectReference InterpretedFeature {
            get {
                return InterpretedFeatureField;
            } 
            set {
                InterpretedFeatureField = value;
                NotifyPropertyChanged("InterpretedFeature");
            }
        }

        private DataObjectReference InterpretedFeatureField; 

        /// <summary>
        /// HasOccuredDuring property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "TimeInterval")]
		[XmlElement("HasOccuredDuring")]
        public TimeInterval HasOccuredDuring {
            get {
                return HasOccuredDuringField;
            } 
            set {
                HasOccuredDuringField = value;
                NotifyPropertyChanged("HasOccuredDuring");
            }
        }

        private TimeInterval HasOccuredDuringField; 


    } //here
    }

    /// <summary>
    /// The main class for data describing an opinion of a volume-based geologic feature or unit.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicUnitInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidUnitInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeologicUnitInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("The main class for data describing an opinion of a volume-based geologic feature or unit.")]
    public partial class GeologicUnitInterpretation : AbstractFeatureInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// GeologicUnitComposition property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "GeologicUnitComposition")]
		[XmlElement("GeologicUnitComposition")]
        public GeologicUnitComposition? GeologicUnitComposition {
            get {
                return GeologicUnitCompositionField;
            } 
            set {
                GeologicUnitCompositionField = value;
                 this.GeologicUnitCompositionSpecified = true;
                NotifyPropertyChanged("GeologicUnitComposition");
            }
        }

        private GeologicUnitComposition? GeologicUnitCompositionField; 

        /// <summary>
        /// GeologicUnitCompositionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GeologicUnitCompositionSpecified {
            get {
                return GeologicUnitCompositionSpecifiedField;
            } 
            set {
                GeologicUnitCompositionSpecifiedField = value;
                NotifyPropertyChanged("GeologicUnitCompositionSpecified");
            }
        }

        private bool GeologicUnitCompositionSpecifiedField; 

        /// <summary>
        /// GeologicUnitMaterialImplacement property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "GeologicUnitMaterialImplacement")]
		[XmlElement("GeologicUnitMaterialImplacement")]
        public GeologicUnitMaterialImplacement? GeologicUnitMaterialImplacement {
            get {
                return GeologicUnitMaterialImplacementField;
            } 
            set {
                GeologicUnitMaterialImplacementField = value;
                 this.GeologicUnitMaterialImplacementSpecified = true;
                NotifyPropertyChanged("GeologicUnitMaterialImplacement");
            }
        }

        private GeologicUnitMaterialImplacement? GeologicUnitMaterialImplacementField; 

        /// <summary>
        /// GeologicUnitMaterialImplacementSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GeologicUnitMaterialImplacementSpecified {
            get {
                return GeologicUnitMaterialImplacementSpecifiedField;
            } 
            set {
                GeologicUnitMaterialImplacementSpecifiedField = value;
                NotifyPropertyChanged("GeologicUnitMaterialImplacementSpecified");
            }
        }

        private bool GeologicUnitMaterialImplacementSpecifiedField; 


    } //here

    /// <summary>
    /// Interpretation of a stratigraphic unit which includes the knowledge of the top, the bottom, the deposition mode.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicUnitInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Interpretation of a stratigraphic unit which includes the knowledge of the top, the bottom, the deposition mode.")]
    public partial class StratigraphicUnitInterpretation : GeologicUnitInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// DepositionMode property
        /// </summary>
		[Description("BUSINESS RULE / The Deposition mode for a Geological Unit MUST be conssitent with the Boundary Relations of A Genetic Boundary. If it is not the case the Boundary Relation declaration is retained.")]
        [EnergisticsDataTypeAttribute(DataType = "DepositionMode")]
		[XmlElement("DepositionMode")]
        public DepositionMode? DepositionMode {
            get {
                return DepositionModeField;
            } 
            set {
                DepositionModeField = value;
                 this.DepositionModeSpecified = true;
                NotifyPropertyChanged("DepositionMode");
            }
        }

        private DepositionMode? DepositionModeField; 

        /// <summary>
        /// DepositionModeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DepositionModeSpecified {
            get {
                return DepositionModeSpecifiedField;
            } 
            set {
                DepositionModeSpecifiedField = value;
                NotifyPropertyChanged("DepositionModeSpecified");
            }
        }

        private bool DepositionModeSpecifiedField; 

        /// <summary>
        /// MaxThickness property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MaxThickness")]
        public LengthMeasure MaxThickness {
            get {
                return MaxThicknessField;
            } 
            set {
                MaxThicknessField = value;
                NotifyPropertyChanged("MaxThickness");
            }
        }

        private LengthMeasure MaxThicknessField; 

        /// <summary>
        /// MinThickness property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MinThickness")]
        public LengthMeasure MinThickness {
            get {
                return MinThicknessField;
            } 
            set {
                MinThicknessField = value;
                NotifyPropertyChanged("MinThickness");
            }
        }

        private LengthMeasure MinThicknessField; 


    } //here

    /// <summary>
    /// A type of rock feature, this class identifies if a rock feature is a geobody with any qualifications on the interpretation of the geobody. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeobodyInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A type of rock feature, this class identifies if a rock feature is a geobody with any qualifications on the interpretation of the geobody. ")]
    public partial class GeobodyInterpretation : GeologicUnitInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Geobody3dShape property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "Geobody3dShape")]
		[XmlElement("Geobody3dShape")]
        public Geobody3dShape? Geobody3dShape {
            get {
                return Geobody3dShapeField;
            } 
            set {
                Geobody3dShapeField = value;
                 this.Geobody3dShapeSpecified = true;
                NotifyPropertyChanged("Geobody3dShape");
            }
        }

        private Geobody3dShape? Geobody3dShapeField; 

        /// <summary>
        /// Geobody3dShapeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool Geobody3dShapeSpecified {
            get {
                return Geobody3dShapeSpecifiedField;
            } 
            set {
                Geobody3dShapeSpecifiedField = value;
                NotifyPropertyChanged("Geobody3dShapeSpecified");
            }
        }

        private bool Geobody3dShapeSpecifiedField; 


    } //here

    /// <summary>
    /// A type of rock fluid feature interpretation , this class identifies if a rock fluid feature by its phase
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RockFluidUnitInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A type of rock fluid feature interpretation , this class identifies if a rock fluid feature by its phase")]
    public partial class RockFluidUnitInterpretation : GeologicUnitInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Phase property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "Phase")]
		[XmlElement("Phase")]
        public Phase? Phase {
            get {
                return PhaseField;
            } 
            set {
                PhaseField = value;
                 this.PhaseSpecified = true;
                NotifyPropertyChanged("Phase");
            }
        }

        private Phase? PhaseField; 

        /// <summary>
        /// PhaseSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PhaseSpecified {
            get {
                return PhaseSpecifiedField;
            } 
            set {
                PhaseSpecifiedField = value;
                NotifyPropertyChanged("PhaseSpecified");
            }
        }

        private bool PhaseSpecifiedField; 


    } //here

    /// <summary>
    /// An earth model interpretation has a specific role: it gathers a maximum of one of each of these other organization interpretations: structural organization interpretation, stratigraphic organization interpretation, and/or fluid organization interpretation. BUSINESS RULE: An earth model Interpretation interprets only an earth model feature. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("EarthModelInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("An earth model interpretation has a specific role: it gathers a maximum of one of each of these other organization interpretations: structural organization interpretation, stratigraphic organization interpretation, and/or fluid organization interpretation. BUSINESS RULE: An earth model Interpretation interprets only an earth model feature. ")]
    public partial class EarthModelInterpretation : AbstractFeatureInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// StratigraphicOccurrences property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("StratigraphicOccurrences")]
        public List<DataObjectReference> StratigraphicOccurrences {
            get {
                return StratigraphicOccurrencesField;
            } 
            set {
                StratigraphicOccurrencesField = value;
                NotifyPropertyChanged("StratigraphicOccurrences");
            }
        }

         /// <summary>
         /// bool to indicate if StratigraphicOccurrences has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StratigraphicOccurrencesSpecified
         {
             get {
             if(StratigraphicOccurrencesField!=null)
                 return StratigraphicOccurrencesField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> StratigraphicOccurrencesField; 

        /// <summary>
        /// StratigraphicColumn property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("StratigraphicColumn")]
        public DataObjectReference StratigraphicColumn {
            get {
                return StratigraphicColumnField;
            } 
            set {
                StratigraphicColumnField = value;
                NotifyPropertyChanged("StratigraphicColumn");
            }
        }

        private DataObjectReference StratigraphicColumnField; 

        /// <summary>
        /// Structure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Structure")]
        public DataObjectReference Structure {
            get {
                return StructureField;
            } 
            set {
                StructureField = value;
                NotifyPropertyChanged("Structure");
            }
        }

        private DataObjectReference StructureField; 

        /// <summary>
        /// Fluid property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Fluid")]
        public DataObjectReference Fluid {
            get {
                return FluidField;
            } 
            set {
                FluidField = value;
                NotifyPropertyChanged("Fluid");
            }
        }

        private DataObjectReference FluidField; 


    } //here

    /// <summary>
    /// The main class for data describing an opinion of a surface feature between two volumes. BUSINESS RULE: The data-object reference (of type "interprets") must reference only a boundary feature.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(HorizonInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FaultInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeobodyBoundaryInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("BoundaryFeatureInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("The main class for data describing an opinion of a surface feature between two volumes. BUSINESS RULE: The data-object reference (of type interprets) must reference only a boundary feature.")]
    public partial class BoundaryFeatureInterpretation : AbstractFeatureInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here

    /// <summary>
    /// A type of boundary feature, the class specifies if the boundary feature is a horizon. Maximum Flooding Surface - Transgressive Surface ( for erosion or intrusion ?) - Sequence Boundary - Stratigraphic Limit 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("HorizonInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A type of boundary feature, the class specifies if the boundary feature is a horizon. Maximum Flooding Surface - Transgressive Surface ( for erosion or intrusion ?) - Sequence Boundary - Stratigraphic Limit ")]
    public partial class HorizonInterpretation : BoundaryFeatureInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// BoundaryRelation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "BoundaryRelation")]
		[XmlElement("BoundaryRelation")]
        public List<BoundaryRelation> BoundaryRelation {
            get {
                return BoundaryRelationField;
            } 
            set {
                BoundaryRelationField = value;
                NotifyPropertyChanged("BoundaryRelation");
            }
        }

         /// <summary>
         /// bool to indicate if BoundaryRelation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoundaryRelationSpecified
         {
             get {
             if(BoundaryRelationField!=null)
                 return BoundaryRelationField.Count>0?true:false;
             else return false;
             }
         }
        private List<BoundaryRelation> BoundaryRelationField; 

        /// <summary>
        /// SequenceStratigraphySurface property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "SequenceStratigraphySurface")]
		[XmlElement("SequenceStratigraphySurface")]
        public SequenceStratigraphySurface? SequenceStratigraphySurface {
            get {
                return SequenceStratigraphySurfaceField;
            } 
            set {
                SequenceStratigraphySurfaceField = value;
                 this.SequenceStratigraphySurfaceSpecified = true;
                NotifyPropertyChanged("SequenceStratigraphySurface");
            }
        }

        private SequenceStratigraphySurface? SequenceStratigraphySurfaceField; 

        /// <summary>
        /// SequenceStratigraphySurfaceSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SequenceStratigraphySurfaceSpecified {
            get {
                return SequenceStratigraphySurfaceSpecifiedField;
            } 
            set {
                SequenceStratigraphySurfaceSpecifiedField = value;
                NotifyPropertyChanged("SequenceStratigraphySurfaceSpecified");
            }
        }

        private bool SequenceStratigraphySurfaceSpecifiedField; 


    } //here

    /// <summary>
    /// A type of boundary feature, this class contains the data describing an opinion about the characterization of the fault, which includes the attributes listed below. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("FaultInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A type of boundary feature, this class contains the data describing an opinion about the characterization of the fault, which includes the attributes listed below. ")]
    public partial class FaultInterpretation : BoundaryFeatureInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// IsListric property
        /// </summary>
		[Description("Indicates if the normal fault is listric or not.  BUSINESS RULE: Must be present if the fault is normal. Must not be present if the fault is not normal.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsListric")]
        public bool? IsListric {
            get {
                return IsListricField;
            } 
            set {
                IsListricField = value;
                 this.IsListricSpecified = true;
                NotifyPropertyChanged("IsListric");
            }
        }

        private bool? IsListricField; 

        /// <summary>
        /// IsListricSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsListricSpecified {
            get {
                return IsListricSpecifiedField;
            } 
            set {
                IsListricSpecifiedField = value;
                NotifyPropertyChanged("IsListricSpecified");
            }
        }

        private bool IsListricSpecifiedField; 

        /// <summary>
        /// MaximumThrow property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "LengthMeasure")]
		[XmlElement("MaximumThrow")]
        public LengthMeasure MaximumThrow {
            get {
                return MaximumThrowField;
            } 
            set {
                MaximumThrowField = value;
                NotifyPropertyChanged("MaximumThrow");
            }
        }

        private LengthMeasure MaximumThrowField; 

        /// <summary>
        /// MeanAzimuth property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("MeanAzimuth")]
        public PlaneAngleMeasure MeanAzimuth {
            get {
                return MeanAzimuthField;
            } 
            set {
                MeanAzimuthField = value;
                NotifyPropertyChanged("MeanAzimuth");
            }
        }

        private PlaneAngleMeasure MeanAzimuthField; 

        /// <summary>
        /// MeanDip property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleMeasure")]
		[XmlElement("MeanDip")]
        public PlaneAngleMeasure MeanDip {
            get {
                return MeanDipField;
            } 
            set {
                MeanDipField = value;
                NotifyPropertyChanged("MeanDip");
            }
        }

        private PlaneAngleMeasure MeanDipField; 

        /// <summary>
        /// ThrowInterpretation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FaultThrow")]
		[XmlElement("ThrowInterpretation")]
        public List<FaultThrow> ThrowInterpretation {
            get {
                return ThrowInterpretationField;
            } 
            set {
                ThrowInterpretationField = value;
                NotifyPropertyChanged("ThrowInterpretation");
            }
        }

         /// <summary>
         /// bool to indicate if ThrowInterpretation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ThrowInterpretationSpecified
         {
             get {
             if(ThrowInterpretationField!=null)
                 return ThrowInterpretationField.Count>0?true:false;
             else return false;
             }
         }
        private List<FaultThrow> ThrowInterpretationField; 


    } //here

    /// <summary>
    /// A type of boundary feature, this class identifies if the boundary is a geobody and the type of the boundary.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GeobodyBoundaryInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A type of boundary feature, this class identifies if the boundary is a geobody and the type of the boundary.")]
    public partial class GeobodyBoundaryInterpretation : BoundaryFeatureInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// BoundaryRelation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "BoundaryRelation")]
		[XmlElement("BoundaryRelation")]
        public List<BoundaryRelation> BoundaryRelation {
            get {
                return BoundaryRelationField;
            } 
            set {
                BoundaryRelationField = value;
                NotifyPropertyChanged("BoundaryRelation");
            }
        }

         /// <summary>
         /// bool to indicate if BoundaryRelation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BoundaryRelationSpecified
         {
             get {
             if(BoundaryRelationField!=null)
                 return BoundaryRelationField.Count>0?true:false;
             else return false;
             }
         }
        private List<BoundaryRelation> BoundaryRelationField; 


    } //here

    /// <summary>
    /// This class contains the data describing an opinion of a borehole. This interpretation is relative to one particular well trajectory. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("WellboreInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("This class contains the data describing an opinion of a borehole. This interpretation is relative to one particular well trajectory. ")]
    public partial class WellboreInterpretation : AbstractFeatureInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Used to indicate that this wellbore has been, or is being, drilled. This distinguishes from planned wells. For one wellbore feature we may expect to have multiple wellbore interpretations: IsDrilled=TRUE for instance will be used for updated drilled trajectories. IsDrilled=FALSE for planned trajectories.
        /// </summary>
		[Required]
        [Description("Used to indicate that this wellbore has been, or is being, drilled. This distinguishes from planned wells. For one wellbore feature we may expect to have multiple wellbore interpretations: IsDrilled=TRUE for instance will be used for updated drilled trajectories. IsDrilled=FALSE for planned trajectories.")]
        [EnergisticsDataTypeAttribute(DataType = "boolean")]
		[XmlElement("IsDrilled")]
        public bool? IsDrilled {
            get {
                return IsDrilledField;
            } 
            set {
                IsDrilledField = value;
                NotifyPropertyChanged("IsDrilled");
            }
        }

        private bool? IsDrilledField; 


    } //here

    /// <summary>
    /// This class represents the obj_GenericFeatureInterpretation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("GenericFeatureInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("This class represents the obj_GenericFeatureInterpretation xsd type.")]
    public partial class GenericFeatureInterpretation : AbstractFeatureInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractOrganizationInterpretation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AbstractStratigraphicOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumnRankInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StructuralOrganizationInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RockFluidOrganizationInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractOrganizationInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractOrganizationInterpretation xsd type.")]
    public abstract partial class AbstractOrganizationInterpretation : AbstractFeatureInterpretation, INotifyPropertyChanged
    {

        /// <summary>
        /// ContactInterpretation property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "AbstractContactInterpretationPart")]
		[XmlElement("ContactInterpretation")]
        public List<AbstractContactInterpretationPart> ContactInterpretation {
            get {
                return ContactInterpretationField;
            } 
            set {
                ContactInterpretationField = value;
                NotifyPropertyChanged("ContactInterpretation");
            }
        }

         /// <summary>
         /// bool to indicate if ContactInterpretation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContactInterpretationSpecified
         {
             get {
             if(ContactInterpretationField!=null)
                 return ContactInterpretationField.Count>0?true:false;
             else return false;
             }
         }
        private List<AbstractContactInterpretationPart> ContactInterpretationField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the AbstractStratigraphicOrganizationInterpretation xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicOccurrenceInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StratigraphicColumnRankInterpretation))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="AbstractStratigraphicOrganizationInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
	[Description("This class represents the AbstractStratigraphicOrganizationInterpretation xsd type.")]
    public abstract partial class AbstractStratigraphicOrganizationInterpretation : AbstractOrganizationInterpretation, INotifyPropertyChanged
    {

        /// <summary>
        /// OrderingCriteria property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "OrderingCriteria")]
		[XmlElement("OrderingCriteria")]
        public OrderingCriteria? OrderingCriteria {
            get {
                return OrderingCriteriaField;
            } 
            set {
                OrderingCriteriaField = value;
                 this.OrderingCriteriaSpecified = true;
                NotifyPropertyChanged("OrderingCriteria");
            }
        }

        
        private bool OrderingCriteriaSpecifiedField = false;
        
        /// <summary>
        /// OrderingCriteriaSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OrderingCriteriaSpecified {
            get {
                return OrderingCriteriaSpecifiedField;
            } 
            set {
                OrderingCriteriaSpecifiedField = value;
                NotifyPropertyChanged("OrderingCriteriaSpecified");
            }
        }
        
        private OrderingCriteria? OrderingCriteriaField; 


    } //here
    }

    /// <summary>
    /// A local Interpretation—it could be along a well, on a 2D map, or on a 2D section or on a part of the global volume of an earth model—of a succession of rock feature elements. The stratigraphic column rank interpretation composing a stratigraphic occurrence can be ordered by the criteria listed in OrderingCriteria. BUSINESS RULE: A representation of a stratigraphic occurrence interpretation can be a wellbore marker or a wellbore frame.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicOccurrenceInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A local Interpretation—it could be along a well, on a 2D map, or on a 2D section or on a part of the global volume of an earth model—of a succession of rock feature elements. The stratigraphic column rank interpretation composing a stratigraphic occurrence can be ordered by the criteria listed in OrderingCriteria. BUSINESS RULE: A representation of a stratigraphic occurrence interpretation can be a wellbore marker or a wellbore frame.")]
    public partial class StratigraphicOccurrenceInterpretation : AbstractStratigraphicOrganizationInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// IsOccurrenceOf property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("IsOccurrenceOf")]
        public DataObjectReference IsOccurrenceOf {
            get {
                return IsOccurrenceOfField;
            } 
            set {
                IsOccurrenceOfField = value;
                NotifyPropertyChanged("IsOccurrenceOf");
            }
        }

        private DataObjectReference IsOccurrenceOfField; 

        /// <summary>
        /// GeologicUnitIndex property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "GeologicUnitInterpretationIndex")]
		[XmlElement("GeologicUnitIndex")]
        public List<GeologicUnitInterpretationIndex> GeologicUnitIndex {
            get {
                return GeologicUnitIndexField;
            } 
            set {
                GeologicUnitIndexField = value;
                NotifyPropertyChanged("GeologicUnitIndex");
            }
        }

         /// <summary>
         /// bool to indicate if GeologicUnitIndex has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool GeologicUnitIndexSpecified
         {
             get {
             if(GeologicUnitIndexField!=null)
                 return GeologicUnitIndexField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeologicUnitInterpretationIndex> GeologicUnitIndexField; 


    } //here

    /// <summary>
    /// A global hierarchy containing an ordered list of stratigraphic unit interpretations.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StratigraphicColumnRankInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("A global hierarchy containing an ordered list of stratigraphic unit interpretations.")]
    public partial class StratigraphicColumnRankInterpretation : AbstractStratigraphicOrganizationInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Index property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeInteger")]
		[XmlElement("Index", DataType="nonNegativeInteger")]
        public string Index {
            get {
                return IndexField;
            } 
            set {
                IndexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private string IndexField; 

        /// <summary>
        /// StratigraphicUnits property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "StratigraphicUnitInterpretationIndex")]
		[XmlElement("StratigraphicUnits")]
        public List<StratigraphicUnitInterpretationIndex> StratigraphicUnits {
            get {
                return StratigraphicUnitsField;
            } 
            set {
                StratigraphicUnitsField = value;
                NotifyPropertyChanged("StratigraphicUnits");
            }
        }

         /// <summary>
         /// bool to indicate if StratigraphicUnits has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StratigraphicUnitsSpecified
         {
             get {
             if(StratigraphicUnitsField!=null)
                 return StratigraphicUnitsField.Count>0?true:false;
             else return false;
             }
         }
        private List<StratigraphicUnitInterpretationIndex> StratigraphicUnitsField; 


    } //here

    /// <summary>
    /// One of the main types of RESQML organizations, this class gathers boundary interpretations (e.g., horizons and faults) plus frontier features and their relationships (contacts interpretations), which when taken together define the structure of a part of the earth.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("StructuralOrganizationInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("One of the main types of RESQML organizations, this class gathers boundary interpretations (e.g., horizons and faults) plus frontier features and their relationships (contacts interpretations), which when taken together define the structure of a part of the earth.")]
    public partial class StructuralOrganizationInterpretation : AbstractOrganizationInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// OrderingCriteria property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "OrderingCriteria")]
		[XmlElement("OrderingCriteria")]
        public OrderingCriteria? OrderingCriteria {
            get {
                return OrderingCriteriaField;
            } 
            set {
                OrderingCriteriaField = value;
                 this.OrderingCriteriaSpecified = true;
                NotifyPropertyChanged("OrderingCriteria");
            }
        }

        
        private bool OrderingCriteriaSpecifiedField = false;
        
        /// <summary>
        /// OrderingCriteriaSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OrderingCriteriaSpecified {
            get {
                return OrderingCriteriaSpecifiedField;
            } 
            set {
                OrderingCriteriaSpecifiedField = value;
                NotifyPropertyChanged("OrderingCriteriaSpecified");
            }
        }
        
        private OrderingCriteria? OrderingCriteriaField; 

        /// <summary>
        /// Faults property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Faults")]
        public List<DataObjectReference> Faults {
            get {
                return FaultsField;
            } 
            set {
                FaultsField = value;
                NotifyPropertyChanged("Faults");
            }
        }

         /// <summary>
         /// bool to indicate if Faults has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FaultsSpecified
         {
             get {
             if(FaultsField!=null)
                 return FaultsField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> FaultsField; 

        /// <summary>
        /// Horizons property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "HorizonInterpretationIndex")]
		[XmlElement("Horizons")]
        public List<HorizonInterpretationIndex> Horizons {
            get {
                return HorizonsField;
            } 
            set {
                HorizonsField = value;
                NotifyPropertyChanged("Horizons");
            }
        }

         /// <summary>
         /// bool to indicate if Horizons has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool HorizonsSpecified
         {
             get {
             if(HorizonsField!=null)
                 return HorizonsField.Count>0?true:false;
             else return false;
             }
         }
        private List<HorizonInterpretationIndex> HorizonsField; 

        /// <summary>
        /// Sides property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("Sides")]
        public List<DataObjectReference> Sides {
            get {
                return SidesField;
            } 
            set {
                SidesField = value;
                NotifyPropertyChanged("Sides");
            }
        }

         /// <summary>
         /// bool to indicate if Sides has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SidesSpecified
         {
             get {
             if(SidesField!=null)
                 return SidesField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> SidesField; 

        /// <summary>
        /// TopFrontier property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("TopFrontier")]
        public List<DataObjectReference> TopFrontier {
            get {
                return TopFrontierField;
            } 
            set {
                TopFrontierField = value;
                NotifyPropertyChanged("TopFrontier");
            }
        }

         /// <summary>
         /// bool to indicate if TopFrontier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TopFrontierSpecified
         {
             get {
             if(TopFrontierField!=null)
                 return TopFrontierField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> TopFrontierField; 

        /// <summary>
        /// BottomFrontier property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "DataObjectReference")]
		[XmlElement("BottomFrontier")]
        public List<DataObjectReference> BottomFrontier {
            get {
                return BottomFrontierField;
            } 
            set {
                BottomFrontierField = value;
                NotifyPropertyChanged("BottomFrontier");
            }
        }

         /// <summary>
         /// bool to indicate if BottomFrontier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BottomFrontierSpecified
         {
             get {
             if(BottomFrontierField!=null)
                 return BottomFrontierField.Count>0?true:false;
             else return false;
             }
         }
        private List<DataObjectReference> BottomFrontierField; 


    } //here

    /// <summary>
    /// Interpretation of the fluid organization units.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
    [System.Xml.Serialization.XmlRootAttribute("RockFluidOrganizationInterpretation", Namespace="http://www.energistics.org/energyml/data/resqmlv2", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.RESQML, "2.0")]
    [Description("Interpretation of the fluid organization units.")]
    public partial class RockFluidOrganizationInterpretation : AbstractOrganizationInterpretation, IResqmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// RockFluidUnitIndex property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "RockFluidUnitInterpretationIndex")]
		[XmlElement("RockFluidUnitIndex")]
        public RockFluidUnitInterpretationIndex RockFluidUnitIndex {
            get {
                return RockFluidUnitIndexField;
            } 
            set {
                RockFluidUnitIndexField = value;
                NotifyPropertyChanged("RockFluidUnitIndex");
            }
        }

        private RockFluidUnitInterpretationIndex RockFluidUnitIndexField; 


    } //here

    /// <summary>
    /// This class represents the obj_EpcExternalPartReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
    [System.Xml.Serialization.XmlRootAttribute("EpcExternalPartReference", Namespace="http://www.energistics.org/energyml/data/commonv2", IsNullable=false)]
	[Description("This class represents the obj_EpcExternalPartReference xsd type.")]
    public partial class EpcExternalPartReference : AbstractCitedDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// MimeType property
        /// </summary>
		[Required]
        [Description("IAMF registered, if one exists, or a free text field. Needs documentation on seismic especially.  MIME type for HDF proxy is : application/x-hdf5 (by RESQML convention).")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("MimeType")]
        public string MimeType {
            get {
                return MimeTypeField;
            } 
            set {
                MimeTypeField = value;
                NotifyPropertyChanged("MimeType");
            }
        }

        private string MimeTypeField; 


    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the VerticalCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="VerticalCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the VerticalCrs xsd type.")]
    public partial class VerticalCrs : AbstractCitedDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Direction property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VerticalDirection")]
		[XmlElement("Direction")]
        public VerticalDirection? Direction {
            get {
                return DirectionField;
            } 
            set {
                DirectionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private VerticalDirection? DirectionField; 

        /// <summary>
        /// AbstractVerticalCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractVerticalCrs")]
		[XmlElement("AbstractVerticalCrs")]
        public AbstractVerticalCrs AbstractVerticalCrs {
            get {
                return AbstractVerticalCrsField;
            } 
            set {
                AbstractVerticalCrsField = value;
                NotifyPropertyChanged("AbstractVerticalCrs");
            }
        }

        private AbstractVerticalCrs AbstractVerticalCrsField; 

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the ProjectedCrs xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="ProjectedCrs", Namespace="http://www.energistics.org/energyml/data/commonv2")]
	[Description("This class represents the ProjectedCrs xsd type.")]
    public partial class ProjectedCrs : AbstractCitedDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// AxisOrder property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AxisOrder2d")]
		[XmlElement("AxisOrder")]
        public AxisOrder2d? AxisOrder {
            get {
                return AxisOrderField;
            } 
            set {
                AxisOrderField = value;
                 this.AxisOrderSpecified = true;
                NotifyPropertyChanged("AxisOrder");
            }
        }

        
        private bool AxisOrderSpecifiedField = false;
        
        /// <summary>
        /// AxisOrderSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AxisOrderSpecified {
            get {
                return AxisOrderSpecifiedField;
            } 
            set {
                AxisOrderSpecifiedField = value;
                NotifyPropertyChanged("AxisOrderSpecified");
            }
        }
        
        private AxisOrder2d? AxisOrderField; 

        /// <summary>
        /// AbstractProjectedCrs property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AbstractProjectedCrs")]
		[XmlElement("AbstractProjectedCrs")]
        public AbstractProjectedCrs AbstractProjectedCrs {
            get {
                return AbstractProjectedCrsField;
            } 
            set {
                AbstractProjectedCrsField = value;
                NotifyPropertyChanged("AbstractProjectedCrs");
            }
        }

        private AbstractProjectedCrs AbstractProjectedCrsField; 

		/// <summary>
        /// uom property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                 this.UomSpecified = true;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 

        /// <summary>
        /// uomSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool UomSpecified {
            get {
                return uomSpecifiedField;
            } 
            set {
                uomSpecifiedField = value;
                NotifyPropertyChanged("UomSpecified");
            }
        }

        private bool uomSpecifiedField; 


    } //here
    }

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the ContactSide xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the ContactSide xsd enumeration.")]
        public enum ContactSide 
        {
        /// <summary>
        /// The footwall side of the fault. See picture.
        /// </summary>
          footwall,
        /// <summary>
        /// hangingwall property
        /// </summary>
          [XmlEnum("hanging wall")]
          hangingwall,
        /// <summary>
        /// For a vertical fault, specification of the north side.
        /// </summary>
          north,
        /// <summary>
        /// For a vertical fault, specification of the south side. 
        /// </summary>
          south,
        /// <summary>
        /// For a vertical fault, specification of the east side. 
        /// </summary>
          east,
        /// <summary>
        /// For a vertical fault, specification of the west side. 
        /// </summary>
          west,
        /// <summary>
        /// Indicates that a fault splits a genetic boundary on its younger side. 
        /// </summary>
          younger,
        /// <summary>
        /// Indicates that a fault splits a genetic boundary on its older side. 
        /// </summary>
          older,
        /// <summary>
        /// Indicates that a fault splits both sides of a genetic feature.
        /// </summary>
          both
        }
        /// <summary>
        /// This class represents the ContactMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the ContactMode xsd enumeration.")]
        public enum ContactMode 
        {
        /// <summary>
        /// baselap property
        /// </summary>
          baselap,
        /// <summary>
        /// erosion property
        /// </summary>
          erosion,
        /// <summary>
        /// extended property
        /// </summary>
          extended,
        /// <summary>
        /// proportional property
        /// </summary>
          proportional
        }
        /// <summary>
        /// This class represents the Facet xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the Facet xsd enumeration.")]
        public enum Facet 
        {
        /// <summary>
        /// Indicates condition of how the property was acquired, e.g., distinguishing surface condition of a fluid compared to reservoir conditions. 
        /// </summary>
          conditions,
        /// <summary>
        /// Indicates that the property is directional. Common values are X, Y, or Z for vectors; I, J, or K for properties on a grid; or tensorial coordinates, e.g., XX or IJ. For example, vertical permeability vs. horizontal permeability.
        /// </summary>
          direction,
        /// <summary>
        /// Indicates that the property is of kind net or gross, i.e., indicates that the spatial support of a property is averaged only over the net rock or all of the rock. rock or all of the rock.
        /// </summary>
          netgross,
        /// <summary>
        /// Used to capture any other context not covered by the other facet types listed here.
        /// </summary>
          qualifier,
        /// <summary>
        /// Indicates values such as minimum, maximum, average, etc.
        /// </summary>
          statistics,
        /// <summary>
        /// Indicates the element that is measured, for example, the concentration of a mineral.
        /// </summary>
          what
        }
        /// <summary>
        /// This class represents the ResqmlPropertyKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the ResqmlPropertyKind xsd enumeration.")]
        public enum ResqmlPropertyKind 
        {
        /// <summary>
        /// absorbeddose property
        /// </summary>
          [XmlEnum("absorbed dose")]
          absorbeddose,
        /// <summary>
        /// accelerationlinear property
        /// </summary>
          [XmlEnum("acceleration linear")]
          accelerationlinear,
        /// <summary>
        /// activityofradioactivity property
        /// </summary>
          [XmlEnum("activity (of radioactivity)")]
          activityofradioactivity,
        /// <summary>
        /// amountofsubstance property
        /// </summary>
          [XmlEnum("amount of substance")]
          amountofsubstance,
        /// <summary>
        /// amplitude property
        /// </summary>
          amplitude,
        /// <summary>
        /// angleperlength property
        /// </summary>
          [XmlEnum("angle per length")]
          angleperlength,
        /// <summary>
        /// anglepertime property
        /// </summary>
          [XmlEnum("angle per time")]
          anglepertime,
        /// <summary>
        /// anglepervolume property
        /// </summary>
          [XmlEnum("angle per volume")]
          anglepervolume,
        /// <summary>
        /// angularacceleration property
        /// </summary>
          [XmlEnum("angular acceleration")]
          angularacceleration,
        /// <summary>
        /// area property
        /// </summary>
          area,
        /// <summary>
        /// areaperarea property
        /// </summary>
          [XmlEnum("area per area")]
          areaperarea,
        /// <summary>
        /// areapervolume property
        /// </summary>
          [XmlEnum("area per volume")]
          areapervolume,
        /// <summary>
        /// attenuation property
        /// </summary>
          attenuation,
        /// <summary>
        /// attenuationperlength property
        /// </summary>
          [XmlEnum("attenuation per length")]
          attenuationperlength,
        /// <summary>
        /// azimuth property
        /// </summary>
          azimuth,
        /// <summary>
        /// bubblepointpressure property
        /// </summary>
          [XmlEnum("bubble point pressure")]
          bubblepointpressure,
        /// <summary>
        /// bulkmodulus property
        /// </summary>
          [XmlEnum("bulk modulus")]
          bulkmodulus,
        /// <summary>
        /// capacitance property
        /// </summary>
          capacitance,
        /// <summary>
        /// categorical property
        /// </summary>
          categorical,
        /// <summary>
        /// celllength property
        /// </summary>
          [XmlEnum("cell length")]
          celllength,
        /// <summary>
        /// chargedensity property
        /// </summary>
          [XmlEnum("charge density")]
          chargedensity,
        /// <summary>
        /// chemicalpotential property
        /// </summary>
          [XmlEnum("chemical potential")]
          chemicalpotential,
        /// <summary>
        /// code property
        /// </summary>
          code,
        /// <summary>
        /// compressibility property
        /// </summary>
          compressibility,
        /// <summary>
        /// concentrationofB property
        /// </summary>
          [XmlEnum("concentration of B")]
          concentrationofB,
        /// <summary>
        /// conductivity property
        /// </summary>
          conductivity,
        /// <summary>
        /// continuous property
        /// </summary>
          continuous,
        /// <summary>
        /// crosssectionabsorption property
        /// </summary>
          [XmlEnum("cross section absorption")]
          crosssectionabsorption,
        /// <summary>
        /// currentdensity property
        /// </summary>
          [XmlEnum("current density")]
          currentdensity,
        /// <summary>
        /// Darcyflowcoefficient property
        /// </summary>
          [XmlEnum("Darcy flow coefficient")]
          Darcyflowcoefficient,
        /// <summary>
        /// datatransmissionspeed property
        /// </summary>
          [XmlEnum("data transmission speed")]
          datatransmissionspeed,
        /// <summary>
        /// deltatemperature property
        /// </summary>
          [XmlEnum("delta temperature")]
          deltatemperature,
        /// <summary>
        /// density property
        /// </summary>
          density,
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// diffusioncoefficient property
        /// </summary>
          [XmlEnum("diffusion coefficient")]
          diffusioncoefficient,
        /// <summary>
        /// digitalstorage property
        /// </summary>
          [XmlEnum("digital storage")]
          digitalstorage,
        /// <summary>
        /// dimensionless property
        /// </summary>
          dimensionless,
        /// <summary>
        /// dip property
        /// </summary>
          dip,
        /// <summary>
        /// discrete property
        /// </summary>
          discrete,
        /// <summary>
        /// doseequivalent property
        /// </summary>
          [XmlEnum("dose equivalent")]
          doseequivalent,
        /// <summary>
        /// doseequivalentrate property
        /// </summary>
          [XmlEnum("dose equivalent rate")]
          doseequivalentrate,
        /// <summary>
        /// dynamicviscosity property
        /// </summary>
          [XmlEnum("dynamic viscosity")]
          dynamicviscosity,
        /// <summary>
        /// electriccharge property
        /// </summary>
          [XmlEnum("electric charge")]
          electriccharge,
        /// <summary>
        /// electricconductance property
        /// </summary>
          [XmlEnum("electric conductance")]
          electricconductance,
        /// <summary>
        /// electriccurrent property
        /// </summary>
          [XmlEnum("electric current")]
          electriccurrent,
        /// <summary>
        /// electricdipolemoment property
        /// </summary>
          [XmlEnum("electric dipole moment")]
          electricdipolemoment,
        /// <summary>
        /// electricfieldstrength property
        /// </summary>
          [XmlEnum("electric field strength")]
          electricfieldstrength,
        /// <summary>
        /// electricpolarization property
        /// </summary>
          [XmlEnum("electric polarization")]
          electricpolarization,
        /// <summary>
        /// electricpotential property
        /// </summary>
          [XmlEnum("electric potential")]
          electricpotential,
        /// <summary>
        /// electricalresistivity property
        /// </summary>
          [XmlEnum("electrical resistivity")]
          electricalresistivity,
        /// <summary>
        /// electrochemicalequivalent property
        /// </summary>
          [XmlEnum("electrochemical equivalent")]
          electrochemicalequivalent,
        /// <summary>
        /// electromagneticmoment property
        /// </summary>
          [XmlEnum("electromagnetic moment")]
          electromagneticmoment,
        /// <summary>
        /// energylengthperarea property
        /// </summary>
          [XmlEnum("energy length per area")]
          energylengthperarea,
        /// <summary>
        /// energylengthpertimeareatemperature property
        /// </summary>
          [XmlEnum("energy length per time area temperature")]
          energylengthpertimeareatemperature,
        /// <summary>
        /// energyperarea property
        /// </summary>
          [XmlEnum("energy per area")]
          energyperarea,
        /// <summary>
        /// energyperlength property
        /// </summary>
          [XmlEnum("energy per length")]
          energyperlength,
        /// <summary>
        /// equivalentpermass property
        /// </summary>
          [XmlEnum("equivalent per mass")]
          equivalentpermass,
        /// <summary>
        /// equivalentpervolume property
        /// </summary>
          [XmlEnum("equivalent per volume")]
          equivalentpervolume,
        /// <summary>
        /// exposureradioactivity property
        /// </summary>
          [XmlEnum("exposure (radioactivity)")]
          exposureradioactivity,
        /// <summary>
        /// fluidvolume property
        /// </summary>
          [XmlEnum("fluid volume")]
          fluidvolume,
        /// <summary>
        /// force property
        /// </summary>
          force,
        /// <summary>
        /// forcearea property
        /// </summary>
          [XmlEnum("force area")]
          forcearea,
        /// <summary>
        /// forcelengthperlength property
        /// </summary>
          [XmlEnum("force length per length")]
          forcelengthperlength,
        /// <summary>
        /// forceperforce property
        /// </summary>
          [XmlEnum("force per force")]
          forceperforce,
        /// <summary>
        /// forceperlength property
        /// </summary>
          [XmlEnum("force per length")]
          forceperlength,
        /// <summary>
        /// forcepervolume property
        /// </summary>
          [XmlEnum("force per volume")]
          forcepervolume,
        /// <summary>
        /// formationvolumefactor property
        /// </summary>
          [XmlEnum("formation volume factor")]
          formationvolumefactor,
        /// <summary>
        /// frequency property
        /// </summary>
          frequency,
        /// <summary>
        /// frequencyinterval property
        /// </summary>
          [XmlEnum("frequency interval")]
          frequencyinterval,
        /// <summary>
        /// gammarayAPIunit property
        /// </summary>
          [XmlEnum("gamma ray API unit")]
          gammarayAPIunit,
        /// <summary>
        /// heatcapacity property
        /// </summary>
          [XmlEnum("heat capacity")]
          heatcapacity,
        /// <summary>
        /// heatflowrate property
        /// </summary>
          [XmlEnum("heat flow rate")]
          heatflowrate,
        /// <summary>
        /// heattransfercoefficient property
        /// </summary>
          [XmlEnum("heat transfer coefficient")]
          heattransfercoefficient,
        /// <summary>
        /// illuminance property
        /// </summary>
          illuminance,
        /// <summary>
        /// index property
        /// </summary>
          index,
        /// <summary>
        /// irradiance property
        /// </summary>
          irradiance,
        /// <summary>
        /// isothermalcompressibility property
        /// </summary>
          [XmlEnum("isothermal compressibility")]
          isothermalcompressibility,
        /// <summary>
        /// kinematicviscosity property
        /// </summary>
          [XmlEnum("kinematic viscosity")]
          kinematicviscosity,
        /// <summary>
        /// LambdaRho property
        /// </summary>
          [XmlEnum("Lambda Rho")]
          LambdaRho,
        /// <summary>
        /// Lameconstant property
        /// </summary>
          [XmlEnum("Lame constant")]
          Lameconstant,
        /// <summary>
        /// length property
        /// </summary>
          length,
        /// <summary>
        /// lengthperlength property
        /// </summary>
          [XmlEnum("length per length")]
          lengthperlength,
        /// <summary>
        /// lengthpertemperature property
        /// </summary>
          [XmlEnum("length per temperature")]
          lengthpertemperature,
        /// <summary>
        /// lengthpervolume property
        /// </summary>
          [XmlEnum("length per volume")]
          lengthpervolume,
        /// <summary>
        /// levelofpowerintensity property
        /// </summary>
          [XmlEnum("level of power intensity")]
          levelofpowerintensity,
        /// <summary>
        /// lightexposure property
        /// </summary>
          [XmlEnum("light exposure")]
          lightexposure,
        /// <summary>
        /// linearthermalexpansion property
        /// </summary>
          [XmlEnum("linear thermal expansion")]
          linearthermalexpansion,
        /// <summary>
        /// luminance property
        /// </summary>
          luminance,
        /// <summary>
        /// luminousefficacy property
        /// </summary>
          [XmlEnum("luminous efficacy")]
          luminousefficacy,
        /// <summary>
        /// luminousflux property
        /// </summary>
          [XmlEnum("luminous flux")]
          luminousflux,
        /// <summary>
        /// luminousintensity property
        /// </summary>
          [XmlEnum("luminous intensity")]
          luminousintensity,
        /// <summary>
        /// magneticdipolemoment property
        /// </summary>
          [XmlEnum("magnetic dipole moment")]
          magneticdipolemoment,
        /// <summary>
        /// magneticfieldstrength property
        /// </summary>
          [XmlEnum("magnetic field strength")]
          magneticfieldstrength,
        /// <summary>
        /// magneticflux property
        /// </summary>
          [XmlEnum("magnetic flux")]
          magneticflux,
        /// <summary>
        /// magneticinduction property
        /// </summary>
          [XmlEnum("magnetic induction")]
          magneticinduction,
        /// <summary>
        /// magneticpermeability property
        /// </summary>
          [XmlEnum("magnetic permeability")]
          magneticpermeability,
        /// <summary>
        /// magneticvectorpotential property
        /// </summary>
          [XmlEnum("magnetic vector potential")]
          magneticvectorpotential,
        /// <summary>
        /// mass property
        /// </summary>
          mass,
        /// <summary>
        /// massattenuationcoefficient property
        /// </summary>
          [XmlEnum("mass attenuation coefficient")]
          massattenuationcoefficient,
        /// <summary>
        /// massconcentration property
        /// </summary>
          [XmlEnum("mass concentration")]
          massconcentration,
        /// <summary>
        /// massflowrate property
        /// </summary>
          [XmlEnum("mass flow rate")]
          massflowrate,
        /// <summary>
        /// masslength property
        /// </summary>
          [XmlEnum("mass length")]
          masslength,
        /// <summary>
        /// massperenergy property
        /// </summary>
          [XmlEnum("mass per energy")]
          massperenergy,
        /// <summary>
        /// massperlength property
        /// </summary>
          [XmlEnum("mass per length")]
          massperlength,
        /// <summary>
        /// masspertimeperarea property
        /// </summary>
          [XmlEnum("mass per time per area")]
          masspertimeperarea,
        /// <summary>
        /// masspertimeperlength property
        /// </summary>
          [XmlEnum("mass per time per length")]
          masspertimeperlength,
        /// <summary>
        /// masspervolumeperlength property
        /// </summary>
          [XmlEnum("mass per volume per length")]
          masspervolumeperlength,
        /// <summary>
        /// mobility property
        /// </summary>
          mobility,
        /// <summary>
        /// modulusofcompression property
        /// </summary>
          [XmlEnum("modulus of compression")]
          modulusofcompression,
        /// <summary>
        /// molarconcentration property
        /// </summary>
          [XmlEnum("molar concentration")]
          molarconcentration,
        /// <summary>
        /// molarheatcapacity property
        /// </summary>
          [XmlEnum("molar heat capacity")]
          molarheatcapacity,
        /// <summary>
        /// molarvolume property
        /// </summary>
          [XmlEnum("molar volume")]
          molarvolume,
        /// <summary>
        /// moleperarea property
        /// </summary>
          [XmlEnum("mole per area")]
          moleperarea,
        /// <summary>
        /// molepertime property
        /// </summary>
          [XmlEnum("mole per time")]
          molepertime,
        /// <summary>
        /// molepertimeperarea property
        /// </summary>
          [XmlEnum("mole per time per area")]
          molepertimeperarea,
        /// <summary>
        /// momentofforce property
        /// </summary>
          [XmlEnum("moment of force")]
          momentofforce,
        /// <summary>
        /// momentofinertia property
        /// </summary>
          [XmlEnum("moment of inertia")]
          momentofinertia,
        /// <summary>
        /// momentofsection property
        /// </summary>
          [XmlEnum("moment of section")]
          momentofsection,
        /// <summary>
        /// momentum property
        /// </summary>
          momentum,
        /// <summary>
        /// MuRho property
        /// </summary>
          [XmlEnum("Mu Rho")]
          MuRho,
        /// <summary>
        /// nettogrossratio property
        /// </summary>
          [XmlEnum("net to gross ratio")]
          nettogrossratio,
        /// <summary>
        /// neutronAPIunit property
        /// </summary>
          [XmlEnum("neutron API unit")]
          neutronAPIunit,
        /// <summary>
        /// nonDarcyflowcoefficient property
        /// </summary>
          [XmlEnum("nonDarcy flow coefficient")]
          nonDarcyflowcoefficient,
        /// <summary>
        /// operationspertime property
        /// </summary>
          [XmlEnum("operations per time")]
          operationspertime,
        /// <summary>
        /// parachor property
        /// </summary>
          parachor,
        /// <summary>
        /// perarea property
        /// </summary>
          [XmlEnum("per area")]
          perarea,
        /// <summary>
        /// perelectricpotential property
        /// </summary>
          [XmlEnum("per electric potential")]
          perelectricpotential,
        /// <summary>
        /// perforce property
        /// </summary>
          [XmlEnum("per force")]
          perforce,
        /// <summary>
        /// perlength property
        /// </summary>
          [XmlEnum("per length")]
          perlength,
        /// <summary>
        /// permass property
        /// </summary>
          [XmlEnum("per mass")]
          permass,
        /// <summary>
        /// pervolume property
        /// </summary>
          [XmlEnum("per volume")]
          pervolume,
        /// <summary>
        /// permeabilitylength property
        /// </summary>
          [XmlEnum("permeability length")]
          permeabilitylength,
        /// <summary>
        /// permeabilityrock property
        /// </summary>
          [XmlEnum("permeability rock")]
          permeabilityrock,
        /// <summary>
        /// permeabilitythickness property
        /// </summary>
          [XmlEnum("permeability thickness")]
          permeabilitythickness,
        /// <summary>
        /// permeance property
        /// </summary>
          permeance,
        /// <summary>
        /// permittivity property
        /// </summary>
          permittivity,
        /// <summary>
        /// pH property
        /// </summary>
          pH,
        /// <summary>
        /// planeangle property
        /// </summary>
          [XmlEnum("plane angle")]
          planeangle,
        /// <summary>
        /// Poissonratio property
        /// </summary>
          [XmlEnum("Poisson ratio")]
          Poissonratio,
        /// <summary>
        /// porevolume property
        /// </summary>
          [XmlEnum("pore volume")]
          porevolume,
        /// <summary>
        /// porosity property
        /// </summary>
          porosity,
        /// <summary>
        /// potentialdifferenceperpowerdrop property
        /// </summary>
          [XmlEnum("potential difference per power drop")]
          potentialdifferenceperpowerdrop,
        /// <summary>
        /// power property
        /// </summary>
          power,
        /// <summary>
        /// powerpervolume property
        /// </summary>
          [XmlEnum("power per volume")]
          powerpervolume,
        /// <summary>
        /// pressure property
        /// </summary>
          pressure,
        /// <summary>
        /// pressurepertime property
        /// </summary>
          [XmlEnum("pressure per time")]
          pressurepertime,
        /// <summary>
        /// pressuresquared property
        /// </summary>
          [XmlEnum("pressure squared")]
          pressuresquared,
        /// <summary>
        /// pressuresquaredperforcetimeperarea property
        /// </summary>
          [XmlEnum("pressure squared per force time per area")]
          pressuresquaredperforcetimeperarea,
        /// <summary>
        /// pressuretimepervolume property
        /// </summary>
          [XmlEnum("pressure time per volume")]
          pressuretimepervolume,
        /// <summary>
        /// productivityindex property
        /// </summary>
          [XmlEnum("productivity index")]
          productivityindex,
        /// <summary>
        /// propertymultiplier property
        /// </summary>
          [XmlEnum("property multiplier")]
          propertymultiplier,
        /// <summary>
        /// quantity property
        /// </summary>
          quantity,
        /// <summary>
        /// quantityoflight property
        /// </summary>
          [XmlEnum("quantity of light")]
          quantityoflight,
        /// <summary>
        /// radiance property
        /// </summary>
          radiance,
        /// <summary>
        /// radiantintensity property
        /// </summary>
          [XmlEnum("radiant intensity")]
          radiantintensity,
        /// <summary>
        /// relativepermeability property
        /// </summary>
          [XmlEnum("relative permeability")]
          relativepermeability,
        /// <summary>
        /// relativepower property
        /// </summary>
          [XmlEnum("relative power")]
          relativepower,
        /// <summary>
        /// relativetime property
        /// </summary>
          [XmlEnum("relative time")]
          relativetime,
        /// <summary>
        /// reluctance property
        /// </summary>
          reluctance,
        /// <summary>
        /// resistance property
        /// </summary>
          resistance,
        /// <summary>
        /// resistivityperlength property
        /// </summary>
          [XmlEnum("resistivity per length")]
          resistivityperlength,
        /// <summary>
        /// RESQMLrootproperty property
        /// </summary>
          [XmlEnum("RESQML root property")]
          RESQMLrootproperty,
        /// <summary>
        /// RockImpedance property
        /// </summary>
          [XmlEnum("Rock Impedance")]
          RockImpedance,
        /// <summary>
        /// rockpermeability property
        /// </summary>
          [XmlEnum("rock permeability")]
          rockpermeability,
        /// <summary>
        /// rockvolume property
        /// </summary>
          [XmlEnum("rock volume")]
          rockvolume,
        /// <summary>
        /// saturation property
        /// </summary>
          saturation,
        /// <summary>
        /// secondmomentofarea property
        /// </summary>
          [XmlEnum("second moment of area")]
          secondmomentofarea,
        /// <summary>
        /// shearmodulus property
        /// </summary>
          [XmlEnum("shear modulus")]
          shearmodulus,
        /// <summary>
        /// solidangle property
        /// </summary>
          [XmlEnum("solid angle")]
          solidangle,
        /// <summary>
        /// solutiongasoilratio property
        /// </summary>
          [XmlEnum("solution gas-oil ratio")]
          solutiongasoilratio,
        /// <summary>
        /// specificactivityofradioactivity property
        /// </summary>
          [XmlEnum("specific activity (of radioactivity)")]
          specificactivityofradioactivity,
        /// <summary>
        /// specificenergy property
        /// </summary>
          [XmlEnum("specific energy")]
          specificenergy,
        /// <summary>
        /// specificheatcapacity property
        /// </summary>
          [XmlEnum("specific heat capacity")]
          specificheatcapacity,
        /// <summary>
        /// specificproductivityindex property
        /// </summary>
          [XmlEnum("specific productivity index")]
          specificproductivityindex,
        /// <summary>
        /// specificvolume property
        /// </summary>
          [XmlEnum("specific volume")]
          specificvolume,
        /// <summary>
        /// surfacedensity property
        /// </summary>
          [XmlEnum("surface density")]
          surfacedensity,
        /// <summary>
        /// temperatureperlength property
        /// </summary>
          [XmlEnum("temperature per length")]
          temperatureperlength,
        /// <summary>
        /// temperaturepertime property
        /// </summary>
          [XmlEnum("temperature per time")]
          temperaturepertime,
        /// <summary>
        /// thermalconductance property
        /// </summary>
          [XmlEnum("thermal conductance")]
          thermalconductance,
        /// <summary>
        /// thermalconductivity property
        /// </summary>
          [XmlEnum("thermal conductivity")]
          thermalconductivity,
        /// <summary>
        /// thermaldiffusivity property
        /// </summary>
          [XmlEnum("thermal diffusivity")]
          thermaldiffusivity,
        /// <summary>
        /// thermalinsulance property
        /// </summary>
          [XmlEnum("thermal insulance")]
          thermalinsulance,
        /// <summary>
        /// thermalresistance property
        /// </summary>
          [XmlEnum("thermal resistance")]
          thermalresistance,
        /// <summary>
        /// thermodynamictemperature property
        /// </summary>
          [XmlEnum("thermodynamic temperature")]
          thermodynamictemperature,
        /// <summary>
        /// thickness property
        /// </summary>
          thickness,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// timeperlength property
        /// </summary>
          [XmlEnum("time per length")]
          timeperlength,
        /// <summary>
        /// timepervolume property
        /// </summary>
          [XmlEnum("time per volume")]
          timepervolume,
        /// <summary>
        /// transmissibility property
        /// </summary>
          transmissibility,
        /// <summary>
        /// unitproductivityindex property
        /// </summary>
          [XmlEnum("unit productivity index")]
          unitproductivityindex,
        /// <summary>
        /// unitless property
        /// </summary>
          unitless,
        /// <summary>
        /// vaporoilgasratio property
        /// </summary>
          [XmlEnum("vapor oil-gas ratio")]
          vaporoilgasratio,
        /// <summary>
        /// velocity property
        /// </summary>
          velocity,
        /// <summary>
        /// volume property
        /// </summary>
          volume,
        /// <summary>
        /// volumeflowrate property
        /// </summary>
          [XmlEnum("volume flow rate")]
          volumeflowrate,
        /// <summary>
        /// volumelengthpertime property
        /// </summary>
          [XmlEnum("volume length per time")]
          volumelengthpertime,
        /// <summary>
        /// volumeperarea property
        /// </summary>
          [XmlEnum("volume per area")]
          volumeperarea,
        /// <summary>
        /// volumeperlength property
        /// </summary>
          [XmlEnum("volume per length")]
          volumeperlength,
        /// <summary>
        /// volumepertimeperarea property
        /// </summary>
          [XmlEnum("volume per time per area")]
          volumepertimeperarea,
        /// <summary>
        /// volumepertimeperlength property
        /// </summary>
          [XmlEnum("volume per time per length")]
          volumepertimeperlength,
        /// <summary>
        /// volumepertimepertime property
        /// </summary>
          [XmlEnum("volume per time per time")]
          volumepertimepertime,
        /// <summary>
        /// volumepertimepervolume property
        /// </summary>
          [XmlEnum("volume per time per volume")]
          volumepertimepervolume,
        /// <summary>
        /// volumepervolume property
        /// </summary>
          [XmlEnum("volume per volume")]
          volumepervolume,
        /// <summary>
        /// volumetricheattransfercoefficient property
        /// </summary>
          [XmlEnum("volumetric heat transfer coefficient")]
          volumetricheattransfercoefficient,
        /// <summary>
        /// volumetricthermalexpansion property
        /// </summary>
          [XmlEnum("volumetric thermal expansion")]
          volumetricthermalexpansion,
        /// <summary>
        /// work property
        /// </summary>
          work,
        /// <summary>
        /// Youngmodulus property
        /// </summary>
          [XmlEnum("Young modulus")]
          Youngmodulus
        }
        /// <summary>
        /// This class represents the GridGeometryAttachment xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the GridGeometryAttachment xsd enumeration.")]
        public enum GridGeometryAttachment 
        {
        /// <summary>
        /// Geometry may be attached to cells to distort the geometry of that specific cell, only (finite element grid).
        /// </summary>
          cells,
        /// <summary>
        /// Geometry may be attached to edges to distort the geometry of all cells that refer to that edge (finite element grid). BUSINESS RULE: The edges indexing must be known or defined in the grid representation if geometry is attached to the edges.
        /// </summary>
          edges,
        /// <summary>
        /// Geometry may be attached to faces to distort the geometry of all cells that refer to that face (finite element grid). BUSINESS RULE: The faces indexing must be known or defined in the grid representation if geometry is attached to the faces.
        /// </summary>
          faces,
        /// <summary>
        /// hingenodefaces property
        /// </summary>
          [XmlEnum("hinge node faces")]
          hingenodefaces,
        /// <summary>
        /// Additional grid geometry may be attached to split or truncated node patches for column layer grids. All other node geometry attachment should be done through the Points array of the AbstractGridGeometry, not through the additional grid geometry.
        /// </summary>
          nodes,
        /// <summary>
        /// radialoriginpolyline property
        /// </summary>
          [XmlEnum("radial origin polyline")]
          radialoriginpolyline,
        /// <summary>
        /// Geometry may be attached to subnodes to distort the geometry of all cells that refer to that subnode (finite element grid). BUSINESS RULE: An optional subnode patch object must be defined in the grid representation if geometry is attached to the subnodes.
        /// </summary>
          subnodes
        }
        /// <summary>
        /// This class represents the KDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the KDirection xsd enumeration.")]
        public enum KDirection 
        {
        /// <summary>
        /// K is increasing with depth, dot(tangent,gradDepth)&amp;gt;0.
        /// </summary>
          down,
        /// <summary>
        /// K is increasing with elevation, dot(tangent,gradDepth)&amp;lt;0.
        /// </summary>
          up,
        /// <summary>
        /// notmonotonic property
        /// </summary>
          [XmlEnum("not monotonic")]
          notmonotonic
        }
        /// <summary>
        /// This class represents the PillarShape xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the PillarShape xsd enumeration.")]
        public enum PillarShape 
        {
        /// <summary>
        /// If represented by a parametric line, requires only a single control point per line.
        /// </summary>
          vertical,
        /// <summary>
        /// If represented by a parametric line, requires 2 control points per line.
        /// </summary>
          straight,
        /// <summary>
        /// If represented by a parametric line, requires 3 or more control points per line.
        /// </summary>
          curved
        }
        /// <summary>
        /// This class represents the SubnodeNodeObject xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the SubnodeNodeObject xsd enumeration.")]
        public enum SubnodeNodeObject 
        {
        /// <summary>
        /// If geometry or properties are discontinuous from cell to cell (i.e., their spatial support is cell), then attach them to cell subnodes. BUSINESS RULE: If this object kind is selected, then an ordered list of nodes per cell must be specified or otherwise known.
        /// </summary>
          cell,
        /// <summary>
        /// If geometry or properties are continuous between cells that share the same face (i.e., their spatial support is the face), then attach them to face subnodes. BUSINESS RULE: If this object kind is selected, then an ordered list of nodes per face must be specified or otherwise known.
        /// </summary>
          face,
        /// <summary>
        /// If geometry and properties are continuous between cells that share the same edge of a face (i.e. their spatial support is the edge), then attach them to edge subnodes. BUSINESS RULE: If this object kind is selected, then an ordered list of nodes per edge must be specified or otherwise known.
        /// </summary>
          edge
        }
        /// <summary>
        /// This class represents the IndexableElements xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the IndexableElements xsd enumeration.")]
        public enum IndexableElements 
        {
        /// <summary>
        /// cells property
        /// </summary>
          cells,
        /// <summary>
        /// columnedges property
        /// </summary>
          [XmlEnum("column edges")]
          columnedges,
        /// <summary>
        /// columns property
        /// </summary>
          columns,
        /// <summary>
        /// contacts property
        /// </summary>
          contacts,
        /// <summary>
        /// coordinatelines property
        /// </summary>
          [XmlEnum("coordinate lines")]
          coordinatelines,
        /// <summary>
        /// edges property
        /// </summary>
          edges,
        /// <summary>
        /// edgespercolumn property
        /// </summary>
          [XmlEnum("edges per column")]
          edgespercolumn,
        /// <summary>
        /// enumeratedelements property
        /// </summary>
          [XmlEnum("enumerated elements")]
          enumeratedelements,
        /// <summary>
        /// faces property
        /// </summary>
          faces,
        /// <summary>
        /// facespercell property
        /// </summary>
          [XmlEnum("faces per cell")]
          facespercell,
        /// <summary>
        /// intervaledges property
        /// </summary>
          [XmlEnum("interval edges")]
          intervaledges,
        /// <summary>
        /// intervals property
        /// </summary>
          intervals,
        /// <summary>
        /// I0 property
        /// </summary>
          I0,
        /// <summary>
        /// I0edges property
        /// </summary>
          [XmlEnum("I0 edges")]
          I0edges,
        /// <summary>
        /// J0 property
        /// </summary>
          J0,
        /// <summary>
        /// J0edges property
        /// </summary>
          [XmlEnum("J0 edges")]
          J0edges,
        /// <summary>
        /// layers property
        /// </summary>
          layers,
        /// <summary>
        /// nodes property
        /// </summary>
          nodes,
        /// <summary>
        /// nodespercell property
        /// </summary>
          [XmlEnum("nodes per cell")]
          nodespercell,
        /// <summary>
        /// nodesperedge property
        /// </summary>
          [XmlEnum("nodes per edge")]
          nodesperedge,
        /// <summary>
        /// nodesperface property
        /// </summary>
          [XmlEnum("nodes per face")]
          nodesperface,
        /// <summary>
        /// patches property
        /// </summary>
          patches,
        /// <summary>
        /// pillars property
        /// </summary>
          pillars,
        /// <summary>
        /// regions property
        /// </summary>
          regions,
        /// <summary>
        /// representation property
        /// </summary>
          representation,
        /// <summary>
        /// subnodes property
        /// </summary>
          subnodes,
        /// <summary>
        /// triangles property
        /// </summary>
          triangles
        }
        /// <summary>
        /// This class represents the CellShape xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the CellShape xsd enumeration.")]
        public enum CellShape 
        {
        /// <summary>
        /// All grid cells are constrained to have only 4 nodes/cell with 4 faces/cell, 3 nodes/face, 4 nodes/cell for all cells (degeneracy allowed).
        /// </summary>
          tetrahedral,
        /// <summary>
        /// All grid cells are constrained to have only 5 nodes/cell with 5 faces/cell, with 1 quadrilateral face and 4 triangular faces.
        /// </summary>
          pyramidal,
        /// <summary>
        /// All grid cells are constrained to have 6 nodes/cell with 5 faces/cell, with 3 quadrilateral faces and 2 non-adjacent triangular faces, as in a column layer grid with triangular columns.
        /// </summary>
          prism,
        /// <summary>
        /// All grid cells are constrained to have 8 nodes/cell with 6 faces/cell, 4 nodes/face, 8 nodes/cell for all cells (degeneracy allowed). Equivalent to IJK grid cells.
        /// </summary>
          hexahedral,
        /// <summary>
        /// If the cell geometry is not of a more specific kind, use polyhedral.
        /// </summary>
          polyhedral
        }
        /// <summary>
        /// This class represents the ColumnShape xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the ColumnShape xsd enumeration.")]
        public enum ColumnShape 
        {
        /// <summary>
        /// All grid columns have 3 sides.
        /// </summary>
          triangular,
        /// <summary>
        /// All grid columns have 4 sides. Includes tartan and corner point grids.
        /// </summary>
          quadrilateral,
        /// <summary>
        /// At least one grid column is a polygon, N&amp;gt;4.
        /// </summary>
          polygonal
        }
        /// <summary>
        /// This class represents the IdentityKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the IdentityKind xsd enumeration.")]
        public enum IdentityKind 
        {
        /// <summary>
        /// A set of (sub)representations is collocated if there is bijection between the simple elements of all of the participating (sub)representations. This definition implies there is the same number of simple elements. NOTE: The geometric location of each set of simple elements mapped through the bijection is intended to be identical even if the numeric values of the associated geometries differ, i.e., due to loss of spatial resolution.
        /// </summary>
          colocation,
        /// <summary>
        /// previouscolocation property
        /// </summary>
          [XmlEnum("previous colocation")]
          previouscolocation,
        /// <summary>
        /// A set of (sub)representations is equivalent if there is a map giving an association between some of the simple topological elements of the participating (sub)representations.
        /// </summary>
          equivalence,
        /// <summary>
        /// previousequivalence property
        /// </summary>
          [XmlEnum("previous equivalence")]
          previousequivalence
        }
        /// <summary>
        /// This class represents the VolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        /// <summary>
        /// Item1000bbl property
        /// </summary>
          [XmlEnum("1000 bbl")]
          Item1000bbl,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000 ft3")]
          Item1000ft3,
        /// <summary>
        /// Item1000galUK property
        /// </summary>
          [XmlEnum("1000 gal[UK]")]
          Item1000galUK,
        /// <summary>
        /// Item1000galUS property
        /// </summary>
          [XmlEnum("1000 gal[US]")]
          Item1000galUS,
        /// <summary>
        /// Item1000m3 property
        /// </summary>
          [XmlEnum("1000 m3")]
          Item1000m3,
        /// <summary>
        /// Item1E6galUS property
        /// </summary>
          [XmlEnum("1E-6 gal[US]")]
          Item1E6galUS,
        /// <summary>
        /// Item1E12ft3 property
        /// </summary>
          [XmlEnum("1E12 ft3")]
          Item1E12ft3,
        /// <summary>
        /// Item1E6bbl property
        /// </summary>
          [XmlEnum("1E6 bbl")]
          Item1E6bbl,
        /// <summary>
        /// Item1E6ft3 property
        /// </summary>
          [XmlEnum("1E6 ft3")]
          Item1E6ft3,
        /// <summary>
        /// Item1E6m3 property
        /// </summary>
          [XmlEnum("1E6 m3")]
          Item1E6m3,
        /// <summary>
        /// Item1E9bbl property
        /// </summary>
          [XmlEnum("1E9 bbl")]
          Item1E9bbl,
        /// <summary>
        /// Item1E9ft3 property
        /// </summary>
          [XmlEnum("1E9 ft3")]
          Item1E9ft3,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// dm3 property
        /// </summary>
          dm3,
        /// <summary>
        /// flozUK property
        /// </summary>
          [XmlEnum("floz[UK]")]
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          [XmlEnum("floz[US]")]
          flozUS,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// galUK property
        /// </summary>
          [XmlEnum("gal[UK]")]
          galUK,
        /// <summary>
        /// galUS property
        /// </summary>
          [XmlEnum("gal[US]")]
          galUS,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// mm3 property
        /// </summary>
          mm3,
        /// <summary>
        /// ptUK property
        /// </summary>
          [XmlEnum("pt[UK]")]
          ptUK,
        /// <summary>
        /// ptUS property
        /// </summary>
          [XmlEnum("pt[US]")]
          ptUS,
        /// <summary>
        /// qtUK property
        /// </summary>
          [XmlEnum("qt[UK]")]
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          [XmlEnum("qt[US]")]
          qtUS,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the ThrowKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the ThrowKind xsd enumeration.")]
        public enum ThrowKind 
        {
        /// <summary>
        /// reverse property
        /// </summary>
          reverse,
        /// <summary>
        /// normal property
        /// </summary>
          normal,
        /// <summary>
        /// thrust property
        /// </summary>
          thrust,
        /// <summary>
        /// strikeandslip property
        /// </summary>
          [XmlEnum("strike and slip")]
          strikeandslip,
        /// <summary>
        /// scissor property
        /// </summary>
          scissor,
        /// <summary>
        /// variable property
        /// </summary>
          variable
        }
        /// <summary>
        /// This class represents the PlaneAngleUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PlaneAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        /// <summary>
        /// Item0001seca property
        /// </summary>
          [XmlEnum("0.001 seca")]
          Item0001seca,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// mila property
        /// </summary>
          mila,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// rev property
        /// </summary>
          rev,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// urad property
        /// </summary>
          urad
        }
        /// <summary>
        /// This class represents the LengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        /// <summary>
        /// Item01ft property
        /// </summary>
          [XmlEnum("0.1 ft")]
          Item01ft,
        /// <summary>
        /// Item01ftUS property
        /// </summary>
          [XmlEnum("0.1 ft[US]")]
          Item01ftUS,
        /// <summary>
        /// Item01in property
        /// </summary>
          [XmlEnum("0.1 in")]
          Item01in,
        /// <summary>
        /// Item01yd property
        /// </summary>
          [XmlEnum("0.1 yd")]
          Item01yd,
        /// <summary>
        /// Item116in property
        /// </summary>
          [XmlEnum("1/16 in")]
          Item116in,
        /// <summary>
        /// Item12ft property
        /// </summary>
          [XmlEnum("1/2 ft")]
          Item12ft,
        /// <summary>
        /// Item132in property
        /// </summary>
          [XmlEnum("1/32 in")]
          Item132in,
        /// <summary>
        /// Item164in property
        /// </summary>
          [XmlEnum("1/64 in")]
          Item164in,
        /// <summary>
        /// Item10ft property
        /// </summary>
          [XmlEnum("10 ft")]
          Item10ft,
        /// <summary>
        /// Item10in property
        /// </summary>
          [XmlEnum("10 in")]
          Item10in,
        /// <summary>
        /// Item10km property
        /// </summary>
          [XmlEnum("10 km")]
          Item10km,
        /// <summary>
        /// Item100ft property
        /// </summary>
          [XmlEnum("100 ft")]
          Item100ft,
        /// <summary>
        /// Item100km property
        /// </summary>
          [XmlEnum("100 km")]
          Item100km,
        /// <summary>
        /// Item1000ft property
        /// </summary>
          [XmlEnum("1000 ft")]
          Item1000ft,
        /// <summary>
        /// Item30ft property
        /// </summary>
          [XmlEnum("30 ft")]
          Item30ft,
        /// <summary>
        /// Item30m property
        /// </summary>
          [XmlEnum("30 m")]
          Item30m,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// chain property
        /// </summary>
          chain,
        /// <summary>
        /// chainBnA property
        /// </summary>
          [XmlEnum("chain[BnA]")]
          chainBnA,
        /// <summary>
        /// chainBnB property
        /// </summary>
          [XmlEnum("chain[BnB]")]
          chainBnB,
        /// <summary>
        /// chainCla property
        /// </summary>
          [XmlEnum("chain[Cla]")]
          chainCla,
        /// <summary>
        /// chainInd37 property
        /// </summary>
          [XmlEnum("chain[Ind37]")]
          chainInd37,
        /// <summary>
        /// chainSe property
        /// </summary>
          [XmlEnum("chain[Se]")]
          chainSe,
        /// <summary>
        /// chainSeT property
        /// </summary>
          [XmlEnum("chain[SeT]")]
          chainSeT,
        /// <summary>
        /// chainUS property
        /// </summary>
          [XmlEnum("chain[US]")]
          chainUS,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// dam property
        /// </summary>
          dam,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// Em property
        /// </summary>
          Em,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftBnA property
        /// </summary>
          [XmlEnum("ft[BnA]")]
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          [XmlEnum("ft[BnB]")]
          ftBnB,
        /// <summary>
        /// ftBr36 property
        /// </summary>
          [XmlEnum("ft[Br36]")]
          ftBr36,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ft[Br65]")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          [XmlEnum("ft[Cla]")]
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          [XmlEnum("ft[GC]")]
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          [XmlEnum("ft[Ind]")]
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ft[Ind37]")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ft[Ind62]")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ft[Ind75]")]
          ftInd75,
        /// <summary>
        /// ftSe property
        /// </summary>
          [XmlEnum("ft[Se]")]
          ftSe,
        /// <summary>
        /// ftSeT property
        /// </summary>
          [XmlEnum("ft[SeT]")]
          ftSeT,
        /// <summary>
        /// ftUS property
        /// </summary>
          [XmlEnum("ft[US]")]
          ftUS,
        /// <summary>
        /// furUS property
        /// </summary>
          [XmlEnum("fur[US]")]
          furUS,
        /// <summary>
        /// Gm property
        /// </summary>
          Gm,
        /// <summary>
        /// hm property
        /// </summary>
          hm,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// inUS property
        /// </summary>
          [XmlEnum("in[US]")]
          inUS,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// link property
        /// </summary>
          link,
        /// <summary>
        /// linkBnA property
        /// </summary>
          [XmlEnum("link[BnA]")]
          linkBnA,
        /// <summary>
        /// linkBnB property
        /// </summary>
          [XmlEnum("link[BnB]")]
          linkBnB,
        /// <summary>
        /// linkCla property
        /// </summary>
          [XmlEnum("link[Cla]")]
          linkCla,
        /// <summary>
        /// linkSe property
        /// </summary>
          [XmlEnum("link[Se]")]
          linkSe,
        /// <summary>
        /// linkSeT property
        /// </summary>
          [XmlEnum("link[SeT]")]
          linkSeT,
        /// <summary>
        /// linkUS property
        /// </summary>
          [XmlEnum("link[US]")]
          linkUS,
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// mGer property
        /// </summary>
          [XmlEnum("m[Ger]")]
          mGer,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// minaut property
        /// </summary>
          [XmlEnum("mi[naut]")]
          minaut,
        /// <summary>
        /// minautUK property
        /// </summary>
          [XmlEnum("mi[nautUK]")]
          minautUK,
        /// <summary>
        /// miUS property
        /// </summary>
          [XmlEnum("mi[US]")]
          miUS,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// mm property
        /// </summary>
          mm,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// rodUS property
        /// </summary>
          [XmlEnum("rod[US]")]
          rodUS,
        /// <summary>
        /// Tm property
        /// </summary>
          Tm,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          [XmlEnum("yd[BnA]")]
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          [XmlEnum("yd[BnB]")]
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          [XmlEnum("yd[Cla]")]
          ydCla,
        /// <summary>
        /// ydInd property
        /// </summary>
          [XmlEnum("yd[Ind]")]
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("yd[Ind37]")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("yd[Ind62]")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("yd[Ind75]")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          [XmlEnum("yd[Se]")]
          ydSe,
        /// <summary>
        /// ydSeT property
        /// </summary>
          [XmlEnum("yd[SeT]")]
          ydSeT,
        /// <summary>
        /// ydUS property
        /// </summary>
          [XmlEnum("yd[US]")]
          ydUS
        }
        /// <summary>
        /// This class represents the ContactRelationship xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the ContactRelationship xsd enumeration.")]
        public enum ContactRelationship 
        {
        /// <summary>
        /// frontierfeaturetofrontierfeature property
        /// </summary>
          [XmlEnum("frontier feature to frontier feature")]
          frontierfeaturetofrontierfeature,
        /// <summary>
        /// geneticboundarytofrontierfeature property
        /// </summary>
          [XmlEnum("genetic boundary to frontier feature")]
          geneticboundarytofrontierfeature,
        /// <summary>
        /// geneticboundarytogeneticboundary property
        /// </summary>
          [XmlEnum("genetic boundary to genetic boundary")]
          geneticboundarytogeneticboundary,
        /// <summary>
        /// geneticboundarytotectonicboundary property
        /// </summary>
          [XmlEnum("genetic boundary to tectonic boundary")]
          geneticboundarytotectonicboundary,
        /// <summary>
        /// stratigraphicunittofrontierfeature property
        /// </summary>
          [XmlEnum("stratigraphic unit to frontier feature")]
          stratigraphicunittofrontierfeature,
        /// <summary>
        /// stratigraphicunittostratigraphicunit property
        /// </summary>
          [XmlEnum("stratigraphic unit to stratigraphic unit")]
          stratigraphicunittostratigraphicunit,
        /// <summary>
        /// tectonicboundarytofrontierfeature property
        /// </summary>
          [XmlEnum("tectonic boundary to frontier feature")]
          tectonicboundarytofrontierfeature,
        /// <summary>
        /// tectonicboundarytogeneticboundary property
        /// </summary>
          [XmlEnum("tectonic boundary to genetic boundary")]
          tectonicboundarytogeneticboundary,
        /// <summary>
        /// tectonicboundarytotectonicboundary property
        /// </summary>
          [XmlEnum("tectonic boundary to tectonic boundary")]
          tectonicboundarytotectonicboundary
        }
        /// <summary>
        /// This class represents the ContactVerb xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the ContactVerb xsd enumeration.")]
        public enum ContactVerb 
        {
        /// <summary>
        /// Specifies that the fault has opened a pair of fault lips in a horizon.
        /// </summary>
          splits,
        /// <summary>
        /// Operation on which an “unconformable” genetic boundary interpretation interrupts another genetic boundary interpretation or a stratigraphic unit interpretation. 
        /// </summary>
          interrupts,
        /// <summary>
        /// Precise use of this attribute to be determined during testing.
        /// </summary>
          contains,
        /// <summary>
        /// Defines surface contact between two stratigraphic units. 
        /// </summary>
          conforms,
        /// <summary>
        /// Defines surface contact between two stratigraphic units.
        /// </summary>
          erodes,
        /// <summary>
        /// stopsat property
        /// </summary>
          [XmlEnum("stops at")]
          stopsat,
        /// <summary>
        /// Defines if a tectonic boundary interpretation crosses another tectonic boundary interpretation. 
        /// </summary>
          crosses,
        /// <summary>
        /// Precise use of this attribute will be determined during testing.
        /// </summary>
          includes
        }
        /// <summary>
        /// This class represents the RelatedTimeTypeRelativePosition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the RelatedTimeTypeRelativePosition xsd enumeration.")]
        public enum RelatedTimeTypeRelativePosition 
        {
        /// <summary>
        /// Before property
        /// </summary>
          Before,
        /// <summary>
        /// After property
        /// </summary>
          After,
        /// <summary>
        /// Begins property
        /// </summary>
          Begins,
        /// <summary>
        /// Ends property
        /// </summary>
          Ends,
        /// <summary>
        /// During property
        /// </summary>
          During,
        /// <summary>
        /// Equals property
        /// </summary>
          Equals,
        /// <summary>
        /// Contains property
        /// </summary>
          Contains,
        /// <summary>
        /// Overlaps property
        /// </summary>
          Overlaps,
        /// <summary>
        /// Meets property
        /// </summary>
          Meets,
        /// <summary>
        /// OverlappedBy property
        /// </summary>
          OverlappedBy,
        /// <summary>
        /// MetBy property
        /// </summary>
          MetBy,
        /// <summary>
        /// BegunBy property
        /// </summary>
          BegunBy,
        /// <summary>
        /// EndedBy property
        /// </summary>
          EndedBy
        }
        /// <summary>
        /// This class represents the AggregationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.opengis.net/gml/3.2")]
        [Description("This class represents the AggregationType xsd enumeration.")]
        public enum AggregationType 
        {
        /// <summary>
        /// set property
        /// </summary>
          set,
        /// <summary>
        /// bag property
        /// </summary>
          bag,
        /// <summary>
        /// sequence property
        /// </summary>
          sequence,
        /// <summary>
        /// array property
        /// </summary>
          array,
        /// <summary>
        /// record property
        /// </summary>
          record,
        /// <summary>
        /// table property
        /// </summary>
          table
        }
        /// <summary>
        /// This class represents the MdReference xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the MdReference xsd enumeration.")]
        public enum MdReference 
        {
        /// <summary>
        /// groundlevel property
        /// </summary>
          [XmlEnum("ground level")]
          groundlevel,
        /// <summary>
        /// kellybushing property
        /// </summary>
          [XmlEnum("kelly bushing")]
          kellybushing,
        /// <summary>
        /// meansealevel property
        /// </summary>
          [XmlEnum("mean sea level")]
          meansealevel,
        /// <summary>
        /// derrickfloor property
        /// </summary>
          [XmlEnum("derrick floor")]
          derrickfloor,
        /// <summary>
        /// casingflange property
        /// </summary>
          [XmlEnum("casing flange")]
          casingflange,
        /// <summary>
        /// arbitrarypoint property
        /// </summary>
          [XmlEnum("arbitrary point")]
          arbitrarypoint,
        /// <summary>
        /// crownvalve property
        /// </summary>
          [XmlEnum("crown valve")]
          crownvalve,
        /// <summary>
        /// rotarybushing property
        /// </summary>
          [XmlEnum("rotary bushing")]
          rotarybushing,
        /// <summary>
        /// rotarytable property
        /// </summary>
          [XmlEnum("rotary table")]
          rotarytable,
        /// <summary>
        /// seafloor property
        /// </summary>
          [XmlEnum("sea floor")]
          seafloor,
        /// <summary>
        /// lowestastronomicaltide property
        /// </summary>
          [XmlEnum("lowest astronomical tide")]
          lowestastronomicaltide,
        /// <summary>
        /// meanhigherhighwater property
        /// </summary>
          [XmlEnum("mean higher high water")]
          meanhigherhighwater,
        /// <summary>
        /// meanhighwater property
        /// </summary>
          [XmlEnum("mean high water")]
          meanhighwater,
        /// <summary>
        /// meanlowerlowwater property
        /// </summary>
          [XmlEnum("mean lower low water")]
          meanlowerlowwater,
        /// <summary>
        /// meanlowwater property
        /// </summary>
          [XmlEnum("mean low water")]
          meanlowwater,
        /// <summary>
        /// meantidelevel property
        /// </summary>
          [XmlEnum("mean tide level")]
          meantidelevel,
        /// <summary>
        /// kickoffpoint property
        /// </summary>
          [XmlEnum("kickoff point")]
          kickoffpoint
        }
        /// <summary>
        /// This class represents the OrganizationKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the OrganizationKind xsd enumeration.")]
        public enum OrganizationKind 
        {
        /// <summary>
        /// earthmodel property
        /// </summary>
          [XmlEnum("earth model")]
          earthmodel,
        /// <summary>
        /// A volume organization composed of fluid boundaries and phase units.
        /// </summary>
          fluid,
        /// <summary>
        /// A volume organization composed of geologic features, such as geobodies, stratigraphic units, and boundaries.
        /// </summary>
          stratigraphic,
        /// <summary>
        /// A surface organization composed of geologic features, such as faults, horizons, and frontier boundaries. 
        /// </summary>
          structural
        }
        /// <summary>
        /// This class represents the TectonicBoundaryKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the TectonicBoundaryKind xsd enumeration.")]
        public enum TectonicBoundaryKind 
        {
        /// <summary>
        /// Fracture with displacement
        /// </summary>
          fault,
        /// <summary>
        /// Fracture
        /// </summary>
          fracture
        }
        /// <summary>
        /// This class represents the GeneticBoundaryKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the GeneticBoundaryKind xsd enumeration.")]
        public enum GeneticBoundaryKind 
        {
        /// <summary>
        /// geobodyboundary property
        /// </summary>
          [XmlEnum("geobody boundary")]
          geobodyboundary,
        /// <summary>
        /// An interface associated with a stratigraphic unit, which could be the top or bottom of the unit.
        /// </summary>
          horizon
        }
        /// <summary>
        /// This class represents the FluidContact xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the FluidContact xsd enumeration.")]
        public enum FluidContact 
        {
        /// <summary>
        /// freewatercontact property
        /// </summary>
          [XmlEnum("free water contact")]
          freewatercontact,
        /// <summary>
        /// gasoilcontact property
        /// </summary>
          [XmlEnum("gas oil contact")]
          gasoilcontact,
        /// <summary>
        /// gaswatercontact property
        /// </summary>
          [XmlEnum("gas water contact")]
          gaswatercontact,
        /// <summary>
        /// Identifies a break in the hydrostatic column.
        /// </summary>
          seal,
        /// <summary>
        /// wateroilcontact property
        /// </summary>
          [XmlEnum("water oil contact")]
          wateroilcontact
        }
        /// <summary>
        /// This class represents the Phase xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the Phase xsd enumeration.")]
        public enum Phase 
        {
        /// <summary>
        /// Volume of the hydrostatic column for which only the aqueous phase is mobile. Typically below the Pc(hydrocarbon-water)=0 free fluid surface. 
        /// </summary>
          aquifer,
        /// <summary>
        /// gascap property
        /// </summary>
          [XmlEnum("gas cap")]
          gascap,
        /// <summary>
        /// oilcolumn property
        /// </summary>
          [XmlEnum("oil column")]
          oilcolumn,
        /// <summary>
        /// Impermeable volume which provides the seal for a hydrostatic fluid column.
        /// </summary>
          seal
        }
        /// <summary>
        /// This class represents the AxisOrder2d xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AxisOrder2d xsd enumeration.")]
        public enum AxisOrder2d 
        {
        /// <summary>
        /// eastingnorthing property
        /// </summary>
          [XmlEnum("easting northing")]
          eastingnorthing,
        /// <summary>
        /// northingeasting property
        /// </summary>
          [XmlEnum("northing easting")]
          northingeasting,
        /// <summary>
        /// westingsouthing property
        /// </summary>
          [XmlEnum("westing southing")]
          westingsouthing,
        /// <summary>
        /// southingwesting property
        /// </summary>
          [XmlEnum("southing westing")]
          southingwesting,
        /// <summary>
        /// northingwesting property
        /// </summary>
          [XmlEnum("northing westing")]
          northingwesting,
        /// <summary>
        /// westingnorthing property
        /// </summary>
          [XmlEnum("westing northing")]
          westingnorthing
        }
        /// <summary>
        /// This class represents the TimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimeUom xsd enumeration.")]
        public enum TimeUom 
        {
        /// <summary>
        /// Item12ms property
        /// </summary>
          [XmlEnum("1/2 ms")]
          Item12ms,
        /// <summary>
        /// Item100kat property
        /// </summary>
          [XmlEnum("100 ka[t]")]
          Item100kat,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// at property
        /// </summary>
          [XmlEnum("a[t]")]
          at,
        /// <summary>
        /// ca property
        /// </summary>
          ca,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// ds property
        /// </summary>
          ds,
        /// <summary>
        /// Eat property
        /// </summary>
          [XmlEnum("Ea[t]")]
          Eat,
        /// <summary>
        /// fa property
        /// </summary>
          fa,
        /// <summary>
        /// Gat property
        /// </summary>
          [XmlEnum("Ga[t]")]
          Gat,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// hs property
        /// </summary>
          hs,
        /// <summary>
        /// kat property
        /// </summary>
          [XmlEnum("ka[t]")]
          kat,
        /// <summary>
        /// Mat property
        /// </summary>
          [XmlEnum("Ma[t]")]
          Mat,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// ms property
        /// </summary>
          ms,
        /// <summary>
        /// na property
        /// </summary>
          na,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// Tat property
        /// </summary>
          [XmlEnum("Ta[t]")]
          Tat,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// wk property
        /// </summary>
          wk
        }
        /// <summary>
        /// This class represents the ResqmlUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the ResqmlUom xsd enumeration.")]
        public enum ResqmlUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// area property
        /// </summary>
          [XmlEnum("%[area]")]
          area,
        /// <summary>
        /// mass property
        /// </summary>
          [XmlEnum("%[mass]")]
          mass,
        /// <summary>
        /// molar property
        /// </summary>
          [XmlEnum("%[molar]")]
          molar,
        /// <summary>
        /// vol property
        /// </summary>
          [XmlEnum("%[vol]")]
          vol,
        /// <summary>
        /// bbldbbld property
        /// </summary>
          [XmlEnum("(bbl/d)/(bbl/d)")]
          bbldbbld,
        /// <summary>
        /// m3dm3d property
        /// </summary>
          [XmlEnum("(m3/d)/(m3/d)")]
          m3dm3d,
        /// <summary>
        /// m3sm3s property
        /// </summary>
          [XmlEnum("(m3/s)/(m3/s)")]
          m3sm3s,
        /// <summary>
        /// Item0001bblft3 property
        /// </summary>
          [XmlEnum("0.001 bbl/ft3")]
          Item0001bblft3,
        /// <summary>
        /// Item0001bblm3 property
        /// </summary>
          [XmlEnum("0.001 bbl/m3")]
          Item0001bblm3,
        /// <summary>
        /// Item0001dft3 property
        /// </summary>
          [XmlEnum("0.001 d/ft3")]
          Item0001dft3,
        /// <summary>
        /// Item0001galUKbbl property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/bbl")]
          Item0001galUKbbl,
        /// <summary>
        /// Item0001galUKgalUK property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/gal[UK]")]
          Item0001galUKgalUK,
        /// <summary>
        /// Item0001galUSbbl property
        /// </summary>
          [XmlEnum("0.001 gal[US]/bbl")]
          Item0001galUSbbl,
        /// <summary>
        /// Item0001galUSft3 property
        /// </summary>
          [XmlEnum("0.001 gal[US]/ft3")]
          Item0001galUSft3,
        /// <summary>
        /// Item0001galUSgalUS property
        /// </summary>
          [XmlEnum("0.001 gal[US]/gal[US]")]
          Item0001galUSgalUS,
        /// <summary>
        /// Item0001hft property
        /// </summary>
          [XmlEnum("0.001 h/ft")]
          Item0001hft,
        /// <summary>
        /// Item0001kPa2cP property
        /// </summary>
          [XmlEnum("0.001 kPa2/cP")]
          Item0001kPa2cP,
        /// <summary>
        /// Item0001lbmbbl property
        /// </summary>
          [XmlEnum("0.001 lbm/bbl")]
          Item0001lbmbbl,
        /// <summary>
        /// Item0001lbmgalUK property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[UK]")]
          Item0001lbmgalUK,
        /// <summary>
        /// Item0001lbmgalUS property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[US]")]
          Item0001lbmgalUS,
        /// <summary>
        /// Item0001psift property
        /// </summary>
          [XmlEnum("0.001 psi/ft")]
          Item0001psift,
        /// <summary>
        /// Item0001ptUKbbl property
        /// </summary>
          [XmlEnum("0.001 pt[UK]/bbl")]
          Item0001ptUKbbl,
        /// <summary>
        /// Item0001seca property
        /// </summary>
          [XmlEnum("0.001 seca")]
          Item0001seca,
        /// <summary>
        /// Item001bblbbl property
        /// </summary>
          [XmlEnum("0.01 bbl/bbl")]
          Item001bblbbl,
        /// <summary>
        /// Item001degaft property
        /// </summary>
          [XmlEnum("0.01 dega/ft")]
          Item001degaft,
        /// <summary>
        /// Item001degFft property
        /// </summary>
          [XmlEnum("0.01 degF/ft")]
          Item001degFft,
        /// <summary>
        /// Item001dm3km property
        /// </summary>
          [XmlEnum("0.01 dm3/km")]
          Item001dm3km,
        /// <summary>
        /// Item001ftft property
        /// </summary>
          [XmlEnum("0.01 ft/ft")]
          Item001ftft,
        /// <summary>
        /// Item001grainft3 property
        /// </summary>
          [XmlEnum("0.01 grain/ft3")]
          Item001grainft3,
        /// <summary>
        /// Item001Lkg property
        /// </summary>
          [XmlEnum("0.01 L/kg")]
          Item001Lkg,
        /// <summary>
        /// Item001Lkm property
        /// </summary>
          [XmlEnum("0.01 L/km")]
          Item001Lkm,
        /// <summary>
        /// Item001lbfft property
        /// </summary>
          [XmlEnum("0.01 lbf/ft")]
          Item001lbfft,
        /// <summary>
        /// Item001lbfft2 property
        /// </summary>
          [XmlEnum("0.01 lbf/ft2")]
          Item001lbfft2,
        /// <summary>
        /// Item001lbmft2 property
        /// </summary>
          [XmlEnum("0.01 lbm/ft2")]
          Item001lbmft2,
        /// <summary>
        /// Item001psift property
        /// </summary>
          [XmlEnum("0.01 psi/ft")]
          Item001psift,
        /// <summary>
        /// Item01ft property
        /// </summary>
          [XmlEnum("0.1 ft")]
          Item01ft,
        /// <summary>
        /// Item01ftUS property
        /// </summary>
          [XmlEnum("0.1 ft[US]")]
          Item01ftUS,
        /// <summary>
        /// Item01galUSbbl property
        /// </summary>
          [XmlEnum("0.1 gal[US]/bbl")]
          Item01galUSbbl,
        /// <summary>
        /// Item01in property
        /// </summary>
          [XmlEnum("0.1 in")]
          Item01in,
        /// <summary>
        /// Item01Lbbl property
        /// </summary>
          [XmlEnum("0.1 L/bbl")]
          Item01Lbbl,
        /// <summary>
        /// Item01lbmbbl property
        /// </summary>
          [XmlEnum("0.1 lbm/bbl")]
          Item01lbmbbl,
        /// <summary>
        /// Item01ptUSbbl property
        /// </summary>
          [XmlEnum("0.1 pt[US]/bbl")]
          Item01ptUSbbl,
        /// <summary>
        /// Item01yd property
        /// </summary>
          [XmlEnum("0.1 yd")]
          Item01yd,
        /// <summary>
        /// Item1kgs property
        /// </summary>
          [XmlEnum("1/(kg.s)")]
          Item1kgs,
        /// <summary>
        /// Item116in property
        /// </summary>
          [XmlEnum("1/16 in")]
          Item116in,
        /// <summary>
        /// Item12ft property
        /// </summary>
          [XmlEnum("1/2 ft")]
          Item12ft,
        /// <summary>
        /// Item12ms property
        /// </summary>
          [XmlEnum("1/2 ms")]
          Item12ms,
        /// <summary>
        /// Item130cm3min property
        /// </summary>
          [XmlEnum("1/30 cm3/min")]
          Item130cm3min,
        /// <summary>
        /// Item130degaft property
        /// </summary>
          [XmlEnum("1/30 dega/ft")]
          Item130degaft,
        /// <summary>
        /// Item130degam property
        /// </summary>
          [XmlEnum("1/30 dega/m")]
          Item130degam,
        /// <summary>
        /// Item130lbfm property
        /// </summary>
          [XmlEnum("1/30 lbf/m")]
          Item130lbfm,
        /// <summary>
        /// Item130mm property
        /// </summary>
          [XmlEnum("1/30 m/m")]
          Item130mm,
        /// <summary>
        /// Item130Nm property
        /// </summary>
          [XmlEnum("1/30 N/m")]
          Item130Nm,
        /// <summary>
        /// Item132in property
        /// </summary>
          [XmlEnum("1/32 in")]
          Item132in,
        /// <summary>
        /// Item164in property
        /// </summary>
          [XmlEnum("1/64 in")]
          Item164in,
        /// <summary>
        /// Item1a property
        /// </summary>
          [XmlEnum("1/a")]
          Item1a,
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1bbl property
        /// </summary>
          [XmlEnum("1/bbl")]
          Item1bbl,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1d property
        /// </summary>
          [XmlEnum("1/d")]
          Item1d,
        /// <summary>
        /// Item1degC property
        /// </summary>
          [XmlEnum("1/degC")]
          Item1degC,
        /// <summary>
        /// Item1degF property
        /// </summary>
          [XmlEnum("1/degF")]
          Item1degF,
        /// <summary>
        /// Item1degR property
        /// </summary>
          [XmlEnum("1/degR")]
          Item1degR,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1ft2 property
        /// </summary>
          [XmlEnum("1/ft2")]
          Item1ft2,
        /// <summary>
        /// Item1ft3 property
        /// </summary>
          [XmlEnum("1/ft3")]
          Item1ft3,
        /// <summary>
        /// Item1g property
        /// </summary>
          [XmlEnum("1/g")]
          Item1g,
        /// <summary>
        /// Item1galUK property
        /// </summary>
          [XmlEnum("1/gal[UK]")]
          Item1galUK,
        /// <summary>
        /// Item1galUS property
        /// </summary>
          [XmlEnum("1/gal[US]")]
          Item1galUS,
        /// <summary>
        /// Item1H property
        /// </summary>
          [XmlEnum("1/H")]
          Item1H,
        /// <summary>
        /// Item1h property
        /// </summary>
          [XmlEnum("1/h")]
          Item1h,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1K property
        /// </summary>
          [XmlEnum("1/K")]
          Item1K,
        /// <summary>
        /// Item1kg property
        /// </summary>
          [XmlEnum("1/kg")]
          Item1kg,
        /// <summary>
        /// Item1km2 property
        /// </summary>
          [XmlEnum("1/km2")]
          Item1km2,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1L property
        /// </summary>
          [XmlEnum("1/L")]
          Item1L,
        /// <summary>
        /// Item1lbf property
        /// </summary>
          [XmlEnum("1/lbf")]
          Item1lbf,
        /// <summary>
        /// Item1lbm property
        /// </summary>
          [XmlEnum("1/lbm")]
          Item1lbm,
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1m2 property
        /// </summary>
          [XmlEnum("1/m2")]
          Item1m2,
        /// <summary>
        /// Item1m3 property
        /// </summary>
          [XmlEnum("1/m3")]
          Item1m3,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mi2 property
        /// </summary>
          [XmlEnum("1/mi2")]
          Item1mi2,
        /// <summary>
        /// Item1min property
        /// </summary>
          [XmlEnum("1/min")]
          Item1min,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1ms property
        /// </summary>
          [XmlEnum("1/ms")]
          Item1ms,
        /// <summary>
        /// Item1N property
        /// </summary>
          [XmlEnum("1/N")]
          Item1N,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa,
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1s property
        /// </summary>
          [XmlEnum("1/s")]
          Item1s,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi,
        /// <summary>
        /// Item1us property
        /// </summary>
          [XmlEnum("1/us")]
          Item1us,
        /// <summary>
        /// Item1uV property
        /// </summary>
          [XmlEnum("1/uV")]
          Item1uV,
        /// <summary>
        /// Item1V property
        /// </summary>
          [XmlEnum("1/V")]
          Item1V,
        /// <summary>
        /// Item1wk property
        /// </summary>
          [XmlEnum("1/wk")]
          Item1wk,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd,
        /// <summary>
        /// Item10ft property
        /// </summary>
          [XmlEnum("10 ft")]
          Item10ft,
        /// <summary>
        /// Item10in property
        /// </summary>
          [XmlEnum("10 in")]
          Item10in,
        /// <summary>
        /// Item10km property
        /// </summary>
          [XmlEnum("10 km")]
          Item10km,
        /// <summary>
        /// Item10kN property
        /// </summary>
          [XmlEnum("10 kN")]
          Item10kN,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10 Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// Item100ft property
        /// </summary>
          [XmlEnum("100 ft")]
          Item100ft,
        /// <summary>
        /// Item100kat property
        /// </summary>
          [XmlEnum("100 ka[t]")]
          Item100kat,
        /// <summary>
        /// Item100km property
        /// </summary>
          [XmlEnum("100 km")]
          Item100km,
        /// <summary>
        /// Item1000bbl property
        /// </summary>
          [XmlEnum("1000 bbl")]
          Item1000bbl,
        /// <summary>
        /// Item1000bblftd property
        /// </summary>
          [XmlEnum("1000 bbl.ft/d")]
          Item1000bblftd,
        /// <summary>
        /// Item1000bbld property
        /// </summary>
          [XmlEnum("1000 bbl/d")]
          Item1000bbld,
        /// <summary>
        /// Item1000ft property
        /// </summary>
          [XmlEnum("1000 ft")]
          Item1000ft,
        /// <summary>
        /// Item1000fth property
        /// </summary>
          [XmlEnum("1000 ft/h")]
          Item1000fth,
        /// <summary>
        /// Item1000fts property
        /// </summary>
          [XmlEnum("1000 ft/s")]
          Item1000fts,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000 ft3")]
          Item1000ft3,
        /// <summary>
        /// Item1000ft3dft property
        /// </summary>
          [XmlEnum("1000 ft3/(d.ft)")]
          Item1000ft3dft,
        /// <summary>
        /// Item1000ft3psid property
        /// </summary>
          [XmlEnum("1000 ft3/(psi.d)")]
          Item1000ft3psid,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000 ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000 ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000galUK property
        /// </summary>
          [XmlEnum("1000 gal[UK]")]
          Item1000galUK,
        /// <summary>
        /// Item1000galUS property
        /// </summary>
          [XmlEnum("1000 gal[US]")]
          Item1000galUS,
        /// <summary>
        /// Item1000lbfft property
        /// </summary>
          [XmlEnum("1000 lbf.ft")]
          Item1000lbfft,
        /// <summary>
        /// Item1000m3 property
        /// </summary>
          [XmlEnum("1000 m3")]
          Item1000m3,
        /// <summary>
        /// Item1000m3dm property
        /// </summary>
          [XmlEnum("1000 m3/(d.m)")]
          Item1000m3dm,
        /// <summary>
        /// Item1000m3hm property
        /// </summary>
          [XmlEnum("1000 m3/(h.m)")]
          Item1000m3hm,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000 m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000 m3/h")]
          Item1000m3h,
        /// <summary>
        /// Item1000m3m3 property
        /// </summary>
          [XmlEnum("1000 m3/m3")]
          Item1000m3m3,
        /// <summary>
        /// Item1000m4d property
        /// </summary>
          [XmlEnum("1000 m4/d")]
          Item1000m4d,
        /// <summary>
        /// Item1E6acreftbbl property
        /// </summary>
          [XmlEnum("1E-6 acre.ft/bbl")]
          Item1E6acreftbbl,
        /// <summary>
        /// Item1E6bblft3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/ft3")]
          Item1E6bblft3,
        /// <summary>
        /// Item1E6bblm3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/m3")]
          Item1E6bblm3,
        /// <summary>
        /// Item1E6galUS property
        /// </summary>
          [XmlEnum("1E-6 gal[US]")]
          Item1E6galUS,
        /// <summary>
        /// Item1E6m3m3degC property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.degC)")]
          Item1E6m3m3degC,
        /// <summary>
        /// Item1E6m3m3degF property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.degF)")]
          Item1E6m3m3degF,
        /// <summary>
        /// Item1E91ft property
        /// </summary>
          [XmlEnum("1E-9 1/ft")]
          Item1E91ft,
        /// <summary>
        /// Item1E12ft3 property
        /// </summary>
          [XmlEnum("1E12 ft3")]
          Item1E12ft3,
        /// <summary>
        /// Item1E6ft3dbbld property
        /// </summary>
          [XmlEnum("1E6 (ft3/d)/(bbl/d)")]
          Item1E6ft3dbbld,
        /// <summary>
        /// Item1E6bbl property
        /// </summary>
          [XmlEnum("1E6 bbl")]
          Item1E6bbl,
        /// <summary>
        /// Item1E6bblacreft property
        /// </summary>
          [XmlEnum("1E6 bbl/(acre.ft)")]
          Item1E6bblacreft,
        /// <summary>
        /// Item1E6bblacre property
        /// </summary>
          [XmlEnum("1E6 bbl/acre")]
          Item1E6bblacre,
        /// <summary>
        /// Item1E6bbld property
        /// </summary>
          [XmlEnum("1E6 bbl/d")]
          Item1E6bbld,
        /// <summary>
        /// Item1E6BtuIT property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]")]
          Item1E6BtuIT,
        /// <summary>
        /// Item1E6BtuITh property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]/h")]
          Item1E6BtuITh,
        /// <summary>
        /// Item1E6ft3 property
        /// </summary>
          [XmlEnum("1E6 ft3")]
          Item1E6ft3,
        /// <summary>
        /// Item1E6ft3acreft property
        /// </summary>
          [XmlEnum("1E6 ft3/(acre.ft)")]
          Item1E6ft3acreft,
        /// <summary>
        /// Item1E6ft3bbl property
        /// </summary>
          [XmlEnum("1E6 ft3/bbl")]
          Item1E6ft3bbl,
        /// <summary>
        /// Item1E6ft3d property
        /// </summary>
          [XmlEnum("1E6 ft3/d")]
          Item1E6ft3d,
        /// <summary>
        /// Item1E6lbma property
        /// </summary>
          [XmlEnum("1E6 lbm/a")]
          Item1E6lbma,
        /// <summary>
        /// Item1E6m3 property
        /// </summary>
          [XmlEnum("1E6 m3")]
          Item1E6m3,
        /// <summary>
        /// Item1E6m3d property
        /// </summary>
          [XmlEnum("1E6 m3/d")]
          Item1E6m3d,
        /// <summary>
        /// Item1E9bbl property
        /// </summary>
          [XmlEnum("1E9 bbl")]
          Item1E9bbl,
        /// <summary>
        /// Item1E9ft3 property
        /// </summary>
          [XmlEnum("1E9 ft3")]
          Item1E9ft3,
        /// <summary>
        /// Item30ft property
        /// </summary>
          [XmlEnum("30 ft")]
          Item30ft,
        /// <summary>
        /// Item30m property
        /// </summary>
          [XmlEnum("30 m")]
          Item30m,
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// Ah property
        /// </summary>
          [XmlEnum("A.h")]
          Ah,
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A.m2")]
          Am2,
        /// <summary>
        /// As property
        /// </summary>
          [XmlEnum("A.s")]
          As,
        /// <summary>
        /// Askg property
        /// </summary>
          [XmlEnum("A.s/kg")]
          Askg,
        /// <summary>
        /// Asm3 property
        /// </summary>
          [XmlEnum("A.s/m3")]
          Asm3,
        /// <summary>
        /// Acm2 property
        /// </summary>
          [XmlEnum("A/cm2")]
          Acm2,
        /// <summary>
        /// Aft2 property
        /// </summary>
          [XmlEnum("A/ft2")]
          Aft2,
        /// <summary>
        /// Am property
        /// </summary>
          [XmlEnum("A/m")]
          Am,
        /// <summary>
        /// Am21 property
        /// </summary>
          [XmlEnum("A/m2")]
          Am21,
        /// <summary>
        /// Amm property
        /// </summary>
          [XmlEnum("A/mm")]
          Amm,
        /// <summary>
        /// Amm2 property
        /// </summary>
          [XmlEnum("A/mm2")]
          Amm2,
        /// <summary>
        /// at property
        /// </summary>
          [XmlEnum("a[t]")]
          at,
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// aJ property
        /// </summary>
          aJ,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// at1 property
        /// </summary>
          [XmlEnum("at")]
          at1,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft,
        /// <summary>
        /// atmh property
        /// </summary>
          [XmlEnum("atm/h")]
          atmh,
        /// <summary>
        /// atmhm property
        /// </summary>
          [XmlEnum("atm/hm")]
          atmhm,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// BW property
        /// </summary>
          [XmlEnum("B.W")]
          BW,
        /// <summary>
        /// bcm3 property
        /// </summary>
          [XmlEnum("b/cm3")]
          bcm3,
        /// <summary>
        /// Bm property
        /// </summary>
          [XmlEnum("B/m")]
          Bm,
        /// <summary>
        /// BO property
        /// </summary>
          [XmlEnum("B/O")]
          BO,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// barh property
        /// </summary>
          [XmlEnum("bar/h")]
          barh,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// bar2 property
        /// </summary>
          bar2,
        /// <summary>
        /// bar2cP property
        /// </summary>
          [XmlEnum("bar2/cP")]
          bar2cP,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/(acre.ft)")]
          bblacreft,
        /// <summary>
        /// bbldacreft property
        /// </summary>
          [XmlEnum("bbl/(d.acre.ft)")]
          bbldacreft,
        /// <summary>
        /// bbldft property
        /// </summary>
          [XmlEnum("bbl/(d.ft)")]
          bbldft,
        /// <summary>
        /// bblftpsid property
        /// </summary>
          [XmlEnum("bbl/(ft.psi.d)")]
          bblftpsid,
        /// <summary>
        /// bblkPad property
        /// </summary>
          [XmlEnum("bbl/(kPa.d)")]
          bblkPad,
        /// <summary>
        /// bblpsid property
        /// </summary>
          [XmlEnum("bbl/(psi.d)")]
          bblpsid,
        /// <summary>
        /// bblacre property
        /// </summary>
          [XmlEnum("bbl/acre")]
          bblacre,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bbld2 property
        /// </summary>
          [XmlEnum("bbl/d2")]
          bbld2,
        /// <summary>
        /// bblft property
        /// </summary>
          [XmlEnum("bbl/ft")]
          bblft,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bblh property
        /// </summary>
          [XmlEnum("bbl/h")]
          bblh,
        /// <summary>
        /// bblh2 property
        /// </summary>
          [XmlEnum("bbl/h2")]
          bblh2,
        /// <summary>
        /// bblin property
        /// </summary>
          [XmlEnum("bbl/in")]
          bblin,
        /// <summary>
        /// bblm3 property
        /// </summary>
          [XmlEnum("bbl/m3")]
          bblm3,
        /// <summary>
        /// bblmi property
        /// </summary>
          [XmlEnum("bbl/mi")]
          bblmi,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// bblpsi property
        /// </summary>
          [XmlEnum("bbl/psi")]
          bblpsi,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/ton[UK]")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/ton[US]")]
          bbltonUS,
        /// <summary>
        /// Bd property
        /// </summary>
          Bd,
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// bits property
        /// </summary>
          [XmlEnum("bit/s")]
          bits,
        /// <summary>
        /// Bq property
        /// </summary>
          Bq,
        /// <summary>
        /// Bqkg property
        /// </summary>
          [XmlEnum("Bq/kg")]
          Bqkg,
        /// <summary>
        /// BtuIT property
        /// </summary>
          [XmlEnum("Btu[IT]")]
          BtuIT,
        /// <summary>
        /// BtuITinhft2degF property
        /// </summary>
          [XmlEnum("Btu[IT].in/(h.ft2.degF)")]
          BtuITinhft2degF,
        /// <summary>
        /// BtuIThftdegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft.degF)")]
          BtuIThftdegF,
        /// <summary>
        /// BtuIThft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2)")]
          BtuIThft2,
        /// <summary>
        /// BtuIThft2degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.degF)")]
          BtuIThft2degF,
        /// <summary>
        /// BtuIThft2degR property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.degR)")]
          BtuIThft2degR,
        /// <summary>
        /// BtuIThft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3)")]
          BtuIThft3,
        /// <summary>
        /// BtuIThft3degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3.degF)")]
          BtuIThft3degF,
        /// <summary>
        /// BtuIThm2degC property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.m2.degC)")]
          BtuIThm2degC,
        /// <summary>
        /// BtuIThph property
        /// </summary>
          [XmlEnum("Btu[IT]/(hp.h)")]
          BtuIThph,
        /// <summary>
        /// BtuITlbmdegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.degF)")]
          BtuITlbmdegF,
        /// <summary>
        /// BtuITlbmdegR property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.degR)")]
          BtuITlbmdegR,
        /// <summary>
        /// BtuITlbmoldegF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbmol.degF)")]
          BtuITlbmoldegF,
        /// <summary>
        /// BtuITsft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2)")]
          BtuITsft2,
        /// <summary>
        /// BtuITsft2degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2.degF)")]
          BtuITsft2degF,
        /// <summary>
        /// BtuITsft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3)")]
          BtuITsft3,
        /// <summary>
        /// BtuITsft3degF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3.degF)")]
          BtuITsft3degF,
        /// <summary>
        /// BtuITbbl property
        /// </summary>
          [XmlEnum("Btu[IT]/bbl")]
          BtuITbbl,
        /// <summary>
        /// BtuITft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/ft3")]
          BtuITft3,
        /// <summary>
        /// BtuITgalUK property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[UK]")]
          BtuITgalUK,
        /// <summary>
        /// BtuITgalUS property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[US]")]
          BtuITgalUS,
        /// <summary>
        /// BtuITh property
        /// </summary>
          [XmlEnum("Btu[IT]/h")]
          BtuITh,
        /// <summary>
        /// BtuITlbm property
        /// </summary>
          [XmlEnum("Btu[IT]/lbm")]
          BtuITlbm,
        /// <summary>
        /// BtuITlbmol property
        /// </summary>
          [XmlEnum("Btu[IT]/lbmol")]
          BtuITlbmol,
        /// <summary>
        /// BtuITmin property
        /// </summary>
          [XmlEnum("Btu[IT]/min")]
          BtuITmin,
        /// <summary>
        /// BtuITs property
        /// </summary>
          [XmlEnum("Btu[IT]/s")]
          BtuITs,
        /// <summary>
        /// Btuth property
        /// </summary>
          [XmlEnum("Btu[th]")]
          Btuth,
        /// <summary>
        /// BtuUK property
        /// </summary>
          [XmlEnum("Btu[UK]")]
          BtuUK,
        /// <summary>
        /// byte property
        /// </summary>
          @byte,
        /// <summary>
        /// bytes property
        /// </summary>
          [XmlEnum("byte/s")]
          bytes,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// Cm property
        /// </summary>
          [XmlEnum("C.m")]
          Cm,
        /// <summary>
        /// Ccm2 property
        /// </summary>
          [XmlEnum("C/cm2")]
          Ccm2,
        /// <summary>
        /// Ccm3 property
        /// </summary>
          [XmlEnum("C/cm3")]
          Ccm3,
        /// <summary>
        /// Cg property
        /// </summary>
          [XmlEnum("C/g")]
          Cg,
        /// <summary>
        /// Ckg property
        /// </summary>
          [XmlEnum("C/kg")]
          Ckg,
        /// <summary>
        /// Cm2 property
        /// </summary>
          [XmlEnum("C/m2")]
          Cm2,
        /// <summary>
        /// Cm3 property
        /// </summary>
          [XmlEnum("C/m3")]
          Cm3,
        /// <summary>
        /// Cmm2 property
        /// </summary>
          [XmlEnum("C/mm2")]
          Cmm2,
        /// <summary>
        /// Cmm3 property
        /// </summary>
          [XmlEnum("C/mm3")]
          Cmm3,
        /// <summary>
        /// ca property
        /// </summary>
          ca,
        /// <summary>
        /// cA property
        /// </summary>
          cA,
        /// <summary>
        /// calIT property
        /// </summary>
          [XmlEnum("cal[IT]")]
          calIT,
        /// <summary>
        /// calth property
        /// </summary>
          [XmlEnum("cal[th]")]
          calth,
        /// <summary>
        /// calthgK property
        /// </summary>
          [XmlEnum("cal[th]/(g.K)")]
          calthgK,
        /// <summary>
        /// calthhcmdegC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm.degC)")]
          calthhcmdegC,
        /// <summary>
        /// calthhcm2 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2)")]
          calthhcm2,
        /// <summary>
        /// calthhcm2degC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2.degC)")]
          calthhcm2degC,
        /// <summary>
        /// calthhcm3 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm3)")]
          calthhcm3,
        /// <summary>
        /// calthmoldegC property
        /// </summary>
          [XmlEnum("cal[th]/(mol.degC)")]
          calthmoldegC,
        /// <summary>
        /// calthscmdegC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm.degC)")]
          calthscmdegC,
        /// <summary>
        /// calthscm2degC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm2.degC)")]
          calthscm2degC,
        /// <summary>
        /// calthscm3 property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm3)")]
          calthscm3,
        /// <summary>
        /// calthcm3 property
        /// </summary>
          [XmlEnum("cal[th]/cm3")]
          calthcm3,
        /// <summary>
        /// calthg property
        /// </summary>
          [XmlEnum("cal[th]/g")]
          calthg,
        /// <summary>
        /// calthh property
        /// </summary>
          [XmlEnum("cal[th]/h")]
          calthh,
        /// <summary>
        /// calthkg property
        /// </summary>
          [XmlEnum("cal[th]/kg")]
          calthkg,
        /// <summary>
        /// calthlbm property
        /// </summary>
          [XmlEnum("cal[th]/lbm")]
          calthlbm,
        /// <summary>
        /// calthmL property
        /// </summary>
          [XmlEnum("cal[th]/mL")]
          calthmL,
        /// <summary>
        /// calthmm3 property
        /// </summary>
          [XmlEnum("cal[th]/mm3")]
          calthmm3,
        /// <summary>
        /// cC property
        /// </summary>
          cC,
        /// <summary>
        /// ccalth property
        /// </summary>
          [XmlEnum("ccal[th]")]
          ccalth,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cd property
        /// </summary>
          cd,
        /// <summary>
        /// cdm2 property
        /// </summary>
          [XmlEnum("cd/m2")]
          cdm2,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// ceV property
        /// </summary>
          ceV,
        /// <summary>
        /// cF property
        /// </summary>
          cF,
        /// <summary>
        /// cg property
        /// </summary>
          cg,
        /// <summary>
        /// cgauss property
        /// </summary>
          cgauss,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// cGy property
        /// </summary>
          cGy,
        /// <summary>
        /// cH property
        /// </summary>
          cH,
        /// <summary>
        /// chain property
        /// </summary>
          chain,
        /// <summary>
        /// chainBnA property
        /// </summary>
          [XmlEnum("chain[BnA]")]
          chainBnA,
        /// <summary>
        /// chainBnB property
        /// </summary>
          [XmlEnum("chain[BnB]")]
          chainBnB,
        /// <summary>
        /// chainCla property
        /// </summary>
          [XmlEnum("chain[Cla]")]
          chainCla,
        /// <summary>
        /// chainInd37 property
        /// </summary>
          [XmlEnum("chain[Ind37]")]
          chainInd37,
        /// <summary>
        /// chainSe property
        /// </summary>
          [XmlEnum("chain[Se]")]
          chainSe,
        /// <summary>
        /// chainSeT property
        /// </summary>
          [XmlEnum("chain[SeT]")]
          chainSeT,
        /// <summary>
        /// chainUS property
        /// </summary>
          [XmlEnum("chain[US]")]
          chainUS,
        /// <summary>
        /// cHz property
        /// </summary>
          cHz,
        /// <summary>
        /// Ci property
        /// </summary>
          Ci,
        /// <summary>
        /// cJ property
        /// </summary>
          cJ,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// cm2g property
        /// </summary>
          [XmlEnum("cm2/g")]
          cm2g,
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3L property
        /// </summary>
          [XmlEnum("cm3/L")]
          cm3L,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// cm4 property
        /// </summary>
          cm4,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O[4degC]")]
          cmH2O4degC,
        /// <summary>
        /// cN property
        /// </summary>
          cN,
        /// <summary>
        /// cohm property
        /// </summary>
          cohm,
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// cPa property
        /// </summary>
          cPa,
        /// <summary>
        /// crd property
        /// </summary>
          crd,
        /// <summary>
        /// cS property
        /// </summary>
          cS,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// cSt property
        /// </summary>
          cSt,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cT property
        /// </summary>
          cT,
        /// <summary>
        /// cu property
        /// </summary>
          cu,
        /// <summary>
        /// cV property
        /// </summary>
          cV,
        /// <summary>
        /// cW property
        /// </summary>
          cW,
        /// <summary>
        /// cWb property
        /// </summary>
          cWb,
        /// <summary>
        /// cwtUK property
        /// </summary>
          [XmlEnum("cwt[UK]")]
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          [XmlEnum("cwt[US]")]
          cwtUS,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// Dft property
        /// </summary>
          [XmlEnum("D.ft")]
          Dft,
        /// <summary>
        /// Dm property
        /// </summary>
          [XmlEnum("D.m")]
          Dm,
        /// <summary>
        /// DPas property
        /// </summary>
          [XmlEnum("D/(Pa.s)")]
          DPas,
        /// <summary>
        /// dbbl property
        /// </summary>
          [XmlEnum("d/bbl")]
          dbbl,
        /// <summary>
        /// DcP property
        /// </summary>
          [XmlEnum("D/cP")]
          DcP,
        /// <summary>
        /// dft3 property
        /// </summary>
          [XmlEnum("d/ft3")]
          dft3,
        /// <summary>
        /// dm3 property
        /// </summary>
          [XmlEnum("d/m3")]
          dm3,
        /// <summary>
        /// DAPI property
        /// </summary>
          [XmlEnum("D[API]")]
          DAPI,
        /// <summary>
        /// dA property
        /// </summary>
          dA,
        /// <summary>
        /// dam property
        /// </summary>
          dam,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI,
        /// <summary>
        /// dB property
        /// </summary>
          dB,
        /// <summary>
        /// dBMW property
        /// </summary>
          [XmlEnum("dB.MW")]
          dBMW,
        /// <summary>
        /// dBmW property
        /// </summary>
          [XmlEnum("dB.mW")]
          dBmW,
        /// <summary>
        /// dBW property
        /// </summary>
          [XmlEnum("dB.W")]
          dBW,
        /// <summary>
        /// dBft property
        /// </summary>
          [XmlEnum("dB/ft")]
          dBft,
        /// <summary>
        /// dBkm property
        /// </summary>
          [XmlEnum("dB/km")]
          dBkm,
        /// <summary>
        /// dBm property
        /// </summary>
          [XmlEnum("dB/m")]
          dBm,
        /// <summary>
        /// dBO property
        /// </summary>
          [XmlEnum("dB/O")]
          dBO,
        /// <summary>
        /// dC property
        /// </summary>
          dC,
        /// <summary>
        /// dcalth property
        /// </summary>
          [XmlEnum("dcal[th]")]
          dcalth,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degCm2hkcalth property
        /// </summary>
          [XmlEnum("degC.m2.h/kcal[th]")]
          degCm2hkcalth,
        /// <summary>
        /// degCft property
        /// </summary>
          [XmlEnum("degC/ft")]
          degCft,
        /// <summary>
        /// degCh property
        /// </summary>
          [XmlEnum("degC/h")]
          degCh,
        /// <summary>
        /// degChm property
        /// </summary>
          [XmlEnum("degC/hm")]
          degChm,
        /// <summary>
        /// degCkm property
        /// </summary>
          [XmlEnum("degC/km")]
          degCkm,
        /// <summary>
        /// degCkPa property
        /// </summary>
          [XmlEnum("degC/kPa")]
          degCkPa,
        /// <summary>
        /// degCm property
        /// </summary>
          [XmlEnum("degC/m")]
          degCm,
        /// <summary>
        /// degCmin property
        /// </summary>
          [XmlEnum("degC/min")]
          degCmin,
        /// <summary>
        /// degCs property
        /// </summary>
          [XmlEnum("degC/s")]
          degCs,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degFft2hBtuIT property
        /// </summary>
          [XmlEnum("degF.ft2.h/Btu[IT]")]
          degFft2hBtuIT,
        /// <summary>
        /// degFft property
        /// </summary>
          [XmlEnum("degF/ft")]
          degFft,
        /// <summary>
        /// degFh property
        /// </summary>
          [XmlEnum("degF/h")]
          degFh,
        /// <summary>
        /// degFm property
        /// </summary>
          [XmlEnum("degF/m")]
          degFm,
        /// <summary>
        /// degFmin property
        /// </summary>
          [XmlEnum("degF/min")]
          degFmin,
        /// <summary>
        /// degFpsi property
        /// </summary>
          [XmlEnum("degF/psi")]
          degFpsi,
        /// <summary>
        /// degFs property
        /// </summary>
          [XmlEnum("degF/s")]
          degFs,
        /// <summary>
        /// degR property
        /// </summary>
          degR,
        /// <summary>
        /// dEuc property
        /// </summary>
          dEuc,
        /// <summary>
        /// deV property
        /// </summary>
          deV,
        /// <summary>
        /// dF property
        /// </summary>
          dF,
        /// <summary>
        /// dgauss property
        /// </summary>
          dgauss,
        /// <summary>
        /// dGy property
        /// </summary>
          dGy,
        /// <summary>
        /// dH property
        /// </summary>
          dH,
        /// <summary>
        /// dHz property
        /// </summary>
          dHz,
        /// <summary>
        /// dJ property
        /// </summary>
          dJ,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// dm31 property
        /// </summary>
          [XmlEnum("dm3")]
          dm31,
        /// <summary>
        /// dm3kWh property
        /// </summary>
          [XmlEnum("dm3/(kW.h)")]
          dm3kWh,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3kmol property
        /// </summary>
          [XmlEnum("dm3/kmol")]
          dm3kmol,
        /// <summary>
        /// dm3m property
        /// </summary>
          [XmlEnum("dm3/m")]
          dm3m,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// dm3MJ property
        /// </summary>
          [XmlEnum("dm3/MJ")]
          dm3MJ,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// dm3s2 property
        /// </summary>
          [XmlEnum("dm3/s2")]
          dm3s2,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// dN property
        /// </summary>
          dN,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// dohm property
        /// </summary>
          dohm,
        /// <summary>
        /// dP property
        /// </summary>
          dP,
        /// <summary>
        /// dPa property
        /// </summary>
          dPa,
        /// <summary>
        /// drd property
        /// </summary>
          drd,
        /// <summary>
        /// ds property
        /// </summary>
          ds,
        /// <summary>
        /// dS property
        /// </summary>
          dS,
        /// <summary>
        /// dT property
        /// </summary>
          dT,
        /// <summary>
        /// dV property
        /// </summary>
          dV,
        /// <summary>
        /// dW property
        /// </summary>
          dW,
        /// <summary>
        /// dWb property
        /// </summary>
          dWb,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne.cm2")]
          dynecm2,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// dynecm21 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm21,
        /// <summary>
        /// EA property
        /// </summary>
          EA,
        /// <summary>
        /// Eat property
        /// </summary>
          [XmlEnum("Ea[t]")]
          Eat,
        /// <summary>
        /// EC property
        /// </summary>
          EC,
        /// <summary>
        /// Ecalth property
        /// </summary>
          [XmlEnum("Ecal[th]")]
          Ecalth,
        /// <summary>
        /// EEuc property
        /// </summary>
          EEuc,
        /// <summary>
        /// EeV property
        /// </summary>
          EeV,
        /// <summary>
        /// EF property
        /// </summary>
          EF,
        /// <summary>
        /// Eg property
        /// </summary>
          Eg,
        /// <summary>
        /// Egauss property
        /// </summary>
          Egauss,
        /// <summary>
        /// EGy property
        /// </summary>
          EGy,
        /// <summary>
        /// EH property
        /// </summary>
          EH,
        /// <summary>
        /// EHz property
        /// </summary>
          EHz,
        /// <summary>
        /// EJ property
        /// </summary>
          EJ,
        /// <summary>
        /// EJa property
        /// </summary>
          [XmlEnum("EJ/a")]
          EJa,
        /// <summary>
        /// Em property
        /// </summary>
          Em,
        /// <summary>
        /// EN property
        /// </summary>
          EN,
        /// <summary>
        /// Eohm property
        /// </summary>
          Eohm,
        /// <summary>
        /// EP property
        /// </summary>
          EP,
        /// <summary>
        /// EPa property
        /// </summary>
          EPa,
        /// <summary>
        /// Erd property
        /// </summary>
          Erd,
        /// <summary>
        /// erg property
        /// </summary>
          erg,
        /// <summary>
        /// erga property
        /// </summary>
          [XmlEnum("erg/a")]
          erga,
        /// <summary>
        /// ergcm2 property
        /// </summary>
          [XmlEnum("erg/cm2")]
          ergcm2,
        /// <summary>
        /// ergcm3 property
        /// </summary>
          [XmlEnum("erg/cm3")]
          ergcm3,
        /// <summary>
        /// ergg property
        /// </summary>
          [XmlEnum("erg/g")]
          ergg,
        /// <summary>
        /// ergkg property
        /// </summary>
          [XmlEnum("erg/kg")]
          ergkg,
        /// <summary>
        /// ergm3 property
        /// </summary>
          [XmlEnum("erg/m3")]
          ergm3,
        /// <summary>
        /// ES property
        /// </summary>
          ES,
        /// <summary>
        /// ET property
        /// </summary>
          ET,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// eV property
        /// </summary>
          eV,
        /// <summary>
        /// EW property
        /// </summary>
          EW,
        /// <summary>
        /// EWb property
        /// </summary>
          EWb,
        /// <summary>
        /// F property
        /// </summary>
          F,
        /// <summary>
        /// Fm property
        /// </summary>
          [XmlEnum("F/m")]
          Fm,
        /// <summary>
        /// fa property
        /// </summary>
          fa,
        /// <summary>
        /// fA property
        /// </summary>
          fA,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fC property
        /// </summary>
          fC,
        /// <summary>
        /// fcalth property
        /// </summary>
          [XmlEnum("fcal[th]")]
          fcalth,
        /// <summary>
        /// fEuc property
        /// </summary>
          fEuc,
        /// <summary>
        /// feV property
        /// </summary>
          feV,
        /// <summary>
        /// fF property
        /// </summary>
          fF,
        /// <summary>
        /// fg property
        /// </summary>
          fg,
        /// <summary>
        /// fgauss property
        /// </summary>
          fgauss,
        /// <summary>
        /// fGy property
        /// </summary>
          fGy,
        /// <summary>
        /// fH property
        /// </summary>
          fH,
        /// <summary>
        /// fHz property
        /// </summary>
          fHz,
        /// <summary>
        /// fJ property
        /// </summary>
          fJ,
        /// <summary>
        /// flozUK property
        /// </summary>
          [XmlEnum("floz[UK]")]
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          [XmlEnum("floz[US]")]
          flozUS,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// fN property
        /// </summary>
          fN,
        /// <summary>
        /// fohm property
        /// </summary>
          fohm,
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// footcandles property
        /// </summary>
          [XmlEnum("footcandle.s")]
          footcandles,
        /// <summary>
        /// fP property
        /// </summary>
          fP,
        /// <summary>
        /// fPa property
        /// </summary>
          fPa,
        /// <summary>
        /// frd property
        /// </summary>
          frd,
        /// <summary>
        /// fS property
        /// </summary>
          fS,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// fT property
        /// </summary>
          fT,
        /// <summary>
        /// ftbbl property
        /// </summary>
          [XmlEnum("ft/bbl")]
          ftbbl,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// ftdegF property
        /// </summary>
          [XmlEnum("ft/degF")]
          ftdegF,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftft3 property
        /// </summary>
          [XmlEnum("ft/ft3")]
          ftft3,
        /// <summary>
        /// ftgalUS property
        /// </summary>
          [XmlEnum("ft/gal[US]")]
          ftgalUS,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftlbm property
        /// </summary>
          [XmlEnum("ft/lbm")]
          ftlbm,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// ftpsi property
        /// </summary>
          [XmlEnum("ft/psi")]
          ftpsi,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ftBnA property
        /// </summary>
          [XmlEnum("ft[BnA]")]
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          [XmlEnum("ft[BnB]")]
          ftBnB,
        /// <summary>
        /// ftBr36 property
        /// </summary>
          [XmlEnum("ft[Br36]")]
          ftBr36,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ft[Br65]")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          [XmlEnum("ft[Cla]")]
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          [XmlEnum("ft[GC]")]
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          [XmlEnum("ft[Ind]")]
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ft[Ind37]")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ft[Ind62]")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ft[Ind75]")]
          ftInd75,
        /// <summary>
        /// ftSe property
        /// </summary>
          [XmlEnum("ft[Se]")]
          ftSe,
        /// <summary>
        /// ftSeT property
        /// </summary>
          [XmlEnum("ft[SeT]")]
          ftSeT,
        /// <summary>
        /// ftUS property
        /// </summary>
          [XmlEnum("ft[US]")]
          ftUS,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2in3 property
        /// </summary>
          [XmlEnum("ft2/in3")]
          ft2in3,
        /// <summary>
        /// ft2lbm property
        /// </summary>
          [XmlEnum("ft2/lbm")]
          ft2lbm,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// ft3dft property
        /// </summary>
          [XmlEnum("ft3/(d.ft)")]
          ft3dft,
        /// <summary>
        /// ft3ftpsid property
        /// </summary>
          [XmlEnum("ft3/(ft.psi.d)")]
          ft3ftpsid,
        /// <summary>
        /// ft3minft2 property
        /// </summary>
          [XmlEnum("ft3/(min.ft2)")]
          ft3minft2,
        /// <summary>
        /// ft3sft2 property
        /// </summary>
          [XmlEnum("ft3/(s.ft2)")]
          ft3sft2,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3d2 property
        /// </summary>
          [XmlEnum("ft3/d2")]
          ft3d2,
        /// <summary>
        /// ft3ft property
        /// </summary>
          [XmlEnum("ft3/ft")]
          ft3ft,
        /// <summary>
        /// ft3ft2 property
        /// </summary>
          [XmlEnum("ft3/ft2")]
          ft3ft2,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3h2 property
        /// </summary>
          [XmlEnum("ft3/h2")]
          ft3h2,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3lbmol property
        /// </summary>
          [XmlEnum("ft3/lbmol")]
          ft3lbmol,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3min2 property
        /// </summary>
          [XmlEnum("ft3/min2")]
          ft3min2,
        /// <summary>
        /// ft3rad property
        /// </summary>
          [XmlEnum("ft3/rad")]
          ft3rad,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// ft3s2 property
        /// </summary>
          [XmlEnum("ft3/s2")]
          ft3s2,
        /// <summary>
        /// ft3sack94lbm property
        /// </summary>
          [XmlEnum("ft3/sack[94lbm]")]
          ft3sack94lbm,
        /// <summary>
        /// furUS property
        /// </summary>
          [XmlEnum("fur[US]")]
          furUS,
        /// <summary>
        /// fV property
        /// </summary>
          fV,
        /// <summary>
        /// fW property
        /// </summary>
          fW,
        /// <summary>
        /// fWb property
        /// </summary>
          fWb,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// gftcm3s property
        /// </summary>
          [XmlEnum("g.ft/(cm3.s)")]
          gftcm3s,
        /// <summary>
        /// gmcm3s property
        /// </summary>
          [XmlEnum("g.m/(cm3.s)")]
          gmcm3s,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gcm4 property
        /// </summary>
          [XmlEnum("g/cm4")]
          gcm4,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/gal[UK]")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/gal[US]")]
          ggalUS,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// gmol property
        /// </summary>
          [XmlEnum("g/mol")]
          gmol,
        /// <summary>
        /// gs property
        /// </summary>
          [XmlEnum("g/s")]
          gs,
        /// <summary>
        /// gt property
        /// </summary>
          [XmlEnum("g/t")]
          gt,
        /// <summary>
        /// GA property
        /// </summary>
          GA,
        /// <summary>
        /// Gat property
        /// </summary>
          [XmlEnum("Ga[t]")]
          Gat,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// galUK property
        /// </summary>
          [XmlEnum("gal[UK]")]
          galUK,
        /// <summary>
        /// galUKhft property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft)")]
          galUKhft,
        /// <summary>
        /// galUKhft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft2)")]
          galUKhft2,
        /// <summary>
        /// galUKhin property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in)")]
          galUKhin,
        /// <summary>
        /// galUKhin2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in2)")]
          galUKhin2,
        /// <summary>
        /// galUKminft property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft)")]
          galUKminft,
        /// <summary>
        /// galUKminft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft2)")]
          galUKminft2,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("gal[UK]/d")]
          galUKd,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("gal[UK]/ft3")]
          galUKft3,
        /// <summary>
        /// galUKh property
        /// </summary>
          [XmlEnum("gal[UK]/h")]
          galUKh,
        /// <summary>
        /// galUKh2 property
        /// </summary>
          [XmlEnum("gal[UK]/h2")]
          galUKh2,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("gal[UK]/lbm")]
          galUKlbm,
        /// <summary>
        /// galUKmi property
        /// </summary>
          [XmlEnum("gal[UK]/mi")]
          galUKmi,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("gal[UK]/min")]
          galUKmin,
        /// <summary>
        /// galUKmin2 property
        /// </summary>
          [XmlEnum("gal[UK]/min2")]
          galUKmin2,
        /// <summary>
        /// galUS property
        /// </summary>
          [XmlEnum("gal[US]")]
          galUS,
        /// <summary>
        /// galUShft property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft)")]
          galUShft,
        /// <summary>
        /// galUShft2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft2)")]
          galUShft2,
        /// <summary>
        /// galUShin property
        /// </summary>
          [XmlEnum("gal[US]/(h.in)")]
          galUShin,
        /// <summary>
        /// galUShin2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.in2)")]
          galUShin2,
        /// <summary>
        /// galUSminft property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft)")]
          galUSminft,
        /// <summary>
        /// galUSminft2 property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft2)")]
          galUSminft2,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("gal[US]/bbl")]
          galUSbbl,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("gal[US]/d")]
          galUSd,
        /// <summary>
        /// galUSft property
        /// </summary>
          [XmlEnum("gal[US]/ft")]
          galUSft,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("gal[US]/ft3")]
          galUSft3,
        /// <summary>
        /// galUSh property
        /// </summary>
          [XmlEnum("gal[US]/h")]
          galUSh,
        /// <summary>
        /// galUSh2 property
        /// </summary>
          [XmlEnum("gal[US]/h2")]
          galUSh2,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("gal[US]/lbm")]
          galUSlbm,
        /// <summary>
        /// galUSmi property
        /// </summary>
          [XmlEnum("gal[US]/mi")]
          galUSmi,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("gal[US]/min")]
          galUSmin,
        /// <summary>
        /// galUSmin2 property
        /// </summary>
          [XmlEnum("gal[US]/min2")]
          galUSmin2,
        /// <summary>
        /// galUSsack94lbm property
        /// </summary>
          [XmlEnum("gal[US]/sack[94lbm]")]
          galUSsack94lbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("gal[US]/ton[UK]")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("gal[US]/ton[US]")]
          galUStonUS,
        /// <summary>
        /// gAPI property
        /// </summary>
          gAPI,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// gausscm property
        /// </summary>
          [XmlEnum("gauss/cm")]
          gausscm,
        /// <summary>
        /// GBq property
        /// </summary>
          GBq,
        /// <summary>
        /// GC property
        /// </summary>
          GC,
        /// <summary>
        /// Gcalth property
        /// </summary>
          [XmlEnum("Gcal[th]")]
          Gcalth,
        /// <summary>
        /// GEuc property
        /// </summary>
          GEuc,
        /// <summary>
        /// GeV property
        /// </summary>
          GeV,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// GF property
        /// </summary>
          GF,
        /// <summary>
        /// Gg property
        /// </summary>
          Gg,
        /// <summary>
        /// Ggauss property
        /// </summary>
          Ggauss,
        /// <summary>
        /// GGy property
        /// </summary>
          GGy,
        /// <summary>
        /// GH property
        /// </summary>
          GH,
        /// <summary>
        /// GHz property
        /// </summary>
          GHz,
        /// <summary>
        /// GJ property
        /// </summary>
          GJ,
        /// <summary>
        /// Gm property
        /// </summary>
          Gm,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// GN property
        /// </summary>
          GN,
        /// <summary>
        /// Gohm property
        /// </summary>
          Gohm,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// GP property
        /// </summary>
          GP,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// GPa2 property
        /// </summary>
          GPa2,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/gal[US]")]
          graingalUS,
        /// <summary>
        /// Grd property
        /// </summary>
          Grd,
        /// <summary>
        /// GS property
        /// </summary>
          GS,
        /// <summary>
        /// GT property
        /// </summary>
          GT,
        /// <summary>
        /// GV property
        /// </summary>
          GV,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// GWh property
        /// </summary>
          [XmlEnum("GW.h")]
          GWh,
        /// <summary>
        /// GWb property
        /// </summary>
          GWb,
        /// <summary>
        /// Gy property
        /// </summary>
          Gy,
        /// <summary>
        /// H property
        /// </summary>
          H,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// hft3 property
        /// </summary>
          [XmlEnum("h/ft3")]
          hft3,
        /// <summary>
        /// hkm property
        /// </summary>
          [XmlEnum("h/km")]
          hkm,
        /// <summary>
        /// Hm property
        /// </summary>
          [XmlEnum("H/m")]
          Hm,
        /// <summary>
        /// hm3 property
        /// </summary>
          [XmlEnum("h/m3")]
          hm3,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// hg property
        /// </summary>
          hg,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// hm property
        /// </summary>
          hm,
        /// <summary>
        /// hN property
        /// </summary>
          hN,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// hph property
        /// </summary>
          [XmlEnum("hp.h")]
          hph,
        /// <summary>
        /// hphbbl property
        /// </summary>
          [XmlEnum("hp.h/bbl")]
          hphbbl,
        /// <summary>
        /// hphlbm property
        /// </summary>
          [XmlEnum("hp.h/lbm")]
          hphlbm,
        /// <summary>
        /// hpft3 property
        /// </summary>
          [XmlEnum("hp/ft3")]
          hpft3,
        /// <summary>
        /// hpin2 property
        /// </summary>
          [XmlEnum("hp/in2")]
          hpin2,
        /// <summary>
        /// hpelec property
        /// </summary>
          [XmlEnum("hp[elec]")]
          hpelec,
        /// <summary>
        /// hphyd property
        /// </summary>
          [XmlEnum("hp[hyd]")]
          hphyd,
        /// <summary>
        /// hphydin2 property
        /// </summary>
          [XmlEnum("hp[hyd]/in2")]
          hphydin2,
        /// <summary>
        /// hpmetric property
        /// </summary>
          [XmlEnum("hp[metric]")]
          hpmetric,
        /// <summary>
        /// hpmetrich property
        /// </summary>
          [XmlEnum("hp[metric].h")]
          hpmetrich,
        /// <summary>
        /// hs property
        /// </summary>
          hs,
        /// <summary>
        /// Hz property
        /// </summary>
          Hz,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// inindegF property
        /// </summary>
          [XmlEnum("in/(in.degF)")]
          inindegF,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// ins2 property
        /// </summary>
          [XmlEnum("in/s2")]
          ins2,
        /// <summary>
        /// inUS property
        /// </summary>
          [XmlEnum("in[US]")]
          inUS,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// in3ft property
        /// </summary>
          [XmlEnum("in3/ft")]
          in3ft,
        /// <summary>
        /// in4 property
        /// </summary>
          in4,
        /// <summary>
        /// inH2O39degF property
        /// </summary>
          [XmlEnum("inH2O[39degF]")]
          inH2O39degF,
        /// <summary>
        /// inH2O60degF property
        /// </summary>
          [XmlEnum("inH2O[60degF]")]
          inH2O60degF,
        /// <summary>
        /// inHg32degF property
        /// </summary>
          [XmlEnum("inHg[32degF]")]
          inHg32degF,
        /// <summary>
        /// inHg60degF property
        /// </summary>
          [XmlEnum("inHg[60degF]")]
          inHg60degF,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// Jmsm2K property
        /// </summary>
          [XmlEnum("J.m/(s.m2.K)")]
          Jmsm2K,
        /// <summary>
        /// Jmm2 property
        /// </summary>
          [XmlEnum("J.m/m2")]
          Jmm2,
        /// <summary>
        /// JgK property
        /// </summary>
          [XmlEnum("J/(g.K)")]
          JgK,
        /// <summary>
        /// JkgK property
        /// </summary>
          [XmlEnum("J/(kg.K)")]
          JkgK,
        /// <summary>
        /// JmolK property
        /// </summary>
          [XmlEnum("J/(mol.K)")]
          JmolK,
        /// <summary>
        /// Jsm2degC property
        /// </summary>
          [XmlEnum("J/(s.m2.degC)")]
          Jsm2degC,
        /// <summary>
        /// Jcm2 property
        /// </summary>
          [XmlEnum("J/cm2")]
          Jcm2,
        /// <summary>
        /// Jdm3 property
        /// </summary>
          [XmlEnum("J/dm3")]
          Jdm3,
        /// <summary>
        /// Jg property
        /// </summary>
          [XmlEnum("J/g")]
          Jg,
        /// <summary>
        /// JK property
        /// </summary>
          [XmlEnum("J/K")]
          JK,
        /// <summary>
        /// Jkg property
        /// </summary>
          [XmlEnum("J/kg")]
          Jkg,
        /// <summary>
        /// Jm property
        /// </summary>
          [XmlEnum("J/m")]
          Jm,
        /// <summary>
        /// Jm2 property
        /// </summary>
          [XmlEnum("J/m2")]
          Jm2,
        /// <summary>
        /// Jm3 property
        /// </summary>
          [XmlEnum("J/m3")]
          Jm3,
        /// <summary>
        /// Jmol property
        /// </summary>
          [XmlEnum("J/mol")]
          Jmol,
        /// <summary>
        /// Js property
        /// </summary>
          [XmlEnum("J/s")]
          Js,
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// Km2kW property
        /// </summary>
          [XmlEnum("K.m2/kW")]
          Km2kW,
        /// <summary>
        /// Km2W property
        /// </summary>
          [XmlEnum("K.m2/W")]
          Km2W,
        /// <summary>
        /// Kkm property
        /// </summary>
          [XmlEnum("K/km")]
          Kkm,
        /// <summary>
        /// Km property
        /// </summary>
          [XmlEnum("K/m")]
          Km,
        /// <summary>
        /// KPa property
        /// </summary>
          [XmlEnum("K/Pa")]
          KPa,
        /// <summary>
        /// Ks property
        /// </summary>
          [XmlEnum("K/s")]
          Ks,
        /// <summary>
        /// KW property
        /// </summary>
          [XmlEnum("K/W")]
          KW,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// kat property
        /// </summary>
          [XmlEnum("ka[t]")]
          kat,
        /// <summary>
        /// kC property
        /// </summary>
          kC,
        /// <summary>
        /// kcalth property
        /// </summary>
          [XmlEnum("kcal[th]")]
          kcalth,
        /// <summary>
        /// kcalthmcm2 property
        /// </summary>
          [XmlEnum("kcal[th].m/cm2")]
          kcalthmcm2,
        /// <summary>
        /// kcalthhmdegC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m.degC)")]
          kcalthhmdegC,
        /// <summary>
        /// kcalthhm2degC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m2.degC)")]
          kcalthhm2degC,
        /// <summary>
        /// kcalthkgdegC property
        /// </summary>
          [XmlEnum("kcal[th]/(kg.degC)")]
          kcalthkgdegC,
        /// <summary>
        /// kcalthcm3 property
        /// </summary>
          [XmlEnum("kcal[th]/cm3")]
          kcalthcm3,
        /// <summary>
        /// kcalthg property
        /// </summary>
          [XmlEnum("kcal[th]/g")]
          kcalthg,
        /// <summary>
        /// kcalthh property
        /// </summary>
          [XmlEnum("kcal[th]/h")]
          kcalthh,
        /// <summary>
        /// kcalthkg property
        /// </summary>
          [XmlEnum("kcal[th]/kg")]
          kcalthkg,
        /// <summary>
        /// kcalthm3 property
        /// </summary>
          [XmlEnum("kcal[th]/m3")]
          kcalthm3,
        /// <summary>
        /// kcalthmol property
        /// </summary>
          [XmlEnum("kcal[th]/mol")]
          kcalthmol,
        /// <summary>
        /// kcd property
        /// </summary>
          kcd,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kEuc property
        /// </summary>
          kEuc,
        /// <summary>
        /// keV property
        /// </summary>
          keV,
        /// <summary>
        /// kF property
        /// </summary>
          kF,
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg.m")]
          kgm,
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2,
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg.m/s")]
          kgms,
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg.m2")]
          kgm2,
        /// <summary>
        /// kgkWh property
        /// </summary>
          [XmlEnum("kg/(kW.h)")]
          kgkWh,
        /// <summary>
        /// kgms1 property
        /// </summary>
          [XmlEnum("kg/(m.s)")]
          kgms1,
        /// <summary>
        /// kgm2s property
        /// </summary>
          [XmlEnum("kg/(m2.s)")]
          kgm2s,
        /// <summary>
        /// kgd property
        /// </summary>
          [XmlEnum("kg/d")]
          kgd,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgdm4 property
        /// </summary>
          [XmlEnum("kg/dm4")]
          kgdm4,
        /// <summary>
        /// kgh property
        /// </summary>
          [XmlEnum("kg/h")]
          kgh,
        /// <summary>
        /// kgJ property
        /// </summary>
          [XmlEnum("kg/J")]
          kgJ,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// kgm1 property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm1,
        /// <summary>
        /// kgm21 property
        /// </summary>
          [XmlEnum("kg/m2")]
          kgm21,
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// kgm4 property
        /// </summary>
          [XmlEnum("kg/m4")]
          kgm4,
        /// <summary>
        /// kgmin property
        /// </summary>
          [XmlEnum("kg/min")]
          kgmin,
        /// <summary>
        /// kgMJ property
        /// </summary>
          [XmlEnum("kg/MJ")]
          kgMJ,
        /// <summary>
        /// kgmol property
        /// </summary>
          [XmlEnum("kg/mol")]
          kgmol,
        /// <summary>
        /// kgs property
        /// </summary>
          [XmlEnum("kg/s")]
          kgs,
        /// <summary>
        /// kgsack94lbm property
        /// </summary>
          [XmlEnum("kg/sack[94lbm]")]
          kgsack94lbm,
        /// <summary>
        /// kgt property
        /// </summary>
          [XmlEnum("kg/t")]
          kgt,
        /// <summary>
        /// kgauss property
        /// </summary>
          kgauss,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kgfmcm2 property
        /// </summary>
          [XmlEnum("kgf.m/cm2")]
          kgfmcm2,
        /// <summary>
        /// kgfmm property
        /// </summary>
          [XmlEnum("kgf.m/m")]
          kgfmm,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf.m2")]
          kgfm2,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfkgf property
        /// </summary>
          [XmlEnum("kgf/kgf")]
          kgfkgf,
        /// <summary>
        /// kgfm21 property
        /// </summary>
          [XmlEnum("kgf/m2")]
          kgfm21,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kGy property
        /// </summary>
          kGy,
        /// <summary>
        /// kH property
        /// </summary>
          kH,
        /// <summary>
        /// kHz property
        /// </summary>
          kHz,
        /// <summary>
        /// Kibyte property
        /// </summary>
          Kibyte,
        /// <summary>
        /// kJ property
        /// </summary>
          kJ,
        /// <summary>
        /// kJmhm2K property
        /// </summary>
          [XmlEnum("kJ.m/(h.m2.K)")]
          kJmhm2K,
        /// <summary>
        /// kJhm2K property
        /// </summary>
          [XmlEnum("kJ/(h.m2.K)")]
          kJhm2K,
        /// <summary>
        /// kJkgK property
        /// </summary>
          [XmlEnum("kJ/(kg.K)")]
          kJkgK,
        /// <summary>
        /// kJkmolK property
        /// </summary>
          [XmlEnum("kJ/(kmol.K)")]
          kJkmolK,
        /// <summary>
        /// kJdm3 property
        /// </summary>
          [XmlEnum("kJ/dm3")]
          kJdm3,
        /// <summary>
        /// kJkg property
        /// </summary>
          [XmlEnum("kJ/kg")]
          kJkg,
        /// <summary>
        /// kJkmol property
        /// </summary>
          [XmlEnum("kJ/kmol")]
          kJkmol,
        /// <summary>
        /// kJm3 property
        /// </summary>
          [XmlEnum("kJ/m3")]
          kJm3,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// klx property
        /// </summary>
          klx,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// kmdm3 property
        /// </summary>
          [XmlEnum("km/dm3")]
          kmdm3,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kmL property
        /// </summary>
          [XmlEnum("km/L")]
          kmL,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// kmol property
        /// </summary>
          kmol,
        /// <summary>
        /// kmolh property
        /// </summary>
          [XmlEnum("kmol/h")]
          kmolh,
        /// <summary>
        /// kmolm3 property
        /// </summary>
          [XmlEnum("kmol/m3")]
          kmolm3,
        /// <summary>
        /// kmols property
        /// </summary>
          [XmlEnum("kmol/s")]
          kmols,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN.m2")]
          kNm2,
        /// <summary>
        /// kNm1 property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm1,
        /// <summary>
        /// kNm21 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm21,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// kohm property
        /// </summary>
          kohm,
        /// <summary>
        /// kohmm property
        /// </summary>
          [XmlEnum("kohm.m")]
          kohmm,
        /// <summary>
        /// kP property
        /// </summary>
          kP,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kPasm property
        /// </summary>
          [XmlEnum("kPa.s/m")]
          kPasm,
        /// <summary>
        /// kPah property
        /// </summary>
          [XmlEnum("kPa/h")]
          kPah,
        /// <summary>
        /// kPahm property
        /// </summary>
          [XmlEnum("kPa/hm")]
          kPahm,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// kPamin property
        /// </summary>
          [XmlEnum("kPa/min")]
          kPamin,
        /// <summary>
        /// kPa2 property
        /// </summary>
          kPa2,
        /// <summary>
        /// kPa2cP property
        /// </summary>
          [XmlEnum("kPa2/cP")]
          kPa2cP,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// kpsi2 property
        /// </summary>
          kpsi2,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// krd property
        /// </summary>
          krd,
        /// <summary>
        /// kS property
        /// </summary>
          kS,
        /// <summary>
        /// kSm property
        /// </summary>
          [XmlEnum("kS/m")]
          kSm,
        /// <summary>
        /// kT property
        /// </summary>
          kT,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// kWh property
        /// </summary>
          [XmlEnum("kW.h")]
          kWh,
        /// <summary>
        /// kWhkgdegC property
        /// </summary>
          [XmlEnum("kW.h/(kg.degC)")]
          kWhkgdegC,
        /// <summary>
        /// kWhdm3 property
        /// </summary>
          [XmlEnum("kW.h/dm3")]
          kWhdm3,
        /// <summary>
        /// kWhkg property
        /// </summary>
          [XmlEnum("kW.h/kg")]
          kWhkg,
        /// <summary>
        /// kWhm3 property
        /// </summary>
          [XmlEnum("kW.h/m3")]
          kWhm3,
        /// <summary>
        /// kWm2K property
        /// </summary>
          [XmlEnum("kW/(m2.K)")]
          kWm2K,
        /// <summary>
        /// kWm3K property
        /// </summary>
          [XmlEnum("kW/(m3.K)")]
          kWm3K,
        /// <summary>
        /// kWcm2 property
        /// </summary>
          [XmlEnum("kW/cm2")]
          kWcm2,
        /// <summary>
        /// kWm2 property
        /// </summary>
          [XmlEnum("kW/m2")]
          kWm2,
        /// <summary>
        /// kWm3 property
        /// </summary>
          [XmlEnum("kW/m3")]
          kWm3,
        /// <summary>
        /// kWb property
        /// </summary>
          kWb,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// Lbarmin property
        /// </summary>
          [XmlEnum("L/(bar.min)")]
          Lbarmin,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lkmol property
        /// </summary>
          [XmlEnum("L/kmol")]
          Lkmol,
        /// <summary>
        /// Lm property
        /// </summary>
          [XmlEnum("L/m")]
          Lm,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Lmol property
        /// </summary>
          [XmlEnum("L/mol")]
          Lmol,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// Ls2 property
        /// </summary>
          [XmlEnum("L/s2")]
          Ls2,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/ton[UK]")]
          LtonUK,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfftbbl property
        /// </summary>
          [XmlEnum("lbf.ft/bbl")]
          lbfftbbl,
        /// <summary>
        /// lbfftgalUS property
        /// </summary>
          [XmlEnum("lbf.ft/gal[US]")]
          lbfftgalUS,
        /// <summary>
        /// lbfftin property
        /// </summary>
          [XmlEnum("lbf.ft/in")]
          lbfftin,
        /// <summary>
        /// lbfftin2 property
        /// </summary>
          [XmlEnum("lbf.ft/in2")]
          lbfftin2,
        /// <summary>
        /// lbfftlbm property
        /// </summary>
          [XmlEnum("lbf.ft/lbm")]
          lbfftlbm,
        /// <summary>
        /// lbfftmin property
        /// </summary>
          [XmlEnum("lbf.ft/min")]
          lbfftmin,
        /// <summary>
        /// lbffts property
        /// </summary>
          [XmlEnum("lbf.ft/s")]
          lbffts,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbfinin property
        /// </summary>
          [XmlEnum("lbf.in/in")]
          lbfinin,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf.in2")]
          lbfin2,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// lbfft1 property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft1,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/gal[US]")]
          lbfgalUS,
        /// <summary>
        /// lbfin1 property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin1,
        /// <summary>
        /// lbflbf property
        /// </summary>
          [XmlEnum("lbf/lbf")]
          lbflbf,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm.ft")]
          lbmft,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm.ft/s")]
          lbmfts,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm.ft2")]
          lbmft2,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// lbmfth property
        /// </summary>
          [XmlEnum("lbm/(ft.h)")]
          lbmfth,
        /// <summary>
        /// lbmfts1 property
        /// </summary>
          [XmlEnum("lbm/(ft.s)")]
          lbmfts1,
        /// <summary>
        /// lbmft2h property
        /// </summary>
          [XmlEnum("lbm/(ft2.h)")]
          lbmft2h,
        /// <summary>
        /// lbmft2s property
        /// </summary>
          [XmlEnum("lbm/(ft2.s)")]
          lbmft2s,
        /// <summary>
        /// lbmgalUKft property
        /// </summary>
          [XmlEnum("lbm/(gal[UK].ft)")]
          lbmgalUKft,
        /// <summary>
        /// lbmgalUSft property
        /// </summary>
          [XmlEnum("lbm/(gal[US].ft)")]
          lbmgalUSft,
        /// <summary>
        /// lbmhph property
        /// </summary>
          [XmlEnum("lbm/(hp.h)")]
          lbmhph,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmd property
        /// </summary>
          [XmlEnum("lbm/d")]
          lbmd,
        /// <summary>
        /// lbmft1 property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft1,
        /// <summary>
        /// lbmft21 property
        /// </summary>
          [XmlEnum("lbm/ft2")]
          lbmft21,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmft4 property
        /// </summary>
          [XmlEnum("lbm/ft4")]
          lbmft4,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/gal[UK]")]
          lbmgalUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/gal[US]")]
          lbmgalUS,
        /// <summary>
        /// lbmh property
        /// </summary>
          [XmlEnum("lbm/h")]
          lbmh,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// lbmlbmol property
        /// </summary>
          [XmlEnum("lbm/lbmol")]
          lbmlbmol,
        /// <summary>
        /// lbmmin property
        /// </summary>
          [XmlEnum("lbm/min")]
          lbmmin,
        /// <summary>
        /// lbms property
        /// </summary>
          [XmlEnum("lbm/s")]
          lbms,
        /// <summary>
        /// lbmol property
        /// </summary>
          lbmol,
        /// <summary>
        /// lbmolhft2 property
        /// </summary>
          [XmlEnum("lbmol/(h.ft2)")]
          lbmolhft2,
        /// <summary>
        /// lbmolsft2 property
        /// </summary>
          [XmlEnum("lbmol/(s.ft2)")]
          lbmolsft2,
        /// <summary>
        /// lbmolft3 property
        /// </summary>
          [XmlEnum("lbmol/ft3")]
          lbmolft3,
        /// <summary>
        /// lbmolgalUK property
        /// </summary>
          [XmlEnum("lbmol/gal[UK]")]
          lbmolgalUK,
        /// <summary>
        /// lbmolgalUS property
        /// </summary>
          [XmlEnum("lbmol/gal[US]")]
          lbmolgalUS,
        /// <summary>
        /// lbmolh property
        /// </summary>
          [XmlEnum("lbmol/h")]
          lbmolh,
        /// <summary>
        /// lbmols property
        /// </summary>
          [XmlEnum("lbmol/s")]
          lbmols,
        /// <summary>
        /// link property
        /// </summary>
          link,
        /// <summary>
        /// linkBnA property
        /// </summary>
          [XmlEnum("link[BnA]")]
          linkBnA,
        /// <summary>
        /// linkBnB property
        /// </summary>
          [XmlEnum("link[BnB]")]
          linkBnB,
        /// <summary>
        /// linkCla property
        /// </summary>
          [XmlEnum("link[Cla]")]
          linkCla,
        /// <summary>
        /// linkSe property
        /// </summary>
          [XmlEnum("link[Se]")]
          linkSe,
        /// <summary>
        /// linkSeT property
        /// </summary>
          [XmlEnum("link[SeT]")]
          linkSeT,
        /// <summary>
        /// linkUS property
        /// </summary>
          [XmlEnum("link[US]")]
          linkUS,
        /// <summary>
        /// lm property
        /// </summary>
          lm,
        /// <summary>
        /// lms property
        /// </summary>
          [XmlEnum("lm.s")]
          lms,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// lmW property
        /// </summary>
          [XmlEnum("lm/W")]
          lmW,
        /// <summary>
        /// lx property
        /// </summary>
          lx,
        /// <summary>
        /// lxs property
        /// </summary>
          [XmlEnum("lx.s")]
          lxs,
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// mmK property
        /// </summary>
          [XmlEnum("m/(m.K)")]
          mmK,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mK property
        /// </summary>
          [XmlEnum("m/K")]
          mK,
        /// <summary>
        /// mkg property
        /// </summary>
          [XmlEnum("m/kg")]
          mkg,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mkPa property
        /// </summary>
          [XmlEnum("m/kPa")]
          mkPa,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// mm3 property
        /// </summary>
          [XmlEnum("m/m3")]
          mm3,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// mPa property
        /// </summary>
          [XmlEnum("m/Pa")]
          mPa,
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// mGer property
        /// </summary>
          [XmlEnum("m[Ger]")]
          mGer,
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// m2kPad property
        /// </summary>
          [XmlEnum("m2/(kPa.d)")]
          m2kPad,
        /// <summary>
        /// m2Pas property
        /// </summary>
          [XmlEnum("m2/(Pa.s)")]
          m2Pas,
        /// <summary>
        /// m2cm3 property
        /// </summary>
          [XmlEnum("m2/cm3")]
          m2cm3,
        /// <summary>
        /// m2d property
        /// </summary>
          [XmlEnum("m2/d")]
          m2d,
        /// <summary>
        /// m2g property
        /// </summary>
          [XmlEnum("m2/g")]
          m2g,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2kg property
        /// </summary>
          [XmlEnum("m2/kg")]
          m2kg,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// m2m3 property
        /// </summary>
          [XmlEnum("m2/m3")]
          m2m3,
        /// <summary>
        /// m2mol property
        /// </summary>
          [XmlEnum("m2/mol")]
          m2mol,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// m3bard property
        /// </summary>
          [XmlEnum("m3/(bar.d)")]
          m3bard,
        /// <summary>
        /// m3barh property
        /// </summary>
          [XmlEnum("m3/(bar.h)")]
          m3barh,
        /// <summary>
        /// m3barmin property
        /// </summary>
          [XmlEnum("m3/(bar.min)")]
          m3barmin,
        /// <summary>
        /// m3dm property
        /// </summary>
          [XmlEnum("m3/(d.m)")]
          m3dm,
        /// <summary>
        /// m3hm property
        /// </summary>
          [XmlEnum("m3/(h.m)")]
          m3hm,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/(ha.m)")]
          m3ham,
        /// <summary>
        /// m3kPad property
        /// </summary>
          [XmlEnum("m3/(kPa.d)")]
          m3kPad,
        /// <summary>
        /// m3kPah property
        /// </summary>
          [XmlEnum("m3/(kPa.h)")]
          m3kPah,
        /// <summary>
        /// m3kWh property
        /// </summary>
          [XmlEnum("m3/(kW.h)")]
          m3kWh,
        /// <summary>
        /// m3m3K property
        /// </summary>
          [XmlEnum("m3/(m3.K)")]
          m3m3K,
        /// <summary>
        /// m3Pas property
        /// </summary>
          [XmlEnum("m3/(Pa.s)")]
          m3Pas,
        /// <summary>
        /// m3psid property
        /// </summary>
          [XmlEnum("m3/(psi.d)")]
          m3psid,
        /// <summary>
        /// m3sft property
        /// </summary>
          [XmlEnum("m3/(s.ft)")]
          m3sft,
        /// <summary>
        /// m3sm property
        /// </summary>
          [XmlEnum("m3/(s.m)")]
          m3sm,
        /// <summary>
        /// m3sm2 property
        /// </summary>
          [XmlEnum("m3/(s.m2)")]
          m3sm2,
        /// <summary>
        /// m3sm3 property
        /// </summary>
          [XmlEnum("m3/(s.m3)")]
          m3sm3,
        /// <summary>
        /// m3bbl property
        /// </summary>
          [XmlEnum("m3/bbl")]
          m3bbl,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3d2 property
        /// </summary>
          [XmlEnum("m3/d2")]
          m3d2,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3J property
        /// </summary>
          [XmlEnum("m3/J")]
          m3J,
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// m3km property
        /// </summary>
          [XmlEnum("m3/km")]
          m3km,
        /// <summary>
        /// m3kmol property
        /// </summary>
          [XmlEnum("m3/kmol")]
          m3kmol,
        /// <summary>
        /// m3kPa property
        /// </summary>
          [XmlEnum("m3/kPa")]
          m3kPa,
        /// <summary>
        /// m3m property
        /// </summary>
          [XmlEnum("m3/m")]
          m3m,
        /// <summary>
        /// m3m2 property
        /// </summary>
          [XmlEnum("m3/m2")]
          m3m2,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// m3mol property
        /// </summary>
          [XmlEnum("m3/mol")]
          m3mol,
        /// <summary>
        /// m3Pa property
        /// </summary>
          [XmlEnum("m3/Pa")]
          m3Pa,
        /// <summary>
        /// m3rad property
        /// </summary>
          [XmlEnum("m3/rad")]
          m3rad,
        /// <summary>
        /// m3rev property
        /// </summary>
          [XmlEnum("m3/rev")]
          m3rev,
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s,
        /// <summary>
        /// m3s2 property
        /// </summary>
          [XmlEnum("m3/s2")]
          m3s2,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/ton[UK]")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/ton[US]")]
          m3tonUS,
        /// <summary>
        /// m4 property
        /// </summary>
          m4,
        /// <summary>
        /// m4s property
        /// </summary>
          [XmlEnum("m4/s")]
          m4s,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// mAcm2 property
        /// </summary>
          [XmlEnum("mA/cm2")]
          mAcm2,
        /// <summary>
        /// mAft2 property
        /// </summary>
          [XmlEnum("mA/ft2")]
          mAft2,
        /// <summary>
        /// Mat property
        /// </summary>
          [XmlEnum("Ma[t]")]
          Mat,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// MBq property
        /// </summary>
          MBq,
        /// <summary>
        /// mC property
        /// </summary>
          mC,
        /// <summary>
        /// MC property
        /// </summary>
          MC,
        /// <summary>
        /// mCm2 property
        /// </summary>
          [XmlEnum("mC/m2")]
          mCm2,
        /// <summary>
        /// Mcalth property
        /// </summary>
          [XmlEnum("Mcal[th]")]
          Mcalth,
        /// <summary>
        /// mcalth property
        /// </summary>
          [XmlEnum("mcal[th]")]
          mcalth,
        /// <summary>
        /// mCi property
        /// </summary>
          mCi,
        /// <summary>
        /// mD property
        /// </summary>
          mD,
        /// <summary>
        /// mDft property
        /// </summary>
          [XmlEnum("mD.ft")]
          mDft,
        /// <summary>
        /// mDft2lbfs property
        /// </summary>
          [XmlEnum("mD.ft2/(lbf.s)")]
          mDft2lbfs,
        /// <summary>
        /// mDin2lbfs property
        /// </summary>
          [XmlEnum("mD.in2/(lbf.s)")]
          mDin2lbfs,
        /// <summary>
        /// mDm property
        /// </summary>
          [XmlEnum("mD.m")]
          mDm,
        /// <summary>
        /// mDPas property
        /// </summary>
          [XmlEnum("mD/(Pa.s)")]
          mDPas,
        /// <summary>
        /// mDcP property
        /// </summary>
          [XmlEnum("mD/cP")]
          mDcP,
        /// <summary>
        /// MEuc property
        /// </summary>
          MEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// meV property
        /// </summary>
          meV,
        /// <summary>
        /// MeV property
        /// </summary>
          MeV,
        /// <summary>
        /// mF property
        /// </summary>
          mF,
        /// <summary>
        /// MF property
        /// </summary>
          MF,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// Mga property
        /// </summary>
          [XmlEnum("Mg/a")]
          Mga,
        /// <summary>
        /// Mgd property
        /// </summary>
          [XmlEnum("Mg/d")]
          Mgd,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mgg property
        /// </summary>
          [XmlEnum("mg/g")]
          mgg,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/gal[US]")]
          mggalUS,
        /// <summary>
        /// Mgh property
        /// </summary>
          [XmlEnum("Mg/h")]
          Mgh,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin,
        /// <summary>
        /// mgJ property
        /// </summary>
          [XmlEnum("mg/J")]
          mgJ,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// Mgm2 property
        /// </summary>
          [XmlEnum("Mg/m2")]
          Mgm2,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// Mgmin property
        /// </summary>
          [XmlEnum("Mg/min")]
          Mgmin,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal,
        /// <summary>
        /// Mgauss property
        /// </summary>
          Mgauss,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn,
        /// <summary>
        /// MGy property
        /// </summary>
          MGy,
        /// <summary>
        /// mGy property
        /// </summary>
          mGy,
        /// <summary>
        /// MH property
        /// </summary>
          MH,
        /// <summary>
        /// mH property
        /// </summary>
          mH,
        /// <summary>
        /// mHz property
        /// </summary>
          mHz,
        /// <summary>
        /// MHz property
        /// </summary>
          MHz,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// migalUK property
        /// </summary>
          [XmlEnum("mi/gal[UK]")]
          migalUK,
        /// <summary>
        /// migalUS property
        /// </summary>
          [XmlEnum("mi/gal[US]")]
          migalUS,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin,
        /// <summary>
        /// minaut property
        /// </summary>
          [XmlEnum("mi[naut]")]
          minaut,
        /// <summary>
        /// minautUK property
        /// </summary>
          [XmlEnum("mi[nautUK]")]
          minautUK,
        /// <summary>
        /// miUS property
        /// </summary>
          [XmlEnum("mi[US]")]
          miUS,
        /// <summary>
        /// miUS2 property
        /// </summary>
          [XmlEnum("mi[US]2")]
          miUS2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// Mibyte property
        /// </summary>
          Mibyte,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// mila property
        /// </summary>
          [XmlEnum("mil/a")]
          mila,
        /// <summary>
        /// mila1 property
        /// </summary>
          [XmlEnum("mila")]
          mila1,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// minft property
        /// </summary>
          [XmlEnum("min/ft")]
          minft,
        /// <summary>
        /// minm property
        /// </summary>
          [XmlEnum("min/m")]
          minm,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// mJ property
        /// </summary>
          mJ,
        /// <summary>
        /// MJ property
        /// </summary>
          MJ,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// mJcm2 property
        /// </summary>
          [XmlEnum("mJ/cm2")]
          mJcm2,
        /// <summary>
        /// MJkg property
        /// </summary>
          [XmlEnum("MJ/kg")]
          MJkg,
        /// <summary>
        /// MJkmol property
        /// </summary>
          [XmlEnum("MJ/kmol")]
          MJkmol,
        /// <summary>
        /// MJm property
        /// </summary>
          [XmlEnum("MJ/m")]
          MJm,
        /// <summary>
        /// mJm2 property
        /// </summary>
          [XmlEnum("mJ/m2")]
          mJm2,
        /// <summary>
        /// MJm3 property
        /// </summary>
          [XmlEnum("MJ/m3")]
          MJm3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/gal[UK]")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/gal[US]")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// mm1 property
        /// </summary>
          [XmlEnum("mm")]
          mm1,
        /// <summary>
        /// mmmmK property
        /// </summary>
          [XmlEnum("mm/(mm.K)")]
          mmmmK,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s,
        /// <summary>
        /// mm31 property
        /// </summary>
          [XmlEnum("mm3")]
          mm31,
        /// <summary>
        /// mm3J property
        /// </summary>
          [XmlEnum("mm3/J")]
          mm3J,
        /// <summary>
        /// mmHg0degC property
        /// </summary>
          [XmlEnum("mmHg[0degC]")]
          mmHg0degC,
        /// <summary>
        /// mmol property
        /// </summary>
          mmol,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// mNm2 property
        /// </summary>
          [XmlEnum("mN.m2")]
          mNm2,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// mohm property
        /// </summary>
          mohm,
        /// <summary>
        /// Mohm property
        /// </summary>
          Mohm,
        /// <summary>
        /// mol property
        /// </summary>
          mol,
        /// <summary>
        /// molm2mols property
        /// </summary>
          [XmlEnum("mol.m2/(mol.s)")]
          molm2mols,
        /// <summary>
        /// molsm2 property
        /// </summary>
          [XmlEnum("mol/(s.m2)")]
          molsm2,
        /// <summary>
        /// molm2 property
        /// </summary>
          [XmlEnum("mol/m2")]
          molm2,
        /// <summary>
        /// molm3 property
        /// </summary>
          [XmlEnum("mol/m3")]
          molm3,
        /// <summary>
        /// molmol property
        /// </summary>
          [XmlEnum("mol/mol")]
          molmol,
        /// <summary>
        /// mols property
        /// </summary>
          [XmlEnum("mol/s")]
          mols,
        /// <summary>
        /// mP property
        /// </summary>
          mP,
        /// <summary>
        /// MP property
        /// </summary>
          MP,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// mPa1 property
        /// </summary>
          [XmlEnum("mPa")]
          mPa1,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// MPasm property
        /// </summary>
          [XmlEnum("MPa.s/m")]
          MPasm,
        /// <summary>
        /// MPah property
        /// </summary>
          [XmlEnum("MPa/h")]
          MPah,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// Mrd property
        /// </summary>
          Mrd,
        /// <summary>
        /// mrd property
        /// </summary>
          mrd,
        /// <summary>
        /// mrem property
        /// </summary>
          mrem,
        /// <summary>
        /// mremh property
        /// </summary>
          [XmlEnum("mrem/h")]
          mremh,
        /// <summary>
        /// MS property
        /// </summary>
          MS,
        /// <summary>
        /// mS property
        /// </summary>
          mS,
        /// <summary>
        /// ms1 property
        /// </summary>
          [XmlEnum("ms")]
          ms1,
        /// <summary>
        /// mscm property
        /// </summary>
          [XmlEnum("ms/cm")]
          mscm,
        /// <summary>
        /// mScm property
        /// </summary>
          [XmlEnum("mS/cm")]
          mScm,
        /// <summary>
        /// msft property
        /// </summary>
          [XmlEnum("ms/ft")]
          msft,
        /// <summary>
        /// msin property
        /// </summary>
          [XmlEnum("ms/in")]
          msin,
        /// <summary>
        /// mSm property
        /// </summary>
          [XmlEnum("mS/m")]
          mSm,
        /// <summary>
        /// msm property
        /// </summary>
          [XmlEnum("ms/m")]
          msm,
        /// <summary>
        /// mss property
        /// </summary>
          [XmlEnum("ms/s")]
          mss,
        /// <summary>
        /// mSv property
        /// </summary>
          mSv,
        /// <summary>
        /// mSvh property
        /// </summary>
          [XmlEnum("mSv/h")]
          mSvh,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// mTdm property
        /// </summary>
          [XmlEnum("mT/dm")]
          mTdm,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// mVft property
        /// </summary>
          [XmlEnum("mV/ft")]
          mVft,
        /// <summary>
        /// mVm property
        /// </summary>
          [XmlEnum("mV/m")]
          mVm,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// MWh property
        /// </summary>
          [XmlEnum("MW.h")]
          MWh,
        /// <summary>
        /// MWhkg property
        /// </summary>
          [XmlEnum("MW.h/kg")]
          MWhkg,
        /// <summary>
        /// MWhm3 property
        /// </summary>
          [XmlEnum("MW.h/m3")]
          MWhm3,
        /// <summary>
        /// mWm2 property
        /// </summary>
          [XmlEnum("mW/m2")]
          mWm2,
        /// <summary>
        /// mWb property
        /// </summary>
          mWb,
        /// <summary>
        /// MWb property
        /// </summary>
          MWb,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// Nmm property
        /// </summary>
          [XmlEnum("N.m/m")]
          Nmm,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N.m2")]
          Nm2,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2,
        /// <summary>
        /// Nm1 property
        /// </summary>
          [XmlEnum("N/m")]
          Nm1,
        /// <summary>
        /// Nm21 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm21,
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// NN property
        /// </summary>
          [XmlEnum("N/N")]
          NN,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// na property
        /// </summary>
          na,
        /// <summary>
        /// nAPI property
        /// </summary>
          nAPI,
        /// <summary>
        /// nC property
        /// </summary>
          nC,
        /// <summary>
        /// ncalth property
        /// </summary>
          [XmlEnum("ncal[th]")]
          ncalth,
        /// <summary>
        /// nCi property
        /// </summary>
          nCi,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// neV property
        /// </summary>
          neV,
        /// <summary>
        /// nF property
        /// </summary>
          nF,
        /// <summary>
        /// ng property
        /// </summary>
          ng,
        /// <summary>
        /// ngg property
        /// </summary>
          [XmlEnum("ng/g")]
          ngg,
        /// <summary>
        /// ngmg property
        /// </summary>
          [XmlEnum("ng/mg")]
          ngmg,
        /// <summary>
        /// ngauss property
        /// </summary>
          ngauss,
        /// <summary>
        /// nGy property
        /// </summary>
          nGy,
        /// <summary>
        /// nH property
        /// </summary>
          nH,
        /// <summary>
        /// nHz property
        /// </summary>
          nHz,
        /// <summary>
        /// nJ property
        /// </summary>
          nJ,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// nN property
        /// </summary>
          nN,
        /// <summary>
        /// nohm property
        /// </summary>
          nohm,
        /// <summary>
        /// nohmmil2ft property
        /// </summary>
          [XmlEnum("nohm.mil2/ft")]
          nohmmil2ft,
        /// <summary>
        /// nohmmm2m property
        /// </summary>
          [XmlEnum("nohm.mm2/m")]
          nohmmm2m,
        /// <summary>
        /// nP property
        /// </summary>
          nP,
        /// <summary>
        /// nPa property
        /// </summary>
          nPa,
        /// <summary>
        /// nrd property
        /// </summary>
          nrd,
        /// <summary>
        /// nS property
        /// </summary>
          nS,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// nsft property
        /// </summary>
          [XmlEnum("ns/ft")]
          nsft,
        /// <summary>
        /// nsm property
        /// </summary>
          [XmlEnum("ns/m")]
          nsm,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// nV property
        /// </summary>
          nV,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// nWb property
        /// </summary>
          nWb,
        /// <summary>
        /// O property
        /// </summary>
          O,
        /// <summary>
        /// Oe property
        /// </summary>
          Oe,
        /// <summary>
        /// ohm property
        /// </summary>
          ohm,
        /// <summary>
        /// ohmcm property
        /// </summary>
          [XmlEnum("ohm.cm")]
          ohmcm,
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm.m")]
          ohmm,
        /// <summary>
        /// ohmm2m property
        /// </summary>
          [XmlEnum("ohm.m2/m")]
          ohmm2m,
        /// <summary>
        /// ohmm1 property
        /// </summary>
          [XmlEnum("ohm/m")]
          ohmm1,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// ozmtroy property
        /// </summary>
          [XmlEnum("ozm[troy]")]
          ozmtroy,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// Pasm3kg property
        /// </summary>
          [XmlEnum("Pa.s.m3/kg")]
          Pasm3kg,
        /// <summary>
        /// Pasm3 property
        /// </summary>
          [XmlEnum("Pa.s/m3")]
          Pasm3,
        /// <summary>
        /// Pas2m3 property
        /// </summary>
          [XmlEnum("Pa.s2/m3")]
          Pas2m3,
        /// <summary>
        /// Pah property
        /// </summary>
          [XmlEnum("Pa/h")]
          Pah,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// Pam3 property
        /// </summary>
          [XmlEnum("Pa/m3")]
          Pam3,
        /// <summary>
        /// Pas1 property
        /// </summary>
          [XmlEnum("Pa/s")]
          Pas1,
        /// <summary>
        /// Pa2 property
        /// </summary>
          Pa2,
        /// <summary>
        /// Pa2Pas property
        /// </summary>
          [XmlEnum("Pa2/(Pa.s)")]
          Pa2Pas,
        /// <summary>
        /// pC property
        /// </summary>
          pC,
        /// <summary>
        /// pcalth property
        /// </summary>
          [XmlEnum("pcal[th]")]
          pcalth,
        /// <summary>
        /// pCi property
        /// </summary>
          pCi,
        /// <summary>
        /// pCig property
        /// </summary>
          [XmlEnum("pCi/g")]
          pCig,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// pdlcm2 property
        /// </summary>
          [XmlEnum("pdl.cm2")]
          pdlcm2,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// pEuc property
        /// </summary>
          pEuc,
        /// <summary>
        /// peV property
        /// </summary>
          peV,
        /// <summary>
        /// pF property
        /// </summary>
          pF,
        /// <summary>
        /// pg property
        /// </summary>
          pg,
        /// <summary>
        /// pgauss property
        /// </summary>
          pgauss,
        /// <summary>
        /// pGy property
        /// </summary>
          pGy,
        /// <summary>
        /// pHz property
        /// </summary>
          pHz,
        /// <summary>
        /// pJ property
        /// </summary>
          pJ,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// pN property
        /// </summary>
          pN,
        /// <summary>
        /// pohm property
        /// </summary>
          pohm,
        /// <summary>
        /// pP property
        /// </summary>
          pP,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmmass property
        /// </summary>
          [XmlEnum("ppm[mass]")]
          ppmmass,
        /// <summary>
        /// ppmvol property
        /// </summary>
          [XmlEnum("ppm[vol]")]
          ppmvol,
        /// <summary>
        /// ppmvoldegC property
        /// </summary>
          [XmlEnum("ppm[vol]/degC")]
          ppmvoldegC,
        /// <summary>
        /// ppmvoldegF property
        /// </summary>
          [XmlEnum("ppm[vol]/degF")]
          ppmvoldegF,
        /// <summary>
        /// prd property
        /// </summary>
          prd,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// pS property
        /// </summary>
          pS,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// psidbbl property
        /// </summary>
          [XmlEnum("psi.d/bbl")]
          psidbbl,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psih property
        /// </summary>
          [XmlEnum("psi/h")]
          psih,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim,
        /// <summary>
        /// psimin property
        /// </summary>
          [XmlEnum("psi/min")]
          psimin,
        /// <summary>
        /// psi2 property
        /// </summary>
          psi2,
        /// <summary>
        /// psi2dcPft3 property
        /// </summary>
          [XmlEnum("psi2.d/(cP.ft3)")]
          psi2dcPft3,
        /// <summary>
        /// psi2cP property
        /// </summary>
          [XmlEnum("psi2/cP")]
          psi2cP,
        /// <summary>
        /// pT property
        /// </summary>
          pT,
        /// <summary>
        /// ptUK property
        /// </summary>
          [XmlEnum("pt[UK]")]
          ptUK,
        /// <summary>
        /// ptUKhph property
        /// </summary>
          [XmlEnum("pt[UK]/(hp.h)")]
          ptUKhph,
        /// <summary>
        /// ptUS property
        /// </summary>
          [XmlEnum("pt[US]")]
          ptUS,
        /// <summary>
        /// pV property
        /// </summary>
          pV,
        /// <summary>
        /// pW property
        /// </summary>
          pW,
        /// <summary>
        /// pWb property
        /// </summary>
          pWb,
        /// <summary>
        /// qtUK property
        /// </summary>
          [XmlEnum("qt[UK]")]
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          [XmlEnum("qt[US]")]
          qtUS,
        /// <summary>
        /// quad property
        /// </summary>
          quad,
        /// <summary>
        /// quada property
        /// </summary>
          [XmlEnum("quad/a")]
          quada,
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft,
        /// <summary>
        /// radft3 property
        /// </summary>
          [XmlEnum("rad/ft3")]
          radft3,
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// radm3 property
        /// </summary>
          [XmlEnum("rad/m3")]
          radm3,
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// rads2 property
        /// </summary>
          [XmlEnum("rad/s2")]
          rads2,
        /// <summary>
        /// rd property
        /// </summary>
          rd,
        /// <summary>
        /// rem property
        /// </summary>
          rem,
        /// <summary>
        /// remh property
        /// </summary>
          [XmlEnum("rem/h")]
          remh,
        /// <summary>
        /// rev property
        /// </summary>
          rev,
        /// <summary>
        /// revft property
        /// </summary>
          [XmlEnum("rev/ft")]
          revft,
        /// <summary>
        /// revm property
        /// </summary>
          [XmlEnum("rev/m")]
          revm,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rodUS property
        /// </summary>
          [XmlEnum("rod[US]")]
          rodUS,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm,
        /// <summary>
        /// rpms property
        /// </summary>
          [XmlEnum("rpm/s")]
          rpms,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// scm property
        /// </summary>
          [XmlEnum("s/cm")]
          scm,
        /// <summary>
        /// sft property
        /// </summary>
          [XmlEnum("s/ft")]
          sft,
        /// <summary>
        /// sft3 property
        /// </summary>
          [XmlEnum("s/ft3")]
          sft3,
        /// <summary>
        /// sin property
        /// </summary>
          [XmlEnum("s/in")]
          sin,
        /// <summary>
        /// skg property
        /// </summary>
          [XmlEnum("s/kg")]
          skg,
        /// <summary>
        /// sL property
        /// </summary>
          [XmlEnum("s/L")]
          sL,
        /// <summary>
        /// Sm property
        /// </summary>
          [XmlEnum("S/m")]
          Sm,
        /// <summary>
        /// sm property
        /// </summary>
          [XmlEnum("s/m")]
          sm,
        /// <summary>
        /// sm3 property
        /// </summary>
          [XmlEnum("s/m3")]
          sm3,
        /// <summary>
        /// sqtUK property
        /// </summary>
          [XmlEnum("s/qt[UK]")]
          sqtUK,
        /// <summary>
        /// sqtUS property
        /// </summary>
          [XmlEnum("s/qt[US]")]
          sqtUS,
        /// <summary>
        /// ss property
        /// </summary>
          [XmlEnum("s/s")]
          ss,
        /// <summary>
        /// sack94lbm property
        /// </summary>
          [XmlEnum("sack[94lbm]")]
          sack94lbm,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// section property
        /// </summary>
          section,
        /// <summary>
        /// sr property
        /// </summary>
          sr,
        /// <summary>
        /// St property
        /// </summary>
          St,
        /// <summary>
        /// Sv property
        /// </summary>
          Sv,
        /// <summary>
        /// Svh property
        /// </summary>
          [XmlEnum("Sv/h")]
          Svh,
        /// <summary>
        /// Svs property
        /// </summary>
          [XmlEnum("Sv/s")]
          Svs,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// ta property
        /// </summary>
          [XmlEnum("t/a")]
          ta,
        /// <summary>
        /// td property
        /// </summary>
          [XmlEnum("t/d")]
          td,
        /// <summary>
        /// th property
        /// </summary>
          [XmlEnum("t/h")]
          th,
        /// <summary>
        /// Tm property
        /// </summary>
          [XmlEnum("T/m")]
          Tm,
        /// <summary>
        /// tm3 property
        /// </summary>
          [XmlEnum("t/m3")]
          tm3,
        /// <summary>
        /// tmin property
        /// </summary>
          [XmlEnum("t/min")]
          tmin,
        /// <summary>
        /// TA property
        /// </summary>
          TA,
        /// <summary>
        /// Tat property
        /// </summary>
          [XmlEnum("Ta[t]")]
          Tat,
        /// <summary>
        /// TBq property
        /// </summary>
          TBq,
        /// <summary>
        /// TC property
        /// </summary>
          TC,
        /// <summary>
        /// Tcalth property
        /// </summary>
          [XmlEnum("Tcal[th]")]
          Tcalth,
        /// <summary>
        /// TDAPI property
        /// </summary>
          [XmlEnum("TD[API]")]
          TDAPI,
        /// <summary>
        /// TDAPIm property
        /// </summary>
          [XmlEnum("TD[API].m")]
          TDAPIm,
        /// <summary>
        /// TDAPIPas property
        /// </summary>
          [XmlEnum("TD[API]/(Pa.s)")]
          TDAPIPas,
        /// <summary>
        /// TEuc property
        /// </summary>
          TEuc,
        /// <summary>
        /// TeV property
        /// </summary>
          TeV,
        /// <summary>
        /// TF property
        /// </summary>
          TF,
        /// <summary>
        /// Tg property
        /// </summary>
          Tg,
        /// <summary>
        /// Tgauss property
        /// </summary>
          Tgauss,
        /// <summary>
        /// TGy property
        /// </summary>
          TGy,
        /// <summary>
        /// TH property
        /// </summary>
          TH,
        /// <summary>
        /// thermEC property
        /// </summary>
          [XmlEnum("therm[EC]")]
          thermEC,
        /// <summary>
        /// thermUK property
        /// </summary>
          [XmlEnum("therm[UK]")]
          thermUK,
        /// <summary>
        /// thermUS property
        /// </summary>
          [XmlEnum("therm[US]")]
          thermUS,
        /// <summary>
        /// THz property
        /// </summary>
          THz,
        /// <summary>
        /// TJ property
        /// </summary>
          TJ,
        /// <summary>
        /// TJa property
        /// </summary>
          [XmlEnum("TJ/a")]
          TJa,
        /// <summary>
        /// Tm1 property
        /// </summary>
          [XmlEnum("Tm")]
          Tm1,
        /// <summary>
        /// TN property
        /// </summary>
          TN,
        /// <summary>
        /// Tohm property
        /// </summary>
          Tohm,
        /// <summary>
        /// tonUK property
        /// </summary>
          [XmlEnum("ton[UK]")]
          tonUK,
        /// <summary>
        /// tonUKa property
        /// </summary>
          [XmlEnum("ton[UK]/a")]
          tonUKa,
        /// <summary>
        /// tonUKd property
        /// </summary>
          [XmlEnum("ton[UK]/d")]
          tonUKd,
        /// <summary>
        /// tonUKh property
        /// </summary>
          [XmlEnum("ton[UK]/h")]
          tonUKh,
        /// <summary>
        /// tonUKmin property
        /// </summary>
          [XmlEnum("ton[UK]/min")]
          tonUKmin,
        /// <summary>
        /// tonUS property
        /// </summary>
          [XmlEnum("ton[US]")]
          tonUS,
        /// <summary>
        /// tonUSa property
        /// </summary>
          [XmlEnum("ton[US]/a")]
          tonUSa,
        /// <summary>
        /// tonUSd property
        /// </summary>
          [XmlEnum("ton[US]/d")]
          tonUSd,
        /// <summary>
        /// tonUSft2 property
        /// </summary>
          [XmlEnum("ton[US]/ft2")]
          tonUSft2,
        /// <summary>
        /// tonUSh property
        /// </summary>
          [XmlEnum("ton[US]/h")]
          tonUSh,
        /// <summary>
        /// tonUSmin property
        /// </summary>
          [XmlEnum("ton[US]/min")]
          tonUSmin,
        /// <summary>
        /// tonfUK property
        /// </summary>
          [XmlEnum("tonf[UK]")]
          tonfUK,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK].ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonf[UK]/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUKft21 property
        /// </summary>
          [XmlEnum("tonf[UK]/ft2")]
          tonfUKft21,
        /// <summary>
        /// tonfUS property
        /// </summary>
          [XmlEnum("tonf[US]")]
          tonfUS,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US].ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US].ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonf[US].mi")]
          tonfUSmi,
        /// <summary>
        /// tonfUSmibbl property
        /// </summary>
          [XmlEnum("tonf[US].mi/bbl")]
          tonfUSmibbl,
        /// <summary>
        /// tonfUSmift property
        /// </summary>
          [XmlEnum("tonf[US].mi/ft")]
          tonfUSmift,
        /// <summary>
        /// tonfUSft1 property
        /// </summary>
          [XmlEnum("tonf[US]/ft")]
          tonfUSft1,
        /// <summary>
        /// tonfUSft21 property
        /// </summary>
          [XmlEnum("tonf[US]/ft2")]
          tonfUSft21,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonf[US]/in2")]
          tonfUSin2,
        /// <summary>
        /// tonRefrig property
        /// </summary>
          tonRefrig,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// TP property
        /// </summary>
          TP,
        /// <summary>
        /// TPa property
        /// </summary>
          TPa,
        /// <summary>
        /// Trd property
        /// </summary>
          Trd,
        /// <summary>
        /// TS property
        /// </summary>
          TS,
        /// <summary>
        /// TT property
        /// </summary>
          TT,
        /// <summary>
        /// TV property
        /// </summary>
          TV,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// TWh property
        /// </summary>
          [XmlEnum("TW.h")]
          TWh,
        /// <summary>
        /// TWb property
        /// </summary>
          TWb,
        /// <summary>
        /// uA property
        /// </summary>
          uA,
        /// <summary>
        /// uAcm2 property
        /// </summary>
          [XmlEnum("uA/cm2")]
          uAcm2,
        /// <summary>
        /// uAin2 property
        /// </summary>
          [XmlEnum("uA/in2")]
          uAin2,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// uC property
        /// </summary>
          uC,
        /// <summary>
        /// ucalth property
        /// </summary>
          [XmlEnum("ucal[th]")]
          ucalth,
        /// <summary>
        /// ucalthscm2 property
        /// </summary>
          [XmlEnum("ucal[th]/(s.cm2)")]
          ucalthscm2,
        /// <summary>
        /// ucalths property
        /// </summary>
          [XmlEnum("ucal[th]/s")]
          ucalths,
        /// <summary>
        /// uCi property
        /// </summary>
          uCi,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc,
        /// <summary>
        /// ueV property
        /// </summary>
          ueV,
        /// <summary>
        /// uF property
        /// </summary>
          uF,
        /// <summary>
        /// uFm property
        /// </summary>
          [XmlEnum("uF/m")]
          uFm,
        /// <summary>
        /// ug property
        /// </summary>
          ug,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3,
        /// <summary>
        /// ugg property
        /// </summary>
          [XmlEnum("ug/g")]
          ugg,
        /// <summary>
        /// ugmg property
        /// </summary>
          [XmlEnum("ug/mg")]
          ugmg,
        /// <summary>
        /// ugauss property
        /// </summary>
          ugauss,
        /// <summary>
        /// uGy property
        /// </summary>
          uGy,
        /// <summary>
        /// uH property
        /// </summary>
          uH,
        /// <summary>
        /// uHm property
        /// </summary>
          [XmlEnum("uH/m")]
          uHm,
        /// <summary>
        /// uHz property
        /// </summary>
          uHz,
        /// <summary>
        /// uJ property
        /// </summary>
          uJ,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// umHg0degC property
        /// </summary>
          [XmlEnum("umHg[0degC]")]
          umHg0degC,
        /// <summary>
        /// umol property
        /// </summary>
          umol,
        /// <summary>
        /// uN property
        /// </summary>
          uN,
        /// <summary>
        /// uohm property
        /// </summary>
          uohm,
        /// <summary>
        /// uohmft property
        /// </summary>
          [XmlEnum("uohm/ft")]
          uohmft,
        /// <summary>
        /// uohmm property
        /// </summary>
          [XmlEnum("uohm/m")]
          uohmm,
        /// <summary>
        /// uP property
        /// </summary>
          uP,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi,
        /// <summary>
        /// urad property
        /// </summary>
          urad,
        /// <summary>
        /// urd property
        /// </summary>
          urd,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// uS property
        /// </summary>
          uS,
        /// <summary>
        /// usft property
        /// </summary>
          [XmlEnum("us/ft")]
          usft,
        /// <summary>
        /// usin property
        /// </summary>
          [XmlEnum("us/in")]
          usin,
        /// <summary>
        /// usm property
        /// </summary>
          [XmlEnum("us/m")]
          usm,
        /// <summary>
        /// uT property
        /// </summary>
          uT,
        /// <summary>
        /// uV property
        /// </summary>
          uV,
        /// <summary>
        /// uVft property
        /// </summary>
          [XmlEnum("uV/ft")]
          uVft,
        /// <summary>
        /// uVm property
        /// </summary>
          [XmlEnum("uV/m")]
          uVm,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// uWm3 property
        /// </summary>
          [XmlEnum("uW/m3")]
          uWm3,
        /// <summary>
        /// uWb property
        /// </summary>
          uWb,
        /// <summary>
        /// V property
        /// </summary>
          V,
        /// <summary>
        /// VB property
        /// </summary>
          [XmlEnum("V/B")]
          VB,
        /// <summary>
        /// VdB property
        /// </summary>
          [XmlEnum("V/dB")]
          VdB,
        /// <summary>
        /// Vm property
        /// </summary>
          [XmlEnum("V/m")]
          Vm,
        /// <summary>
        /// W property
        /// </summary>
          W,
        /// <summary>
        /// Wm2KJK property
        /// </summary>
          [XmlEnum("W.m2.K/(J.K)")]
          Wm2KJK,
        /// <summary>
        /// WmK property
        /// </summary>
          [XmlEnum("W/(m.K)")]
          WmK,
        /// <summary>
        /// Wm2K property
        /// </summary>
          [XmlEnum("W/(m2.K)")]
          Wm2K,
        /// <summary>
        /// Wm2sr property
        /// </summary>
          [XmlEnum("W/(m2.sr)")]
          Wm2sr,
        /// <summary>
        /// Wm3K property
        /// </summary>
          [XmlEnum("W/(m3.K)")]
          Wm3K,
        /// <summary>
        /// Wcm2 property
        /// </summary>
          [XmlEnum("W/cm2")]
          Wcm2,
        /// <summary>
        /// WK property
        /// </summary>
          [XmlEnum("W/K")]
          WK,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// Wm2 property
        /// </summary>
          [XmlEnum("W/m2")]
          Wm2,
        /// <summary>
        /// Wm3 property
        /// </summary>
          [XmlEnum("W/m3")]
          Wm3,
        /// <summary>
        /// Wmm2 property
        /// </summary>
          [XmlEnum("W/mm2")]
          Wmm2,
        /// <summary>
        /// Wsr property
        /// </summary>
          [XmlEnum("W/sr")]
          Wsr,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW,
        /// <summary>
        /// Wb property
        /// </summary>
          Wb,
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb.m")]
          Wbm,
        /// <summary>
        /// Wbm1 property
        /// </summary>
          [XmlEnum("Wb/m")]
          Wbm1,
        /// <summary>
        /// Wbmm property
        /// </summary>
          [XmlEnum("Wb/mm")]
          Wbmm,
        /// <summary>
        /// wk property
        /// </summary>
          wk,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          [XmlEnum("yd[BnA]")]
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          [XmlEnum("yd[BnB]")]
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          [XmlEnum("yd[Cla]")]
          ydCla,
        /// <summary>
        /// ydInd property
        /// </summary>
          [XmlEnum("yd[Ind]")]
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("yd[Ind37]")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("yd[Ind62]")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("yd[Ind75]")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          [XmlEnum("yd[Se]")]
          ydSe,
        /// <summary>
        /// ydSeT property
        /// </summary>
          [XmlEnum("yd[SeT]")]
          ydSeT,
        /// <summary>
        /// ydUS property
        /// </summary>
          [XmlEnum("yd[US]")]
          ydUS,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the TimeSetKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the TimeSetKind xsd enumeration.")]
        public enum TimeSetKind 
        {
        /// <summary>
        /// singletime property
        /// </summary>
          [XmlEnum("single time")]
          singletime,
        /// <summary>
        /// equivalenttimes property
        /// </summary>
          [XmlEnum("equivalent times")]
          equivalenttimes,
        /// <summary>
        /// notatimeset property
        /// </summary>
          [XmlEnum("not a time set")]
          notatimeset
        }
        /// <summary>
        /// This class represents the FluidMarker xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the FluidMarker xsd enumeration.")]
        public enum FluidMarker 
        {
        /// <summary>
        /// gasdownto property
        /// </summary>
          [XmlEnum("gas down to")]
          gasdownto,
        /// <summary>
        /// gasupto property
        /// </summary>
          [XmlEnum("gas up to")]
          gasupto,
        /// <summary>
        /// oildownto property
        /// </summary>
          [XmlEnum("oil down to")]
          oildownto,
        /// <summary>
        /// oilupto property
        /// </summary>
          [XmlEnum("oil up to")]
          oilupto,
        /// <summary>
        /// waterdownto property
        /// </summary>
          [XmlEnum("water down to")]
          waterdownto,
        /// <summary>
        /// waterupto property
        /// </summary>
          [XmlEnum("water up to")]
          waterupto
        }
        /// <summary>
        /// This class represents the GeologicBoundaryKind xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the GeologicBoundaryKind xsd enumeration.")]
        public enum GeologicBoundaryKind 
        {
        /// <summary>
        /// fault property
        /// </summary>
          fault,
        /// <summary>
        /// geobody property
        /// </summary>
          geobody,
        /// <summary>
        /// horizon property
        /// </summary>
          horizon
        }
        /// <summary>
        /// This class represents the SurfaceRole xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the SurfaceRole xsd enumeration.")]
        public enum SurfaceRole 
        {
        /// <summary>
        /// Representation support for properties.
        /// </summary>
          map,
        /// <summary>
        /// Representation support for 3D points picked in 2D or 3D.
        /// </summary>
          pick
        }
        /// <summary>
        /// This class represents the LineRole xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the LineRole xsd enumeration.")]
        public enum LineRole 
        {
        /// <summary>
        /// faultcenterline property
        /// </summary>
          [XmlEnum("fault center line")]
          faultcenterline,
        /// <summary>
        /// pick property
        /// </summary>
          pick,
        /// <summary>
        /// innerring property
        /// </summary>
          [XmlEnum("inner ring")]
          innerring,
        /// <summary>
        /// outerring property
        /// </summary>
          [XmlEnum("outer ring")]
          outerring,
        /// <summary>
        /// trajectory property
        /// </summary>
          trajectory,
        /// <summary>
        /// interpretationline property
        /// </summary>
          [XmlEnum("interpretation line")]
          interpretationline,
        /// <summary>
        /// contact property
        /// </summary>
          contact,
        /// <summary>
        /// depositionalline property
        /// </summary>
          [XmlEnum("depositional line")]
          depositionalline,
        /// <summary>
        /// erosionline property
        /// </summary>
          [XmlEnum("erosion line")]
          erosionline,
        /// <summary>
        /// contouring property
        /// </summary>
          contouring,
        /// <summary>
        /// pillar property
        /// </summary>
          pillar
        }
        /// <summary>
        /// This class represents the MdDomain xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the MdDomain xsd enumeration.")]
        public enum MdDomain 
        {
        /// <summary>
        /// The original depths recorded while drilling a well or LWD or MWD.
        /// </summary>
          driller,
        /// <summary>
        /// Depths recorded when logging a well, which are in general considered to be more accurate than driller's depth.
        /// </summary>
          logger
        }
        /// <summary>
        /// This class represents the Domain xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the Domain xsd enumeration.")]
        public enum Domain 
        {
        /// <summary>
        /// depth property
        /// </summary>
          depth,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// mixed property
        /// </summary>
          mixed
        }
        /// <summary>
        /// This class represents the GeologicUnitComposition xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the GeologicUnitComposition xsd enumeration.")]
        public enum GeologicUnitComposition 
        {
        /// <summary>
        /// intrusiveclay property
        /// </summary>
          [XmlEnum("intrusive clay ")]
          intrusiveclay,
        /// <summary>
        /// organic property
        /// </summary>
          organic,
        /// <summary>
        /// intrusivemud property
        /// </summary>
          [XmlEnum("intrusive mud ")]
          intrusivemud,
        /// <summary>
        /// evaporitesalt property
        /// </summary>
          [XmlEnum("evaporite salt")]
          evaporitesalt,
        /// <summary>
        /// evaporitenonsalt property
        /// </summary>
          [XmlEnum("evaporite non salt")]
          evaporitenonsalt,
        /// <summary>
        /// sedimentarysiliclastic property
        /// </summary>
          [XmlEnum("sedimentary siliclastic")]
          sedimentarysiliclastic,
        /// <summary>
        /// carbonate property
        /// </summary>
          carbonate,
        /// <summary>
        /// magmaticintrusivegranitoid property
        /// </summary>
          [XmlEnum("magmatic intrusive granitoid")]
          magmaticintrusivegranitoid,
        /// <summary>
        /// magmaticintrusivepyroclastic property
        /// </summary>
          [XmlEnum("magmatic intrusive pyroclastic")]
          magmaticintrusivepyroclastic,
        /// <summary>
        /// magmaticextrusivelavaflow property
        /// </summary>
          [XmlEnum("magmatic extrusive lava flow")]
          magmaticextrusivelavaflow,
        /// <summary>
        /// otherchemichalrock property
        /// </summary>
          [XmlEnum("other chemichal rock")]
          otherchemichalrock,
        /// <summary>
        /// sedimentaryturbidite property
        /// </summary>
          [XmlEnum("sedimentary turbidite")]
          sedimentaryturbidite
        }
        /// <summary>
        /// This class represents the GeologicUnitMaterialImplacement xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the GeologicUnitMaterialImplacement xsd enumeration.")]
        public enum GeologicUnitMaterialImplacement 
        {
        /// <summary>
        /// autochtonous property
        /// </summary>
          autochtonous,
        /// <summary>
        /// allochtonous property
        /// </summary>
          allochtonous
        }
        /// <summary>
        /// This class represents the DepositionMode xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the DepositionMode xsd enumeration.")]
        public enum DepositionMode 
        {
        /// <summary>
        /// proportionalbetweentopandbottom property
        /// </summary>
          [XmlEnum("proportional between top and bottom")]
          proportionalbetweentopandbottom,
        /// <summary>
        /// paralleltobottom property
        /// </summary>
          [XmlEnum("parallel to bottom")]
          paralleltobottom,
        /// <summary>
        /// paralleltotop property
        /// </summary>
          [XmlEnum("parallel to top")]
          paralleltotop,
        /// <summary>
        /// paralleltoanotherboundary property
        /// </summary>
          [XmlEnum("parallel to another boundary")]
          paralleltoanotherboundary
        }
        /// <summary>
        /// This class represents the Geobody3dShape xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the Geobody3dShape xsd enumeration.")]
        public enum Geobody3dShape 
        {
        /// <summary>
        /// dyke property
        /// </summary>
          dyke,
        /// <summary>
        /// silt property
        /// </summary>
          silt,
        /// <summary>
        /// dome property
        /// </summary>
          dome,
        /// <summary>
        /// sheeth property
        /// </summary>
          sheeth,
        /// <summary>
        /// diapir property
        /// </summary>
          diapir,
        /// <summary>
        /// batholith property
        /// </summary>
          batholith,
        /// <summary>
        /// channel property
        /// </summary>
          channel,
        /// <summary>
        /// delta property
        /// </summary>
          delta,
        /// <summary>
        /// dune property
        /// </summary>
          dune,
        /// <summary>
        /// fan property
        /// </summary>
          fan,
        /// <summary>
        /// reef property
        /// </summary>
          reef,
        /// <summary>
        /// wedge property
        /// </summary>
          wedge
        }
        /// <summary>
        /// This class represents the BoundaryRelation xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the BoundaryRelation xsd enumeration.")]
        public enum BoundaryRelation 
        {
        /// <summary>
        /// conformable property
        /// </summary>
          conformable,
        /// <summary>
        /// unconformablebelowandabove property
        /// </summary>
          [XmlEnum("unconformable below and above")]
          unconformablebelowandabove,
        /// <summary>
        /// unconformableabove property
        /// </summary>
          [XmlEnum("unconformable above")]
          unconformableabove,
        /// <summary>
        /// unconformablebelow property
        /// </summary>
          [XmlEnum("unconformable below")]
          unconformablebelow
        }
        /// <summary>
        /// This class represents the SequenceStratigraphySurface xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the SequenceStratigraphySurface xsd enumeration.")]
        public enum SequenceStratigraphySurface 
        {
        /// <summary>
        /// flooding property
        /// </summary>
          flooding,
        /// <summary>
        /// ravinement property
        /// </summary>
          ravinement,
        /// <summary>
        /// maximumflooding property
        /// </summary>
          [XmlEnum("maximum flooding")]
          maximumflooding,
        /// <summary>
        /// transgressive property
        /// </summary>
          transgressive
        }
        /// <summary>
        /// This class represents the OrderingCriteria xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the OrderingCriteria xsd enumeration.")]
        public enum OrderingCriteria 
        {
        /// <summary>
        /// From youngest to oldest period (increasing age).
        /// </summary>
          age,
        /// <summary>
        /// apparentdepth property
        /// </summary>
          [XmlEnum("apparent depth")]
          apparentdepth,
        /// <summary>
        /// measureddepth property
        /// </summary>
          [XmlEnum("measured depth")]
          measureddepth
        }
        /// <summary>
        /// This class represents the VerticalDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VerticalDirection xsd enumeration.")]
        public enum VerticalDirection 
        {
        /// <summary>
        /// up property
        /// </summary>
          up,
        /// <summary>
        /// down property
        /// </summary>
          down
        }
        /// <summary>
        /// This class represents the LogarithmicPowerRatioUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LogarithmicPowerRatioUom xsd enumeration.")]
        public enum LogarithmicPowerRatioUom 
        {
        /// <summary>
        /// B property
        /// </summary>
          B,
        /// <summary>
        /// dB property
        /// </summary>
          dB
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerTimeUom xsd enumeration.")]
        public enum AmountOfSubstancePerTimeUom 
        {
        /// <summary>
        /// kmolh property
        /// </summary>
          [XmlEnum("kmol/h")]
          kmolh,
        /// <summary>
        /// kmols property
        /// </summary>
          [XmlEnum("kmol/s")]
          kmols,
        /// <summary>
        /// lbmolh property
        /// </summary>
          [XmlEnum("lbmol/h")]
          lbmolh,
        /// <summary>
        /// lbmols property
        /// </summary>
          [XmlEnum("lbmol/s")]
          lbmols,
        /// <summary>
        /// mols property
        /// </summary>
          [XmlEnum("mol/s")]
          mols
        }
        /// <summary>
        /// This class represents the ElectricConductivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricConductivityUom xsd enumeration.")]
        public enum ElectricConductivityUom 
        {
        /// <summary>
        /// kSm property
        /// </summary>
          [XmlEnum("kS/m")]
          kSm,
        /// <summary>
        /// mScm property
        /// </summary>
          [XmlEnum("mS/cm")]
          mScm,
        /// <summary>
        /// mSm property
        /// </summary>
          [XmlEnum("mS/m")]
          mSm,
        /// <summary>
        /// Sm property
        /// </summary>
          [XmlEnum("S/m")]
          Sm
        }
        /// <summary>
        /// This class represents the VolumePerRotationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerRotationUom xsd enumeration.")]
        public enum VolumePerRotationUom 
        {
        /// <summary>
        /// ft3rad property
        /// </summary>
          [XmlEnum("ft3/rad")]
          ft3rad,
        /// <summary>
        /// m3rad property
        /// </summary>
          [XmlEnum("m3/rad")]
          m3rad,
        /// <summary>
        /// m3rev property
        /// </summary>
          [XmlEnum("m3/rev")]
          m3rev
        }
        /// <summary>
        /// This class represents the VolumePerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerAreaUom xsd enumeration.")]
        public enum VolumePerTimePerAreaUom 
        {
        /// <summary>
        /// ft3minft2 property
        /// </summary>
          [XmlEnum("ft3/(min.ft2)")]
          ft3minft2,
        /// <summary>
        /// ft3sft2 property
        /// </summary>
          [XmlEnum("ft3/(s.ft2)")]
          ft3sft2,
        /// <summary>
        /// galUKhft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft2)")]
          galUKhft2,
        /// <summary>
        /// galUKhin2 property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in2)")]
          galUKhin2,
        /// <summary>
        /// galUKminft2 property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft2)")]
          galUKminft2,
        /// <summary>
        /// galUShft2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft2)")]
          galUShft2,
        /// <summary>
        /// galUShin2 property
        /// </summary>
          [XmlEnum("gal[US]/(h.in2)")]
          galUShin2,
        /// <summary>
        /// galUSminft2 property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft2)")]
          galUSminft2,
        /// <summary>
        /// m3sm2 property
        /// </summary>
          [XmlEnum("m3/(s.m2)")]
          m3sm2
        }
        /// <summary>
        /// This class represents the MobilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MobilityUom xsd enumeration.")]
        public enum MobilityUom 
        {
        /// <summary>
        /// DPas property
        /// </summary>
          [XmlEnum("D/(Pa.s)")]
          DPas,
        /// <summary>
        /// DcP property
        /// </summary>
          [XmlEnum("D/cP")]
          DcP,
        /// <summary>
        /// mDft2lbfs property
        /// </summary>
          [XmlEnum("mD.ft2/(lbf.s)")]
          mDft2lbfs,
        /// <summary>
        /// mDin2lbfs property
        /// </summary>
          [XmlEnum("mD.in2/(lbf.s)")]
          mDin2lbfs,
        /// <summary>
        /// mDPas property
        /// </summary>
          [XmlEnum("mD/(Pa.s)")]
          mDPas,
        /// <summary>
        /// mDcP property
        /// </summary>
          [XmlEnum("mD/cP")]
          mDcP,
        /// <summary>
        /// TDAPIPas property
        /// </summary>
          [XmlEnum("TD[API]/(Pa.s)")]
          TDAPIPas
        }
        /// <summary>
        /// This class represents the HeatTransferCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatTransferCoefficientUom xsd enumeration.")]
        public enum HeatTransferCoefficientUom 
        {
        /// <summary>
        /// BtuIThft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.deltaF)")]
          BtuIThft2deltaF,
        /// <summary>
        /// BtuIThft2deltaR property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2.deltaR)")]
          BtuIThft2deltaR,
        /// <summary>
        /// BtuIThm2deltaC property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.m2.deltaC)")]
          BtuIThm2deltaC,
        /// <summary>
        /// BtuITsft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2.deltaF)")]
          BtuITsft2deltaF,
        /// <summary>
        /// calthhcm2deltaC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2.deltaC)")]
          calthhcm2deltaC,
        /// <summary>
        /// calthscm2deltaC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm2.deltaC)")]
          calthscm2deltaC,
        /// <summary>
        /// Jsm2deltaC property
        /// </summary>
          [XmlEnum("J/(s.m2.deltaC)")]
          Jsm2deltaC,
        /// <summary>
        /// kcalthhm2deltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m2.deltaC)")]
          kcalthhm2deltaC,
        /// <summary>
        /// kJhm2deltaK property
        /// </summary>
          [XmlEnum("kJ/(h.m2.deltaK)")]
          kJhm2deltaK,
        /// <summary>
        /// kWm2deltaK property
        /// </summary>
          [XmlEnum("kW/(m2.deltaK)")]
          kWm2deltaK,
        /// <summary>
        /// Wm2deltaK property
        /// </summary>
          [XmlEnum("W/(m2.deltaK)")]
          Wm2deltaK
        }
        /// <summary>
        /// This class represents the MassPerEnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerEnergyUom xsd enumeration.")]
        public enum MassPerEnergyUom 
        {
        /// <summary>
        /// kgkWh property
        /// </summary>
          [XmlEnum("kg/(kW.h)")]
          kgkWh,
        /// <summary>
        /// kgJ property
        /// </summary>
          [XmlEnum("kg/J")]
          kgJ,
        /// <summary>
        /// kgMJ property
        /// </summary>
          [XmlEnum("kg/MJ")]
          kgMJ,
        /// <summary>
        /// lbmhph property
        /// </summary>
          [XmlEnum("lbm/(hp.h)")]
          lbmhph,
        /// <summary>
        /// mgJ property
        /// </summary>
          [XmlEnum("mg/J")]
          mgJ
        }
        /// <summary>
        /// This class represents the MomentOfInertiaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentOfInertiaUom xsd enumeration.")]
        public enum MomentOfInertiaUom 
        {
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg.m2")]
          kgm2,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm.ft2")]
          lbmft2
        }
        /// <summary>
        /// This class represents the CapacitanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the CapacitanceUom xsd enumeration.")]
        public enum CapacitanceUom 
        {
        /// <summary>
        /// cF property
        /// </summary>
          cF,
        /// <summary>
        /// dF property
        /// </summary>
          dF,
        /// <summary>
        /// EF property
        /// </summary>
          EF,
        /// <summary>
        /// F property
        /// </summary>
          F,
        /// <summary>
        /// fF property
        /// </summary>
          fF,
        /// <summary>
        /// GF property
        /// </summary>
          GF,
        /// <summary>
        /// kF property
        /// </summary>
          kF,
        /// <summary>
        /// mF property
        /// </summary>
          mF,
        /// <summary>
        /// MF property
        /// </summary>
          MF,
        /// <summary>
        /// nF property
        /// </summary>
          nF,
        /// <summary>
        /// pF property
        /// </summary>
          pF,
        /// <summary>
        /// TF property
        /// </summary>
          TF,
        /// <summary>
        /// uF property
        /// </summary>
          uF
        }
        /// <summary>
        /// This class represents the MagneticFluxDensityPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxDensityPerLengthUom xsd enumeration.")]
        public enum MagneticFluxDensityPerLengthUom 
        {
        /// <summary>
        /// gausscm property
        /// </summary>
          [XmlEnum("gauss/cm")]
          gausscm,
        /// <summary>
        /// mTdm property
        /// </summary>
          [XmlEnum("mT/dm")]
          mTdm,
        /// <summary>
        /// Tm property
        /// </summary>
          [XmlEnum("T/m")]
          Tm
        }
        /// <summary>
        /// This class represents the LengthPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerVolumeUom xsd enumeration.")]
        public enum LengthPerVolumeUom 
        {
        /// <summary>
        /// ftbbl property
        /// </summary>
          [XmlEnum("ft/bbl")]
          ftbbl,
        /// <summary>
        /// ftft3 property
        /// </summary>
          [XmlEnum("ft/ft3")]
          ftft3,
        /// <summary>
        /// ftgalUS property
        /// </summary>
          [XmlEnum("ft/gal[US]")]
          ftgalUS,
        /// <summary>
        /// kmdm3 property
        /// </summary>
          [XmlEnum("km/dm3")]
          kmdm3,
        /// <summary>
        /// kmL property
        /// </summary>
          [XmlEnum("km/L")]
          kmL,
        /// <summary>
        /// mm3 property
        /// </summary>
          [XmlEnum("m/m3")]
          mm3,
        /// <summary>
        /// migalUK property
        /// </summary>
          [XmlEnum("mi/gal[UK]")]
          migalUK,
        /// <summary>
        /// migalUS property
        /// </summary>
          [XmlEnum("mi/gal[US]")]
          migalUS
        }
        /// <summary>
        /// This class represents the MassPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimeUom xsd enumeration.")]
        public enum MassPerTimeUom 
        {
        /// <summary>
        /// Item1E6lbma property
        /// </summary>
          [XmlEnum("1E6 lbm/a")]
          Item1E6lbma,
        /// <summary>
        /// gs property
        /// </summary>
          [XmlEnum("g/s")]
          gs,
        /// <summary>
        /// kgd property
        /// </summary>
          [XmlEnum("kg/d")]
          kgd,
        /// <summary>
        /// kgh property
        /// </summary>
          [XmlEnum("kg/h")]
          kgh,
        /// <summary>
        /// kgmin property
        /// </summary>
          [XmlEnum("kg/min")]
          kgmin,
        /// <summary>
        /// kgs property
        /// </summary>
          [XmlEnum("kg/s")]
          kgs,
        /// <summary>
        /// lbmd property
        /// </summary>
          [XmlEnum("lbm/d")]
          lbmd,
        /// <summary>
        /// lbmh property
        /// </summary>
          [XmlEnum("lbm/h")]
          lbmh,
        /// <summary>
        /// lbmmin property
        /// </summary>
          [XmlEnum("lbm/min")]
          lbmmin,
        /// <summary>
        /// lbms property
        /// </summary>
          [XmlEnum("lbm/s")]
          lbms,
        /// <summary>
        /// Mga property
        /// </summary>
          [XmlEnum("Mg/a")]
          Mga,
        /// <summary>
        /// Mgd property
        /// </summary>
          [XmlEnum("Mg/d")]
          Mgd,
        /// <summary>
        /// Mgh property
        /// </summary>
          [XmlEnum("Mg/h")]
          Mgh,
        /// <summary>
        /// Mgmin property
        /// </summary>
          [XmlEnum("Mg/min")]
          Mgmin,
        /// <summary>
        /// ta property
        /// </summary>
          [XmlEnum("t/a")]
          ta,
        /// <summary>
        /// td property
        /// </summary>
          [XmlEnum("t/d")]
          td,
        /// <summary>
        /// th property
        /// </summary>
          [XmlEnum("t/h")]
          th,
        /// <summary>
        /// tmin property
        /// </summary>
          [XmlEnum("t/min")]
          tmin,
        /// <summary>
        /// tonUKa property
        /// </summary>
          [XmlEnum("ton[UK]/a")]
          tonUKa,
        /// <summary>
        /// tonUKd property
        /// </summary>
          [XmlEnum("ton[UK]/d")]
          tonUKd,
        /// <summary>
        /// tonUKh property
        /// </summary>
          [XmlEnum("ton[UK]/h")]
          tonUKh,
        /// <summary>
        /// tonUKmin property
        /// </summary>
          [XmlEnum("ton[UK]/min")]
          tonUKmin,
        /// <summary>
        /// tonUSa property
        /// </summary>
          [XmlEnum("ton[US]/a")]
          tonUSa,
        /// <summary>
        /// tonUSd property
        /// </summary>
          [XmlEnum("ton[US]/d")]
          tonUSd,
        /// <summary>
        /// tonUSh property
        /// </summary>
          [XmlEnum("ton[US]/h")]
          tonUSh,
        /// <summary>
        /// tonUSmin property
        /// </summary>
          [XmlEnum("ton[US]/min")]
          tonUSmin
        }
        /// <summary>
        /// This class represents the MolecularWeightUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolecularWeightUom xsd enumeration.")]
        public enum MolecularWeightUom 
        {
        /// <summary>
        /// gmol property
        /// </summary>
          [XmlEnum("g/mol")]
          gmol,
        /// <summary>
        /// kgmol property
        /// </summary>
          [XmlEnum("kg/mol")]
          kgmol,
        /// <summary>
        /// lbmlbmol property
        /// </summary>
          [XmlEnum("lbm/lbmol")]
          lbmlbmol
        }
        /// <summary>
        /// This class represents the MagneticFluxUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxUom xsd enumeration.")]
        public enum MagneticFluxUom 
        {
        /// <summary>
        /// cWb property
        /// </summary>
          cWb,
        /// <summary>
        /// dWb property
        /// </summary>
          dWb,
        /// <summary>
        /// EWb property
        /// </summary>
          EWb,
        /// <summary>
        /// fWb property
        /// </summary>
          fWb,
        /// <summary>
        /// GWb property
        /// </summary>
          GWb,
        /// <summary>
        /// kWb property
        /// </summary>
          kWb,
        /// <summary>
        /// MWb property
        /// </summary>
          MWb,
        /// <summary>
        /// mWb property
        /// </summary>
          mWb,
        /// <summary>
        /// nWb property
        /// </summary>
          nWb,
        /// <summary>
        /// pWb property
        /// </summary>
          pWb,
        /// <summary>
        /// TWb property
        /// </summary>
          TWb,
        /// <summary>
        /// uWb property
        /// </summary>
          uWb,
        /// <summary>
        /// Wb property
        /// </summary>
          Wb
        }
        /// <summary>
        /// This class represents the ThermalConductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalConductanceUom xsd enumeration.")]
        public enum ThermalConductanceUom 
        {
        /// <summary>
        /// WdeltaK property
        /// </summary>
          [XmlEnum("W/deltaK")]
          WdeltaK
        }
        /// <summary>
        /// This class represents the QuantityOfLightUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the QuantityOfLightUom xsd enumeration.")]
        public enum QuantityOfLightUom 
        {
        /// <summary>
        /// lms property
        /// </summary>
          [XmlEnum("lm.s")]
          lms
        }
        /// <summary>
        /// This class represents the LengthPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerTimeUom xsd enumeration.")]
        public enum LengthPerTimeUom 
        {
        /// <summary>
        /// Item1000fth property
        /// </summary>
          [XmlEnum("1000 ft/h")]
          Item1000fth,
        /// <summary>
        /// Item1000fts property
        /// </summary>
          [XmlEnum("1000 ft/s")]
          Item1000fts,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// mila property
        /// </summary>
          [XmlEnum("mil/a")]
          mila,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the ForceLengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceLengthPerLengthUom xsd enumeration.")]
        public enum ForceLengthPerLengthUom 
        {
        /// <summary>
        /// kgfmm property
        /// </summary>
          [XmlEnum("kgf.m/m")]
          kgfmm,
        /// <summary>
        /// lbfftin property
        /// </summary>
          [XmlEnum("lbf.ft/in")]
          lbfftin,
        /// <summary>
        /// lbfinin property
        /// </summary>
          [XmlEnum("lbf.in/in")]
          lbfinin,
        /// <summary>
        /// Nmm property
        /// </summary>
          [XmlEnum("N.m/m")]
          Nmm,
        /// <summary>
        /// tonfUSmift property
        /// </summary>
          [XmlEnum("tonf[US].mi/ft")]
          tonfUSmift
        }
        /// <summary>
        /// This class represents the SolidAngleUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SolidAngleUom xsd enumeration.")]
        public enum SolidAngleUom 
        {
        /// <summary>
        /// sr property
        /// </summary>
          sr
        }
        /// <summary>
        /// This class represents the VolumePerTimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerVolumeUom xsd enumeration.")]
        public enum VolumePerTimePerVolumeUom 
        {
        /// <summary>
        /// bbldacreft property
        /// </summary>
          [XmlEnum("bbl/(d.acre.ft)")]
          bbldacreft,
        /// <summary>
        /// m3sm3 property
        /// </summary>
          [XmlEnum("m3/(s.m3)")]
          m3sm3
        }
        /// <summary>
        /// This class represents the MomentOfForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentOfForceUom xsd enumeration.")]
        public enum MomentOfForceUom 
        {
        /// <summary>
        /// Item1000lbfft property
        /// </summary>
          [XmlEnum("1000 lbf.ft")]
          Item1000lbfft,
        /// <summary>
        /// daNm property
        /// </summary>
          [XmlEnum("daN.m")]
          daNm,
        /// <summary>
        /// dNm property
        /// </summary>
          [XmlEnum("dN.m")]
          dNm,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// kgfm property
        /// </summary>
          [XmlEnum("kgf.m")]
          kgfm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN.m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf.ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf.in")]
          lbfin,
        /// <summary>
        /// lbmft2s2 property
        /// </summary>
          [XmlEnum("lbm.ft2/s2")]
          lbmft2s2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N.m")]
          Nm,
        /// <summary>
        /// pdlft property
        /// </summary>
          [XmlEnum("pdl.ft")]
          pdlft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US].ft")]
          tonfUSft,
        /// <summary>
        /// tonfUSmi property
        /// </summary>
          [XmlEnum("tonf[US].mi")]
          tonfUSmi
        }
        /// <summary>
        /// This class represents the MassPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumeUom xsd enumeration.")]
        public enum MassPerVolumeUom 
        {
        /// <summary>
        /// Item0001lbmbbl property
        /// </summary>
          [XmlEnum("0.001 lbm/bbl")]
          Item0001lbmbbl,
        /// <summary>
        /// Item0001lbmgalUK property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[UK]")]
          Item0001lbmgalUK,
        /// <summary>
        /// Item0001lbmgalUS property
        /// </summary>
          [XmlEnum("0.001 lbm/gal[US]")]
          Item0001lbmgalUS,
        /// <summary>
        /// Item001grainft3 property
        /// </summary>
          [XmlEnum("0.01 grain/ft3")]
          Item001grainft3,
        /// <summary>
        /// Item01lbmbbl property
        /// </summary>
          [XmlEnum("0.1 lbm/bbl")]
          Item01lbmbbl,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10 Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/gal[UK]")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/gal[US]")]
          ggalUS,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/gal[US]")]
          graingalUS,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/gal[UK]")]
          lbmgalUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/gal[US]")]
          lbmgalUS,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/gal[US]")]
          mggalUS,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// tm3 property
        /// </summary>
          [XmlEnum("t/m3")]
          tm3,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the MolarVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarVolumeUom xsd enumeration.")]
        public enum MolarVolumeUom 
        {
        /// <summary>
        /// dm3kmol property
        /// </summary>
          [XmlEnum("dm3/kmol")]
          dm3kmol,
        /// <summary>
        /// ft3lbmol property
        /// </summary>
          [XmlEnum("ft3/lbmol")]
          ft3lbmol,
        /// <summary>
        /// Lkmol property
        /// </summary>
          [XmlEnum("L/kmol")]
          Lkmol,
        /// <summary>
        /// Lmol property
        /// </summary>
          [XmlEnum("L/mol")]
          Lmol,
        /// <summary>
        /// m3kmol property
        /// </summary>
          [XmlEnum("m3/kmol")]
          m3kmol,
        /// <summary>
        /// m3mol property
        /// </summary>
          [XmlEnum("m3/mol")]
          m3mol
        }
        /// <summary>
        /// This class represents the AmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstanceUom xsd enumeration.")]
        public enum AmountOfSubstanceUom 
        {
        /// <summary>
        /// kmol property
        /// </summary>
          kmol,
        /// <summary>
        /// lbmol property
        /// </summary>
          lbmol,
        /// <summary>
        /// mmol property
        /// </summary>
          mmol,
        /// <summary>
        /// mol property
        /// </summary>
          mol,
        /// <summary>
        /// umol property
        /// </summary>
          umol
        }
        /// <summary>
        /// This class represents the DipoleMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DipoleMomentUom xsd enumeration.")]
        public enum DipoleMomentUom 
        {
        /// <summary>
        /// Cm property
        /// </summary>
          [XmlEnum("C.m")]
          Cm
        }
        /// <summary>
        /// This class represents the APINeutronUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APINeutronUom xsd enumeration.")]
        public enum APINeutronUom 
        {
        /// <summary>
        /// nAPI property
        /// </summary>
          nAPI
        }
        /// <summary>
        /// This class represents the ReciprocalTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalTimeUom xsd enumeration.")]
        public enum ReciprocalTimeUom 
        {
        /// <summary>
        /// Item1a property
        /// </summary>
          [XmlEnum("1/a")]
          Item1a,
        /// <summary>
        /// Item1d property
        /// </summary>
          [XmlEnum("1/d")]
          Item1d,
        /// <summary>
        /// Item1h property
        /// </summary>
          [XmlEnum("1/h")]
          Item1h,
        /// <summary>
        /// Item1min property
        /// </summary>
          [XmlEnum("1/min")]
          Item1min,
        /// <summary>
        /// Item1ms property
        /// </summary>
          [XmlEnum("1/ms")]
          Item1ms,
        /// <summary>
        /// Item1s property
        /// </summary>
          [XmlEnum("1/s")]
          Item1s,
        /// <summary>
        /// Item1us property
        /// </summary>
          [XmlEnum("1/us")]
          Item1us,
        /// <summary>
        /// Item1wk property
        /// </summary>
          [XmlEnum("1/wk")]
          Item1wk
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerPressureUom xsd enumeration.")]
        public enum TemperatureIntervalPerPressureUom 
        {
        /// <summary>
        /// deltaCkPa property
        /// </summary>
          [XmlEnum("deltaC/kPa")]
          deltaCkPa,
        /// <summary>
        /// deltaFpsi property
        /// </summary>
          [XmlEnum("deltaF/psi")]
          deltaFpsi,
        /// <summary>
        /// deltaKPa property
        /// </summary>
          [XmlEnum("deltaK/Pa")]
          deltaKPa
        }
        /// <summary>
        /// This class represents the LengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Item001ftft property
        /// </summary>
          [XmlEnum("0.01 ft/ft")]
          Item001ftft,
        /// <summary>
        /// Item130mm property
        /// </summary>
          [XmlEnum("1/30 m/m")]
          Item130mm,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the AreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaUom xsd enumeration.")]
        public enum AreaUom 
        {
        /// <summary>
        /// acre property
        /// </summary>
          acre,
        /// <summary>
        /// b property
        /// </summary>
          b,
        /// <summary>
        /// cm2 property
        /// </summary>
          cm2,
        /// <summary>
        /// ft2 property
        /// </summary>
          ft2,
        /// <summary>
        /// ha property
        /// </summary>
          ha,
        /// <summary>
        /// in2 property
        /// </summary>
          in2,
        /// <summary>
        /// km2 property
        /// </summary>
          km2,
        /// <summary>
        /// m2 property
        /// </summary>
          m2,
        /// <summary>
        /// miUS2 property
        /// </summary>
          [XmlEnum("mi[US]2")]
          miUS2,
        /// <summary>
        /// mi2 property
        /// </summary>
          mi2,
        /// <summary>
        /// mm2 property
        /// </summary>
          mm2,
        /// <summary>
        /// section property
        /// </summary>
          section,
        /// <summary>
        /// um2 property
        /// </summary>
          um2,
        /// <summary>
        /// yd2 property
        /// </summary>
          yd2
        }
        /// <summary>
        /// This class represents the APIGammaRayUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APIGammaRayUom xsd enumeration.")]
        public enum APIGammaRayUom 
        {
        /// <summary>
        /// gAPI property
        /// </summary>
          gAPI
        }
        /// <summary>
        /// This class represents the VolumetricThermalExpansionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumetricThermalExpansionUom xsd enumeration.")]
        public enum VolumetricThermalExpansionUom 
        {
        /// <summary>
        /// Item1deltaC property
        /// </summary>
          [XmlEnum("1/deltaC")]
          Item1deltaC,
        /// <summary>
        /// Item1deltaF property
        /// </summary>
          [XmlEnum("1/deltaF")]
          Item1deltaF,
        /// <summary>
        /// Item1deltaK property
        /// </summary>
          [XmlEnum("1/deltaK")]
          Item1deltaK,
        /// <summary>
        /// Item1deltaR property
        /// </summary>
          [XmlEnum("1/deltaR")]
          Item1deltaR,
        /// <summary>
        /// Item1E6m3m3deltaC property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.deltaC)")]
          Item1E6m3m3deltaC,
        /// <summary>
        /// Item1E6m3m3deltaF property
        /// </summary>
          [XmlEnum("1E-6 m3/(m3.deltaF)")]
          Item1E6m3m3deltaF,
        /// <summary>
        /// m3m3deltaK property
        /// </summary>
          [XmlEnum("m3/(m3.deltaK)")]
          m3m3deltaK,
        /// <summary>
        /// ppmvoldeltaC property
        /// </summary>
          [XmlEnum("ppm[vol]/deltaC")]
          ppmvoldeltaC,
        /// <summary>
        /// ppmvoldeltaF property
        /// </summary>
          [XmlEnum("ppm[vol]/deltaF")]
          ppmvoldeltaF
        }
        /// <summary>
        /// This class represents the ElectricCurrentDensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricCurrentDensityUom xsd enumeration.")]
        public enum ElectricCurrentDensityUom 
        {
        /// <summary>
        /// Acm2 property
        /// </summary>
          [XmlEnum("A/cm2")]
          Acm2,
        /// <summary>
        /// Aft2 property
        /// </summary>
          [XmlEnum("A/ft2")]
          Aft2,
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A/m2")]
          Am2,
        /// <summary>
        /// Amm2 property
        /// </summary>
          [XmlEnum("A/mm2")]
          Amm2,
        /// <summary>
        /// mAcm2 property
        /// </summary>
          [XmlEnum("mA/cm2")]
          mAcm2,
        /// <summary>
        /// mAft2 property
        /// </summary>
          [XmlEnum("mA/ft2")]
          mAft2,
        /// <summary>
        /// uAcm2 property
        /// </summary>
          [XmlEnum("uA/cm2")]
          uAcm2,
        /// <summary>
        /// uAin2 property
        /// </summary>
          [XmlEnum("uA/in2")]
          uAin2
        }
        /// <summary>
        /// This class represents the ForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceUom xsd enumeration.")]
        public enum ForceUom 
        {
        /// <summary>
        /// Item10kN property
        /// </summary>
          [XmlEnum("10 kN")]
          Item10kN,
        /// <summary>
        /// cN property
        /// </summary>
          cN,
        /// <summary>
        /// daN property
        /// </summary>
          daN,
        /// <summary>
        /// dN property
        /// </summary>
          dN,
        /// <summary>
        /// dyne property
        /// </summary>
          dyne,
        /// <summary>
        /// EN property
        /// </summary>
          EN,
        /// <summary>
        /// fN property
        /// </summary>
          fN,
        /// <summary>
        /// gf property
        /// </summary>
          gf,
        /// <summary>
        /// GN property
        /// </summary>
          GN,
        /// <summary>
        /// hN property
        /// </summary>
          hN,
        /// <summary>
        /// kdyne property
        /// </summary>
          kdyne,
        /// <summary>
        /// kgf property
        /// </summary>
          kgf,
        /// <summary>
        /// klbf property
        /// </summary>
          klbf,
        /// <summary>
        /// kN property
        /// </summary>
          kN,
        /// <summary>
        /// lbf property
        /// </summary>
          lbf,
        /// <summary>
        /// Mgf property
        /// </summary>
          Mgf,
        /// <summary>
        /// mN property
        /// </summary>
          mN,
        /// <summary>
        /// MN property
        /// </summary>
          MN,
        /// <summary>
        /// N property
        /// </summary>
          N,
        /// <summary>
        /// nN property
        /// </summary>
          nN,
        /// <summary>
        /// ozf property
        /// </summary>
          ozf,
        /// <summary>
        /// pdl property
        /// </summary>
          pdl,
        /// <summary>
        /// pN property
        /// </summary>
          pN,
        /// <summary>
        /// TN property
        /// </summary>
          TN,
        /// <summary>
        /// tonfUK property
        /// </summary>
          [XmlEnum("tonf[UK]")]
          tonfUK,
        /// <summary>
        /// tonfUS property
        /// </summary>
          [XmlEnum("tonf[US]")]
          tonfUS,
        /// <summary>
        /// uN property
        /// </summary>
          uN
        }
        /// <summary>
        /// This class represents the VolumePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerAreaUom xsd enumeration.")]
        public enum VolumePerAreaUom 
        {
        /// <summary>
        /// Item1E6bblacre property
        /// </summary>
          [XmlEnum("1E6 bbl/acre")]
          Item1E6bblacre,
        /// <summary>
        /// bblacre property
        /// </summary>
          [XmlEnum("bbl/acre")]
          bblacre,
        /// <summary>
        /// ft3ft2 property
        /// </summary>
          [XmlEnum("ft3/ft2")]
          ft3ft2,
        /// <summary>
        /// m3m2 property
        /// </summary>
          [XmlEnum("m3/m2")]
          m3m2
        }
        /// <summary>
        /// This class represents the ReciprocalElectricPotentialDifferenceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalElectricPotentialDifferenceUom xsd enumeration.")]
        public enum ReciprocalElectricPotentialDifferenceUom 
        {
        /// <summary>
        /// Item1uV property
        /// </summary>
          [XmlEnum("1/uV")]
          Item1uV,
        /// <summary>
        /// Item1V property
        /// </summary>
          [XmlEnum("1/V")]
          Item1V
        }
        /// <summary>
        /// This class represents the TimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerLengthUom xsd enumeration.")]
        public enum TimePerLengthUom 
        {
        /// <summary>
        /// Item0001hft property
        /// </summary>
          [XmlEnum("0.001 h/ft")]
          Item0001hft,
        /// <summary>
        /// hkm property
        /// </summary>
          [XmlEnum("h/km")]
          hkm,
        /// <summary>
        /// minft property
        /// </summary>
          [XmlEnum("min/ft")]
          minft,
        /// <summary>
        /// minm property
        /// </summary>
          [XmlEnum("min/m")]
          minm,
        /// <summary>
        /// mscm property
        /// </summary>
          [XmlEnum("ms/cm")]
          mscm,
        /// <summary>
        /// msft property
        /// </summary>
          [XmlEnum("ms/ft")]
          msft,
        /// <summary>
        /// msin property
        /// </summary>
          [XmlEnum("ms/in")]
          msin,
        /// <summary>
        /// msm property
        /// </summary>
          [XmlEnum("ms/m")]
          msm,
        /// <summary>
        /// nsft property
        /// </summary>
          [XmlEnum("ns/ft")]
          nsft,
        /// <summary>
        /// nsm property
        /// </summary>
          [XmlEnum("ns/m")]
          nsm,
        /// <summary>
        /// scm property
        /// </summary>
          [XmlEnum("s/cm")]
          scm,
        /// <summary>
        /// sft property
        /// </summary>
          [XmlEnum("s/ft")]
          sft,
        /// <summary>
        /// sin property
        /// </summary>
          [XmlEnum("s/in")]
          sin,
        /// <summary>
        /// sm property
        /// </summary>
          [XmlEnum("s/m")]
          sm,
        /// <summary>
        /// usft property
        /// </summary>
          [XmlEnum("us/ft")]
          usft,
        /// <summary>
        /// usin property
        /// </summary>
          [XmlEnum("us/in")]
          usin,
        /// <summary>
        /// usm property
        /// </summary>
          [XmlEnum("us/m")]
          usm
        }
        /// <summary>
        /// This class represents the VolumePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerPressureUom xsd enumeration.")]
        public enum VolumePerPressureUom 
        {
        /// <summary>
        /// bblpsi property
        /// </summary>
          [XmlEnum("bbl/psi")]
          bblpsi,
        /// <summary>
        /// m3kPa property
        /// </summary>
          [XmlEnum("m3/kPa")]
          m3kPa,
        /// <summary>
        /// m3Pa property
        /// </summary>
          [XmlEnum("m3/Pa")]
          m3Pa
        }
        /// <summary>
        /// This class represents the ElectricChargePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerAreaUom xsd enumeration.")]
        public enum ElectricChargePerAreaUom 
        {
        /// <summary>
        /// Ccm2 property
        /// </summary>
          [XmlEnum("C/cm2")]
          Ccm2,
        /// <summary>
        /// Cm2 property
        /// </summary>
          [XmlEnum("C/m2")]
          Cm2,
        /// <summary>
        /// Cmm2 property
        /// </summary>
          [XmlEnum("C/mm2")]
          Cmm2,
        /// <summary>
        /// mCm2 property
        /// </summary>
          [XmlEnum("mC/m2")]
          mCm2
        }
        /// <summary>
        /// This class represents the MassPerTimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimePerLengthUom xsd enumeration.")]
        public enum MassPerTimePerLengthUom 
        {
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg/(m.s)")]
          kgms,
        /// <summary>
        /// lbmfth property
        /// </summary>
          [XmlEnum("lbm/(ft.h)")]
          lbmfth,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm/(ft.s)")]
          lbmfts,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas
        }
        /// <summary>
        /// This class represents the MagneticFluxDensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFluxDensityUom xsd enumeration.")]
        public enum MagneticFluxDensityUom 
        {
        /// <summary>
        /// cgauss property
        /// </summary>
          cgauss,
        /// <summary>
        /// cT property
        /// </summary>
          cT,
        /// <summary>
        /// dgauss property
        /// </summary>
          dgauss,
        /// <summary>
        /// dT property
        /// </summary>
          dT,
        /// <summary>
        /// Egauss property
        /// </summary>
          Egauss,
        /// <summary>
        /// ET property
        /// </summary>
          ET,
        /// <summary>
        /// fgauss property
        /// </summary>
          fgauss,
        /// <summary>
        /// fT property
        /// </summary>
          fT,
        /// <summary>
        /// gauss property
        /// </summary>
          gauss,
        /// <summary>
        /// Ggauss property
        /// </summary>
          Ggauss,
        /// <summary>
        /// GT property
        /// </summary>
          GT,
        /// <summary>
        /// kgauss property
        /// </summary>
          kgauss,
        /// <summary>
        /// kT property
        /// </summary>
          kT,
        /// <summary>
        /// mgauss property
        /// </summary>
          mgauss,
        /// <summary>
        /// Mgauss property
        /// </summary>
          Mgauss,
        /// <summary>
        /// mT property
        /// </summary>
          mT,
        /// <summary>
        /// ngauss property
        /// </summary>
          ngauss,
        /// <summary>
        /// nT property
        /// </summary>
          nT,
        /// <summary>
        /// pgauss property
        /// </summary>
          pgauss,
        /// <summary>
        /// pT property
        /// </summary>
          pT,
        /// <summary>
        /// T property
        /// </summary>
          T,
        /// <summary>
        /// Tgauss property
        /// </summary>
          Tgauss,
        /// <summary>
        /// TT property
        /// </summary>
          TT,
        /// <summary>
        /// ugauss property
        /// </summary>
          ugauss,
        /// <summary>
        /// uT property
        /// </summary>
          uT
        }
        /// <summary>
        /// This class represents the SignalingEventPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SignalingEventPerTimeUom xsd enumeration.")]
        public enum SignalingEventPerTimeUom 
        {
        /// <summary>
        /// Bd property
        /// </summary>
          Bd
        }
        /// <summary>
        /// This class represents the EnergyPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerLengthUom xsd enumeration.")]
        public enum EnergyPerLengthUom 
        {
        /// <summary>
        /// Jm property
        /// </summary>
          [XmlEnum("J/m")]
          Jm,
        /// <summary>
        /// MJm property
        /// </summary>
          [XmlEnum("MJ/m")]
          MJm
        }
        /// <summary>
        /// This class represents the ElectricCurrentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// cA property
        /// </summary>
          cA,
        /// <summary>
        /// dA property
        /// </summary>
          dA,
        /// <summary>
        /// EA property
        /// </summary>
          EA,
        /// <summary>
        /// fA property
        /// </summary>
          fA,
        /// <summary>
        /// GA property
        /// </summary>
          GA,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// TA property
        /// </summary>
          TA,
        /// <summary>
        /// uA property
        /// </summary>
          uA
        }
        /// <summary>
        /// This class represents the PressureSquaredUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureSquaredUom xsd enumeration.")]
        public enum PressureSquaredUom 
        {
        /// <summary>
        /// bar2 property
        /// </summary>
          bar2,
        /// <summary>
        /// GPa2 property
        /// </summary>
          GPa2,
        /// <summary>
        /// kPa2 property
        /// </summary>
          kPa2,
        /// <summary>
        /// kpsi2 property
        /// </summary>
          kpsi2,
        /// <summary>
        /// Pa2 property
        /// </summary>
          Pa2,
        /// <summary>
        /// psi2 property
        /// </summary>
          psi2
        }
        /// <summary>
        /// This class represents the AngularAccelerationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AngularAccelerationUom xsd enumeration.")]
        public enum AngularAccelerationUom 
        {
        /// <summary>
        /// rads2 property
        /// </summary>
          [XmlEnum("rad/s2")]
          rads2,
        /// <summary>
        /// rpms property
        /// </summary>
          [XmlEnum("rpm/s")]
          rpms
        }
        /// <summary>
        /// This class represents the ReciprocalMassTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalMassTimeUom xsd enumeration.")]
        public enum ReciprocalMassTimeUom 
        {
        /// <summary>
        /// Item1kgs property
        /// </summary>
          [XmlEnum("1/(kg.s)")]
          Item1kgs,
        /// <summary>
        /// Bqkg property
        /// </summary>
          [XmlEnum("Bq/kg")]
          Bqkg,
        /// <summary>
        /// pCig property
        /// </summary>
          [XmlEnum("pCi/g")]
          pCig
        }
        /// <summary>
        /// This class represents the ThermalDiffusivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalDiffusivityUom xsd enumeration.")]
        public enum ThermalDiffusivityUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s
        }
        /// <summary>
        /// This class represents the VolumePerTimeLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimeLengthUom xsd enumeration.")]
        public enum VolumePerTimeLengthUom 
        {
        /// <summary>
        /// Item1000bblftd property
        /// </summary>
          [XmlEnum("1000 bbl.ft/d")]
          Item1000bblftd,
        /// <summary>
        /// Item1000m4d property
        /// </summary>
          [XmlEnum("1000 m4/d")]
          Item1000m4d,
        /// <summary>
        /// m4s property
        /// </summary>
          [XmlEnum("m4/s")]
          m4s
        }
        /// <summary>
        /// This class represents the PermeabilityRockUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermeabilityRockUom xsd enumeration.")]
        public enum PermeabilityRockUom 
        {
        /// <summary>
        /// D property
        /// </summary>
          D,
        /// <summary>
        /// DAPI property
        /// </summary>
          [XmlEnum("D[API]")]
          DAPI,
        /// <summary>
        /// mD property
        /// </summary>
          mD,
        /// <summary>
        /// TDAPI property
        /// </summary>
          [XmlEnum("TD[API]")]
          TDAPI
        }
        /// <summary>
        /// This class represents the SecondMomentOfAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SecondMomentOfAreaUom xsd enumeration.")]
        public enum SecondMomentOfAreaUom 
        {
        /// <summary>
        /// cm4 property
        /// </summary>
          cm4,
        /// <summary>
        /// in4 property
        /// </summary>
          in4,
        /// <summary>
        /// m4 property
        /// </summary>
          m4
        }
        /// <summary>
        /// This class represents the ForceAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForceAreaUom xsd enumeration.")]
        public enum ForceAreaUom 
        {
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne.cm2")]
          dynecm2,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf.m2")]
          kgfm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN.m2")]
          kNm2,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf.in2")]
          lbfin2,
        /// <summary>
        /// mNm2 property
        /// </summary>
          [XmlEnum("mN.m2")]
          mNm2,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N.m2")]
          Nm2,
        /// <summary>
        /// pdlcm2 property
        /// </summary>
          [XmlEnum("pdl.cm2")]
          pdlcm2,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK].ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US].ft2")]
          tonfUSft2
        }
        /// <summary>
        /// This class represents the ElectricFieldStrengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricFieldStrengthUom xsd enumeration.")]
        public enum ElectricFieldStrengthUom 
        {
        /// <summary>
        /// mVft property
        /// </summary>
          [XmlEnum("mV/ft")]
          mVft,
        /// <summary>
        /// mVm property
        /// </summary>
          [XmlEnum("mV/m")]
          mVm,
        /// <summary>
        /// uVft property
        /// </summary>
          [XmlEnum("uV/ft")]
          uVft,
        /// <summary>
        /// uVm property
        /// </summary>
          [XmlEnum("uV/m")]
          uVm,
        /// <summary>
        /// Vm property
        /// </summary>
          [XmlEnum("V/m")]
          Vm
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerAreaUom xsd enumeration.")]
        public enum AmountOfSubstancePerAreaUom 
        {
        /// <summary>
        /// molm2 property
        /// </summary>
          [XmlEnum("mol/m2")]
          molm2
        }
        /// <summary>
        /// This class represents the ThermalConductivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalConductivityUom xsd enumeration.")]
        public enum ThermalConductivityUom 
        {
        /// <summary>
        /// BtuIThftdeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft.deltaF)")]
          BtuIThftdeltaF,
        /// <summary>
        /// calthhcmdeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm.deltaC)")]
          calthhcmdeltaC,
        /// <summary>
        /// calthscmdeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm.deltaC)")]
          calthscmdeltaC,
        /// <summary>
        /// kcalthhmdeltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(h.m.deltaC)")]
          kcalthhmdeltaC,
        /// <summary>
        /// WmdeltaK property
        /// </summary>
          [XmlEnum("W/(m.deltaK)")]
          WmdeltaK
        }
        /// <summary>
        /// This class represents the AreaPerAmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerAmountOfSubstanceUom xsd enumeration.")]
        public enum AreaPerAmountOfSubstanceUom 
        {
        /// <summary>
        /// m2mol property
        /// </summary>
          [XmlEnum("m2/mol")]
          m2mol
        }
        /// <summary>
        /// This class represents the LogarithmicPowerRatioPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LogarithmicPowerRatioPerLengthUom xsd enumeration.")]
        public enum LogarithmicPowerRatioPerLengthUom 
        {
        /// <summary>
        /// Bm property
        /// </summary>
          [XmlEnum("B/m")]
          Bm,
        /// <summary>
        /// dBft property
        /// </summary>
          [XmlEnum("dB/ft")]
          dBft,
        /// <summary>
        /// dBkm property
        /// </summary>
          [XmlEnum("dB/km")]
          dBkm,
        /// <summary>
        /// dBm property
        /// </summary>
          [XmlEnum("dB/m")]
          dBm
        }
        /// <summary>
        /// This class represents the ReciprocalLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalLengthUom xsd enumeration.")]
        public enum ReciprocalLengthUom 
        {
        /// <summary>
        /// Item1angstrom property
        /// </summary>
          [XmlEnum("1/angstrom")]
          Item1angstrom,
        /// <summary>
        /// Item1cm property
        /// </summary>
          [XmlEnum("1/cm")]
          Item1cm,
        /// <summary>
        /// Item1ft property
        /// </summary>
          [XmlEnum("1/ft")]
          Item1ft,
        /// <summary>
        /// Item1in property
        /// </summary>
          [XmlEnum("1/in")]
          Item1in,
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// Item1mi property
        /// </summary>
          [XmlEnum("1/mi")]
          Item1mi,
        /// <summary>
        /// Item1mm property
        /// </summary>
          [XmlEnum("1/mm")]
          Item1mm,
        /// <summary>
        /// Item1nm property
        /// </summary>
          [XmlEnum("1/nm")]
          Item1nm,
        /// <summary>
        /// Item1yd property
        /// </summary>
          [XmlEnum("1/yd")]
          Item1yd,
        /// <summary>
        /// Item1E91ft property
        /// </summary>
          [XmlEnum("1E-9 1/ft")]
          Item1E91ft
        }
        /// <summary>
        /// This class represents the LuminanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminanceUom xsd enumeration.")]
        public enum LuminanceUom 
        {
        /// <summary>
        /// cdm2 property
        /// </summary>
          [XmlEnum("cd/m2")]
          cdm2
        }
        /// <summary>
        /// This class represents the VolumePerTimePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerTimeUom xsd enumeration.")]
        public enum VolumePerTimePerTimeUom 
        {
        /// <summary>
        /// bbld2 property
        /// </summary>
          [XmlEnum("bbl/d2")]
          bbld2,
        /// <summary>
        /// bblh2 property
        /// </summary>
          [XmlEnum("bbl/h2")]
          bblh2,
        /// <summary>
        /// dm3s2 property
        /// </summary>
          [XmlEnum("dm3/s2")]
          dm3s2,
        /// <summary>
        /// ft3d2 property
        /// </summary>
          [XmlEnum("ft3/d2")]
          ft3d2,
        /// <summary>
        /// ft3h2 property
        /// </summary>
          [XmlEnum("ft3/h2")]
          ft3h2,
        /// <summary>
        /// ft3min2 property
        /// </summary>
          [XmlEnum("ft3/min2")]
          ft3min2,
        /// <summary>
        /// ft3s2 property
        /// </summary>
          [XmlEnum("ft3/s2")]
          ft3s2,
        /// <summary>
        /// galUKh2 property
        /// </summary>
          [XmlEnum("gal[UK]/h2")]
          galUKh2,
        /// <summary>
        /// galUKmin2 property
        /// </summary>
          [XmlEnum("gal[UK]/min2")]
          galUKmin2,
        /// <summary>
        /// galUSh2 property
        /// </summary>
          [XmlEnum("gal[US]/h2")]
          galUSh2,
        /// <summary>
        /// galUSmin2 property
        /// </summary>
          [XmlEnum("gal[US]/min2")]
          galUSmin2,
        /// <summary>
        /// Ls2 property
        /// </summary>
          [XmlEnum("L/s2")]
          Ls2,
        /// <summary>
        /// m3d2 property
        /// </summary>
          [XmlEnum("m3/d2")]
          m3d2,
        /// <summary>
        /// m3s2 property
        /// </summary>
          [XmlEnum("m3/s2")]
          m3s2
        }
        /// <summary>
        /// This class represents the MolarHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarHeatCapacityUom xsd enumeration.")]
        public enum MolarHeatCapacityUom 
        {
        /// <summary>
        /// BtuITlbmoldeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbmol.deltaF)")]
          BtuITlbmoldeltaF,
        /// <summary>
        /// calthmoldeltaC property
        /// </summary>
          [XmlEnum("cal[th]/(mol.deltaC)")]
          calthmoldeltaC,
        /// <summary>
        /// JmoldeltaK property
        /// </summary>
          [XmlEnum("J/(mol.deltaK)")]
          JmoldeltaK,
        /// <summary>
        /// kJkmoldeltaK property
        /// </summary>
          [XmlEnum("kJ/(kmol.deltaK)")]
          kJkmoldeltaK
        }
        /// <summary>
        /// This class represents the VolumeFlowRatePerVolumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumeFlowRatePerVolumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRatePerVolumeFlowRateUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// bbldbbld property
        /// </summary>
          [XmlEnum("(bbl/d)/(bbl/d)")]
          bbldbbld,
        /// <summary>
        /// m3dm3d property
        /// </summary>
          [XmlEnum("(m3/d)/(m3/d)")]
          m3dm3d,
        /// <summary>
        /// m3sm3s property
        /// </summary>
          [XmlEnum("(m3/s)/(m3/s)")]
          m3sm3s,
        /// <summary>
        /// Item1E6ft3dbbld property
        /// </summary>
          [XmlEnum("1E6 (ft3/d)/(bbl/d)")]
          Item1E6ft3dbbld,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc
        }
        /// <summary>
        /// This class represents the FrequencyIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the FrequencyIntervalUom xsd enumeration.")]
        public enum FrequencyIntervalUom 
        {
        /// <summary>
        /// O property
        /// </summary>
          O
        }
        /// <summary>
        /// This class represents the TemperatureIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalUom xsd enumeration.")]
        public enum TemperatureIntervalUom 
        {
        /// <summary>
        /// deltaC property
        /// </summary>
          deltaC,
        /// <summary>
        /// deltaF property
        /// </summary>
          deltaF,
        /// <summary>
        /// deltaK property
        /// </summary>
          deltaK,
        /// <summary>
        /// deltaR property
        /// </summary>
          deltaR
        }
        /// <summary>
        /// This class represents the RadiantIntensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the RadiantIntensityUom xsd enumeration.")]
        public enum RadiantIntensityUom 
        {
        /// <summary>
        /// Wsr property
        /// </summary>
          [XmlEnum("W/sr")]
          Wsr
        }
        /// <summary>
        /// This class represents the PermeabilityLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermeabilityLengthUom xsd enumeration.")]
        public enum PermeabilityLengthUom 
        {
        /// <summary>
        /// Dft property
        /// </summary>
          [XmlEnum("D.ft")]
          Dft,
        /// <summary>
        /// Dm property
        /// </summary>
          [XmlEnum("D.m")]
          Dm,
        /// <summary>
        /// mDft property
        /// </summary>
          [XmlEnum("mD.ft")]
          mDft,
        /// <summary>
        /// mDm property
        /// </summary>
          [XmlEnum("mD.m")]
          mDm,
        /// <summary>
        /// TDAPIm property
        /// </summary>
          [XmlEnum("TD[API].m")]
          TDAPIm
        }
        /// <summary>
        /// This class represents the DataTransferSpeedUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DataTransferSpeedUom xsd enumeration.")]
        public enum DataTransferSpeedUom 
        {
        /// <summary>
        /// bits property
        /// </summary>
          [XmlEnum("bit/s")]
          bits,
        /// <summary>
        /// bytes property
        /// </summary>
          [XmlEnum("byte/s")]
          bytes
        }
        /// <summary>
        /// This class represents the InductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the InductanceUom xsd enumeration.")]
        public enum InductanceUom 
        {
        /// <summary>
        /// cH property
        /// </summary>
          cH,
        /// <summary>
        /// dH property
        /// </summary>
          dH,
        /// <summary>
        /// EH property
        /// </summary>
          EH,
        /// <summary>
        /// fH property
        /// </summary>
          fH,
        /// <summary>
        /// GH property
        /// </summary>
          GH,
        /// <summary>
        /// H property
        /// </summary>
          H,
        /// <summary>
        /// kH property
        /// </summary>
          kH,
        /// <summary>
        /// MH property
        /// </summary>
          MH,
        /// <summary>
        /// mH property
        /// </summary>
          mH,
        /// <summary>
        /// nH property
        /// </summary>
          nH,
        /// <summary>
        /// TH property
        /// </summary>
          TH,
        /// <summary>
        /// uH property
        /// </summary>
          uH
        }
        /// <summary>
        /// This class represents the KinematicViscosityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the KinematicViscosityUom xsd enumeration.")]
        public enum KinematicViscosityUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// cSt property
        /// </summary>
          cSt,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s,
        /// <summary>
        /// Pasm3kg property
        /// </summary>
          [XmlEnum("Pa.s.m3/kg")]
          Pasm3kg,
        /// <summary>
        /// St property
        /// </summary>
          St
        }
        /// <summary>
        /// This class represents the VolumePerTimePerPressureLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerPressureLengthUom xsd enumeration.")]
        public enum VolumePerTimePerPressureLengthUom 
        {
        /// <summary>
        /// bblftpsid property
        /// </summary>
          [XmlEnum("bbl/(ft.psi.d)")]
          bblftpsid,
        /// <summary>
        /// ft3ftpsid property
        /// </summary>
          [XmlEnum("ft3/(ft.psi.d)")]
          ft3ftpsid,
        /// <summary>
        /// m2kPad property
        /// </summary>
          [XmlEnum("m2/(kPa.d)")]
          m2kPad,
        /// <summary>
        /// m2Pas property
        /// </summary>
          [XmlEnum("m2/(Pa.s)")]
          m2Pas
        }
        /// <summary>
        /// This class represents the ReciprocalForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalForceUom xsd enumeration.")]
        public enum ReciprocalForceUom 
        {
        /// <summary>
        /// Item1lbf property
        /// </summary>
          [XmlEnum("1/lbf")]
          Item1lbf,
        /// <summary>
        /// Item1N property
        /// </summary>
          [XmlEnum("1/N")]
          Item1N
        }
        /// <summary>
        /// This class represents the ReciprocalAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalAreaUom xsd enumeration.")]
        public enum ReciprocalAreaUom 
        {
        /// <summary>
        /// Item1ft2 property
        /// </summary>
          [XmlEnum("1/ft2")]
          Item1ft2,
        /// <summary>
        /// Item1km2 property
        /// </summary>
          [XmlEnum("1/km2")]
          Item1km2,
        /// <summary>
        /// Item1m2 property
        /// </summary>
          [XmlEnum("1/m2")]
          Item1m2,
        /// <summary>
        /// Item1mi2 property
        /// </summary>
          [XmlEnum("1/mi2")]
          Item1mi2
        }
        /// <summary>
        /// This class represents the PressurePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressurePerTimeUom xsd enumeration.")]
        public enum PressurePerTimeUom 
        {
        /// <summary>
        /// atmh property
        /// </summary>
          [XmlEnum("atm/h")]
          atmh,
        /// <summary>
        /// barh property
        /// </summary>
          [XmlEnum("bar/h")]
          barh,
        /// <summary>
        /// kPah property
        /// </summary>
          [XmlEnum("kPa/h")]
          kPah,
        /// <summary>
        /// kPamin property
        /// </summary>
          [XmlEnum("kPa/min")]
          kPamin,
        /// <summary>
        /// MPah property
        /// </summary>
          [XmlEnum("MPa/h")]
          MPah,
        /// <summary>
        /// Pah property
        /// </summary>
          [XmlEnum("Pa/h")]
          Pah,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa/s")]
          Pas,
        /// <summary>
        /// psih property
        /// </summary>
          [XmlEnum("psi/h")]
          psih,
        /// <summary>
        /// psimin property
        /// </summary>
          [XmlEnum("psi/min")]
          psimin
        }
        /// <summary>
        /// This class represents the ElectricChargeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargeUom xsd enumeration.")]
        public enum ElectricChargeUom 
        {
        /// <summary>
        /// Ah property
        /// </summary>
          [XmlEnum("A.h")]
          Ah,
        /// <summary>
        /// As property
        /// </summary>
          [XmlEnum("A.s")]
          As,
        /// <summary>
        /// C property
        /// </summary>
          C,
        /// <summary>
        /// cC property
        /// </summary>
          cC,
        /// <summary>
        /// dC property
        /// </summary>
          dC,
        /// <summary>
        /// EC property
        /// </summary>
          EC,
        /// <summary>
        /// fC property
        /// </summary>
          fC,
        /// <summary>
        /// GC property
        /// </summary>
          GC,
        /// <summary>
        /// kC property
        /// </summary>
          kC,
        /// <summary>
        /// MC property
        /// </summary>
          MC,
        /// <summary>
        /// mC property
        /// </summary>
          mC,
        /// <summary>
        /// nC property
        /// </summary>
          nC,
        /// <summary>
        /// pC property
        /// </summary>
          pC,
        /// <summary>
        /// TC property
        /// </summary>
          TC,
        /// <summary>
        /// uC property
        /// </summary>
          uC
        }
        /// <summary>
        /// This class represents the LuminousEfficacyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousEfficacyUom xsd enumeration.")]
        public enum LuminousEfficacyUom 
        {
        /// <summary>
        /// lmW property
        /// </summary>
          [XmlEnum("lm/W")]
          lmW
        }
        /// <summary>
        /// This class represents the PowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerUom xsd enumeration.")]
        public enum PowerUom 
        {
        /// <summary>
        /// cW property
        /// </summary>
          cW,
        /// <summary>
        /// dW property
        /// </summary>
          dW,
        /// <summary>
        /// EW property
        /// </summary>
          EW,
        /// <summary>
        /// fW property
        /// </summary>
          fW,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// hp property
        /// </summary>
          hp,
        /// <summary>
        /// hpelec property
        /// </summary>
          [XmlEnum("hp[elec]")]
          hpelec,
        /// <summary>
        /// hphyd property
        /// </summary>
          [XmlEnum("hp[hyd]")]
          hphyd,
        /// <summary>
        /// hpmetric property
        /// </summary>
          [XmlEnum("hp[metric]")]
          hpmetric,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// pW property
        /// </summary>
          pW,
        /// <summary>
        /// tonRefrig property
        /// </summary>
          tonRefrig,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// W property
        /// </summary>
          W
        }
        /// <summary>
        /// This class represents the PressurePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressurePerVolumeUom xsd enumeration.")]
        public enum PressurePerVolumeUom 
        {
        /// <summary>
        /// Pam3 property
        /// </summary>
          [XmlEnum("Pa/m3")]
          Pam3,
        /// <summary>
        /// psi2dcPft3 property
        /// </summary>
          [XmlEnum("psi2.d/(cP.ft3)")]
          psi2dcPft3
        }
        /// <summary>
        /// This class represents the ActivityOfRadioactivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ActivityOfRadioactivityUom xsd enumeration.")]
        public enum ActivityOfRadioactivityUom 
        {
        /// <summary>
        /// Bq property
        /// </summary>
          Bq,
        /// <summary>
        /// Ci property
        /// </summary>
          Ci,
        /// <summary>
        /// GBq property
        /// </summary>
          GBq,
        /// <summary>
        /// MBq property
        /// </summary>
          MBq,
        /// <summary>
        /// mCi property
        /// </summary>
          mCi,
        /// <summary>
        /// nCi property
        /// </summary>
          nCi,
        /// <summary>
        /// pCi property
        /// </summary>
          pCi,
        /// <summary>
        /// TBq property
        /// </summary>
          TBq,
        /// <summary>
        /// uCi property
        /// </summary>
          uCi
        }
        /// <summary>
        /// This class represents the ElectricPotentialDifferenceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricPotentialDifferenceUom xsd enumeration.")]
        public enum ElectricPotentialDifferenceUom 
        {
        /// <summary>
        /// cV property
        /// </summary>
          cV,
        /// <summary>
        /// dV property
        /// </summary>
          dV,
        /// <summary>
        /// fV property
        /// </summary>
          fV,
        /// <summary>
        /// GV property
        /// </summary>
          GV,
        /// <summary>
        /// kV property
        /// </summary>
          kV,
        /// <summary>
        /// mV property
        /// </summary>
          mV,
        /// <summary>
        /// MV property
        /// </summary>
          MV,
        /// <summary>
        /// nV property
        /// </summary>
          nV,
        /// <summary>
        /// pV property
        /// </summary>
          pV,
        /// <summary>
        /// TV property
        /// </summary>
          TV,
        /// <summary>
        /// uV property
        /// </summary>
          uV,
        /// <summary>
        /// V property
        /// </summary>
          V
        }
        /// <summary>
        /// This class represents the LengthPerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerPressureUom xsd enumeration.")]
        public enum LengthPerPressureUom 
        {
        /// <summary>
        /// ftpsi property
        /// </summary>
          [XmlEnum("ft/psi")]
          ftpsi,
        /// <summary>
        /// mkPa property
        /// </summary>
          [XmlEnum("m/kPa")]
          mkPa,
        /// <summary>
        /// mPa property
        /// </summary>
          [XmlEnum("m/Pa")]
          mPa
        }
        /// <summary>
        /// This class represents the MagneticVectorPotentialUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticVectorPotentialUom xsd enumeration.")]
        public enum MagneticVectorPotentialUom 
        {
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb/m")]
          Wbm,
        /// <summary>
        /// Wbmm property
        /// </summary>
          [XmlEnum("Wb/mm")]
          Wbmm
        }
        /// <summary>
        /// This class represents the MagneticFieldStrengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticFieldStrengthUom xsd enumeration.")]
        public enum MagneticFieldStrengthUom 
        {
        /// <summary>
        /// Am property
        /// </summary>
          [XmlEnum("A/m")]
          Am,
        /// <summary>
        /// Amm property
        /// </summary>
          [XmlEnum("A/mm")]
          Amm,
        /// <summary>
        /// Oe property
        /// </summary>
          Oe
        }
        /// <summary>
        /// This class represents the VolumePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimeUom xsd enumeration.")]
        public enum VolumePerTimeUom 
        {
        /// <summary>
        /// Item130cm3min property
        /// </summary>
          [XmlEnum("1/30 cm3/min")]
          Item130cm3min,
        /// <summary>
        /// Item1000bbld property
        /// </summary>
          [XmlEnum("1000 bbl/d")]
          Item1000bbld,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000 ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000 m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000 m3/h")]
          Item1000m3h,
        /// <summary>
        /// Item1E6bbld property
        /// </summary>
          [XmlEnum("1E6 bbl/d")]
          Item1E6bbld,
        /// <summary>
        /// Item1E6ft3d property
        /// </summary>
          [XmlEnum("1E6 ft3/d")]
          Item1E6ft3d,
        /// <summary>
        /// Item1E6m3d property
        /// </summary>
          [XmlEnum("1E6 m3/d")]
          Item1E6m3d,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bblh property
        /// </summary>
          [XmlEnum("bbl/h")]
          bblh,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("gal[UK]/d")]
          galUKd,
        /// <summary>
        /// galUKh property
        /// </summary>
          [XmlEnum("gal[UK]/h")]
          galUKh,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("gal[UK]/min")]
          galUKmin,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("gal[US]/d")]
          galUSd,
        /// <summary>
        /// galUSh property
        /// </summary>
          [XmlEnum("gal[US]/h")]
          galUSh,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("gal[US]/min")]
          galUSmin,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s
        }
        /// <summary>
        /// This class represents the AreaPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerMassUom xsd enumeration.")]
        public enum AreaPerMassUom 
        {
        /// <summary>
        /// cm2g property
        /// </summary>
          [XmlEnum("cm2/g")]
          cm2g,
        /// <summary>
        /// ft2lbm property
        /// </summary>
          [XmlEnum("ft2/lbm")]
          ft2lbm,
        /// <summary>
        /// m2g property
        /// </summary>
          [XmlEnum("m2/g")]
          m2g,
        /// <summary>
        /// m2kg property
        /// </summary>
          [XmlEnum("m2/kg")]
          m2kg
        }
        /// <summary>
        /// This class represents the ThermalResistanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalResistanceUom xsd enumeration.")]
        public enum ThermalResistanceUom 
        {
        /// <summary>
        /// deltaKW property
        /// </summary>
          [XmlEnum("deltaK/W")]
          deltaKW
        }
        /// <summary>
        /// This class represents the ForcePerForceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerForceUom xsd enumeration.")]
        public enum ForcePerForceUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// kgfkgf property
        /// </summary>
          [XmlEnum("kgf/kgf")]
          kgfkgf,
        /// <summary>
        /// lbflbf property
        /// </summary>
          [XmlEnum("lbf/lbf")]
          lbflbf,
        /// <summary>
        /// NN property
        /// </summary>
          [XmlEnum("N/N")]
          NN
        }
        /// <summary>
        /// This class represents the MassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassUom xsd enumeration.")]
        public enum MassUom 
        {
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// cg property
        /// </summary>
          cg,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cwtUK property
        /// </summary>
          [XmlEnum("cwt[UK]")]
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          [XmlEnum("cwt[US]")]
          cwtUS,
        /// <summary>
        /// Eg property
        /// </summary>
          Eg,
        /// <summary>
        /// fg property
        /// </summary>
          fg,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// Gg property
        /// </summary>
          Gg,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// hg property
        /// </summary>
          hg,
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// ng property
        /// </summary>
          ng,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// ozmtroy property
        /// </summary>
          [XmlEnum("ozm[troy]")]
          ozmtroy,
        /// <summary>
        /// pg property
        /// </summary>
          pg,
        /// <summary>
        /// sack94lbm property
        /// </summary>
          [XmlEnum("sack[94lbm]")]
          sack94lbm,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// Tg property
        /// </summary>
          Tg,
        /// <summary>
        /// tonUK property
        /// </summary>
          [XmlEnum("ton[UK]")]
          tonUK,
        /// <summary>
        /// tonUS property
        /// </summary>
          [XmlEnum("ton[US]")]
          tonUS,
        /// <summary>
        /// ug property
        /// </summary>
          ug
        }
        /// <summary>
        /// This class represents the SpecificHeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the SpecificHeatCapacityUom xsd enumeration.")]
        public enum SpecificHeatCapacityUom 
        {
        /// <summary>
        /// BtuITlbmdeltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.deltaF)")]
          BtuITlbmdeltaF,
        /// <summary>
        /// BtuITlbmdeltaR property
        /// </summary>
          [XmlEnum("Btu[IT]/(lbm.deltaR)")]
          BtuITlbmdeltaR,
        /// <summary>
        /// calthgdeltaK property
        /// </summary>
          [XmlEnum("cal[th]/(g.deltaK)")]
          calthgdeltaK,
        /// <summary>
        /// JgdeltaK property
        /// </summary>
          [XmlEnum("J/(g.deltaK)")]
          JgdeltaK,
        /// <summary>
        /// JkgdeltaK property
        /// </summary>
          [XmlEnum("J/(kg.deltaK)")]
          JkgdeltaK,
        /// <summary>
        /// kcalthkgdeltaC property
        /// </summary>
          [XmlEnum("kcal[th]/(kg.deltaC)")]
          kcalthkgdeltaC,
        /// <summary>
        /// kJkgdeltaK property
        /// </summary>
          [XmlEnum("kJ/(kg.deltaK)")]
          kJkgdeltaK,
        /// <summary>
        /// kWhkgdeltaC property
        /// </summary>
          [XmlEnum("kW.h/(kg.deltaC)")]
          kWhkgdeltaC
        }
        /// <summary>
        /// This class represents the LengthPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerMassUom xsd enumeration.")]
        public enum LengthPerMassUom 
        {
        /// <summary>
        /// ftlbm property
        /// </summary>
          [XmlEnum("ft/lbm")]
          ftlbm,
        /// <summary>
        /// mkg property
        /// </summary>
          [XmlEnum("m/kg")]
          mkg
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerTimePerAreaUom xsd enumeration.")]
        public enum AmountOfSubstancePerTimePerAreaUom 
        {
        /// <summary>
        /// lbmolhft2 property
        /// </summary>
          [XmlEnum("lbmol/(h.ft2)")]
          lbmolhft2,
        /// <summary>
        /// lbmolsft2 property
        /// </summary>
          [XmlEnum("lbmol/(s.ft2)")]
          lbmolsft2,
        /// <summary>
        /// molsm2 property
        /// </summary>
          [XmlEnum("mol/(s.m2)")]
          molsm2
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degR property
        /// </summary>
          degR,
        /// <summary>
        /// K property
        /// </summary>
          K
        }
        /// <summary>
        /// This class represents the LinearThermalExpansionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LinearThermalExpansionUom xsd enumeration.")]
        public enum LinearThermalExpansionUom 
        {
        /// <summary>
        /// Item1deltaK property
        /// </summary>
          [XmlEnum("1/deltaK")]
          Item1deltaK,
        /// <summary>
        /// inindeltaF property
        /// </summary>
          [XmlEnum("in/(in.deltaF)")]
          inindeltaF,
        /// <summary>
        /// mmdeltaK property
        /// </summary>
          [XmlEnum("m/(m.deltaK)")]
          mmdeltaK,
        /// <summary>
        /// mmmmdeltaK property
        /// </summary>
          [XmlEnum("mm/(mm.deltaK)")]
          mmmmdeltaK
        }
        /// <summary>
        /// This class represents the MassPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerLengthUom xsd enumeration.")]
        public enum MassPerLengthUom 
        {
        /// <summary>
        /// kgmcm2 property
        /// </summary>
          [XmlEnum("kg.m/cm2")]
          kgmcm2,
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg/m")]
          kgm,
        /// <summary>
        /// klbmin property
        /// </summary>
          [XmlEnum("klbm/in")]
          klbmin,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm/ft")]
          lbmft,
        /// <summary>
        /// Mgin property
        /// </summary>
          [XmlEnum("Mg/in")]
          Mgin
        }
        /// <summary>
        /// This class represents the ElectricalResistivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricalResistivityUom xsd enumeration.")]
        public enum ElectricalResistivityUom 
        {
        /// <summary>
        /// kohmm property
        /// </summary>
          [XmlEnum("kohm.m")]
          kohmm,
        /// <summary>
        /// nohmmil2ft property
        /// </summary>
          [XmlEnum("nohm.mil2/ft")]
          nohmmil2ft,
        /// <summary>
        /// nohmmm2m property
        /// </summary>
          [XmlEnum("nohm.mm2/m")]
          nohmmm2m,
        /// <summary>
        /// ohmcm property
        /// </summary>
          [XmlEnum("ohm.cm")]
          ohmcm,
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm.m")]
          ohmm,
        /// <summary>
        /// ohmm2m property
        /// </summary>
          [XmlEnum("ohm.m2/m")]
          ohmm2m
        }
        /// <summary>
        /// This class represents the MassPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerMassUom xsd enumeration.")]
        public enum MassPerMassUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// mass property
        /// </summary>
          [XmlEnum("%[mass]")]
          mass,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// gt property
        /// </summary>
          [XmlEnum("g/t")]
          gt,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgsack94lbm property
        /// </summary>
          [XmlEnum("kg/sack[94lbm]")]
          kgsack94lbm,
        /// <summary>
        /// kgt property
        /// </summary>
          [XmlEnum("kg/t")]
          kgt,
        /// <summary>
        /// mgg property
        /// </summary>
          [XmlEnum("mg/g")]
          mgg,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// ngg property
        /// </summary>
          [XmlEnum("ng/g")]
          ngg,
        /// <summary>
        /// ngmg property
        /// </summary>
          [XmlEnum("ng/mg")]
          ngmg,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmmass property
        /// </summary>
          [XmlEnum("ppm[mass]")]
          ppmmass,
        /// <summary>
        /// ugg property
        /// </summary>
          [XmlEnum("ug/g")]
          ugg,
        /// <summary>
        /// ugmg property
        /// </summary>
          [XmlEnum("ug/mg")]
          ugmg
        }
        /// <summary>
        /// This class represents the PressureSquaredPerForceTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureSquaredPerForceTimePerAreaUom xsd enumeration.")]
        public enum PressureSquaredPerForceTimePerAreaUom 
        {
        /// <summary>
        /// Item0001kPa2cP property
        /// </summary>
          [XmlEnum("0.001 kPa2/cP")]
          Item0001kPa2cP,
        /// <summary>
        /// bar2cP property
        /// </summary>
          [XmlEnum("bar2/cP")]
          bar2cP,
        /// <summary>
        /// kPa2cP property
        /// </summary>
          [XmlEnum("kPa2/cP")]
          kPa2cP,
        /// <summary>
        /// Pa2Pas property
        /// </summary>
          [XmlEnum("Pa2/(Pa.s)")]
          Pa2Pas,
        /// <summary>
        /// psi2cP property
        /// </summary>
          [XmlEnum("psi2/cP")]
          psi2cP
        }
        /// <summary>
        /// This class represents the LuminousFluxUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousFluxUom xsd enumeration.")]
        public enum LuminousFluxUom 
        {
        /// <summary>
        /// lm property
        /// </summary>
          lm
        }
        /// <summary>
        /// This class represents the VolumePerTimePerPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerPressureUom xsd enumeration.")]
        public enum VolumePerTimePerPressureUom 
        {
        /// <summary>
        /// Item1000ft3psid property
        /// </summary>
          [XmlEnum("1000 ft3/(psi.d)")]
          Item1000ft3psid,
        /// <summary>
        /// bblkPad property
        /// </summary>
          [XmlEnum("bbl/(kPa.d)")]
          bblkPad,
        /// <summary>
        /// bblpsid property
        /// </summary>
          [XmlEnum("bbl/(psi.d)")]
          bblpsid,
        /// <summary>
        /// Lbarmin property
        /// </summary>
          [XmlEnum("L/(bar.min)")]
          Lbarmin,
        /// <summary>
        /// m3bard property
        /// </summary>
          [XmlEnum("m3/(bar.d)")]
          m3bard,
        /// <summary>
        /// m3barh property
        /// </summary>
          [XmlEnum("m3/(bar.h)")]
          m3barh,
        /// <summary>
        /// m3barmin property
        /// </summary>
          [XmlEnum("m3/(bar.min)")]
          m3barmin,
        /// <summary>
        /// m3kPad property
        /// </summary>
          [XmlEnum("m3/(kPa.d)")]
          m3kPad,
        /// <summary>
        /// m3kPah property
        /// </summary>
          [XmlEnum("m3/(kPa.h)")]
          m3kPah,
        /// <summary>
        /// m3Pas property
        /// </summary>
          [XmlEnum("m3/(Pa.s)")]
          m3Pas,
        /// <summary>
        /// m3psid property
        /// </summary>
          [XmlEnum("m3/(psi.d)")]
          m3psid
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerVolumeUom xsd enumeration.")]
        public enum AmountOfSubstancePerVolumeUom 
        {
        /// <summary>
        /// kmolm3 property
        /// </summary>
          [XmlEnum("kmol/m3")]
          kmolm3,
        /// <summary>
        /// lbmolft3 property
        /// </summary>
          [XmlEnum("lbmol/ft3")]
          lbmolft3,
        /// <summary>
        /// lbmolgalUK property
        /// </summary>
          [XmlEnum("lbmol/gal[UK]")]
          lbmolgalUK,
        /// <summary>
        /// lbmolgalUS property
        /// </summary>
          [XmlEnum("lbmol/gal[US]")]
          lbmolgalUS,
        /// <summary>
        /// molm3 property
        /// </summary>
          [XmlEnum("mol/m3")]
          molm3
        }
        /// <summary>
        /// This class represents the EnergyPerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerMassUom xsd enumeration.")]
        public enum EnergyPerMassUom 
        {
        /// <summary>
        /// BtuITlbm property
        /// </summary>
          [XmlEnum("Btu[IT]/lbm")]
          BtuITlbm,
        /// <summary>
        /// calthg property
        /// </summary>
          [XmlEnum("cal[th]/g")]
          calthg,
        /// <summary>
        /// calthkg property
        /// </summary>
          [XmlEnum("cal[th]/kg")]
          calthkg,
        /// <summary>
        /// calthlbm property
        /// </summary>
          [XmlEnum("cal[th]/lbm")]
          calthlbm,
        /// <summary>
        /// ergg property
        /// </summary>
          [XmlEnum("erg/g")]
          ergg,
        /// <summary>
        /// ergkg property
        /// </summary>
          [XmlEnum("erg/kg")]
          ergkg,
        /// <summary>
        /// hphlbm property
        /// </summary>
          [XmlEnum("hp.h/lbm")]
          hphlbm,
        /// <summary>
        /// Jg property
        /// </summary>
          [XmlEnum("J/g")]
          Jg,
        /// <summary>
        /// Jkg property
        /// </summary>
          [XmlEnum("J/kg")]
          Jkg,
        /// <summary>
        /// kcalthg property
        /// </summary>
          [XmlEnum("kcal[th]/g")]
          kcalthg,
        /// <summary>
        /// kcalthkg property
        /// </summary>
          [XmlEnum("kcal[th]/kg")]
          kcalthkg,
        /// <summary>
        /// kJkg property
        /// </summary>
          [XmlEnum("kJ/kg")]
          kJkg,
        /// <summary>
        /// kWhkg property
        /// </summary>
          [XmlEnum("kW.h/kg")]
          kWhkg,
        /// <summary>
        /// lbfftlbm property
        /// </summary>
          [XmlEnum("lbf.ft/lbm")]
          lbfftlbm,
        /// <summary>
        /// MJkg property
        /// </summary>
          [XmlEnum("MJ/kg")]
          MJkg,
        /// <summary>
        /// MWhkg property
        /// </summary>
          [XmlEnum("MW.h/kg")]
          MWhkg
        }
        /// <summary>
        /// This class represents the PermittivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PermittivityUom xsd enumeration.")]
        public enum PermittivityUom 
        {
        /// <summary>
        /// Fm property
        /// </summary>
          [XmlEnum("F/m")]
          Fm,
        /// <summary>
        /// uFm property
        /// </summary>
          [XmlEnum("uF/m")]
          uFm
        }
        /// <summary>
        /// This class represents the ElectromagneticMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectromagneticMomentUom xsd enumeration.")]
        public enum ElectromagneticMomentUom 
        {
        /// <summary>
        /// Am2 property
        /// </summary>
          [XmlEnum("A.m2")]
          Am2
        }
        /// <summary>
        /// This class represents the ThermalInsulanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ThermalInsulanceUom xsd enumeration.")]
        public enum ThermalInsulanceUom 
        {
        /// <summary>
        /// deltaCm2hkcalth property
        /// </summary>
          [XmlEnum("deltaC.m2.h/kcal[th]")]
          deltaCm2hkcalth,
        /// <summary>
        /// deltaFft2hBtuIT property
        /// </summary>
          [XmlEnum("deltaF.ft2.h/Btu[IT]")]
          deltaFft2hBtuIT,
        /// <summary>
        /// deltaKm2kW property
        /// </summary>
          [XmlEnum("deltaK.m2/kW")]
          deltaKm2kW,
        /// <summary>
        /// deltaKm2W property
        /// </summary>
          [XmlEnum("deltaK.m2/W")]
          deltaKm2W
        }
        /// <summary>
        /// This class represents the PowerPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerAreaUom xsd enumeration.")]
        public enum PowerPerAreaUom 
        {
        /// <summary>
        /// BtuIThft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft2)")]
          BtuIThft2,
        /// <summary>
        /// BtuITsft2 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft2)")]
          BtuITsft2,
        /// <summary>
        /// calthhcm2 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm2)")]
          calthhcm2,
        /// <summary>
        /// hpin2 property
        /// </summary>
          [XmlEnum("hp/in2")]
          hpin2,
        /// <summary>
        /// hphydin2 property
        /// </summary>
          [XmlEnum("hp[hyd]/in2")]
          hphydin2,
        /// <summary>
        /// kWcm2 property
        /// </summary>
          [XmlEnum("kW/cm2")]
          kWcm2,
        /// <summary>
        /// kWm2 property
        /// </summary>
          [XmlEnum("kW/m2")]
          kWm2,
        /// <summary>
        /// mWm2 property
        /// </summary>
          [XmlEnum("mW/m2")]
          mWm2,
        /// <summary>
        /// ucalthscm2 property
        /// </summary>
          [XmlEnum("ucal[th]/(s.cm2)")]
          ucalthscm2,
        /// <summary>
        /// Wcm2 property
        /// </summary>
          [XmlEnum("W/cm2")]
          Wcm2,
        /// <summary>
        /// Wm2 property
        /// </summary>
          [XmlEnum("W/m2")]
          Wm2,
        /// <summary>
        /// Wmm2 property
        /// </summary>
          [XmlEnum("W/mm2")]
          Wmm2
        }
        /// <summary>
        /// This class represents the MassPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerAreaUom xsd enumeration.")]
        public enum MassPerAreaUom 
        {
        /// <summary>
        /// Item001lbmft2 property
        /// </summary>
          [XmlEnum("0.01 lbm/ft2")]
          Item001lbmft2,
        /// <summary>
        /// kgm2 property
        /// </summary>
          [XmlEnum("kg/m2")]
          kgm2,
        /// <summary>
        /// lbmft2 property
        /// </summary>
          [XmlEnum("lbm/ft2")]
          lbmft2,
        /// <summary>
        /// Mgm2 property
        /// </summary>
          [XmlEnum("Mg/m2")]
          Mgm2,
        /// <summary>
        /// tonUSft2 property
        /// </summary>
          [XmlEnum("ton[US]/ft2")]
          tonUSft2
        }
        /// <summary>
        /// This class represents the IlluminanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the IlluminanceUom xsd enumeration.")]
        public enum IlluminanceUom 
        {
        /// <summary>
        /// footcandle property
        /// </summary>
          footcandle,
        /// <summary>
        /// klx property
        /// </summary>
          klx,
        /// <summary>
        /// lmm2 property
        /// </summary>
          [XmlEnum("lm/m2")]
          lmm2,
        /// <summary>
        /// lx property
        /// </summary>
          lx
        }
        /// <summary>
        /// This class represents the AreaPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerVolumeUom xsd enumeration.")]
        public enum AreaPerVolumeUom 
        {
        /// <summary>
        /// Item1m property
        /// </summary>
          [XmlEnum("1/m")]
          Item1m,
        /// <summary>
        /// bcm3 property
        /// </summary>
          [XmlEnum("b/cm3")]
          bcm3,
        /// <summary>
        /// cu property
        /// </summary>
          cu,
        /// <summary>
        /// ft2in3 property
        /// </summary>
          [XmlEnum("ft2/in3")]
          ft2in3,
        /// <summary>
        /// m2cm3 property
        /// </summary>
          [XmlEnum("m2/cm3")]
          m2cm3,
        /// <summary>
        /// m2m3 property
        /// </summary>
          [XmlEnum("m2/m3")]
          m2m3
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerTimeUom xsd enumeration.")]
        public enum TemperatureIntervalPerTimeUom 
        {
        /// <summary>
        /// deltaCh property
        /// </summary>
          [XmlEnum("deltaC/h")]
          deltaCh,
        /// <summary>
        /// deltaCmin property
        /// </summary>
          [XmlEnum("deltaC/min")]
          deltaCmin,
        /// <summary>
        /// deltaCs property
        /// </summary>
          [XmlEnum("deltaC/s")]
          deltaCs,
        /// <summary>
        /// deltaFh property
        /// </summary>
          [XmlEnum("deltaF/h")]
          deltaFh,
        /// <summary>
        /// deltaFmin property
        /// </summary>
          [XmlEnum("deltaF/min")]
          deltaFmin,
        /// <summary>
        /// deltaFs property
        /// </summary>
          [XmlEnum("deltaF/s")]
          deltaFs,
        /// <summary>
        /// deltaKs property
        /// </summary>
          [XmlEnum("deltaK/s")]
          deltaKs
        }
        /// <summary>
        /// This class represents the AmountOfSubstancePerAmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AmountOfSubstancePerAmountOfSubstanceUom xsd enumeration.")]
        public enum AmountOfSubstancePerAmountOfSubstanceUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// molar property
        /// </summary>
          [XmlEnum("%[molar]")]
          molar,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// molmol property
        /// </summary>
          [XmlEnum("mol/mol")]
          molmol,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm
        }
        /// <summary>
        /// This class represents the RadianceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the RadianceUom xsd enumeration.")]
        public enum RadianceUom 
        {
        /// <summary>
        /// Wm2sr property
        /// </summary>
          [XmlEnum("W/(m2.sr)")]
          Wm2sr
        }
        /// <summary>
        /// This class represents the HeatFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatFlowRateUom xsd enumeration.")]
        public enum HeatFlowRateUom 
        {
        /// <summary>
        /// Item1E6BtuITh property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]/h")]
          Item1E6BtuITh,
        /// <summary>
        /// BtuITh property
        /// </summary>
          [XmlEnum("Btu[IT]/h")]
          BtuITh,
        /// <summary>
        /// BtuITmin property
        /// </summary>
          [XmlEnum("Btu[IT]/min")]
          BtuITmin,
        /// <summary>
        /// BtuITs property
        /// </summary>
          [XmlEnum("Btu[IT]/s")]
          BtuITs,
        /// <summary>
        /// calthh property
        /// </summary>
          [XmlEnum("cal[th]/h")]
          calthh,
        /// <summary>
        /// EJa property
        /// </summary>
          [XmlEnum("EJ/a")]
          EJa,
        /// <summary>
        /// erga property
        /// </summary>
          [XmlEnum("erg/a")]
          erga,
        /// <summary>
        /// GW property
        /// </summary>
          GW,
        /// <summary>
        /// Js property
        /// </summary>
          [XmlEnum("J/s")]
          Js,
        /// <summary>
        /// kcalthh property
        /// </summary>
          [XmlEnum("kcal[th]/h")]
          kcalthh,
        /// <summary>
        /// kW property
        /// </summary>
          kW,
        /// <summary>
        /// lbfftmin property
        /// </summary>
          [XmlEnum("lbf.ft/min")]
          lbfftmin,
        /// <summary>
        /// lbffts property
        /// </summary>
          [XmlEnum("lbf.ft/s")]
          lbffts,
        /// <summary>
        /// MJa property
        /// </summary>
          [XmlEnum("MJ/a")]
          MJa,
        /// <summary>
        /// MW property
        /// </summary>
          MW,
        /// <summary>
        /// mW property
        /// </summary>
          mW,
        /// <summary>
        /// nW property
        /// </summary>
          nW,
        /// <summary>
        /// quada property
        /// </summary>
          [XmlEnum("quad/a")]
          quada,
        /// <summary>
        /// TJa property
        /// </summary>
          [XmlEnum("TJ/a")]
          TJa,
        /// <summary>
        /// TW property
        /// </summary>
          TW,
        /// <summary>
        /// ucalths property
        /// </summary>
          [XmlEnum("ucal[th]/s")]
          ucalths,
        /// <summary>
        /// uW property
        /// </summary>
          uW,
        /// <summary>
        /// W property
        /// </summary>
          W
        }
        /// <summary>
        /// This class represents the DoseEquivalentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DoseEquivalentUom xsd enumeration.")]
        public enum DoseEquivalentUom 
        {
        /// <summary>
        /// mrem property
        /// </summary>
          mrem,
        /// <summary>
        /// mSv property
        /// </summary>
          mSv,
        /// <summary>
        /// rem property
        /// </summary>
          rem,
        /// <summary>
        /// Sv property
        /// </summary>
          Sv
        }
        /// <summary>
        /// This class represents the PowerPerPowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerPowerUom xsd enumeration.")]
        public enum PowerPerPowerUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// BtuIThph property
        /// </summary>
          [XmlEnum("Btu[IT]/(hp.h)")]
          BtuIThph,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// WkW property
        /// </summary>
          [XmlEnum("W/kW")]
          WkW,
        /// <summary>
        /// WW property
        /// </summary>
          [XmlEnum("W/W")]
          WW
        }
        /// <summary>
        /// This class represents the ElectricChargePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerMassUom xsd enumeration.")]
        public enum ElectricChargePerMassUom 
        {
        /// <summary>
        /// Askg property
        /// </summary>
          [XmlEnum("A.s/kg")]
          Askg,
        /// <summary>
        /// Cg property
        /// </summary>
          [XmlEnum("C/g")]
          Cg,
        /// <summary>
        /// Ckg property
        /// </summary>
          [XmlEnum("C/kg")]
          Ckg
        }
        /// <summary>
        /// This class represents the MassPerVolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerVolumePerLengthUom xsd enumeration.")]
        public enum MassPerVolumePerLengthUom 
        {
        /// <summary>
        /// gcm4 property
        /// </summary>
          [XmlEnum("g/cm4")]
          gcm4,
        /// <summary>
        /// kgdm4 property
        /// </summary>
          [XmlEnum("kg/dm4")]
          kgdm4,
        /// <summary>
        /// kgm4 property
        /// </summary>
          [XmlEnum("kg/m4")]
          kgm4,
        /// <summary>
        /// lbmgalUKft property
        /// </summary>
          [XmlEnum("lbm/(gal[UK].ft)")]
          lbmgalUKft,
        /// <summary>
        /// lbmgalUSft property
        /// </summary>
          [XmlEnum("lbm/(gal[US].ft)")]
          lbmgalUSft,
        /// <summary>
        /// lbmft4 property
        /// </summary>
          [XmlEnum("lbm/ft4")]
          lbmft4,
        /// <summary>
        /// Pas2m3 property
        /// </summary>
          [XmlEnum("Pa.s2/m3")]
          Pas2m3
        }
        /// <summary>
        /// This class represents the MassLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassLengthUom xsd enumeration.")]
        public enum MassLengthUom 
        {
        /// <summary>
        /// kgm property
        /// </summary>
          [XmlEnum("kg.m")]
          kgm,
        /// <summary>
        /// lbmft property
        /// </summary>
          [XmlEnum("lbm.ft")]
          lbmft
        }
        /// <summary>
        /// This class represents the ForcePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerVolumeUom xsd enumeration.")]
        public enum ForcePerVolumeUom 
        {
        /// <summary>
        /// Item0001psift property
        /// </summary>
          [XmlEnum("0.001 psi/ft")]
          Item0001psift,
        /// <summary>
        /// Item001psift property
        /// </summary>
          [XmlEnum("0.01 psi/ft")]
          Item001psift,
        /// <summary>
        /// atmft property
        /// </summary>
          [XmlEnum("atm/ft")]
          atmft,
        /// <summary>
        /// atmhm property
        /// </summary>
          [XmlEnum("atm/hm")]
          atmhm,
        /// <summary>
        /// atmm property
        /// </summary>
          [XmlEnum("atm/m")]
          atmm,
        /// <summary>
        /// barkm property
        /// </summary>
          [XmlEnum("bar/km")]
          barkm,
        /// <summary>
        /// barm property
        /// </summary>
          [XmlEnum("bar/m")]
          barm,
        /// <summary>
        /// GPacm property
        /// </summary>
          [XmlEnum("GPa/cm")]
          GPacm,
        /// <summary>
        /// kPahm property
        /// </summary>
          [XmlEnum("kPa/hm")]
          kPahm,
        /// <summary>
        /// kPam property
        /// </summary>
          [XmlEnum("kPa/m")]
          kPam,
        /// <summary>
        /// lbfft3 property
        /// </summary>
          [XmlEnum("lbf/ft3")]
          lbfft3,
        /// <summary>
        /// lbfgalUS property
        /// </summary>
          [XmlEnum("lbf/gal[US]")]
          lbfgalUS,
        /// <summary>
        /// MPam property
        /// </summary>
          [XmlEnum("MPa/m")]
          MPam,
        /// <summary>
        /// Nm3 property
        /// </summary>
          [XmlEnum("N/m3")]
          Nm3,
        /// <summary>
        /// Pam property
        /// </summary>
          [XmlEnum("Pa/m")]
          Pam,
        /// <summary>
        /// psift property
        /// </summary>
          [XmlEnum("psi/ft")]
          psift,
        /// <summary>
        /// psim property
        /// </summary>
          [XmlEnum("psi/m")]
          psim
        }
        /// <summary>
        /// This class represents the ElectricChargePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricChargePerVolumeUom xsd enumeration.")]
        public enum ElectricChargePerVolumeUom 
        {
        /// <summary>
        /// Asm3 property
        /// </summary>
          [XmlEnum("A.s/m3")]
          Asm3,
        /// <summary>
        /// Ccm3 property
        /// </summary>
          [XmlEnum("C/cm3")]
          Ccm3,
        /// <summary>
        /// Cm3 property
        /// </summary>
          [XmlEnum("C/m3")]
          Cm3,
        /// <summary>
        /// Cmm3 property
        /// </summary>
          [XmlEnum("C/mm3")]
          Cmm3
        }
        /// <summary>
        /// This class represents the APIGravityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the APIGravityUom xsd enumeration.")]
        public enum APIGravityUom 
        {
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI
        }
        /// <summary>
        /// This class represents the ReluctanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReluctanceUom xsd enumeration.")]
        public enum ReluctanceUom 
        {
        /// <summary>
        /// Item1H property
        /// </summary>
          [XmlEnum("1/H")]
          Item1H
        }
        /// <summary>
        /// This class represents the LengthPerTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LengthPerTemperatureUom xsd enumeration.")]
        public enum LengthPerTemperatureUom 
        {
        /// <summary>
        /// ftdeltaF property
        /// </summary>
          [XmlEnum("ft/deltaF")]
          ftdeltaF,
        /// <summary>
        /// mdeltaK property
        /// </summary>
          [XmlEnum("m/deltaK")]
          mdeltaK
        }
        /// <summary>
        /// This class represents the VolumePerTimePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerTimePerLengthUom xsd enumeration.")]
        public enum VolumePerTimePerLengthUom 
        {
        /// <summary>
        /// Item1000ft3dft property
        /// </summary>
          [XmlEnum("1000 ft3/(d.ft)")]
          Item1000ft3dft,
        /// <summary>
        /// Item1000m3dm property
        /// </summary>
          [XmlEnum("1000 m3/(d.m)")]
          Item1000m3dm,
        /// <summary>
        /// Item1000m3hm property
        /// </summary>
          [XmlEnum("1000 m3/(h.m)")]
          Item1000m3hm,
        /// <summary>
        /// bbldft property
        /// </summary>
          [XmlEnum("bbl/(d.ft)")]
          bbldft,
        /// <summary>
        /// ft3dft property
        /// </summary>
          [XmlEnum("ft3/(d.ft)")]
          ft3dft,
        /// <summary>
        /// galUKhft property
        /// </summary>
          [XmlEnum("gal[UK]/(h.ft)")]
          galUKhft,
        /// <summary>
        /// galUKhin property
        /// </summary>
          [XmlEnum("gal[UK]/(h.in)")]
          galUKhin,
        /// <summary>
        /// galUKminft property
        /// </summary>
          [XmlEnum("gal[UK]/(min.ft)")]
          galUKminft,
        /// <summary>
        /// galUShft property
        /// </summary>
          [XmlEnum("gal[US]/(h.ft)")]
          galUShft,
        /// <summary>
        /// galUShin property
        /// </summary>
          [XmlEnum("gal[US]/(h.in)")]
          galUShin,
        /// <summary>
        /// galUSminft property
        /// </summary>
          [XmlEnum("gal[US]/(min.ft)")]
          galUSminft,
        /// <summary>
        /// m3dm property
        /// </summary>
          [XmlEnum("m3/(d.m)")]
          m3dm,
        /// <summary>
        /// m3hm property
        /// </summary>
          [XmlEnum("m3/(h.m)")]
          m3hm,
        /// <summary>
        /// m3sft property
        /// </summary>
          [XmlEnum("m3/(s.ft)")]
          m3sft,
        /// <summary>
        /// m3sm property
        /// </summary>
          [XmlEnum("m3/(s.m)")]
          m3sm
        }
        /// <summary>
        /// This class represents the LinearAccelerationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LinearAccelerationUom xsd enumeration.")]
        public enum LinearAccelerationUom 
        {
        /// <summary>
        /// cms2 property
        /// </summary>
          [XmlEnum("cm/s2")]
          cms2,
        /// <summary>
        /// fts2 property
        /// </summary>
          [XmlEnum("ft/s2")]
          fts2,
        /// <summary>
        /// Gal property
        /// </summary>
          Gal,
        /// <summary>
        /// gn property
        /// </summary>
          gn,
        /// <summary>
        /// ins2 property
        /// </summary>
          [XmlEnum("in/s2")]
          ins2,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("m/s2")]
          ms2,
        /// <summary>
        /// mGal property
        /// </summary>
          mGal,
        /// <summary>
        /// mgn property
        /// </summary>
          mgn
        }
        /// <summary>
        /// This class represents the DimensionlessUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// dEuc property
        /// </summary>
          dEuc,
        /// <summary>
        /// EEuc property
        /// </summary>
          EEuc,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// fEuc property
        /// </summary>
          fEuc,
        /// <summary>
        /// GEuc property
        /// </summary>
          GEuc,
        /// <summary>
        /// kEuc property
        /// </summary>
          kEuc,
        /// <summary>
        /// MEuc property
        /// </summary>
          MEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// pEuc property
        /// </summary>
          pEuc,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// TEuc property
        /// </summary>
          TEuc,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc
        }
        /// <summary>
        /// This class represents the EnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyUom xsd enumeration.")]
        public enum EnergyUom 
        {
        /// <summary>
        /// Item1E6BtuIT property
        /// </summary>
          [XmlEnum("1E6 Btu[IT]")]
          Item1E6BtuIT,
        /// <summary>
        /// aJ property
        /// </summary>
          aJ,
        /// <summary>
        /// BtuIT property
        /// </summary>
          [XmlEnum("Btu[IT]")]
          BtuIT,
        /// <summary>
        /// Btuth property
        /// </summary>
          [XmlEnum("Btu[th]")]
          Btuth,
        /// <summary>
        /// BtuUK property
        /// </summary>
          [XmlEnum("Btu[UK]")]
          BtuUK,
        /// <summary>
        /// calIT property
        /// </summary>
          [XmlEnum("cal[IT]")]
          calIT,
        /// <summary>
        /// calth property
        /// </summary>
          [XmlEnum("cal[th]")]
          calth,
        /// <summary>
        /// ccalth property
        /// </summary>
          [XmlEnum("ccal[th]")]
          ccalth,
        /// <summary>
        /// ceV property
        /// </summary>
          ceV,
        /// <summary>
        /// cJ property
        /// </summary>
          cJ,
        /// <summary>
        /// dcalth property
        /// </summary>
          [XmlEnum("dcal[th]")]
          dcalth,
        /// <summary>
        /// deV property
        /// </summary>
          deV,
        /// <summary>
        /// dJ property
        /// </summary>
          dJ,
        /// <summary>
        /// Ecalth property
        /// </summary>
          [XmlEnum("Ecal[th]")]
          Ecalth,
        /// <summary>
        /// EeV property
        /// </summary>
          EeV,
        /// <summary>
        /// EJ property
        /// </summary>
          EJ,
        /// <summary>
        /// erg property
        /// </summary>
          erg,
        /// <summary>
        /// eV property
        /// </summary>
          eV,
        /// <summary>
        /// fcalth property
        /// </summary>
          [XmlEnum("fcal[th]")]
          fcalth,
        /// <summary>
        /// feV property
        /// </summary>
          feV,
        /// <summary>
        /// fJ property
        /// </summary>
          fJ,
        /// <summary>
        /// Gcalth property
        /// </summary>
          [XmlEnum("Gcal[th]")]
          Gcalth,
        /// <summary>
        /// GeV property
        /// </summary>
          GeV,
        /// <summary>
        /// GJ property
        /// </summary>
          GJ,
        /// <summary>
        /// GWh property
        /// </summary>
          [XmlEnum("GW.h")]
          GWh,
        /// <summary>
        /// hph property
        /// </summary>
          [XmlEnum("hp.h")]
          hph,
        /// <summary>
        /// hpmetrich property
        /// </summary>
          [XmlEnum("hp[metric].h")]
          hpmetrich,
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// kcalth property
        /// </summary>
          [XmlEnum("kcal[th]")]
          kcalth,
        /// <summary>
        /// keV property
        /// </summary>
          keV,
        /// <summary>
        /// kJ property
        /// </summary>
          kJ,
        /// <summary>
        /// kWh property
        /// </summary>
          [XmlEnum("kW.h")]
          kWh,
        /// <summary>
        /// Mcalth property
        /// </summary>
          [XmlEnum("Mcal[th]")]
          Mcalth,
        /// <summary>
        /// mcalth property
        /// </summary>
          [XmlEnum("mcal[th]")]
          mcalth,
        /// <summary>
        /// meV property
        /// </summary>
          meV,
        /// <summary>
        /// MeV property
        /// </summary>
          MeV,
        /// <summary>
        /// MJ property
        /// </summary>
          MJ,
        /// <summary>
        /// mJ property
        /// </summary>
          mJ,
        /// <summary>
        /// MWh property
        /// </summary>
          [XmlEnum("MW.h")]
          MWh,
        /// <summary>
        /// ncalth property
        /// </summary>
          [XmlEnum("ncal[th]")]
          ncalth,
        /// <summary>
        /// neV property
        /// </summary>
          neV,
        /// <summary>
        /// nJ property
        /// </summary>
          nJ,
        /// <summary>
        /// pcalth property
        /// </summary>
          [XmlEnum("pcal[th]")]
          pcalth,
        /// <summary>
        /// peV property
        /// </summary>
          peV,
        /// <summary>
        /// pJ property
        /// </summary>
          pJ,
        /// <summary>
        /// quad property
        /// </summary>
          quad,
        /// <summary>
        /// Tcalth property
        /// </summary>
          [XmlEnum("Tcal[th]")]
          Tcalth,
        /// <summary>
        /// TeV property
        /// </summary>
          TeV,
        /// <summary>
        /// thermEC property
        /// </summary>
          [XmlEnum("therm[EC]")]
          thermEC,
        /// <summary>
        /// thermUK property
        /// </summary>
          [XmlEnum("therm[UK]")]
          thermUK,
        /// <summary>
        /// thermUS property
        /// </summary>
          [XmlEnum("therm[US]")]
          thermUS,
        /// <summary>
        /// TJ property
        /// </summary>
          TJ,
        /// <summary>
        /// TWh property
        /// </summary>
          [XmlEnum("TW.h")]
          TWh,
        /// <summary>
        /// ucalth property
        /// </summary>
          [XmlEnum("ucal[th]")]
          ucalth,
        /// <summary>
        /// ueV property
        /// </summary>
          ueV,
        /// <summary>
        /// uJ property
        /// </summary>
          uJ
        }
        /// <summary>
        /// This class represents the AnglePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AnglePerLengthUom xsd enumeration.")]
        public enum AnglePerLengthUom 
        {
        /// <summary>
        /// Item001degaft property
        /// </summary>
          [XmlEnum("0.01 dega/ft")]
          Item001degaft,
        /// <summary>
        /// Item130degaft property
        /// </summary>
          [XmlEnum("1/30 dega/ft")]
          Item130degaft,
        /// <summary>
        /// Item130degam property
        /// </summary>
          [XmlEnum("1/30 dega/m")]
          Item130degam,
        /// <summary>
        /// degaft property
        /// </summary>
          [XmlEnum("dega/ft")]
          degaft,
        /// <summary>
        /// degam property
        /// </summary>
          [XmlEnum("dega/m")]
          degam,
        /// <summary>
        /// radft property
        /// </summary>
          [XmlEnum("rad/ft")]
          radft,
        /// <summary>
        /// radm property
        /// </summary>
          [XmlEnum("rad/m")]
          radm,
        /// <summary>
        /// revft property
        /// </summary>
          [XmlEnum("rev/ft")]
          revft,
        /// <summary>
        /// revm property
        /// </summary>
          [XmlEnum("rev/m")]
          revm
        }
        /// <summary>
        /// This class represents the VerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VerticalCoordinateUom xsd enumeration.")]
        public enum VerticalCoordinateUom 
        {
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftUS property
        /// </summary>
          ftUS,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65
        }
        /// <summary>
        /// This class represents the VolumePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerLengthUom xsd enumeration.")]
        public enum VolumePerLengthUom 
        {
        /// <summary>
        /// Item001dm3km property
        /// </summary>
          [XmlEnum("0.01 dm3/km")]
          Item001dm3km,
        /// <summary>
        /// Item001Lkm property
        /// </summary>
          [XmlEnum("0.01 L/km")]
          Item001Lkm,
        /// <summary>
        /// bblft property
        /// </summary>
          [XmlEnum("bbl/ft")]
          bblft,
        /// <summary>
        /// bblin property
        /// </summary>
          [XmlEnum("bbl/in")]
          bblin,
        /// <summary>
        /// bblmi property
        /// </summary>
          [XmlEnum("bbl/mi")]
          bblmi,
        /// <summary>
        /// dm3m property
        /// </summary>
          [XmlEnum("dm3/m")]
          dm3m,
        /// <summary>
        /// ft3ft property
        /// </summary>
          [XmlEnum("ft3/ft")]
          ft3ft,
        /// <summary>
        /// galUKmi property
        /// </summary>
          [XmlEnum("gal[UK]/mi")]
          galUKmi,
        /// <summary>
        /// galUSft property
        /// </summary>
          [XmlEnum("gal[US]/ft")]
          galUSft,
        /// <summary>
        /// galUSmi property
        /// </summary>
          [XmlEnum("gal[US]/mi")]
          galUSmi,
        /// <summary>
        /// in3ft property
        /// </summary>
          [XmlEnum("in3/ft")]
          in3ft,
        /// <summary>
        /// Lm property
        /// </summary>
          [XmlEnum("L/m")]
          Lm,
        /// <summary>
        /// m3km property
        /// </summary>
          [XmlEnum("m3/km")]
          m3km,
        /// <summary>
        /// m3m property
        /// </summary>
          [XmlEnum("m3/m")]
          m3m
        }
        /// <summary>
        /// This class represents the EnergyPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerVolumeUom xsd enumeration.")]
        public enum EnergyPerVolumeUom 
        {
        /// <summary>
        /// BtuITbbl property
        /// </summary>
          [XmlEnum("Btu[IT]/bbl")]
          BtuITbbl,
        /// <summary>
        /// BtuITft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/ft3")]
          BtuITft3,
        /// <summary>
        /// BtuITgalUK property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[UK]")]
          BtuITgalUK,
        /// <summary>
        /// BtuITgalUS property
        /// </summary>
          [XmlEnum("Btu[IT]/gal[US]")]
          BtuITgalUS,
        /// <summary>
        /// calthcm3 property
        /// </summary>
          [XmlEnum("cal[th]/cm3")]
          calthcm3,
        /// <summary>
        /// calthmL property
        /// </summary>
          [XmlEnum("cal[th]/mL")]
          calthmL,
        /// <summary>
        /// calthmm3 property
        /// </summary>
          [XmlEnum("cal[th]/mm3")]
          calthmm3,
        /// <summary>
        /// ergcm3 property
        /// </summary>
          [XmlEnum("erg/cm3")]
          ergcm3,
        /// <summary>
        /// ergm3 property
        /// </summary>
          [XmlEnum("erg/m3")]
          ergm3,
        /// <summary>
        /// hphbbl property
        /// </summary>
          [XmlEnum("hp.h/bbl")]
          hphbbl,
        /// <summary>
        /// Jdm3 property
        /// </summary>
          [XmlEnum("J/dm3")]
          Jdm3,
        /// <summary>
        /// Jm3 property
        /// </summary>
          [XmlEnum("J/m3")]
          Jm3,
        /// <summary>
        /// kcalthcm3 property
        /// </summary>
          [XmlEnum("kcal[th]/cm3")]
          kcalthcm3,
        /// <summary>
        /// kcalthm3 property
        /// </summary>
          [XmlEnum("kcal[th]/m3")]
          kcalthm3,
        /// <summary>
        /// kJdm3 property
        /// </summary>
          [XmlEnum("kJ/dm3")]
          kJdm3,
        /// <summary>
        /// kJm3 property
        /// </summary>
          [XmlEnum("kJ/m3")]
          kJm3,
        /// <summary>
        /// kWhdm3 property
        /// </summary>
          [XmlEnum("kW.h/dm3")]
          kWhdm3,
        /// <summary>
        /// kWhm3 property
        /// </summary>
          [XmlEnum("kW.h/m3")]
          kWhm3,
        /// <summary>
        /// lbfftbbl property
        /// </summary>
          [XmlEnum("lbf.ft/bbl")]
          lbfftbbl,
        /// <summary>
        /// lbfftgalUS property
        /// </summary>
          [XmlEnum("lbf.ft/gal[US]")]
          lbfftgalUS,
        /// <summary>
        /// MJm3 property
        /// </summary>
          [XmlEnum("MJ/m3")]
          MJm3,
        /// <summary>
        /// MWhm3 property
        /// </summary>
          [XmlEnum("MW.h/m3")]
          MWhm3,
        /// <summary>
        /// tonfUSmibbl property
        /// </summary>
          [XmlEnum("tonf[US].mi/bbl")]
          tonfUSmibbl
        }
        /// <summary>
        /// This class represents the MagneticPermeabilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticPermeabilityUom xsd enumeration.")]
        public enum MagneticPermeabilityUom 
        {
        /// <summary>
        /// Hm property
        /// </summary>
          [XmlEnum("H/m")]
          Hm,
        /// <summary>
        /// uHm property
        /// </summary>
          [XmlEnum("uH/m")]
          uHm
        }
        /// <summary>
        /// This class represents the ReciprocalMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalMassUom xsd enumeration.")]
        public enum ReciprocalMassUom 
        {
        /// <summary>
        /// Item1g property
        /// </summary>
          [XmlEnum("1/g")]
          Item1g,
        /// <summary>
        /// Item1kg property
        /// </summary>
          [XmlEnum("1/kg")]
          Item1kg,
        /// <summary>
        /// Item1lbm property
        /// </summary>
          [XmlEnum("1/lbm")]
          Item1lbm
        }
        /// <summary>
        /// This class represents the DynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// dP property
        /// </summary>
          dP,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// EP property
        /// </summary>
          EP,
        /// <summary>
        /// fP property
        /// </summary>
          fP,
        /// <summary>
        /// GP property
        /// </summary>
          GP,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// kP property
        /// </summary>
          kP,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// mP property
        /// </summary>
          mP,
        /// <summary>
        /// MP property
        /// </summary>
          MP,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2,
        /// <summary>
        /// nP property
        /// </summary>
          nP,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// pP property
        /// </summary>
          pP,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// TP property
        /// </summary>
          TP,
        /// <summary>
        /// uP property
        /// </summary>
          uP
        }
        /// <summary>
        /// This class represents the PotentialDifferencePerPowerDropUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PotentialDifferencePerPowerDropUom xsd enumeration.")]
        public enum PotentialDifferencePerPowerDropUom 
        {
        /// <summary>
        /// VB property
        /// </summary>
          [XmlEnum("V/B")]
          VB,
        /// <summary>
        /// VdB property
        /// </summary>
          [XmlEnum("V/dB")]
          VdB
        }
        /// <summary>
        /// This class represents the AreaPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerTimeUom xsd enumeration.")]
        public enum AreaPerTimeUom 
        {
        /// <summary>
        /// cm2s property
        /// </summary>
          [XmlEnum("cm2/s")]
          cm2s,
        /// <summary>
        /// ft2h property
        /// </summary>
          [XmlEnum("ft2/h")]
          ft2h,
        /// <summary>
        /// ft2s property
        /// </summary>
          [XmlEnum("ft2/s")]
          ft2s,
        /// <summary>
        /// in2s property
        /// </summary>
          [XmlEnum("in2/s")]
          in2s,
        /// <summary>
        /// m2d property
        /// </summary>
          [XmlEnum("m2/d")]
          m2d,
        /// <summary>
        /// m2h property
        /// </summary>
          [XmlEnum("m2/h")]
          m2h,
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s,
        /// <summary>
        /// mm2s property
        /// </summary>
          [XmlEnum("mm2/s")]
          mm2s
        }
        /// <summary>
        /// This class represents the HeatCapacityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the HeatCapacityUom xsd enumeration.")]
        public enum HeatCapacityUom 
        {
        /// <summary>
        /// JdeltaK property
        /// </summary>
          [XmlEnum("J/deltaK")]
          JdeltaK
        }
        /// <summary>
        /// This class represents the MolarEnergyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MolarEnergyUom xsd enumeration.")]
        public enum MolarEnergyUom 
        {
        /// <summary>
        /// BtuITlbmol property
        /// </summary>
          [XmlEnum("Btu[IT]/lbmol")]
          BtuITlbmol,
        /// <summary>
        /// Jmol property
        /// </summary>
          [XmlEnum("J/mol")]
          Jmol,
        /// <summary>
        /// kcalthmol property
        /// </summary>
          [XmlEnum("kcal[th]/mol")]
          kcalthmol,
        /// <summary>
        /// kJkmol property
        /// </summary>
          [XmlEnum("kJ/kmol")]
          kJkmol,
        /// <summary>
        /// MJkmol property
        /// </summary>
          [XmlEnum("MJ/kmol")]
          MJkmol
        }
        /// <summary>
        /// This class represents the ElectricConductanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricConductanceUom xsd enumeration.")]
        public enum ElectricConductanceUom 
        {
        /// <summary>
        /// cS property
        /// </summary>
          cS,
        /// <summary>
        /// dS property
        /// </summary>
          dS,
        /// <summary>
        /// ES property
        /// </summary>
          ES,
        /// <summary>
        /// fS property
        /// </summary>
          fS,
        /// <summary>
        /// GS property
        /// </summary>
          GS,
        /// <summary>
        /// kS property
        /// </summary>
          kS,
        /// <summary>
        /// mS property
        /// </summary>
          mS,
        /// <summary>
        /// MS property
        /// </summary>
          MS,
        /// <summary>
        /// nS property
        /// </summary>
          nS,
        /// <summary>
        /// pS property
        /// </summary>
          pS,
        /// <summary>
        /// S property
        /// </summary>
          S,
        /// <summary>
        /// TS property
        /// </summary>
          TS,
        /// <summary>
        /// uS property
        /// </summary>
          uS
        }
        /// <summary>
        /// This class represents the MomentumUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MomentumUom xsd enumeration.")]
        public enum MomentumUom 
        {
        /// <summary>
        /// kgms property
        /// </summary>
          [XmlEnum("kg.m/s")]
          kgms,
        /// <summary>
        /// lbmfts property
        /// </summary>
          [XmlEnum("lbm.ft/s")]
          lbmfts
        }
        /// <summary>
        /// This class represents the MassPerTimePerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MassPerTimePerAreaUom xsd enumeration.")]
        public enum MassPerTimePerAreaUom 
        {
        /// <summary>
        /// gftcm3s property
        /// </summary>
          [XmlEnum("g.ft/(cm3.s)")]
          gftcm3s,
        /// <summary>
        /// gmcm3s property
        /// </summary>
          [XmlEnum("g.m/(cm3.s)")]
          gmcm3s,
        /// <summary>
        /// kgm2s property
        /// </summary>
          [XmlEnum("kg/(m2.s)")]
          kgm2s,
        /// <summary>
        /// kPasm property
        /// </summary>
          [XmlEnum("kPa.s/m")]
          kPasm,
        /// <summary>
        /// lbmft2h property
        /// </summary>
          [XmlEnum("lbm/(ft2.h)")]
          lbmft2h,
        /// <summary>
        /// lbmft2s property
        /// </summary>
          [XmlEnum("lbm/(ft2.s)")]
          lbmft2s,
        /// <summary>
        /// MPasm property
        /// </summary>
          [XmlEnum("MPa.s/m")]
          MPasm
        }
        /// <summary>
        /// This class represents the PowerPerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PowerPerVolumeUom xsd enumeration.")]
        public enum PowerPerVolumeUom 
        {
        /// <summary>
        /// BtuIThft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3)")]
          BtuIThft3,
        /// <summary>
        /// BtuITsft3 property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3)")]
          BtuITsft3,
        /// <summary>
        /// calthhcm3 property
        /// </summary>
          [XmlEnum("cal[th]/(h.cm3)")]
          calthhcm3,
        /// <summary>
        /// calthscm3 property
        /// </summary>
          [XmlEnum("cal[th]/(s.cm3)")]
          calthscm3,
        /// <summary>
        /// hpft3 property
        /// </summary>
          [XmlEnum("hp/ft3")]
          hpft3,
        /// <summary>
        /// kWm3 property
        /// </summary>
          [XmlEnum("kW/m3")]
          kWm3,
        /// <summary>
        /// uWm3 property
        /// </summary>
          [XmlEnum("uW/m3")]
          uWm3,
        /// <summary>
        /// Wm3 property
        /// </summary>
          [XmlEnum("W/m3")]
          Wm3
        }
        /// <summary>
        /// This class represents the FrequencyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the FrequencyUom xsd enumeration.")]
        public enum FrequencyUom 
        {
        /// <summary>
        /// cHz property
        /// </summary>
          cHz,
        /// <summary>
        /// dHz property
        /// </summary>
          dHz,
        /// <summary>
        /// EHz property
        /// </summary>
          EHz,
        /// <summary>
        /// fHz property
        /// </summary>
          fHz,
        /// <summary>
        /// GHz property
        /// </summary>
          GHz,
        /// <summary>
        /// Hz property
        /// </summary>
          Hz,
        /// <summary>
        /// kHz property
        /// </summary>
          kHz,
        /// <summary>
        /// mHz property
        /// </summary>
          mHz,
        /// <summary>
        /// MHz property
        /// </summary>
          MHz,
        /// <summary>
        /// nHz property
        /// </summary>
          nHz,
        /// <summary>
        /// pHz property
        /// </summary>
          pHz,
        /// <summary>
        /// THz property
        /// </summary>
          THz,
        /// <summary>
        /// uHz property
        /// </summary>
          uHz
        }
        /// <summary>
        /// This class represents the LuminousIntensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LuminousIntensityUom xsd enumeration.")]
        public enum LuminousIntensityUom 
        {
        /// <summary>
        /// cd property
        /// </summary>
          cd,
        /// <summary>
        /// kcd property
        /// </summary>
          kcd
        }
        /// <summary>
        /// This class represents the AbsorbedDoseUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AbsorbedDoseUom xsd enumeration.")]
        public enum AbsorbedDoseUom 
        {
        /// <summary>
        /// cGy property
        /// </summary>
          cGy,
        /// <summary>
        /// crd property
        /// </summary>
          crd,
        /// <summary>
        /// dGy property
        /// </summary>
          dGy,
        /// <summary>
        /// drd property
        /// </summary>
          drd,
        /// <summary>
        /// EGy property
        /// </summary>
          EGy,
        /// <summary>
        /// Erd property
        /// </summary>
          Erd,
        /// <summary>
        /// fGy property
        /// </summary>
          fGy,
        /// <summary>
        /// frd property
        /// </summary>
          frd,
        /// <summary>
        /// GGy property
        /// </summary>
          GGy,
        /// <summary>
        /// Grd property
        /// </summary>
          Grd,
        /// <summary>
        /// Gy property
        /// </summary>
          Gy,
        /// <summary>
        /// kGy property
        /// </summary>
          kGy,
        /// <summary>
        /// krd property
        /// </summary>
          krd,
        /// <summary>
        /// mGy property
        /// </summary>
          mGy,
        /// <summary>
        /// MGy property
        /// </summary>
          MGy,
        /// <summary>
        /// Mrd property
        /// </summary>
          Mrd,
        /// <summary>
        /// mrd property
        /// </summary>
          mrd,
        /// <summary>
        /// nGy property
        /// </summary>
          nGy,
        /// <summary>
        /// nrd property
        /// </summary>
          nrd,
        /// <summary>
        /// pGy property
        /// </summary>
          pGy,
        /// <summary>
        /// prd property
        /// </summary>
          prd,
        /// <summary>
        /// rd property
        /// </summary>
          rd,
        /// <summary>
        /// TGy property
        /// </summary>
          TGy,
        /// <summary>
        /// Trd property
        /// </summary>
          Trd,
        /// <summary>
        /// uGy property
        /// </summary>
          uGy,
        /// <summary>
        /// urd property
        /// </summary>
          urd
        }
        /// <summary>
        /// This class represents the TimePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerMassUom xsd enumeration.")]
        public enum TimePerMassUom 
        {
        /// <summary>
        /// skg property
        /// </summary>
          [XmlEnum("s/kg")]
          skg
        }
        /// <summary>
        /// This class represents the VolumetricHeatTransferCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumetricHeatTransferCoefficientUom xsd enumeration.")]
        public enum VolumetricHeatTransferCoefficientUom 
        {
        /// <summary>
        /// BtuIThft3deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(h.ft3.deltaF)")]
          BtuIThft3deltaF,
        /// <summary>
        /// BtuITsft3deltaF property
        /// </summary>
          [XmlEnum("Btu[IT]/(s.ft3.deltaF)")]
          BtuITsft3deltaF,
        /// <summary>
        /// kWm3deltaK property
        /// </summary>
          [XmlEnum("kW/(m3.deltaK)")]
          kWm3deltaK,
        /// <summary>
        /// Wm3deltaK property
        /// </summary>
          [XmlEnum("W/(m3.deltaK)")]
          Wm3deltaK
        }
        /// <summary>
        /// This class represents the NormalizedPowerUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the NormalizedPowerUom xsd enumeration.")]
        public enum NormalizedPowerUom 
        {
        /// <summary>
        /// BW property
        /// </summary>
          [XmlEnum("B.W")]
          BW,
        /// <summary>
        /// dBMW property
        /// </summary>
          [XmlEnum("dB.MW")]
          dBMW,
        /// <summary>
        /// dBmW property
        /// </summary>
          [XmlEnum("dB.mW")]
          dBmW,
        /// <summary>
        /// dBW property
        /// </summary>
          [XmlEnum("dB.W")]
          dBW
        }
        /// <summary>
        /// This class represents the EnergyLengthPerTimeAreaTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyLengthPerTimeAreaTemperatureUom xsd enumeration.")]
        public enum EnergyLengthPerTimeAreaTemperatureUom 
        {
        /// <summary>
        /// BtuITinhft2deltaF property
        /// </summary>
          [XmlEnum("Btu[IT].in/(h.ft2.deltaF)")]
          BtuITinhft2deltaF,
        /// <summary>
        /// Jmsm2deltaK property
        /// </summary>
          [XmlEnum("J.m/(s.m2.deltaK)")]
          Jmsm2deltaK,
        /// <summary>
        /// kJmhm2deltaK property
        /// </summary>
          [XmlEnum("kJ.m/(h.m2.deltaK)")]
          kJmhm2deltaK,
        /// <summary>
        /// WmdeltaK property
        /// </summary>
          [XmlEnum("W/(m.deltaK)")]
          WmdeltaK
        }
        /// <summary>
        /// This class represents the PressureTimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureTimePerVolumeUom xsd enumeration.")]
        public enum PressureTimePerVolumeUom 
        {
        /// <summary>
        /// Pasm3 property
        /// </summary>
          [XmlEnum("Pa.s/m3")]
          Pasm3,
        /// <summary>
        /// psidbbl property
        /// </summary>
          [XmlEnum("psi.d/bbl")]
          psidbbl
        }
        /// <summary>
        /// This class represents the VolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// vol property
        /// </summary>
          [XmlEnum("%[vol]")]
          vol,
        /// <summary>
        /// Item0001bblft3 property
        /// </summary>
          [XmlEnum("0.001 bbl/ft3")]
          Item0001bblft3,
        /// <summary>
        /// Item0001bblm3 property
        /// </summary>
          [XmlEnum("0.001 bbl/m3")]
          Item0001bblm3,
        /// <summary>
        /// Item0001galUKbbl property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/bbl")]
          Item0001galUKbbl,
        /// <summary>
        /// Item0001galUKgalUK property
        /// </summary>
          [XmlEnum("0.001 gal[UK]/gal[UK]")]
          Item0001galUKgalUK,
        /// <summary>
        /// Item0001galUSbbl property
        /// </summary>
          [XmlEnum("0.001 gal[US]/bbl")]
          Item0001galUSbbl,
        /// <summary>
        /// Item0001galUSft3 property
        /// </summary>
          [XmlEnum("0.001 gal[US]/ft3")]
          Item0001galUSft3,
        /// <summary>
        /// Item0001galUSgalUS property
        /// </summary>
          [XmlEnum("0.001 gal[US]/gal[US]")]
          Item0001galUSgalUS,
        /// <summary>
        /// Item0001ptUKbbl property
        /// </summary>
          [XmlEnum("0.001 pt[UK]/bbl")]
          Item0001ptUKbbl,
        /// <summary>
        /// Item001bblbbl property
        /// </summary>
          [XmlEnum("0.01 bbl/bbl")]
          Item001bblbbl,
        /// <summary>
        /// Item01galUSbbl property
        /// </summary>
          [XmlEnum("0.1 gal[US]/bbl")]
          Item01galUSbbl,
        /// <summary>
        /// Item01Lbbl property
        /// </summary>
          [XmlEnum("0.1 L/bbl")]
          Item01Lbbl,
        /// <summary>
        /// Item01ptUSbbl property
        /// </summary>
          [XmlEnum("0.1 pt[US]/bbl")]
          Item01ptUSbbl,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000 ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// Item1000m3m3 property
        /// </summary>
          [XmlEnum("1000 m3/m3")]
          Item1000m3m3,
        /// <summary>
        /// Item1E6acreftbbl property
        /// </summary>
          [XmlEnum("1E-6 acre.ft/bbl")]
          Item1E6acreftbbl,
        /// <summary>
        /// Item1E6bblft3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/ft3")]
          Item1E6bblft3,
        /// <summary>
        /// Item1E6bblm3 property
        /// </summary>
          [XmlEnum("1E-6 bbl/m3")]
          Item1E6bblm3,
        /// <summary>
        /// Item1E6bblacreft property
        /// </summary>
          [XmlEnum("1E6 bbl/(acre.ft)")]
          Item1E6bblacreft,
        /// <summary>
        /// Item1E6ft3acreft property
        /// </summary>
          [XmlEnum("1E6 ft3/(acre.ft)")]
          Item1E6ft3acreft,
        /// <summary>
        /// Item1E6ft3bbl property
        /// </summary>
          [XmlEnum("1E6 ft3/bbl")]
          Item1E6ft3bbl,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/(acre.ft)")]
          bblacreft,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bblm3 property
        /// </summary>
          [XmlEnum("bbl/m3")]
          bblm3,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3L property
        /// </summary>
          [XmlEnum("cm3/L")]
          cm3L,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("gal[UK]/ft3")]
          galUKft3,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("gal[US]/bbl")]
          galUSbbl,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("gal[US]/ft3")]
          galUSft3,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/(ha.m)")]
          m3ham,
        /// <summary>
        /// m3bbl property
        /// </summary>
          [XmlEnum("m3/bbl")]
          m3bbl,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/gal[UK]")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/gal[US]")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// ppmvol property
        /// </summary>
          [XmlEnum("ppm[vol]")]
          ppmvol
        }
        /// <summary>
        /// This class represents the AnglePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AnglePerVolumeUom xsd enumeration.")]
        public enum AnglePerVolumeUom 
        {
        /// <summary>
        /// radft3 property
        /// </summary>
          [XmlEnum("rad/ft3")]
          radft3,
        /// <summary>
        /// radm3 property
        /// </summary>
          [XmlEnum("rad/m3")]
          radm3
        }
        /// <summary>
        /// This class represents the DiffusionCoefficientUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DiffusionCoefficientUom xsd enumeration.")]
        public enum DiffusionCoefficientUom 
        {
        /// <summary>
        /// m2s property
        /// </summary>
          [XmlEnum("m2/s")]
          m2s
        }
        /// <summary>
        /// This class represents the TimePerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerTimeUom xsd enumeration.")]
        public enum TimePerTimeUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// mss property
        /// </summary>
          [XmlEnum("ms/s")]
          mss,
        /// <summary>
        /// ss property
        /// </summary>
          [XmlEnum("s/s")]
          ss
        }
        /// <summary>
        /// This class represents the EnergyPerMassPerTimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerMassPerTimeUom xsd enumeration.")]
        public enum EnergyPerMassPerTimeUom 
        {
        /// <summary>
        /// mremh property
        /// </summary>
          [XmlEnum("mrem/h")]
          mremh,
        /// <summary>
        /// mSvh property
        /// </summary>
          [XmlEnum("mSv/h")]
          mSvh,
        /// <summary>
        /// remh property
        /// </summary>
          [XmlEnum("rem/h")]
          remh,
        /// <summary>
        /// Svh property
        /// </summary>
          [XmlEnum("Sv/h")]
          Svh,
        /// <summary>
        /// Svs property
        /// </summary>
          [XmlEnum("Sv/s")]
          Svs
        }
        /// <summary>
        /// This class represents the VolumePerMassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the VolumePerMassUom xsd enumeration.")]
        public enum VolumePerMassUom 
        {
        /// <summary>
        /// Item001Lkg property
        /// </summary>
          [XmlEnum("0.01 L/kg")]
          Item001Lkg,
        /// <summary>
        /// bbltonUK property
        /// </summary>
          [XmlEnum("bbl/ton[UK]")]
          bbltonUK,
        /// <summary>
        /// bbltonUS property
        /// </summary>
          [XmlEnum("bbl/ton[US]")]
          bbltonUS,
        /// <summary>
        /// cm3g property
        /// </summary>
          [XmlEnum("cm3/g")]
          cm3g,
        /// <summary>
        /// dm3kg property
        /// </summary>
          [XmlEnum("dm3/kg")]
          dm3kg,
        /// <summary>
        /// dm3t property
        /// </summary>
          [XmlEnum("dm3/t")]
          dm3t,
        /// <summary>
        /// ft3kg property
        /// </summary>
          [XmlEnum("ft3/kg")]
          ft3kg,
        /// <summary>
        /// ft3lbm property
        /// </summary>
          [XmlEnum("ft3/lbm")]
          ft3lbm,
        /// <summary>
        /// ft3sack94lbm property
        /// </summary>
          [XmlEnum("ft3/sack[94lbm]")]
          ft3sack94lbm,
        /// <summary>
        /// galUKlbm property
        /// </summary>
          [XmlEnum("gal[UK]/lbm")]
          galUKlbm,
        /// <summary>
        /// galUSlbm property
        /// </summary>
          [XmlEnum("gal[US]/lbm")]
          galUSlbm,
        /// <summary>
        /// galUSsack94lbm property
        /// </summary>
          [XmlEnum("gal[US]/sack[94lbm]")]
          galUSsack94lbm,
        /// <summary>
        /// galUStonUK property
        /// </summary>
          [XmlEnum("gal[US]/ton[UK]")]
          galUStonUK,
        /// <summary>
        /// galUStonUS property
        /// </summary>
          [XmlEnum("gal[US]/ton[US]")]
          galUStonUS,
        /// <summary>
        /// Lkg property
        /// </summary>
          [XmlEnum("L/kg")]
          Lkg,
        /// <summary>
        /// Lt property
        /// </summary>
          [XmlEnum("L/t")]
          Lt,
        /// <summary>
        /// LtonUK property
        /// </summary>
          [XmlEnum("L/ton[UK]")]
          LtonUK,
        /// <summary>
        /// m3g property
        /// </summary>
          [XmlEnum("m3/g")]
          m3g,
        /// <summary>
        /// m3kg property
        /// </summary>
          [XmlEnum("m3/kg")]
          m3kg,
        /// <summary>
        /// m3t property
        /// </summary>
          [XmlEnum("m3/t")]
          m3t,
        /// <summary>
        /// m3tonUK property
        /// </summary>
          [XmlEnum("m3/ton[UK]")]
          m3tonUK,
        /// <summary>
        /// m3tonUS property
        /// </summary>
          [XmlEnum("m3/ton[US]")]
          m3tonUS
        }
        /// <summary>
        /// This class represents the TemperatureIntervalPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TemperatureIntervalPerLengthUom xsd enumeration.")]
        public enum TemperatureIntervalPerLengthUom 
        {
        /// <summary>
        /// Item001deltaFft property
        /// </summary>
          [XmlEnum("0.01 deltaF/ft")]
          Item001deltaFft,
        /// <summary>
        /// deltaCft property
        /// </summary>
          [XmlEnum("deltaC/ft")]
          deltaCft,
        /// <summary>
        /// deltaChm property
        /// </summary>
          [XmlEnum("deltaC/hm")]
          deltaChm,
        /// <summary>
        /// deltaCkm property
        /// </summary>
          [XmlEnum("deltaC/km")]
          deltaCkm,
        /// <summary>
        /// deltaCm property
        /// </summary>
          [XmlEnum("deltaC/m")]
          deltaCm,
        /// <summary>
        /// deltaFft property
        /// </summary>
          [XmlEnum("deltaF/ft")]
          deltaFft,
        /// <summary>
        /// deltaFm property
        /// </summary>
          [XmlEnum("deltaF/m")]
          deltaFm,
        /// <summary>
        /// deltaKkm property
        /// </summary>
          [XmlEnum("deltaK/km")]
          deltaKkm,
        /// <summary>
        /// deltaKm property
        /// </summary>
          [XmlEnum("deltaK/m")]
          deltaKm
        }
        /// <summary>
        /// This class represents the AttenuationPerFrequencyIntervalUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AttenuationPerFrequencyIntervalUom xsd enumeration.")]
        public enum AttenuationPerFrequencyIntervalUom 
        {
        /// <summary>
        /// BO property
        /// </summary>
          [XmlEnum("B/O")]
          BO,
        /// <summary>
        /// dBO property
        /// </summary>
          [XmlEnum("dB/O")]
          dBO
        }
        /// <summary>
        /// This class represents the IsothermalCompressibilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the IsothermalCompressibilityUom xsd enumeration.")]
        public enum IsothermalCompressibilityUom 
        {
        /// <summary>
        /// dm3kWh property
        /// </summary>
          [XmlEnum("dm3/(kW.h)")]
          dm3kWh,
        /// <summary>
        /// dm3MJ property
        /// </summary>
          [XmlEnum("dm3/MJ")]
          dm3MJ,
        /// <summary>
        /// m3kWh property
        /// </summary>
          [XmlEnum("m3/(kW.h)")]
          m3kWh,
        /// <summary>
        /// m3J property
        /// </summary>
          [XmlEnum("m3/J")]
          m3J,
        /// <summary>
        /// mm3J property
        /// </summary>
          [XmlEnum("mm3/J")]
          mm3J,
        /// <summary>
        /// ptUKhph property
        /// </summary>
          [XmlEnum("pt[UK]/(hp.h)")]
          ptUKhph
        }
        /// <summary>
        /// This class represents the ElectricResistanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricResistanceUom xsd enumeration.")]
        public enum ElectricResistanceUom 
        {
        /// <summary>
        /// cohm property
        /// </summary>
          cohm,
        /// <summary>
        /// dohm property
        /// </summary>
          dohm,
        /// <summary>
        /// Eohm property
        /// </summary>
          Eohm,
        /// <summary>
        /// fohm property
        /// </summary>
          fohm,
        /// <summary>
        /// Gohm property
        /// </summary>
          Gohm,
        /// <summary>
        /// kohm property
        /// </summary>
          kohm,
        /// <summary>
        /// Mohm property
        /// </summary>
          Mohm,
        /// <summary>
        /// mohm property
        /// </summary>
          mohm,
        /// <summary>
        /// nohm property
        /// </summary>
          nohm,
        /// <summary>
        /// ohm property
        /// </summary>
          ohm,
        /// <summary>
        /// pohm property
        /// </summary>
          pohm,
        /// <summary>
        /// Tohm property
        /// </summary>
          Tohm,
        /// <summary>
        /// uohm property
        /// </summary>
          uohm
        }
        /// <summary>
        /// This class represents the ReciprocalVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalVolumeUom xsd enumeration.")]
        public enum ReciprocalVolumeUom 
        {
        /// <summary>
        /// Item1bbl property
        /// </summary>
          [XmlEnum("1/bbl")]
          Item1bbl,
        /// <summary>
        /// Item1ft3 property
        /// </summary>
          [XmlEnum("1/ft3")]
          Item1ft3,
        /// <summary>
        /// Item1galUK property
        /// </summary>
          [XmlEnum("1/gal[UK]")]
          Item1galUK,
        /// <summary>
        /// Item1galUS property
        /// </summary>
          [XmlEnum("1/gal[US]")]
          Item1galUS,
        /// <summary>
        /// Item1L property
        /// </summary>
          [XmlEnum("1/L")]
          Item1L,
        /// <summary>
        /// Item1m3 property
        /// </summary>
          [XmlEnum("1/m3")]
          Item1m3
        }
        /// <summary>
        /// This class represents the PressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the PressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        /// <summary>
        /// Item001lbfft2 property
        /// </summary>
          [XmlEnum("0.01 lbf/ft2")]
          Item001lbfft2,
        /// <summary>
        /// at property
        /// </summary>
          at,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O[4degC]")]
          cmH2O4degC,
        /// <summary>
        /// cPa property
        /// </summary>
          cPa,
        /// <summary>
        /// dPa property
        /// </summary>
          dPa,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm2,
        /// <summary>
        /// EPa property
        /// </summary>
          EPa,
        /// <summary>
        /// fPa property
        /// </summary>
          fPa,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// inH2O39degF property
        /// </summary>
          [XmlEnum("inH2O[39degF]")]
          inH2O39degF,
        /// <summary>
        /// inH2O60degF property
        /// </summary>
          [XmlEnum("inH2O[60degF]")]
          inH2O60degF,
        /// <summary>
        /// inHg32degF property
        /// </summary>
          [XmlEnum("inHg[32degF]")]
          inHg32degF,
        /// <summary>
        /// inHg60degF property
        /// </summary>
          [XmlEnum("inHg[60degF]")]
          inHg60degF,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfm2 property
        /// </summary>
          [XmlEnum("kgf/m2")]
          kgfm2,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm2,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// mmHg0degC property
        /// </summary>
          [XmlEnum("mmHg[0degC]")]
          mmHg0degC,
        /// <summary>
        /// mPa property
        /// </summary>
          mPa,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm2,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// nPa property
        /// </summary>
          nPa,
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// tonfUKft2 property
        /// </summary>
          [XmlEnum("tonf[UK]/ft2")]
          tonfUKft2,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonf[US]/ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonf[US]/in2")]
          tonfUSin2,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// TPa property
        /// </summary>
          TPa,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// umHg0degC property
        /// </summary>
          [XmlEnum("umHg[0degC]")]
          umHg0degC,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi
        }
        /// <summary>
        /// This class represents the AreaPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AreaPerAreaUom xsd enumeration.")]
        public enum AreaPerAreaUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// area property
        /// </summary>
          [XmlEnum("%[area]")]
          area,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// in2ft2 property
        /// </summary>
          [XmlEnum("in2/ft2")]
          in2ft2,
        /// <summary>
        /// in2in2 property
        /// </summary>
          [XmlEnum("in2/in2")]
          in2in2,
        /// <summary>
        /// m2m2 property
        /// </summary>
          [XmlEnum("m2/m2")]
          m2m2,
        /// <summary>
        /// mm2mm2 property
        /// </summary>
          [XmlEnum("mm2/mm2")]
          mm2mm2
        }
        /// <summary>
        /// This class represents the AngularVelocityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the AngularVelocityUom xsd enumeration.")]
        public enum AngularVelocityUom 
        {
        /// <summary>
        /// degah property
        /// </summary>
          [XmlEnum("dega/h")]
          degah,
        /// <summary>
        /// degamin property
        /// </summary>
          [XmlEnum("dega/min")]
          degamin,
        /// <summary>
        /// degas property
        /// </summary>
          [XmlEnum("dega/s")]
          degas,
        /// <summary>
        /// rads property
        /// </summary>
          [XmlEnum("rad/s")]
          rads,
        /// <summary>
        /// revs property
        /// </summary>
          [XmlEnum("rev/s")]
          revs,
        /// <summary>
        /// rpm property
        /// </summary>
          rpm
        }
        /// <summary>
        /// This class represents the TimePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the TimePerVolumeUom xsd enumeration.")]
        public enum TimePerVolumeUom 
        {
        /// <summary>
        /// Item0001dft3 property
        /// </summary>
          [XmlEnum("0.001 d/ft3")]
          Item0001dft3,
        /// <summary>
        /// dbbl property
        /// </summary>
          [XmlEnum("d/bbl")]
          dbbl,
        /// <summary>
        /// dft3 property
        /// </summary>
          [XmlEnum("d/ft3")]
          dft3,
        /// <summary>
        /// dm3 property
        /// </summary>
          [XmlEnum("d/m3")]
          dm3,
        /// <summary>
        /// hft3 property
        /// </summary>
          [XmlEnum("h/ft3")]
          hft3,
        /// <summary>
        /// hm3 property
        /// </summary>
          [XmlEnum("h/m3")]
          hm3,
        /// <summary>
        /// sft3 property
        /// </summary>
          [XmlEnum("s/ft3")]
          sft3,
        /// <summary>
        /// sL property
        /// </summary>
          [XmlEnum("s/L")]
          sL,
        /// <summary>
        /// sm3 property
        /// </summary>
          [XmlEnum("s/m3")]
          sm3,
        /// <summary>
        /// sqtUK property
        /// </summary>
          [XmlEnum("s/qt[UK]")]
          sqtUK,
        /// <summary>
        /// sqtUS property
        /// </summary>
          [XmlEnum("s/qt[US]")]
          sqtUS
        }
        /// <summary>
        /// This class represents the EnergyLengthPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyLengthPerAreaUom xsd enumeration.")]
        public enum EnergyLengthPerAreaUom 
        {
        /// <summary>
        /// Jmm2 property
        /// </summary>
          [XmlEnum("J.m/m2")]
          Jmm2,
        /// <summary>
        /// kcalthmcm2 property
        /// </summary>
          [XmlEnum("kcal[th].m/cm2")]
          kcalthmcm2
        }
        /// <summary>
        /// This class represents the ElectricResistancePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ElectricResistancePerLengthUom xsd enumeration.")]
        public enum ElectricResistancePerLengthUom 
        {
        /// <summary>
        /// ohmm property
        /// </summary>
          [XmlEnum("ohm/m")]
          ohmm,
        /// <summary>
        /// uohmft property
        /// </summary>
          [XmlEnum("uohm/ft")]
          uohmft,
        /// <summary>
        /// uohmm property
        /// </summary>
          [XmlEnum("uohm/m")]
          uohmm
        }
        /// <summary>
        /// This class represents the ForcePerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ForcePerLengthUom xsd enumeration.")]
        public enum ForcePerLengthUom 
        {
        /// <summary>
        /// Item001lbfft property
        /// </summary>
          [XmlEnum("0.01 lbf/ft")]
          Item001lbfft,
        /// <summary>
        /// Item130lbfm property
        /// </summary>
          [XmlEnum("1/30 lbf/m")]
          Item130lbfm,
        /// <summary>
        /// Item130Nm property
        /// </summary>
          [XmlEnum("1/30 N/m")]
          Item130Nm,
        /// <summary>
        /// dynecm property
        /// </summary>
          [XmlEnum("dyne/cm")]
          dynecm,
        /// <summary>
        /// kgfcm property
        /// </summary>
          [XmlEnum("kgf/cm")]
          kgfcm,
        /// <summary>
        /// kNm property
        /// </summary>
          [XmlEnum("kN/m")]
          kNm,
        /// <summary>
        /// lbfft property
        /// </summary>
          [XmlEnum("lbf/ft")]
          lbfft,
        /// <summary>
        /// lbfin property
        /// </summary>
          [XmlEnum("lbf/in")]
          lbfin,
        /// <summary>
        /// mNkm property
        /// </summary>
          [XmlEnum("mN/km")]
          mNkm,
        /// <summary>
        /// mNm property
        /// </summary>
          [XmlEnum("mN/m")]
          mNm,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm,
        /// <summary>
        /// pdlcm property
        /// </summary>
          [XmlEnum("pdl/cm")]
          pdlcm,
        /// <summary>
        /// tonfUKft property
        /// </summary>
          [XmlEnum("tonf[UK]/ft")]
          tonfUKft,
        /// <summary>
        /// tonfUSft property
        /// </summary>
          [XmlEnum("tonf[US]/ft")]
          tonfUSft
        }
        /// <summary>
        /// This class represents the ReciprocalPressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the ReciprocalPressureUom xsd enumeration.")]
        public enum ReciprocalPressureUom 
        {
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa,
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi
        }
        /// <summary>
        /// This class represents the LightExposureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the LightExposureUom xsd enumeration.")]
        public enum LightExposureUom 
        {
        /// <summary>
        /// footcandles property
        /// </summary>
          [XmlEnum("footcandle.s")]
          footcandles,
        /// <summary>
        /// lxs property
        /// </summary>
          [XmlEnum("lx.s")]
          lxs
        }
        /// <summary>
        /// This class represents the EnergyPerAreaUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the EnergyPerAreaUom xsd enumeration.")]
        public enum EnergyPerAreaUom 
        {
        /// <summary>
        /// ergcm2 property
        /// </summary>
          [XmlEnum("erg/cm2")]
          ergcm2,
        /// <summary>
        /// Jcm2 property
        /// </summary>
          [XmlEnum("J/cm2")]
          Jcm2,
        /// <summary>
        /// Jm2 property
        /// </summary>
          [XmlEnum("J/m2")]
          Jm2,
        /// <summary>
        /// kgfmcm2 property
        /// </summary>
          [XmlEnum("kgf.m/cm2")]
          kgfmcm2,
        /// <summary>
        /// lbfftin2 property
        /// </summary>
          [XmlEnum("lbf.ft/in2")]
          lbfftin2,
        /// <summary>
        /// mJcm2 property
        /// </summary>
          [XmlEnum("mJ/cm2")]
          mJcm2,
        /// <summary>
        /// mJm2 property
        /// </summary>
          [XmlEnum("mJ/m2")]
          mJm2,
        /// <summary>
        /// Nm property
        /// </summary>
          [XmlEnum("N/m")]
          Nm
        }
        /// <summary>
        /// This class represents the MagneticDipoleMomentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the MagneticDipoleMomentUom xsd enumeration.")]
        public enum MagneticDipoleMomentUom 
        {
        /// <summary>
        /// Wbm property
        /// </summary>
          [XmlEnum("Wb.m")]
          Wbm
        }
        /// <summary>
        /// This class represents the DigitalStorageUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/commonv2")]
        [Description("This class represents the DigitalStorageUom xsd enumeration.")]
        public enum DigitalStorageUom 
        {
        /// <summary>
        /// bit property
        /// </summary>
          bit,
        /// <summary>
        /// byte property
        /// </summary>
          @byte,
        /// <summary>
        /// Kibyte property
        /// </summary>
          Kibyte,
        /// <summary>
        /// Mibyte property
        /// </summary>
          Mibyte
        }
        /// <summary>
        /// This class represents the UnstructuredColumnLayerIndexableElements xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the UnstructuredColumnLayerIndexableElements xsd enumeration.")]
        public enum UnstructuredColumnLayerIndexableElements 
        {
        /// <summary>
        /// Count = #Columns x NK
        /// </summary>
          cells,
        /// <summary>
        /// columnedges property
        /// </summary>
          [XmlEnum("column edges")]
          columnedges,
        /// <summary>
        /// Count = #Columns = columnCount
        /// </summary>
          columns,
        /// <summary>
        /// coordinatelines property
        /// </summary>
          [XmlEnum("coordinate lines")]
          coordinatelines,
        /// <summary>
        /// Count = #Edges = edgeCount
        /// </summary>
          edges,
        /// <summary>
        /// edgespercolumn property
        /// </summary>
          [XmlEnum("edges per column")]
          edgespercolumn,
        /// <summary>
        /// Count = #KFaces + #ColumnEdges x NK
        /// </summary>
          faces,
        /// <summary>
        /// facespercell property
        /// </summary>
          [XmlEnum("faces per cell")]
          facespercell,
        /// <summary>
        /// hingenodefaces property
        /// </summary>
          [XmlEnum("hinge node faces")]
          hingenodefaces,
        /// <summary>
        /// intervaledges property
        /// </summary>
          [XmlEnum("interval edges")]
          intervaledges,
        /// <summary>
        /// Count = NK + gapCount Only needed if the Unstructured Column Layer indices are a component of GPGrid.
        /// </summary>
          intervals,
        /// <summary>
        /// Count = NK
        /// </summary>
          layers,
        /// <summary>
        /// Count = #CoordinateLines x NKL
        /// </summary>
          nodes,
        /// <summary>
        /// nodespercell property
        /// </summary>
          [XmlEnum("nodes per cell")]
          nodespercell,
        /// <summary>
        /// nodesperedge property
        /// </summary>
          [XmlEnum("nodes per edge")]
          nodesperedge,
        /// <summary>
        /// nodesperface property
        /// </summary>
          [XmlEnum("nodes per face")]
          nodesperface,
        /// <summary>
        /// Count = #Pillars = pillarCount
        /// </summary>
          pillars,
        /// <summary>
        /// Count specified per subnode patch
        /// </summary>
          subnodes
        }
        /// <summary>
        /// This class represents the IjkIndexableElements xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the IjkIndexableElements xsd enumeration.")]
        public enum IjkIndexableElements 
        {
        /// <summary>
        /// Count = NI x NJ x NK
        /// </summary>
          cells,
        /// <summary>
        /// columnedges property
        /// </summary>
          [XmlEnum("column edges")]
          columnedges,
        /// <summary>
        /// Count = NI x NJ = #Columns = columnCount
        /// </summary>
          columns,
        /// <summary>
        /// coordinatelines property
        /// </summary>
          [XmlEnum("coordinate lines")]
          coordinatelines,
        /// <summary>
        /// Count = #Edges = edgeCount
        /// </summary>
          edges,
        /// <summary>
        /// edgespercolumn property
        /// </summary>
          [XmlEnum("edges per column")]
          edgespercolumn,
        /// <summary>
        /// Count = #Faces = #KFaces + #ColumnEdges x NK + #SplitFaces
        /// </summary>
          faces,
        /// <summary>
        /// facespercell property
        /// </summary>
          [XmlEnum("faces per cell")]
          facespercell,
        /// <summary>
        /// hingenodefaces property
        /// </summary>
          [XmlEnum("hinge node faces")]
          hingenodefaces,
        /// <summary>
        /// intervaledges property
        /// </summary>
          [XmlEnum("interval edges")]
          intervaledges,
        /// <summary>
        /// Count = NK + gapCount
        /// </summary>
          intervals,
        /// <summary>
        /// Count = NI
        /// </summary>
          I0,
        /// <summary>
        /// I0edges property
        /// </summary>
          [XmlEnum("I0 edges")]
          I0edges,
        /// <summary>
        /// Count = NJ
        /// </summary>
          J0,
        /// <summary>
        /// J0edges property
        /// </summary>
          [XmlEnum("J0 edges")]
          J0edges,
        /// <summary>
        /// Count = NK
        /// </summary>
          layers,
        /// <summary>
        /// Count = #Nodes = #CoordinateLines x NKL
        /// </summary>
          nodes,
        /// <summary>
        /// nodespercell property
        /// </summary>
          [XmlEnum("nodes per cell")]
          nodespercell,
        /// <summary>
        /// nodesperedge property
        /// </summary>
          [XmlEnum("nodes per edge")]
          nodesperedge,
        /// <summary>
        /// nodesperface property
        /// </summary>
          [XmlEnum("nodes per face")]
          nodesperface,
        /// <summary>
        /// Count = #Pillars = NIL x NJL + #SplitPillars
        /// </summary>
          pillars,
        /// <summary>
        /// radialoriginpolyline property
        /// </summary>
          [XmlEnum("radial origin polyline")]
          radialoriginpolyline,
        /// <summary>
        /// Count specified per subnode patch
        /// </summary>
          subnodes
        }
        /// <summary>
        /// This class represents the UnstructuredCellIndexableElements xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the UnstructuredCellIndexableElements xsd enumeration.")]
        public enum UnstructuredCellIndexableElements 
        {
        /// <summary>
        /// Count = #Cells = cellCount
        /// </summary>
          cells,
        /// <summary>
        /// Count = #Edges = edgeCount
        /// </summary>
          edges,
        /// <summary>
        /// Count = #Faces = faceCount
        /// </summary>
          faces,
        /// <summary>
        /// facespercell property
        /// </summary>
          [XmlEnum("faces per cell")]
          facespercell,
        /// <summary>
        /// hingenodefaces property
        /// </summary>
          [XmlEnum("hinge node faces")]
          hingenodefaces,
        /// <summary>
        /// Count = #Nodes = nodeCount
        /// </summary>
          nodes,
        /// <summary>
        /// nodespercell property
        /// </summary>
          [XmlEnum("nodes per cell")]
          nodespercell,
        /// <summary>
        /// nodesperedge property
        /// </summary>
          [XmlEnum("nodes per edge")]
          nodesperedge,
        /// <summary>
        /// nodesperface property
        /// </summary>
          [XmlEnum("nodes per face")]
          nodesperface,
        /// <summary>
        /// Count specified per subnode patch
        /// </summary>
          subnodes
        }
        /// <summary>
        /// This class represents the WellboreFrameIndexableElements xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/energyml/data/resqmlv2")]
        [Description("This class represents the WellboreFrameIndexableElements xsd enumeration.")]
        public enum WellboreFrameIndexableElements 
        {
        /// <summary>
        /// Count = nodeCount-1
        /// </summary>
          intervals,
        /// <summary>
        /// Count = nodeCount
        /// </summary>
          nodes,
        /// <summary>
        /// Count = Number of intervals that intersect grids in the blocked wellbore. When applied to the wellbore frame representation, this is identical to the number of intervals.
        /// </summary>
          cells
        }
    }
    #endregion
}