
//This code was generated using the Energistics Generator tool.  Direct changes to this code will be lost
//during regeneration.

using System;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Serialization;

using Energistics.DataAccess.PRODML131.ComponentSchemas;
using Energistics.DataAccess.PRODML131.ReferenceData;
using Energistics.DataAccess.Reflection;
using Energistics.DataAccess.Validation;

namespace Energistics.DataAccess.PRODML131
{
    #region Classes
    /// <summary>
    /// This class represents the abstractObject xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WftRunList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellTestList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeriesStatisticList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeSeriesDataList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Report))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductVolumeList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductionOperationList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductFlowModelList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidSampleList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidAnalysisResultList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FluidAnalysisList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPathList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsMeasurementList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsInstrumentBoxeList))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DtsInstalledSystemList))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.energistics.org/schemas/abstract")]
    [System.Xml.Serialization.XmlRootAttribute("abstractDataObject", Namespace="http://www.energistics.org/schemas/abstract", IsNullable=false)]
	[Description("This class represents the abstractObject xsd type.")]
    public abstract partial class AbstractObject : Object, INotifyPropertyChanged
    {


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about a single formation tester sample acquistion.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftSampleAcquisition", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information about a single formation tester sample acquistion.")]
    public partial class WftSampleAcquisition : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Reference to the Sample that was collected at this point.
        /// </summary>
		[Description("Reference to the Sample that was collected at this point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("sampleRef")]
        public RefNameString SampleRef {
            get {
                return sampleRefField;
            } 
            set {
                sampleRefField = value;
                NotifyPropertyChanged("SampleRef");
            }
        }

        private RefNameString sampleRefField; 

        /// <summary>
        /// The ID of the sample cylinder in which this sample was collected.
        /// </summary>
		[StringLength(64)]
        [Description("The ID of the sample cylinder in which this sample was collected.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("sampleCylinderId")]
        public string SampleCylinderId {
            get {
                return sampleCylinderIdField;
            } 
            set {
                sampleCylinderIdField = value;
                NotifyPropertyChanged("SampleCylinderId");
            }
        }

        private string sampleCylinderIdField; 

        /// <summary>
        /// A name assigned to the acquisition.
        /// </summary>
		[StringLength(64)]
        [Description("A name assigned to the acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The kind of sample acquisition.
        /// </summary>
		[StringLength(40)]
        [Description("The kind of sample acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("kind")]
        public string Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string kindField; 

        /// <summary>
        ///  Sampling start time. 
        /// </summary>
		[Description("Sampling  start time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        ///  Sampling end time. 
        /// </summary>
		[Description("Sampling  end time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// Comments created by the field engineers collecting the sample.
        /// </summary>
		[StringLength(4000)]
        [Description("Comments created by the field engineers collecting the sample.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("fieldComment")]
        public string FieldComment {
            get {
                return fieldCommentField;
            } 
            set {
                fieldCommentField = value;
                NotifyPropertyChanged("FieldComment");
            }
        }

        private string fieldCommentField; 

        /// <summary>
        /// Comments created by the engineers analysing the sample.
        /// </summary>
		[StringLength(4000)]
        [Description("Comments created by the engineers analysing the sample.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("interpretationComment")]
        public string InterpretationComment {
            get {
                return interpretationCommentField;
            } 
            set {
                interpretationCommentField = value;
                NotifyPropertyChanged("InterpretationComment");
            }
        }

        private string interpretationCommentField; 

        /// <summary>
        /// An identifier for the fluid collected as part of this acquistion.
        /// </summary>
		[StringLength(32)]
        [Description("An identifier for the fluid collected as part of this acquistion.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("sampleId")]
        public string SampleId {
            get {
                return sampleIdField;
            } 
            set {
                sampleIdField = value;
                NotifyPropertyChanged("SampleId");
            }
        }

        private string sampleIdField; 

        /// <summary>
        /// An identifier for the slot in the sample carrier where the sample was acquired.
        /// </summary>
		[StringLength(32)]
        [Description("An identifier for the slot in the sample carrier where the sample was acquired.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("sampleCarrierSlotId")]
        public string SampleCarrierSlotId {
            get {
                return sampleCarrierSlotIdField;
            } 
            set {
                sampleCarrierSlotIdField = value;
                NotifyPropertyChanged("SampleCarrierSlotId");
            }
        }

        private string sampleCarrierSlotIdField; 

        /// <summary>
        /// An identifier for the formation tester tool section that acquired the sample.
        /// </summary>
		[StringLength(32)]
        [Description("An identifier for the formation tester tool section that acquired the sample.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("toolSectionId")]
        public string ToolSectionId {
            get {
                return toolSectionIdField;
            } 
            set {
                toolSectionIdField = value;
                NotifyPropertyChanged("ToolSectionId");
            }
        }

        private string toolSectionIdField; 

        /// <summary>
        /// An identifier for the sample bottle that was used for this acquisition.
        /// </summary>
		[StringLength(32)]
        [Description("An identifier for the sample bottle that was used for this acquisition.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("bottleId")]
        public string BottleId {
            get {
                return bottleIdField;
            } 
            set {
                bottleIdField = value;
                NotifyPropertyChanged("BottleId");
            }
        }

        private string bottleIdField; 

        /// <summary>
        /// A description of the kind of bottle used, for example whether the bottle is pressurized with Nitrogen or not.
        /// </summary>
		[StringLength(32)]
        [Description("A description of the kind of bottle used, for example whether the bottle is pressurized with Nitrogen or not.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("bottleConfiguration")]
        public string BottleConfiguration {
            get {
                return bottleConfigurationField;
            } 
            set {
                bottleConfigurationField = value;
                NotifyPropertyChanged("BottleConfiguration");
            }
        }

        private string bottleConfigurationField; 

        /// <summary>
        /// The pressure that was used to charge the sample bottle.
        /// </summary>
		[Description("The pressure that was used to charge the sample bottle.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "generalMeasureType")]
		[XmlElement("cushionPressure")]
        public GeneralMeasureType CushionPressure {
            get {
                return cushionPressureField;
            } 
            set {
                cushionPressureField = value;
                NotifyPropertyChanged("CushionPressure");
            }
        }

        private GeneralMeasureType cushionPressureField; 

        /// <summary>
        /// The expected kind of the sample, typically oil, water or gas.
        /// </summary>
		[StringLength(32)]
        [Description("The expected kind of the sample, typically oil, water or gas.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("grossFluidKind")]
        public string GrossFluidKind {
            get {
                return grossFluidKindField;
            } 
            set {
                grossFluidKindField = value;
                NotifyPropertyChanged("GrossFluidKind");
            }
        }

        private string grossFluidKindField; 

        /// <summary>
        /// A result of formation tester analysis that applies to this acquisition.
        /// </summary>
		[Description("A result of formation tester analysis that applies to this acquisition.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftTestResult")]
		[XmlElement("result")]
        public List<WftTestResult> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(resultField!=null)
                 return resultField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestResult> resultField; 

        /// <summary>
        /// A refererence to a test (uid) under the current station.
        /// </summary>
		[Description("A refererence to a test (uid) under the current station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("testRef")]
        public List<RefNameString> TestRef {
            get {
                return testRefField;
            } 
            set {
                testRefField = value;
                NotifyPropertyChanged("TestRef");
            }
        }

         /// <summary>
         /// bool to indicate if TestRef has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestRefSpecified
         {
             get {
             if(testRefField!=null)
                 return testRefField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefNameString> testRefField; 

        /// <summary>
        /// A reference to the associated data acquired during this acquisition.
        /// </summary>
		[Description("A reference to the associated data acquired during this acquisition.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftTestData")]
		[XmlElement("testData")]
        public List<WftTestData> TestData {
            get {
                return testDataField;
            } 
            set {
                testDataField = value;
                NotifyPropertyChanged("TestData");
            }
        }

         /// <summary>
         /// bool to indicate if TestData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestDataSpecified
         {
             get {
             if(testDataField!=null)
                 return testDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestData> testDataField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refNameString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refNameString", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the refNameString xsd type.")]
    public partial class RefNameString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefNameString class.
        /// </summary>
        public RefNameString() {}

        /// <summary>
        /// Initializes a new instance of the RefNameString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefNameString(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the node referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the unique identifier (uid attribute) in the node referenced by the name value.  This attribute is required within the context of a WITSML server.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidRef")]
		
        public string UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private string uidRefField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the generalMeasureType xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="generalMeasureType", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the generalMeasureType xsd type.")]
    public partial class GeneralMeasureType : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GeneralMeasureType class.
        /// </summary>
        public GeneralMeasureType() {}

        /// <summary>
        /// Initializes a new instance of the GeneralMeasureType class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public GeneralMeasureType(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[StringLength(24)]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the abstractMeasure xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeQualifiedMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeFlowRateQualifiedMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TemperatureSlopeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasureOrQuantity))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LostVolumeAndReason))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneralQualifiedMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GeneralMeasureType))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WellElevationCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MeasuredDepthCoord))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasurePercent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeFlowRateMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VelocityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TimeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermodynamicTemperatureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PressureMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PlaneAngleMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassConcentrationMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthPerLengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LengthMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ElectricCurrentMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DynamicViscosityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DimensionlessMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DensityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AttenuationMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WorkMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(VolumePerStandardVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumePerVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumePerStandardVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(StandardVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ThermalConductivityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ProductivityIndexMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MolarVolumeMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MolarFractionMeasurePercent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ModulusOfCompressionMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassFlowRateMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MassConcentrationMeasurePercent))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FrequencyMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CompressibilityMeasure))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(AmountOfSubstanceMeasure))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="abstractMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the abstractMeasure xsd type.")]
    public abstract partial class AbstractMeasure : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeQualifiedMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeQualifiedMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the volumeQualifiedMeasure xsd type.")]
    public partial class VolumeQualifiedMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeQualifiedMeasure class.
        /// </summary>
        public VolumeQualifiedMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeQualifiedMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeQualifiedMeasure(double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// status property
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		        public string StatusSurrogate
        {
            get {
                     if(Status==null)  return null;
                     else return Status.Name; }
            set { 

                 if(this.Status== null)
                 Status= new ValueStatus(value);
                 else
                   Status.Name = value; }
        }
        /// <summary>
        /// status property
        /// </summary>
        [XmlIgnore]

        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeFlowRateQualifiedMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeFlowRateQualifiedMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the volumeFlowRateQualifiedMeasure xsd type.")]
    public partial class VolumeFlowRateQualifiedMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateQualifiedMeasure class.
        /// </summary>
        public VolumeFlowRateQualifiedMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateQualifiedMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeFlowRateQualifiedMeasure(double value, VolumeFlowRateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// status property
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		        public string StatusSurrogate
        {
            get {
                     if(Status==null)  return null;
                     else return Status.Name; }
            set { 

                 if(this.Status== null)
                 Status= new ValueStatus(value);
                 else
                   Status.Name = value; }
        }
        /// <summary>
        /// status property
        /// </summary>
        [XmlIgnore]

        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeFlowRateUom")]
        [XmlAttribute("uom")]
		
        public VolumeFlowRateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeFlowRateUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the temperatureSlopeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="temperatureSlopeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the temperatureSlopeMeasure xsd type.")]
    public partial class TemperatureSlopeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TemperatureSlopeMeasure class.
        /// </summary>
        public TemperatureSlopeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TemperatureSlopeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TemperatureSlopeMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[StringLength(24)]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measureOrQuantity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measureOrQuantity", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the measureOrQuantity xsd type.")]
    public partial class MeasureOrQuantity : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        public MeasureOrQuantity() {}

        /// <summary>
        /// Initializes a new instance of the MeasureOrQuantity class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasureOrQuantity(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the quantity. This value must conform to the values allowed by a measure class. If the value is a measure then the uom must be specified.
        /// </summary>
		[StringLength(24)]
        [Description("The unit of measure for the quantity. This value must conform to the values allowed by a measure class.  If the value is a measure then the uom must be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lostVolumeAndReason xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lostVolumeAndReason", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the lostVolumeAndReason xsd type.")]
    public partial class LostVolumeAndReason : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LostVolumeAndReason class.
        /// </summary>
        public LostVolumeAndReason() {}

        /// <summary>
        /// Initializes a new instance of the LostVolumeAndReason class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LostVolumeAndReason(double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 

		/// <summary>
        /// Defines why the volume was lost.
        /// </summary>
		[Required]
        [Description("Defines why the volume was lost.")]
        [EnergisticsDataTypeAttribute(DataType = "ReasonLost")]
        [XmlAttribute("reasonLost")]
		        public string ReasonLostSurrogate
        {
            get {
                     if(ReasonLost==null)  return null;
                     else return ReasonLost.Name; }
            set { 

                 if(this.ReasonLost== null)
                 ReasonLost= new ReasonLost(value);
                 else
                   ReasonLost.Name = value; }
        }
        /// <summary>
        /// Defines why the volume was lost.
        /// </summary>
        [XmlIgnore]

        public ReasonLost ReasonLost {
            get {
                return reasonLostField;
            } 
            set {
                reasonLostField = value;
                NotifyPropertyChanged("ReasonLost");
            }
        }

        private ReasonLost reasonLostField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the generalQualifiedMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="generalQualifiedMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the generalQualifiedMeasure xsd type.")]
    public partial class GeneralQualifiedMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the GeneralQualifiedMeasure class.
        /// </summary>
        public GeneralQualifiedMeasure() {}

        /// <summary>
        /// Initializes a new instance of the GeneralQualifiedMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public GeneralQualifiedMeasure(double value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		        public string StatusSurrogate
        {
            get {
                     if(Status==null)  return null;
                     else return Status.Name; }
            set { 

                 if(this.Status== null)
                 Status= new ValueStatus(value);
                 else
                   Status.Name = value; }
        }
        /// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
        [XmlIgnore]

        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

		/// <summary>
        /// The kind of the value component. For example, "X" in a tuple of X and Y.
        /// </summary>
		[StringLength(40)]
        [Description("The kind of the value component. For example, \"X\" in a tuple of X and Y.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        [XmlAttribute("component")]
		
        public string Component {
            get {
                return componentField;
            } 
            set {
                componentField = value;
                NotifyPropertyChanged("Component");
            }
        }

        private string componentField; 

		/// <summary>
        /// The unit of measure for the value. This value must conform to the values allowed by the measure class.
        /// </summary>
		[Required]
        [StringLength(24)]
        [Description("The unit of measure for the value. This value must conform to the values allowed by the measure class.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellElevationCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellElevationCoord", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the wellElevationCoord xsd type.")]
    public partial class WellElevationCoord : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        public WellElevationCoord() {}

        /// <summary>
        /// Initializes a new instance of the WellElevationCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WellElevationCoord(double value, WellVerticalCoordinateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.
        /// </summary>
		[Required]
        [Description("The unit of measure of the quantity value. If not given then the default unit of measure of the explicitly or implicitly given datum must be assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "WellVerticalCoordinateUom")]
        [XmlAttribute("uom")]
		
        public WellVerticalCoordinateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private WellVerticalCoordinateUom uomField; 

		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the reference datum for this coordinate  value as defined in WellDatum.  If not given then the default WellDatum must be assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "refWellDatum")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the measuredDepthCoord xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="measuredDepthCoord", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the measuredDepthCoord xsd type.")]
    public partial class MeasuredDepthCoord : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        public MeasuredDepthCoord() {}

        /// <summary>
        /// Initializes a new instance of the MeasuredDepthCoord class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MeasuredDepthCoord(double value, MeasuredDepthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the quantity value.
        /// </summary>
		[Required]
        [Description("The unit of measure of the quantity value.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasuredDepthUom")]
        [XmlAttribute("uom")]
		
        public MeasuredDepthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MeasuredDepthUom uomField; 

		/// <summary>
        /// A pointer to the reference datum for this coordinate value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A pointer to the reference datum for this coordinate  value as defined in WellDatum. This value is assumed to match the uid value in a WellDatum. If not given then the default WellDatum must be assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "refWellDatum")]
        [XmlAttribute("datum")]
		
        public string Datum {
            get {
                return datumField;
            } 
            set {
                datumField = value;
                NotifyPropertyChanged("Datum");
            }
        }

        private string datumField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasurePercent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasurePercent", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the volumePerVolumeMeasurePercent xsd type.")]
    public partial class VolumePerVolumeMeasurePercent : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasurePercent class.
        /// </summary>
        public VolumePerVolumeMeasurePercent() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasurePercent class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasurePercent(double value, PercentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PercentUom")]
        [XmlAttribute("uom")]
		
        public PercentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PercentUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerVolumeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the volumePerVolumeMeasure xsd type.")]
    public partial class VolumePerVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        public VolumePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerVolumeMeasure(double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeFlowRateMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeFlowRateMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the volumeFlowRateMeasure xsd type.")]
    public partial class VolumeFlowRateMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateMeasure class.
        /// </summary>
        public VolumeFlowRateMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeFlowRateMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeFlowRateMeasure(double value, VolumeFlowRateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeFlowRateUom")]
        [XmlAttribute("uom")]
		
        public VolumeFlowRateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeFlowRateUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the volumeMeasure xsd type.")]
    public partial class VolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        public VolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumeMeasure(double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the velocityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="velocityMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the velocityMeasure xsd type.")]
    public partial class VelocityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VelocityMeasure class.
        /// </summary>
        public VelocityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VelocityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VelocityMeasure(double value, VelocityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VelocityUom")]
        [XmlAttribute("uom")]
		
        public VelocityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VelocityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the timeMeasure xsd type.")]
    public partial class TimeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        public TimeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the TimeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public TimeMeasure(double value, TimeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "TimeUom")]
        [XmlAttribute("uom")]
		
        public TimeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private TimeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermodynamicTemperatureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermodynamicTemperatureMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the thermodynamicTemperatureMeasure xsd type.")]
    public partial class ThermodynamicTemperatureMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        public ThermodynamicTemperatureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermodynamicTemperatureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermodynamicTemperatureMeasure(double value, ThermodynamicTemperatureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermodynamicTemperatureUom")]
        [XmlAttribute("uom")]
		
        public ThermodynamicTemperatureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermodynamicTemperatureUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the pressureMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="pressureMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the pressureMeasure xsd type.")]
    public partial class PressureMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        public PressureMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PressureMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PressureMeasure(double value, PressureUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PressureUom")]
        [XmlAttribute("uom")]
		
        public PressureUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PressureUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the planeAngleMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="planeAngleMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the planeAngleMeasure xsd type.")]
    public partial class PlaneAngleMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        public PlaneAngleMeasure() {}

        /// <summary>
        /// Initializes a new instance of the PlaneAngleMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public PlaneAngleMeasure(double value, PlaneAngleUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
        [XmlAttribute("uom")]
		
        public PlaneAngleUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PlaneAngleUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the massMeasure xsd type.")]
    public partial class MassMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        public MassMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassMeasure(double value, MassUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassUom")]
        [XmlAttribute("uom")]
		
        public MassUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massConcentrationMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massConcentrationMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the massConcentrationMeasure xsd type.")]
    public partial class MassConcentrationMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasure class.
        /// </summary>
        public MassConcentrationMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassConcentrationMeasure(double value, MassConcentrationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassConcentrationUom")]
        [XmlAttribute("uom")]
		
        public MassConcentrationUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassConcentrationUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthPerLengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthPerLengthMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the lengthPerLengthMeasure xsd type.")]
    public partial class LengthPerLengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        public LengthPerLengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthPerLengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthPerLengthMeasure(double value, LengthPerLengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthPerLengthUom")]
        [XmlAttribute("uom")]
		
        public LengthPerLengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthPerLengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the lengthMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="lengthMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the lengthMeasure xsd type.")]
    public partial class LengthMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        public LengthMeasure() {}

        /// <summary>
        /// Initializes a new instance of the LengthMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public LengthMeasure(double value, LengthUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "LengthUom")]
        [XmlAttribute("uom")]
		
        public LengthUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private LengthUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the electricCurrentMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="electricCurrentMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the electricCurrentMeasure xsd type.")]
    public partial class ElectricCurrentMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        public ElectricCurrentMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ElectricCurrentMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ElectricCurrentMeasure(double value, ElectricCurrentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ElectricCurrentUom")]
        [XmlAttribute("uom")]
		
        public ElectricCurrentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ElectricCurrentUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dynamicViscosityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dynamicViscosityMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the dynamicViscosityMeasure xsd type.")]
    public partial class DynamicViscosityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        public DynamicViscosityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DynamicViscosityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DynamicViscosityMeasure(double value, DynamicViscosityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DynamicViscosityUom")]
        [XmlAttribute("uom")]
		
        public DynamicViscosityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DynamicViscosityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the dimensionlessMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="dimensionlessMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the dimensionlessMeasure xsd type.")]
    public partial class DimensionlessMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        public DimensionlessMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DimensionlessMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DimensionlessMeasure(double value, DimensionlessUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DimensionlessUom")]
        [XmlAttribute("uom")]
		
        public DimensionlessUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DimensionlessUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the densityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="densityMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the densityMeasure xsd type.")]
    public partial class DensityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the DensityMeasure class.
        /// </summary>
        public DensityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the DensityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public DensityMeasure(double value, DensityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DensityUom")]
        [XmlAttribute("uom")]
		
        public DensityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private DensityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the attenuationMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="attenuationMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the attenuationMeasure xsd type.")]
    public partial class AttenuationMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AttenuationMeasure class.
        /// </summary>
        public AttenuationMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AttenuationMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AttenuationMeasure(double value, AttenuationUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AttenuationUom")]
        [XmlAttribute("uom")]
		
        public AttenuationUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AttenuationUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the workMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="workMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the workMeasure xsd type.")]
    public partial class WorkMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WorkMeasure class.
        /// </summary>
        public WorkMeasure() {}

        /// <summary>
        /// Initializes a new instance of the WorkMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public WorkMeasure(double value, WorkUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "WorkUom")]
        [XmlAttribute("uom")]
		
        public WorkUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private WorkUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the volumePerStandardVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="volumePerStandardVolumeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the volumePerStandardVolumeMeasure xsd type.")]
    public partial class VolumePerStandardVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the VolumePerStandardVolumeMeasure class.
        /// </summary>
        public VolumePerStandardVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the VolumePerStandardVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public VolumePerStandardVolumeMeasure(double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumePerVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumePerVolumeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the standardVolumePerVolumeMeasure xsd type.")]
    public partial class StandardVolumePerVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StandardVolumePerVolumeMeasure class.
        /// </summary>
        public StandardVolumePerVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StandardVolumePerVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StandardVolumePerVolumeMeasure(double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumePerStandardVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumePerStandardVolumeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the standardVolumePerStandardVolumeMeasure xsd type.")]
    public partial class StandardVolumePerStandardVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StandardVolumePerStandardVolumeMeasure class.
        /// </summary>
        public StandardVolumePerStandardVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StandardVolumePerStandardVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StandardVolumePerStandardVolumeMeasure(double value, VolumePerVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumePerVolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumePerVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumePerVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the standardVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="standardVolumeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the standardVolumeMeasure xsd type.")]
    public partial class StandardVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the StandardVolumeMeasure class.
        /// </summary>
        public StandardVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the StandardVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public StandardVolumeMeasure(double value, VolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeUom")]
        [XmlAttribute("uom")]
		
        public VolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private VolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the thermalConductivityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="thermalConductivityMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the thermalConductivityMeasure xsd type.")]
    public partial class ThermalConductivityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        public ThermalConductivityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ThermalConductivityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ThermalConductivityMeasure(double value, ThermalConductivityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ThermalConductivityUom")]
        [XmlAttribute("uom")]
		
        public ThermalConductivityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ThermalConductivityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the productivityIndexMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="productivityIndexMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the productivityIndexMeasure xsd type.")]
    public partial class ProductivityIndexMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ProductivityIndexMeasure class.
        /// </summary>
        public ProductivityIndexMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ProductivityIndexMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ProductivityIndexMeasure(double value, ProductivityIndexUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ProductivityIndexUom")]
        [XmlAttribute("uom")]
		
        public ProductivityIndexUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ProductivityIndexUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the molarVolumeMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="molarVolumeMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the molarVolumeMeasure xsd type.")]
    public partial class MolarVolumeMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MolarVolumeMeasure class.
        /// </summary>
        public MolarVolumeMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MolarVolumeMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MolarVolumeMeasure(double value, MolarVolumeUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MolarVolumeUom")]
        [XmlAttribute("uom")]
		
        public MolarVolumeUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MolarVolumeUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the molarFractionMeasurePercent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="molarFractionMeasurePercent", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the molarFractionMeasurePercent xsd type.")]
    public partial class MolarFractionMeasurePercent : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MolarFractionMeasurePercent class.
        /// </summary>
        public MolarFractionMeasurePercent() {}

        /// <summary>
        /// Initializes a new instance of the MolarFractionMeasurePercent class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MolarFractionMeasurePercent(double value, PercentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PercentUom")]
        [XmlAttribute("uom")]
		
        public PercentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PercentUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the modulusOfCompressionMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="modulusOfCompressionMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the modulusOfCompressionMeasure xsd type.")]
    public partial class ModulusOfCompressionMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the ModulusOfCompressionMeasure class.
        /// </summary>
        public ModulusOfCompressionMeasure() {}

        /// <summary>
        /// Initializes a new instance of the ModulusOfCompressionMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public ModulusOfCompressionMeasure(double value, ModulusOfCompressionUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "ModulusOfCompressionUom")]
        [XmlAttribute("uom")]
		
        public ModulusOfCompressionUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private ModulusOfCompressionUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massFlowRateMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massFlowRateMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the massFlowRateMeasure xsd type.")]
    public partial class MassFlowRateMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassFlowRateMeasure class.
        /// </summary>
        public MassFlowRateMeasure() {}

        /// <summary>
        /// Initializes a new instance of the MassFlowRateMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassFlowRateMeasure(double value, MassFlowRateUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "MassFlowRateUom")]
        [XmlAttribute("uom")]
		
        public MassFlowRateUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private MassFlowRateUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the massConcentrationMeasurePercent xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="massConcentrationMeasurePercent", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the massConcentrationMeasurePercent xsd type.")]
    public partial class MassConcentrationMeasurePercent : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasurePercent class.
        /// </summary>
        public MassConcentrationMeasurePercent() {}

        /// <summary>
        /// Initializes a new instance of the MassConcentrationMeasurePercent class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public MassConcentrationMeasurePercent(double value, PercentUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "PercentUom")]
        [XmlAttribute("uom")]
		
        public PercentUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private PercentUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the frequencyMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="frequencyMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the frequencyMeasure xsd type.")]
    public partial class FrequencyMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FrequencyMeasure class.
        /// </summary>
        public FrequencyMeasure() {}

        /// <summary>
        /// Initializes a new instance of the FrequencyMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public FrequencyMeasure(double value, FrequencyUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "FrequencyUom")]
        [XmlAttribute("uom")]
		
        public FrequencyUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private FrequencyUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the compressibilityMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="compressibilityMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the compressibilityMeasure xsd type.")]
    public partial class CompressibilityMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CompressibilityMeasure class.
        /// </summary>
        public CompressibilityMeasure() {}

        /// <summary>
        /// Initializes a new instance of the CompressibilityMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public CompressibilityMeasure(double value, CompressibilityUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "CompressibilityUom")]
        [XmlAttribute("uom")]
		
        public CompressibilityUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private CompressibilityUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the amountOfSubstanceMeasure xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="amountOfSubstanceMeasure", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the amountOfSubstanceMeasure xsd type.")]
    public partial class AmountOfSubstanceMeasure : AbstractMeasure, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the AmountOfSubstanceMeasure class.
        /// </summary>
        public AmountOfSubstanceMeasure() {}

        /// <summary>
        /// Initializes a new instance of the AmountOfSubstanceMeasure class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public AmountOfSubstanceMeasure(double value, AmountOfSubstanceUom uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// uom property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "AmountOfSubstanceUom")]
        [XmlAttribute("uom")]
		
        public AmountOfSubstanceUom Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private AmountOfSubstanceUom uomField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A single result derived from analysis of formation tester data.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftTestResult", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A single result derived from analysis of formation tester data.")]
    public partial class WftTestResult : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of result represents a combination of test kind and analysis method applied.
        /// </summary>
		[Required]
        [Description("The kind of result represents a combination of test kind and  analysis method applied.")]
        [EnergisticsDataTypeAttribute(DataType = "WftTestResultKind")]
		[XmlElement("kind")]
        public WftTestResultKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private WftTestResultKind kindField; 

        /// <summary>
        /// The name of a proprietary method which generally represents a specialization of a result kind.
        /// </summary>
		[Required]
        [StringLength(40)]
        [Description("The name of a proprietary method which generally  represents a specialization of a result kind.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("method")]
        public string Method {
            get {
                return methodField;
            } 
            set {
                methodField = value;
                NotifyPropertyChanged("Method");
            }
        }

        private string methodField; 

        /// <summary>
        /// The top of the interval to which this result applies.
        /// </summary>
		[Required]
        [Description("The top of the interval to which this result applies.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The bottom of the interval to which this result applies.
        /// </summary>
		[Required]
        [Description("The bottom of the interval to which this result applies.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// A reference to the formation tester data used to derive this result.
        /// </summary>
		[Description("A reference to the formation tester data used to derive this result.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftTestData")]
		[XmlElement("testData")]
        public List<WftTestData> TestData {
            get {
                return testDataField;
            } 
            set {
                testDataField = value;
                NotifyPropertyChanged("TestData");
            }
        }

         /// <summary>
         /// bool to indicate if TestData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestDataSpecified
         {
             get {
             if(testDataField!=null)
                 return testDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestData> testDataField; 

        /// <summary>
        /// An input parameter to the analysis method.
        /// </summary>
		[Description("An input parameter to the analysis method.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftInOutParameter")]
		[XmlElement("inputParameter")]
        public List<WftInOutParameter> InputParameter {
            get {
                return inputParameterField;
            } 
            set {
                inputParameterField = value;
                NotifyPropertyChanged("InputParameter");
            }
        }

         /// <summary>
         /// bool to indicate if InputParameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InputParameterSpecified
         {
             get {
             if(inputParameterField!=null)
                 return inputParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftInOutParameter> inputParameterField; 

        /// <summary>
        /// An output (result) parameter from the analysis of the test. The aggregate of parameters might represent something like the simulated response of the test, to compare with actual.
        /// </summary>
		[Description("An output (result) parameter from the analysis of the test. The aggregate of parameters might represent something like the simulated response  of the test, to compare with actual.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftInOutParameter")]
		[XmlElement("outputParameter")]
        public List<WftInOutParameter> OutputParameter {
            get {
                return outputParameterField;
            } 
            set {
                outputParameterField = value;
                NotifyPropertyChanged("OutputParameter");
            }
        }

         /// <summary>
         /// bool to indicate if OutputParameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OutputParameterSpecified
         {
             get {
             if(outputParameterField!=null)
                 return outputParameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftInOutParameter> outputParameterField; 

        /// <summary>
        /// A reference to an outputParameter of another result which was used as an input to this result. For a test result, the other result will be in the same test (i.e., ../result). For a station result, the other result will be in the same station (i.e., ../result) or will be a test result in the same station (../test/result) or will be an sampleAcquisition in the same station (i.e., ../sampleAcquisition/result). For a wftRun result, the other result will be in the same wftRun (i.e., ../result) or will be a result in a station (i.e., ../station/result) or will be a result in a station's test (i.e., ../station/test/result) or will be a result in a station's sampleAcquisition (i.e., ../station/sampleAcquisition/result). The "../result" notation means: starting in the parent node, traverse down to the appropriate child result using the provided pointers.
        /// </summary>
		[Description("A reference to an outputParameter of another result which was used as an input to this result. For a test result, the other result will be in the same test (i.e., ../result). For a station result, the other result will be in the same station (i.e., ../result) or  will be a test result in the same station (../test/result) or  will be an sampleAcquisition in the same station (i.e., ../sampleAcquisition/result). For a wftRun result, the other result will be in the same wftRun (i.e., ../result) or will be a result in a station (i.e., ../station/result) or will be a result in a station's test (i.e., ../station/test/result) or  will be a result in a station's sampleAcquisition (i.e., ../station/sampleAcquisition/result). The \"../result\" notation means: starting in the parent node, traverse down to the  appropriate child result using the provided pointers.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftResultRef")]
		[XmlElement("inputResultRef")]
        public List<WftResultRef> InputResultRef {
            get {
                return inputResultRefField;
            } 
            set {
                inputResultRefField = value;
                NotifyPropertyChanged("InputResultRef");
            }
        }

         /// <summary>
         /// bool to indicate if InputResultRef has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InputResultRefSpecified
         {
             get {
             if(inputResultRefField!=null)
                 return inputResultRefField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftResultRef> inputResultRefField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A reference to a set of formation tester data that was recorded.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftTestData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A reference to a set of formation tester data that was recorded.")]
    public partial class WftTestData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The role of the test data. The role applies either to a curve or to a point parameter.
        /// </summary>
		[Required]
        [Description("The role of the test data.  The role applies either to a curve or to a point parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "WftTestDataRole")]
		[XmlElement("role")]
        public WftTestDataRole Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private WftTestDataRole roleField; 

        /// <summary>
        /// A reference to a specific interval of a specific curve in a specific log.
        /// </summary>
		[Description("A reference to a specific interval of a specific curve in a specific log.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftCurveSection")]
		[XmlElement("curveSection")]
        public List<WftCurveSection> CurveSection {
            get {
                return curveSectionField;
            } 
            set {
                curveSectionField = value;
                NotifyPropertyChanged("CurveSection");
            }
        }

         /// <summary>
         /// bool to indicate if CurveSection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CurveSectionSpecified
         {
             get {
             if(curveSectionField!=null)
                 return curveSectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftCurveSection> curveSectionField; 

        /// <summary>
        /// Test parameters used here are either control parameters used to govern the test or are single value parameters measured by the test (and not by subsequent analysis).
        /// </summary>
		[Description("Test parameters used here are either control parameters used to govern  the test or are single value parameters measured by the test (and not by subsequent analysis).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftInOutParameter")]
		[XmlElement("parameter")]
        public List<WftInOutParameter> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftInOutParameter> parameterField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Points to an interval on a curve in a log (or wellLog).
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftCurveSection", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Points to an interval on a curve in a log (or wellLog).")]
    public partial class WftCurveSection : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to a specific log or wellLog that contains the curve.
        /// </summary>
		[Required]
        [Description("A pointer to a specific log or wellLog that contains the curve.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("logRef")]
        public RefObjectString LogRef {
            get {
                return logRefField;
            } 
            set {
                logRefField = value;
                NotifyPropertyChanged("LogRef");
            }
        }

        private RefObjectString logRefField; 

        /// <summary>
        /// The mnemonic of the curve in the referenced log or wellLog.
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("The mnemonic of the curve in the referenced log or wellLog.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("mnemonic")]
        public string Mnemonic {
            get {
                return mnemonicField;
            } 
            set {
                mnemonicField = value;
                NotifyPropertyChanged("Mnemonic");
            }
        }

        private string mnemonicField; 

        /// <summary>
        /// The date and time of the start of the relevant interval. If not specified then the beginning of the curve is assumed.
        /// </summary>
		[Description("The date and time of the start of the relevant interval. If not specified then the beginning of the curve is assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time of the end of the relevant interval. If not specified then the end of the curve is assumed.
        /// </summary>
		[Description("The date and time of the end of the relevant interval. If not specified then the end of the curve is assumed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the refObjectString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="refObjectString", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the refObjectString xsd type.")]
    public partial class RefObjectString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the RefObjectString class.
        /// </summary>
        public RefObjectString() {}

        /// <summary>
        /// Initializes a new instance of the RefObjectString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public RefObjectString(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The name of the singular object being referenced.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the singular object being referenced.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("object")]
		
        public string Object {
            get {
                return objectField;
            } 
            set {
                objectField = value;
                NotifyPropertyChanged("Object");
            }
        }

        private string objectField; 

		/// <summary>
        /// A reference to the unique identifier (uid attribute) in the object referenced by the name value. This attribute is required within the context of a WITSML server.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the unique identifier (uid attribute) in the object referenced by the name value.  This attribute is required within the context of a WITSML server.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidRef")]
		
        public string UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private string uidRefField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Extension values Schema. The intent is to allow standard WITSML "named" extensions without having to modify the schema. A client or server can ignore any name that it does not recognize but certain meta data is required in order to allow generic clients or servers to process the value.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extensionNameValue", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Extension values Schema. The intent is to allow standard WITSML named extensions without having to modify the schema. A client or server can ignore any name that it does not recognize but certain meta data is required in order to allow generic clients or servers to process the value.")]
    public partial class ExtensionNameValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size. For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the WITSML SIG Technical Team before use.
        /// </summary>
		[Required]
        [Description("The name of the extension. Each standard name should document the expected measure class. Each standard name should document the expected maximum size.  For numeric values the size should be in terms of xsd types such as int, long, short, byte, float or double. For strings, the maximum length should be defined in number of characters. Local extensions to the list of standard names are allowed but it is strongly recommended that the names and definitions be approved by the  WITSML SIG Technical Team before use.")]
        [EnergisticsDataTypeAttribute(DataType = "ExtensionName")]
		[XmlElement("name")]
        public ExtensionName Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private ExtensionName nameField; 

        /// <summary>
        /// The value of the extension. This may also include a uom attribute. The content should conform to constraints defined by the data type.
        /// </summary>
		[Required]
        [Description("The value of the extension.  This may also include a uom attribute.  The content should conform to constraints defined by the data type.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "extensionvalue")]
		[XmlElement("value")]
        public Extensionvalue Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private Extensionvalue valueField; 

        /// <summary>
        /// The underlying XML type of the value.
        /// </summary>
		[Required]
        [Description("The underlying XML type of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "PrimitiveType")]
		[XmlElement("dataType")]
        public PrimitiveType? DataType {
            get {
                return dataTypeField;
            } 
            set {
                dataTypeField = value;
                 this.DataTypeSpecified = true;
                NotifyPropertyChanged("DataType");
            }
        }

        
        private bool DataTypeSpecifiedField = false;
        
        /// <summary>
        /// DataTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DataTypeSpecified {
            get {
                return DataTypeSpecifiedField;
            } 
            set {
                DataTypeSpecifiedField = value;
                NotifyPropertyChanged("DataTypeSpecified");
            }
        }
        
        private PrimitiveType? dataTypeField; 

        /// <summary>
        /// The date-time associated with the value.
        /// </summary>
		[Description("The date-time associated with the value.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The measured depth associated with the value.
        /// </summary>
		[Description("The measured depth associated with the value.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Indexes things with the same name. That is, 1 indicates the first one, 2 incidates the second one, etc.
        /// </summary>
		[Description("Indexes things with the same name.  That is, 1 indicates the first one, 2 incidates the second one, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("index")]
        public short? Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                 this.IndexSpecified = true;
                NotifyPropertyChanged("Index");
            }
        }

        private short? indexField; 

        /// <summary>
        /// indexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IndexSpecified {
            get {
                return indexSpecifiedField;
            } 
            set {
                indexSpecifiedField = value;
                NotifyPropertyChanged("IndexSpecified");
            }
        }

        private bool indexSpecifiedField; 

        /// <summary>
        /// The kind of the measure. For example, "length". This should be specified if the value requires a unit of measure.
        /// </summary>
		[Description("The kind of the measure. For example, \"length\". This should be specified if the value requires a unit of measure.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// measureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return measureClassSpecifiedField;
            } 
            set {
                measureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool measureClassSpecifiedField; 

        /// <summary>
        /// A textual description of the extension.
        /// </summary>
		[StringLength(256)]
        [Description("A textual description of the extension.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the extensionvalue xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="extensionvalue", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the extensionvalue xsd type.")]
    public partial class Extensionvalue : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the Extensionvalue class.
        /// </summary>
        public Extensionvalue() {}

        /// <summary>
        /// Initializes a new instance of the Extensionvalue class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public Extensionvalue(string value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure for the value. This value must conform to the values allowed by a measure class.
        /// </summary>
		[StringLength(24)]
        [Description("The unit of measure for the value. This value must conform to the values allowed by a measure class.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines a parameter which may have been used for input or output depending on the parent node.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftInOutParameter", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Defines a parameter which may have been used for input or output depending on the parent node.")]
    public partial class WftInOutParameter : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the parameter.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The value of the parameter. If the value represents a measure, then the uom attribute and the corresponding measureClass must be specified.
        /// </summary>
		[Required]
        [Description("The value of the parameter.  If the value represents a measure, then the uom attribute  and the corresponding measureClass must be specified.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measureOrQuantity")]
		[XmlElement("value")]
        public MeasureOrQuantity Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private MeasureOrQuantity valueField; 

        /// <summary>
        /// The kind of the measure. For example, "length". This should be specified if the value requires a unit of measure.
        /// </summary>
		[Description("The kind of the measure. For example, \"length\". This should be specified if the value requires a unit of measure.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// measureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return measureClassSpecifiedField;
            } 
            set {
                measureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool measureClassSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This defines a set of pointers which collectively identify a particular outputParameter beginning at a point in the hierarchy. Which combination of pointers is needed depends on the starting point.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftResultRef", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This defines a set of pointers which collectively identify a particular outputParameter beginning at a point in the hierarchy. Which combination of pointers is needed depends on the starting point.")]
    public partial class WftResultRef : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the station node containing the specified nodes.
        /// </summary>
		[Description("A pointer to the station node containing the specified nodes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("stationRef")]
        public RefNameString StationRef {
            get {
                return stationRefField;
            } 
            set {
                stationRefField = value;
                NotifyPropertyChanged("StationRef");
            }
        }

        private RefNameString stationRefField; 

        /// <summary>
        /// A pointer to the test node containing the specified nodes.
        /// </summary>
		[Description("A pointer to the test node containing the specified nodes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("testRef")]
        public RefNameString TestRef {
            get {
                return testRefField;
            } 
            set {
                testRefField = value;
                NotifyPropertyChanged("TestRef");
            }
        }

        private RefNameString testRefField; 

        /// <summary>
        /// A pointer to the sampleAcquisition node containing the specified nodes.
        /// </summary>
		[Description("A pointer to the sampleAcquisition node containing the specified nodes.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("sampleAcquisitionRef")]
        public RefNameString SampleAcquisitionRef {
            get {
                return sampleAcquisitionRefField;
            } 
            set {
                sampleAcquisitionRefField = value;
                NotifyPropertyChanged("SampleAcquisitionRef");
            }
        }

        private RefNameString sampleAcquisitionRefField; 

        /// <summary>
        /// A pointer to the desired result containing the outputParameter.
        /// </summary>
		[Required]
        [Description("A pointer to the desired result containing the outputParameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("resultRef")]
        public RefNameString ResultRef {
            get {
                return resultRefField;
            } 
            set {
                resultRefField = value;
                NotifyPropertyChanged("ResultRef");
            }
        }

        private RefNameString resultRefField; 

        /// <summary>
        /// A pointer to the desired outputParameter.
        /// </summary>
		[Required]
        [Description("A pointer to the desired outputParameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("outputParameterRef")]
        public RefNameString OutputParameterRef {
            get {
                return outputParameterRefField;
            } 
            set {
                outputParameterRefField = value;
                NotifyPropertyChanged("OutputParameterRef");
            }
        }

        private RefNameString outputParameterRefField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about a single formation tester test.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information about a single formation tester test.")]
    public partial class WftTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Describes whether the test is associated with a pressure buildup or a drawdown.
        /// </summary>
		[Required]
        [Description("Describes whether the test is associated with a pressure buildup or a drawdown.")]
        [EnergisticsDataTypeAttribute(DataType = "WftTestKind")]
		[XmlElement("testKind")]
        public WftTestKind TestKind {
            get {
                return testKindField;
            } 
            set {
                testKindField = value;
                NotifyPropertyChanged("TestKind");
            }
        }

        private WftTestKind testKindField; 

        /// <summary>
        /// The date and time when the data collection started for this test.
        /// </summary>
		[Description("The date and time when the data collection started for this test.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time when the data collection ended for this test.
        /// </summary>
		[Description("The date and time when the data collection ended for this test.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// A result of formation tester analysis that applies to this test.
        /// </summary>
		[Description("A result of formation tester analysis that applies to this test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftTestResult")]
		[XmlElement("result")]
        public List<WftTestResult> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(resultField!=null)
                 return resultField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestResult> resultField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Captures information about an event that occurred.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftEvent", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Captures information about an event that occurred.")]
    public partial class WftEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of event.
        /// </summary>
		[Required]
        [Description("The kind of event.")]
        [EnergisticsDataTypeAttribute(DataType = "WftEventKind")]
		[XmlElement("kind")]
        public WftEventKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private WftEventKind kindField; 

        /// <summary>
        /// Date and time of the start of the event.
        /// </summary>
		[Required]
        [Description("Date and time of the start of the event.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// The time duration of the event.
        /// </summary>
		[Required]
        [Description("The time duration of the event.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("duration")]
        public TimeMeasure Duration {
            get {
                return durationField;
            } 
            set {
                durationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure durationField; 

        /// <summary>
        /// A comment about the event.
        /// </summary>
		[StringLength(4000)]
        [Description("A comment about the event.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about a single station in a wireline formation tester run.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wftStation", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information about a single station in a wireline formation tester run.")]
    public partial class WftStation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of the station (such as, conventional, observation).
        /// </summary>
		[Required]
        [Description("The type of the station (such as, conventional, observation).")]
        [EnergisticsDataTypeAttribute(DataType = "WftStationKind")]
		[XmlElement("stationKind")]
        public WftStationKind StationKind {
            get {
                return stationKindField;
            } 
            set {
                stationKindField = value;
                NotifyPropertyChanged("StationKind");
            }
        }

        private WftStationKind stationKindField; 

        /// <summary>
        /// The date and time when the data collection started for this station.
        /// </summary>
		[Description("The date and time when the data collection started for this station.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time when the data collection completed for this station.
        /// </summary>
		[Description("The date and time when the data collection completed for this station.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The type of flowing interval.
        /// </summary>
		[Required]
        [Description("The type of flowing interval.")]
        [EnergisticsDataTypeAttribute(DataType = "WftFlowingIntervalKind")]
		[XmlElement("flowingIntervalKind")]
        public WftFlowingIntervalKind FlowingIntervalKind {
            get {
                return flowingIntervalKindField;
            } 
            set {
                flowingIntervalKindField = value;
                NotifyPropertyChanged("FlowingIntervalKind");
            }
        }

        private WftFlowingIntervalKind flowingIntervalKindField; 

        /// <summary>
        /// Top depth of station if flowingIntervalKind="packed interval". Depth of probe if flowingIntervalKind="probe".
        /// </summary>
		[Required]
        [Description("Top depth of station if flowingIntervalKind=\"packed interval\". Depth of probe if flowingIntervalKind=\"probe\".")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// Bottom depth of station if flowingIntervalKind="packed interval". Depth of probe if flowingIntervalKind="probe".
        /// </summary>
		[Required]
        [Description("Bottom depth of station if flowingIntervalKind=\"packed interval\".  Depth of probe if flowingIntervalKind=\"probe\".")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBottom")]
        public MeasuredDepthCoord MDBottom {
            get {
                return mdBottomField;
            } 
            set {
                mdBottomField = value;
                NotifyPropertyChanged("MDBottom");
            }
        }

        private MeasuredDepthCoord mdBottomField; 

        /// <summary>
        /// The diameter of the probe used, only valid if flowingIntervalKind is equal to "probe".
        /// </summary>
		[Description("The diameter of the probe used, only valid if flowingIntervalKind is equal to \"probe\".")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("diaProbe")]
        public LengthMeasure DiaProbe {
            get {
                return diaProbeField;
            } 
            set {
                diaProbeField = value;
                NotifyPropertyChanged("DiaProbe");
            }
        }

        private LengthMeasure diaProbeField; 

        /// <summary>
        /// A description of the station.
        /// </summary>
		[StringLength(4000)]
        [Description("A description of the station.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// A reference a log containing WFT time-series data at this station (may be superset of all the test log references at this station).
        /// </summary>
		[Description("A reference a log containing WFT time-series data at this station (may be superset of all the test log references at this station).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("logRef")]
        public List<RefObjectString> LogRef {
            get {
                return logRefField;
            } 
            set {
                logRefField = value;
                NotifyPropertyChanged("LogRef");
            }
        }

         /// <summary>
         /// bool to indicate if LogRef has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LogRefSpecified
         {
             get {
             if(logRefField!=null)
                 return logRefField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefObjectString> logRefField; 

        /// <summary>
        /// A formation tester event that occurs during this station.
        /// </summary>
		[Description("A formation tester event that occurs during this station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftEvent")]
		[XmlElement("event")]
        public List<WftEvent> Event {
            get {
                return eventField;
            } 
            set {
                eventField = value;
                NotifyPropertyChanged("Event");
            }
        }

         /// <summary>
         /// bool to indicate if Event has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EventSpecified
         {
             get {
             if(eventField!=null)
                 return eventField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftEvent> eventField; 

        /// <summary>
        /// A formation tester test period that is recorded as part of this station.
        /// </summary>
		[Description("A formation tester test period that is recorded as part of this station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftTest")]
		[XmlElement("test")]
        public List<WftTest> Test {
            get {
                return testField;
            } 
            set {
                testField = value;
                NotifyPropertyChanged("Test");
            }
        }

         /// <summary>
         /// bool to indicate if Test has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestSpecified
         {
             get {
             if(testField!=null)
                 return testField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTest> testField; 

        /// <summary>
        /// A formation tester sample that is collected as part of this station.
        /// </summary>
		[Description("A formation tester sample that is collected as part of this station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftSampleAcquisition")]
		[XmlElement("sampleAcquisition")]
        public List<WftSampleAcquisition> SampleAcquisition {
            get {
                return sampleAcquisitionField;
            } 
            set {
                sampleAcquisitionField = value;
                NotifyPropertyChanged("SampleAcquisition");
            }
        }

         /// <summary>
         /// bool to indicate if SampleAcquisition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SampleAcquisitionSpecified
         {
             get {
             if(sampleAcquisitionField!=null)
                 return sampleAcquisitionField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftSampleAcquisition> sampleAcquisitionField; 

        /// <summary>
        /// A result of formation tester analysis that applies to this station.
        /// </summary>
		[Description("A result of formation tester analysis that applies to this station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftTestResult")]
		[XmlElement("result")]
        public List<WftTestResult> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(resultField!=null)
                 return resultField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestResult> resultField; 

        /// <summary>
        /// References a station containing the flowing flowing Interval in cases where this station is an observation station.
        /// </summary>
		[Description("References a station containing the flowing flowing Interval in  cases where this station is an observation station.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("stationRef")]
        public RefNameString StationRef {
            get {
                return stationRefField;
            } 
            set {
                stationRefField = value;
                NotifyPropertyChanged("StationRef");
            }
        }

        private RefNameString stationRefField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Wireline Formation Test (WFT) object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wftRun", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The non-contextual content of a WITSML Wireline Formation Test (WFT) object.")]
    public partial class WftRun : Object, IProdmlDataObject, ICommonDataObject, IWellboreObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the Wireline Formation Test (WFT). 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the Wireline Formation Test (WFT).")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the Wireline Formation Test (WFT). 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the Wireline Formation Test (WFT).")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// Human recognizable context for the Wireline Formation Test (WFT). 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the Wireline Formation Test (WFT).")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the "Special Handling of Change Information" within a server. See the relevant API specification for the behavior related to this element.
        /// </summary>
		[Description("The growing state of the object. This value is only relevant within the context of a server. This is an API server parameter releted to the \"Special Handling of Change Information\" within a server.  See the relevant API specification for the behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("objectGrowing")]
        public bool? ObjectGrowing {
            get {
                return objectGrowingField;
            } 
            set {
                objectGrowingField = value;
                 this.ObjectGrowingSpecified = true;
                NotifyPropertyChanged("ObjectGrowing");
            }
        }

        private bool? objectGrowingField; 

        /// <summary>
        /// objectGrowingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ObjectGrowingSpecified {
            get {
                return objectGrowingSpecifiedField;
            } 
            set {
                objectGrowingSpecifiedField = value;
                NotifyPropertyChanged("ObjectGrowingSpecified");
            }
        }

        private bool objectGrowingSpecifiedField; 

        /// <summary>
        /// References a log containing WFT tie-in (e.g. gamma ray) log vs. depth data.
        /// </summary>
		[Description("References a log containing WFT tie-in (e.g. gamma ray) log vs. depth data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refObjectString")]
		[XmlElement("tieInLogRef")]
        public RefObjectString TieInLogRef {
            get {
                return tieInLogRefField;
            } 
            set {
                tieInLogRefField = value;
                NotifyPropertyChanged("TieInLogRef");
            }
        }

        private RefObjectString tieInLogRefField; 

        /// <summary>
        /// Name of contractor who provided the service.
        /// </summary>
		[StringLength(64)]
        [Description("Name of contractor who provided the service.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("serviceCompany")]
        public string ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string serviceCompanyField; 

        /// <summary>
        /// The date and time when the data collection started.
        /// </summary>
		[Description("The date and time when the data collection started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time when the data collection completed.
        /// </summary>
		[Description("The date and time when the data collection completed.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The minimum station depth within this WFT. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The minimum station depth within this WFT. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("minIndex")]
        public MeasuredDepthCoord MinIndex {
            get {
                return minIndexField;
            } 
            set {
                minIndexField = value;
                NotifyPropertyChanged("MinIndex");
            }
        }

        private MeasuredDepthCoord minIndexField; 

        /// <summary>
        /// The maximum station depth within this WFT. This is an API "structural-range" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The maximum station depth within this WFT. This is an API \"structural-range\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("maxIndex")]
        public MeasuredDepthCoord MaxIndex {
            get {
                return maxIndexField;
            } 
            set {
                maxIndexField = value;
                NotifyPropertyChanged("MaxIndex");
            }
        }

        private MeasuredDepthCoord maxIndexField; 

        /// <summary>
        /// A description of the run.
        /// </summary>
		[StringLength(4000)]
        [Description("A description of the run.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// An individual WFT station.
        /// </summary>
		[Description("An individual WFT station.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftStation")]
		[XmlElement("station")]
        public List<WftStation> Station {
            get {
                return stationField;
            } 
            set {
                stationField = value;
                NotifyPropertyChanged("Station");
            }
        }

         /// <summary>
         /// bool to indicate if Station has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StationSpecified
         {
             get {
             if(stationField!=null)
                 return stationField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftStation> stationField; 

        /// <summary>
        /// A single result derived from analysis of formation tester data.
        /// </summary>
		[Description("A single result derived from analysis of formation tester data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wftTestResult")]
		[XmlElement("result")]
        public List<WftTestResult> Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

         /// <summary>
         /// bool to indicate if Result has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ResultSpecified
         {
             get {
             if(resultField!=null)
                 return resultField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftTestResult> resultField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents  the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    ///  WITSML - Common Data Component Schema 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_commonData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description(" WITSML - Common Data Component Schema ")]
    public partial class CommonData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An identifier to indicate the data originator. This identifies the server that originally created the object and thus most of the uids in the object (but not necessarily the uids of the parents). This is typically a url. 
        /// </summary>
		[StringLength(64)]
        [Description("An identifier to indicate the data originator. This identifies the server that originally created  the object and thus most of the uids in the object (but not  necessarily the uids of the parents). This is typically a url.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("sourceName")]
        public string SourceName {
            get {
                return sourceNameField;
            } 
            set {
                sourceNameField = value;
                NotifyPropertyChanged("SourceName");
            }
        }

        private string sourceNameField; 

        /// <summary>
        /// When the data was created at the persistent data store. In a query template, a specified value will be interpreted by the server as a request for dTimCreation values that are greater-than the specified value. 
        /// </summary>
		[Description("When the data was created at the persistent data store.  In a query template, a specified value will be interpreted by the server as a request for dTimCreation values that are greater-than the specified value.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimCreation")]
        public Timestamp? DateTimeCreation {
            get {
                return dTimCreationField;
            } 
            set {
                dTimCreationField = value;
                 this.DateTimeCreationSpecified = true;
                NotifyPropertyChanged("DateTimeCreation");
            }
        }

        private Timestamp? dTimCreationField; 

        /// <summary>
        /// dTimCreationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCreationSpecified {
            get {
                return dTimCreationSpecifiedField;
            } 
            set {
                dTimCreationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCreationSpecified");
            }
        }

        private bool dTimCreationSpecifiedField; 

        /// <summary>
        /// Last change of any element of the data at the persistent data store. The change time is not updated for a growing object while it is growing. In a query template, a specified value will be interpreted by the server as a request for dTimLastChange values that are greater-than the specified value. The dTimLastChange value may be changed by a client (user). 
        /// </summary>
		[Description("Last change of any element of the data at the persistent data store. The change time is not updated for a growing object while it is growing. In a query template, a specified value will be interpreted by the server as a request for dTimLastChange values that are greater-than the specified value. The dTimLastChange value may be changed by a client (user).")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimLastChange")]
        public Timestamp? DateTimeLastChange {
            get {
                return dTimLastChangeField;
            } 
            set {
                dTimLastChangeField = value;
                 this.DateTimeLastChangeSpecified = true;
                NotifyPropertyChanged("DateTimeLastChange");
            }
        }

        private Timestamp? dTimLastChangeField; 

        /// <summary>
        /// dTimLastChangeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeLastChangeSpecified {
            get {
                return dTimLastChangeSpecifiedField;
            } 
            set {
                dTimLastChangeSpecifiedField = value;
                NotifyPropertyChanged("DateTimeLastChangeSpecified");
            }
        }

        private bool dTimLastChangeSpecifiedField; 

        /// <summary>
        /// The item state for the data object. 
        /// </summary>
		[Description("The item state for the data object.")]
        [EnergisticsDataTypeAttribute(DataType = "ItemState")]
		[XmlElement("itemState")]
        public ItemState? ItemState {
            get {
                return itemStateField;
            } 
            set {
                itemStateField = value;
                 this.ItemStateSpecified = true;
                NotifyPropertyChanged("ItemState");
            }
        }

        private ItemState? itemStateField; 

        /// <summary>
        /// itemStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemStateSpecified {
            get {
                return itemStateSpecifiedField;
            } 
            set {
                itemStateSpecifiedField = value;
                NotifyPropertyChanged("ItemStateSpecified");
            }
        }

        private bool itemStateSpecifiedField; 

        /// <summary>
        /// The category of the service related to the creation of the object. For example, "mud log service", "cement service", "LWD service", "rig service", "drilling service". REALTIME STORE UNIQUE KEY: When accessed via the Store Interface, for each instance of realtime, the combination of "uidWell", "uidWellbore", "idSub" and commonData's "serviceCategory" must be unique. That is, the Store Interface will only retain one realtime for a particular wellbore, subscription and service with the REALTIME STORE UNIQUE KEY being the object selector.
        /// </summary>
		[StringLength(40)]
        [Description("The category of the service related to the creation of the object.  For example, \"mud log service\", \"cement service\", \"LWD service\", \"rig service\", \"drilling service\". REALTIME STORE UNIQUE KEY: When accessed via the Store Interface, for each instance of realtime,  the combination of \"uidWell\", \"uidWellbore\", \"idSub\" and commonData's \"serviceCategory\"  must be unique. That is, the Store Interface will only retain one realtime   for a particular wellbore, subscription and service with the REALTIME STORE UNIQUE KEY  being the object selector.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("serviceCategory")]
        public string ServiceCategory {
            get {
                return serviceCategoryField;
            } 
            set {
                serviceCategoryField = value;
                NotifyPropertyChanged("ServiceCategory");
            }
        }

        private string serviceCategoryField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// The local time zone of the original acquisition date-time values. It is the deviation in hours and minutes from UTC. The first occurrence should be the actual local time zone at the start of acquisition and may represent a seasonally adjusted value such as daylight savings. The dTim attribute must be populated in the second and subsequent occurrences if the local time zone changes during acquisition. This knowledge is required because the original time zone in a dateTime value may be lost when software converts to a different time zone.
        /// </summary>
		[Description("The local time zone of the original acquisition date-time values.  It is the deviation in hours and minutes from UTC. The first occurrence should be the actual local time zone at the start of acquisition and may represent a seasonally adjusted value such as daylight savings. The dTim attribute must be populated in the second and subsequent occurrences  if the local time zone changes during acquisition. This knowledge is required because the original time zone in a dateTime value may be lost when software converts to a different time zone.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "timestampedTimeZone")]
		[XmlElement("acquisitionTimeZone")]
        public List<TimestampedTimeZone> AcquisitionTimeZone {
            get {
                return acquisitionTimeZoneField;
            } 
            set {
                acquisitionTimeZoneField = value;
                NotifyPropertyChanged("AcquisitionTimeZone");
            }
        }

         /// <summary>
         /// bool to indicate if AcquisitionTimeZone has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AcquisitionTimeZoneSpecified
         {
             get {
             if(acquisitionTimeZoneField!=null)
                 return acquisitionTimeZoneField.Count>0?true:false;
             else return false;
             }
         }
        private List<TimestampedTimeZone> acquisitionTimeZoneField; 

        /// <summary>
        /// Extensions to the schema using an xsd:any construct.
        /// </summary>
		[Description("Extensions to the schema using an xsd:any construct.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionAny")]
		[XmlElement("extensionAny")]
        public ExtensionAny ExtensionAny {
            get {
                return extensionAnyField;
            } 
            set {
                extensionAnyField = value;
                NotifyPropertyChanged("ExtensionAny");
            }
        }

        private ExtensionAny extensionAnyField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timestampedTimeZone xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timestampedTimeZone", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the timestampedTimeZone xsd type.")]
    public partial class TimestampedTimeZone : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimestampedTimeZone class.
        /// </summary>
        public TimestampedTimeZone() {}

        /// <summary>
        /// Initializes a new instance of the TimestampedTimeZone class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimestampedTimeZone(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The date and time when this local time zone became active. This value must be defined on the second and subsequent occurrences.
        /// </summary>
		[Description("The date and time when this local time zone became active. This value must be defined on the second and subsequent occurrences.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [RegularExpression("[Z]|([\\-+](([01][0-9])|(2[0-3])):[0-5][0-9])")]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Extension Schema. The intent is to allow standard WITSML schema extensions which will validate in older clients or servers. A client or server can ignore any schema that it does not recognize. New versions will modify specific elements to replace this type with a type that adds new elements, including another element with this type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_extensionAny", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Extension Schema. The intent is to allow standard WITSML schema extensions which will validate in older clients or servers. A client or server can ignore any schema that it does not recognize. New versions will modify specific elements to replace this type with a type that adds new elements, including another element with this type.")]
    public partial class ExtensionAny : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_customData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_customData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_customData xsd type.")]
    public partial class CustomData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Any property
        /// </summary>
		[RecurringElement]
		[XmlAnyElement]
        public List<XmlElement> Any {
            get {
                return AnyField;
            } 
            set {
                AnyField = value;
                NotifyPropertyChanged("Any");
            }
        }

         /// <summary>
         /// bool to indicate if Any has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AnySpecified
         {
             get {
             if(AnyField!=null)
                 return AnyField.Count>0?true:false;
             else return false;
             }
         }
        private List<XmlElement> AnyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Oil, gas, and water volumes and rates measured during the well test. The volumes allow either actual volumes or standard (corrected) volumes. The densities are also recorded with the volumes.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestInjectionTestResults", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Oil, gas, and water volumes and rates measured during the well test. The volumes allow either actual volumes or standard (corrected) volumes. The densities are also recorded with the volumes.")]
    public partial class WellTestInjectionTestResults : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Oil volumes measured during the well test.
        /// </summary>
		[Description("Oil volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestTestVolume")]
		[XmlElement("oilVolume")]
        public WellTestTestVolume OilVolume {
            get {
                return oilVolumeField;
            } 
            set {
                oilVolumeField = value;
                NotifyPropertyChanged("OilVolume");
            }
        }

        private WellTestTestVolume oilVolumeField; 

        /// <summary>
        /// Oil rates measured during the well test.
        /// </summary>
		[Description("Oil rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidRate")]
		[XmlElement("oilRate")]
        public WellTestFluidRate OilRate {
            get {
                return oilRateField;
            } 
            set {
                oilRateField = value;
                NotifyPropertyChanged("OilRate");
            }
        }

        private WellTestFluidRate oilRateField; 

        /// <summary>
        /// Gas volumes measured during the well test.
        /// </summary>
		[Description("Gas volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestTestVolume")]
		[XmlElement("gasVolume")]
        public WellTestTestVolume GasVolume {
            get {
                return gasVolumeField;
            } 
            set {
                gasVolumeField = value;
                NotifyPropertyChanged("GasVolume");
            }
        }

        private WellTestTestVolume gasVolumeField; 

        /// <summary>
        /// Gas rates measured during the well test.
        /// </summary>
		[Description("Gas rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidRate")]
		[XmlElement("gasRate")]
        public WellTestFluidRate GasRate {
            get {
                return gasRateField;
            } 
            set {
                gasRateField = value;
                NotifyPropertyChanged("GasRate");
            }
        }

        private WellTestFluidRate gasRateField; 

        /// <summary>
        /// Water volumes measured during the well test.
        /// </summary>
		[Description("Water volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestTestVolume")]
		[XmlElement("waterVolume")]
        public WellTestTestVolume WaterVolume {
            get {
                return waterVolumeField;
            } 
            set {
                waterVolumeField = value;
                NotifyPropertyChanged("WaterVolume");
            }
        }

        private WellTestTestVolume waterVolumeField; 

        /// <summary>
        /// Water rates measured during the well test.
        /// </summary>
		[Description("Water rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidRate")]
		[XmlElement("waterRate")]
        public WellTestFluidRate WaterRate {
            get {
                return waterRateField;
            } 
            set {
                waterRateField = value;
                NotifyPropertyChanged("WaterRate");
            }
        }

        private WellTestFluidRate waterRateField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The following sequence of four elements can be used for reporting of most production fluids.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestTestVolume", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The following sequence of four elements can be used for reporting of most production fluids.")]
    public partial class WellTestTestVolume : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The volume is the fluid, corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("The volume is the fluid, corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volumeStdTempPres")]
        public VolumeMeasure VolumeStdTempPres {
            get {
                return volumeStdTempPresField;
            } 
            set {
                volumeStdTempPresField = value;
                NotifyPropertyChanged("VolumeStdTempPres");
            }
        }

        private VolumeMeasure volumeStdTempPresField; 

        /// <summary>
        /// The volume, uncorrected. This volume is generally reported at reservoir conditions.
        /// </summary>
		[Description("The volume, uncorrected. This volume is generally reported at reservoir conditions.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("volume")]
        public VolumeMeasure Volume {
            get {
                return volumeField;
            } 
            set {
                volumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeMeasure volumeField; 

        /// <summary>
        /// The density of the fluid, corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("The density of the fluid,  corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStdTempPres")]
        public DensityMeasure DensityStdTempPres {
            get {
                return densityStdTempPresField;
            } 
            set {
                densityStdTempPresField = value;
                NotifyPropertyChanged("DensityStdTempPres");
            }
        }

        private DensityMeasure densityStdTempPresField; 

        /// <summary>
        /// The density of the fluid, uncorrected.
        /// </summary>
		[Description("The density of the fluid, uncorrected.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// Class for Natural Gas. This is not valid for oil or water.
        /// </summary>
		[StringLength(40)]
        [Description("Class for Natural Gas. This is not valid for oil or water.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("gasClass")]
        public string GasClass {
            get {
                return gasClassField;
            } 
            set {
                gasClassField = value;
                NotifyPropertyChanged("GasClass");
            }
        }

        private string gasClassField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_wellTestFluidRate xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestFluidRate", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_wellTestFluidRate xsd type.")]
    public partial class WellTestFluidRate : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The fluid flow rate.
        /// </summary>
		[Description("The fluid flow rate.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("fluidRate")]
        public VolumeFlowRateMeasure FluidRate {
            get {
                return fluidRateField;
            } 
            set {
                fluidRateField = value;
                NotifyPropertyChanged("FluidRate");
            }
        }

        private VolumeFlowRateMeasure fluidRateField; 

        /// <summary>
        /// The fluid flow rate that has been corrected to standard temperature and pressure.
        /// </summary>
		[Description("The fluid flow rate that has been corrected to standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("fluidRateStdTempPres")]
        public VolumeFlowRateMeasure FluidRateStdTempPres {
            get {
                return fluidRateStdTempPresField;
            } 
            set {
                fluidRateStdTempPresField = value;
                NotifyPropertyChanged("FluidRateStdTempPres");
            }
        }

        private VolumeFlowRateMeasure fluidRateStdTempPresField; 

        /// <summary>
        /// Class for Natural Gas. This is not valid for oil or water.
        /// </summary>
		[StringLength(40)]
        [Description("Class for Natural Gas. This is not valid for oil or water.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("gasClass")]
        public string GasClass {
            get {
                return gasClassField;
            } 
            set {
                gasClassField = value;
                NotifyPropertyChanged("GasClass");
            }
        }

        private string gasClassField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_wellTestInjectionTestData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestInjectionTestData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_wellTestInjectionTestData xsd type.")]
    public partial class WellTestInjectionTestData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The time length (with uom) of the well test.
        /// </summary>
		[Description("The time length (with uom) of the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("testDuration")]
        public TimeMeasure TestDuration {
            get {
                return testDurationField;
            } 
            set {
                testDurationField = value;
                NotifyPropertyChanged("TestDuration");
            }
        }

        private TimeMeasure testDurationField; 

        /// <summary>
        /// The interval tested. This element includes a top and base depth, and the formation tested.
        /// </summary>
		[Description("The interval tested. This element includes a top and base  depth, and the formation tested.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestInterval")]
		[XmlElement("testInterval")]
        public WellTestInterval TestInterval {
            get {
                return testIntervalField;
            } 
            set {
                testIntervalField = value;
                NotifyPropertyChanged("TestInterval");
            }
        }

        private WellTestInterval testIntervalField; 

        /// <summary>
        /// The fluid that is being injected. 
        /// </summary>
		[Description("The fluid that is being injected.")]
        [EnergisticsDataTypeAttribute(DataType = "InjectionFluid")]
		[XmlElement("InjectedFluid")]
        public InjectionFluid InjectedFluid {
            get {
                return InjectedFluidField;
            } 
            set {
                InjectedFluidField = value;
                 this.InjectedFluidSpecified = true;
                NotifyPropertyChanged("InjectedFluid");
            }
        }

        private InjectionFluid InjectedFluidField; 

        /// <summary>
        /// InjectedFluidSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InjectedFluidSpecified {
            get {
                return InjectedFluidSpecifiedField;
            } 
            set {
                InjectedFluidSpecifiedField = value;
                NotifyPropertyChanged("InjectedFluidSpecified");
            }
        }

        private bool InjectedFluidSpecifiedField; 

        /// <summary>
        /// The cumulative volumes of fluids at the time of the well test. The fluids are oil, gas, and water.
        /// </summary>
		[Description("The cumulative volumes of fluids at the time of the  well test. The fluids are oil, gas, and water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestCumulative")]
		[XmlElement("wellTestCumulative")]
        public WellTestCumulative WellTestCumulative {
            get {
                return wellTestCumulativeField;
            } 
            set {
                wellTestCumulativeField = value;
                NotifyPropertyChanged("WellTestCumulative");
            }
        }

        private WellTestCumulative wellTestCumulativeField; 

        /// <summary>
        /// The size of the opening in the flow choke at the wellhead.
        /// </summary>
		[Description("The size of the opening in the flow choke at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("chokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return chokeOrificeSizeField;
            } 
            set {
                chokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure chokeOrificeSizeField; 

        /// <summary>
        /// The minimum pressure measured at the annulus.
        /// </summary>
		[Description("The minimum pressure measured at the annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("minimumAnnularPressure")]
        public PressureMeasure MinimumAnnularPressure {
            get {
                return minimumAnnularPressureField;
            } 
            set {
                minimumAnnularPressureField = value;
                NotifyPropertyChanged("MinimumAnnularPressure");
            }
        }

        private PressureMeasure minimumAnnularPressureField; 

        /// <summary>
        /// The maximum pressure measured at the annulus.
        /// </summary>
		[Description("The maximum pressure measured at the annulus.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("maximumAnnularPressure")]
        public PressureMeasure MaximumAnnularPressure {
            get {
                return maximumAnnularPressureField;
            } 
            set {
                maximumAnnularPressureField = value;
                NotifyPropertyChanged("MaximumAnnularPressure");
            }
        }

        private PressureMeasure maximumAnnularPressureField; 

        /// <summary>
        /// The flowing pressure measured at the wellhead during the test.
        /// </summary>
		[Description("The flowing pressure measured at the wellhead during the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("wellheadFlowingPressure")]
        public PressureMeasure WellheadFlowingPressure {
            get {
                return wellheadFlowingPressureField;
            } 
            set {
                wellheadFlowingPressureField = value;
                NotifyPropertyChanged("WellheadFlowingPressure");
            }
        }

        private PressureMeasure wellheadFlowingPressureField; 

        /// <summary>
        /// The maximum pressure measured at the wellhead during the well test.
        /// </summary>
		[Description("The maximum pressure measured at the wellhead during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("wellheadMaximumPressure")]
        public PressureMeasure WellheadMaximumPressure {
            get {
                return wellheadMaximumPressureField;
            } 
            set {
                wellheadMaximumPressureField = value;
                NotifyPropertyChanged("WellheadMaximumPressure");
            }
        }

        private PressureMeasure wellheadMaximumPressureField; 

        /// <summary>
        /// The production results of the test.
        /// </summary>
		[Description("The production results of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestInjectionTestResults")]
		[XmlElement("injectionTestResults")]
        public WellTestInjectionTestResults InjectionTestResults {
            get {
                return injectionTestResultsField;
            } 
            set {
                injectionTestResultsField = value;
                NotifyPropertyChanged("InjectionTestResults");
            }
        }

        private WellTestInjectionTestResults injectionTestResultsField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_wellTestInterval xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestInterval", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_wellTestInterval xsd type.")]
    public partial class WellTestInterval : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The measured depth to the top of the interval.
        /// </summary>
		[Required]
        [Description("The measured depth to the top of the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdTop")]
        public MeasuredDepthCoord MDTop {
            get {
                return mdTopField;
            } 
            set {
                mdTopField = value;
                NotifyPropertyChanged("MDTop");
            }
        }

        private MeasuredDepthCoord mdTopField; 

        /// <summary>
        /// The measured depth to the bottom of the interval.
        /// </summary>
		[Required]
        [Description("The measured depth to the bottom of the interval.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("mdBase")]
        public MeasuredDepthCoord MDBase {
            get {
                return mdBaseField;
            } 
            set {
                mdBaseField = value;
                NotifyPropertyChanged("MDBase");
            }
        }

        private MeasuredDepthCoord mdBaseField; 

        /// <summary>
        /// Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.
        /// </summary>
		[Description("Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth  value is deeper than the first kickoff point. It is recommended that it always be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellbore")]
        public RefNameString Wellbore {
            get {
                return wellboreField;
            } 
            set {
                wellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private RefNameString wellboreField; 

        /// <summary>
        /// A formation that was tested.
        /// </summary>
		[Description("A formation that was tested.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("testedFormation")]
        public List<string> TestedFormation {
            get {
                return testedFormationField;
            } 
            set {
                testedFormationField = value;
                NotifyPropertyChanged("TestedFormation");
            }
        }

         /// <summary>
         /// bool to indicate if TestedFormation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestedFormationSpecified
         {
             get {
             if(testedFormationField!=null)
                 return testedFormationField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> testedFormationField; 

        /// <summary>
        /// The relative opening of the downhole control valve for the tested zone. This is for surface controllable valves.
        /// </summary>
		[Description("The relative opening of the downhole control valve for the tested zone. This is for surface controllable valves.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthPerLengthMeasure")]
		[XmlElement("valvePosition")]
        public LengthPerLengthMeasure ValvePosition {
            get {
                return valvePositionField;
            } 
            set {
                valvePositionField = value;
                NotifyPropertyChanged("ValvePosition");
            }
        }

        private LengthPerLengthMeasure valvePositionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The cumulative amounts of the fluids at the time of the well test. The fluids are oil, gas, and water.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestCumulative", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The cumulative amounts of the fluids at the time of the well test. The fluids are oil, gas, and water.")]
    public partial class WellTestCumulative : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The cumulative amount of oil.
        /// </summary>
		[Description("The cumulative amount of oil.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("cumulativeOil")]
        public VolumeMeasure CumulativeOil {
            get {
                return cumulativeOilField;
            } 
            set {
                cumulativeOilField = value;
                NotifyPropertyChanged("CumulativeOil");
            }
        }

        private VolumeMeasure cumulativeOilField; 

        /// <summary>
        /// The cumulative amount of gas.
        /// </summary>
		[Description("The cumulative amount of gas.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("cumulativeGas")]
        public VolumeMeasure CumulativeGas {
            get {
                return cumulativeGasField;
            } 
            set {
                cumulativeGasField = value;
                NotifyPropertyChanged("CumulativeGas");
            }
        }

        private VolumeMeasure cumulativeGasField; 

        /// <summary>
        /// The cumulative amount of water.
        /// </summary>
		[Description("The cumulative amount of water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("cumulativeWater")]
        public VolumeMeasure CumulativeWater {
            get {
                return cumulativeWaterField;
            } 
            set {
                cumulativeWaterField = value;
                NotifyPropertyChanged("CumulativeWater");
            }
        }

        private VolumeMeasure cumulativeWaterField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Oil, gas, and water volumes and rates measured during the well test. The volumes allow either actual volumes or standard (corrected) volumes. The densities are also recorded with the volumes.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestProductionTestResults", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Oil, gas, and water volumes and rates measured during the well test. The volumes allow either actual volumes or standard (corrected) volumes. The densities are also recorded with the volumes.")]
    public partial class WellTestProductionTestResults : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Oil volumes measured during the well test.
        /// </summary>
		[Description("Oil volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestTestVolume")]
		[XmlElement("oilVolume")]
        public WellTestTestVolume OilVolume {
            get {
                return oilVolumeField;
            } 
            set {
                oilVolumeField = value;
                NotifyPropertyChanged("OilVolume");
            }
        }

        private WellTestTestVolume oilVolumeField; 

        /// <summary>
        /// Oil rates measured during the well test.
        /// </summary>
		[Description("Oil rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidRate")]
		[XmlElement("oilRate")]
        public WellTestFluidRate OilRate {
            get {
                return oilRateField;
            } 
            set {
                oilRateField = value;
                NotifyPropertyChanged("OilRate");
            }
        }

        private WellTestFluidRate oilRateField; 

        /// <summary>
        /// Gas volumes measured during the well test.
        /// </summary>
		[Description("Gas volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestTestVolume")]
		[XmlElement("gasVolume")]
        public WellTestTestVolume GasVolume {
            get {
                return gasVolumeField;
            } 
            set {
                gasVolumeField = value;
                NotifyPropertyChanged("GasVolume");
            }
        }

        private WellTestTestVolume gasVolumeField; 

        /// <summary>
        /// Gas rates measured during the well test.
        /// </summary>
		[Description("Gas rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidRate")]
		[XmlElement("gasRate")]
        public WellTestFluidRate GasRate {
            get {
                return gasRateField;
            } 
            set {
                gasRateField = value;
                NotifyPropertyChanged("GasRate");
            }
        }

        private WellTestFluidRate gasRateField; 

        /// <summary>
        /// Water volumes measured during the well test.
        /// </summary>
		[Description("Water volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestTestVolume")]
		[XmlElement("waterVolume")]
        public WellTestTestVolume WaterVolume {
            get {
                return waterVolumeField;
            } 
            set {
                waterVolumeField = value;
                NotifyPropertyChanged("WaterVolume");
            }
        }

        private WellTestTestVolume waterVolumeField; 

        /// <summary>
        /// Water rates measured during the well test.
        /// </summary>
		[Description("Water rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidRate")]
		[XmlElement("waterRate")]
        public WellTestFluidRate WaterRate {
            get {
                return waterRateField;
            } 
            set {
                waterRateField = value;
                NotifyPropertyChanged("WaterRate");
            }
        }

        private WellTestFluidRate waterRateField; 

        /// <summary>
        /// condensate volumes measured during the well test.
        /// </summary>
		[Description("condensate volumes measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestTestVolume")]
		[XmlElement("condensateVolume")]
        public WellTestTestVolume CondensateVolume {
            get {
                return condensateVolumeField;
            } 
            set {
                condensateVolumeField = value;
                NotifyPropertyChanged("CondensateVolume");
            }
        }

        private WellTestTestVolume condensateVolumeField; 

        /// <summary>
        /// Condensate rates measured during the well test.
        /// </summary>
		[Description("Condensate rates measured during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidRate")]
		[XmlElement("condensateRate")]
        public WellTestFluidRate CondensateRate {
            get {
                return condensateRateField;
            } 
            set {
                condensateRateField = value;
                NotifyPropertyChanged("CondensateRate");
            }
        }

        private WellTestFluidRate condensateRateField; 

        /// <summary>
        /// The ratio of the volume of gas and the volume of oil that was produced.
        /// </summary>
		[Description("The ratio of the volume of gas and the volume of oil that was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasOilRatio")]
        public VolumePerVolumeMeasure GasOilRatio {
            get {
                return gasOilRatioField;
            } 
            set {
                gasOilRatioField = value;
                NotifyPropertyChanged("GasOilRatio");
            }
        }

        private VolumePerVolumeMeasure gasOilRatioField; 

        /// <summary>
        /// The ratio of water produced compared to the volume of total liquids produced.
        /// </summary>
		[Description("The ratio of water produced compared to the volume of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("waterCut")]
        public VolumePerVolumeMeasure WaterCut {
            get {
                return waterCutField;
            } 
            set {
                waterCutField = value;
                NotifyPropertyChanged("WaterCut");
            }
        }

        private VolumePerVolumeMeasure waterCutField; 

        /// <summary>
        /// The density of the fluid mixture.
        /// </summary>
		[Description("The density of the fluid mixture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// The velocity of the overall fluid mixture.
        /// </summary>
		[Description("The velocity of the overall fluid mixture.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("fluidVelocity")]
        public VelocityMeasure FluidVelocity {
            get {
                return fluidVelocityField;
            } 
            set {
                fluidVelocityField = value;
                NotifyPropertyChanged("FluidVelocity");
            }
        }

        private VelocityMeasure fluidVelocityField; 

        /// <summary>
        /// This is the condensate yield, which describes the amount of condensate per unit of natural gas produced
        /// </summary>
		[Description("This is the condensate yield, which describes the amount  of condensate per unit of natural gas produced")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("condensateYield")]
        public VolumePerVolumeMeasure CondensateYield {
            get {
                return condensateYieldField;
            } 
            set {
                condensateYieldField = value;
                NotifyPropertyChanged("CondensateYield");
            }
        }

        private VolumePerVolumeMeasure condensateYieldField; 

        /// <summary>
        /// This is the measured of impurities present in crude oil as it comes from the well. BSandW content is commonly used as a measure for treating performance of hydrocarbon liquids
        /// </summary>
		[Description("This is the measured of impurities present in crude oil  as it comes from the well. BSandW content is commonly used as a measure for  treating performance of hydrocarbon liquids")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("basicSedimentAndWater")]
        public VolumePerVolumeMeasure BasicSedimentAndWater {
            get {
                return basicSedimentAndWaterField;
            } 
            set {
                basicSedimentAndWaterField = value;
                NotifyPropertyChanged("BasicSedimentAndWater");
            }
        }

        private VolumePerVolumeMeasure basicSedimentAndWaterField; 

        /// <summary>
        /// This is the the potential of the well to produce crude oil. This represents the flow rate that could be achieved under maximum drawdown.
        /// </summary>
		[Description("This is the the potential of the well to produce crude oil.  This represents the flow rate that could be achieved under maximum drawdown.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("oilPotential")]
        public VolumeFlowRateMeasure OilPotential {
            get {
                return oilPotentialField;
            } 
            set {
                oilPotentialField = value;
                NotifyPropertyChanged("OilPotential");
            }
        }

        private VolumeFlowRateMeasure oilPotentialField; 

        /// <summary>
        /// This is the potential of the well to produce natural gas. This represents the flow rate that could be achieved under maximum drawdown.
        /// </summary>
		[Description("This is the potential of the well to produce natural gas.  This represents the flow rate that could be achieved under maximum drawdown.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateMeasure")]
		[XmlElement("gasPotential")]
        public VolumeFlowRateMeasure GasPotential {
            get {
                return gasPotentialField;
            } 
            set {
                gasPotentialField = value;
                NotifyPropertyChanged("GasPotential");
            }
        }

        private VolumeFlowRateMeasure gasPotentialField; 

        /// <summary>
        /// The volume of sand that was produced.
        /// </summary>
		[Description("The volume of sand that was produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("sandVolume")]
        public VolumeMeasure SandVolume {
            get {
                return sandVolumeField;
            } 
            set {
                sandVolumeField = value;
                NotifyPropertyChanged("SandVolume");
            }
        }

        private VolumeMeasure sandVolumeField; 

        /// <summary>
        /// True ("true" or "1") indicates that the the split factors are allocated as opposed to measured. False ("false" or "0") or not given indicates otherwise.
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that the the split factors  are allocated as opposed to measured.  False (\"false\" or \"0\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("allocatedSplit")]
        public bool? AllocatedSplit {
            get {
                return allocatedSplitField;
            } 
            set {
                allocatedSplitField = value;
                 this.AllocatedSplitSpecified = true;
                NotifyPropertyChanged("AllocatedSplit");
            }
        }

        private bool? allocatedSplitField; 

        /// <summary>
        /// allocatedSplitSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AllocatedSplitSpecified {
            get {
                return allocatedSplitSpecifiedField;
            } 
            set {
                allocatedSplitSpecifiedField = value;
                NotifyPropertyChanged("AllocatedSplitSpecified");
            }
        }

        private bool allocatedSplitSpecifiedField; 

        /// <summary>
        /// The split factor for Oil relative to the overall volume of the test.
        /// </summary>
		[Description("The split factor for Oil relative to the overall volume of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("oilSplitFactor")]
        public VolumePerVolumeMeasure OilSplitFactor {
            get {
                return oilSplitFactorField;
            } 
            set {
                oilSplitFactorField = value;
                NotifyPropertyChanged("OilSplitFactor");
            }
        }

        private VolumePerVolumeMeasure oilSplitFactorField; 

        /// <summary>
        /// The split factor for Gas relative to the overall volume of the test.
        /// </summary>
		[Description("The split factor for Gas relative to the overall volume of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasSplitFactor")]
        public VolumePerVolumeMeasure GasSplitFactor {
            get {
                return gasSplitFactorField;
            } 
            set {
                gasSplitFactorField = value;
                NotifyPropertyChanged("GasSplitFactor");
            }
        }

        private VolumePerVolumeMeasure gasSplitFactorField; 

        /// <summary>
        /// The split factor for Water relative to the overall volume of the test.
        /// </summary>
		[Description("The split factor for Water relative to the overall volume of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("waterSplitFactor")]
        public VolumePerVolumeMeasure WaterSplitFactor {
            get {
                return waterSplitFactorField;
            } 
            set {
                waterSplitFactorField = value;
                NotifyPropertyChanged("WaterSplitFactor");
            }
        }

        private VolumePerVolumeMeasure waterSplitFactorField; 

        /// <summary>
        /// The split factor for Condensate relative to the overall volume of the test.
        /// </summary>
		[Description("The split factor for Condensate relative to the overall volume of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("condensateSplitFactor")]
        public VolumePerVolumeMeasure CondensateSplitFactor {
            get {
                return condensateSplitFactorField;
            } 
            set {
                condensateSplitFactorField = value;
                NotifyPropertyChanged("CondensateSplitFactor");
            }
        }

        private VolumePerVolumeMeasure condensateSplitFactorField; 

        /// <summary>
        /// Productivity Index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value was defined at ambient temperature and pressure.
        /// </summary>
		[Description("Productivity Index (PI) is an expression which defines the pressure drop in  the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value was defined at ambient temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "productivityIndexMeasure")]
		[XmlElement("productivityIndex")]
        public ProductivityIndexMeasure ProductivityIndex {
            get {
                return productivityIndexField;
            } 
            set {
                productivityIndexField = value;
                NotifyPropertyChanged("ProductivityIndex");
            }
        }

        private ProductivityIndexMeasure productivityIndexField; 

        /// <summary>
        /// Productivity Index (PI) is an expression which defines the pressure drop in the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value has been converted to the declared conditions of standard temperature and pressure.
        /// </summary>
		[Description("Productivity Index (PI) is an expression which defines the pressure drop in  the reservoir to produce a unit of oil per day. That is, the energy to produce a unit of oil. The value has been converted to the declared conditions of standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "productivityIndexMeasure")]
		[XmlElement("productivityIndexStdTempPres")]
        public ProductivityIndexMeasure ProductivityIndexStdTempPres {
            get {
                return productivityIndexStdTempPresField;
            } 
            set {
                productivityIndexStdTempPresField = value;
                NotifyPropertyChanged("ProductivityIndexStdTempPres");
            }
        }

        private ProductivityIndexMeasure productivityIndexStdTempPresField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Well test data gathered at the separator.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestSeparatorData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Well test data gathered at the separator.")]
    public partial class WellTestSeparatorData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure measured at the separator during the well test.
        /// </summary>
		[Description("The pressure measured at the separator during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("separatorPressure")]
        public PressureMeasure SeparatorPressure {
            get {
                return separatorPressureField;
            } 
            set {
                separatorPressureField = value;
                NotifyPropertyChanged("SeparatorPressure");
            }
        }

        private PressureMeasure separatorPressureField; 

        /// <summary>
        /// The temperature measured at the separator during the well test.
        /// </summary>
		[Description("The temperature measured at the separator during the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("separatorTemperature")]
        public ThermodynamicTemperatureMeasure SeparatorTemperature {
            get {
                return separatorTemperatureField;
            } 
            set {
                separatorTemperatureField = value;
                NotifyPropertyChanged("SeparatorTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure separatorTemperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Well test data gathered at points in the wellbore.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestPointData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Well test data gathered at points in the wellbore.")]
    public partial class WellTestPointData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure at the point.
        /// </summary>
		[Description("The pressure at the point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pres")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                presField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 

        /// <summary>
        /// The temperature at the point.
        /// </summary>
		[Description("The temperature at the point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("temp")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return tempField;
            } 
            set {
                tempField = value;
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure tempField; 

        /// <summary>
        /// The P/Z value at the point. This is P/Z, pressure over gas compressibility factor (z). Note that the uom is units of pressure., since Z is dimensionless.
        /// </summary>
		[Description("The P/Z value at the point. This is P/Z, pressure  over gas compressibility factor (z).  Note that the uom is units of pressure., since Z is dimensionless.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pOverZ")]
        public PressureMeasure POverZ {
            get {
                return pOverZField;
            } 
            set {
                pOverZField = value;
                NotifyPropertyChanged("POverZ");
            }
        }

        private PressureMeasure pOverZField; 

        /// <summary>
        /// The measured depth of the bottomhole.
        /// </summary>
		[Description("The measured depth of the bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("md")]
        public MeasuredDepthCoord MD {
            get {
                return mdField;
            } 
            set {
                mdField = value;
                NotifyPropertyChanged("MD");
            }
        }

        private MeasuredDepthCoord mdField; 

        /// <summary>
        /// Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.
        /// </summary>
		[Description("Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth  value is deeper than the first kickoff point. It is recommended that it always be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellbore")]
        public RefNameString Wellbore {
            get {
                return wellboreField;
            } 
            set {
                wellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private RefNameString wellboreField; 

        /// <summary>
        /// A value of true (1 or "true") indicates that the point is at the bottomhole. A value of false (0 or "false") or not given indicates otherwise.
        /// </summary>
		[Description("A value of true (1 or \"true\") indicates that the point is at the bottomhole. A value of false (0 or \"false\") or not given indicates otherwise.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("bottomhole")]
        public bool? Bottomhole {
            get {
                return bottomholeField;
            } 
            set {
                bottomholeField = value;
                 this.BottomholeSpecified = true;
                NotifyPropertyChanged("Bottomhole");
            }
        }

        private bool? bottomholeField; 

        /// <summary>
        /// bottomholeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BottomholeSpecified {
            get {
                return bottomholeSpecifiedField;
            } 
            set {
                bottomholeSpecifiedField = value;
                NotifyPropertyChanged("BottomholeSpecified");
            }
        }

        private bool bottomholeSpecifiedField; 

        /// <summary>
        /// A value of true (1 or "true") indicates a static (non-flowing) pressure. A value of false (0 or "false") or not given indicates otherwise. The pressure may be measured (e.g., shut-in well) or calculated.
        /// </summary>
		[Description("A value of true (1 or \"true\") indicates a static (non-flowing) pressure. A value of false (0 or \"false\") or not given indicates otherwise. The pressure may be measured (e.g., shut-in well) or calculated.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("static")]
        public bool? Static {
            get {
                return staticField;
            } 
            set {
                staticField = value;
                 this.StaticSpecified = true;
                NotifyPropertyChanged("Static");
            }
        }

        private bool? staticField; 

        /// <summary>
        /// staticSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StaticSpecified {
            get {
                return staticSpecifiedField;
            } 
            set {
                staticSpecifiedField = value;
                NotifyPropertyChanged("StaticSpecified");
            }
        }

        private bool staticSpecifiedField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_wellTestElectricSubmersiblePumpData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestElectricSubmersiblePumpData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_wellTestElectricSubmersiblePumpData xsd type.")]
    public partial class WellTestElectricSubmersiblePumpData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The average electric current of the electric submersible pump (ESP) during the test. The presumption is that only one pump per well is operational during each test.
        /// </summary>
		[Description("The average electric current of the electric submersible pump (ESP) during the test. The presumption is that only one pump per well is operational during each test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "electricCurrentMeasure")]
		[XmlElement("electricCurrent")]
        public ElectricCurrentMeasure ElectricCurrent {
            get {
                return electricCurrentField;
            } 
            set {
                electricCurrentField = value;
                NotifyPropertyChanged("ElectricCurrent");
            }
        }

        private ElectricCurrentMeasure electricCurrentField; 

        /// <summary>
        /// The average frequency of the electric submersible pump (ESP) during the test. The presumption is that only one pump per well is operational during each test.
        /// </summary>
		[Description("The average frequency of the electric submersible pump (ESP) during the test. The presumption is that only one pump per well is operational during each test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "frequencyMeasure")]
		[XmlElement("frequency")]
        public FrequencyMeasure Frequency {
            get {
                return frequencyField;
            } 
            set {
                frequencyField = value;
                NotifyPropertyChanged("Frequency");
            }
        }

        private FrequencyMeasure frequencyField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Well test data gathered at the bottomhole.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestBottomholeData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Well test data gathered at the bottomhole.")]
    public partial class WellTestBottomholeData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The pressure at the bottomhole of the well.
        /// </summary>
		[Description("The pressure at the bottomhole of the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("bottomholePres")]
        public PressureMeasure BottomholePres {
            get {
                return bottomholePresField;
            } 
            set {
                bottomholePresField = value;
                NotifyPropertyChanged("BottomholePres");
            }
        }

        private PressureMeasure bottomholePresField; 

        /// <summary>
        /// The temperature at the bottomhole of the well.
        /// </summary>
		[Description("The temperature at the bottomhole of the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("bottomholeTemp")]
        public ThermodynamicTemperatureMeasure BottomholeTemp {
            get {
                return bottomholeTempField;
            } 
            set {
                bottomholeTempField = value;
                NotifyPropertyChanged("BottomholeTemp");
            }
        }

        private ThermodynamicTemperatureMeasure bottomholeTempField; 

        /// <summary>
        /// The P/Z value at the bottomhole. This is P/Z, pressure over gas compressibility factor (z), at the bottomhole of the well. Note that the uom is units of pressure., since Z is dimensionless.
        /// </summary>
		[Description("The P/Z value at the bottomhole. This is P/Z, pressure  over gas compressibility factor (z), at the bottomhole of the well.  Note that the uom is units of pressure., since Z is dimensionless.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("bottomholePOverZ")]
        public PressureMeasure BottomholePOverZ {
            get {
                return bottomholePOverZField;
            } 
            set {
                bottomholePOverZField = value;
                NotifyPropertyChanged("BottomholePOverZ");
            }
        }

        private PressureMeasure bottomholePOverZField; 

        /// <summary>
        /// The measured depth of the bottomhole.
        /// </summary>
		[Description("The measured depth of the bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("bottomholeMD")]
        public MeasuredDepthCoord BottomholeMD {
            get {
                return bottomholeMDField;
            } 
            set {
                bottomholeMDField = value;
                NotifyPropertyChanged("BottomholeMD");
            }
        }

        private MeasuredDepthCoord bottomholeMDField; 

        /// <summary>
        /// Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth value is deeper than the first kickoff point. It is recommended that it always be given.
        /// </summary>
		[Description("Defines the wellbore (sidetract) represented by the measured depth. This must be given when the well has multiple wellbores and the measured depth  value is deeper than the first kickoff point. It is recommended that it always be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellbore")]
        public RefNameString Wellbore {
            get {
                return wellboreField;
            } 
            set {
                wellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private RefNameString wellboreField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Basic measurements at the wellhead, during the well test.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestWellheadData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Basic measurements at the wellhead, during the well test.")]
    public partial class WellTestWellheadData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The temperature measured at the wellhead during the well test.
        /// </summary>
		[Description("The temperature measured at the wellhead during the  well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("temperature")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return temperatureField;
            } 
            set {
                temperatureField = value;
                NotifyPropertyChanged("Temperature");
            }
        }

        private ThermodynamicTemperatureMeasure temperatureField; 

        /// <summary>
        /// The flowing pressure measured at the wellhead during the well test.
        /// </summary>
		[Description("The flowing pressure measured at the wellhead during the  well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("flowingPressure")]
        public PressureMeasure FlowingPressure {
            get {
                return flowingPressureField;
            } 
            set {
                flowingPressureField = value;
                NotifyPropertyChanged("FlowingPressure");
            }
        }

        private PressureMeasure flowingPressureField; 

        /// <summary>
        /// The shut-in pressure measured at the wellhead during the well test.
        /// </summary>
		[Description("The shut-in pressure measured at the wellhead during the  well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("shutInPressure")]
        public PressureMeasure ShutInPressure {
            get {
                return shutInPressureField;
            } 
            set {
                shutInPressureField = value;
                NotifyPropertyChanged("ShutInPressure");
            }
        }

        private PressureMeasure shutInPressureField; 

        /// <summary>
        /// The pressure measured at the flow line connected to the wellhead during this well test.
        /// </summary>
		[Description("The pressure measured at the flow line connected to the  wellhead during this well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("flowLinePressure")]
        public PressureMeasure FlowLinePressure {
            get {
                return flowLinePressureField;
            } 
            set {
                flowLinePressureField = value;
                NotifyPropertyChanged("FlowLinePressure");
            }
        }

        private PressureMeasure flowLinePressureField; 

        /// <summary>
        /// The size of the choke opening at the wellhead.
        /// </summary>
		[Description("The size of the choke opening at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("chokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return chokeOrificeSizeField;
            } 
            set {
                chokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure chokeOrificeSizeField; 

        /// <summary>
        /// The pressure of the lift gas at the wellhead.
        /// </summary>
		[Description("The pressure of the lift gas at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("gasLiftPres")]
        public PressureMeasure GasLiftPres {
            get {
                return gasLiftPresField;
            } 
            set {
                gasLiftPresField = value;
                NotifyPropertyChanged("GasLiftPres");
            }
        }

        private PressureMeasure gasLiftPresField; 

        /// <summary>
        /// The temperature of the lift gas at the wellhead.
        /// </summary>
		[Description("The temperature of the lift gas at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("gasLiftTemp")]
        public ThermodynamicTemperatureMeasure GasLiftTemp {
            get {
                return gasLiftTempField;
            } 
            set {
                gasLiftTempField = value;
                NotifyPropertyChanged("GasLiftTemp");
            }
        }

        private ThermodynamicTemperatureMeasure gasLiftTempField; 

        /// <summary>
        /// Lift gas volumes injected during the well test at the wellhead.
        /// </summary>
		[Description("Lift gas volumes injected during the well test at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestTestVolume")]
		[XmlElement("gasLiftVolume")]
        public WellTestTestVolume GasLiftVolume {
            get {
                return gasLiftVolumeField;
            } 
            set {
                gasLiftVolumeField = value;
                NotifyPropertyChanged("GasLiftVolume");
            }
        }

        private WellTestTestVolume gasLiftVolumeField; 

        /// <summary>
        /// Lift gas rates injected during the well test at the wellhead.
        /// </summary>
		[Description("Lift gas rates injected during the well test at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidRate")]
		[XmlElement("gasLiftRate")]
        public WellTestFluidRate GasLiftRate {
            get {
                return gasLiftRateField;
            } 
            set {
                gasLiftRateField = value;
                NotifyPropertyChanged("GasLiftRate");
            }
        }

        private WellTestFluidRate gasLiftRateField; 

        /// <summary>
        /// The size of the gas lift choke opening.
        /// </summary>
		[Description("The size of the gas lift choke opening.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("gasLiftchokeOrificeSize")]
        public LengthMeasure GasLiftchokeOrificeSize {
            get {
                return gasLiftchokeOrificeSizeField;
            } 
            set {
                gasLiftchokeOrificeSizeField = value;
                NotifyPropertyChanged("GasLiftchokeOrificeSize");
            }
        }

        private LengthMeasure gasLiftchokeOrificeSizeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_wellTestProductionTestData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestProductionTestData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_wellTestProductionTestData xsd type.")]
    public partial class WellTestProductionTestData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The time length (with uom) of the well test.
        /// </summary>
		[Description("The time length (with uom) of the well test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("testDuration")]
        public TimeMeasure TestDuration {
            get {
                return testDurationField;
            } 
            set {
                testDurationField = value;
                NotifyPropertyChanged("TestDuration");
            }
        }

        private TimeMeasure testDurationField; 

        /// <summary>
        /// The interval tested. This element includes a top and base depth, and the formation(s) tested. It also includes control data for the tested interval.
        /// </summary>
		[Description("The interval tested. This element includes a top and base depth,  and the formation(s) tested. It also includes control data for the tested interval.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestInterval")]
		[XmlElement("testInterval")]
        public List<WellTestInterval> TestInterval {
            get {
                return testIntervalField;
            } 
            set {
                testIntervalField = value;
                NotifyPropertyChanged("TestInterval");
            }
        }

         /// <summary>
         /// bool to indicate if TestInterval has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TestIntervalSpecified
         {
             get {
             if(testIntervalField!=null)
                 return testIntervalField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellTestInterval> testIntervalField; 

        /// <summary>
        /// This element records measurements made and settings made at the wellhead.
        /// </summary>
		[Description("This element records measurements made and settings made at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestWellheadData")]
		[XmlElement("wellheadData")]
        public WellTestWellheadData WellheadData {
            get {
                return wellheadDataField;
            } 
            set {
                wellheadDataField = value;
                NotifyPropertyChanged("WellheadData");
            }
        }

        private WellTestWellheadData wellheadDataField; 

        /// <summary>
        /// DEPRECATED - Use pointData instead. This element records measurements made at the bottomhole.
        /// </summary>
		[Description("DEPRECATED - Use pointData instead. This element records measurements made at the bottomhole.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestBottomholeData")]
		[XmlElement("bottomholeData")]
        public WellTestBottomholeData BottomholeData {
            get {
                return bottomholeDataField;
            } 
            set {
                bottomholeDataField = value;
                NotifyPropertyChanged("BottomholeData");
            }
        }

        private WellTestBottomholeData bottomholeDataField; 

        /// <summary>
        /// Frequency and electric current measured during the well test for electric submersible pump (ESP) wells. The presumption is that only one pump per well is operational during each test.
        /// </summary>
		[Description("Frequency and electric current measured during the  well test for electric submersible pump (ESP) wells. The presumption is that only one pump per well is operational during each test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestElectricSubmersiblePumpData")]
		[XmlElement("espData")]
        public WellTestElectricSubmersiblePumpData EspData {
            get {
                return espDataField;
            } 
            set {
                espDataField = value;
                NotifyPropertyChanged("EspData");
            }
        }

        private WellTestElectricSubmersiblePumpData espDataField; 

        /// <summary>
        /// This element records temperature and pressure at points in the wellbore.
        /// </summary>
		[Description("This element records temperature and pressure at points in the wellbore.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestPointData")]
		[XmlElement("pointData")]
        public List<WellTestPointData> PointData {
            get {
                return pointDataField;
            } 
            set {
                pointDataField = value;
                NotifyPropertyChanged("PointData");
            }
        }

         /// <summary>
         /// bool to indicate if PointData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PointDataSpecified
         {
             get {
             if(pointDataField!=null)
                 return pointDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellTestPointData> pointDataField; 

        /// <summary>
        /// This element records the measurements (pressure and temperature) at the separator.
        /// </summary>
		[Description("This element records the measurements (pressure and temperature) at the separator.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestSeparatorData")]
		[XmlElement("separatorData")]
        public WellTestSeparatorData SeparatorData {
            get {
                return separatorDataField;
            } 
            set {
                separatorDataField = value;
                NotifyPropertyChanged("SeparatorData");
            }
        }

        private WellTestSeparatorData separatorDataField; 

        /// <summary>
        /// The method being used to operate the well. Examples are 'flowing', 'pumping', 'gas lifted'.
        /// </summary>
		[StringLength(40)]
        [Description("The method being used to operate the well. Examples are 'flowing', 'pumping', 'gas lifted'.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("operatingMethod")]
        public string OperatingMethod {
            get {
                return operatingMethodField;
            } 
            set {
                operatingMethodField = value;
                NotifyPropertyChanged("OperatingMethod");
            }
        }

        private string operatingMethodField; 

        /// <summary>
        /// The cumulative volumes of fluids at the time of the well test. The fluids are oil, gas, and water.
        /// </summary>
		[Description("The cumulative volumes of fluids at the time of the well test. The fluids are oil, gas, and water.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestCumulative")]
		[XmlElement("wellTestCumulative")]
        public WellTestCumulative WellTestCumulative {
            get {
                return wellTestCumulativeField;
            } 
            set {
                wellTestCumulativeField = value;
                NotifyPropertyChanged("WellTestCumulative");
            }
        }

        private WellTestCumulative wellTestCumulativeField; 

        /// <summary>
        /// The production results of the test.
        /// </summary>
		[Description("The production results of the test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestProductionTestResults")]
		[XmlElement("productionTestResults")]
        public WellTestProductionTestResults ProductionTestResults {
            get {
                return productionTestResultsField;
            } 
            set {
                productionTestResultsField = value;
                NotifyPropertyChanged("ProductionTestResults");
            }
        }

        private WellTestProductionTestResults productionTestResultsField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_wellTestFluidLevelTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestFluidLevelTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_wellTestFluidLevelTest xsd type.")]
    public partial class WellTestFluidLevelTest : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The fluid level achieved in the well. The value is given as length units from the top of the well.
        /// </summary>
		[Required]
        [Description("The fluid level achieved in the well.  The value is given as length units from the top of the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("fluidLevel")]
        public LengthMeasure FluidLevel {
            get {
                return fluidLevelField;
            } 
            set {
                fluidLevelField = value;
                NotifyPropertyChanged("FluidLevel");
            }
        }

        private LengthMeasure fluidLevelField; 

        /// <summary>
        /// The lowest usable water depth as measured from the surface. See TxRRC H-15.
        /// </summary>
		[Description("The lowest usable water depth as measured from the  surface. See TxRRC H-15.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("baseUsableWater")]
        public LengthMeasure BaseUsableWater {
            get {
                return baseUsableWaterField;
            } 
            set {
                baseUsableWaterField = value;
                NotifyPropertyChanged("BaseUsableWater");
            }
        }

        private LengthMeasure baseUsableWaterField; 

        /// <summary>
        /// The business associate that conducted the test. This is generally a person.
        /// </summary>
		[StringLength(64)]
        [Description("The business associate that conducted the test. This is generally a person.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("testedBy")]
        public string TestedBy {
            get {
                return testedByField;
            } 
            set {
                testedByField = value;
                NotifyPropertyChanged("TestedBy");
            }
        }

        private string testedByField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_wellTestValidationOperation xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellTestValidationOperation", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_wellTestValidationOperation xsd type.")]
    public partial class WellTestValidationOperation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of validation operation.
        /// </summary>
		[Required]
        [Description("The kind of validation operation.")]
        [EnergisticsDataTypeAttribute(DataType = "ValidationOperation")]
		[XmlElement("kind")]
        public ValidationOperation Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ValidationOperation kindField; 

        /// <summary>
        /// The result of the validation operation.
        /// </summary>
		[Required]
        [Description("The result of the validation operation.")]
        [EnergisticsDataTypeAttribute(DataType = "ValidationResult")]
		[XmlElement("result")]
        public ValidationResult Result {
            get {
                return resultField;
            } 
            set {
                resultField = value;
                NotifyPropertyChanged("Result");
            }
        }

        private ValidationResult resultField; 

        /// <summary>
        /// The date of the validation operation.
        /// </summary>
		[Description("The date of the validation operation.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("date", DataType="date")]
        public DateTime? Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? dateField; 

        /// <summary>
        /// dateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return dateSpecifiedField;
            } 
            set {
                dateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }

        private bool dateSpecifiedField; 

        /// <summary>
        /// The tool used for the validation operation.
        /// </summary>
		[StringLength(64)]
        [Description("The tool used for the validation operation.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("tool")]
        public string Tool {
            get {
                return toolField;
            } 
            set {
                toolField = value;
                NotifyPropertyChanged("Tool");
            }
        }

        private string toolField; 

        /// <summary>
        /// The method used for the validation operation..
        /// </summary>
		[StringLength(64)]
        [Description("The method used for the validation operation..")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("method")]
        public string Method {
            get {
                return methodField;
            } 
            set {
                methodField = value;
                NotifyPropertyChanged("Method");
            }
        }

        private string methodField; 

        /// <summary>
        /// A comment about the operation.
        /// </summary>
		[StringLength(4000)]
        [Description("A comment about the operation.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known. The survey location is given by a pair of tagged values. The pairs may be: (1) latitude/longitude, (2) easting/northing, (3) westing/southing, (4) projectedX/projectedY, or (5) localX/localY. The appropriate pair must be chosen for the data.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_location", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML Location Component Schema This is a location that is expressed in terms of 2D coordinates. In order that the location be understood, the coordinate reference system (CRS) must be known. The survey location is given by a pair of tagged values. The pairs may be: (1) latitude/longitude, (2) easting/northing, (3) westing/southing, (4) projectedX/projectedY, or (5) localX/localY. The appropriate pair must be chosen for the data.")]
    public partial class Location : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the wellCRS that defines the CRS for the coordinates. While optional, it is strongly recommended that this be specified.
        /// </summary>
		[Description("A pointer to the wellCRS that defines the CRS for the coordinates.  While optional, it is strongly recommended that this be specified.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellCRS")]
        public RefNameString WellCRS {
            get {
                return wellCRSField;
            } 
            set {
                wellCRSField = value;
                NotifyPropertyChanged("WellCRS");
            }
        }

        private RefNameString wellCRSField; 

        /// <summary>
        /// The latitude with north being positive. If you set this property, you must also set Longitude.
        /// </summary>
        [ComponentElement]
        [XmlElement("latitude")]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
        public PlaneAngleMeasure Latitude {
            get {
                return latitudeField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Latitude when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Latitude when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Latitude when property LocalY is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Latitude when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Latitude when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Latitude when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Latitude when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Latitude when property Westing is already set");
                latitudeField = value;
                LatitudeSpecified = (value!=null);
                NotifyPropertyChanged("Latitude");
            }
        }

        private PlaneAngleMeasure latitudeField; 
        private bool latitudeSpecified = false; 

        /// <summary>
        /// bool to indicate if Latitude has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LatitudeSpecified
        {
            get {
                return latitudeSpecified;
            }
            set {
                latitudeSpecified= value;
            }
        }

        /// <summary>
        /// The longitude with east being positive. If you set this property, you must also set Latitude.
        /// </summary>
        [ComponentElement]
        [XmlElement("longitude")]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
        public PlaneAngleMeasure Longitude {
            get {
                return longitudeField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Longitude when property Easting is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Longitude when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Longitude when property LocalY is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Longitude when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Longitude when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Longitude when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Longitude when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Longitude when property Westing is already set");
                longitudeField = value;
                LongitudeSpecified = (value!=null);
                NotifyPropertyChanged("Longitude");
            }
        }

        private PlaneAngleMeasure longitudeField; 
        private bool longitudeSpecified = false; 

        /// <summary>
        /// bool to indicate if Longitude has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LongitudeSpecified
        {
            get {
                return longitudeSpecified;
            }
            set {
                longitudeSpecified= value;
            }
        }

        /// <summary>
        /// The projected coordinate with east being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Northing.
        /// </summary>
        [ComponentElement]
        [XmlElement("easting")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Easting {
            get {
                return eastingField;
            } 
            set {
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Easting when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Easting when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Easting when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Easting when property Longitude is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Easting when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Easting when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Easting when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Easting when property Westing is already set");
                eastingField = value;
                EastingSpecified = (value!=null);
                NotifyPropertyChanged("Easting");
            }
        }

        private LengthMeasure eastingField; 
        private bool eastingSpecified = false; 

        /// <summary>
        /// bool to indicate if Easting has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool EastingSpecified
        {
            get {
                return eastingSpecified;
            }
            set {
                eastingSpecified= value;
            }
        }

        /// <summary>
        /// The projected coordinate with north being positive. This is the most common type of projected coordinates. UTM coordinates are expressed in Easting and Northing. If you set this property, you must also set Easting.
        /// </summary>
        [ComponentElement]
        [XmlElement("northing")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Northing {
            get {
                return northingField;
            } 
            set {
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Northing when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Northing when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Northing when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Northing when property Longitude is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Northing when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Northing when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property Northing when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property Northing when property Westing is already set");
                northingField = value;
                NorthingSpecified = (value!=null);
                NotifyPropertyChanged("Northing");
            }
        }

        private LengthMeasure northingField; 
        private bool northingSpecified = false; 

        /// <summary>
        /// bool to indicate if Northing has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool NorthingSpecified
        {
            get {
                return northingSpecified;
            }
            set {
                northingSpecified= value;
            }
        }

        /// <summary>
        /// The projected coordinate with west being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Southing.
        /// </summary>
        [ComponentElement]
        [XmlElement("westing")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Westing {
            get {
                return westingField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Westing when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Westing when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Westing when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Westing when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Westing when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Westing when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Westing when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Westing when property ProjectedY is already set");
                westingField = value;
                WestingSpecified = (value!=null);
                NotifyPropertyChanged("Westing");
            }
        }

        private LengthMeasure westingField; 
        private bool westingSpecified = false; 

        /// <summary>
        /// bool to indicate if Westing has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool WestingSpecified
        {
            get {
                return westingSpecified;
            }
            set {
                westingSpecified= value;
            }
        }

        /// <summary>
        /// The projected coordinate with south being positive. The positive directions are reversed from the usual Easting and Northing values. These values are generally located in the southern hemisphere, most notably in South Africa and Australia. If you set this property, you must also set Westing.
        /// </summary>
        [ComponentElement]
        [XmlElement("southing")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Southing {
            get {
                return southingField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property Southing when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property Southing when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property Southing when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property Southing when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property Southing when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property Southing when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property Southing when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property Southing when property ProjectedY is already set");
                southingField = value;
                SouthingSpecified = (value!=null);
                NotifyPropertyChanged("Southing");
            }
        }

        private LengthMeasure southingField; 
        private bool southingSpecified = false; 

        /// <summary>
        /// bool to indicate if Southing has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SouthingSpecified
        {
            get {
                return southingSpecified;
            }
            set {
                southingSpecified= value;
            }
        }

        /// <summary>
        /// The projected X coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedY.
        /// </summary>
        [ComponentElement]
        [XmlElement("projectedX")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure ProjectedX {
            get {
                return projectedXField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property ProjectedX when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property ProjectedX when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property ProjectedX when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property ProjectedX when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property ProjectedX when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property ProjectedX when property Northing is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property ProjectedX when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property ProjectedX when property Westing is already set");
                projectedXField = value;
                ProjectedXSpecified = (value!=null);
                NotifyPropertyChanged("ProjectedX");
            }
        }

        private LengthMeasure projectedXField; 
        private bool projectedXSpecified = false; 

        /// <summary>
        /// bool to indicate if ProjectedX has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ProjectedXSpecified
        {
            get {
                return projectedXSpecified;
            }
            set {
                projectedXSpecified= value;
            }
        }

        /// <summary>
        /// The projected Y coordinate with the positive direction unknown. ProjectedX and ProjectedY are used when it is not known what the meaning of the coordinates is. If the meaning is known, the Easting/Northing or Westing/Southing should be used. Use of this pair implies a lack of knowledge on the part of the sender. If you set this property, you must also set ProjectedX.
        /// </summary>
        [ComponentElement]
        [XmlElement("projectedY")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure ProjectedY {
            get {
                return projectedYField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property ProjectedY when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property ProjectedY when property Latitude is already set");
                if (value != null && LocalXSpecified) throw new Exception("Cannot set property ProjectedY when property LocalX is already set");
                if (value != null && LocalYSpecified) throw new Exception("Cannot set property ProjectedY when property LocalY is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property ProjectedY when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property ProjectedY when property Northing is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property ProjectedY when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property ProjectedY when property Westing is already set");
                projectedYField = value;
                ProjectedYSpecified = (value!=null);
                NotifyPropertyChanged("ProjectedY");
            }
        }

        private LengthMeasure projectedYField; 
        private bool projectedYSpecified = false; 

        /// <summary>
        /// bool to indicate if ProjectedY has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ProjectedYSpecified
        {
            get {
                return projectedYSpecified;
            }
            set {
                projectedYSpecified= value;
            }
        }

        /// <summary>
        /// The local (engineering) X coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalY.
        /// </summary>
        [ComponentElement]
        [XmlElement("localX")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure LocalX {
            get {
                return localXField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property LocalX when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property LocalX when property Latitude is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property LocalX when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property LocalX when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property LocalX when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property LocalX when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property LocalX when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property LocalX when property Westing is already set");
                localXField = value;
                LocalXSpecified = (value!=null);
                NotifyPropertyChanged("LocalX");
            }
        }

        private LengthMeasure localXField; 
        private bool localXSpecified = false; 

        /// <summary>
        /// bool to indicate if LocalX has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LocalXSpecified
        {
            get {
                return localXSpecified;
            }
            set {
                localXSpecified= value;
            }
        }

        /// <summary>
        /// The local (engineering) Y coordinate. The CRS will define the orientation of the axis. If you set this property, you must also set LocalX.
        /// </summary>
        [ComponentElement]
        [XmlElement("localY")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure LocalY {
            get {
                return localYField;
            } 
            set {
                if (value != null && EastingSpecified) throw new Exception("Cannot set property LocalY when property Easting is already set");
                if (value != null && LatitudeSpecified) throw new Exception("Cannot set property LocalY when property Latitude is already set");
                if (value != null && LongitudeSpecified) throw new Exception("Cannot set property LocalY when property Longitude is already set");
                if (value != null && NorthingSpecified) throw new Exception("Cannot set property LocalY when property Northing is already set");
                if (value != null && ProjectedXSpecified) throw new Exception("Cannot set property LocalY when property ProjectedX is already set");
                if (value != null && ProjectedYSpecified) throw new Exception("Cannot set property LocalY when property ProjectedY is already set");
                if (value != null && SouthingSpecified) throw new Exception("Cannot set property LocalY when property Southing is already set");
                if (value != null && WestingSpecified) throw new Exception("Cannot set property LocalY when property Westing is already set");
                localYField = value;
                LocalYSpecified = (value!=null);
                NotifyPropertyChanged("LocalY");
            }
        }

        private LengthMeasure localYField; 
        private bool localYSpecified = false; 

        /// <summary>
        /// bool to indicate if LocalY has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LocalYSpecified
        {
            get {
                return localYSpecified;
            }
            set {
                localYSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType8> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType8> ItemsElementNameField; 

        /// <summary>
        /// Flag indicating (if "true" or "1") that this pair of values was the original data given for the location. If the pair of values was calculated from an original pair of values, this flag should be "false" (or "0"), or not present.
        /// </summary>
		[Description("Flag indicating (if \"true\" or \"1\") that this pair of values was  the original data given for the location. If the pair of values was  calculated from an original pair of values, this flag should be \"false\" (or \"0\"),  or not present.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("original")]
        public bool? Original {
            get {
                return originalField;
            } 
            set {
                originalField = value;
                 this.OriginalSpecified = true;
                NotifyPropertyChanged("Original");
            }
        }

        private bool? originalField; 

        /// <summary>
        /// originalSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OriginalSpecified {
            get {
                return originalSpecifiedField;
            } 
            set {
                originalSpecifiedField = value;
                NotifyPropertyChanged("OriginalSpecified");
            }
        }

        private bool originalSpecifiedField; 

        /// <summary>
        /// A Comment, generally given to help the reader interpret the coordinates if the CRS and the chosen pair do not make them clear.
        /// </summary>
		[StringLength(256)]
        [Description("A Comment, generally given to help the reader  interpret the coordinates if the CRS and the chosen pair do not make them clear.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellboreRig", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A reference to a rig within a wellbore. The wellbore may be defined within the context of another well. This value represents a foreign key from one node to another.")]
    public partial class RefWellWellboreRig : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the rig with which there is a relationship.
        /// </summary>
		[Required]
        [Description("A pointer to the rig with which there is a relationship.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("rigReference")]
        public RefNameString RigReference {
            get {
                return rigReferenceField;
            } 
            set {
                rigReferenceField = value;
                NotifyPropertyChanged("RigReference");
            }
        }

        private RefNameString rigReferenceField; 

        /// <summary>
        /// A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the context of a common parent wellbore.
        /// </summary>
		[Description("A pointer to the wellbore that contains the rigReference. This is not needed unless the referenced rig is outside the  context of a common parent wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellboreParent")]
        public RefNameString WellboreParent {
            get {
                return wellboreParentField;
            } 
            set {
                wellboreParentField = value;
                NotifyPropertyChanged("WellboreParent");
            }
        }

        private RefNameString wellboreParentField; 

        /// <summary>
        /// A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
		[Description("A pointer to the well that contains the wellboreParent. This is not needed unless the referenced wellbore is outside the  context of a common parent well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellParent")]
        public RefNameString WellParent {
            get {
                return wellParentField;
            } 
            set {
                wellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private RefNameString wellParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refWellWellbore", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Data that represents a foreign key to a wellbore. The wellbore may be defined within the context of another well.")]
    public partial class RefWellWellbore : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer the wellbore with which there is a relationship.
        /// </summary>
		[Required]
        [Description("A pointer the wellbore with which there is a relationship.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellboreReference")]
        public RefNameString WellboreReference {
            get {
                return wellboreReferenceField;
            } 
            set {
                wellboreReferenceField = value;
                NotifyPropertyChanged("WellboreReference");
            }
        }

        private RefNameString wellboreReferenceField; 

        /// <summary>
        /// A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the context of a common parent well.
        /// </summary>
		[Description("A pointer to the well that contains the wellboreReference. This is not needed unless the referenced wellbore is outside the  context of a common parent well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("wellParent")]
        public RefNameString WellParent {
            get {
                return wellParentField;
            } 
            set {
                wellParentField = value;
                NotifyPropertyChanged("WellParent");
            }
        }

        private RefNameString wellParentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the wellKnownNameStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="wellKnownNameStruct", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the wellKnownNameStruct xsd type.")]
    public partial class WellKnownNameStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the WellKnownNameStruct class.
        /// </summary>
        public WellKnownNameStruct() {}

        /// <summary>
        /// Initializes a new instance of the WellKnownNameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public WellKnownNameStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is unique.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The naming system within the name is unique.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("namingSystem")]
		
        public string NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string namingSystemField; 

		/// <summary>
        /// A unique (short) code associated with the name.
        /// </summary>
		[StringLength(40)]
        [Description("A unique (short) code associated with the name.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        [XmlAttribute("code")]
		
        public string Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                NotifyPropertyChanged("Code");
            }
        }

        private string codeField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellDatum", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Defines the vertical datums associated with elevation, vertical depth and measured depth coordinates within the context of a well. ")]
    public partial class WellDatum : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The human understandable contextual name of the reference datum.
        /// </summary>
		[StringLength(64)]
        [Description("The human understandable contextual name of the reference datum.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The code value that represents the type of reference datum. This may represent a point on a device (e.g., kelly bushing) or it may represent a vertical reference datum (e.g., mean sea level).
        /// </summary>
		[Description("The code value that represents the type of reference datum.  This may represent a point on a device (e.g., kelly bushing) or it may represent  a vertical reference datum (e.g., mean sea level).")]
        [EnergisticsDataTypeAttribute(DataType = "ElevCodeEnum")]
		[XmlElement("code")]
        public ElevCodeEnum? Code {
            get {
                return codeField;
            } 
            set {
                codeField = value;
                 this.CodeSpecified = true;
                NotifyPropertyChanged("Code");
            }
        }

        private ElevCodeEnum? codeField; 

        /// <summary>
        /// codeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CodeSpecified {
            get {
                return codeSpecifiedField;
            } 
            set {
                codeSpecifiedField = value;
                NotifyPropertyChanged("CodeSpecified");
            }
        }

        private bool codeSpecifiedField; 

        /// <summary>
        /// The name of the vertical reference datum in a particular naming system. This should only be specified if the above 'code' represents some variation of sea level. An optional short name (code) can also be specified. Specifying a well known datum is highly desired if the above code is a variant of sea level because sea level varies over time and space. An example would be to specify a name of 'Caspian Sea' with a code of '5106' in the 'EPSG' naming system.
        /// </summary>
        [ComponentElement]
        [XmlElement("datumName")]
        [EnergisticsDataTypeAttribute(DataType = "wellKnownNameStruct")]
        public WellKnownNameStruct DatumName {
            get {
                return datumNameField;
            } 
            set {
                if (value != null && DatumCRSSpecified) throw new Exception("Cannot set property DatumName when property DatumCRS is already set");
                datumNameField = value;
                DatumNameSpecified = (value!=null);
                NotifyPropertyChanged("DatumName");
            }
        }

        private WellKnownNameStruct datumNameField; 
        private bool datumNameSpecified = false; 

        /// <summary>
        /// bool to indicate if DatumName has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DatumNameSpecified
        {
            get {
                return datumNameSpecified;
            }
            set {
                datumNameSpecified= value;
            }
        }

        /// <summary>
        /// A reference to the coordinateReferenceSystem object representing the vertical reference datum (i.e., this wellDatum). This should only be specified if the above 'code' represents some variation of sea level. 
        /// </summary>
        [ComponentElement]
        [XmlElement("datumCRS")]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
        public RefNameString DatumCRS {
            get {
                return datumCRSField;
            } 
            set {
                if (value != null && DatumNameSpecified) throw new Exception("Cannot set property DatumCRS when property DatumName is already set");
                datumCRSField = value;
                DatumCRSSpecified = (value!=null);
                NotifyPropertyChanged("DatumCRS");
            }
        }

        private RefNameString datumCRSField; 
        private bool datumCRSSpecified = false; 

        /// <summary>
        /// bool to indicate if DatumCRS has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DatumCRSSpecified
        {
            get {
                return datumCRSSpecified;
            }
            set {
                datumCRSSpecified= value;
            }
        }


        /// <summary>
        /// Since various activities may use different points as measurement datums, it is useful to characterize the point based on its usage. A well reference datum may have more than one such characterization. For example, it may be the datum used by the driller and logger for measuring their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).
        /// </summary>
		[Description("Since various activities may use different points as  measurement datums, it is useful to characterize the point based on its usage.  A well reference datum may have more than one such characterization.  For example, it may be the datum used by the driller and logger for measuring  their depths. Example usage values would be 'permanent','driller', 'logger' 'WRP' (well reference point) and 'SRP' (site reference point).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("kind")]
        public List<string> Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

         /// <summary>
         /// bool to indicate if Kind has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KindSpecified
         {
             get {
             if(kindField!=null)
                 return kindField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> kindField; 

        /// <summary>
        /// A pointer to the wellbore that contains the reference datum. This should be specified if a measured depth is given.
        /// </summary>
		[Description("A pointer to the wellbore that contains the reference datum. This should be specified if a measured depth is given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refWellWellbore")]
		[XmlElement("wellbore")]
        public RefWellWellbore Wellbore {
            get {
                return wellboreField;
            } 
            set {
                wellboreField = value;
                NotifyPropertyChanged("Wellbore");
            }
        }

        private RefWellWellbore wellboreField; 

        /// <summary>
        /// A pointer to the rig that contains the device used as a reference datum. The rig may be associated with a wellbore in another well (e.g., pattern drilling using a rig on a track).
        /// </summary>
		[Description("A pointer to the rig that contains the device used  as a reference datum. The rig may be associated with a wellbore in another well (e.g., pattern drilling using a rig on a track).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refWellWellboreRig")]
		[XmlElement("rig")]
        public RefWellWellboreRig Rig {
            get {
                return rigField;
            } 
            set {
                rigField = value;
                NotifyPropertyChanged("Rig");
            }
        }

        private RefWellWellboreRig rigField; 

        /// <summary>
        /// The gravity based elevation coordinate of this reference datum as measured from another datum. Positive moving upward from the elevation datum. An elevation should be given unless this is a vertical reference datum (e.g., sea level). 
        /// </summary>
		[Description("The gravity based elevation coordinate of this reference datum  as measured from another datum. Positive moving upward from the elevation datum. An elevation should be given unless this is a vertical reference datum (e.g., sea level).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "wellElevationCoord")]
		[XmlElement("elevation")]
        public WellElevationCoord Elevation {
            get {
                return elevationField;
            } 
            set {
                elevationField = value;
                NotifyPropertyChanged("Elevation");
            }
        }

        private WellElevationCoord elevationField; 

        /// <summary>
        /// The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is "downhole", such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a Depth is given then an Elevation should also be given.
        /// </summary>
		[Description("The measured depth coordinate of this reference datum as measured from another datum. The measured depth datum should either be the same as the elevation datum or it should be relatable to the elevation datum through other datums. Positive moving toward the bottomhole from the measured depth datum. This should be given when a local reference is \"downhole\",  such as a kickoff point or ocean bottom template, and the borehole may not be vertical. If a Depth is given then an Elevation should also be given.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("measuredDepth")]
        public MeasuredDepthCoord MeasuredDepth {
            get {
                return measuredDepthField;
            } 
            set {
                measuredDepthField = value;
                NotifyPropertyChanged("MeasuredDepth");
            }
        }

        private MeasuredDepthCoord measuredDepthField; 

        /// <summary>
        /// The horizontal location of the point being used as a well datum. This may be used when the point is not directly above or below the well point location. For example, a well being drilled from a platform may have its location at the entrance into the sea floor, while the well datum may be located on the drilling rig. Or the well datum may be a kickoff point, that is not directly under the well surface point. 
        /// </summary>
		[Description("The horizontal location of the point being used as a well datum.  This may be used when the point is not directly above or below the well point location.  For example, a well being drilled from a platform may have its location at the entrance  into the sea floor, while the well datum may be located on the drilling rig.  Or the well datum may be a kickoff point, that is not directly under the well surface point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_location")]
		[XmlElement("horizontalLocation")]
        public Location HorizontalLocation {
            get {
                return horizontalLocationField;
            } 
            set {
                horizontalLocationField = value;
                NotifyPropertyChanged("HorizontalLocation");
            }
        }

        private Location horizontalLocationField; 

        /// <summary>
        /// A contextual description of the well reference datum.
        /// </summary>
		[StringLength(4000)]
        [Description("A contextual description of the well reference datum.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// True indicates that this is the default reference datum for measured depth coordinates. False or not given indicates that this is not the default reference datum. Measured depth coordinates that do not specify a datum reference should be assumed to be measured relative to this default reference datum. Only one reference datum may be designated as the default measured depth datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
		[Description("True indicates that this is the default reference datum for measured depth coordinates.  False or not given indicates that this is not the default reference datum. Measured depth coordinates that do not specify a datum reference should be  assumed to be measured relative to this default reference datum. Only one reference datum may be designated as the default measured depth datum for each well. Values are \"true\" (or \"1\") and \"false\" ( or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        [XmlAttribute("defaultMeasuredDepth")]
		
        public bool DefaultMeasuredDepth {
            get {
                return defaultMeasuredDepthField;
            } 
            set {
                defaultMeasuredDepthField = value;
                 this.DefaultMeasuredDepthSpecified = true;
                NotifyPropertyChanged("DefaultMeasuredDepth");
            }
        }

        private bool defaultMeasuredDepthField; 

        /// <summary>
        /// defaultMeasuredDepthSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DefaultMeasuredDepthSpecified {
            get {
                return defaultMeasuredDepthSpecifiedField;
            } 
            set {
                defaultMeasuredDepthSpecifiedField = value;
                NotifyPropertyChanged("DefaultMeasuredDepthSpecified");
            }
        }

        private bool defaultMeasuredDepthSpecifiedField; 

		/// <summary>
        /// True indicates that this is the default reference datum for vertical depth coordinates. False or not given indicates that this is not the default reference datum. Vertical depth coordinates that do not specify a datum reference should be assumed to be measured relative to the default reference datum. Only one reference datum may be designated as the default vertical depth datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
		[Description("True indicates that this is the default reference datum for vertical depth coordinates.  False or not given indicates that this is not the default reference datum. Vertical depth coordinates that do not specify a datum reference should be  assumed to be measured relative to the default reference datum. Only one reference datum may be designated as the default vertical depth datum for each well. Values are \"true\" (or \"1\") and \"false\" ( or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        [XmlAttribute("defaultVerticalDepth")]
		
        public bool DefaultVerticalDepth {
            get {
                return defaultVerticalDepthField;
            } 
            set {
                defaultVerticalDepthField = value;
                 this.DefaultVerticalDepthSpecified = true;
                NotifyPropertyChanged("DefaultVerticalDepth");
            }
        }

        private bool defaultVerticalDepthField; 

        /// <summary>
        /// defaultVerticalDepthSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DefaultVerticalDepthSpecified {
            get {
                return defaultVerticalDepthSpecifiedField;
            } 
            set {
                defaultVerticalDepthSpecifiedField = value;
                NotifyPropertyChanged("DefaultVerticalDepthSpecified");
            }
        }

        private bool defaultVerticalDepthSpecifiedField; 

		/// <summary>
        /// True indicates that this is the default reference datum for elevation coordinates. False or not given indicates that this is not the default reference datum. Elevation coordinates that do not specify a datum reference should be assumed to be measured relative to the default reference datum. Only one reference datum may be designated as the default elevation datum for each well. Values are "true" (or "1") and "false" ( or "0").
        /// </summary>
		[Description("True indicates that this is the default reference datum for elevation coordinates.   False or not given indicates that this is not the default reference datum. Elevation coordinates that do not specify a datum reference should be assumed to be measured relative to the default reference datum. Only one reference datum may be designated as the default elevation datum for each well. Values are \"true\" (or \"1\") and \"false\" ( or \"0\").")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        [XmlAttribute("defaultElevation")]
		
        public bool DefaultElevation {
            get {
                return defaultElevationField;
            } 
            set {
                defaultElevationField = value;
                 this.DefaultElevationSpecified = true;
                NotifyPropertyChanged("DefaultElevation");
            }
        }

        private bool defaultElevationField; 

        /// <summary>
        /// defaultElevationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DefaultElevationSpecified {
            get {
                return defaultElevationSpecifiedField;
            } 
            set {
                defaultElevationSpecifiedField = value;
                NotifyPropertyChanged("DefaultElevationSpecified");
            }
        }

        private bool defaultElevationSpecifiedField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Within the context of a WITSML Server, this data should duplicate the equivalent information in the well object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_wellContext", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Within the context of a WITSML Server, this data should duplicate the equivalent information in the well object.")]
    public partial class WellContext : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the field in which the well is located.
        /// </summary>
		[Description("Name of the field in which the well is located.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("field")]
        public NameStruct Field {
            get {
                return fieldField;
            } 
            set {
                fieldField = value;
                NotifyPropertyChanged("Field");
            }
        }

        private NameStruct fieldField; 

        /// <summary>
        /// An alias name associated with the well. If the wellName is associated with a naming system then it should be included in this list.
        /// </summary>
		[Description("An alias name associated with the well. If the wellName is associated with a naming system then it should be included in this list.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("wellAlias")]
        public List<NameStruct> WellAlias {
            get {
                return wellAliasField;
            } 
            set {
                wellAliasField = value;
                NotifyPropertyChanged("WellAlias");
            }
        }

         /// <summary>
         /// bool to indicate if WellAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellAliasSpecified
         {
             get {
             if(wellAliasField!=null)
                 return wellAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> wellAliasField; 

        /// <summary>
        /// A datum to which elevations and depths are referenced. 
        /// </summary>
		[Description("A datum to which elevations and depths are referenced.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellDatum")]
		[XmlElement("wellDatum")]
        public List<WellDatum> WellDatum {
            get {
                return wellDatumField;
            } 
            set {
                wellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

         /// <summary>
         /// bool to indicate if WellDatum has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellDatumSpecified
         {
             get {
             if(wellDatumField!=null)
                 return wellDatumField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellDatum> wellDatumField; 

        /// <summary>
        /// POSC well fluid. The type of fluid being produced from or injected into a well facility. 
        /// </summary>
		[Description("POSC well fluid. The type of fluid being produced from or injected  into a well facility.")]
        [EnergisticsDataTypeAttribute(DataType = "WellFluid")]
		[XmlElement("fluidWell")]
        public WellFluid? FluidWell {
            get {
                return fluidWellField;
            } 
            set {
                fluidWellField = value;
                 this.FluidWellSpecified = true;
                NotifyPropertyChanged("FluidWell");
            }
        }

        private WellFluid? fluidWellField; 

        /// <summary>
        /// fluidWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidWellSpecified {
            get {
                return fluidWellSpecifiedField;
            } 
            set {
                fluidWellSpecifiedField = value;
                NotifyPropertyChanged("FluidWellSpecified");
            }
        }

        private bool fluidWellSpecifiedField; 

        /// <summary>
        /// POSC well direction. The direction of flow of the fluids in a well facility (generally, injected or produced, or some combination). 
        /// </summary>
		[Description("POSC well direction. The direction of flow of the fluids in a well facility (generally, injected or produced, or some combination).")]
        [EnergisticsDataTypeAttribute(DataType = "WellDirection")]
		[XmlElement("directionWell")]
        public WellDirection? DirectionWell {
            get {
                return directionWellField;
            } 
            set {
                directionWellField = value;
                 this.DirectionWellSpecified = true;
                NotifyPropertyChanged("DirectionWell");
            }
        }

        private WellDirection? directionWellField; 

        /// <summary>
        /// directionWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionWellSpecified {
            get {
                return directionWellSpecifiedField;
            } 
            set {
                directionWellSpecifiedField = value;
                NotifyPropertyChanged("DirectionWellSpecified");
            }
        }

        private bool directionWellSpecifiedField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the nameStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="nameStruct", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the nameStruct xsd type.")]
    public partial class NameStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        public NameStruct() {}

        /// <summary>
        /// Initializes a new instance of the NameStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public NameStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The naming system within the name is (hopefully) unique.
        /// </summary>
		[StringLength(64)]
        [Description("The naming system within the name is (hopefully) unique.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("namingSystem")]
		
        public string NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string namingSystemField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Well Test object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_wellTest", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The non-contextual content of a WITSML Well Test object.")]
    public partial class WellTest : Object, IProdmlDataObject, ICommonDataObject, IWellObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the well that contains the well test. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the well test. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well test.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The minimum time index contained within the object. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. That is, all wellTest for a well in the specified period defined by the min/max. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The minimum time index contained within the object. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. That is, all wellTest for a well in the specified period defined by the min/max. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return dTimMinField;
            } 
            set {
                dTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime dTimMinField; 

        /// <summary>
        /// The maximum time index contained within the object. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The maximum time index contained within the object. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return dTimMaxField;
            } 
            set {
                dTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime dTimMaxField; 

        /// <summary>
        /// The definition of the "current time" index for this object. The current time index is a server query parameter which requests the selection of a single node from a recurring set (e.g., the data related to one point in a time series). That is, the "most recent" (at or before the specified time) wellTest for a well. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The definition of the \"current time\" index for this object. The current time index is a server query parameter which requests the  selection of a single node from a recurring set  (e.g., the data related to one point in a time series). That is, the \"most recent\" (at or before the specified time) wellTest for a well. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimCurrent")]
        public Timestamp? DateTimeCurrent {
            get {
                return dTimCurrentField;
            } 
            set {
                dTimCurrentField = value;
                 this.DateTimeCurrentSpecified = true;
                NotifyPropertyChanged("DateTimeCurrent");
            }
        }

        private Timestamp? dTimCurrentField; 

        /// <summary>
        /// dTimCurrentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCurrentSpecified {
            get {
                return dTimCurrentSpecifiedField;
            } 
            set {
                dTimCurrentSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCurrentSpecified");
            }
        }

        private bool dTimCurrentSpecifiedField; 

        /// <summary>
        /// Contextual data about the well that was tested.
        /// </summary>
		[Description("Contextual data about the well that was tested.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellContext")]
		[XmlElement("wellContext")]
        public WellContext WellContext {
            get {
                return wellContextField;
            } 
            set {
                wellContextField = value;
                NotifyPropertyChanged("WellContext");
            }
        }

        private WellContext wellContextField; 

        /// <summary>
        /// The date-time of well test.
        /// </summary>
		[Description("The date-time of well test.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("testDate")]
        public Timestamp? TestDate {
            get {
                return testDateField;
            } 
            set {
                testDateField = value;
                 this.TestDateSpecified = true;
                NotifyPropertyChanged("TestDate");
            }
        }

        private Timestamp? testDateField; 

        /// <summary>
        /// testDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestDateSpecified {
            get {
                return testDateSpecifiedField;
            } 
            set {
                testDateSpecifiedField = value;
                NotifyPropertyChanged("TestDateSpecified");
            }
        }

        private bool testDateSpecifiedField; 

        /// <summary>
        /// The date-time of the previous well test.
        /// </summary>
		[Description("The date-time of the previous well test.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("previousTestDate")]
        public Timestamp? PreviousTestDate {
            get {
                return previousTestDateField;
            } 
            set {
                previousTestDateField = value;
                 this.PreviousTestDateSpecified = true;
                NotifyPropertyChanged("PreviousTestDate");
            }
        }

        private Timestamp? previousTestDateField; 

        /// <summary>
        /// previousTestDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PreviousTestDateSpecified {
            get {
                return previousTestDateSpecifiedField;
            } 
            set {
                previousTestDateSpecifiedField = value;
                NotifyPropertyChanged("PreviousTestDateSpecified");
            }
        }

        private bool previousTestDateSpecifiedField; 

        /// <summary>
        /// The date-time of the last valid well test.
        /// </summary>
		[Description("The date-time of the last valid well test.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("lastValidTest")]
        public Timestamp? LastValidTest {
            get {
                return lastValidTestField;
            } 
            set {
                lastValidTestField = value;
                 this.LastValidTestSpecified = true;
                NotifyPropertyChanged("LastValidTest");
            }
        }

        private Timestamp? lastValidTestField; 

        /// <summary>
        /// lastValidTestSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool LastValidTestSpecified {
            get {
                return lastValidTestSpecifiedField;
            } 
            set {
                lastValidTestSpecifiedField = value;
                NotifyPropertyChanged("LastValidTestSpecified");
            }
        }

        private bool lastValidTestSpecifiedField; 

        /// <summary>
        /// The reason for the well test: initial, periodic, revision.
        /// </summary>
		[Description("The reason for the well test: initial, periodic, revision.")]
        [EnergisticsDataTypeAttribute(DataType = "TestReason")]
		[XmlElement("testReason")]
        public TestReason TestReason {
            get {
                return testReasonField;
            } 
            set {
                testReasonField = value;
                 this.TestReasonSpecified = true;
                NotifyPropertyChanged("TestReason");
            }
        }

        private TestReason testReasonField; 

        /// <summary>
        /// testReasonSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestReasonSpecified {
            get {
                return testReasonSpecifiedField;
            } 
            set {
                testReasonSpecifiedField = value;
                NotifyPropertyChanged("TestReasonSpecified");
            }
        }

        private bool testReasonSpecifiedField; 

        /// <summary>
        /// The type of well production test.
        /// </summary>
		[StringLength(40)]
        [Description("The type of well production test.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("testType")]
        public string TestType {
            get {
                return testTypeField;
            } 
            set {
                testTypeField = value;
                NotifyPropertyChanged("TestType");
            }
        }

        private string testTypeField; 

        /// <summary>
        /// DEPRECATED: use productionTest/wellheadData/chokeOrificeSize or injectionTest/chokeOrificeSize. The size of the opening in the flow choke at the wellhead.
        /// </summary>
		[Description("DEPRECATED: use productionTest/wellheadData/chokeOrificeSize or injectionTest/chokeOrificeSize. The size of the opening in the flow choke at the wellhead.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("chokeOrificeSize")]
        public LengthMeasure ChokeOrificeSize {
            get {
                return chokeOrificeSizeField;
            } 
            set {
                chokeOrificeSizeField = value;
                NotifyPropertyChanged("ChokeOrificeSize");
            }
        }

        private LengthMeasure chokeOrificeSizeField; 

        /// <summary>
        /// A port on a Product Flow Unit that is represented by this test.
        /// </summary>
		[Description("A port on a Product Flow Unit that is represented by this test.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("productFlowPort")]
        public RefNameString ProductFlowPort {
            get {
                return productFlowPortField;
            } 
            set {
                productFlowPortField = value;
                NotifyPropertyChanged("ProductFlowPort");
            }
        }

        private RefNameString productFlowPortField; 

        /// <summary>
        /// The Product Flow Unit represented by the port. This is defined within the Product Flow Model
        /// </summary>
		[Description("The Product Flow Unit represented by the port. This is defined within the Product Flow Model")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("productFlowUnit")]
        public RefNameString ProductFlowUnit {
            get {
                return productFlowUnitField;
            } 
            set {
                productFlowUnitField = value;
                NotifyPropertyChanged("ProductFlowUnit");
            }
        }

        private RefNameString productFlowUnitField; 

        /// <summary>
        /// The Product Flow Model that represents the above Product Flow Unit.
        /// </summary>
		[Description("The Product Flow Model that represents the above Product Flow Unit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("productFlowModel")]
        public RefNameString ProductFlowModel {
            get {
                return productFlowModelField;
            } 
            set {
                productFlowModelField = value;
                NotifyPropertyChanged("ProductFlowModel");
            }
        }

        private RefNameString productFlowModelField; 

        /// <summary>
        /// Defines the standard temperature and pressure to which all standard volumes in this report have been corrected. This applies to all elements whose name is suffixed by StdTempPres.
        /// </summary>
		[Description("Defines the standard temperature and pressure to which all standard volumes in this report have been corrected. This applies to all elements whose name is suffixed by StdTempPres.")]
        [EnergisticsDataTypeAttribute(DataType = "StandardTempPress")]
		[XmlElement("standardTempPres")]
        public StandardTempPress StandardTempPres {
            get {
                return standardTempPresField;
            } 
            set {
                standardTempPresField = value;
                 this.StandardTempPresSpecified = true;
                NotifyPropertyChanged("StandardTempPres");
            }
        }

        private StandardTempPress standardTempPresField; 

        /// <summary>
        /// standardTempPresSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StandardTempPresSpecified {
            get {
                return standardTempPresSpecifiedField;
            } 
            set {
                standardTempPresSpecifiedField = value;
                NotifyPropertyChanged("StandardTempPresSpecified");
            }
        }

        private bool standardTempPresSpecifiedField; 

        /// <summary>
        /// The overall state of the test with respect to validation operations.
        /// </summary>
		[Description("The overall state of the test with respect to validation operations.")]
        [EnergisticsDataTypeAttribute(DataType = "ValidationState")]
		[XmlElement("validationState")]
        public ValidationState ValidationState {
            get {
                return validationStateField;
            } 
            set {
                validationStateField = value;
                 this.ValidationStateSpecified = true;
                NotifyPropertyChanged("ValidationState");
            }
        }

        private ValidationState validationStateField; 

        /// <summary>
        /// validationStateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ValidationStateSpecified {
            get {
                return validationStateSpecifiedField;
            } 
            set {
                validationStateSpecifiedField = value;
                NotifyPropertyChanged("ValidationStateSpecified");
            }
        }

        private bool validationStateSpecifiedField; 

        /// <summary>
        /// Defines the results of one validation operation.
        /// </summary>
		[Description("Defines the results of one validation operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestValidationOperation")]
		[XmlElement("validationOperation")]
        public List<WellTestValidationOperation> ValidationOperation {
            get {
                return validationOperationField;
            } 
            set {
                validationOperationField = value;
                NotifyPropertyChanged("ValidationOperation");
            }
        }

         /// <summary>
         /// bool to indicate if ValidationOperation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValidationOperationSpecified
         {
             get {
             if(validationOperationField!=null)
                 return validationOperationField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellTestValidationOperation> validationOperationField; 

        /// <summary>
        /// Data from a fluid level test.
        /// </summary>
        [ComponentElement]
        [XmlElement("fluidLevelTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestFluidLevelTest")]
        public WellTestFluidLevelTest FluidLevelTest {
            get {
                return fluidLevelTestField;
            } 
            set {
                if (value != null && InjectionTestSpecified) throw new Exception("Cannot set property FluidLevelTest when property InjectionTest is already set");
                if (value != null && ProductionTestSpecified) throw new Exception("Cannot set property FluidLevelTest when property ProductionTest is already set");
                fluidLevelTestField = value;
                FluidLevelTestSpecified = (value!=null);
                NotifyPropertyChanged("FluidLevelTest");
            }
        }

        private WellTestFluidLevelTest fluidLevelTestField; 
        private bool fluidLevelTestSpecified = false; 

        /// <summary>
        /// bool to indicate if FluidLevelTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool FluidLevelTestSpecified
        {
            get {
                return fluidLevelTestSpecified;
            }
            set {
                fluidLevelTestSpecified= value;
            }
        }

        /// <summary>
        /// Data from a production test. Multiple tests generally indicate that there are multiple components of a single overall test. For example, for multi-zoned wells.
        /// </summary>
        [ComponentElement]
        [XmlElement("productionTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestProductionTestData")]
        public WellTestProductionTestData[] ProductionTest {
            get {
                return productionTestField;
            } 
            set {
                if (value != null && FluidLevelTestSpecified) throw new Exception("Cannot set property ProductionTest when property FluidLevelTest is already set");
                if (value != null && InjectionTestSpecified) throw new Exception("Cannot set property ProductionTest when property InjectionTest is already set");
                productionTestField = value;
                ProductionTestSpecified = (value!=null);
                NotifyPropertyChanged("ProductionTest");
            }
        }

        private WellTestProductionTestData[] productionTestField; 
        private bool productionTestSpecified = false; 

        /// <summary>
        /// bool to indicate if ProductionTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ProductionTestSpecified
        {
            get {
                return productionTestSpecified;
            }
            set {
                productionTestSpecified= value;
            }
        }

        /// <summary>
        /// Data from an injection test. Multiple tests generally indicate that there are multiple components of the overall test. For example, for multi-zoned wells.
        /// </summary>
        [ComponentElement]
        [XmlElement("injectionTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_wellTestInjectionTestData")]
        public WellTestInjectionTestData[] InjectionTest {
            get {
                return injectionTestField;
            } 
            set {
                if (value != null && FluidLevelTestSpecified) throw new Exception("Cannot set property InjectionTest when property FluidLevelTest is already set");
                if (value != null && ProductionTestSpecified) throw new Exception("Cannot set property InjectionTest when property ProductionTest is already set");
                injectionTestField = value;
                InjectionTestSpecified = (value!=null);
                NotifyPropertyChanged("InjectionTest");
            }
        }

        private WellTestInjectionTestData[] injectionTestField; 
        private bool injectionTestSpecified = false; 

        /// <summary>
        /// bool to indicate if InjectionTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool InjectionTestSpecified
        {
            get {
                return injectionTestSpecified;
            }
            set {
                injectionTestSpecified= value;
            }
        }


        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell. 
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents  the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the endpointQualifiedDateTime xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="endpointQualifiedDateTime", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the endpointQualifiedDateTime xsd type.")]
    public partial class EndpointQualifiedDateTime : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EndpointQualifiedDateTime class.
        /// </summary>
        public EndpointQualifiedDateTime() {}

        /// <summary>
        /// Initializes a new instance of the EndpointQualifiedDateTime class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EndpointQualifiedDateTime(DateTime value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The default is "inclusive".
        /// </summary>
		[Description("The default is \"inclusive\".")]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifier")]
        [XmlAttribute("endpoint")]
		        public string EndpointSurrogate
        {
            get {
                     if(Endpoint==null)  return null;
                     else return Endpoint.Name; }
            set { 

                 if(this.Endpoint== null)
                 Endpoint= new EndpointQualifier(value);
                 else
                   Endpoint.Name = value; }
        }
        /// <summary>
        /// The default is "inclusive".
        /// </summary>
        [XmlIgnore]

        public EndpointQualifier Endpoint {
            get {
                return endpointField;
            } 
            set {
                endpointField = value;
                 this.EndpointSpecified = true;
                NotifyPropertyChanged("Endpoint");
            }
        }

        private EndpointQualifier endpointField; 

        /// <summary>
        /// endpointSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndpointSpecified {
            get {
                return endpointSpecifiedField;
            } 
            set {
                endpointSpecifiedField = value;
                NotifyPropertyChanged("EndpointSpecified");
            }
        }

        private bool endpointSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public DateTime Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private DateTime ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the endpointQuantity xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="endpointQuantity", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the endpointQuantity xsd type.")]
    public partial class EndpointQuantity : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EndpointQuantity class.
        /// </summary>
        public EndpointQuantity() {}

        /// <summary>
        /// Initializes a new instance of the EndpointQuantity class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EndpointQuantity(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.
        /// </summary>
		[Required]
        [Description("Defines the semantics (inclusive or exclusive) of the endpoint  within the context of the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifierInterval")]
        [XmlAttribute("endpoint")]
		        public string EndpointSurrogate
        {
            get {
                     if(Endpoint==null)  return null;
                     else return Endpoint.Name; }
            set { 

                 if(this.Endpoint== null)
                 Endpoint= new EndpointQualifierInterval(value);
                 else
                   Endpoint.Name = value; }
        }
        /// <summary>
        /// Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.
        /// </summary>
        [XmlIgnore]

        public EndpointQualifierInterval Endpoint {
            get {
                return endpointField;
            } 
            set {
                endpointField = value;
                NotifyPropertyChanged("Endpoint");
            }
        }

        private EndpointQualifierInterval endpointField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines a value threshold window and the cumulative time duration that the data was within that window.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_timeSeriesThreshold", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Defines a value threshold window and the cumulative time duration that the data was within that window.")]
    public partial class TimeSeriesThreshold : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The lower bound of the threshold for testing whether values are within a specific range. Element "unit" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMinimum must be less than thresholdMaximum. If thresholdMinimum is not specified then the minimum shall be assumed to be minus infinity.
        /// </summary>
		[Description("The lower bound of the threshold for testing whether values are within a specific range. Element \"unit\" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMinimum must be less than thresholdMaximum. If thresholdMinimum is not specified then the minimum shall be  assumed to be minus infinity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQuantity")]
		[XmlElement("thresholdMinimum")]
        public EndpointQuantity ThresholdMinimum {
            get {
                return thresholdMinimumField;
            } 
            set {
                thresholdMinimumField = value;
                NotifyPropertyChanged("ThresholdMinimum");
            }
        }

        private EndpointQuantity thresholdMinimumField; 

        /// <summary>
        /// The upper bound of the threshold for testing whether values are within a specific range. Element "unit" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMaximum must be greater than thresholdMinimum. If thresholdMaximum is not specified then the maximum shall be assumed to be plus infinity.
        /// </summary>
		[Description("The upper bound of the threshold for testing whether values are within a specific range. Element \"unit\" defines the unit of measure of this value. At least one of minimumValue and maximumValue must be specified. The thresholdMaximum must be greater than thresholdMinimum. If thresholdMaximum is not specified then the maximum shall be  assumed to be plus infinity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQuantity")]
		[XmlElement("thresholdMaximum")]
        public EndpointQuantity ThresholdMaximum {
            get {
                return thresholdMaximumField;
            } 
            set {
                thresholdMaximumField = value;
                NotifyPropertyChanged("ThresholdMaximum");
            }
        }

        private EndpointQuantity thresholdMaximumField; 

        /// <summary>
        /// The sum of the time intervals over the range of dTimMin to dTimMax during which the values were within the specified threshold range.
        /// </summary>
		[Required]
        [Description("The sum of the time intervals over the range of dTimMin to dTimMax  during which the values were within the specified threshold range.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("duration")]
        public TimeMeasure Duration {
            get {
                return durationField;
            } 
            set {
                durationField = value;
                NotifyPropertyChanged("Duration");
            }
        }

        private TimeMeasure durationField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the endpointDateTime xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="endpointDateTime", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the endpointDateTime xsd type.")]
    public partial class EndpointDateTime : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EndpointDateTime class.
        /// </summary>
        public EndpointDateTime() {}

        /// <summary>
        /// Initializes a new instance of the EndpointDateTime class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EndpointDateTime(DateTime value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.
        /// </summary>
		[Required]
        [Description("Defines the semantics (inclusive or exclusive) of the endpoint  within the context of the interval.")]
        [EnergisticsDataTypeAttribute(DataType = "EndpointQualifierInterval")]
        [XmlAttribute("endpoint")]
		        public string EndpointSurrogate
        {
            get {
                     if(Endpoint==null)  return null;
                     else return Endpoint.Name; }
            set { 

                 if(this.Endpoint== null)
                 Endpoint= new EndpointQualifierInterval(value);
                 else
                   Endpoint.Name = value; }
        }
        /// <summary>
        /// Defines the semantics (inclusive or exclusive) of the endpoint within the context of the interval.
        /// </summary>
        [XmlIgnore]

        public EndpointQualifierInterval Endpoint {
            get {
                return endpointField;
            } 
            set {
                endpointField = value;
                NotifyPropertyChanged("Endpoint");
            }
        }

        private EndpointQualifierInterval endpointField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public DateTime Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private DateTime ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of WITSML statistics about a range of time series data.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_timeSeriesStatistic", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The non-contextual content of WITSML statistics about a range of time series data.")]
    public partial class TimeSeriesStatistic : Object, IProdmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the time series.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A keyword value pair which characterizes the underlying nature of this value. The key value may provide part of the unique identity of an instance of a concept or it may characterize the underlying concept. The key value will be defined within the specified keyword naming system. This is essentially a classification of the data in the specified system (keyword).
        /// </summary>
		[Description("A keyword value pair which characterizes the underlying nature of this value.  The key value may provide part of the unique identity of an instance of a concept or  it may characterize the underlying concept. The key value will be defined within the specified keyword naming system. This is essentially a classification of the data in the specified system (keyword).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "keywordValueStruct")]
		[XmlElement("key")]
        public List<KeywordValueStruct> Key {
            get {
                return keyField;
            } 
            set {
                keyField = value;
                NotifyPropertyChanged("Key");
            }
        }

         /// <summary>
         /// bool to indicate if Key has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeySpecified
         {
             get {
             if(keyField!=null)
                 return keyField.Count>0?true:false;
             else return false;
             }
         }
        private List<KeywordValueStruct> keyField; 

        /// <summary>
        /// If the time series is a measure then this specifies the unit of measure. The unit acronym must be chosen from the list that is valid for the measure class. If this is specified then the measure class must be specified.
        /// </summary>
		[StringLength(24)]
        [Description("If the time series is a measure then this specifies the unit of measure. The unit acronym must be chosen from the list that is valid for the measure class. If this is specified then the measure class must be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
		[XmlElement("unit")]
        public string Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string unitField; 

        /// <summary>
        /// Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys but it is important for allowing an application to understand the nature of a measure value even if it does not understand all of the underlying nature.
        /// </summary>
		[Description("Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys but it is important for allowing an application to understand the nature of a measure value even if it does not understand all of the underlying nature.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// measureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return measureClassSpecifiedField;
            } 
            set {
                measureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool measureClassSpecifiedField; 

        /// <summary>
        /// A comment about the time series.
        /// </summary>
		[StringLength(4000)]
        [Description("A comment about the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// The lower bound of the analyzed time range. Only data within the range was included in the analysis. The endpoint attribute specifies whether the data was inclusive or exclusive of this point.
        /// </summary>
		[Required]
        [Description("The lower bound of the analyzed time range. Only data within the range was included in the analysis. The endpoint attribute specifies whether the data was inclusive or exclusive of this point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointDateTime")]
		[XmlElement("dTimMin")]
        public EndpointDateTime DateTimeMin {
            get {
                return dTimMinField;
            } 
            set {
                dTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointDateTime dTimMinField; 

        /// <summary>
        /// The upper bound of the analyzed time range. Only data within the range was included in the analysis. The endpoint attribute specifies whether the data was inclusive or exclusive of this point.
        /// </summary>
		[Required]
        [Description("The upper bound of the analyzed time range. Only data within the range was included in the analysis. The endpoint attribute specifies whether the data was inclusive or exclusive of this point.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointDateTime")]
		[XmlElement("dTimMax")]
        public EndpointDateTime DateTimeMax {
            get {
                return dTimMaxField;
            } 
            set {
                dTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointDateTime dTimMaxField; 

        /// <summary>
        /// The minimum value within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.
        /// </summary>
		[Description("The minimum value within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("minimum")]
        public double? Minimum {
            get {
                return minimumField;
            } 
            set {
                minimumField = value;
                 this.MinimumSpecified = true;
                NotifyPropertyChanged("Minimum");
            }
        }

        private double? minimumField; 

        /// <summary>
        /// minimumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MinimumSpecified {
            get {
                return minimumSpecifiedField;
            } 
            set {
                minimumSpecifiedField = value;
                NotifyPropertyChanged("MinimumSpecified");
            }
        }

        private bool minimumSpecifiedField; 

        /// <summary>
        /// The maximum value within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.
        /// </summary>
		[Description("The maximum value within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("maximum")]
        public double? Maximum {
            get {
                return maximumField;
            } 
            set {
                maximumField = value;
                 this.MaximumSpecified = true;
                NotifyPropertyChanged("Maximum");
            }
        }

        private double? maximumField; 

        /// <summary>
        /// maximumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaximumSpecified {
            get {
                return maximumSpecifiedField;
            } 
            set {
                maximumSpecifiedField = value;
                NotifyPropertyChanged("MaximumSpecified");
            }
        }

        private bool maximumSpecifiedField; 

        /// <summary>
        /// The sum of all values within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.
        /// </summary>
		[Description("The sum of all values within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("sum")]
        public double? Sum {
            get {
                return sumField;
            } 
            set {
                sumField = value;
                 this.SumSpecified = true;
                NotifyPropertyChanged("Sum");
            }
        }

        private double? sumField; 

        /// <summary>
        /// sumSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SumSpecified {
            get {
                return sumSpecifiedField;
            } 
            set {
                sumSpecifiedField = value;
                NotifyPropertyChanged("SumSpecified");
            }
        }

        private bool sumSpecifiedField; 

        /// <summary>
        /// The arithmetic mean (sum divided by count) of all values within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.
        /// </summary>
		[Description("The arithmetic mean (sum divided by count) of all values within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("mean")]
        public double? Mean {
            get {
                return meanField;
            } 
            set {
                meanField = value;
                 this.MeanSpecified = true;
                NotifyPropertyChanged("Mean");
            }
        }

        private double? meanField; 

        /// <summary>
        /// meanSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeanSpecified {
            get {
                return meanSpecifiedField;
            } 
            set {
                meanSpecifiedField = value;
                NotifyPropertyChanged("MeanSpecified");
            }
        }

        private bool meanSpecifiedField; 

        /// <summary>
        /// The median value of all values within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.
        /// </summary>
		[Description("The median value of all values within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("median")]
        public double? Median {
            get {
                return medianField;
            } 
            set {
                medianField = value;
                 this.MedianSpecified = true;
                NotifyPropertyChanged("Median");
            }
        }

        private double? medianField; 

        /// <summary>
        /// medianSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MedianSpecified {
            get {
                return medianSpecifiedField;
            } 
            set {
                medianSpecifiedField = value;
                NotifyPropertyChanged("MedianSpecified");
            }
        }

        private bool medianSpecifiedField; 

        /// <summary>
        /// The standard deviation of all values within the time range of dTimMin to dTimMax. Element "unit" defines the unit of measure of this value.
        /// </summary>
		[Description("The standard deviation of all values within the time range of dTimMin to dTimMax. Element \"unit\" defines the unit of measure of this value.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("standardDeviation")]
        public double? StandardDeviation {
            get {
                return standardDeviationField;
            } 
            set {
                standardDeviationField = value;
                 this.StandardDeviationSpecified = true;
                NotifyPropertyChanged("StandardDeviation");
            }
        }

        private double? standardDeviationField; 

        /// <summary>
        /// standardDeviationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StandardDeviationSpecified {
            get {
                return standardDeviationSpecifiedField;
            } 
            set {
                standardDeviationSpecifiedField = value;
                NotifyPropertyChanged("StandardDeviationSpecified");
            }
        }

        private bool standardDeviationSpecifiedField; 

        /// <summary>
        /// Defines a value threshold window and the time duration where values (within the time range of dTimMin to dTimMax) were within that window.
        /// </summary>
		[Description("Defines a value threshold window and the time duration where values  (within the time range of dTimMin to dTimMax) were within that window.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_timeSeriesThreshold")]
		[XmlElement("timeAtThreshold")]
        public TimeSeriesThreshold TimeAtThreshold {
            get {
                return timeAtThresholdField;
            } 
            set {
                timeAtThresholdField = value;
                NotifyPropertyChanged("TimeAtThreshold");
            }
        }

        private TimeSeriesThreshold timeAtThresholdField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the keywordValueStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="keywordValueStruct", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the keywordValueStruct xsd type.")]
    public partial class KeywordValueStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the KeywordValueStruct class.
        /// </summary>
        public KeywordValueStruct() {}

        /// <summary>
        /// Initializes a new instance of the KeywordValueStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public KeywordValueStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The keyword within which the value is unique. The concept of a keyword is very close to the concept of a classification system.
        /// </summary>
		[Required]
        [Description("The keyword within which the value is unique. The concept of a keyword is very close to the concept of a classification system.")]
        [EnergisticsDataTypeAttribute(DataType = "TimeSeriesKeyword")]
        [XmlAttribute("keyword")]
		        public string KeywordSurrogate
        {
            get {
                     if(Keyword==null)  return null;
                     else return Keyword.Name; }
            set { 

                 if(this.Keyword== null)
                 Keyword= new TimeSeriesKeyword(value);
                 else
                   Keyword.Name = value; }
        }
        /// <summary>
        /// The keyword within which the value is unique. The concept of a keyword is very close to the concept of a classification system.
        /// </summary>
        [XmlIgnore]

        public TimeSeriesKeyword Keyword {
            get {
                return keywordField;
            } 
            set {
                keywordField = value;
                NotifyPropertyChanged("Keyword");
            }
        }

        private TimeSeriesKeyword keywordField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(4000)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timeSeriesStringSample xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timeSeriesStringSample", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the timeSeriesStringSample xsd type.")]
    public partial class TimeSeriesStringSample : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeSeriesStringSample class.
        /// </summary>
        public TimeSeriesStringSample() {}

        /// <summary>
        /// Initializes a new instance of the TimeSeriesStringSample class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimeSeriesStringSample(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        ///  The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTime or value or both must be specified. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. 
        /// </summary>
		[Description("The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTime or value or both must be specified. If the 'status' attribute is absent and the value is not \"NaN\", the data value can be assumed to be good with no restrictions.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		        public string StatusSurrogate
        {
            get {
                     if(Status==null)  return null;
                     else return Status.Name; }
            set { 

                 if(this.Status== null)
                 Status= new ValueStatus(value);
                 else
                   Status.Name = value; }
        }
        /// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
        [XmlIgnore]

        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the timeSeriesDoubleSample xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="timeSeriesDoubleSample", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the timeSeriesDoubleSample xsd type.")]
    public partial class TimeSeriesDoubleSample : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the TimeSeriesDoubleSample class.
        /// </summary>
        public TimeSeriesDoubleSample() {}

        /// <summary>
        /// Initializes a new instance of the TimeSeriesDoubleSample class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public TimeSeriesDoubleSample(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        ///  The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTime or value or both must be specified. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. 
        /// </summary>
		[Description("The date and time at which the value applies. If no time is specified then the value is static and only one sample can be defined. Either dTime or value or both must be specified. If the 'status' attribute is absent and the value is not \"NaN\", the data value can be assumed to be good with no restrictions.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        [XmlAttribute("dTim")]
		
        public DateTime DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		        public string StatusSurrogate
        {
            get {
                     if(Status==null)  return null;
                     else return Status.Name; }
            set { 

                 if(this.Status== null)
                 Status= new ValueStatus(value);
                 else
                   Status.Name = value; }
        }
        /// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
        [XmlIgnore]

        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a PRODML Time Series Data object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_timeSeriesData", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The non-contextual content of a PRODML Time Series Data object.")]
    public partial class TimeSeriesData : Object, IProdmlDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the time series. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A keyword value pair which characterizes the underlying nature of this value. The key value may provide part of the unique identity of an instance of a concept or it may characterize the underlying concept. The key value will be defined within the specified keyword naming system. This is essentially a classification of the data in the specified system (keyword).
        /// </summary>
		[Description("A keyword value pair which characterizes the underlying nature of this value.  The key value may provide part of the unique identity of an instance of a concept or  it may characterize the underlying concept. The key value will be defined within the specified keyword naming system. This is essentially a classification of the data in the specified system (keyword).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "keywordValueStruct")]
		[XmlElement("key")]
        public List<KeywordValueStruct> Key {
            get {
                return keyField;
            } 
            set {
                keyField = value;
                NotifyPropertyChanged("Key");
            }
        }

         /// <summary>
         /// bool to indicate if Key has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool KeySpecified
         {
             get {
             if(keyField!=null)
                 return keyField.Count>0?true:false;
             else return false;
             }
         }
        private List<KeywordValueStruct> keyField; 

        /// <summary>
        /// If the time series is a measure then this specifies the unit of measure. The unit acronym must be chosen from the list that is valid for the measure class. If this is specified then the measure class must be specified.
        /// </summary>
		[StringLength(24)]
        [Description("If the time series is a measure then this specifies the unit of measure. The unit acronym must be chosen from the list that is valid for the measure class. If this is specified then the measure class must be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
		[XmlElement("unit")]
        public string Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string unitField; 

        /// <summary>
        /// Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys but it is important for allowing an application to understand the nature of a measure value even if it does not understand all of the underlying nature.
        /// </summary>
		[Description("Defines the type of measure that the time series represents. If this is specified then unit must be specified. This may be redundant to some information in the keys but it is important for allowing an application to understand the nature of a measure value even if it does not understand all of the underlying nature.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// measureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return measureClassSpecifiedField;
            } 
            set {
                measureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool measureClassSpecifiedField; 

        /// <summary>
        /// A comment about the time series.
        /// </summary>
		[StringLength(4000)]
        [Description("A comment about the time series.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// A single double value in the time series.
        /// </summary>
        [ComponentElement]
        [XmlElement("doubleValue")]
        [EnergisticsDataTypeAttribute(DataType = "timeSeriesDoubleSample")]
        public TimeSeriesDoubleSample[] DoubleValue {
            get {
                return doubleValueField;
            } 
            set {
                if (value != null && StringValueSpecified) throw new Exception("Cannot set property DoubleValue when property StringValue is already set");
                doubleValueField = value;
                DoubleValueSpecified = (value!=null);
                NotifyPropertyChanged("DoubleValue");
            }
        }

        private TimeSeriesDoubleSample[] doubleValueField; 
        private bool doubleValueSpecified = false; 

        /// <summary>
        /// bool to indicate if DoubleValue has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DoubleValueSpecified
        {
            get {
                return doubleValueSpecified;
            }
            set {
                doubleValueSpecified= value;
            }
        }

        /// <summary>
        /// A single string value in the time series.
        /// </summary>
        [ComponentElement]
        [XmlElement("stringValue")]
        [EnergisticsDataTypeAttribute(DataType = "timeSeriesStringSample")]
        public TimeSeriesStringSample[] StringValue {
            get {
                return stringValueField;
            } 
            set {
                if (value != null && DoubleValueSpecified) throw new Exception("Cannot set property StringValue when property DoubleValue is already set");
                stringValueField = value;
                StringValueSpecified = (value!=null);
                NotifyPropertyChanged("StringValue");
            }
        }

        private TimeSeriesStringSample[] stringValueField; 
        private bool stringValueSpecified = false; 

        /// <summary>
        /// bool to indicate if StringValue has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StringValueSpecified
        {
            get {
                return stringValueSpecified;
            }
            set {
                stringValueSpecified= value;
            }
        }


        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Captures information about an event related to a product balance.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeBalanceEvent", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Captures information about an event related to a product balance.")]
    public partial class ProductVolumeBalanceEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date of the event.
        /// </summary>
		[Required]
        [Description("The date of the event.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("date", DataType="date")]
        public DateTime? Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? dateField; 

        /// <summary>
        /// The kind of event.
        /// </summary>
		[Required]
        [Description("The kind of event.")]
        [EnergisticsDataTypeAttribute(DataType = "BalanceEventKind")]
		[XmlElement("kind")]
        public BalanceEventKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private BalanceEventKind kindField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume Balance Detail Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeBalanceDetail", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume Balance Detail Schema.")]
    public partial class ProductVolumeBalanceDetail : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the business unit which owns the product.
        /// </summary>
		[Required]
        [Description("A pointer to the business unit which owns the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("owner")]
        public RefNameString Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private RefNameString ownerField; 

        /// <summary>
        /// Points to the business unit from which the product originated. 
        /// </summary>
		[Description("Points to the business unit from which the product originated.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("sourceUnit")]
        public RefNameString SourceUnit {
            get {
                return sourceUnitField;
            } 
            set {
                sourceUnitField = value;
                NotifyPropertyChanged("SourceUnit");
            }
        }

        private RefNameString sourceUnitField; 

        /// <summary>
        /// The owner's share of the product.
        /// </summary>
		[Description("The owner's share of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("share")]
        public VolumePerVolumeMeasurePercent Share {
            get {
                return shareField;
            } 
            set {
                shareField = value;
                NotifyPropertyChanged("Share");
            }
        }

        private VolumePerVolumeMeasurePercent shareField; 

        /// <summary>
        /// An account identifier for the balance.
        /// </summary>
		[StringLength(40)]
        [Description("An account identifier for the balance.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("accountNumber")]
        public string AccountNumber {
            get {
                return accountNumberField;
            } 
            set {
                accountNumberField = value;
                NotifyPropertyChanged("AccountNumber");
            }
        }

        private string accountNumberField; 

        /// <summary>
        /// A dated event related to the balance.
        /// </summary>
		[Description("A dated event related to the balance.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeBalanceEvent")]
		[XmlElement("event")]
        public List<ProductVolumeBalanceEvent> Event {
            get {
                return eventField;
            } 
            set {
                eventField = value;
                NotifyPropertyChanged("Event");
            }
        }

         /// <summary>
         /// bool to indicate if Event has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EventSpecified
         {
             get {
             if(eventField!=null)
                 return eventField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBalanceEvent> eventField; 

        /// <summary>
        /// The volume of the fluid, possibly corrected to specific conditions of temperature and pressure. Different volumes may be defined at different conditions but they should all represent the same mass of material.
        /// </summary>
		[Description("The volume of the fluid, possibly corrected to specific  conditions of temperature and pressure. Different volumes may be defined at different conditions but they should all represent the same mass of material.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_volumeValue")]
		[XmlElement("volumeValue")]
        public List<VolumeValue> VolumeValue {
            get {
                return volumeValueField;
            } 
            set {
                volumeValueField = value;
                NotifyPropertyChanged("VolumeValue");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeValueSpecified
         {
             get {
             if(volumeValueField!=null)
                 return volumeValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeValue> volumeValueField; 

        /// <summary>
        /// A pointer to a fluid sample analysis result object that is relevant to the balance. This sample may have been acquired previous to or after this period and is used for determining the allocated characteristics.
        /// </summary>
		[Description("A pointer to a fluid sample analysis result object that is relevant to the balance.  This sample may have been acquired previous to or after this period and is  used for determining the allocated characteristics.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("sampleAnalysisResult")]
        public List<RefNameString> SampleAnalysisResult {
            get {
                return sampleAnalysisResultField;
            } 
            set {
                sampleAnalysisResultField = value;
                NotifyPropertyChanged("SampleAnalysisResult");
            }
        }

         /// <summary>
         /// bool to indicate if SampleAnalysisResult has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SampleAnalysisResultSpecified
         {
             get {
             if(sampleAnalysisResultField!=null)
                 return sampleAnalysisResultField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefNameString> sampleAnalysisResultField; 

        /// <summary>
        /// The relative amount of a component product in the product.
        /// </summary>
		[Description("The relative amount of a component product in the product.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeComponentContent")]
		[XmlElement("componentContent")]
        public List<ProductVolumeComponentContent> ComponentContent {
            get {
                return componentContentField;
            } 
            set {
                componentContentField = value;
                NotifyPropertyChanged("ComponentContent");
            }
        }

         /// <summary>
         /// bool to indicate if ComponentContent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ComponentContentSpecified
         {
             get {
             if(componentContentField!=null)
                 return componentContentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeComponentContent> componentContentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A possibly temperature and pressure corrected volume value.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_volumeValue", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A possibly temperature and pressure corrected volume value.")]
    public partial class VolumeValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The volume of the product. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.
        /// </summary>
		[Required]
        [Description("The volume of the product. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volume")]
        public VolumeQualifiedMeasure Volume {
            get {
                return volumeField;
            } 
            set {
                volumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeQualifiedMeasure volumeField; 

        /// <summary>
        /// The amount of heat which would be released by the complete combustion in air of the above volume of product. This is considered to be a condition of measurement (i.e., the volume may have been converted to this condition).
        /// </summary>
		[Description("The amount of heat which would be released by the complete combustion in air of the above volume of product.  This is considered to be a condition of measurement (i.e., the volume may have been converted to this condition).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("grossCalorificValue")]
        public ModulusOfCompressionMeasure GrossCalorificValue {
            get {
                return grossCalorificValueField;
            } 
            set {
                grossCalorificValueField = value;
                NotifyPropertyChanged("GrossCalorificValue");
            }
        }

        private ModulusOfCompressionMeasure grossCalorificValueField; 

        /// <summary>
        /// Defines the standard temperature and pressure to which the volume has been corrected. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the procuctVolume root.
        /// </summary>
        [XmlElement("standardTempPres")]
        [EnergisticsDataTypeAttribute(DataType = "StandardCondition")]
        public StandardCondition StandardTempPres {
            get {
                return standardTempPresField;
            } 
            set {
                if (value != null && PresSpecified) throw new Exception("Cannot set property StandardTempPres when property Pres is already set");
                if (value != null && TempSpecified) throw new Exception("Cannot set property StandardTempPres when property Temp is already set");
                standardTempPresField = value;
                StandardTempPresSpecified = (value!=null);
                NotifyPropertyChanged("StandardTempPres");
            }
        }

        private StandardCondition standardTempPresField; 
        private bool standardTempPresSpecified = false; 

        /// <summary>
        /// bool to indicate if StandardTempPres has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StandardTempPresSpecified
        {
            get {
                return standardTempPresSpecified;
            }
            set {
                standardTempPresSpecified= value;
            }
        }

        /// <summary>
        /// The temperature to which the volume has been corrected. If given, then a pressure must also be given. Common standard temperatures are: 0 degC, 15 degC, 60 degF. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root. If you set this property, you must also set Pres.
        /// </summary>
        [ComponentElement]
        [XmlElement("temp")]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return tempField;
            } 
            set {
                if (value != null && StandardTempPresSpecified) throw new Exception("Cannot set property Temp when property StandardTempPres is already set");
                tempField = value;
                TempSpecified = (value!=null);
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure tempField; 
        private bool tempSpecified = false; 

        /// <summary>
        /// bool to indicate if Temp has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TempSpecified
        {
            get {
                return tempSpecified;
            }
            set {
                tempSpecified= value;
            }
        }

        /// <summary>
        /// The pressure to which the volume has been corrected. If given, then a temperature must also be given. Common standard pressures are: 1 atm and 14.696 psi (which are equivalent). If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root. If you set this property, you must also set Temp.
        /// </summary>
        [ComponentElement]
        [XmlElement("pres")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                if (value != null && StandardTempPresSpecified) throw new Exception("Cannot set property Pres when property StandardTempPres is already set");
                presField = value;
                PresSpecified = (value!=null);
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 
        private bool presSpecified = false; 

        /// <summary>
        /// bool to indicate if Pres has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PresSpecified
        {
            get {
                return presSpecified;
            }
            set {
                presSpecified= value;
            }
        }


        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume Component Content Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeComponentContent", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume Component Content Component Schema.")]
    public partial class ProductVolumeComponentContent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of product whose relative content is being described. This should be a specific component (e.g., water) rather than a phase (e.g., aqueous).
        /// </summary>
		[Required]
        [Description("The type of product whose relative content is being described. This should be a specific component (e.g., water) rather than a phase (e.g., aqueous).")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("kind")]
        public ReportingProduct Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingProduct kindField; 

        /// <summary>
        /// The type of product to which the product is being compared. If not given then the product is being compared against the overall flow stream.
        /// </summary>
		[Description("The type of product to which the product is being compared. If not given then the product is being compared against the overall flow stream.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("referenceKind")]
        public ReportingProduct ReferenceKind {
            get {
                return referenceKindField;
            } 
            set {
                referenceKindField = value;
                 this.ReferenceKindSpecified = true;
                NotifyPropertyChanged("ReferenceKind");
            }
        }

        private ReportingProduct referenceKindField; 

        /// <summary>
        /// referenceKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReferenceKindSpecified {
            get {
                return referenceKindSpecifiedField;
            } 
            set {
                referenceKindSpecifiedField = value;
                NotifyPropertyChanged("ReferenceKindSpecified");
            }
        }

        private bool referenceKindSpecifiedField; 

        /// <summary>
        /// gor property
        /// </summary>
		[Description("Gas oil ratio. The ratio between the total produced gas volume and the total produced oil volume including oil and gas volumes used on the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gor")]
        public VolumePerVolumeMeasure Gor {
            get {
                return gorField;
            } 
            set {
                gorField = value;
                NotifyPropertyChanged("Gor");
            }
        }

        private VolumePerVolumeMeasure gorField; 

        /// <summary>
        /// gorMTD property
        /// </summary>
		[Description("Gas oil ratio month to date. The gas oil ratio from the beginning of the month  to the end of the reporting priod.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gorMTD")]
        public VolumePerVolumeMeasure GorMTD {
            get {
                return gorMTDField;
            } 
            set {
                gorMTDField = value;
                NotifyPropertyChanged("GorMTD");
            }
        }

        private VolumePerVolumeMeasure gorMTDField; 

        /// <summary>
        /// gasLiquidRatio property
        /// </summary>
		[Description("The volumetric ratio of gas to liquid for all products in the whole flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasLiquidRatio")]
        public VolumePerVolumeMeasure GasLiquidRatio {
            get {
                return gasLiquidRatioField;
            } 
            set {
                gasLiquidRatioField = value;
                NotifyPropertyChanged("GasLiquidRatio");
            }
        }

        private VolumePerVolumeMeasure gasLiquidRatioField; 

        /// <summary>
        /// waterConcMass property
        /// </summary>
		[Description("Water concentration mass basis.  The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("waterConcMass")]
        public MassConcentrationMeasure WaterConcMass {
            get {
                return waterConcMassField;
            } 
            set {
                waterConcMassField = value;
                NotifyPropertyChanged("WaterConcMass");
            }
        }

        private MassConcentrationMeasure waterConcMassField; 

        /// <summary>
        /// waterConcVol property
        /// </summary>
		[Description("Water concentration volume basis. The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("waterConcVol")]
        public VolumePerVolumeMeasure WaterConcVol {
            get {
                return waterConcVolField;
            } 
            set {
                waterConcVolField = value;
                NotifyPropertyChanged("WaterConcVol");
            }
        }

        private VolumePerVolumeMeasure waterConcVolField; 

        /// <summary>
        /// atmosphere property
        /// </summary>
		[Description("The average atmospheric pressure during the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("atmosphere")]
        public PressureMeasure Atmosphere {
            get {
                return atmosphereField;
            } 
            set {
                atmosphereField = value;
                NotifyPropertyChanged("Atmosphere");
            }
        }

        private PressureMeasure atmosphereField; 

        /// <summary>
        /// volumeValue property
        /// </summary>
		[Description("The volume of the fluid, possibly corrected to specific  conditions of temperature and pressure. A positive value for an inlet port indicates flow into the port. A negative value for an inlet port indicates flow out of the port. A positive value for an outlet port indicates flow out of the port. A negative value for an outlet port indicates flow into of the port. This convention is designed such that a positive sign indicates an expected condition based on the intended port direction while a negative sign indicates an anomolous condition. If more than one value is specified then all values must represent the same  opinion of the volume (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_volumeValue")]
		[XmlElement("volumeValue")]
        public List<VolumeValue> VolumeValue {
            get {
                return volumeValueField;
            } 
            set {
                volumeValueField = value;
                NotifyPropertyChanged("VolumeValue");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeValueSpecified
         {
             get {
             if(volumeValueField!=null)
                 return volumeValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeValue> volumeValueField; 

        /// <summary>
        /// volume property
        /// </summary>
		[Description("DEPRECATED. Use volumeValue for new work. The uncorrected volume of the product. The sign of the value should conform to the above description of volumeValue. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volume")]
        public VolumeQualifiedMeasure Volume {
            get {
                return volumeField;
            } 
            set {
                volumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeQualifiedMeasure volumeField; 

        /// <summary>
        /// volumeStd property
        /// </summary>
		[Description("DEPRECATED. Use volumeValue for new work. The volume of the fluid, corrected to standard  conditions of temperature and pressure.  The sign of the value should conform to the above description of volumeValue. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volumeStd")]
        public VolumeQualifiedMeasure VolumeStd {
            get {
                return volumeStdField;
            } 
            set {
                volumeStdField = value;
                NotifyPropertyChanged("VolumeStd");
            }
        }

        private VolumeQualifiedMeasure volumeStdField; 

        /// <summary>
        /// flowRateValue property
        /// </summary>
		[Description("The flow rate of the product, possibly corrected to specific  conditions of temperature and pressure. The sign of the value should conform to the above description of volumeValue. If more than one value is specified then all values must represent the same  opinion of the flow rate (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_flowRateValue")]
		[XmlElement("flowRateValue")]
        public List<FlowRateValue> FlowRateValue {
            get {
                return flowRateValueField;
            } 
            set {
                flowRateValueField = value;
                NotifyPropertyChanged("FlowRateValue");
            }
        }

         /// <summary>
         /// bool to indicate if FlowRateValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FlowRateValueSpecified
         {
             get {
             if(flowRateValueField!=null)
                 return flowRateValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<FlowRateValue> flowRateValueField; 

        /// <summary>
        /// flowRate property
        /// </summary>
		[Description("DEPRECATED. Use flowRateValue for new work. The flow rate of the product. The sign of the value should conform to the above description of volume. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateQualifiedMeasure")]
		[XmlElement("flowRate")]
        public VolumeFlowRateQualifiedMeasure FlowRate {
            get {
                return flowRateField;
            } 
            set {
                flowRateField = value;
                NotifyPropertyChanged("FlowRate");
            }
        }

        private VolumeFlowRateQualifiedMeasure flowRateField; 

        /// <summary>
        /// temp property
        /// </summary>
		[Description("Temperature of the port. Specifying the temperature here (as opposed to in Period) implies that the temperature is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("temp")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return tempField;
            } 
            set {
                tempField = value;
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure tempField; 

        /// <summary>
        /// pres property
        /// </summary>
		[Description("Pressure of the port. Specifying the pressure here (as opposed to in Period) implies that the pressure is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pres")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                presField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 

        /// <summary>
        /// absoluteMinPres property
        /// </summary>
		[Description("Absolute minimum pressure before the system will give an alarm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("absoluteMinPres")]
        public PressureMeasure AbsoluteMinPres {
            get {
                return absoluteMinPresField;
            } 
            set {
                absoluteMinPresField = value;
                NotifyPropertyChanged("AbsoluteMinPres");
            }
        }

        private PressureMeasure absoluteMinPresField; 

        /// <summary>
        /// portDiff property
        /// </summary>
		[Description("The internal differences between this port and one other port on this unit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumePortDifference")]
		[XmlElement("portDiff")]
        public List<ProductVolumePortDifference> PortDiff {
            get {
                return portDiffField;
            } 
            set {
                portDiffField = value;
                NotifyPropertyChanged("PortDiff");
            }
        }

         /// <summary>
         /// bool to indicate if PortDiff has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortDiffSpecified
         {
             get {
             if(portDiffField!=null)
                 return portDiffField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumePortDifference> portDiffField; 

        /// <summary>
        /// mass property
        /// </summary>
		[Description("The mass of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("mass")]
        public MassMeasure Mass {
            get {
                return massField;
            } 
            set {
                massField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure massField; 

        /// <summary>
        /// work property
        /// </summary>
		[Description("The electrical energy represented by the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "workMeasure")]
		[XmlElement("work")]
        public WorkMeasure Work {
            get {
                return workField;
            } 
            set {
                workField = value;
                NotifyPropertyChanged("Work");
            }
        }

        private WorkMeasure workField; 

        /// <summary>
        /// efficiency property
        /// </summary>
		[Description("The actual volume divided by the potential volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("efficiency")]
        public VolumePerVolumeMeasure Efficiency {
            get {
                return efficiencyField;
            } 
            set {
                efficiencyField = value;
                NotifyPropertyChanged("Efficiency");
            }
        }

        private VolumePerVolumeMeasure efficiencyField; 

        /// <summary>
        /// rvp property
        /// </summary>
		[Description("Reid vapor pressure of the product. The absolute vapor pressure of volatile crude oil and  volatile petroleum liquids, except liquefied petroleum gases, as  determined in  accordance with American Society for Testing and Materials under the designation ASTM D323-56.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvp")]
        public PressureMeasure Rvp {
            get {
                return rvpField;
            } 
            set {
                rvpField = value;
                NotifyPropertyChanged("Rvp");
            }
        }

        private PressureMeasure rvpField; 

        /// <summary>
        /// tvp property
        /// </summary>
		[Description("True vapor pressure of the product. The equilibrium partial pressure exerted by a petroleum liquid  as determined in accordance with standard methods.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("tvp")]
        public PressureMeasure Tvp {
            get {
                return tvpField;
            } 
            set {
                tvpField = value;
                NotifyPropertyChanged("Tvp");
            }
        }

        private PressureMeasure tvpField; 

        /// <summary>
        /// bsw property
        /// </summary>
		[Description("Basic sediment and water is measured from a liquid sample  of the production stream. It includes free water, sediment and emulsion and  is measured as a volume percentage of the production stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bsw")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return bswField;
            } 
            set {
                bswField = value;
                NotifyPropertyChanged("Bsw");
            }
        }

        private VolumePerVolumeMeasure bswField; 

        /// <summary>
        /// bswPrevious property
        /// </summary>
		[Description("The basic sediment and water as measured on the  previous reporting period (e.g., day).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bswPrevious")]
        public VolumePerVolumeMeasure BswPrevious {
            get {
                return bswPreviousField;
            } 
            set {
                bswPreviousField = value;
                NotifyPropertyChanged("BswPrevious");
            }
        }

        private VolumePerVolumeMeasure bswPreviousField; 

        /// <summary>
        /// densityValue property
        /// </summary>
		[Description("The density of the fluid, possibly corrected to specific  conditions of temperature and pressure. If more than one value is specified then all values must represent the same  opinion of the density (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_densityValue")]
		[XmlElement("densityValue")]
        public List<DensityValue> DensityValue {
            get {
                return densityValueField;
            } 
            set {
                densityValueField = value;
                NotifyPropertyChanged("DensityValue");
            }
        }

         /// <summary>
         /// bool to indicate if DensityValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DensityValueSpecified
         {
             get {
             if(densityValueField!=null)
                 return densityValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<DensityValue> densityValueField; 

        /// <summary>
        /// density property
        /// </summary>
		[Description("DEPRECATED. Use densityValue for new work. The density of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// densityFlowRate property
        /// </summary>
		[Description("The mass basis flow rate of the product. This is used for things like a sand component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massFlowRateMeasure")]
		[XmlElement("densityFlowRate")]
        public MassFlowRateMeasure DensityFlowRate {
            get {
                return densityFlowRateField;
            } 
            set {
                densityFlowRateField = value;
                NotifyPropertyChanged("DensityFlowRate");
            }
        }

        private MassFlowRateMeasure densityFlowRateField; 

        /// <summary>
        /// densityStd property
        /// </summary>
		[Description("DEPRECATED. Use densityValue for new work. The density of the product after it has been  corrected to standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStd")]
        public DensityMeasure DensityStd {
            get {
                return densityStdField;
            } 
            set {
                densityStdField = value;
                NotifyPropertyChanged("DensityStd");
            }
        }

        private DensityMeasure densityStdField; 

        /// <summary>
        /// concentration property
        /// </summary>
		[Description("The concentration of the product as a volume  percentage of the product stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("concentration")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return concentrationField;
            } 
            set {
                concentrationField = value;
                NotifyPropertyChanged("Concentration");
            }
        }

        private VolumePerVolumeMeasure concentrationField; 

        /// <summary>
        /// molecularWeight property
        /// </summary>
		[Description("The molecular weight of the product.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("molecularWeight")]
        public double? MolecularWeight {
            get {
                return molecularWeightField;
            } 
            set {
                molecularWeightField = value;
                 this.MolecularWeightSpecified = true;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private double? molecularWeightField; 

        /// <summary>
        /// molecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MolecularWeightSpecified {
            get {
                return molecularWeightSpecifiedField;
            } 
            set {
                molecularWeightSpecifiedField = value;
                NotifyPropertyChanged("MolecularWeightSpecified");
            }
        }

        private bool molecularWeightSpecifiedField; 

        /// <summary>
        /// weightPercent property
        /// </summary>
		[Description("The weight fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("weightPercent")]
        public MassConcentrationMeasurePercent WeightPercent {
            get {
                return weightPercentField;
            } 
            set {
                weightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassConcentrationMeasurePercent weightPercentField; 

        /// <summary>
        /// molePercent property
        /// </summary>
		[Description("The mole fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "molarFractionMeasurePercent")]
		[XmlElement("molePercent")]
        public MolarFractionMeasurePercent MolePercent {
            get {
                return molePercentField;
            } 
            set {
                molePercentField = value;
                NotifyPropertyChanged("MolePercent");
            }
        }

        private MolarFractionMeasurePercent molePercentField; 

        /// <summary>
        /// moleAmt property
        /// </summary>
		[Description("The molar amount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "amountOfSubstanceMeasure")]
		[XmlElement("moleAmt")]
        public AmountOfSubstanceMeasure MoleAmt {
            get {
                return moleAmtField;
            } 
            set {
                moleAmtField = value;
                NotifyPropertyChanged("MoleAmt");
            }
        }

        private AmountOfSubstanceMeasure moleAmtField; 

        /// <summary>
        /// sg property
        /// </summary>
		[Description("The specific gravity of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("sg")]
        public DimensionlessMeasure SG {
            get {
                return sgField;
            } 
            set {
                sgField = value;
                NotifyPropertyChanged("SG");
            }
        }

        private DimensionlessMeasure sgField; 

        /// <summary>
        /// hcDewpoint property
        /// </summary>
		[Description("The temperature at which the heavier hydrocarbons come out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("hcDewpoint")]
        public ThermodynamicTemperatureMeasure HCDewpoint {
            get {
                return hcDewpointField;
            } 
            set {
                hcDewpointField = value;
                NotifyPropertyChanged("HCDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure hcDewpointField; 

        /// <summary>
        /// waterDewpoint property
        /// </summary>
		[Description("The temperature at which the first water comes out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("waterDewpoint")]
        public ThermodynamicTemperatureMeasure WaterDewpoint {
            get {
                return waterDewpointField;
            } 
            set {
                waterDewpointField = value;
                NotifyPropertyChanged("WaterDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure waterDewpointField; 

        /// <summary>
        /// wobbeIndex property
        /// </summary>
		[Description("Wobbe Index. A number which indicates interchangeability of fuel gasses and is obtained by dividing the heating value of a gas by the  square root of its specific gravity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("wobbeIndex")]
        public ModulusOfCompressionMeasure WobbeIndex {
            get {
                return wobbeIndexField;
            } 
            set {
                wobbeIndexField = value;
                NotifyPropertyChanged("WobbeIndex");
            }
        }

        private ModulusOfCompressionMeasure wobbeIndexField; 

        /// <summary>
        /// grossCalorificValueStd property
        /// </summary>
		[Description("The amount of heat which would be released by the complete combustion in air of a specific quantity of product at standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("grossCalorificValueStd")]
        public ModulusOfCompressionMeasure GrossCalorificValueStd {
            get {
                return grossCalorificValueStdField;
            } 
            set {
                grossCalorificValueStdField = value;
                NotifyPropertyChanged("GrossCalorificValueStd");
            }
        }

        private ModulusOfCompressionMeasure grossCalorificValueStdField; 

        /// <summary>
        /// rvpStabilizedCrude property
        /// </summary>
		[Description("Reid vapor pressure of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvpStabilizedCrude")]
        public PressureMeasure RvpStabilizedCrude {
            get {
                return rvpStabilizedCrudeField;
            } 
            set {
                rvpStabilizedCrudeField = value;
                NotifyPropertyChanged("RvpStabilizedCrude");
            }
        }

        private PressureMeasure rvpStabilizedCrudeField; 

        /// <summary>
        /// bswStabilizedCrude property
        /// </summary>
		[Description("Basic sediment and water content in stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bswStabilizedCrude")]
        public VolumePerVolumeMeasure BswStabilizedCrude {
            get {
                return bswStabilizedCrudeField;
            } 
            set {
                bswStabilizedCrudeField = value;
                NotifyPropertyChanged("BswStabilizedCrude");
            }
        }

        private VolumePerVolumeMeasure bswStabilizedCrudeField; 

        /// <summary>
        /// densityStabilizedCrude property
        /// </summary>
		[Description("The density of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStabilizedCrude")]
        public DensityMeasure DensityStabilizedCrude {
            get {
                return densityStabilizedCrudeField;
            } 
            set {
                densityStabilizedCrudeField = value;
                NotifyPropertyChanged("DensityStabilizedCrude");
            }
        }

        private DensityMeasure densityStabilizedCrudeField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A possibly temperature and pressure corrected flow rate value.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_flowRateValue", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A possibly temperature and pressure corrected flow rate value.")]
    public partial class FlowRateValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The flow rate of the product. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.
        /// </summary>
		[Required]
        [Description("The flow rate of the product. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateQualifiedMeasure")]
		[XmlElement("flowRate")]
        public VolumeFlowRateQualifiedMeasure FlowRate {
            get {
                return flowRateField;
            } 
            set {
                flowRateField = value;
                NotifyPropertyChanged("FlowRate");
            }
        }

        private VolumeFlowRateQualifiedMeasure flowRateField; 

        /// <summary>
        /// Defines the standard temperature and pressure to which the flowRate has been corrected. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the procuctVolume root.
        /// </summary>
        [XmlElement("standardTempPres")]
        [EnergisticsDataTypeAttribute(DataType = "StandardCondition")]
        public StandardCondition StandardTempPres {
            get {
                return standardTempPresField;
            } 
            set {
                if (value != null && PresSpecified) throw new Exception("Cannot set property StandardTempPres when property Pres is already set");
                if (value != null && TempSpecified) throw new Exception("Cannot set property StandardTempPres when property Temp is already set");
                standardTempPresField = value;
                StandardTempPresSpecified = (value!=null);
                NotifyPropertyChanged("StandardTempPres");
            }
        }

        private StandardCondition standardTempPresField; 
        private bool standardTempPresSpecified = false; 

        /// <summary>
        /// bool to indicate if StandardTempPres has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StandardTempPresSpecified
        {
            get {
                return standardTempPresSpecified;
            }
            set {
                standardTempPresSpecified= value;
            }
        }

        /// <summary>
        /// The temperature to which the flowRate has been corrected. If given, then a pressure must also be given. Common standard temperatures are: 0 degC, 15 degC, 60 degF. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root. If you set this property, you must also set Pres.
        /// </summary>
        [ComponentElement]
        [XmlElement("temp")]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return tempField;
            } 
            set {
                if (value != null && StandardTempPresSpecified) throw new Exception("Cannot set property Temp when property StandardTempPres is already set");
                tempField = value;
                TempSpecified = (value!=null);
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure tempField; 
        private bool tempSpecified = false; 

        /// <summary>
        /// bool to indicate if Temp has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TempSpecified
        {
            get {
                return tempSpecified;
            }
            set {
                tempSpecified= value;
            }
        }

        /// <summary>
        /// The pressure to which the flowRate has been corrected. If given, then a temperature must also be given. Common standard pressures are: 1 atm and 14.696 psi (which are equivalent). If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root. If you set this property, you must also set Temp.
        /// </summary>
        [ComponentElement]
        [XmlElement("pres")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                if (value != null && StandardTempPresSpecified) throw new Exception("Cannot set property Pres when property StandardTempPres is already set");
                presField = value;
                PresSpecified = (value!=null);
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 
        private bool presSpecified = false; 

        /// <summary>
        /// bool to indicate if Pres has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PresSpecified
        {
            get {
                return presSpecified;
            }
            set {
                presSpecified= value;
            }
        }


        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_productVolumePortDifference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumePortDifference", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_productVolumePortDifference xsd type.")]
    public partial class ProductVolumePortDifference : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A port on the other end of an internal connection. This should always be specified if a Product Flow Network is being referenced by this report. If this is not specified then there is an assumption that there is only one other port for the unit. For example, if this end of the connection represents an inlet port then the implied other end is the outlet port for the unit.
        /// </summary>
		[Description("A port on the other end of an internal connection. This should always be specified if a Product Flow Network is being referenced by this report. If this is not specified then there is an assumption that there is only one other port for the unit. For example, if this end of the connection represents an inlet port then the implied other end is the outlet port for the unit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("port")]
        public RefNameString Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private RefNameString portField; 

        /// <summary>
        /// The differential pressure between the ports.
        /// </summary>
		[Description("The differential pressure between the ports.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("presDiff")]
        public PressureMeasure PresDiff {
            get {
                return presDiffField;
            } 
            set {
                presDiffField = value;
                NotifyPropertyChanged("PresDiff");
            }
        }

        private PressureMeasure presDiffField; 

        /// <summary>
        /// The differential temperature between the ports.
        /// </summary>
		[Description("The differential temperature between the ports.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempDiff")]
        public ThermodynamicTemperatureMeasure TempDiff {
            get {
                return tempDiffField;
            } 
            set {
                tempDiffField = value;
                NotifyPropertyChanged("TempDiff");
            }
        }

        private ThermodynamicTemperatureMeasure tempDiffField; 

        /// <summary>
        /// The size of the choke. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.
        /// </summary>
		[Description("The size of the choke. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("chokeSize")]
        public LengthMeasure ChokeSize {
            get {
                return chokeSizeField;
            } 
            set {
                chokeSizeField = value;
                NotifyPropertyChanged("ChokeSize");
            }
        }

        private LengthMeasure chokeSizeField; 

        /// <summary>
        /// The relative size of the choke restriction. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.
        /// </summary>
		[Description("The relative size of the choke restriction. This characterizes the overall unit with respect to the flow restriction between the ports. The restriction might be implemented using a valve or an actual choke.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthPerLengthMeasure")]
		[XmlElement("chokeRelative")]
        public LengthPerLengthMeasure ChokeRelative {
            get {
                return chokeRelativeField;
            } 
            set {
                chokeRelativeField = value;
                NotifyPropertyChanged("ChokeRelative");
            }
        }

        private LengthPerLengthMeasure chokeRelativeField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A possibly temperature and pressure corrected desity value.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_densityValue", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A possibly temperature and pressure corrected desity value.")]
    public partial class DensityValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The density of the product.
        /// </summary>
		[Required]
        [Description("The density of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// Defines the standard temperature and pressure to which the density has been corrected. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the procuctVolume root.
        /// </summary>
        [XmlElement("standardTempPres")]
        [EnergisticsDataTypeAttribute(DataType = "StandardCondition")]
        public StandardCondition StandardTempPres {
            get {
                return standardTempPresField;
            } 
            set {
                if (value != null && PresSpecified) throw new Exception("Cannot set property StandardTempPres when property Pres is already set");
                if (value != null && TempSpecified) throw new Exception("Cannot set property StandardTempPres when property Temp is already set");
                standardTempPresField = value;
                StandardTempPresSpecified = (value!=null);
                NotifyPropertyChanged("StandardTempPres");
            }
        }

        private StandardCondition standardTempPresField; 
        private bool standardTempPresSpecified = false; 

        /// <summary>
        /// bool to indicate if StandardTempPres has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StandardTempPresSpecified
        {
            get {
                return standardTempPresSpecified;
            }
            set {
                standardTempPresSpecified= value;
            }
        }

        /// <summary>
        /// The temperature to which the density has been corrected. If given, then a pressure must also be given. Common standard temperatures are: 0 degC, 15 degC, 60 degF. If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root. If you set this property, you must also set Pres.
        /// </summary>
        [ComponentElement]
        [XmlElement("temp")]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return tempField;
            } 
            set {
                if (value != null && StandardTempPresSpecified) throw new Exception("Cannot set property Temp when property StandardTempPres is already set");
                tempField = value;
                TempSpecified = (value!=null);
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure tempField; 
        private bool tempSpecified = false; 

        /// <summary>
        /// bool to indicate if Temp has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TempSpecified
        {
            get {
                return tempSpecified;
            }
            set {
                tempSpecified= value;
            }
        }

        /// <summary>
        /// The pressure to which the density has been corrected. If given, then a temperature must also be given. Common standard pressures are: 1 atm and 14.696 psi (which are equivalent). If neither standardTempPres nor temp,pres are specified then the standard condition is defined by standardTempPres at the productVolume root. If you set this property, you must also set Temp.
        /// </summary>
        [ComponentElement]
        [XmlElement("pres")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                if (value != null && StandardTempPresSpecified) throw new Exception("Cannot set property Pres when property StandardTempPres is already set");
                presField = value;
                PresSpecified = (value!=null);
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 
        private bool presSpecified = false; 

        /// <summary>
        /// bool to indicate if Pres has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PresSpecified
        {
            get {
                return presSpecified;
            }
            set {
                presSpecified= value;
            }
        }


        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Flow Sales Destination Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeDestination", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Flow Sales Destination Schema.")]
    public partial class ProductVolumeDestination : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the destination.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the destination.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The type of destination.
        /// </summary>
		[Description("The type of destination.")]
        [EnergisticsDataTypeAttribute(DataType = "BalanceDestinationType")]
		[XmlElement("type")]
        public BalanceDestinationType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private BalanceDestinationType typeField; 

        /// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool typeSpecifiedField; 

        /// <summary>
        /// The country of the destination.
        /// </summary>
		[StringLength(64)]
        [Description("The country of the destination.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("country")]
        public string Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private string countryField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Flow Balance Set Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeBalanceSet", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Flow Balance Set Schema.")]
    public partial class ProductVolumeBalanceSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Defines the aspect being described.
        /// </summary>
		[Description("Defines the aspect being described.")]
        [EnergisticsDataTypeAttribute(DataType = "BalanceFlowPart")]
		[XmlElement("kind")]
        public BalanceFlowPart Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private BalanceFlowPart kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

        /// <summary>
        /// A cargo identifier for the product.
        /// </summary>
		[StringLength(40)]
        [Description("A cargo identifier for the product.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("cargoNumber")]
        public string CargoNumber {
            get {
                return cargoNumberField;
            } 
            set {
                cargoNumberField = value;
                NotifyPropertyChanged("CargoNumber");
            }
        }

        private string cargoNumberField; 

        /// <summary>
        /// A cargo batch number. Used if the vessel needs to temporarily disconnect for some reason (e.g., weather).
        /// </summary>
		[Description("A cargo batch number. Used if the vessel needs to temporarily  disconnect for some reason (e.g., weather).")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("cargoBatchNumber")]
        public short? CargoBatchNumber {
            get {
                return cargoBatchNumberField;
            } 
            set {
                cargoBatchNumberField = value;
                 this.CargoBatchNumberSpecified = true;
                NotifyPropertyChanged("CargoBatchNumber");
            }
        }

        private short? cargoBatchNumberField; 

        /// <summary>
        /// cargoBatchNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CargoBatchNumberSpecified {
            get {
                return cargoBatchNumberSpecifiedField;
            } 
            set {
                cargoBatchNumberSpecifiedField = value;
                NotifyPropertyChanged("CargoBatchNumberSpecified");
            }
        }

        private bool cargoBatchNumberSpecifiedField; 

        /// <summary>
        /// The name of the shipper
        /// </summary>
		[StringLength(64)]
        [Description("The name of the shipper")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("shipper")]
        public string Shipper {
            get {
                return shipperField;
            } 
            set {
                shipperField = value;
                NotifyPropertyChanged("Shipper");
            }
        }

        private string shipperField; 

        /// <summary>
        /// Defines the destination of the product.
        /// </summary>
		[Description("Defines the destination of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeDestination")]
		[XmlElement("destination")]
        public ProductVolumeDestination Destination {
            get {
                return destinationField;
            } 
            set {
                destinationField = value;
                NotifyPropertyChanged("Destination");
            }
        }

        private ProductVolumeDestination destinationField; 

        /// <summary>
        /// Provides details on the product.
        /// </summary>
		[Description("Provides details on the product.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeBalanceDetail")]
		[XmlElement("balanceDetail")]
        public List<ProductVolumeBalanceDetail> BalanceDetail {
            get {
                return balanceDetailField;
            } 
            set {
                balanceDetailField = value;
                NotifyPropertyChanged("BalanceDetail");
            }
        }

         /// <summary>
         /// bool to indicate if BalanceDetail has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BalanceDetailSpecified
         {
             get {
             if(balanceDetailField!=null)
                 return balanceDetailField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBalanceDetail> balanceDetailField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume Period Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumePeriod", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume Period Component Schema.")]
    public partial class ProductVolumePeriod : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of period that is being reported. If not specified and a time is not given then the period is defined by the reporting period.
        /// </summary>
		[Description("The type of period that is being reported. If not  specified and a time is not given then the period is defined by the reporting period.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingPeriod")]
		[XmlElement("kind")]
        public ReportingPeriod Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingPeriod kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

        /// <summary>
        /// The beginning date and time that the period represents.
        /// </summary>
        [XmlElement("dTim")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        public DateTime? DateTime {
            get {
                return dTimField;
            } 
            set {
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property DateTime when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property DateTime when property DateTimeStart is already set");
                if (value != null && DateSpecified) throw new Exception("Cannot set property DateTime when property Date is already set");
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property DateTime when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property DateTime when property DateStart is already set");
                dTimField = value;
                DateTimeSpecified = (value!=null);
                NotifyPropertyChanged("DateTime");
            }
        }

        private DateTime? dTimField; 
        private bool dateTimeSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTime has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeSpecified
        {
            get {
                return dateTimeSpecified;
            }
            set {
                dateTimeSpecified= value;
            }
        }

        /// <summary>
        /// The day that the period represents.
        /// </summary>
        [XmlElement("date", DataType="date")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
        public DateTime? Date {
            get {
                return dateField;
            } 
            set {
                if (value != null && DateTimeSpecified) throw new Exception("Cannot set property Date when property DateTime is already set");
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property Date when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property Date when property DateTimeStart is already set");
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property Date when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property Date when property DateStart is already set");
                dateField = value;
                DateSpecified = (value!=null);
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? dateField; 
        private bool dateSpecified = false; 

        /// <summary>
        /// bool to indicate if Date has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateSpecified
        {
            get {
                return dateSpecified;
            }
            set {
                dateSpecified= value;
            }
        }

        /// <summary>
        /// The beginning date and time that the period represents. If you set this property, you must also set DateTimeEnd.
        /// </summary>
        [XmlElement("dTimStart")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                if (value != null && DateTimeSpecified) throw new Exception("Cannot set property DateTimeStart when property DateTime is already set");
                if (value != null && DateSpecified) throw new Exception("Cannot set property DateTimeStart when property Date is already set");
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property DateTimeStart when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property DateTimeStart when property DateStart is already set");
                dTimStartField = value;
                DateTimeStartSpecified = (value!=null);
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? dTimStartField; 
        private bool dateTimeStartSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTimeStart has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeStartSpecified
        {
            get {
                return dateTimeStartSpecified;
            }
            set {
                dateTimeStartSpecified= value;
            }
        }

        /// <summary>
        /// The ending date and time that the period represents. If you set this property, you must also set DateTimeStart.
        /// </summary>
        [XmlElement("dTimEnd")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                if (value != null && DateTimeSpecified) throw new Exception("Cannot set property DateTimeEnd when property DateTime is already set");
                if (value != null && DateSpecified) throw new Exception("Cannot set property DateTimeEnd when property Date is already set");
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property DateTimeEnd when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property DateTimeEnd when property DateStart is already set");
                dTimEndField = value;
                DateTimeEndSpecified = (value!=null);
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? dTimEndField; 
        private bool dateTimeEndSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTimeEnd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeEndSpecified
        {
            get {
                return dateTimeEndSpecified;
            }
            set {
                dateTimeEndSpecified= value;
            }
        }

        /// <summary>
        /// The beginning date that the period represents. If you set this property, you must also set DateEnd.
        /// </summary>
        [XmlElement("dateStart", DataType="date")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
        public DateTime? DateStart {
            get {
                return dateStartField;
            } 
            set {
                if (value != null && DateTimeSpecified) throw new Exception("Cannot set property DateStart when property DateTime is already set");
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property DateStart when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property DateStart when property DateTimeStart is already set");
                if (value != null && DateSpecified) throw new Exception("Cannot set property DateStart when property Date is already set");
                dateStartField = value;
                DateStartSpecified = (value!=null);
                NotifyPropertyChanged("DateStart");
            }
        }

        private DateTime? dateStartField; 
        private bool dateStartSpecified = false; 

        /// <summary>
        /// bool to indicate if DateStart has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateStartSpecified
        {
            get {
                return dateStartSpecified;
            }
            set {
                dateStartSpecified= value;
            }
        }

        /// <summary>
        /// The ending date that the period represents. If you set this property, you must also set DateStart.
        /// </summary>
        [XmlElement("dateEnd", DataType="date")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
        public DateTime? DateEnd {
            get {
                return dateEndField;
            } 
            set {
                if (value != null && DateTimeSpecified) throw new Exception("Cannot set property DateEnd when property DateTime is already set");
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property DateEnd when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property DateEnd when property DateTimeStart is already set");
                if (value != null && DateSpecified) throw new Exception("Cannot set property DateEnd when property Date is already set");
                dateEndField = value;
                DateEndSpecified = (value!=null);
                NotifyPropertyChanged("DateEnd");
            }
        }

        private DateTime? dateEndField; 
        private bool dateEndSpecified = false; 

        /// <summary>
        /// bool to indicate if DateEnd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateEndSpecified
        {
            get {
                return dateEndSpecified;
            }
            set {
                dateEndSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType7> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType7> ItemsElementNameField; 

        /// <summary>
        /// gor property
        /// </summary>
		[Description("Gas oil ratio. The ratio between the total produced gas volume and the total produced oil volume including oil and gas volumes used on the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gor")]
        public VolumePerVolumeMeasure Gor {
            get {
                return gorField;
            } 
            set {
                gorField = value;
                NotifyPropertyChanged("Gor");
            }
        }

        private VolumePerVolumeMeasure gorField; 

        /// <summary>
        /// gorMTD property
        /// </summary>
		[Description("Gas oil ratio month to date. The gas oil ratio from the beginning of the month  to the end of the reporting priod.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gorMTD")]
        public VolumePerVolumeMeasure GorMTD {
            get {
                return gorMTDField;
            } 
            set {
                gorMTDField = value;
                NotifyPropertyChanged("GorMTD");
            }
        }

        private VolumePerVolumeMeasure gorMTDField; 

        /// <summary>
        /// gasLiquidRatio property
        /// </summary>
		[Description("The volumetric ratio of gas to liquid for all products in the whole flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasLiquidRatio")]
        public VolumePerVolumeMeasure GasLiquidRatio {
            get {
                return gasLiquidRatioField;
            } 
            set {
                gasLiquidRatioField = value;
                NotifyPropertyChanged("GasLiquidRatio");
            }
        }

        private VolumePerVolumeMeasure gasLiquidRatioField; 

        /// <summary>
        /// waterConcMass property
        /// </summary>
		[Description("Water concentration mass basis.  The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("waterConcMass")]
        public MassConcentrationMeasure WaterConcMass {
            get {
                return waterConcMassField;
            } 
            set {
                waterConcMassField = value;
                NotifyPropertyChanged("WaterConcMass");
            }
        }

        private MassConcentrationMeasure waterConcMassField; 

        /// <summary>
        /// waterConcVol property
        /// </summary>
		[Description("Water concentration volume basis. The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("waterConcVol")]
        public VolumePerVolumeMeasure WaterConcVol {
            get {
                return waterConcVolField;
            } 
            set {
                waterConcVolField = value;
                NotifyPropertyChanged("WaterConcVol");
            }
        }

        private VolumePerVolumeMeasure waterConcVolField; 

        /// <summary>
        /// atmosphere property
        /// </summary>
		[Description("The average atmospheric pressure during the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("atmosphere")]
        public PressureMeasure Atmosphere {
            get {
                return atmosphereField;
            } 
            set {
                atmosphereField = value;
                NotifyPropertyChanged("Atmosphere");
            }
        }

        private PressureMeasure atmosphereField; 

        /// <summary>
        /// volumeValue property
        /// </summary>
		[Description("The volume of the fluid, possibly corrected to specific  conditions of temperature and pressure. A positive value for an inlet port indicates flow into the port. A negative value for an inlet port indicates flow out of the port. A positive value for an outlet port indicates flow out of the port. A negative value for an outlet port indicates flow into of the port. This convention is designed such that a positive sign indicates an expected condition based on the intended port direction while a negative sign indicates an anomolous condition. If more than one value is specified then all values must represent the same  opinion of the volume (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_volumeValue")]
		[XmlElement("volumeValue")]
        public List<VolumeValue> VolumeValue {
            get {
                return volumeValueField;
            } 
            set {
                volumeValueField = value;
                NotifyPropertyChanged("VolumeValue");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeValueSpecified
         {
             get {
             if(volumeValueField!=null)
                 return volumeValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeValue> volumeValueField; 

        /// <summary>
        /// volume property
        /// </summary>
		[Description("DEPRECATED. Use volumeValue for new work. The uncorrected volume of the product. The sign of the value should conform to the above description of volumeValue. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volume")]
        public VolumeQualifiedMeasure Volume {
            get {
                return volumeField;
            } 
            set {
                volumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeQualifiedMeasure volumeField; 

        /// <summary>
        /// volumeStd property
        /// </summary>
		[Description("DEPRECATED. Use volumeValue for new work. The volume of the fluid, corrected to standard  conditions of temperature and pressure.  The sign of the value should conform to the above description of volumeValue. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volumeStd")]
        public VolumeQualifiedMeasure VolumeStd {
            get {
                return volumeStdField;
            } 
            set {
                volumeStdField = value;
                NotifyPropertyChanged("VolumeStd");
            }
        }

        private VolumeQualifiedMeasure volumeStdField; 

        /// <summary>
        /// flowRateValue property
        /// </summary>
		[Description("The flow rate of the product, possibly corrected to specific  conditions of temperature and pressure. The sign of the value should conform to the above description of volumeValue. If more than one value is specified then all values must represent the same  opinion of the flow rate (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_flowRateValue")]
		[XmlElement("flowRateValue")]
        public List<FlowRateValue> FlowRateValue {
            get {
                return flowRateValueField;
            } 
            set {
                flowRateValueField = value;
                NotifyPropertyChanged("FlowRateValue");
            }
        }

         /// <summary>
         /// bool to indicate if FlowRateValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FlowRateValueSpecified
         {
             get {
             if(flowRateValueField!=null)
                 return flowRateValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<FlowRateValue> flowRateValueField; 

        /// <summary>
        /// flowRate property
        /// </summary>
		[Description("DEPRECATED. Use flowRateValue for new work. The flow rate of the product. The sign of the value should conform to the above description of volume. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateQualifiedMeasure")]
		[XmlElement("flowRate")]
        public VolumeFlowRateQualifiedMeasure FlowRate {
            get {
                return flowRateField;
            } 
            set {
                flowRateField = value;
                NotifyPropertyChanged("FlowRate");
            }
        }

        private VolumeFlowRateQualifiedMeasure flowRateField; 

        /// <summary>
        /// temp property
        /// </summary>
		[Description("Temperature of the port. Specifying the temperature here (as opposed to in Period) implies that the temperature is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("temp")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return tempField;
            } 
            set {
                tempField = value;
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure tempField; 

        /// <summary>
        /// pres property
        /// </summary>
		[Description("Pressure of the port. Specifying the pressure here (as opposed to in Period) implies that the pressure is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pres")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                presField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 

        /// <summary>
        /// absoluteMinPres property
        /// </summary>
		[Description("Absolute minimum pressure before the system will give an alarm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("absoluteMinPres")]
        public PressureMeasure AbsoluteMinPres {
            get {
                return absoluteMinPresField;
            } 
            set {
                absoluteMinPresField = value;
                NotifyPropertyChanged("AbsoluteMinPres");
            }
        }

        private PressureMeasure absoluteMinPresField; 

        /// <summary>
        /// portDiff property
        /// </summary>
		[Description("The internal differences between this port and one other port on this unit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumePortDifference")]
		[XmlElement("portDiff")]
        public List<ProductVolumePortDifference> PortDiff {
            get {
                return portDiffField;
            } 
            set {
                portDiffField = value;
                NotifyPropertyChanged("PortDiff");
            }
        }

         /// <summary>
         /// bool to indicate if PortDiff has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortDiffSpecified
         {
             get {
             if(portDiffField!=null)
                 return portDiffField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumePortDifference> portDiffField; 

        /// <summary>
        /// mass property
        /// </summary>
		[Description("The mass of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("mass")]
        public MassMeasure Mass {
            get {
                return massField;
            } 
            set {
                massField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure massField; 

        /// <summary>
        /// work property
        /// </summary>
		[Description("The electrical energy represented by the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "workMeasure")]
		[XmlElement("work")]
        public WorkMeasure Work {
            get {
                return workField;
            } 
            set {
                workField = value;
                NotifyPropertyChanged("Work");
            }
        }

        private WorkMeasure workField; 

        /// <summary>
        /// efficiency property
        /// </summary>
		[Description("The actual volume divided by the potential volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("efficiency")]
        public VolumePerVolumeMeasure Efficiency {
            get {
                return efficiencyField;
            } 
            set {
                efficiencyField = value;
                NotifyPropertyChanged("Efficiency");
            }
        }

        private VolumePerVolumeMeasure efficiencyField; 

        /// <summary>
        /// rvp property
        /// </summary>
		[Description("Reid vapor pressure of the product. The absolute vapor pressure of volatile crude oil and  volatile petroleum liquids, except liquefied petroleum gases, as  determined in  accordance with American Society for Testing and Materials under the designation ASTM D323-56.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvp")]
        public PressureMeasure Rvp {
            get {
                return rvpField;
            } 
            set {
                rvpField = value;
                NotifyPropertyChanged("Rvp");
            }
        }

        private PressureMeasure rvpField; 

        /// <summary>
        /// tvp property
        /// </summary>
		[Description("True vapor pressure of the product. The equilibrium partial pressure exerted by a petroleum liquid  as determined in accordance with standard methods.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("tvp")]
        public PressureMeasure Tvp {
            get {
                return tvpField;
            } 
            set {
                tvpField = value;
                NotifyPropertyChanged("Tvp");
            }
        }

        private PressureMeasure tvpField; 

        /// <summary>
        /// bsw property
        /// </summary>
		[Description("Basic sediment and water is measured from a liquid sample  of the production stream. It includes free water, sediment and emulsion and  is measured as a volume percentage of the production stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bsw")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return bswField;
            } 
            set {
                bswField = value;
                NotifyPropertyChanged("Bsw");
            }
        }

        private VolumePerVolumeMeasure bswField; 

        /// <summary>
        /// bswPrevious property
        /// </summary>
		[Description("The basic sediment and water as measured on the  previous reporting period (e.g., day).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bswPrevious")]
        public VolumePerVolumeMeasure BswPrevious {
            get {
                return bswPreviousField;
            } 
            set {
                bswPreviousField = value;
                NotifyPropertyChanged("BswPrevious");
            }
        }

        private VolumePerVolumeMeasure bswPreviousField; 

        /// <summary>
        /// densityValue property
        /// </summary>
		[Description("The density of the fluid, possibly corrected to specific  conditions of temperature and pressure. If more than one value is specified then all values must represent the same  opinion of the density (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_densityValue")]
		[XmlElement("densityValue")]
        public List<DensityValue> DensityValue {
            get {
                return densityValueField;
            } 
            set {
                densityValueField = value;
                NotifyPropertyChanged("DensityValue");
            }
        }

         /// <summary>
         /// bool to indicate if DensityValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DensityValueSpecified
         {
             get {
             if(densityValueField!=null)
                 return densityValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<DensityValue> densityValueField; 

        /// <summary>
        /// density property
        /// </summary>
		[Description("DEPRECATED. Use densityValue for new work. The density of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// densityFlowRate property
        /// </summary>
		[Description("The mass basis flow rate of the product. This is used for things like a sand component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massFlowRateMeasure")]
		[XmlElement("densityFlowRate")]
        public MassFlowRateMeasure DensityFlowRate {
            get {
                return densityFlowRateField;
            } 
            set {
                densityFlowRateField = value;
                NotifyPropertyChanged("DensityFlowRate");
            }
        }

        private MassFlowRateMeasure densityFlowRateField; 

        /// <summary>
        /// densityStd property
        /// </summary>
		[Description("DEPRECATED. Use densityValue for new work. The density of the product after it has been  corrected to standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStd")]
        public DensityMeasure DensityStd {
            get {
                return densityStdField;
            } 
            set {
                densityStdField = value;
                NotifyPropertyChanged("DensityStd");
            }
        }

        private DensityMeasure densityStdField; 

        /// <summary>
        /// concentration property
        /// </summary>
		[Description("The concentration of the product as a volume  percentage of the product stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("concentration")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return concentrationField;
            } 
            set {
                concentrationField = value;
                NotifyPropertyChanged("Concentration");
            }
        }

        private VolumePerVolumeMeasure concentrationField; 

        /// <summary>
        /// molecularWeight property
        /// </summary>
		[Description("The molecular weight of the product.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("molecularWeight")]
        public double? MolecularWeight {
            get {
                return molecularWeightField;
            } 
            set {
                molecularWeightField = value;
                 this.MolecularWeightSpecified = true;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private double? molecularWeightField; 

        /// <summary>
        /// molecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MolecularWeightSpecified {
            get {
                return molecularWeightSpecifiedField;
            } 
            set {
                molecularWeightSpecifiedField = value;
                NotifyPropertyChanged("MolecularWeightSpecified");
            }
        }

        private bool molecularWeightSpecifiedField; 

        /// <summary>
        /// weightPercent property
        /// </summary>
		[Description("The weight fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("weightPercent")]
        public MassConcentrationMeasurePercent WeightPercent {
            get {
                return weightPercentField;
            } 
            set {
                weightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassConcentrationMeasurePercent weightPercentField; 

        /// <summary>
        /// molePercent property
        /// </summary>
		[Description("The mole fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "molarFractionMeasurePercent")]
		[XmlElement("molePercent")]
        public MolarFractionMeasurePercent MolePercent {
            get {
                return molePercentField;
            } 
            set {
                molePercentField = value;
                NotifyPropertyChanged("MolePercent");
            }
        }

        private MolarFractionMeasurePercent molePercentField; 

        /// <summary>
        /// moleAmt property
        /// </summary>
		[Description("The molar amount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "amountOfSubstanceMeasure")]
		[XmlElement("moleAmt")]
        public AmountOfSubstanceMeasure MoleAmt {
            get {
                return moleAmtField;
            } 
            set {
                moleAmtField = value;
                NotifyPropertyChanged("MoleAmt");
            }
        }

        private AmountOfSubstanceMeasure moleAmtField; 

        /// <summary>
        /// sg property
        /// </summary>
		[Description("The specific gravity of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("sg")]
        public DimensionlessMeasure SG {
            get {
                return sgField;
            } 
            set {
                sgField = value;
                NotifyPropertyChanged("SG");
            }
        }

        private DimensionlessMeasure sgField; 

        /// <summary>
        /// hcDewpoint property
        /// </summary>
		[Description("The temperature at which the heavier hydrocarbons come out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("hcDewpoint")]
        public ThermodynamicTemperatureMeasure HCDewpoint {
            get {
                return hcDewpointField;
            } 
            set {
                hcDewpointField = value;
                NotifyPropertyChanged("HCDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure hcDewpointField; 

        /// <summary>
        /// waterDewpoint property
        /// </summary>
		[Description("The temperature at which the first water comes out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("waterDewpoint")]
        public ThermodynamicTemperatureMeasure WaterDewpoint {
            get {
                return waterDewpointField;
            } 
            set {
                waterDewpointField = value;
                NotifyPropertyChanged("WaterDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure waterDewpointField; 

        /// <summary>
        /// wobbeIndex property
        /// </summary>
		[Description("Wobbe Index. A number which indicates interchangeability of fuel gasses and is obtained by dividing the heating value of a gas by the  square root of its specific gravity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("wobbeIndex")]
        public ModulusOfCompressionMeasure WobbeIndex {
            get {
                return wobbeIndexField;
            } 
            set {
                wobbeIndexField = value;
                NotifyPropertyChanged("WobbeIndex");
            }
        }

        private ModulusOfCompressionMeasure wobbeIndexField; 

        /// <summary>
        /// grossCalorificValueStd property
        /// </summary>
		[Description("The amount of heat which would be released by the complete combustion in air of a specific quantity of product at standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("grossCalorificValueStd")]
        public ModulusOfCompressionMeasure GrossCalorificValueStd {
            get {
                return grossCalorificValueStdField;
            } 
            set {
                grossCalorificValueStdField = value;
                NotifyPropertyChanged("GrossCalorificValueStd");
            }
        }

        private ModulusOfCompressionMeasure grossCalorificValueStdField; 

        /// <summary>
        /// rvpStabilizedCrude property
        /// </summary>
		[Description("Reid vapor pressure of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvpStabilizedCrude")]
        public PressureMeasure RvpStabilizedCrude {
            get {
                return rvpStabilizedCrudeField;
            } 
            set {
                rvpStabilizedCrudeField = value;
                NotifyPropertyChanged("RvpStabilizedCrude");
            }
        }

        private PressureMeasure rvpStabilizedCrudeField; 

        /// <summary>
        /// bswStabilizedCrude property
        /// </summary>
		[Description("Basic sediment and water content in stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bswStabilizedCrude")]
        public VolumePerVolumeMeasure BswStabilizedCrude {
            get {
                return bswStabilizedCrudeField;
            } 
            set {
                bswStabilizedCrudeField = value;
                NotifyPropertyChanged("BswStabilizedCrude");
            }
        }

        private VolumePerVolumeMeasure bswStabilizedCrudeField; 

        /// <summary>
        /// densityStabilizedCrude property
        /// </summary>
		[Description("The density of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStabilizedCrude")]
        public DensityMeasure DensityStabilizedCrude {
            get {
                return densityStabilizedCrudeField;
            } 
            set {
                densityStabilizedCrudeField = value;
                NotifyPropertyChanged("DensityStabilizedCrude");
            }
        }

        private DensityMeasure densityStabilizedCrudeField; 

        /// <summary>
        /// The relative amount of a component product in the product stream.
        /// </summary>
		[Description("The relative amount of a component product in the product stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeComponentContent")]
		[XmlElement("componentContent")]
        public List<ProductVolumeComponentContent> ComponentContent {
            get {
                return componentContentField;
            } 
            set {
                componentContentField = value;
                NotifyPropertyChanged("ComponentContent");
            }
        }

         /// <summary>
         /// bool to indicate if ComponentContent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ComponentContentSpecified
         {
             get {
             if(componentContentField!=null)
                 return componentContentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeComponentContent> componentContentField; 

        /// <summary>
        /// Provides the sales context for this period.
        /// </summary>
		[Description("Provides the sales context for this period.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeBalanceSet")]
		[XmlElement("balanceSet")]
        public List<ProductVolumeBalanceSet> BalanceSet {
            get {
                return balanceSetField;
            } 
            set {
                balanceSetField = value;
                NotifyPropertyChanged("BalanceSet");
            }
        }

         /// <summary>
         /// bool to indicate if BalanceSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BalanceSetSpecified
         {
             get {
             if(balanceSetField!=null)
                 return balanceSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBalanceSet> balanceSetField; 

        /// <summary>
        /// An indication of some sort of abnormal condition relative the values in this period.
        /// </summary>
		[Description("An indication of some sort of abnormal condition relative the values in this period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeAlert")]
		[XmlElement("alert")]
        public ProductVolumeAlert Alert {
            get {
                return alertField;
            } 
            set {
                alertField = value;
                NotifyPropertyChanged("Alert");
            }
        }

        private ProductVolumeAlert alertField; 

        /// <summary>
        /// A timestamped remark about the amounts.
        /// </summary>
		[Description("A timestamped remark about the amounts.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("comment")]
        public List<DatedComment> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Alert Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeAlert", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Alert Component Schema.")]
    public partial class ProductVolumeAlert : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An XPATH to the target value within the message containing this XPATH value.
        /// </summary>
		[StringLength(4000)]
        [Description("An XPATH to the target value within the message  containing this XPATH value.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("target")]
        public string Target {
            get {
                return targetField;
            } 
            set {
                targetField = value;
                NotifyPropertyChanged("Target");
            }
        }

        private string targetField; 

        /// <summary>
        /// The level of the alert.
        /// </summary>
		[StringLength(40)]
        [Description("The level of the alert.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("level")]
        public string Level {
            get {
                return levelField;
            } 
            set {
                levelField = value;
                NotifyPropertyChanged("Level");
            }
        }

        private string levelField; 

        /// <summary>
        /// The type of alert. For example "off specification".
        /// </summary>
		[StringLength(40)]
        [Description("The type of alert. For example \"off specification\".")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// A textual decription of the alert.
        /// </summary>
		[StringLength(4000)]
        [Description("A textual decription of the alert.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A general timestamped comment structure.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_datedComment", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A general timestamped comment structure.")]
    public partial class DatedComment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the person providing the comment.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the person providing the comment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("who")]
        public string Who {
            get {
                return whoField;
            } 
            set {
                whoField = value;
                NotifyPropertyChanged("Who");
            }
        }

        private string whoField; 

        /// <summary>
        /// The role of the person providing the comment. This is the role of the person within the context of comment.
        /// </summary>
		[StringLength(40)]
        [Description("The role of the person providing the comment. This is the role of the person within the context of comment.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("role")]
        public string Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                NotifyPropertyChanged("Role");
            }
        }

        private string roleField; 

        /// <summary>
        /// The date and time where the comment begins to be valid.
        /// </summary>
		[Description("The date and time where the comment begins to be valid.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time where the comment is no longer valid.
        /// </summary>
		[Description("The date and time where the comment is no longer valid.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The relevant comment.
        /// </summary>
		[Required]
        [StringLength(4000)]
        [Description("The relevant comment.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("remark")]
        public string Remark {
            get {
                return remarkField;
            } 
            set {
                remarkField = value;
                NotifyPropertyChanged("Remark");
            }
        }

        private string remarkField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_refProductFlow xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_refProductFlow", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_refProductFlow xsd type.")]
    public partial class RefProductFlow : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the flow within the facility.
        /// </summary>
		[Required]
        [Description("A pointer to the flow within the facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("referencedFlow")]
        public RefNameString ReferencedFlow {
            get {
                return referencedFlowField;
            } 
            set {
                referencedFlowField = value;
                NotifyPropertyChanged("ReferencedFlow");
            }
        }

        private RefNameString referencedFlowField; 

        /// <summary>
        /// A pointer to the facility that contains the flow.
        /// </summary>
		[Required]
        [Description("A pointer to the facility that contains the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("parentfacility")]
        public RefNameString Parentfacility {
            get {
                return parentfacilityField;
            } 
            set {
                parentfacilityField = value;
                NotifyPropertyChanged("Parentfacility");
            }
        }

        private RefNameString parentfacilityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume Product Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeProduct", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume Product Component Schema.")]
    public partial class ProductVolumeProduct : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of product that is being reported.
        /// </summary>
		[Required]
        [Description("The type of product that is being reported.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("kind")]
        public ReportingProduct Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingProduct kindField; 

        /// <summary>
        /// The name of product that is being reported. This is reserved for generic kinds like chemical.
        /// </summary>
		[Description("The name of product that is being reported. This is reserved for generic kinds like chemical.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("name")]
        public NameStruct Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private NameStruct nameField; 

        /// <summary>
        /// This factor describes the fraction of fluid in the source flow that is allocated to this product stream. The volumes reported here are derived from the source flow based on this split factor. This should be an allocation flow.
        /// </summary>
		[Range(0, 1)]
        [Description("This factor describes the fraction of fluid in the source flow  that is allocated to this product stream. The volumes reported here are derived from the  source flow based on this split factor. This should be an allocation flow.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeFraction")]
		[XmlElement("splitFactor")]
        public double? SplitFactor {
            get {
                return splitFactorField;
            } 
            set {
                splitFactorField = value;
                 this.SplitFactorSpecified = true;
                NotifyPropertyChanged("SplitFactor");
            }
        }

        private double? splitFactorField; 

        /// <summary>
        /// splitFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SplitFactorSpecified {
            get {
                return splitFactorSpecifiedField;
            } 
            set {
                splitFactorSpecifiedField = value;
                NotifyPropertyChanged("SplitFactorSpecified");
            }
        }

        private bool splitFactorSpecifiedField; 

        /// <summary>
        /// A reference to the source flow whose volumes are used to determine the volumes within this target product stream based on the split factor.
        /// </summary>
		[Description("A reference to the source flow whose volumes are used to determine the volumes within this target product stream based on the split factor.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_refProductFlow")]
		[XmlElement("sourceFlow")]
        public RefProductFlow SourceFlow {
            get {
                return sourceFlowField;
            } 
            set {
                sourceFlowField = value;
                NotifyPropertyChanged("SourceFlow");
            }
        }

        private RefProductFlow sourceFlowField; 

        /// <summary>
        /// gor property
        /// </summary>
		[Description("Gas oil ratio. The ratio between the total produced gas volume and the total produced oil volume including oil and gas volumes used on the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gor")]
        public VolumePerVolumeMeasure Gor {
            get {
                return gorField;
            } 
            set {
                gorField = value;
                NotifyPropertyChanged("Gor");
            }
        }

        private VolumePerVolumeMeasure gorField; 

        /// <summary>
        /// gorMTD property
        /// </summary>
		[Description("Gas oil ratio month to date. The gas oil ratio from the beginning of the month  to the end of the reporting priod.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gorMTD")]
        public VolumePerVolumeMeasure GorMTD {
            get {
                return gorMTDField;
            } 
            set {
                gorMTDField = value;
                NotifyPropertyChanged("GorMTD");
            }
        }

        private VolumePerVolumeMeasure gorMTDField; 

        /// <summary>
        /// gasLiquidRatio property
        /// </summary>
		[Description("The volumetric ratio of gas to liquid for all products in the whole flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasLiquidRatio")]
        public VolumePerVolumeMeasure GasLiquidRatio {
            get {
                return gasLiquidRatioField;
            } 
            set {
                gasLiquidRatioField = value;
                NotifyPropertyChanged("GasLiquidRatio");
            }
        }

        private VolumePerVolumeMeasure gasLiquidRatioField; 

        /// <summary>
        /// waterConcMass property
        /// </summary>
		[Description("Water concentration mass basis.  The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("waterConcMass")]
        public MassConcentrationMeasure WaterConcMass {
            get {
                return waterConcMassField;
            } 
            set {
                waterConcMassField = value;
                NotifyPropertyChanged("WaterConcMass");
            }
        }

        private MassConcentrationMeasure waterConcMassField; 

        /// <summary>
        /// waterConcVol property
        /// </summary>
		[Description("Water concentration volume basis. The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("waterConcVol")]
        public VolumePerVolumeMeasure WaterConcVol {
            get {
                return waterConcVolField;
            } 
            set {
                waterConcVolField = value;
                NotifyPropertyChanged("WaterConcVol");
            }
        }

        private VolumePerVolumeMeasure waterConcVolField; 

        /// <summary>
        /// atmosphere property
        /// </summary>
		[Description("The average atmospheric pressure during the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("atmosphere")]
        public PressureMeasure Atmosphere {
            get {
                return atmosphereField;
            } 
            set {
                atmosphereField = value;
                NotifyPropertyChanged("Atmosphere");
            }
        }

        private PressureMeasure atmosphereField; 

        /// <summary>
        /// volumeValue property
        /// </summary>
		[Description("The volume of the fluid, possibly corrected to specific  conditions of temperature and pressure. A positive value for an inlet port indicates flow into the port. A negative value for an inlet port indicates flow out of the port. A positive value for an outlet port indicates flow out of the port. A negative value for an outlet port indicates flow into of the port. This convention is designed such that a positive sign indicates an expected condition based on the intended port direction while a negative sign indicates an anomolous condition. If more than one value is specified then all values must represent the same  opinion of the volume (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_volumeValue")]
		[XmlElement("volumeValue")]
        public List<VolumeValue> VolumeValue {
            get {
                return volumeValueField;
            } 
            set {
                volumeValueField = value;
                NotifyPropertyChanged("VolumeValue");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeValueSpecified
         {
             get {
             if(volumeValueField!=null)
                 return volumeValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeValue> volumeValueField; 

        /// <summary>
        /// volume property
        /// </summary>
		[Description("DEPRECATED. Use volumeValue for new work. The uncorrected volume of the product. The sign of the value should conform to the above description of volumeValue. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volume")]
        public VolumeQualifiedMeasure Volume {
            get {
                return volumeField;
            } 
            set {
                volumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeQualifiedMeasure volumeField; 

        /// <summary>
        /// volumeStd property
        /// </summary>
		[Description("DEPRECATED. Use volumeValue for new work. The volume of the fluid, corrected to standard  conditions of temperature and pressure.  The sign of the value should conform to the above description of volumeValue. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volumeStd")]
        public VolumeQualifiedMeasure VolumeStd {
            get {
                return volumeStdField;
            } 
            set {
                volumeStdField = value;
                NotifyPropertyChanged("VolumeStd");
            }
        }

        private VolumeQualifiedMeasure volumeStdField; 

        /// <summary>
        /// flowRateValue property
        /// </summary>
		[Description("The flow rate of the product, possibly corrected to specific  conditions of temperature and pressure. The sign of the value should conform to the above description of volumeValue. If more than one value is specified then all values must represent the same  opinion of the flow rate (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_flowRateValue")]
		[XmlElement("flowRateValue")]
        public List<FlowRateValue> FlowRateValue {
            get {
                return flowRateValueField;
            } 
            set {
                flowRateValueField = value;
                NotifyPropertyChanged("FlowRateValue");
            }
        }

         /// <summary>
         /// bool to indicate if FlowRateValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FlowRateValueSpecified
         {
             get {
             if(flowRateValueField!=null)
                 return flowRateValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<FlowRateValue> flowRateValueField; 

        /// <summary>
        /// flowRate property
        /// </summary>
		[Description("DEPRECATED. Use flowRateValue for new work. The flow rate of the product. The sign of the value should conform to the above description of volume. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateQualifiedMeasure")]
		[XmlElement("flowRate")]
        public VolumeFlowRateQualifiedMeasure FlowRate {
            get {
                return flowRateField;
            } 
            set {
                flowRateField = value;
                NotifyPropertyChanged("FlowRate");
            }
        }

        private VolumeFlowRateQualifiedMeasure flowRateField; 

        /// <summary>
        /// temp property
        /// </summary>
		[Description("Temperature of the port. Specifying the temperature here (as opposed to in Period) implies that the temperature is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("temp")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return tempField;
            } 
            set {
                tempField = value;
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure tempField; 

        /// <summary>
        /// pres property
        /// </summary>
		[Description("Pressure of the port. Specifying the pressure here (as opposed to in Period) implies that the pressure is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pres")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                presField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 

        /// <summary>
        /// absoluteMinPres property
        /// </summary>
		[Description("Absolute minimum pressure before the system will give an alarm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("absoluteMinPres")]
        public PressureMeasure AbsoluteMinPres {
            get {
                return absoluteMinPresField;
            } 
            set {
                absoluteMinPresField = value;
                NotifyPropertyChanged("AbsoluteMinPres");
            }
        }

        private PressureMeasure absoluteMinPresField; 

        /// <summary>
        /// portDiff property
        /// </summary>
		[Description("The internal differences between this port and one other port on this unit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumePortDifference")]
		[XmlElement("portDiff")]
        public List<ProductVolumePortDifference> PortDiff {
            get {
                return portDiffField;
            } 
            set {
                portDiffField = value;
                NotifyPropertyChanged("PortDiff");
            }
        }

         /// <summary>
         /// bool to indicate if PortDiff has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortDiffSpecified
         {
             get {
             if(portDiffField!=null)
                 return portDiffField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumePortDifference> portDiffField; 

        /// <summary>
        /// mass property
        /// </summary>
		[Description("The mass of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("mass")]
        public MassMeasure Mass {
            get {
                return massField;
            } 
            set {
                massField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure massField; 

        /// <summary>
        /// work property
        /// </summary>
		[Description("The electrical energy represented by the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "workMeasure")]
		[XmlElement("work")]
        public WorkMeasure Work {
            get {
                return workField;
            } 
            set {
                workField = value;
                NotifyPropertyChanged("Work");
            }
        }

        private WorkMeasure workField; 

        /// <summary>
        /// efficiency property
        /// </summary>
		[Description("The actual volume divided by the potential volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("efficiency")]
        public VolumePerVolumeMeasure Efficiency {
            get {
                return efficiencyField;
            } 
            set {
                efficiencyField = value;
                NotifyPropertyChanged("Efficiency");
            }
        }

        private VolumePerVolumeMeasure efficiencyField; 

        /// <summary>
        /// rvp property
        /// </summary>
		[Description("Reid vapor pressure of the product. The absolute vapor pressure of volatile crude oil and  volatile petroleum liquids, except liquefied petroleum gases, as  determined in  accordance with American Society for Testing and Materials under the designation ASTM D323-56.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvp")]
        public PressureMeasure Rvp {
            get {
                return rvpField;
            } 
            set {
                rvpField = value;
                NotifyPropertyChanged("Rvp");
            }
        }

        private PressureMeasure rvpField; 

        /// <summary>
        /// tvp property
        /// </summary>
		[Description("True vapor pressure of the product. The equilibrium partial pressure exerted by a petroleum liquid  as determined in accordance with standard methods.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("tvp")]
        public PressureMeasure Tvp {
            get {
                return tvpField;
            } 
            set {
                tvpField = value;
                NotifyPropertyChanged("Tvp");
            }
        }

        private PressureMeasure tvpField; 

        /// <summary>
        /// bsw property
        /// </summary>
		[Description("Basic sediment and water is measured from a liquid sample  of the production stream. It includes free water, sediment and emulsion and  is measured as a volume percentage of the production stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bsw")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return bswField;
            } 
            set {
                bswField = value;
                NotifyPropertyChanged("Bsw");
            }
        }

        private VolumePerVolumeMeasure bswField; 

        /// <summary>
        /// bswPrevious property
        /// </summary>
		[Description("The basic sediment and water as measured on the  previous reporting period (e.g., day).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bswPrevious")]
        public VolumePerVolumeMeasure BswPrevious {
            get {
                return bswPreviousField;
            } 
            set {
                bswPreviousField = value;
                NotifyPropertyChanged("BswPrevious");
            }
        }

        private VolumePerVolumeMeasure bswPreviousField; 

        /// <summary>
        /// densityValue property
        /// </summary>
		[Description("The density of the fluid, possibly corrected to specific  conditions of temperature and pressure. If more than one value is specified then all values must represent the same  opinion of the density (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_densityValue")]
		[XmlElement("densityValue")]
        public List<DensityValue> DensityValue {
            get {
                return densityValueField;
            } 
            set {
                densityValueField = value;
                NotifyPropertyChanged("DensityValue");
            }
        }

         /// <summary>
         /// bool to indicate if DensityValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DensityValueSpecified
         {
             get {
             if(densityValueField!=null)
                 return densityValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<DensityValue> densityValueField; 

        /// <summary>
        /// density property
        /// </summary>
		[Description("DEPRECATED. Use densityValue for new work. The density of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// densityFlowRate property
        /// </summary>
		[Description("The mass basis flow rate of the product. This is used for things like a sand component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massFlowRateMeasure")]
		[XmlElement("densityFlowRate")]
        public MassFlowRateMeasure DensityFlowRate {
            get {
                return densityFlowRateField;
            } 
            set {
                densityFlowRateField = value;
                NotifyPropertyChanged("DensityFlowRate");
            }
        }

        private MassFlowRateMeasure densityFlowRateField; 

        /// <summary>
        /// densityStd property
        /// </summary>
		[Description("DEPRECATED. Use densityValue for new work. The density of the product after it has been  corrected to standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStd")]
        public DensityMeasure DensityStd {
            get {
                return densityStdField;
            } 
            set {
                densityStdField = value;
                NotifyPropertyChanged("DensityStd");
            }
        }

        private DensityMeasure densityStdField; 

        /// <summary>
        /// concentration property
        /// </summary>
		[Description("The concentration of the product as a volume  percentage of the product stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("concentration")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return concentrationField;
            } 
            set {
                concentrationField = value;
                NotifyPropertyChanged("Concentration");
            }
        }

        private VolumePerVolumeMeasure concentrationField; 

        /// <summary>
        /// molecularWeight property
        /// </summary>
		[Description("The molecular weight of the product.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("molecularWeight")]
        public double? MolecularWeight {
            get {
                return molecularWeightField;
            } 
            set {
                molecularWeightField = value;
                 this.MolecularWeightSpecified = true;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private double? molecularWeightField; 

        /// <summary>
        /// molecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MolecularWeightSpecified {
            get {
                return molecularWeightSpecifiedField;
            } 
            set {
                molecularWeightSpecifiedField = value;
                NotifyPropertyChanged("MolecularWeightSpecified");
            }
        }

        private bool molecularWeightSpecifiedField; 

        /// <summary>
        /// weightPercent property
        /// </summary>
		[Description("The weight fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("weightPercent")]
        public MassConcentrationMeasurePercent WeightPercent {
            get {
                return weightPercentField;
            } 
            set {
                weightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassConcentrationMeasurePercent weightPercentField; 

        /// <summary>
        /// molePercent property
        /// </summary>
		[Description("The mole fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "molarFractionMeasurePercent")]
		[XmlElement("molePercent")]
        public MolarFractionMeasurePercent MolePercent {
            get {
                return molePercentField;
            } 
            set {
                molePercentField = value;
                NotifyPropertyChanged("MolePercent");
            }
        }

        private MolarFractionMeasurePercent molePercentField; 

        /// <summary>
        /// moleAmt property
        /// </summary>
		[Description("The molar amount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "amountOfSubstanceMeasure")]
		[XmlElement("moleAmt")]
        public AmountOfSubstanceMeasure MoleAmt {
            get {
                return moleAmtField;
            } 
            set {
                moleAmtField = value;
                NotifyPropertyChanged("MoleAmt");
            }
        }

        private AmountOfSubstanceMeasure moleAmtField; 

        /// <summary>
        /// sg property
        /// </summary>
		[Description("The specific gravity of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("sg")]
        public DimensionlessMeasure SG {
            get {
                return sgField;
            } 
            set {
                sgField = value;
                NotifyPropertyChanged("SG");
            }
        }

        private DimensionlessMeasure sgField; 

        /// <summary>
        /// hcDewpoint property
        /// </summary>
		[Description("The temperature at which the heavier hydrocarbons come out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("hcDewpoint")]
        public ThermodynamicTemperatureMeasure HCDewpoint {
            get {
                return hcDewpointField;
            } 
            set {
                hcDewpointField = value;
                NotifyPropertyChanged("HCDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure hcDewpointField; 

        /// <summary>
        /// waterDewpoint property
        /// </summary>
		[Description("The temperature at which the first water comes out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("waterDewpoint")]
        public ThermodynamicTemperatureMeasure WaterDewpoint {
            get {
                return waterDewpointField;
            } 
            set {
                waterDewpointField = value;
                NotifyPropertyChanged("WaterDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure waterDewpointField; 

        /// <summary>
        /// wobbeIndex property
        /// </summary>
		[Description("Wobbe Index. A number which indicates interchangeability of fuel gasses and is obtained by dividing the heating value of a gas by the  square root of its specific gravity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("wobbeIndex")]
        public ModulusOfCompressionMeasure WobbeIndex {
            get {
                return wobbeIndexField;
            } 
            set {
                wobbeIndexField = value;
                NotifyPropertyChanged("WobbeIndex");
            }
        }

        private ModulusOfCompressionMeasure wobbeIndexField; 

        /// <summary>
        /// grossCalorificValueStd property
        /// </summary>
		[Description("The amount of heat which would be released by the complete combustion in air of a specific quantity of product at standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("grossCalorificValueStd")]
        public ModulusOfCompressionMeasure GrossCalorificValueStd {
            get {
                return grossCalorificValueStdField;
            } 
            set {
                grossCalorificValueStdField = value;
                NotifyPropertyChanged("GrossCalorificValueStd");
            }
        }

        private ModulusOfCompressionMeasure grossCalorificValueStdField; 

        /// <summary>
        /// rvpStabilizedCrude property
        /// </summary>
		[Description("Reid vapor pressure of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvpStabilizedCrude")]
        public PressureMeasure RvpStabilizedCrude {
            get {
                return rvpStabilizedCrudeField;
            } 
            set {
                rvpStabilizedCrudeField = value;
                NotifyPropertyChanged("RvpStabilizedCrude");
            }
        }

        private PressureMeasure rvpStabilizedCrudeField; 

        /// <summary>
        /// bswStabilizedCrude property
        /// </summary>
		[Description("Basic sediment and water content in stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bswStabilizedCrude")]
        public VolumePerVolumeMeasure BswStabilizedCrude {
            get {
                return bswStabilizedCrudeField;
            } 
            set {
                bswStabilizedCrudeField = value;
                NotifyPropertyChanged("BswStabilizedCrude");
            }
        }

        private VolumePerVolumeMeasure bswStabilizedCrudeField; 

        /// <summary>
        /// densityStabilizedCrude property
        /// </summary>
		[Description("The density of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStabilizedCrude")]
        public DensityMeasure DensityStabilizedCrude {
            get {
                return densityStabilizedCrudeField;
            } 
            set {
                densityStabilizedCrudeField = value;
                NotifyPropertyChanged("DensityStabilizedCrude");
            }
        }

        private DensityMeasure densityStabilizedCrudeField; 

        /// <summary>
        /// The relative amount of a component product in the product stream.
        /// </summary>
		[Description("The relative amount of a component product in the product stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeComponentContent")]
		[XmlElement("componentContent")]
        public List<ProductVolumeComponentContent> ComponentContent {
            get {
                return componentContentField;
            } 
            set {
                componentContentField = value;
                NotifyPropertyChanged("ComponentContent");
            }
        }

         /// <summary>
         /// bool to indicate if ComponentContent has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ComponentContentSpecified
         {
             get {
             if(componentContentField!=null)
                 return componentContentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeComponentContent> componentContentField; 

        /// <summary>
        /// Product amounts for a specific period.
        /// </summary>
		[Required]
        [Description("Product amounts for a specific period.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumePeriod")]
		[XmlElement("period")]
        public List<ProductVolumePeriod> Period {
            get {
                return periodField;
            } 
            set {
                periodField = value;
                NotifyPropertyChanged("Period");
            }
        }

         /// <summary>
         /// bool to indicate if Period has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PeriodSpecified
         {
             get {
             if(periodField!=null)
                 return periodField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumePeriod> periodField; 

        /// <summary>
        /// A (possibly timstamped) remark about the product.
        /// </summary>
		[Description("A (possibly timstamped) remark about the product.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("comment")]
        public List<DatedComment> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Report Facility Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeRelatedFacility", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Report Facility Component Schema.")]
    public partial class ProductVolumeRelatedFacility : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the facility. The name can be qualified by a naming system. This can also define the kind of facility.
        /// </summary>
		[Description("The name of the facility. The name can be qualified by a naming system.  This can also define the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("name")]
        public FacilityIdentifierStruct Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private FacilityIdentifierStruct nameField; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another  facility, the name of the parent facility.  The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facilityParent1")]
        public FacilityIdentifierStruct FacilityParent1 {
            get {
                return facilityParent1Field;
            } 
            set {
                facilityParent1Field = value;
                NotifyPropertyChanged("FacilityParent1");
            }
        }

        private FacilityIdentifierStruct facilityParent1Field; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility of parent1. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another  facility, the name of the parent facility of parent1.  The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facilityParent2")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return facilityParent2Field;
            } 
            set {
                facilityParent2Field = value;
                NotifyPropertyChanged("FacilityParent2");
            }
        }

        private FacilityIdentifierStruct facilityParent2Field; 

        /// <summary>
        /// A kind of facility where the specific name is not relevant.
        /// </summary>
		[Description("A kind of facility where the specific name is not relevant.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingFacility")]
		[XmlElement("kind")]
        public ReportingFacility Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingFacility kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

        /// <summary>
        /// The Product Flow Port associated with the Product Flow Unit.
        /// </summary>
		[Description("The Product Flow Port associated with the Product Flow Unit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("port")]
        public RefNameString Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private RefNameString portField; 

        /// <summary>
        /// The Product Flow Unit representing the facility.
        /// </summary>
		[Description("The Product Flow Unit representing the facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("unit")]
        public RefNameString Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private RefNameString unitField; 

        /// <summary>
        /// The Product Flow Network representing the facility. This is only required if the network is not the same as the primary network that represents the Product Flow Model. This must be unique within the context of the Product Flow Model represented by this report.
        /// </summary>
		[Description("The Product Flow Network representing the facility. This is only required if the network is not the same as the primary network that represents the Product Flow Model. This must be unique within the context of the Product Flow Model represented  by this report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("network")]
        public RefNameString Network {
            get {
                return networkField;
            } 
            set {
                networkField = value;
                NotifyPropertyChanged("Network");
            }
        }

        private RefNameString networkField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the facilityIdentifierStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="facilityIdentifierStruct", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the facilityIdentifierStruct xsd type.")]
    public partial class FacilityIdentifierStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the FacilityIdentifierStruct class.
        /// </summary>
        public FacilityIdentifierStruct() {}

        /// <summary>
        /// Initializes a new instance of the FacilityIdentifierStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public FacilityIdentifierStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The kind of facility.
        /// </summary>
		[Description("The kind of facility.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingFacility")]
        [XmlAttribute("kind")]
		        public string KindSurrogate
        {
            get {
                     if(Kind==null)  return null;
                     else return Kind.Name; }
            set { 

                 if(this.Kind== null)
                 Kind= new ReportingFacility(value);
                 else
                   Kind.Name = value; }
        }
        /// <summary>
        /// The kind of facility.
        /// </summary>
        [XmlIgnore]

        public ReportingFacility Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingFacility kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

		/// <summary>
        /// A custom sub-categorization of facility kind. This attribute is free-form text and allows implementers to provide a more specific or specialized description of the facility kind.
        /// </summary>
		[StringLength(64)]
        [Description("A custom sub-categorization of facility kind. This attribute is free-form text and allows  implementers to provide a more specific or specialized description of the facility kind.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("siteKind")]
		
        public string SiteKind {
            get {
                return siteKindField;
            } 
            set {
                siteKindField = value;
                NotifyPropertyChanged("SiteKind");
            }
        }

        private string siteKindField; 

		/// <summary>
        /// The naming system within which the name is unique. For example, API or NPD.
        /// </summary>
		[StringLength(64)]
        [Description("The naming system within which the name is unique. For example, API or NPD.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("namingSystem")]
		
        public string NamingSystem {
            get {
                return namingSystemField;
            } 
            set {
                namingSystemField = value;
                NotifyPropertyChanged("NamingSystem");
            }
        }

        private string namingSystemField; 

		/// <summary>
        /// If the facility is defined and instantiated within the context of a WITSML server, this is a pointer to the uid value of that object instance.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("If the facility is defined and instantiated within the context of a WITSML server, this is a pointer to the uid value of that object instance.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uidRef")]
		
        public string UidRef {
            get {
                return uidRefField;
            } 
            set {
                uidRefField = value;
                NotifyPropertyChanged("UidRef");
            }
        }

        private string uidRefField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume Flow Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeFlow", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume Flow Component Schema.")]
    public partial class ProductVolumeFlow : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of this flow within the context of this report. This might reflect some combination of the kind of flow, port, qualifier and related facility.
        /// </summary>
		[StringLength(64)]
        [Description("The name of this flow within the context of this report. This might reflect some combination of the kind of flow, port, qualifier and related facility.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Indicates the type of flow that is being reported. The type of flow is an indication of the overall source or target of the flow. A production flow has one or more wells as the originating source. An injection flow has one or more wells as the ultimate target. An import flow has an offsite source. An export flow has an offiste target. A consumption flow generally has a kind of equipment as a target.
        /// </summary>
		[Required]
        [Description("Indicates the type of flow that is being reported. The type of flow is an indication of the overall source or target of the flow. A production flow has one or more wells as the originating source. An injection flow has one or more wells as the ultimate target. An import flow has an offsite source. An export flow has an offiste target. A consumption flow generally has a kind of equipment as a target.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingFlow")]
		[XmlElement("kind")]
        public ReportingFlow Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private ReportingFlow kindField; 

        /// <summary>
        /// The Product Flow Port to which the flow is assigned. This is the port on the Product Flow Unit that represents the facility.
        /// </summary>
		[Description("The Product Flow Port to which the flow is assigned. This is the port on the Product Flow Unit that represents the facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("port")]
        public RefNameString Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private RefNameString portField; 

        /// <summary>
        /// The kind of port that this flow represents: inlet or outlet.
        /// </summary>
		[Description("The kind of port that this flow represents: inlet or outlet.")]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowPortType")]
		[XmlElement("direction")]
        public ProductFlowPortType Direction {
            get {
                return directionField;
            } 
            set {
                directionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        private ProductFlowPortType directionField; 

        /// <summary>
        /// directionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return directionSpecifiedField;
            } 
            set {
                directionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }

        private bool directionSpecifiedField; 

        /// <summary>
        /// The name of the facility represented by the port where the measurements were taken. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility represented by the port  where the measurements were taken.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facility")]
        public FacilityIdentifierStruct Facility {
            get {
                return facilityField;
            } 
            set {
                facilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

        private FacilityIdentifierStruct facilityField; 

        /// <summary>
        /// An alternatative name of a facility represented by the port. This is generally unique within a naming system. The above contextually unique name (that is, within the context of a parent) should also be listed as an alias.
        /// </summary>
		[Description("An alternatative name of a facility represented by the port. This is generally unique within a naming system. The above contextually unique name (that is, within  the context of a parent) should also be listed as an alias.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("facilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return facilityAliasField;
            } 
            set {
                facilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(facilityAliasField!=null)
                 return facilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> facilityAliasField; 

        /// <summary>
        /// Qualifies the type of flow that is being reported.
        /// </summary>
		[Description("Qualifies the type of flow that is being reported.")]
        [EnergisticsDataTypeAttribute(DataType = "FlowQualifier")]
		[XmlElement("qualifier")]
        public FlowQualifier Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private FlowQualifier qualifierField; 

        /// <summary>
        /// qualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return qualifierSpecifiedField;
            } 
            set {
                qualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool qualifierSpecifiedField; 

        /// <summary>
        /// Defines a specialization of the qualifier value. This should only be given if a qualifier is given.
        /// </summary>
		[Description("Defines a specialization of the qualifier value. This should only be given if a qualifier is given.")]
        [EnergisticsDataTypeAttribute(DataType = "FlowSubQualifier")]
		[XmlElement("subQualifier")]
        public FlowSubQualifier SubQualifier {
            get {
                return subQualifierField;
            } 
            set {
                subQualifierField = value;
                 this.SubQualifierSpecified = true;
                NotifyPropertyChanged("SubQualifier");
            }
        }

        private FlowSubQualifier subQualifierField; 

        /// <summary>
        /// subQualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubQualifierSpecified {
            get {
                return subQualifierSpecifiedField;
            } 
            set {
                subQualifierSpecifiedField = value;
                NotifyPropertyChanged("SubQualifierSpecified");
            }
        }

        private bool subQualifierSpecifiedField; 

        /// <summary>
        /// A second facility related to this flow. For a production flow, this would represent a role of 'produced for'. For an import flow, this would represent a role of 'inport from'. For an export flow, this would represent a role of 'export to'.
        /// </summary>
		[Description("A second facility related to this flow.  For a production flow, this would represent a role of 'produced for'. For an import flow, this would represent a role of 'inport from'. For an export flow, this would represent a role of 'export to'.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeRelatedFacility")]
		[XmlElement("relatedFacility")]
        public ProductVolumeRelatedFacility RelatedFacility {
            get {
                return relatedFacilityField;
            } 
            set {
                relatedFacilityField = value;
                NotifyPropertyChanged("RelatedFacility");
            }
        }

        private ProductVolumeRelatedFacility relatedFacilityField; 

        /// <summary>
        /// A timestamp representing the version of this data. A flow (same port and products) with a more recent timestamp will represent the "current" version.
        /// </summary>
		[Description("A timestamp representing the version of this data.  A flow (same port and products) with a more recent timestamp will represent  the \"current\" version.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("version")]
        public Timestamp? Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                 this.VersionSpecified = true;
                NotifyPropertyChanged("Version");
            }
        }

        private Timestamp? versionField; 

        /// <summary>
        /// versionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VersionSpecified {
            get {
                return versionSpecifiedField;
            } 
            set {
                versionSpecifiedField = value;
                NotifyPropertyChanged("VersionSpecified");
            }
        }

        private bool versionSpecifiedField; 

        /// <summary>
        /// Identifies the source of the version. This will commonly be the name of the software which created the version. 
        /// </summary>
		[StringLength(64)]
        [Description("Identifies the source of the version.  This will commonly be the name of the software which created the version.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("versionSource")]
        public string VersionSource {
            get {
                return versionSourceField;
            } 
            set {
                versionSourceField = value;
                NotifyPropertyChanged("VersionSource");
            }
        }

        private string versionSourceField; 

        /// <summary>
        /// This is a pointer to the flow from which this flow was derived.
        /// </summary>
		[Description("This is a pointer to the flow from which this flow was derived.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("sourceFlow")]
        public RefNameString SourceFlow {
            get {
                return sourceFlowField;
            } 
            set {
                sourceFlowField = value;
                NotifyPropertyChanged("SourceFlow");
            }
        }

        private RefNameString sourceFlowField; 

        /// <summary>
        /// gor property
        /// </summary>
		[Description("Gas oil ratio. The ratio between the total produced gas volume and the total produced oil volume including oil and gas volumes used on the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gor")]
        public VolumePerVolumeMeasure Gor {
            get {
                return gorField;
            } 
            set {
                gorField = value;
                NotifyPropertyChanged("Gor");
            }
        }

        private VolumePerVolumeMeasure gorField; 

        /// <summary>
        /// gorMTD property
        /// </summary>
		[Description("Gas oil ratio month to date. The gas oil ratio from the beginning of the month  to the end of the reporting priod.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gorMTD")]
        public VolumePerVolumeMeasure GorMTD {
            get {
                return gorMTDField;
            } 
            set {
                gorMTDField = value;
                NotifyPropertyChanged("GorMTD");
            }
        }

        private VolumePerVolumeMeasure gorMTDField; 

        /// <summary>
        /// gasLiquidRatio property
        /// </summary>
		[Description("The volumetric ratio of gas to liquid for all products in the whole flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("gasLiquidRatio")]
        public VolumePerVolumeMeasure GasLiquidRatio {
            get {
                return gasLiquidRatioField;
            } 
            set {
                gasLiquidRatioField = value;
                NotifyPropertyChanged("GasLiquidRatio");
            }
        }

        private VolumePerVolumeMeasure gasLiquidRatioField; 

        /// <summary>
        /// waterConcMass property
        /// </summary>
		[Description("Water concentration mass basis.  The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("waterConcMass")]
        public MassConcentrationMeasure WaterConcMass {
            get {
                return waterConcMassField;
            } 
            set {
                waterConcMassField = value;
                NotifyPropertyChanged("WaterConcMass");
            }
        }

        private MassConcentrationMeasure waterConcMassField; 

        /// <summary>
        /// waterConcVol property
        /// </summary>
		[Description("Water concentration volume basis. The ratio of water produced compared to the mass of total liquids produced.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("waterConcVol")]
        public VolumePerVolumeMeasure WaterConcVol {
            get {
                return waterConcVolField;
            } 
            set {
                waterConcVolField = value;
                NotifyPropertyChanged("WaterConcVol");
            }
        }

        private VolumePerVolumeMeasure waterConcVolField; 

        /// <summary>
        /// atmosphere property
        /// </summary>
		[Description("The average atmospheric pressure during the reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("atmosphere")]
        public PressureMeasure Atmosphere {
            get {
                return atmosphereField;
            } 
            set {
                atmosphereField = value;
                NotifyPropertyChanged("Atmosphere");
            }
        }

        private PressureMeasure atmosphereField; 

        /// <summary>
        /// volumeValue property
        /// </summary>
		[Description("The volume of the fluid, possibly corrected to specific  conditions of temperature and pressure. A positive value for an inlet port indicates flow into the port. A negative value for an inlet port indicates flow out of the port. A positive value for an outlet port indicates flow out of the port. A negative value for an outlet port indicates flow into of the port. This convention is designed such that a positive sign indicates an expected condition based on the intended port direction while a negative sign indicates an anomolous condition. If more than one value is specified then all values must represent the same  opinion of the volume (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_volumeValue")]
		[XmlElement("volumeValue")]
        public List<VolumeValue> VolumeValue {
            get {
                return volumeValueField;
            } 
            set {
                volumeValueField = value;
                NotifyPropertyChanged("VolumeValue");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeValueSpecified
         {
             get {
             if(volumeValueField!=null)
                 return volumeValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<VolumeValue> volumeValueField; 

        /// <summary>
        /// volume property
        /// </summary>
		[Description("DEPRECATED. Use volumeValue for new work. The uncorrected volume of the product. The sign of the value should conform to the above description of volumeValue. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volume")]
        public VolumeQualifiedMeasure Volume {
            get {
                return volumeField;
            } 
            set {
                volumeField = value;
                NotifyPropertyChanged("Volume");
            }
        }

        private VolumeQualifiedMeasure volumeField; 

        /// <summary>
        /// volumeStd property
        /// </summary>
		[Description("DEPRECATED. Use volumeValue for new work. The volume of the fluid, corrected to standard  conditions of temperature and pressure.  The sign of the value should conform to the above description of volumeValue. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeQualifiedMeasure")]
		[XmlElement("volumeStd")]
        public VolumeQualifiedMeasure VolumeStd {
            get {
                return volumeStdField;
            } 
            set {
                volumeStdField = value;
                NotifyPropertyChanged("VolumeStd");
            }
        }

        private VolumeQualifiedMeasure volumeStdField; 

        /// <summary>
        /// flowRateValue property
        /// </summary>
		[Description("The flow rate of the product, possibly corrected to specific  conditions of temperature and pressure. The sign of the value should conform to the above description of volumeValue. If more than one value is specified then all values must represent the same  opinion of the flow rate (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_flowRateValue")]
		[XmlElement("flowRateValue")]
        public List<FlowRateValue> FlowRateValue {
            get {
                return flowRateValueField;
            } 
            set {
                flowRateValueField = value;
                NotifyPropertyChanged("FlowRateValue");
            }
        }

         /// <summary>
         /// bool to indicate if FlowRateValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FlowRateValueSpecified
         {
             get {
             if(flowRateValueField!=null)
                 return flowRateValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<FlowRateValue> flowRateValueField; 

        /// <summary>
        /// flowRate property
        /// </summary>
		[Description("DEPRECATED. Use flowRateValue for new work. The flow rate of the product. The sign of the value should conform to the above description of volume. If the 'status' attribute is absent and the value is not \"NaN\",  the data value can be assumed to be good with no restrictions. A value of \"NaN\" should be interpreted as null and should be not be given unless  a status is also specified to explain why it is null.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeFlowRateQualifiedMeasure")]
		[XmlElement("flowRate")]
        public VolumeFlowRateQualifiedMeasure FlowRate {
            get {
                return flowRateField;
            } 
            set {
                flowRateField = value;
                NotifyPropertyChanged("FlowRate");
            }
        }

        private VolumeFlowRateQualifiedMeasure flowRateField; 

        /// <summary>
        /// temp property
        /// </summary>
		[Description("Temperature of the port. Specifying the temperature here (as opposed to in Period) implies that the temperature is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("temp")]
        public ThermodynamicTemperatureMeasure Temp {
            get {
                return tempField;
            } 
            set {
                tempField = value;
                NotifyPropertyChanged("Temp");
            }
        }

        private ThermodynamicTemperatureMeasure tempField; 

        /// <summary>
        /// pres property
        /// </summary>
		[Description("Pressure of the port. Specifying the pressure here (as opposed to in Period) implies that the pressure is constant for all periods of the flow.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("pres")]
        public PressureMeasure Pres {
            get {
                return presField;
            } 
            set {
                presField = value;
                NotifyPropertyChanged("Pres");
            }
        }

        private PressureMeasure presField; 

        /// <summary>
        /// absoluteMinPres property
        /// </summary>
		[Description("Absolute minimum pressure before the system will give an alarm.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("absoluteMinPres")]
        public PressureMeasure AbsoluteMinPres {
            get {
                return absoluteMinPresField;
            } 
            set {
                absoluteMinPresField = value;
                NotifyPropertyChanged("AbsoluteMinPres");
            }
        }

        private PressureMeasure absoluteMinPresField; 

        /// <summary>
        /// portDiff property
        /// </summary>
		[Description("The internal differences between this port and one other port on this unit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumePortDifference")]
		[XmlElement("portDiff")]
        public List<ProductVolumePortDifference> PortDiff {
            get {
                return portDiffField;
            } 
            set {
                portDiffField = value;
                NotifyPropertyChanged("PortDiff");
            }
        }

         /// <summary>
         /// bool to indicate if PortDiff has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortDiffSpecified
         {
             get {
             if(portDiffField!=null)
                 return portDiffField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumePortDifference> portDiffField; 

        /// <summary>
        /// mass property
        /// </summary>
		[Description("The mass of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("mass")]
        public MassMeasure Mass {
            get {
                return massField;
            } 
            set {
                massField = value;
                NotifyPropertyChanged("Mass");
            }
        }

        private MassMeasure massField; 

        /// <summary>
        /// work property
        /// </summary>
		[Description("The electrical energy represented by the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "workMeasure")]
		[XmlElement("work")]
        public WorkMeasure Work {
            get {
                return workField;
            } 
            set {
                workField = value;
                NotifyPropertyChanged("Work");
            }
        }

        private WorkMeasure workField; 

        /// <summary>
        /// efficiency property
        /// </summary>
		[Description("The actual volume divided by the potential volume.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("efficiency")]
        public VolumePerVolumeMeasure Efficiency {
            get {
                return efficiencyField;
            } 
            set {
                efficiencyField = value;
                NotifyPropertyChanged("Efficiency");
            }
        }

        private VolumePerVolumeMeasure efficiencyField; 

        /// <summary>
        /// rvp property
        /// </summary>
		[Description("Reid vapor pressure of the product. The absolute vapor pressure of volatile crude oil and  volatile petroleum liquids, except liquefied petroleum gases, as  determined in  accordance with American Society for Testing and Materials under the designation ASTM D323-56.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvp")]
        public PressureMeasure Rvp {
            get {
                return rvpField;
            } 
            set {
                rvpField = value;
                NotifyPropertyChanged("Rvp");
            }
        }

        private PressureMeasure rvpField; 

        /// <summary>
        /// tvp property
        /// </summary>
		[Description("True vapor pressure of the product. The equilibrium partial pressure exerted by a petroleum liquid  as determined in accordance with standard methods.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("tvp")]
        public PressureMeasure Tvp {
            get {
                return tvpField;
            } 
            set {
                tvpField = value;
                NotifyPropertyChanged("Tvp");
            }
        }

        private PressureMeasure tvpField; 

        /// <summary>
        /// bsw property
        /// </summary>
		[Description("Basic sediment and water is measured from a liquid sample  of the production stream. It includes free water, sediment and emulsion and  is measured as a volume percentage of the production stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bsw")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return bswField;
            } 
            set {
                bswField = value;
                NotifyPropertyChanged("Bsw");
            }
        }

        private VolumePerVolumeMeasure bswField; 

        /// <summary>
        /// bswPrevious property
        /// </summary>
		[Description("The basic sediment and water as measured on the  previous reporting period (e.g., day).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bswPrevious")]
        public VolumePerVolumeMeasure BswPrevious {
            get {
                return bswPreviousField;
            } 
            set {
                bswPreviousField = value;
                NotifyPropertyChanged("BswPrevious");
            }
        }

        private VolumePerVolumeMeasure bswPreviousField; 

        /// <summary>
        /// densityValue property
        /// </summary>
		[Description("The density of the fluid, possibly corrected to specific  conditions of temperature and pressure. If more than one value is specified then all values must represent the same  opinion of the density (at different conditions).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_densityValue")]
		[XmlElement("densityValue")]
        public List<DensityValue> DensityValue {
            get {
                return densityValueField;
            } 
            set {
                densityValueField = value;
                NotifyPropertyChanged("DensityValue");
            }
        }

         /// <summary>
         /// bool to indicate if DensityValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DensityValueSpecified
         {
             get {
             if(densityValueField!=null)
                 return densityValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<DensityValue> densityValueField; 

        /// <summary>
        /// density property
        /// </summary>
		[Description("DEPRECATED. Use densityValue for new work. The density of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// densityFlowRate property
        /// </summary>
		[Description("The mass basis flow rate of the product. This is used for things like a sand component.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massFlowRateMeasure")]
		[XmlElement("densityFlowRate")]
        public MassFlowRateMeasure DensityFlowRate {
            get {
                return densityFlowRateField;
            } 
            set {
                densityFlowRateField = value;
                NotifyPropertyChanged("DensityFlowRate");
            }
        }

        private MassFlowRateMeasure densityFlowRateField; 

        /// <summary>
        /// densityStd property
        /// </summary>
		[Description("DEPRECATED. Use densityValue for new work. The density of the product after it has been  corrected to standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStd")]
        public DensityMeasure DensityStd {
            get {
                return densityStdField;
            } 
            set {
                densityStdField = value;
                NotifyPropertyChanged("DensityStd");
            }
        }

        private DensityMeasure densityStdField; 

        /// <summary>
        /// concentration property
        /// </summary>
		[Description("The concentration of the product as a volume  percentage of the product stream.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("concentration")]
        public VolumePerVolumeMeasure Concentration {
            get {
                return concentrationField;
            } 
            set {
                concentrationField = value;
                NotifyPropertyChanged("Concentration");
            }
        }

        private VolumePerVolumeMeasure concentrationField; 

        /// <summary>
        /// molecularWeight property
        /// </summary>
		[Description("The molecular weight of the product.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("molecularWeight")]
        public double? MolecularWeight {
            get {
                return molecularWeightField;
            } 
            set {
                molecularWeightField = value;
                 this.MolecularWeightSpecified = true;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private double? molecularWeightField; 

        /// <summary>
        /// molecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MolecularWeightSpecified {
            get {
                return molecularWeightSpecifiedField;
            } 
            set {
                molecularWeightSpecifiedField = value;
                NotifyPropertyChanged("MolecularWeightSpecified");
            }
        }

        private bool molecularWeightSpecifiedField; 

        /// <summary>
        /// weightPercent property
        /// </summary>
		[Description("The weight fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("weightPercent")]
        public MassConcentrationMeasurePercent WeightPercent {
            get {
                return weightPercentField;
            } 
            set {
                weightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassConcentrationMeasurePercent weightPercentField; 

        /// <summary>
        /// molePercent property
        /// </summary>
		[Description("The mole fraction of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "molarFractionMeasurePercent")]
		[XmlElement("molePercent")]
        public MolarFractionMeasurePercent MolePercent {
            get {
                return molePercentField;
            } 
            set {
                molePercentField = value;
                NotifyPropertyChanged("MolePercent");
            }
        }

        private MolarFractionMeasurePercent molePercentField; 

        /// <summary>
        /// moleAmt property
        /// </summary>
		[Description("The molar amount.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "amountOfSubstanceMeasure")]
		[XmlElement("moleAmt")]
        public AmountOfSubstanceMeasure MoleAmt {
            get {
                return moleAmtField;
            } 
            set {
                moleAmtField = value;
                NotifyPropertyChanged("MoleAmt");
            }
        }

        private AmountOfSubstanceMeasure moleAmtField; 

        /// <summary>
        /// sg property
        /// </summary>
		[Description("The specific gravity of the product.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("sg")]
        public DimensionlessMeasure SG {
            get {
                return sgField;
            } 
            set {
                sgField = value;
                NotifyPropertyChanged("SG");
            }
        }

        private DimensionlessMeasure sgField; 

        /// <summary>
        /// hcDewpoint property
        /// </summary>
		[Description("The temperature at which the heavier hydrocarbons come out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("hcDewpoint")]
        public ThermodynamicTemperatureMeasure HCDewpoint {
            get {
                return hcDewpointField;
            } 
            set {
                hcDewpointField = value;
                NotifyPropertyChanged("HCDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure hcDewpointField; 

        /// <summary>
        /// waterDewpoint property
        /// </summary>
		[Description("The temperature at which the first water comes out of solution.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("waterDewpoint")]
        public ThermodynamicTemperatureMeasure WaterDewpoint {
            get {
                return waterDewpointField;
            } 
            set {
                waterDewpointField = value;
                NotifyPropertyChanged("WaterDewpoint");
            }
        }

        private ThermodynamicTemperatureMeasure waterDewpointField; 

        /// <summary>
        /// wobbeIndex property
        /// </summary>
		[Description("Wobbe Index. A number which indicates interchangeability of fuel gasses and is obtained by dividing the heating value of a gas by the  square root of its specific gravity.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("wobbeIndex")]
        public ModulusOfCompressionMeasure WobbeIndex {
            get {
                return wobbeIndexField;
            } 
            set {
                wobbeIndexField = value;
                NotifyPropertyChanged("WobbeIndex");
            }
        }

        private ModulusOfCompressionMeasure wobbeIndexField; 

        /// <summary>
        /// grossCalorificValueStd property
        /// </summary>
		[Description("The amount of heat which would be released by the complete combustion in air of a specific quantity of product at standard temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("grossCalorificValueStd")]
        public ModulusOfCompressionMeasure GrossCalorificValueStd {
            get {
                return grossCalorificValueStdField;
            } 
            set {
                grossCalorificValueStdField = value;
                NotifyPropertyChanged("GrossCalorificValueStd");
            }
        }

        private ModulusOfCompressionMeasure grossCalorificValueStdField; 

        /// <summary>
        /// rvpStabilizedCrude property
        /// </summary>
		[Description("Reid vapor pressure of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvpStabilizedCrude")]
        public PressureMeasure RvpStabilizedCrude {
            get {
                return rvpStabilizedCrudeField;
            } 
            set {
                rvpStabilizedCrudeField = value;
                NotifyPropertyChanged("RvpStabilizedCrude");
            }
        }

        private PressureMeasure rvpStabilizedCrudeField; 

        /// <summary>
        /// bswStabilizedCrude property
        /// </summary>
		[Description("Basic sediment and water content in stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bswStabilizedCrude")]
        public VolumePerVolumeMeasure BswStabilizedCrude {
            get {
                return bswStabilizedCrudeField;
            } 
            set {
                bswStabilizedCrudeField = value;
                NotifyPropertyChanged("BswStabilizedCrude");
            }
        }

        private VolumePerVolumeMeasure bswStabilizedCrudeField; 

        /// <summary>
        /// densityStabilizedCrude property
        /// </summary>
		[Description("The density of stabilized crude.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStabilizedCrude")]
        public DensityMeasure DensityStabilizedCrude {
            get {
                return densityStabilizedCrudeField;
            } 
            set {
                densityStabilizedCrudeField = value;
                NotifyPropertyChanged("DensityStabilizedCrude");
            }
        }

        private DensityMeasure densityStabilizedCrudeField; 

        /// <summary>
        /// Reports a product flow stream.
        /// </summary>
		[Description("Reports a product flow stream.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeProduct")]
		[XmlElement("product")]
        public List<ProductVolumeProduct> Product {
            get {
                return productField;
            } 
            set {
                productField = value;
                NotifyPropertyChanged("Product");
            }
        }

         /// <summary>
         /// bool to indicate if Product has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductSpecified
         {
             get {
             if(productField!=null)
                 return productField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeProduct> productField; 

        /// <summary>
        /// A timestamped remark about the flow.
        /// </summary>
		[Description("A timestamped remark about the flow.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("comment")]
        public List<DatedComment> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the integerQualifiedCount xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="integerQualifiedCount", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the integerQualifiedCount xsd type.")]
    public partial class IntegerQualifiedCount : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IntegerQualifiedCount class.
        /// </summary>
        public IntegerQualifiedCount() {}

        /// <summary>
        /// Initializes a new instance of the IntegerQualifiedCount class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public IntegerQualifiedCount(int value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		        public string StatusSurrogate
        {
            get {
                     if(Status==null)  return null;
                     else return Status.Name; }
            set { 

                 if(this.Status== null)
                 Status= new ValueStatus(value);
                 else
                   Status.Name = value; }
        }
        /// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
        [XmlIgnore]

        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public int Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private int ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the kindQualifiedString xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="kindQualifiedString", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the kindQualifiedString xsd type.")]
    public partial class KindQualifiedString : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the KindQualifiedString class.
        /// </summary>
        public KindQualifiedString() {}

        /// <summary>
        /// Initializes a new instance of the KindQualifiedString class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public KindQualifiedString(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
		[Description("An indicator of the quality of the value.")]
        [EnergisticsDataTypeAttribute(DataType = "ValueStatus")]
        [XmlAttribute("status")]
		        public string StatusSurrogate
        {
            get {
                     if(Status==null)  return null;
                     else return Status.Name; }
            set { 

                 if(this.Status== null)
                 Status= new ValueStatus(value);
                 else
                   Status.Name = value; }
        }
        /// <summary>
        /// An indicator of the quality of the value.
        /// </summary>
        [XmlIgnore]

        public ValueStatus Status {
            get {
                return statusField;
            } 
            set {
                statusField = value;
                 this.StatusSpecified = true;
                NotifyPropertyChanged("Status");
            }
        }

        private ValueStatus statusField; 

        /// <summary>
        /// statusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusSpecified {
            get {
                return statusSpecifiedField;
            } 
            set {
                statusSpecifiedField = value;
                NotifyPropertyChanged("StatusSpecified");
            }
        }

        private bool statusSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_curveData xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_curveData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_curveData xsd type.")]
    public partial class CurveData : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The value of an independent (index) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for colums where isIndex is true. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.
        /// </summary>
		[Required]
        [Description("The value of an independent (index) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for colums where isIndex is true.  The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("index")]
        public List<double> Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

         /// <summary>
         /// bool to indicate if Index has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool IndexSpecified
         {
             get {
             if(indexField!=null)
                 return indexField.Count>0?true:false;
             else return false;
             }
         }
        private List<double> indexField; 

        /// <summary>
        /// The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false. The second to order=2. And so on. The number of index and data values must match the number of columns in the table.
        /// </summary>
		[Required]
        [Description("The value of a dependent (data) variable in a row of the curve table. The units of measure are specified in the curve definition. The first value corresponds to order=1 for columns where isIndex is false.  The second to order=2. And so on. The number of index and data values must match the number of columns in the table.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("value")]
        public List<double> Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

         /// <summary>
         /// bool to indicate if Value has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ValueSpecified
         {
             get {
             if(valueField!=null)
                 return valueField.Count>0?true:false;
             else return false;
             }
         }
        private List<double> valueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Parameter Value Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeParameterValue", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Parameter Value Component Schema.")]
    public partial class ProductVolumeParameterValue : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time at which the parameter applies. If no time is specified then the value is static.
        /// </summary>
		[Description("The date and time at which the parameter applies. If no time is specified then the value is static.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The date and time at which the parameter no longer applies. The "active" time interval is inclusive of this point. If dTimEnd is given then dTim shall also be given.
        /// </summary>
		[Description("The date and time at which the parameter no longer applies. The \"active\" time interval is inclusive of this point. If dTimEnd is given then dTim shall also be given.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// A measure value. Unless the parameter is defined as a tuple, only one value should be specified. The measure class is defined by measureClass in the parent set. The unit of measure must conform to the units allowed by the measure class in the unit dictionary file. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.
        /// </summary>
        [ComponentElement]
        [XmlElement("measureValue")]
        [EnergisticsDataTypeAttribute(DataType = "generalQualifiedMeasure")]
        public GeneralQualifiedMeasure[] MeasureValue {
            get {
                return measureValueField;
            } 
            set {
                if (value != null && CurveValueSpecified) throw new Exception("Cannot set property MeasureValue when property CurveValue is already set");
                if (value != null && IntegerValueSpecified) throw new Exception("Cannot set property MeasureValue when property IntegerValue is already set");
                if (value != null && StringValueSpecified) throw new Exception("Cannot set property MeasureValue when property StringValue is already set");
                measureValueField = value;
                MeasureValueSpecified = (value!=null);
                NotifyPropertyChanged("MeasureValue");
            }
        }

        private GeneralQualifiedMeasure[] measureValueField; 
        private bool measureValueSpecified = false; 

        /// <summary>
        /// bool to indicate if MeasureValue has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool MeasureValueSpecified
        {
            get {
                return measureValueSpecified;
            }
            set {
                measureValueSpecified= value;
            }
        }

        /// <summary>
        /// The values in one row of a curve. The aggregate of the curve rows represent the curve.
        /// </summary>
        [ComponentElement]
        [XmlElement("curveValue")]
        [EnergisticsDataTypeAttribute(DataType = "cs_curveData")]
        public CurveData[] CurveValue {
            get {
                return curveValueField;
            } 
            set {
                if (value != null && IntegerValueSpecified) throw new Exception("Cannot set property CurveValue when property IntegerValue is already set");
                if (value != null && MeasureValueSpecified) throw new Exception("Cannot set property CurveValue when property MeasureValue is already set");
                if (value != null && StringValueSpecified) throw new Exception("Cannot set property CurveValue when property StringValue is already set");
                curveValueField = value;
                CurveValueSpecified = (value!=null);
                NotifyPropertyChanged("CurveValue");
            }
        }

        private CurveData[] curveValueField; 
        private bool curveValueSpecified = false; 

        /// <summary>
        /// bool to indicate if CurveValue has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CurveValueSpecified
        {
            get {
                return curveValueSpecified;
            }
            set {
                curveValueSpecified= value;
            }
        }

        /// <summary>
        /// A string value. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.
        /// </summary>
        [ComponentElement]
        [XmlElement("stringValue")]
        [EnergisticsDataTypeAttribute(DataType = "kindQualifiedString")]
        public KindQualifiedString StringValue {
            get {
                return stringValueField;
            } 
            set {
                if (value != null && CurveValueSpecified) throw new Exception("Cannot set property StringValue when property CurveValue is already set");
                if (value != null && IntegerValueSpecified) throw new Exception("Cannot set property StringValue when property IntegerValue is already set");
                if (value != null && MeasureValueSpecified) throw new Exception("Cannot set property StringValue when property MeasureValue is already set");
                stringValueField = value;
                StringValueSpecified = (value!=null);
                NotifyPropertyChanged("StringValue");
            }
        }

        private KindQualifiedString stringValueField; 
        private bool stringValueSpecified = false; 

        /// <summary>
        /// bool to indicate if StringValue has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StringValueSpecified
        {
            get {
                return stringValueSpecified;
            }
            set {
                stringValueSpecified= value;
            }
        }

        /// <summary>
        /// An integer value. If the 'status' attribute is absent and the value is not "NaN", the data value can be assumed to be good with no restrictions. A value of "NaN" should be interpreted as null and should be not be given unless a status is also specified to explain why it is null.
        /// </summary>
        [ComponentElement]
        [XmlElement("integerValue")]
        [EnergisticsDataTypeAttribute(DataType = "integerQualifiedCount")]
        public IntegerQualifiedCount IntegerValue {
            get {
                return integerValueField;
            } 
            set {
                if (value != null && CurveValueSpecified) throw new Exception("Cannot set property IntegerValue when property CurveValue is already set");
                if (value != null && MeasureValueSpecified) throw new Exception("Cannot set property IntegerValue when property MeasureValue is already set");
                if (value != null && StringValueSpecified) throw new Exception("Cannot set property IntegerValue when property StringValue is already set");
                integerValueField = value;
                IntegerValueSpecified = (value!=null);
                NotifyPropertyChanged("IntegerValue");
            }
        }

        private IntegerQualifiedCount integerValueField; 
        private bool integerValueSpecified = false; 

        /// <summary>
        /// bool to indicate if IntegerValue has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool IntegerValueSpecified
        {
            get {
                return integerValueSpecified;
            }
            set {
                integerValueSpecified= value;
            }
        }


        /// <summary>
        /// A port related to the parameter. If a port is given then the corresponding unit usually must be given. For example, an "offset along network" parameter must specify a port from which the offset was measured. 
        /// </summary>
		[Description("A port related to the parameter. If a port is given then the corresponding unit usually must be given. For example, an \"offset along network\" parameter must specify a port from which the offset was measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("port")]
        public RefNameString Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private RefNameString portField; 

        /// <summary>
        /// A unit related to the parameter. For example, an "offset along network" parameter must specify a port (on a unit) from which the offset was measured. 
        /// </summary>
		[Description("A unit related to the parameter. For example, an \"offset along network\" parameter must specify a port (on a unit) from which the offset was measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("unit")]
        public RefNameString Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private RefNameString unitField; 

        /// <summary>
        /// An indication of some sort of abnormal condition relative this parameter.
        /// </summary>
		[Description("An indication of some sort of abnormal condition relative this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeAlert")]
		[XmlElement("alert")]
        public ProductVolumeAlert Alert {
            get {
                return alertField;
            } 
            set {
                alertField = value;
                NotifyPropertyChanged("Alert");
            }
        }

        private ProductVolumeAlert alertField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The definition of a curve.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_curveDefinition", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The definition of a curve.")]
    public partial class CurveDefinition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The order of the value in the index or data tuple. If isIndex is true this is the order of the (independent) index element. If isIndex is false, this is the order of the (dependent) value element.
        /// </summary>
		[Required]
        [Description("The order of the value in the index or data tuple. If isIndex is true this is the order of the (independent) index element. If isIndex is false, this is the order of the (dependent) value element.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("order")]
        public short? Order {
            get {
                return orderField;
            } 
            set {
                orderField = value;
                NotifyPropertyChanged("Order");
            }
        }

        private short? orderField; 

        /// <summary>
        /// The name of the variable in this curve.
        /// </summary>
		[Required]
        [StringLength(40)]
        [Description("The name of the variable in this curve.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("parameter")]
        public string Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

        private string parameterField; 

        /// <summary>
        /// True (equal "1" or "true") indicates that this is an independent variable in this curve. At least one column column should be flagged as independent.
        /// </summary>
		[Description("True (equal \"1\" or \"true\") indicates that this is an independent variable in this curve.  At least one column column should be flagged as independent.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isIndex")]
        public bool? IsIndex {
            get {
                return isIndexField;
            } 
            set {
                isIndexField = value;
                 this.IsIndexSpecified = true;
                NotifyPropertyChanged("IsIndex");
            }
        }

        private bool? isIndexField; 

        /// <summary>
        /// isIndexSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IsIndexSpecified {
            get {
                return isIndexSpecifiedField;
            } 
            set {
                isIndexSpecifiedField = value;
                NotifyPropertyChanged("IsIndexSpecified");
            }
        }

        private bool isIndexSpecifiedField; 

        /// <summary>
        /// The measure class of the variable. This defines which units of measure are valid for the value.
        /// </summary>
		[Required]
        [Description("The measure class of the variable. This defines which units of measure are valid for the value.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// The unit of measure of the variable. The unit of measure must match a unit allowed by the measure class.
        /// </summary>
		[Required]
        [StringLength(24)]
        [Description("The unit of measure of the variable. The unit of measure must match a unit allowed by the measure class.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
		[XmlElement("unit")]
        public string Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private string unitField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume Facility Parameter Set Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeParameterSet", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume Facility Parameter Set Component Schema.")]
    public partial class ProductVolumeParameterSet : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the facility parameter. This should reflect the business semantics of all values in the set and not the underlying kind. For example, specify "diameter" rather than "length" or "distance".
        /// </summary>
		[Required]
        [Description("The name of the facility parameter. This should reflect the business semantics of all values in the set and not   the underlying kind. For example, specify \"diameter\" rather than \"length\" or \"distance\".")]
        [EnergisticsDataTypeAttribute(DataType = "FacilityParameter")]
		[XmlElement("name")]
        public FacilityParameter Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private FacilityParameter nameField; 

        /// <summary>
        /// The "PRODML Relative Identifier" of a child of the parent facility. The idenfifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy.
        /// </summary>
		[Description("The \"PRODML Relative Identifier\" of a child of the parent facility. The idenfifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the  parent facilityParent2/facilityParent1/name identification hierarchy.")]
        [EnergisticsDataTypeAttribute(DataType = "prodmlRelativeIdentifier")]
		[XmlElement("childFacilityIdentifier", DataType="anyURI")]
        public string ChildFacilityIdentifier {
            get {
                return childFacilityIdentifierField;
            } 
            set {
                childFacilityIdentifierField = value;
                NotifyPropertyChanged("ChildFacilityIdentifier");
            }
        }

        private string childFacilityIdentifierField; 

        /// <summary>
        /// The port to which this parameter is assigned. This must be a port on the unit representing the parent facility of this parameter. If not specified then the parameter represents the unit.
        /// </summary>
		[Description("The port to which this parameter is assigned. This must be a port on the unit representing the parent facility of this parameter. If not specified then the parameter represents the unit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("port")]
        public RefNameString Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private RefNameString portField; 

        /// <summary>
        /// If the value is a measure (value with unit of measure), this defines the measurement class of the value. The units of measure for the value must conform to the list allowed by the measurement class in the unit dictionary file. Mutually exclusive with curveDefinition.
        /// </summary>
		[Description("If the value is a measure (value with unit of measure), this defines the  measurement class of the value. The units of measure for the value must conform to the  list allowed by the measurement class in the unit dictionary file. Mutually exclusive with curveDefinition.")]
        [EnergisticsDataTypeAttribute(DataType = "MeasureClass")]
		[XmlElement("measureClass")]
        public MeasureClass MeasureClass {
            get {
                return measureClassField;
            } 
            set {
                measureClassField = value;
                 this.MeasureClassSpecified = true;
                NotifyPropertyChanged("MeasureClass");
            }
        }

        private MeasureClass measureClassField; 

        /// <summary>
        /// measureClassSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasureClassSpecified {
            get {
                return measureClassSpecifiedField;
            } 
            set {
                measureClassSpecifiedField = value;
                NotifyPropertyChanged("MeasureClassSpecified");
            }
        }

        private bool measureClassSpecifiedField; 

        /// <summary>
        ///  The pointer to the coordinate reference system. This is needed for coordinates such as measure depth to specify the reference datum. 
        /// </summary>
		[Description("The pointer to the coordinate reference system. This is needed for coordinates such as measure depth to specify the reference datum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("coordinateReferenceSystem")]
        public RefNameString CoordinateReferenceSystem {
            get {
                return coordinateReferenceSystemField;
            } 
            set {
                coordinateReferenceSystemField = value;
                NotifyPropertyChanged("CoordinateReferenceSystem");
            }
        }

        private RefNameString coordinateReferenceSystemField; 

        /// <summary>
        /// If the value is a curve, this defines the meaning of the one column in the table representing the curve. Mutually exclusive with measureClass.
        /// </summary>
		[Description("If the value is a curve, this defines the meaning of the one column  in the table representing the curve. Mutually exclusive with measureClass.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_curveDefinition")]
		[XmlElement("curveDefinition")]
        public List<CurveDefinition> CurveDefinition {
            get {
                return curveDefinitionField;
            } 
            set {
                curveDefinitionField = value;
                NotifyPropertyChanged("CurveDefinition");
            }
        }

         /// <summary>
         /// bool to indicate if CurveDefinition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CurveDefinitionSpecified
         {
             get {
             if(curveDefinitionField!=null)
                 return curveDefinitionField.Count>0?true:false;
             else return false;
             }
         }
        private List<CurveDefinition> curveDefinitionField; 

        /// <summary>
        /// Qualifies the type of parameter that is being reported.
        /// </summary>
		[Description("Qualifies the type of parameter that is being reported.")]
        [EnergisticsDataTypeAttribute(DataType = "FlowQualifier")]
		[XmlElement("qualifier")]
        public FlowQualifier Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private FlowQualifier qualifierField; 

        /// <summary>
        /// qualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return qualifierSpecifiedField;
            } 
            set {
                qualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool qualifierSpecifiedField; 

        /// <summary>
        /// Defines a specialization of the qualifier value. This should only be given if a qualifier is given.
        /// </summary>
		[Description("Defines a specialization of the qualifier value. This should only be given if a qualifier is given.")]
        [EnergisticsDataTypeAttribute(DataType = "FlowSubQualifier")]
		[XmlElement("subQualifier")]
        public FlowSubQualifier SubQualifier {
            get {
                return subQualifierField;
            } 
            set {
                subQualifierField = value;
                 this.SubQualifierSpecified = true;
                NotifyPropertyChanged("SubQualifier");
            }
        }

        private FlowSubQualifier subQualifierField; 

        /// <summary>
        /// subQualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SubQualifierSpecified {
            get {
                return subQualifierSpecifiedField;
            } 
            set {
                subQualifierSpecifiedField = value;
                NotifyPropertyChanged("SubQualifierSpecified");
            }
        }

        private bool subQualifierSpecifiedField; 

        /// <summary>
        /// A timestamp representing the version of this data. A parameter set with a more recent timestamp will represent the "current" version.
        /// </summary>
		[Description("A timestamp representing the version of this data.  A parameter set with a more recent timestamp will represent  the \"current\" version.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("version")]
        public Timestamp? Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                 this.VersionSpecified = true;
                NotifyPropertyChanged("Version");
            }
        }

        private Timestamp? versionField; 

        /// <summary>
        /// versionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool VersionSpecified {
            get {
                return versionSpecifiedField;
            } 
            set {
                versionSpecifiedField = value;
                NotifyPropertyChanged("VersionSpecified");
            }
        }

        private bool versionSpecifiedField; 

        /// <summary>
        /// Identifies the source of the version. This will commonly be the name of the software which created the version. 
        /// </summary>
		[StringLength(64)]
        [Description("Identifies the source of the version.  This will commonly be the name of the software which created the version.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("versionSource")]
        public string VersionSource {
            get {
                return versionSourceField;
            } 
            set {
                versionSourceField = value;
                NotifyPropertyChanged("VersionSource");
            }
        }

        private string versionSourceField; 

        /// <summary>
        /// The type of product that is being reported. This would be useful for something like specifying a tank procuct volume or level.
        /// </summary>
		[Description("The type of product that is being reported. This would be useful for something like specifying a tank procuct volume or level.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("product")]
        public ReportingProduct Product {
            get {
                return productField;
            } 
            set {
                productField = value;
                 this.ProductSpecified = true;
                NotifyPropertyChanged("Product");
            }
        }

        private ReportingProduct productField; 

        /// <summary>
        /// productSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProductSpecified {
            get {
                return productSpecifiedField;
            } 
            set {
                productSpecifiedField = value;
                NotifyPropertyChanged("ProductSpecified");
            }
        }

        private bool productSpecifiedField; 

        /// <summary>
        /// The type of period that is being reported.
        /// </summary>
		[Description("The type of period that is being reported.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingPeriod")]
		[XmlElement("periodKind")]
        public ReportingPeriod PeriodKind {
            get {
                return periodKindField;
            } 
            set {
                periodKindField = value;
                 this.PeriodKindSpecified = true;
                NotifyPropertyChanged("PeriodKind");
            }
        }

        private ReportingPeriod periodKindField; 

        /// <summary>
        /// periodKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeriodKindSpecified {
            get {
                return periodKindSpecifiedField;
            } 
            set {
                periodKindSpecifiedField = value;
                NotifyPropertyChanged("PeriodKindSpecified");
            }
        }

        private bool periodKindSpecifiedField; 

        /// <summary>
        /// A parameter value, possibly at a time. If a time is not given then only one parameter should be given. If a time is specified with one value then time should be specified for all values. Each value in a time series should be of the same underling kind of value (for example, a length measure).
        /// </summary>
		[Required]
        [Description("A parameter value, possibly at a time. If a time is not given then only one parameter should be given. If a time is specified with one value then time should be specified for all values. Each value in a time series should be of the same  underling kind of value (for example, a length measure).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeParameterValue")]
		[XmlElement("parameter")]
        public List<ProductVolumeParameterValue> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeParameterValue> parameterField; 

        /// <summary>
        /// A comment about the parameter.
        /// </summary>
		[StringLength(4000)]
        [Description("A comment about the parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Report Facility Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeFacility", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Report Facility Component Schema.")]
    public partial class ProductVolumeFacility : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the facility. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Required]
        [Description("The name of the facility. The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("name")]
        public FacilityIdentifierStruct Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private FacilityIdentifierStruct nameField; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility. For example, if name represents a completion, then facilityParent1 would represent the name of the well within which name was unique. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another  facility, the name of the parent facility. For example, if name represents a completion, then facilityParent1 would represent the name of the well within which name was unique. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facilityParent1")]
        public FacilityIdentifierStruct FacilityParent1 {
            get {
                return facilityParent1Field;
            } 
            set {
                facilityParent1Field = value;
                NotifyPropertyChanged("FacilityParent1");
            }
        }

        private FacilityIdentifierStruct facilityParent1Field; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility of parent1. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another  facility, the name of the parent facility of parent1.  The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facilityParent2")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return facilityParent2Field;
            } 
            set {
                facilityParent2Field = value;
                NotifyPropertyChanged("FacilityParent2");
            }
        }

        private FacilityIdentifierStruct facilityParent2Field; 

        /// <summary>
        /// An alternatative name of a facility. This is generally unique within a naming system. The above contextually unique name (that is, within the context of a parent) should also be listed as an alias.
        /// </summary>
		[Description("An alternatative name of a facility. This is generally unique within a naming system. The above contextually unique name (that is, within  the context of a parent) should also be listed as an alias.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("facilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return facilityAliasField;
            } 
            set {
                facilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(facilityAliasField!=null)
                 return facilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> facilityAliasField; 

        /// <summary>
        /// The Product Flow Unit representing the facility. This must be unique within the context of the Product Flow Network.
        /// </summary>
		[Description("The Product Flow Unit representing the facility. This must be unique within the context of the Product Flow Network.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("unit")]
        public RefNameString Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

        private RefNameString unitField; 

        /// <summary>
        /// The Product Flow Network representing the facility. This can only be given if unit is given. This is only required if the network is not the same as the primary network that represents the Product Flow Model. This must be unique within the context of the Product Flow Model represented by this report.
        /// </summary>
		[Description("The Product Flow Network representing the facility. This can only be given if unit is given. This is only required if the network is not the same as the primary network that represents the Product Flow Model. This must be unique within the context of the Product Flow Model represented  by this report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("network")]
        public RefNameString Network {
            get {
                return networkField;
            } 
            set {
                networkField = value;
                NotifyPropertyChanged("Network");
            }
        }

        private RefNameString networkField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to this facility.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to this facility.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(contextFacilityField!=null)
                 return contextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> contextFacilityField; 

        /// <summary>
        /// The status of the well. In PRODML, the value of "active -- injecting" has been DEPRECATED. Instead, use "active" with wellProducing=true. In PRODML, the value of "active -- producing" has been DEPRECATED. Instead, use "active" with wellInjecting=true.
        /// </summary>
		[Description("The status of the well. In PRODML, the value of \"active -- injecting\" has been DEPRECATED. Instead, use \"active\" with wellProducing=true. In PRODML, the value of \"active -- producing\" has been DEPRECATED. Instead, use \"active\" with wellInjecting=true.")]
        [EnergisticsDataTypeAttribute(DataType = "WellStatus")]
		[XmlElement("statusWell")]
        public WellStatus? StatusWell {
            get {
                return statusWellField;
            } 
            set {
                statusWellField = value;
                 this.StatusWellSpecified = true;
                NotifyPropertyChanged("StatusWell");
            }
        }

        private WellStatus? statusWellField; 

        /// <summary>
        /// statusWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StatusWellSpecified {
            get {
                return statusWellSpecifiedField;
            } 
            set {
                statusWellSpecifiedField = value;
                NotifyPropertyChanged("StatusWellSpecified");
            }
        }

        private bool statusWellSpecifiedField; 

        /// <summary>
        /// POSC well fluid. The type of fluid being produced from or injected into a well facility. 
        /// </summary>
		[Description("POSC well fluid. The type of fluid being produced from or injected  into a well facility.")]
        [EnergisticsDataTypeAttribute(DataType = "WellFluid")]
		[XmlElement("fluidWell")]
        public WellFluid? FluidWell {
            get {
                return fluidWellField;
            } 
            set {
                fluidWellField = value;
                 this.FluidWellSpecified = true;
                NotifyPropertyChanged("FluidWell");
            }
        }

        private WellFluid? fluidWellField; 

        /// <summary>
        /// fluidWellSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FluidWellSpecified {
            get {
                return fluidWellSpecifiedField;
            } 
            set {
                fluidWellSpecifiedField = value;
                NotifyPropertyChanged("FluidWellSpecified");
            }
        }

        private bool fluidWellSpecifiedField; 

        /// <summary>
        /// The lift method being used to operate the well.
        /// </summary>
		[Description("The lift method being used to operate the well.")]
        [EnergisticsDataTypeAttribute(DataType = "WellOperationMethod")]
		[XmlElement("operatingMethod")]
        public WellOperationMethod OperatingMethod {
            get {
                return operatingMethodField;
            } 
            set {
                operatingMethodField = value;
                 this.OperatingMethodSpecified = true;
                NotifyPropertyChanged("OperatingMethod");
            }
        }

        private WellOperationMethod operatingMethodField; 

        /// <summary>
        /// operatingMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OperatingMethodSpecified {
            get {
                return operatingMethodSpecifiedField;
            } 
            set {
                operatingMethodSpecifiedField = value;
                NotifyPropertyChanged("OperatingMethodSpecified");
            }
        }

        private bool operatingMethodSpecifiedField; 

        /// <summary>
        /// True (or 1) indicates that the well is producing. False (or 0) or not given indicates that the well is not producing. This only applies if the facility is a well or wellbore.
        /// </summary>
		[Description("True (or 1) indicates that the well is producing. False (or 0) or not given indicates that the well is not producing. This only applies if the facility is a well or wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("wellProducing")]
        public bool? WellProducing {
            get {
                return wellProducingField;
            } 
            set {
                wellProducingField = value;
                 this.WellProducingSpecified = true;
                NotifyPropertyChanged("WellProducing");
            }
        }

        private bool? wellProducingField; 

        /// <summary>
        /// wellProducingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WellProducingSpecified {
            get {
                return wellProducingSpecifiedField;
            } 
            set {
                wellProducingSpecifiedField = value;
                NotifyPropertyChanged("WellProducingSpecified");
            }
        }

        private bool wellProducingSpecifiedField; 

        /// <summary>
        /// True (or 1) indicates that the well is injecting. False (or 0) or not given indicates that the well is not injecting. This only applies if the facility is a well or wellbore.
        /// </summary>
		[Description("True (or 1) indicates that the well is injecting. False (or 0) or not given indicates that the well is not injecting. This only applies if the facility is a well or wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("wellInjecting")]
        public bool? WellInjecting {
            get {
                return wellInjectingField;
            } 
            set {
                wellInjectingField = value;
                 this.WellInjectingSpecified = true;
                NotifyPropertyChanged("WellInjecting");
            }
        }

        private bool? wellInjectingField; 

        /// <summary>
        /// wellInjectingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WellInjectingSpecified {
            get {
                return wellInjectingSpecifiedField;
            } 
            set {
                wellInjectingSpecifiedField = value;
                NotifyPropertyChanged("WellInjectingSpecified");
            }
        }

        private bool wellInjectingSpecifiedField; 

        /// <summary>
        /// The storage capacity of the facility (e.g., a tank).
        /// </summary>
		[Description("The storage capacity of the facility (e.g., a tank).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("capacity")]
        public VolumeMeasure Capacity {
            get {
                return capacityField;
            } 
            set {
                capacityField = value;
                NotifyPropertyChanged("Capacity");
            }
        }

        private VolumeMeasure capacityField; 

        /// <summary>
        /// The amount of time that the facility was active during the reporting period.
        /// </summary>
		[Description("The amount of time that the facility was active during the  reporting period.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("operationTime")]
        public TimeMeasure OperationTime {
            get {
                return operationTimeField;
            } 
            set {
                operationTimeField = value;
                NotifyPropertyChanged("OperationTime");
            }
        }

        private TimeMeasure operationTimeField; 

        /// <summary>
        /// The reason for any down time during the reporting period.
        /// </summary>
		[Description("The reason for any down time during the reporting period.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("downtimeReason")]
        public List<DatedComment> DowntimeReason {
            get {
                return downtimeReasonField;
            } 
            set {
                downtimeReasonField = value;
                NotifyPropertyChanged("DowntimeReason");
            }
        }

         /// <summary>
         /// bool to indicate if DowntimeReason has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DowntimeReasonSpecified
         {
             get {
             if(downtimeReasonField!=null)
                 return downtimeReasonField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> downtimeReasonField; 

        /// <summary>
        /// Usage values for one parameter associated with the facility.
        /// </summary>
		[Description("Usage values for one parameter associated with the facility.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeParameterSet")]
		[XmlElement("parameterSet")]
        public List<ProductVolumeParameterSet> ParameterSet {
            get {
                return parameterSetField;
            } 
            set {
                parameterSetField = value;
                NotifyPropertyChanged("ParameterSet");
            }
        }

         /// <summary>
         /// bool to indicate if ParameterSet has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSetSpecified
         {
             get {
             if(parameterSetField!=null)
                 return parameterSetField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeParameterSet> parameterSetField; 

        /// <summary>
        /// Reports a flow of a product.
        /// </summary>
		[Description("Reports a flow of a product.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeFlow")]
		[XmlElement("flow")]
        public List<ProductVolumeFlow> Flow {
            get {
                return flowField;
            } 
            set {
                flowField = value;
                NotifyPropertyChanged("Flow");
            }
        }

         /// <summary>
         /// bool to indicate if Flow has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FlowSpecified
         {
             get {
             if(flowField!=null)
                 return flowField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeFlow> flowField; 

        /// <summary>
        /// A timestamped remark about the facility.
        /// </summary>
		[Description("A timestamped remark about the facility.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("comment")]
        public List<DatedComment> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Product Volume object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_productVolume", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The non-contextual content of a WITSML Product Volume object.")]
    public partial class ProductVolume : Object, IProdmlDataObject, ICommonDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the Product Volume Report.
        /// </summary>
		[Required]
        [Description("Human recognizable context for the Product Volume Report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("name")]
        public NameStruct Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private NameStruct nameField; 

        /// <summary>
        /// The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility which is represented by this report.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(contextFacilityField!=null)
                 return contextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> contextFacilityField; 

        /// <summary>
        /// The type of report.
        /// </summary>
		[StringLength(40)]
        [Description("The type of report.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("kind")]
        public string Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string kindField; 

        /// <summary>
        /// The type of period that is being reported. This value must be consistent with the reporting start and end values.
        /// </summary>
		[Description("The type of period that is being reported. This value must be consistent with the reporting start and end values.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingPeriod")]
		[XmlElement("periodKind")]
        public ReportingPeriod PeriodKind {
            get {
                return periodKindField;
            } 
            set {
                periodKindField = value;
                 this.PeriodKindSpecified = true;
                NotifyPropertyChanged("PeriodKind");
            }
        }

        private ReportingPeriod periodKindField; 

        /// <summary>
        /// periodKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeriodKindSpecified {
            get {
                return periodKindSpecifiedField;
            } 
            set {
                periodKindSpecifiedField = value;
                NotifyPropertyChanged("PeriodKindSpecified");
            }
        }

        private bool periodKindSpecifiedField; 

        /// <summary>
        /// The beginning date and time that the report represents. If you set this property, you must also set DateTimeEnd.
        /// </summary>
        [XmlElement("dTimStart")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property DateTimeStart when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property DateTimeStart when property DateStart is already set");
                if (value != null && MonthSpecified) throw new Exception("Cannot set property DateTimeStart when property Month is already set");
                dTimStartField = value;
                DateTimeStartSpecified = (value!=null);
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? dTimStartField; 
        private bool dateTimeStartSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTimeStart has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeStartSpecified
        {
            get {
                return dateTimeStartSpecified;
            }
            set {
                dateTimeStartSpecified= value;
            }
        }

        /// <summary>
        /// The ending date and time that the report represents. If you set this property, you must also set DateTimeStart.
        /// </summary>
        [XmlElement("dTimEnd")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property DateTimeEnd when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property DateTimeEnd when property DateStart is already set");
                if (value != null && MonthSpecified) throw new Exception("Cannot set property DateTimeEnd when property Month is already set");
                dTimEndField = value;
                DateTimeEndSpecified = (value!=null);
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? dTimEndField; 
        private bool dateTimeEndSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTimeEnd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeEndSpecified
        {
            get {
                return dateTimeEndSpecified;
            }
            set {
                dateTimeEndSpecified= value;
            }
        }

        /// <summary>
        /// The beginning date that the report represents. If you set this property, you must also set DateEnd.
        /// </summary>
        [XmlElement("dateStart", DataType="date")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
        public DateTime? DateStart {
            get {
                return dateStartField;
            } 
            set {
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property DateStart when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property DateStart when property DateTimeStart is already set");
                if (value != null && MonthSpecified) throw new Exception("Cannot set property DateStart when property Month is already set");
                dateStartField = value;
                DateStartSpecified = (value!=null);
                NotifyPropertyChanged("DateStart");
            }
        }

        private DateTime? dateStartField; 
        private bool dateStartSpecified = false; 

        /// <summary>
        /// bool to indicate if DateStart has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateStartSpecified
        {
            get {
                return dateStartSpecified;
            }
            set {
                dateStartSpecified= value;
            }
        }

        /// <summary>
        /// The ending date that the report represents. If you set this property, you must also set DateStart.
        /// </summary>
        [XmlElement("dateEnd", DataType="date")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
        public DateTime? DateEnd {
            get {
                return dateEndField;
            } 
            set {
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property DateEnd when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property DateEnd when property DateTimeStart is already set");
                if (value != null && MonthSpecified) throw new Exception("Cannot set property DateEnd when property Month is already set");
                dateEndField = value;
                DateEndSpecified = (value!=null);
                NotifyPropertyChanged("DateEnd");
            }
        }

        private DateTime? dateEndField; 
        private bool dateEndSpecified = false; 

        /// <summary>
        /// bool to indicate if DateEnd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateEndSpecified
        {
            get {
                return dateEndSpecified;
            }
            set {
                dateEndSpecified= value;
            }
        }

        /// <summary>
        /// The ending date that the report represents.
        /// </summary>
        [XmlElement("month")]
        [EnergisticsDataTypeAttribute(DataType = "calendarMonth")]
        public string Month {
            get {
                return monthField;
            } 
            set {
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property Month when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property Month when property DateTimeStart is already set");
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property Month when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property Month when property DateStart is already set");
                monthField = value;
                MonthSpecified = (value!=null);
                NotifyPropertyChanged("Month");
            }
        }

        private string monthField; 
        private bool monthSpecified = false; 

        /// <summary>
        /// bool to indicate if Month has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool MonthSpecified
        {
            get {
                return monthSpecified;
            }
            set {
                monthSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType6> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType6> ItemsElementNameField; 

        /// <summary>
        /// The minimum time index contained within the report. For the purposes of this parameter, a "period" or "facility parameter" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The minimum time index contained within the report. For the purposes of this parameter, a \"period\" or \"facility parameter\" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return dTimMinField;
            } 
            set {
                dTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime dTimMinField; 

        /// <summary>
        /// The maximum time index contained within the report. For the purposes of this parameter, a "period" or "facility parameter" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The maximum time index contained within the report. For the purposes of this parameter, a \"period\" or \"facility parameter\" without any time data should be assumed to have the time associated with the overall report. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return dTimMaxField;
            } 
            set {
                dTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime dTimMaxField; 

        /// <summary>
        /// The definition of the "current time" index for this report. The current time index is a server query parameter which requests the selection of a single node from a recurring "period" set (e.g., the data related to one point in a time series). For the purposes of this parameter, a "period" without any time data should be assumed to have the time associated with the overall report. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The definition of the \"current time\" index for this report. The current time index is a server query parameter which requests the  selection of a single node from a recurring \"period\" set  (e.g., the data related to one point in a time series). For the purposes of this parameter, a \"period\" without any time data should be assumed to have the time associated with the overall report. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimCurrent")]
        public Timestamp? DateTimeCurrent {
            get {
                return dTimCurrentField;
            } 
            set {
                dTimCurrentField = value;
                 this.DateTimeCurrentSpecified = true;
                NotifyPropertyChanged("DateTimeCurrent");
            }
        }

        private Timestamp? dTimCurrentField; 

        /// <summary>
        /// dTimCurrentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCurrentSpecified {
            get {
                return dTimCurrentSpecifiedField;
            } 
            set {
                dTimCurrentSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCurrentSpecified");
            }
        }

        private bool dTimCurrentSpecifiedField; 

        /// <summary>
        /// The calculation method for for "filling in" values in an indexed set. If not given, the default is that no calculations are performed to create data where none exists within an existing set. This is not to be construed as to prevent concepts such as simulation and forcasting from being applied in order to create a new set. This is a server query parameter.
        /// </summary>
		[Description("The calculation method for for \"filling in\" values in an indexed set. If not given, the default is that no calculations are performed to create data where none exists within an existing set.  This is not to be construed as to prevent concepts such as simulation  and forcasting from being applied in order to create a new set. This is a server query parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "CalculationMethod")]
		[XmlElement("calculationMethod")]
        public CalculationMethod CalculationMethod {
            get {
                return calculationMethodField;
            } 
            set {
                calculationMethodField = value;
                 this.CalculationMethodSpecified = true;
                NotifyPropertyChanged("CalculationMethod");
            }
        }

        private CalculationMethod calculationMethodField; 

        /// <summary>
        /// calculationMethodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CalculationMethodSpecified {
            get {
                return calculationMethodSpecifiedField;
            } 
            set {
                calculationMethodSpecifiedField = value;
                NotifyPropertyChanged("CalculationMethodSpecified");
            }
        }

        private bool calculationMethodSpecifiedField; 

        /// <summary>
        /// The operator of the facilities in the report.
        /// </summary>
		[Description("The operator of the facilities in the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("operator")]
        public BusinessAssociate Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate operatorField; 

        /// <summary>
        /// The tile of the report if different from the name of the report.
        /// </summary>
		[Description("The tile of the report if different from the name of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("title")]
        public NameStruct Title {
            get {
                return titleField;
            } 
            set {
                titleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private NameStruct titleField; 

        /// <summary>
        /// The geographic context of the report.
        /// </summary>
		[Description("The geographic context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_geographicContext")]
		[XmlElement("geographicContext")]
        public GeographicContext GeographicContext {
            get {
                return geographicContextField;
            } 
            set {
                geographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext geographicContextField; 

        /// <summary>
        /// The date that the report was issued.
        /// </summary>
		[Description("The date that the report was issued.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("issueDate", DataType="date")]
        public DateTime? IssueDate {
            get {
                return issueDateField;
            } 
            set {
                issueDateField = value;
                 this.IssueDateSpecified = true;
                NotifyPropertyChanged("IssueDate");
            }
        }

        private DateTime? issueDateField; 

        /// <summary>
        /// issueDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IssueDateSpecified {
            get {
                return issueDateSpecifiedField;
            } 
            set {
                issueDateSpecifiedField = value;
                NotifyPropertyChanged("IssueDateSpecified");
            }
        }

        private bool issueDateSpecifiedField; 

        /// <summary>
        /// The person or company that issued the report. This may contain the role of the person or company within the context of the report.
        /// </summary>
		[Description("The person or company that issued the report. This may contain the role of the person or company within the context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("issuedBy")]
        public BusinessAssociate IssuedBy {
            get {
                return issuedByField;
            } 
            set {
                issuedByField = value;
                NotifyPropertyChanged("IssuedBy");
            }
        }

        private BusinessAssociate issuedByField; 

        /// <summary>
        /// The date that the report was approved.
        /// </summary>
		[Description("The date that the report was approved.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("approvalDate", DataType="date")]
        public DateTime? ApprovalDate {
            get {
                return approvalDateField;
            } 
            set {
                approvalDateField = value;
                 this.ApprovalDateSpecified = true;
                NotifyPropertyChanged("ApprovalDate");
            }
        }

        private DateTime? approvalDateField; 

        /// <summary>
        /// approvalDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ApprovalDateSpecified {
            get {
                return approvalDateSpecifiedField;
            } 
            set {
                approvalDateSpecifiedField = value;
                NotifyPropertyChanged("ApprovalDateSpecified");
            }
        }

        private bool approvalDateSpecifiedField; 

        /// <summary>
        /// The person or company that approved the report. This may contain the role of the person or company within the context of the report.
        /// </summary>
		[Description("The person or company that approved the report. This may contain the role of the person or company within the context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("approver")]
        public BusinessAssociate Approver {
            get {
                return approverField;
            } 
            set {
                approverField = value;
                NotifyPropertyChanged("Approver");
            }
        }

        private BusinessAssociate approverField; 

        /// <summary>
        /// The Product Flow Model for the overall installation. This model represents all Product Flow Units referenced within this report.
        /// </summary>
		[Description("The Product Flow Model for the overall installation. This model represents all Product Flow Units referenced within this report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("productFlowModel")]
        public RefNameString ProductFlowModel {
            get {
                return productFlowModelField;
            } 
            set {
                productFlowModelField = value;
                NotifyPropertyChanged("ProductFlowModel");
            }
        }

        private RefNameString productFlowModelField; 

        /// <summary>
        /// Defines the default standard temperature and pressure to which all volumes, densities and flow rates in this report have been corrected. The default may be locally overridden for an individual value. If not specified, then the conditions must be presumed to be ambient conditions (i.e., uncorrected) unless otherwise specified at a local level.
        /// </summary>
		[Description("Defines the default standard temperature and pressure to which all volumes, densities and flow rates in this report have been corrected. The default may be locally overridden for an individual value. If not specified, then the conditions must be presumed to be ambient conditions  (i.e., uncorrected) unless otherwise specified at a local level.")]
        [EnergisticsDataTypeAttribute(DataType = "StandardCondition")]
		[XmlElement("standardTempPres")]
        public StandardCondition StandardTempPres {
            get {
                return standardTempPresField;
            } 
            set {
                standardTempPresField = value;
                 this.StandardTempPresSpecified = true;
                NotifyPropertyChanged("StandardTempPres");
            }
        }

        private StandardCondition standardTempPresField; 

        /// <summary>
        /// standardTempPresSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StandardTempPresSpecified {
            get {
                return standardTempPresSpecifiedField;
            } 
            set {
                standardTempPresSpecifiedField = value;
                NotifyPropertyChanged("StandardTempPresSpecified");
            }
        }

        private bool standardTempPresSpecifiedField; 

        /// <summary>
        /// A business unit and related account or ownership share information.
        /// </summary>
		[Description("A business unit and related account or ownership share information.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeBusinessUnit")]
		[XmlElement("businessUnit")]
        public List<ProductVolumeBusinessUnit> BusinessUnit {
            get {
                return businessUnitField;
            } 
            set {
                businessUnitField = value;
                NotifyPropertyChanged("BusinessUnit");
            }
        }

         /// <summary>
         /// bool to indicate if BusinessUnit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BusinessUnitSpecified
         {
             get {
             if(businessUnitField!=null)
                 return businessUnitField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBusinessUnit> businessUnitField; 

        /// <summary>
        /// A facility for which product information is being reported.
        /// </summary>
		[Required]
        [Description("A facility for which product information is being reported.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeFacility")]
		[XmlElement("facility")]
        public List<ProductVolumeFacility> Facility {
            get {
                return facilityField;
            } 
            set {
                facilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

         /// <summary>
         /// bool to indicate if Facility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilitySpecified
         {
             get {
             if(facilityField!=null)
                 return facilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeFacility> facilityField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The business associate describes any company, person, group, consultant, etc, which is associated within a context (e.g., a well). The information contained in this module is: (1) contact information, such as address, phone numbers, email, (2) alternate name, or aliases, and (3) associations, such as the business associate that this one is associated  with, or a contact who is associated with this business associate. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_businessAssociate", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The business associate describes any company, person, group, consultant, etc, which is associated within a context (e.g., a well). The information contained in this module is: (1) contact information, such as address, phone numbers, email, (2) alternate name, or aliases, and (3) associations, such as the business associate that this one is associated  with, or a contact who is associated with this business associate. ")]
    public partial class BusinessAssociate : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the business associate. This can be the name of a person, business, group, etc.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the business associate.  This can be the name of a person, business, group, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The role of the business associate within the context. For example, "driller" or "operator", "lead agency - CEQA compliance" "regulatory contact", "safety contact". A business associate will generally have one role but the role may be called different things in different naming systems.
        /// </summary>
		[Description("The role of the business associate within the  context. For example, \"driller\" or \"operator\",  \"lead agency - CEQA compliance\" \"regulatory contact\", \"safety contact\".  A business associate will generally have one role but the role may be called different things in different naming systems.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("role")]
        public List<NameStruct> Role {
            get {
                return roleField;
            } 
            set {
                roleField = value;
                NotifyPropertyChanged("Role");
            }
        }

         /// <summary>
         /// bool to indicate if Role has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RoleSpecified
         {
             get {
             if(roleField!=null)
                 return roleField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> roleField; 

        /// <summary>
        /// If the business associate is a person, this specifies the component names of the person.
        /// </summary>
		[Description("If the business associate is a person, this specifies the component names of the person.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_personName")]
		[XmlElement("personName")]
        public PersonName PersonName {
            get {
                return personNameField;
            } 
            set {
                personNameField = value;
                NotifyPropertyChanged("PersonName");
            }
        }

        private PersonName personNameField; 

        /// <summary>
        /// The alias is an alternate name of a business associate. It is generally associated with a naming system. An alias is not necessarily unique within the naming system. 
        /// </summary>
		[Description("The alias is an alternate name of a  business associate. It is generally associated with a  naming system. An alias is not necessarily unique  within the naming system.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("alias")]
        public List<NameStruct> Alias {
            get {
                return aliasField;
            } 
            set {
                aliasField = value;
                NotifyPropertyChanged("Alias");
            }
        }

         /// <summary>
         /// bool to indicate if Alias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AliasSpecified
         {
             get {
             if(aliasField!=null)
                 return aliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> aliasField; 

        /// <summary>
        /// Note that address may occur more than once, because it may be necessary to give a physical address, a mailing address, or both. 
        /// </summary>
		[Description("Note that address may occur more than  once, because it may be necessary to give a physical  address, a mailing address, or both.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_generalAddress")]
		[XmlElement("address")]
        public List<GeneralAddress> Address {
            get {
                return addressField;
            } 
            set {
                addressField = value;
                NotifyPropertyChanged("Address");
            }
        }

         /// <summary>
         /// bool to indicate if Address has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AddressSpecified
         {
             get {
             if(addressField!=null)
                 return addressField.Count>0?true:false;
             else return false;
             }
         }
        private List<GeneralAddress> addressField; 

        /// <summary>
        /// The various types of phone numbers may be given. The may be office or home, they may be a number for a cell phone, or for a fax, etc. Attributes of PhoneNumber declare the type of phone number that is being given. 
        /// </summary>
		[Description("The various types of phone numbers may  be given. The may be office or home, they may be a  number for a cell phone, or for a fax, etc. Attributes  of PhoneNumber declare the type of phone number that is  being given.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "phoneNumberStruct")]
		[XmlElement("phoneNumber")]
        public List<PhoneNumberStruct> PhoneNumber {
            get {
                return phoneNumberField;
            } 
            set {
                phoneNumberField = value;
                NotifyPropertyChanged("PhoneNumber");
            }
        }

         /// <summary>
         /// bool to indicate if PhoneNumber has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PhoneNumberSpecified
         {
             get {
             if(phoneNumberField!=null)
                 return phoneNumberField.Count>0?true:false;
             else return false;
             }
         }
        private List<PhoneNumberStruct> phoneNumberField; 

        /// <summary>
        /// The email address may be home, office, or permanent. More than one may be given. 
        /// </summary>
		[Description("The email address may be home, office,  or permanent. More than one may be given.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "emailQualifierStruct")]
		[XmlElement("email")]
        public List<EmailQualifierStruct> Email {
            get {
                return emailField;
            } 
            set {
                emailField = value;
                NotifyPropertyChanged("Email");
            }
        }

         /// <summary>
         /// bool to indicate if Email has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EmailSpecified
         {
             get {
             if(emailField!=null)
                 return emailField.Count>0?true:false;
             else return false;
             }
         }
        private List<EmailQualifierStruct> emailField; 

        /// <summary>
        /// The preferred method of being contacted within the context of this role. 
        /// </summary>
		[Description("The preferred method of being contacted within the context of this role.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "ContactPreference")]
		[XmlElement("contactPreference")]
        public List<ContactPreference> ContactPreference {
            get {
                return contactPreferenceField;
            } 
            set {
                contactPreferenceField = value;
                NotifyPropertyChanged("ContactPreference");
            }
        }

         /// <summary>
         /// bool to indicate if ContactPreference has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContactPreferenceSpecified
         {
             get {
             if(contactPreferenceField!=null)
                 return contactPreferenceField.Count>0?true:false;
             else return false;
             }
         }
        private List<ContactPreference> contactPreferenceField; 

        /// <summary>
        /// A pointer to another business associate that this business associate is associated with. The most common situation is that of an employee being associated with a company. But it may also be, for example, a work group associated with a university.
        /// </summary>
		[Description("A pointer to another business associate that this  business associate is associated with. The most common situation is that  of an employee being associated with a company. But it may also be, for  example, a work group associated with a university.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("associatedWith")]
        public RefNameString AssociatedWith {
            get {
                return associatedWithField;
            } 
            set {
                associatedWithField = value;
                NotifyPropertyChanged("AssociatedWith");
            }
        }

        private RefNameString associatedWithField; 

        /// <summary>
        /// A pointer to a business associate (generally a person) who serves as a contact for this business associate. 
        /// </summary>
		[Description("A pointer to a business associate  (generally a person) who serves as a contact for this  business associate.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("contact")]
        public List<RefNameString> Contact {
            get {
                return contactField;
            } 
            set {
                contactField = value;
                NotifyPropertyChanged("Contact");
            }
        }

         /// <summary>
         /// bool to indicate if Contact has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContactSpecified
         {
             get {
             if(contactField!=null)
                 return contactField.Count>0?true:false;
             else return false;
             }
         }
        private List<RefNameString> contactField; 

        /// <summary>
        /// The count of the number of personnel in a group.
        /// </summary>
		[Description("The count of the number of personnel in a group.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("personnelCount")]
        public short? PersonnelCount {
            get {
                return personnelCountField;
            } 
            set {
                personnelCountField = value;
                 this.PersonnelCountSpecified = true;
                NotifyPropertyChanged("PersonnelCount");
            }
        }

        private short? personnelCountField; 

        /// <summary>
        /// personnelCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PersonnelCountSpecified {
            get {
                return personnelCountSpecifiedField;
            } 
            set {
                personnelCountSpecifiedField = value;
                NotifyPropertyChanged("PersonnelCountSpecified");
            }
        }

        private bool personnelCountSpecifiedField; 

        /// <summary>
        /// A general comment. This should not be used to carry semantic information. This is not intended to be machine interpretable. 
        /// </summary>
		[StringLength(4000)]
        [Description("A general comment. This should not  be used to carry semantic information. This is not  intended to be machine interpretable.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_personName xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_personName", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_personName xsd type.")]
    public partial class PersonName : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A name prefix. Such as, Dr, Ms, Miss, Mr, etc.
        /// </summary>
		[StringLength(64)]
        [Description("A name prefix. Such as, Dr, Ms, Miss, Mr, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("prefix")]
        public string Prefix {
            get {
                return prefixField;
            } 
            set {
                prefixField = value;
                NotifyPropertyChanged("Prefix");
            }
        }

        private string prefixField; 

        /// <summary>
        /// The persons first name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The persons first name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("first")]
        public string First {
            get {
                return firstField;
            } 
            set {
                firstField = value;
                NotifyPropertyChanged("First");
            }
        }

        private string firstField; 

        /// <summary>
        /// The persons middle name or initial name.
        /// </summary>
		[StringLength(64)]
        [Description("The persons middle name or initial name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("middle")]
        public string Middle {
            get {
                return middleField;
            } 
            set {
                middleField = value;
                NotifyPropertyChanged("Middle");
            }
        }

        private string middleField; 

        /// <summary>
        /// The persons last or given name.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The persons last or given name.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("last")]
        public string Last {
            get {
                return lastField;
            } 
            set {
                lastField = value;
                NotifyPropertyChanged("Last");
            }
        }

        private string lastField; 

        /// <summary>
        /// A name suffix. Such as Esq, Phd, etc.
        /// </summary>
		[Description("A name suffix. Such as Esq, Phd, etc.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("suffix")]
        public List<string> Suffix {
            get {
                return suffixField;
            } 
            set {
                suffixField = value;
                NotifyPropertyChanged("Suffix");
            }
        }

         /// <summary>
         /// bool to indicate if Suffix has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SuffixSpecified
         {
             get {
             if(suffixField!=null)
                 return suffixField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> suffixField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// An general address structure. This form is appropriate for most countries. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_generalAddress", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("An general address structure. This form is appropriate for most countries. ")]
    public partial class GeneralAddress : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[StringLength(64)]
        [Description("The Name line of an address.  If missing, use the Name of the business associate.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// street property
        /// </summary>
		[Required]
        [Description("The Street is a generic term for the  middle lines of an address. They may be a street address, PO Box, Suite number, or any lines that come  between the \"name\" and \"city\" lines. This may be repeated  for up to four, ordered lines.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("street")]
        public List<string> Street {
            get {
                return streetField;
            } 
            set {
                streetField = value;
                NotifyPropertyChanged("Street");
            }
        }

         /// <summary>
         /// bool to indicate if Street has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StreetSpecified
         {
             get {
             if(streetField!=null)
                 return streetField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> streetField; 

        /// <summary>
        /// city property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The City for the business associate's  address")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("city")]
        public string City {
            get {
                return cityField;
            } 
            set {
                cityField = value;
                NotifyPropertyChanged("City");
            }
        }

        private string cityField; 

        /// <summary>
        /// state property
        /// </summary>
        [XmlElement("state")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        public string State {
            get {
                return stateField;
            } 
            set {
                if (value != null && CountySpecified) throw new Exception("Cannot set property State when property County is already set");
                if (value != null && ProvinceSpecified) throw new Exception("Cannot set property State when property Province is already set");
                stateField = value;
                StateSpecified = (value!=null);
                NotifyPropertyChanged("State");
            }
        }

        private string stateField; 
        private bool stateSpecified = false; 

        /// <summary>
        /// bool to indicate if State has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StateSpecified
        {
            get {
                return stateSpecified;
            }
            set {
                stateSpecified= value;
            }
        }

        /// <summary>
        /// province property
        /// </summary>
        [XmlElement("province")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        public string Province {
            get {
                return provinceField;
            } 
            set {
                if (value != null && CountySpecified) throw new Exception("Cannot set property Province when property County is already set");
                if (value != null && StateSpecified) throw new Exception("Cannot set property Province when property State is already set");
                provinceField = value;
                ProvinceSpecified = (value!=null);
                NotifyPropertyChanged("Province");
            }
        }

        private string provinceField; 
        private bool provinceSpecified = false; 

        /// <summary>
        /// bool to indicate if Province has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ProvinceSpecified
        {
            get {
                return provinceSpecified;
            }
            set {
                provinceSpecified= value;
            }
        }

        /// <summary>
        /// county property
        /// </summary>
        [XmlElement("county")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        public string County {
            get {
                return countyField;
            } 
            set {
                if (value != null && ProvinceSpecified) throw new Exception("Cannot set property County when property Province is already set");
                if (value != null && StateSpecified) throw new Exception("Cannot set property County when property State is already set");
                countyField = value;
                CountySpecified = (value!=null);
                NotifyPropertyChanged("County");
            }
        }

        private string countyField; 
        private bool countySpecified = false; 

        /// <summary>
        /// bool to indicate if County has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CountySpecified
        {
            get {
                return countySpecified;
            }
            set {
                countySpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType? ItemElementNameField; 

        /// <summary>
        /// The Country may be included. Although this is optional, it is probably required for most uses.
        /// </summary>
		[StringLength(64)]
        [Description("The Country may be included. Although  this is optional, it is probably required for most uses.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("country")]
        public string Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private string countryField; 

        /// <summary>
        /// A postal code, if appropriate for the country. In the USA this would be the five or nine digit zip code.
        /// </summary>
		[StringLength(40)]
        [Description("A postal code, if appropriate for the country.  In the USA this would be the five or nine digit zip code.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("postalCode")]
        public string PostalCode {
            get {
                return postalCodeField;
            } 
            set {
                postalCodeField = value;
                NotifyPropertyChanged("PostalCode");
            }
        }

        private string postalCodeField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// The type of address: mailing, physical, or both.
        /// </summary>
		[Description("The type of address: mailing, physical, or both.")]
        [EnergisticsDataTypeAttribute(DataType = "AddressKindEnum")]
        [XmlAttribute("kind")]
		        public string KindSurrogate
        {
            get {
                     if(Kind==null)  return null;
                     else return Kind.Name; }
            set { 

                 if(this.Kind== null)
                 Kind= new AddressKindEnum(value);
                 else
                   Kind.Name = value; }
        }
        /// <summary>
        /// The type of address: mailing, physical, or both.
        /// </summary>
        [XmlIgnore]

        public AddressKindEnum Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                 this.KindSpecified = true;
                NotifyPropertyChanged("Kind");
            }
        }

        private AddressKindEnum kindField; 

        /// <summary>
        /// kindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KindSpecified {
            get {
                return kindSpecifiedField;
            } 
            set {
                kindSpecifiedField = value;
                NotifyPropertyChanged("KindSpecified");
            }
        }

        private bool kindSpecifiedField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the phoneNumberStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="phoneNumberStruct", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the phoneNumberStruct xsd type.")]
    public partial class PhoneNumberStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the PhoneNumberStruct class.
        /// </summary>
        public PhoneNumberStruct() {}

        /// <summary>
        /// Initializes a new instance of the PhoneNumberStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public PhoneNumberStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The kind of phone such as voice or fax.
        /// </summary>
		[Required]
        [Description("The kind of phone such as voice or fax.")]
        [EnergisticsDataTypeAttribute(DataType = "PhoneType")]
        [XmlAttribute("type")]
		        public string TypeSurrogate
        {
            get {
                     if(Type==null)  return null;
                     else return Type.Name; }
            set { 

                 if(this.Type== null)
                 Type= new PhoneType(value);
                 else
                   Type.Name = value; }
        }
        /// <summary>
        /// The kind of phone such as voice or fax.
        /// </summary>
        [XmlIgnore]

        public PhoneType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private PhoneType typeField; 

		/// <summary>
        /// Indicates whether the number is personal, business or both.
        /// </summary>
		[Description("Indicates whether the number  is personal, business or both.")]
        [EnergisticsDataTypeAttribute(DataType = "AddressQualifier")]
        [XmlAttribute("qualifier")]
		        public string QualifierSurrogate
        {
            get {
                     if(Qualifier==null)  return null;
                     else return Qualifier.Name; }
            set { 

                 if(this.Qualifier== null)
                 Qualifier= new AddressQualifier(value);
                 else
                   Qualifier.Name = value; }
        }
        /// <summary>
        /// Indicates whether the number is personal, business or both.
        /// </summary>
        [XmlIgnore]

        public AddressQualifier Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private AddressQualifier qualifierField; 

        /// <summary>
        /// qualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return qualifierSpecifiedField;
            } 
            set {
                qualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool qualifierSpecifiedField; 

		/// <summary>
        /// The phone number extension.
        /// </summary>
		[StringLength(40)]
        [Description("The phone number extension.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        [XmlAttribute("extension")]
		
        public string Extension {
            get {
                return extensionField;
            } 
            set {
                extensionField = value;
                NotifyPropertyChanged("Extension");
            }
        }

        private string extensionField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(40)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the emailQualifierStruct xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="emailQualifierStruct", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the emailQualifierStruct xsd type.")]
    public partial class EmailQualifierStruct : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the EmailQualifierStruct class.
        /// </summary>
        public EmailQualifierStruct() {}

        /// <summary>
        /// Initializes a new instance of the EmailQualifierStruct class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public EmailQualifierStruct(string value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// qualifier property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "AddressQualifier")]
        [XmlAttribute("qualifier")]
		        public string QualifierSurrogate
        {
            get {
                     if(Qualifier==null)  return null;
                     else return Qualifier.Name; }
            set { 

                 if(this.Qualifier== null)
                 Qualifier= new AddressQualifier(value);
                 else
                   Qualifier.Name = value; }
        }
        /// <summary>
        /// qualifier property
        /// </summary>
        [XmlIgnore]

        public AddressQualifier Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                 this.QualifierSpecified = true;
                NotifyPropertyChanged("Qualifier");
            }
        }

        private AddressQualifier qualifierField; 

        /// <summary>
        /// qualifierSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool QualifierSpecified {
            get {
                return qualifierSpecifiedField;
            } 
            set {
                qualifierSpecifiedField = value;
                NotifyPropertyChanged("QualifierSpecified");
            }
        }

        private bool qualifierSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(40)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A geographic context of a report.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_geographicContext", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A geographic context of a report.")]
    public partial class GeographicContext : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the country.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the country.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("country")]
        public string Country {
            get {
                return countryField;
            } 
            set {
                countryField = value;
                NotifyPropertyChanged("Country");
            }
        }

        private string countryField; 

        /// <summary>
        /// The state of province within the country.
        /// </summary>
		[StringLength(64)]
        [Description("The state of province within the country.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("state")]
        public string State {
            get {
                return stateField;
            } 
            set {
                stateField = value;
                NotifyPropertyChanged("State");
            }
        }

        private string stateField; 

        /// <summary>
        /// The name of the field within whose context the report exists.
        /// </summary>
		[Description("The name of the field within whose context the report exists.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("field")]
        public NameStruct Field {
            get {
                return fieldField;
            } 
            set {
                fieldField = value;
                NotifyPropertyChanged("Field");
            }
        }

        private NameStruct fieldField; 

        /// <summary>
        /// An offshore context.
        /// </summary>
		[Description("An offshore context.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_offshoreLocation")]
		[XmlElement("offshoreLocation")]
        public OffshoreLocation OffshoreLocation {
            get {
                return offshoreLocationField;
            } 
            set {
                offshoreLocationField = value;
                NotifyPropertyChanged("OffshoreLocation");
            }
        }

        private OffshoreLocation offshoreLocationField; 

        /// <summary>
        /// An general comment that further explains the offshore location.
        /// </summary>
		[StringLength(4000)]
        [Description("An general comment that further explains the  offshore location.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A generic type of offshore location. This allows an offshore location to be given by an Area Name, and up to four block names. A comment is also allowed.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_offshoreLocation", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A generic type of offshore location. This allows an offshore location to be given by an Area Name, and up to four block names. A comment is also allowed.")]
    public partial class OffshoreLocation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A general meaning of Area. It may be as general as 'UK North Sea' or 'Viosca Knoll'. The user community must agree on the meaning of this element.
        /// </summary>
		[StringLength(64)]
        [Description("A general meaning of Area. It may be as  general as 'UK North Sea' or 'Viosca Knoll'. The user community must agree on the meaning of this element.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("areaName")]
        public string AreaName {
            get {
                return areaNameField;
            } 
            set {
                areaNameField = value;
                NotifyPropertyChanged("AreaName");
            }
        }

        private string areaNameField; 

        /// <summary>
        /// A block ID that can more tightly locate the object. The BlockID should be an identifying name or code. The user community for an area must agree on the exact meaning of this element. An aggregate of increasingly specialized block IDs are sometimes necessary to define the location.
        /// </summary>
		[Required]
        [Description("A block ID that can more tightly locate the object.  The BlockID should be an identifying name or code.  The user community for an area must agree on the exact meaning of this element. An aggregate of increasingly specialized block IDs are sometimes necessary to define the location.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("blockID")]
        public List<string> BlockID {
            get {
                return blockIDField;
            } 
            set {
                blockIDField = value;
                NotifyPropertyChanged("BlockID");
            }
        }

         /// <summary>
         /// bool to indicate if BlockID has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BlockIDSpecified
         {
             get {
             if(blockIDField!=null)
                 return blockIDField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> blockIDField; 

        /// <summary>
        /// An offshore location using the North Sea Offshore terminology.
        /// </summary>
		[Required]
        [Description("An offshore location using the North Sea Offshore  terminology.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_northSeaOffshore")]
		[XmlElement("northSeaOffshore")]
        public NorthSeaOffshore NorthSeaOffshore {
            get {
                return northSeaOffshoreField;
            } 
            set {
                northSeaOffshoreField = value;
                NotifyPropertyChanged("NorthSeaOffshore");
            }
        }

        private NorthSeaOffshore northSeaOffshoreField; 

        /// <summary>
        /// An general comment that further explains the offshore location.
        /// </summary>
		[StringLength(4000)]
        [Description("An general comment that further explains the  offshore location.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A type of offshore location that captures the North Sea Offshore terminology.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_northSeaOffshore", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A type of offshore location that captures the North Sea Offshore terminology.")]
    public partial class NorthSeaOffshore : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An optional, uncontrolled value, which may be used to describe the general area of offshore North Sea in which the point is located.
        /// </summary>
		[StringLength(64)]
        [Description("An optional, uncontrolled value, which may be  used to describe the general area of offshore North Sea in which the  point is located.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("areaName")]
        public string AreaName {
            get {
                return areaNameField;
            } 
            set {
                areaNameField = value;
                NotifyPropertyChanged("AreaName");
            }
        }

        private string areaNameField; 

        /// <summary>
        /// The number or letter of the quadrant in the North Sea.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The number or letter of the quadrant in  the North Sea.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("quadrant")]
        public string Quadrant {
            get {
                return quadrantField;
            } 
            set {
                quadrantField = value;
                NotifyPropertyChanged("Quadrant");
            }
        }

        private string quadrantField; 

        /// <summary>
        /// A lower case letter assigned if a block is subdivided.
        /// </summary>
		[StringLength(2)]
        [Description("A lower case letter assigned if a block is subdivided.")]
        [EnergisticsDataTypeAttribute(DataType = "str2")]
		[XmlElement("blockSuffix")]
        public string BlockSuffix {
            get {
                return blockSuffixField;
            } 
            set {
                blockSuffixField = value;
                NotifyPropertyChanged("BlockSuffix");
            }
        }

        private string blockSuffixField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume component schema for defining business units.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeBusinessUnit", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume component schema for defining business units.")]
    public partial class ProductVolumeBusinessUnit : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of business unit.
        /// </summary>
		[Required]
        [Description("The type of business unit.")]
        [EnergisticsDataTypeAttribute(DataType = "BusinessUnitKind")]
		[XmlElement("kind")]
        public BusinessUnitKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private BusinessUnitKind kindField; 

        /// <summary>
        /// The human contextual name of the business unit.
        /// </summary>
		[StringLength(64)]
        [Description("The human contextual name of the business unit.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// A textual description of the business unit.
        /// </summary>
		[StringLength(256)]
        [Description("A textual description of the business unit.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// A component part of the unit. The composition of a unit may vary with time. This defines the ownership share or account information for a sub unit within the context of the whole unit. For ownership shares, at any one point in time the sum of the shares should be 100%.
        /// </summary>
		[Description("A component part of the unit.  The composition of a unit may vary with time. This defines the ownership share or account information for a sub unit within the context of the whole unit. For ownership shares, at any one point in time the sum of the shares should be 100%.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeBusinessSubUnit")]
		[XmlElement("subUnit")]
        public List<ProductVolumeBusinessSubUnit> SubUnit {
            get {
                return subUnitField;
            } 
            set {
                subUnitField = value;
                NotifyPropertyChanged("SubUnit");
            }
        }

         /// <summary>
         /// bool to indicate if SubUnit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SubUnitSpecified
         {
             get {
             if(subUnitField!=null)
                 return subUnitField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolumeBusinessSubUnit> subUnitField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume component schema for defining ownership shares of business units.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeBusinessSubUnit", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume component schema for defining ownership shares of business units.")]
    public partial class ProductVolumeBusinessSubUnit : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Points to business unit which is part of another business unit.
        /// </summary>
		[Required]
        [Description("Points to business unit which is part of another business unit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("kind")]
        public RefNameString Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private RefNameString kindField; 

        /// <summary>
        /// Defines the ownership share in the parent unit at a point in time. This commonly applies at a parent source unit (e.g., a field or platform).
        /// </summary>
        [ComponentElement]
        [XmlElement("ownershipShare")]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeBusinessOwnershipShare")]
        public ProductVolumeBusinessOwnershipShare[] OwnershipShare {
            get {
                return ownershipShareField;
            } 
            set {
                if (value != null && AccountInformationSpecified) throw new Exception("Cannot set property OwnershipShare when property AccountInformation is already set");
                ownershipShareField = value;
                OwnershipShareSpecified = (value!=null);
                NotifyPropertyChanged("OwnershipShare");
            }
        }

        private ProductVolumeBusinessOwnershipShare[] ownershipShareField; 
        private bool ownershipShareSpecified = false; 

        /// <summary>
        /// bool to indicate if OwnershipShare has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OwnershipShareSpecified
        {
            get {
                return ownershipShareSpecified;
            }
            set {
                ownershipShareSpecified= value;
            }
        }

        /// <summary>
        /// Defines account information in the parent unit. This commonly applies at a parent terminus unit (e.g., a terminal),
        /// </summary>
        [ComponentElement]
        [XmlElement("accountInformation")]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeBusinessAccountInfo")]
        public ProductVolumeBusinessAccountInfo[] AccountInformation {
            get {
                return accountInformationField;
            } 
            set {
                if (value != null && OwnershipShareSpecified) throw new Exception("Cannot set property AccountInformation when property OwnershipShare is already set");
                accountInformationField = value;
                AccountInformationSpecified = (value!=null);
                NotifyPropertyChanged("AccountInformation");
            }
        }

        private ProductVolumeBusinessAccountInfo[] accountInformationField; 
        private bool accountInformationSpecified = false; 

        /// <summary>
        /// bool to indicate if AccountInformation has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool AccountInformationSpecified
        {
            get {
                return accountInformationSpecified;
            }
            set {
                accountInformationSpecified= value;
            }
        }


        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume component schema for defining account information.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeBusinessAccountInfo", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume component schema for defining account information.")]
    public partial class ProductVolumeBusinessAccountInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The identifier of the account of the sub-unit within the whole business unit.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The identifier of the account of the sub-unit within the whole business unit.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("accountId")]
        public string AccountId {
            get {
                return accountIdField;
            } 
            set {
                accountIdField = value;
                NotifyPropertyChanged("AccountId");
            }
        }

        private string accountIdField; 

        /// <summary>
        /// The product associated with the account identifier.
        /// </summary>
		[Description("The product associated with the account identifier.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("product")]
        public ReportingProduct Product {
            get {
                return productField;
            } 
            set {
                productField = value;
                 this.ProductSpecified = true;
                NotifyPropertyChanged("Product");
            }
        }

        private ReportingProduct productField; 

        /// <summary>
        /// productSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProductSpecified {
            get {
                return productSpecifiedField;
            } 
            set {
                productSpecifiedField = value;
                NotifyPropertyChanged("ProductSpecified");
            }
        }

        private bool productSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Volume component schema for defining ownership shares.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productVolumeBusinessOwnershipShare", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Volume component schema for defining ownership shares.")]
    public partial class ProductVolumeBusinessOwnershipShare : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The percent ownership of the sub-unit in the unit during the specified time.
        /// </summary>
		[Required]
        [Description("The percent ownership of the sub-unit in the unit during the specified time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("share")]
        public VolumePerVolumeMeasurePercent Share {
            get {
                return shareField;
            } 
            set {
                shareField = value;
                NotifyPropertyChanged("Share");
            }
        }

        private VolumePerVolumeMeasurePercent shareField; 

        /// <summary>
        /// The date on which the ownership became valid.
        /// </summary>
		[Description("The date on which the ownership became valid.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("startDate", DataType="date")]
        public DateTime? StartDate {
            get {
                return startDateField;
            } 
            set {
                startDateField = value;
                 this.StartDateSpecified = true;
                NotifyPropertyChanged("StartDate");
            }
        }

        private DateTime? startDateField; 

        /// <summary>
        /// startDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StartDateSpecified {
            get {
                return startDateSpecifiedField;
            } 
            set {
                startDateSpecifiedField = value;
                NotifyPropertyChanged("StartDateSpecified");
            }
        }

        private bool startDateSpecifiedField; 

        /// <summary>
        /// The final date on which the ownership was valid. If no end date is specified, the share is considered to still be valid.
        /// </summary>
		[Description("The final date on which the ownership was valid. If no end date is specified, the share is considered to still be valid.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("endDate", DataType="date")]
        public DateTime? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private DateTime? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool endDateSpecifiedField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operational Comments Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationOperationalComment", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Operational Comments Component Schema.")]
    public partial class ProductionOperationOperationalComment : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The kind of operation
        /// </summary>
		[Description("The kind of operation")]
        [EnergisticsDataTypeAttribute(DataType = "OperationKind")]
		[XmlElement("type")]
        public OperationKind Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private OperationKind typeField; 

        /// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool typeSpecifiedField; 

        /// <summary>
        /// The beginning date and time that the comment represents.
        /// </summary>
		[Description("The beginning date and time that the comment represents.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The ending date and time that the comment represents.
        /// </summary>
		[Description("The ending date and time that the comment represents.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// A comment about the operation and/or the activities within the operation.
        /// </summary>
		[Description("A comment about the operation and/or the activities  within the operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public List<string> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Infomation about a cargo ship operation.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationCargoShipOperation", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Infomation about a cargo ship operation.")]
    public partial class ProductionOperationCargoShipOperation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the cargo vessel for the installation.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the cargo vessel for the installation.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("vesselName")]
        public string VesselName {
            get {
                return vesselNameField;
            } 
            set {
                vesselNameField = value;
                NotifyPropertyChanged("VesselName");
            }
        }

        private string vesselNameField; 

        /// <summary>
        /// The date and time that the vessel arrived.
        /// </summary>
		[Description("The date and time that the vessel arrived.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time that the vessel left.
        /// </summary>
		[Description("The date and time that the vessel left.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// Name of the captain of the vessel.
        /// </summary>
		[StringLength(64)]
        [Description("Name of the captain of the vessel.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("captain")]
        public string Captain {
            get {
                return captainField;
            } 
            set {
                captainField = value;
                NotifyPropertyChanged("Captain");
            }
        }

        private string captainField; 

        /// <summary>
        /// the cargo identifier.
        /// </summary>
		[StringLength(40)]
        [Description("the cargo identifier.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("cargoNumber")]
        public string CargoNumber {
            get {
                return cargoNumberField;
            } 
            set {
                cargoNumberField = value;
                NotifyPropertyChanged("CargoNumber");
            }
        }

        private string cargoNumberField; 

        /// <summary>
        /// The cargo batch number. Used if the vessel needs to temporarily disconnect for some reason (e.g., weather).
        /// </summary>
		[Description("The cargo batch number. Used if the vessel needs to temporarily  disconnect for some reason (e.g., weather).")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("cargoBatchNumber")]
        public short? CargoBatchNumber {
            get {
                return cargoBatchNumberField;
            } 
            set {
                cargoBatchNumberField = value;
                 this.CargoBatchNumberSpecified = true;
                NotifyPropertyChanged("CargoBatchNumber");
            }
        }

        private short? cargoBatchNumberField; 

        /// <summary>
        /// cargoBatchNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CargoBatchNumberSpecified {
            get {
                return cargoBatchNumberSpecifiedField;
            } 
            set {
                cargoBatchNumberSpecifiedField = value;
                NotifyPropertyChanged("CargoBatchNumberSpecified");
            }
        }

        private bool cargoBatchNumberSpecifiedField; 

        /// <summary>
        /// Description of cargo on the vessel.
        /// </summary>
		[StringLength(256)]
        [Description("Description of cargo on the vessel.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("cargo")]
        public string Cargo {
            get {
                return cargoField;
            } 
            set {
                cargoField = value;
                NotifyPropertyChanged("Cargo");
            }
        }

        private string cargoField; 

        /// <summary>
        /// Gross oil loaded to the ship during the report period. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Gross oil loaded to the ship during the report period. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("oilGrossStdTempPres")]
        public VolumeMeasure OilGrossStdTempPres {
            get {
                return oilGrossStdTempPresField;
            } 
            set {
                oilGrossStdTempPresField = value;
                NotifyPropertyChanged("OilGrossStdTempPres");
            }
        }

        private VolumeMeasure oilGrossStdTempPresField; 

        /// <summary>
        /// Gross oil loaded to the ship in total during the operation. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Gross oil loaded to the ship in total during the operation. Gross oil includes BS and W. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("oilGrossTotalStdTempPres")]
        public VolumeMeasure OilGrossTotalStdTempPres {
            get {
                return oilGrossTotalStdTempPresField;
            } 
            set {
                oilGrossTotalStdTempPresField = value;
                NotifyPropertyChanged("OilGrossTotalStdTempPres");
            }
        }

        private VolumeMeasure oilGrossTotalStdTempPresField; 

        /// <summary>
        /// Net oil loaded to the ship during the report period. Net oil excludes BS and W, fuel, spill and leaks. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Net oil loaded to the ship during the report period. Net oil excludes BS and W, fuel, spill and leaks. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("oilNetStdTempPres")]
        public VolumeMeasure OilNetStdTempPres {
            get {
                return oilNetStdTempPresField;
            } 
            set {
                oilNetStdTempPresField = value;
                NotifyPropertyChanged("OilNetStdTempPres");
            }
        }

        private VolumeMeasure oilNetStdTempPresField; 

        /// <summary>
        /// Net oil loaded to the ship from the beginning of the month to the end of the reporting period. Net oil excludes BS and W, fuel, spill and leaks. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Net oil loaded to the ship from the beginning of the  month to the end of the reporting period. Net oil excludes BS and W, fuel, spill and leaks. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("oilNetMonthToDateStdTempPres")]
        public VolumeMeasure OilNetMonthToDateStdTempPres {
            get {
                return oilNetMonthToDateStdTempPresField;
            } 
            set {
                oilNetMonthToDateStdTempPresField = value;
                NotifyPropertyChanged("OilNetMonthToDateStdTempPres");
            }
        }

        private VolumeMeasure oilNetMonthToDateStdTempPresField; 

        /// <summary>
        /// Density of the liquid loaded to the tanker. This density has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Density of the liquid loaded to the tanker. This density has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("densityStdTempPres")]
        public DensityMeasure DensityStdTempPres {
            get {
                return densityStdTempPresField;
            } 
            set {
                densityStdTempPresField = value;
                NotifyPropertyChanged("DensityStdTempPres");
            }
        }

        private DensityMeasure densityStdTempPresField; 

        /// <summary>
        /// Density of the liquid loaded to the tanker.
        /// </summary>
		[Description("Density of the liquid loaded to the tanker.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("density")]
        public DensityMeasure Density {
            get {
                return densityField;
            } 
            set {
                densityField = value;
                NotifyPropertyChanged("Density");
            }
        }

        private DensityMeasure densityField; 

        /// <summary>
        /// Reid vapor pressure of the liquid.
        /// </summary>
		[Description("Reid vapor pressure of the liquid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvp")]
        public PressureMeasure Rvp {
            get {
                return rvpField;
            } 
            set {
                rvpField = value;
                NotifyPropertyChanged("Rvp");
            }
        }

        private PressureMeasure rvpField; 

        /// <summary>
        /// Basic sediment and water is measured from a liquid sample of the production stream. It includes free water, sediment and emulsion and is measured as a volume percentage of the liquid.
        /// </summary>
		[Description("Basic sediment and water is measured from a liquid sample  of the production stream. It includes free water, sediment and emulsion and  is measured as a volume percentage of the liquid.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("bsw")]
        public VolumePerVolumeMeasure Bsw {
            get {
                return bswField;
            } 
            set {
                bswField = value;
                NotifyPropertyChanged("Bsw");
            }
        }

        private VolumePerVolumeMeasure bswField; 

        /// <summary>
        /// Salt content. The product formed by neutralization of an acid and a base. The term is more specifically applied to sodium chloride.
        /// </summary>
		[Description("Salt content. The product formed by neutralization of an acid  and a base. The term is more specifically applied to sodium chloride.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("salt")]
        public DensityMeasure Salt {
            get {
                return saltField;
            } 
            set {
                saltField = value;
                NotifyPropertyChanged("Salt");
            }
        }

        private DensityMeasure saltField; 

        /// <summary>
        /// A commnet about the operation.
        /// </summary>
		[Description("A commnet about the operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("comment")]
        public List<DatedComment> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Infomation about a marine operation.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationMarineOperation", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Infomation about a marine operation.")]
    public partial class ProductionOperationMarineOperation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The beginning date and time that the information represents.
        /// </summary>
		[Description("The beginning date and time that the information represents.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The ending date and time that the comment represents.
        /// </summary>
		[Description("The ending date and time that the comment represents.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// A general comment on marine activity in the area
        /// </summary>
		[StringLength(4000)]
        [Description("A general comment on marine activity in the area")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("generalComment")]
        public string GeneralComment {
            get {
                return generalCommentField;
            } 
            set {
                generalCommentField = value;
                NotifyPropertyChanged("GeneralComment");
            }
        }

        private string generalCommentField; 

        /// <summary>
        /// Name of supply vessel for the installation.
        /// </summary>
		[StringLength(64)]
        [Description("Name of supply vessel for the installation.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("supplyShip")]
        public string SupplyShip {
            get {
                return supplyShipField;
            } 
            set {
                supplyShipField = value;
                NotifyPropertyChanged("SupplyShip");
            }
        }

        private string supplyShipField; 

        /// <summary>
        /// Name of standby vessel for the installation.
        /// </summary>
		[StringLength(64)]
        [Description("Name of standby vessel for the installation.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("standbyVessel")]
        public string StandbyVessel {
            get {
                return standbyVesselField;
            } 
            set {
                standbyVesselField = value;
                NotifyPropertyChanged("StandbyVessel");
            }
        }

        private string standbyVesselField; 

        /// <summary>
        /// Comment regarding the supply ship.
        /// </summary>
		[Description("Comment regarding the supply ship.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("supplyShipComment")]
        public List<DatedComment> SupplyShipComment {
            get {
                return supplyShipCommentField;
            } 
            set {
                supplyShipCommentField = value;
                NotifyPropertyChanged("SupplyShipComment");
            }
        }

         /// <summary>
         /// bool to indicate if SupplyShipComment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SupplyShipCommentSpecified
         {
             get {
             if(supplyShipCommentField!=null)
                 return supplyShipCommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> supplyShipCommentField; 

        /// <summary>
        /// Comment regarding the standby vessel.
        /// </summary>
		[Description("Comment regarding the standby vessel.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("standbyVesselComment")]
        public List<DatedComment> StandbyVesselComment {
            get {
                return standbyVesselCommentField;
            } 
            set {
                standbyVesselCommentField = value;
                NotifyPropertyChanged("StandbyVesselComment");
            }
        }

         /// <summary>
         /// bool to indicate if StandbyVesselComment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool StandbyVesselCommentSpecified
         {
             get {
             if(standbyVesselCommentField!=null)
                 return standbyVesselCommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> standbyVesselCommentField; 

        /// <summary>
        /// Report of any basket movement to and from the installation.
        /// </summary>
		[Description("Report of any basket movement to and from the installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("basketMovement")]
        public List<DatedComment> BasketMovement {
            get {
                return basketMovementField;
            } 
            set {
                basketMovementField = value;
                NotifyPropertyChanged("BasketMovement");
            }
        }

         /// <summary>
         /// bool to indicate if BasketMovement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BasketMovementSpecified
         {
             get {
             if(basketMovementField!=null)
                 return basketMovementField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> basketMovementField; 

        /// <summary>
        /// A comment on a special event in the marine area.
        /// </summary>
		[Description("A comment on a special event in the marine area.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("activity")]
        public List<DatedComment> Activity {
            get {
                return activityField;
            } 
            set {
                activityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

         /// <summary>
         /// bool to indicate if Activity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ActivitySpecified
         {
             get {
             if(activityField!=null)
                 return activityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> activityField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A structure to record informaion about a single alarm.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationAlarm", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A structure to record informaion about a single alarm.")]
    public partial class ProductionOperationAlarm : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time when the alarms went off.
        /// </summary>
		[Description("The date and time when the alarms went off.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                 this.DateTimeSpecified = true;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// dTimSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeSpecified {
            get {
                return dTimSpecifiedField;
            } 
            set {
                dTimSpecifiedField = value;
                NotifyPropertyChanged("DateTimeSpecified");
            }
        }

        private bool dTimSpecifiedField; 

        /// <summary>
        /// The area where the alarm went off.
        /// </summary>
		[StringLength(64)]
        [Description("The area where the alarm went off.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("area")]
        public string Area {
            get {
                return areaField;
            } 
            set {
                areaField = value;
                NotifyPropertyChanged("Area");
            }
        }

        private string areaField; 

        /// <summary>
        /// The type of alarm that went off.
        /// </summary>
		[StringLength(40)]
        [Description("The type of alarm that went off.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// The reason for the alarm going off.
        /// </summary>
		[StringLength(256)]
        [Description("The reason for the alarm going off.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("reason")]
        public string Reason {
            get {
                return reasonField;
            } 
            set {
                reasonField = value;
                NotifyPropertyChanged("Reason");
            }
        }

        private string reasonField; 

        /// <summary>
        /// A general comment relevant for the alarm.
        /// </summary>
		[StringLength(4000)]
        [Description("A general comment relevant for the alarm.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Infomation about a shutdown event.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationShutdown", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Infomation about a shutdown event.")]
    public partial class ProductionOperationShutdown : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the installation which was shut down. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the installation which was shut down.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// A general description of the shutdown with reason and other relevant information. 
        /// </summary>
		[StringLength(256)]
        [Description("A general description of the shutdown with reason and  other relevant information.")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// The time the shutdown started.
        /// </summary>
		[Description("The time the shutdown started.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The time the shutdown ended.
        /// </summary>
		[Description("The time the shutdown ended.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// Downtime when the installation is unable to produce 100% of its capability. 
        /// </summary>
		[Description("Downtime when the installation is unable to produce 100% of its capability.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("volumetricDownTime")]
        public TimeMeasure VolumetricDownTime {
            get {
                return volumetricDownTimeField;
            } 
            set {
                volumetricDownTimeField = value;
                NotifyPropertyChanged("VolumetricDownTime");
            }
        }

        private TimeMeasure volumetricDownTimeField; 

        /// <summary>
        /// Estimated loss of oil deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Estimated loss of oil deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("lossOilStdTempPres")]
        public VolumeMeasure LossOilStdTempPres {
            get {
                return lossOilStdTempPresField;
            } 
            set {
                lossOilStdTempPresField = value;
                NotifyPropertyChanged("LossOilStdTempPres");
            }
        }

        private VolumeMeasure lossOilStdTempPresField; 

        /// <summary>
        /// Estimated loss of gas deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.
        /// </summary>
		[Description("Estimated loss of gas deliveries because of the shutdown. This volume has been corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("lossGasStdTempPres")]
        public VolumeMeasure LossGasStdTempPres {
            get {
                return lossGasStdTempPresField;
            } 
            set {
                lossGasStdTempPresField = value;
                NotifyPropertyChanged("LossGasStdTempPres");
            }
        }

        private VolumeMeasure lossGasStdTempPresField; 

        /// <summary>
        /// A description of main activities from time to time during the shutdown period. 
        /// </summary>
		[Description("A description of main activities from time to time during the shutdown period.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("activity")]
        public List<DatedComment> Activity {
            get {
                return activityField;
            } 
            set {
                activityField = value;
                NotifyPropertyChanged("Activity");
            }
        }

         /// <summary>
         /// bool to indicate if Activity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ActivitySpecified
         {
             get {
             if(activityField!=null)
                 return activityField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> activityField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about the contaminants in water, and the general water quality. The values are measured from a sample, which is described below. Values measured from other samples should be given in different instances of the type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationWaterCleaningQuality", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information about the contaminants in water, and the general water quality. The values are measured from a sample, which is described below. Values measured from other samples should be given in different instances of the type.")]
    public partial class ProductionOperationWaterCleaningQuality : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// An identifier of the point from which the sample was taken. This is an uncontrolled string value, which should be as descriptive as possible.
        /// </summary>
		[StringLength(64)]
        [Description("An identifier of the point from which the sample was taken.  This is an uncontrolled string value, which should be as descriptive as possible.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("samplePoint")]
        public string SamplePoint {
            get {
                return samplePointField;
            } 
            set {
                samplePointField = value;
                NotifyPropertyChanged("SamplePoint");
            }
        }

        private string samplePointField; 

        /// <summary>
        /// Total measured oil in the water after the water cleaning process, but before it is discharged from the installation.
        /// </summary>
		[Description("Total measured oil in the water after the water cleaning process,  but before it is discharged from the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("oilInWaterProduced")]
        public MassConcentrationMeasure OilInWaterProduced {
            get {
                return oilInWaterProducedField;
            } 
            set {
                oilInWaterProducedField = value;
                NotifyPropertyChanged("OilInWaterProduced");
            }
        }

        private MassConcentrationMeasure oilInWaterProducedField; 

        /// <summary>
        /// Total measured oil in the water after the water cleaning process, but before it is discharged from the installation
        /// </summary>
		[Description("Total measured oil in the water after the water cleaning process,  but before it is discharged from the installation")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massMeasure")]
		[XmlElement("amountOfOil")]
        public MassMeasure AmountOfOil {
            get {
                return amountOfOilField;
            } 
            set {
                amountOfOilField = value;
                NotifyPropertyChanged("AmountOfOil");
            }
        }

        private MassMeasure amountOfOilField; 

        /// <summary>
        /// The amount of ammonium found in the water sample.
        /// </summary>
		[Description("The amount of ammonium found in the water sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("ammonium")]
        public DensityMeasure Ammonium {
            get {
                return ammoniumField;
            } 
            set {
                ammoniumField = value;
                NotifyPropertyChanged("Ammonium");
            }
        }

        private DensityMeasure ammoniumField; 

        /// <summary>
        /// The amount of total organic carbon found in the water. The water is under high temperature and the carbon left is measured
        /// </summary>
		[Description("The amount of total organic carbon found in the water.  The water is under high temperature and the carbon left is measured")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("totalOrganicCarbon")]
        public MassConcentrationMeasure TotalOrganicCarbon {
            get {
                return totalOrganicCarbonField;
            } 
            set {
                totalOrganicCarbonField = value;
                NotifyPropertyChanged("TotalOrganicCarbon");
            }
        }

        private MassConcentrationMeasure totalOrganicCarbonField; 

        /// <summary>
        /// The amount of Fenol found in the water sample.
        /// </summary>
		[Description("The amount of Fenol found in the water sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("phenol")]
        public DensityMeasure Phenol {
            get {
                return phenolField;
            } 
            set {
                phenolField = value;
                NotifyPropertyChanged("Phenol");
            }
        }

        private DensityMeasure phenolField; 

        /// <summary>
        /// The amount of Glycol found in the water sample.
        /// </summary>
		[Description("The amount of Glycol found in the water sample.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("glycol")]
        public DensityMeasure Glycol {
            get {
                return glycolField;
            } 
            set {
                glycolField = value;
                NotifyPropertyChanged("Glycol");
            }
        }

        private DensityMeasure glycolField; 

        /// <summary>
        /// The pH value of the treated water. The pH value is best given as a value, with no unit of measure, since there are no variations from the pH.
        /// </summary>
		[Description("The pH value of the treated water.  The pH value is best given as a value, with no unit of measure,  since there are no variations from the pH.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("phValue")]
        public double? PHValue {
            get {
                return phValueField;
            } 
            set {
                phValueField = value;
                 this.PHValueSpecified = true;
                NotifyPropertyChanged("PHValue");
            }
        }

        private double? phValueField; 

        /// <summary>
        /// phValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PHValueSpecified {
            get {
                return phValueSpecifiedField;
            } 
            set {
                phValueSpecifiedField = value;
                NotifyPropertyChanged("PHValueSpecified");
            }
        }

        private bool phValueSpecifiedField; 

        /// <summary>
        /// The temperature of the water before it is discharged.
        /// </summary>
		[Description("The temperature of the water before it is discharged.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("waterTemperature")]
        public ThermodynamicTemperatureMeasure WaterTemperature {
            get {
                return waterTemperatureField;
            } 
            set {
                waterTemperatureField = value;
                NotifyPropertyChanged("WaterTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure waterTemperatureField; 

        /// <summary>
        /// Total measured residual clorines in the water after the water cleaning process, but before it is discharged from the installation.
        /// </summary>
		[Description("Total measured residual clorines in the water after the  water cleaning process, but before it is discharged from the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("residualChloride")]
        public MassConcentrationMeasure ResidualChloride {
            get {
                return residualChlorideField;
            } 
            set {
                residualChlorideField = value;
                NotifyPropertyChanged("ResidualChloride");
            }
        }

        private MassConcentrationMeasure residualChlorideField; 

        /// <summary>
        /// Total measured Oxygen in the water after the water cleaning process, but before it is discharged from the installation.
        /// </summary>
		[Description("Total measured Oxygen in the water after the water cleaning  process, but before it is discharged from the installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("oxygen")]
        public MassConcentrationMeasure Oxygen {
            get {
                return oxygenField;
            } 
            set {
                oxygenField = value;
                NotifyPropertyChanged("Oxygen");
            }
        }

        private MassConcentrationMeasure oxygenField; 

        /// <summary>
        /// A measure of the cloudiness of water caused by suspended particles.
        /// </summary>
		[Description("A measure of the cloudiness of water caused by suspended particles.")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("turbidity")]
        public double? Turbidity {
            get {
                return turbidityField;
            } 
            set {
                turbidityField = value;
                 this.TurbiditySpecified = true;
                NotifyPropertyChanged("Turbidity");
            }
        }

        private double? turbidityField; 

        /// <summary>
        /// turbiditySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TurbiditySpecified {
            get {
                return turbiditySpecifiedField;
            } 
            set {
                turbiditySpecifiedField = value;
                NotifyPropertyChanged("TurbiditySpecified");
            }
        }

        private bool turbiditySpecifiedField; 

        /// <summary>
        /// A measure of the number of particles in water as measured by a coulter counter.
        /// </summary>
		[Description("A measure of the number of particles in water as measured by a coulter counter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("coulterCounter")]
        public MassConcentrationMeasure CoulterCounter {
            get {
                return coulterCounterField;
            } 
            set {
                coulterCounterField = value;
                NotifyPropertyChanged("CoulterCounter");
            }
        }

        private MassConcentrationMeasure coulterCounterField; 

        /// <summary>
        /// Any comment that may be useful in describing the water quality. There can be multiple comments.
        /// </summary>
		[Description("Any comment that may be useful in describing the water quality.  There can be multiple comments.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("comment")]
        public List<DatedComment> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Production losses due to Third Party Processing.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationThirdPartyProcessing", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Production losses due to Third Party Processing.")]
    public partial class ProductionOperationThirdPartyProcessing : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the installation which performed the processing. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the installation which performed the processing.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// The estimated amount of oil lost. This volume has been corrected to standard conditions of temperature and pressure
        /// </summary>
		[Description("The estimated amount of oil lost. This volume has been corrected to standard conditions of temperature and pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("oilStdTempPres")]
        public VolumeMeasure OilStdTempPres {
            get {
                return oilStdTempPresField;
            } 
            set {
                oilStdTempPresField = value;
                NotifyPropertyChanged("OilStdTempPres");
            }
        }

        private VolumeMeasure oilStdTempPresField; 

        /// <summary>
        /// The estimated amount of gas lost. This volume has been corrected to standard conditions of temperature and pressure
        /// </summary>
		[Description("The estimated amount of gas lost. This volume has been corrected to standard conditions of temperature and pressure")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("gasStdTempPres")]
        public VolumeMeasure GasStdTempPres {
            get {
                return gasStdTempPresField;
            } 
            set {
                gasStdTempPresField = value;
                NotifyPropertyChanged("GasStdTempPres");
            }
        }

        private VolumeMeasure gasStdTempPresField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Lost Production Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationLostProduction", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Lost Production Component Schema.")]
    public partial class ProductionOperationLostProduction : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A estimated lost volume and the reason for the loss.
        /// </summary>
		[Description("A estimated lost volume and the reason for the loss.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "lostVolumeAndReason")]
		[XmlElement("volumeAndReason")]
        public List<LostVolumeAndReason> VolumeAndReason {
            get {
                return volumeAndReasonField;
            } 
            set {
                volumeAndReasonField = value;
                NotifyPropertyChanged("VolumeAndReason");
            }
        }

         /// <summary>
         /// bool to indicate if VolumeAndReason has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VolumeAndReasonSpecified
         {
             get {
             if(volumeAndReasonField!=null)
                 return volumeAndReasonField.Count>0?true:false;
             else return false;
             }
         }
        private List<LostVolumeAndReason> volumeAndReasonField; 

        /// <summary>
        /// The estimated amount of oil and gas lost due to third party processing at an installation.
        /// </summary>
		[Description("The estimated amount of oil and gas lost due to  third party processing at an installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationThirdPartyProcessing")]
		[XmlElement("thirdPartyProcessing")]
        public List<ProductionOperationThirdPartyProcessing> ThirdPartyProcessing {
            get {
                return thirdPartyProcessingField;
            } 
            set {
                thirdPartyProcessingField = value;
                NotifyPropertyChanged("ThirdPartyProcessing");
            }
        }

         /// <summary>
         /// bool to indicate if ThirdPartyProcessing has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ThirdPartyProcessingSpecified
         {
             get {
             if(thirdPartyProcessingField!=null)
                 return thirdPartyProcessingField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationThirdPartyProcessing> thirdPartyProcessingField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Production Activity Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationActivity", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Production Activity Component Schema.")]
    public partial class ProductionOperationActivity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Infomation about a lost production.
        /// </summary>
		[Description("Infomation about a lost production.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationLostProduction")]
		[XmlElement("lostProduction")]
        public ProductionOperationLostProduction LostProduction {
            get {
                return lostProductionField;
            } 
            set {
                lostProductionField = value;
                NotifyPropertyChanged("LostProduction");
            }
        }

        private ProductionOperationLostProduction lostProductionField; 

        /// <summary>
        /// Infomation about a lost injection.
        /// </summary>
		[Description("Infomation about a lost injection.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationLostProduction")]
		[XmlElement("lostInjection")]
        public ProductionOperationLostProduction LostInjection {
            get {
                return lostInjectionField;
            } 
            set {
                lostInjectionField = value;
                NotifyPropertyChanged("LostInjection");
            }
        }

        private ProductionOperationLostProduction lostInjectionField; 

        /// <summary>
        /// Information about the contaminants in water, and the general water quality.
        /// </summary>
		[Description("Information about the contaminants in water, and the general water quality.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationWaterCleaningQuality")]
		[XmlElement("waterCleaningQuality")]
        public List<ProductionOperationWaterCleaningQuality> WaterCleaningQuality {
            get {
                return waterCleaningQualityField;
            } 
            set {
                waterCleaningQualityField = value;
                NotifyPropertyChanged("WaterCleaningQuality");
            }
        }

         /// <summary>
         /// bool to indicate if WaterCleaningQuality has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WaterCleaningQualitySpecified
         {
             get {
             if(waterCleaningQualityField!=null)
                 return waterCleaningQualityField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationWaterCleaningQuality> waterCleaningQualityField; 

        /// <summary>
        /// Infomation about a shutdown event.
        /// </summary>
		[Description("Infomation about a shutdown event.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationShutdown")]
		[XmlElement("shutdown")]
        public List<ProductionOperationShutdown> Shutdown {
            get {
                return shutdownField;
            } 
            set {
                shutdownField = value;
                NotifyPropertyChanged("Shutdown");
            }
        }

         /// <summary>
         /// bool to indicate if Shutdown has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ShutdownSpecified
         {
             get {
             if(shutdownField!=null)
                 return shutdownField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationShutdown> shutdownField; 

        /// <summary>
        /// Infomation about an alarm.
        /// </summary>
		[Description("Infomation about an alarm.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationAlarm")]
		[XmlElement("alarm")]
        public List<ProductionOperationAlarm> Alarm {
            get {
                return alarmField;
            } 
            set {
                alarmField = value;
                NotifyPropertyChanged("Alarm");
            }
        }

         /// <summary>
         /// bool to indicate if Alarm has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AlarmSpecified
         {
             get {
             if(alarmField!=null)
                 return alarmField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationAlarm> alarmField; 

        /// <summary>
        /// Information about a marine operation.
        /// </summary>
		[Description("Information about a marine operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationMarineOperation")]
		[XmlElement("marineOperation")]
        public List<ProductionOperationMarineOperation> MarineOperation {
            get {
                return marineOperationField;
            } 
            set {
                marineOperationField = value;
                NotifyPropertyChanged("MarineOperation");
            }
        }

         /// <summary>
         /// bool to indicate if MarineOperation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MarineOperationSpecified
         {
             get {
             if(marineOperationField!=null)
                 return marineOperationField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationMarineOperation> marineOperationField; 

        /// <summary>
        /// Information about a cargo operation.
        /// </summary>
		[Description("Information about a cargo operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationCargoShipOperation")]
		[XmlElement("cargoShipOperation")]
        public List<ProductionOperationCargoShipOperation> CargoShipOperation {
            get {
                return cargoShipOperationField;
            } 
            set {
                cargoShipOperationField = value;
                NotifyPropertyChanged("CargoShipOperation");
            }
        }

         /// <summary>
         /// bool to indicate if CargoShipOperation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CargoShipOperationSpecified
         {
             get {
             if(cargoShipOperationField!=null)
                 return cargoShipOperationField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationCargoShipOperation> cargoShipOperationField; 

        /// <summary>
        /// A comment about a kind of operation. The time of the operation can be specified.
        /// </summary>
		[Description("A comment about a kind of operation. The time of the operation can be specified.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationOperationalComment")]
		[XmlElement("operationalComment")]
        public List<ProductionOperationOperationalComment> OperationalComment {
            get {
                return operationalCommentField;
            } 
            set {
                operationalCommentField = value;
                NotifyPropertyChanged("OperationalComment");
            }
        }

         /// <summary>
         /// bool to indicate if OperationalComment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperationalCommentSpecified
         {
             get {
             if(operationalCommentField!=null)
                 return operationalCommentField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationOperationalComment> operationalCommentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operations Weather Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationWeather", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Operations Weather Component Schema")]
    public partial class ProductionOperationWeather : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Date and time the information is related to. 
        /// </summary>
		[Required]
        [Description("Date and time the information is related to.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// Name of company that supplied the data. 
        /// </summary>
		[StringLength(32)]
        [Description("Name of company that supplied the data.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("agency")]
        public string Agency {
            get {
                return agencyField;
            } 
            set {
                agencyField = value;
                NotifyPropertyChanged("Agency");
            }
        }

        private string agencyField; 

        /// <summary>
        /// Atmospheric pressure. 
        /// </summary>
		[Description("Atmospheric pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("barometricPressure")]
        public PressureMeasure BarometricPressure {
            get {
                return barometricPressureField;
            } 
            set {
                barometricPressureField = value;
                NotifyPropertyChanged("BarometricPressure");
            }
        }

        private PressureMeasure barometricPressureField; 

        /// <summary>
        /// The Beaufort wind scale is a system used to estimate and report wind speeds when no measuring apparatus is available. It was invented in the early 19th Century by Admiral Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions. 
        /// </summary>
		[Range(0, 12)]
        [Description("The Beaufort wind scale is a system used to estimate and report wind speeds  when no measuring apparatus is available. It was invented in the early 19th Century by Admiral  Sir Francis Beaufort of the British Navy as a way to interpret winds from conditions.")]
        [EnergisticsDataTypeAttribute(DataType = "beaufortScaleIntegerCode")]
		[XmlElement("beaufortScaleNumber")]
        public short? BeaufortScaleNumber {
            get {
                return beaufortScaleNumberField;
            } 
            set {
                beaufortScaleNumberField = value;
                 this.BeaufortScaleNumberSpecified = true;
                NotifyPropertyChanged("BeaufortScaleNumber");
            }
        }

        private short? beaufortScaleNumberField; 

        /// <summary>
        /// beaufortScaleNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BeaufortScaleNumberSpecified {
            get {
                return beaufortScaleNumberSpecifiedField;
            } 
            set {
                beaufortScaleNumberSpecifiedField = value;
                NotifyPropertyChanged("BeaufortScaleNumberSpecified");
            }
        }

        private bool beaufortScaleNumberSpecifiedField; 

        /// <summary>
        /// Average temperature above ground for the period. Temperature of the atmosphere. 
        /// </summary>
		[Description("Average temperature above ground for the period. Temperature of the atmosphere.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempSurface")]
        public ThermodynamicTemperatureMeasure TempSurface {
            get {
                return tempSurfaceField;
            } 
            set {
                tempSurfaceField = value;
                NotifyPropertyChanged("TempSurface");
            }
        }

        private ThermodynamicTemperatureMeasure tempSurfaceField; 

        /// <summary>
        /// Minimum temperature above ground. Temperature of the atmosphere. 
        /// </summary>
		[Description("Minimum temperature above ground. Temperature of the atmosphere.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempSurfaceMn")]
        public ThermodynamicTemperatureMeasure TempSurfaceMin {
            get {
                return tempSurfaceMnField;
            } 
            set {
                tempSurfaceMnField = value;
                NotifyPropertyChanged("TempSurfaceMin");
            }
        }

        private ThermodynamicTemperatureMeasure tempSurfaceMnField; 

        /// <summary>
        /// Maximum temperature above ground. 
        /// </summary>
		[Description("Maximum temperature above ground.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempSurfaceMx")]
        public ThermodynamicTemperatureMeasure TempSurfaceMax {
            get {
                return tempSurfaceMxField;
            } 
            set {
                tempSurfaceMxField = value;
                NotifyPropertyChanged("TempSurfaceMax");
            }
        }

        private ThermodynamicTemperatureMeasure tempSurfaceMxField; 

        /// <summary>
        /// A measure of the combined chilling effect of wind and low temperature on living things, also named chill factor, e.g., according to US weather service table, an air temperature of 30 degF with a 10 mi/h corresponds to a windchill of 22 degF. 
        /// </summary>
		[Description("A measure of the combined chilling effect of wind and low temperature on  living things, also named chill factor, e.g., according to US weather service table, an air  temperature of 30 degF with a 10 mi/h corresponds to a windchill of 22 degF.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempWindChill")]
        public ThermodynamicTemperatureMeasure TempWindChill {
            get {
                return tempWindChillField;
            } 
            set {
                tempWindChillField = value;
                NotifyPropertyChanged("TempWindChill");
            }
        }

        private ThermodynamicTemperatureMeasure tempWindChillField; 

        /// <summary>
        /// Sea temperature. 
        /// </summary>
		[Description("Sea temperature.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("tempsea")]
        public ThermodynamicTemperatureMeasure Tempsea {
            get {
                return tempseaField;
            } 
            set {
                tempseaField = value;
                NotifyPropertyChanged("Tempsea");
            }
        }

        private ThermodynamicTemperatureMeasure tempseaField; 

        /// <summary>
        /// Horizontal visibility. 
        /// </summary>
		[Description("Horizontal visibility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("visibility")]
        public LengthMeasure Visibility {
            get {
                return visibilityField;
            } 
            set {
                visibilityField = value;
                NotifyPropertyChanged("Visibility");
            }
        }

        private LengthMeasure visibilityField; 

        /// <summary>
        /// The direction from which the waves are coming, measured from true north. 
        /// </summary>
		[Description("The direction from which the waves are coming, measured from true north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziWave")]
        public PlaneAngleMeasure AziWave {
            get {
                return aziWaveField;
            } 
            set {
                aziWaveField = value;
                NotifyPropertyChanged("AziWave");
            }
        }

        private PlaneAngleMeasure aziWaveField; 

        /// <summary>
        /// Average height of the waves. 
        /// </summary>
		[Description("Average height of the waves.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("htWave")]
        public LengthMeasure HeightWave {
            get {
                return htWaveField;
            } 
            set {
                htWaveField = value;
                NotifyPropertyChanged("HeightWave");
            }
        }

        private LengthMeasure htWaveField; 

        /// <summary>
        /// An average of the higher 1/3 of the wave heights passing during a sample period (typically 20 to 30 minutes). 
        /// </summary>
		[Description("An average of the higher 1/3 of the wave heights passing during a   sample period (typically 20 to 30 minutes).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("significantWave")]
        public LengthMeasure SignificantWave {
            get {
                return significantWaveField;
            } 
            set {
                significantWaveField = value;
                NotifyPropertyChanged("SignificantWave");
            }
        }

        private LengthMeasure significantWaveField; 

        /// <summary>
        /// The maximum wave height.
        /// </summary>
		[Description("The maximum wave height.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("maxWave")]
        public LengthMeasure MaxWave {
            get {
                return maxWaveField;
            } 
            set {
                maxWaveField = value;
                NotifyPropertyChanged("MaxWave");
            }
        }

        private LengthMeasure maxWaveField; 

        /// <summary>
        /// The elapsed time between the passing of two wave tops. 
        /// </summary>
		[Description("The elapsed time between the passing of two wave tops.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("periodWave")]
        public TimeMeasure PeriodWave {
            get {
                return periodWaveField;
            } 
            set {
                periodWaveField = value;
                NotifyPropertyChanged("PeriodWave");
            }
        }

        private TimeMeasure periodWaveField; 

        /// <summary>
        /// The direction from which the wind is blowing, measured from true north. 
        /// </summary>
		[Description("The direction from which the wind is blowing, measured from true north.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziWind")]
        public PlaneAngleMeasure AziWind {
            get {
                return aziWindField;
            } 
            set {
                aziWindField = value;
                NotifyPropertyChanged("AziWind");
            }
        }

        private PlaneAngleMeasure aziWindField; 

        /// <summary>
        /// Wind speed. 
        /// </summary>
		[Description("Wind speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("velWind")]
        public VelocityMeasure VelWind {
            get {
                return velWindField;
            } 
            set {
                velWindField = value;
                NotifyPropertyChanged("VelWind");
            }
        }

        private VelocityMeasure velWindField; 

        /// <summary>
        /// Type of precipitation. 
        /// </summary>
		[StringLength(32)]
        [Description("Type of precipitation.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("typePrecip")]
        public string TypePrecip {
            get {
                return typePrecipField;
            } 
            set {
                typePrecipField = value;
                NotifyPropertyChanged("TypePrecip");
            }
        }

        private string typePrecipField; 

        /// <summary>
        /// Amount of precipitation. 
        /// </summary>
		[Description("Amount of precipitation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("amtPrecip")]
        public LengthMeasure AmtPrecip {
            get {
                return amtPrecipField;
            } 
            set {
                amtPrecipField = value;
                NotifyPropertyChanged("AmtPrecip");
            }
        }

        private LengthMeasure amtPrecipField; 

        /// <summary>
        /// Description of cloud cover. 
        /// </summary>
		[StringLength(32)]
        [Description("Description of cloud cover.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("coverCloud")]
        public string CoverCloud {
            get {
                return coverCloudField;
            } 
            set {
                coverCloudField = value;
                NotifyPropertyChanged("CoverCloud");
            }
        }

        private string coverCloudField; 

        /// <summary>
        /// Height of cloud cover. 
        /// </summary>
		[Description("Height of cloud cover.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("ceilingCloud")]
        public LengthMeasure CeilingCloud {
            get {
                return ceilingCloudField;
            } 
            set {
                ceilingCloudField = value;
                NotifyPropertyChanged("CeilingCloud");
            }
        }

        private LengthMeasure ceilingCloudField; 

        /// <summary>
        /// Current speed. 
        /// </summary>
		[Description("Current speed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "velocityMeasure")]
		[XmlElement("currentSea")]
        public VelocityMeasure CurrentSea {
            get {
                return currentSeaField;
            } 
            set {
                currentSeaField = value;
                NotifyPropertyChanged("CurrentSea");
            }
        }

        private VelocityMeasure currentSeaField; 

        /// <summary>
        /// Azimuth of current. 
        /// </summary>
		[Description("Azimuth of current.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "planeAngleMeasure")]
		[XmlElement("aziCurrentSea")]
        public PlaneAngleMeasure AziCurrentSea {
            get {
                return aziCurrentSeaField;
            } 
            set {
                aziCurrentSeaField = value;
                NotifyPropertyChanged("AziCurrentSea");
            }
        }

        private PlaneAngleMeasure aziCurrentSeaField; 

        /// <summary>
        /// Comments and remarks. 
        /// </summary>
		[StringLength(4000)]
        [Description("Comments and remarks.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comments")]
        public string Comments {
            get {
                return commentsField;
            } 
            set {
                commentsField = value;
                NotifyPropertyChanged("Comments");
            }
        }

        private string commentsField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the safetyCount xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="safetyCount", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the safetyCount xsd type.")]
    public partial class SafetyCount : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the SafetyCount class.
        /// </summary>
        public SafetyCount() {}

        /// <summary>
        /// Initializes a new instance of the SafetyCount class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public SafetyCount(short value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The type of safety issue for which a count is being defined.
        /// </summary>
		[Description("The type of safety issue for which a count is being defined.")]
        [EnergisticsDataTypeAttribute(DataType = "SafetyType")]
        [XmlAttribute("type")]
		        public string TypeSurrogate
        {
            get {
                     if(Type==null)  return null;
                     else return Type.Name; }
            set { 

                 if(this.Type== null)
                 Type= new SafetyType(value);
                 else
                   Type.Name = value; }
        }
        /// <summary>
        /// The type of safety issue for which a count is being defined.
        /// </summary>
        [XmlIgnore]

        public SafetyType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private SafetyType typeField; 

        /// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool typeSpecifiedField; 

		/// <summary>
        /// The type of period being reported by this count.
        /// </summary>
		[Description("The type of period being reported by this count.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingPeriod")]
        [XmlAttribute("period")]
		        public string PeriodSurrogate
        {
            get {
                     if(Period==null)  return null;
                     else return Period.Name; }
            set { 

                 if(this.Period== null)
                 Period= new ReportingPeriod(value);
                 else
                   Period.Name = value; }
        }
        /// <summary>
        /// The type of period being reported by this count.
        /// </summary>
        [XmlIgnore]

        public ReportingPeriod Period {
            get {
                return periodField;
            } 
            set {
                periodField = value;
                 this.PeriodSpecified = true;
                NotifyPropertyChanged("Period");
            }
        }

        private ReportingPeriod periodField; 

        /// <summary>
        /// periodSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeriodSpecified {
            get {
                return periodSpecifiedField;
            } 
            set {
                periodSpecifiedField = value;
                NotifyPropertyChanged("PeriodSpecified");
            }
        }

        private bool periodSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public short Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private short ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Safety Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationSafety", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Safety Component Schema.")]
    public partial class ProductionOperationSafety : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The mean time between safety incidents.
        /// </summary>
		[Description("The mean time between safety incidents.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("meantimeIncident")]
        public TimeMeasure MeantimeIncident {
            get {
                return meantimeIncidentField;
            } 
            set {
                meantimeIncidentField = value;
                NotifyPropertyChanged("MeantimeIncident");
            }
        }

        private TimeMeasure meantimeIncidentField; 

        /// <summary>
        /// The count of a type of safety issue.
        /// </summary>
		[Description("The count of a type of safety issue.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "safetyCount")]
		[XmlElement("safetyCount")]
        public List<SafetyCount> SafetyCount {
            get {
                return safetyCountField;
            } 
            set {
                safetyCountField = value;
                NotifyPropertyChanged("SafetyCount");
            }
        }

         /// <summary>
         /// bool to indicate if SafetyCount has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SafetyCountSpecified
         {
             get {
             if(safetyCountField!=null)
                 return safetyCountField.Count>0?true:false;
             else return false;
             }
         }
        private List<SafetyCount> safetyCountField; 

        /// <summary>
        /// Safety related comment. 
        /// </summary>
		[Description("Safety related comment.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_datedComment")]
		[XmlElement("comment")]
        public List<DatedComment> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<DatedComment> commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Operational Health, Safety and Environment Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationHSE", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Operational Health, Safety and Environment Component Schema.")]
    public partial class ProductionOperationHSE : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// the number of incidents of accidents and injuries that were reported.
        /// </summary>
		[Description("the number of incidents of accidents and injuries that were reported.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("IncidentCount")]
        public short? IncidentCount {
            get {
                return IncidentCountField;
            } 
            set {
                IncidentCountField = value;
                 this.IncidentCountSpecified = true;
                NotifyPropertyChanged("IncidentCount");
            }
        }

        private short? IncidentCountField; 

        /// <summary>
        /// IncidentCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IncidentCountSpecified {
            get {
                return IncidentCountSpecifiedField;
            } 
            set {
                IncidentCountSpecifiedField = value;
                NotifyPropertyChanged("IncidentCountSpecified");
            }
        }

        private bool IncidentCountSpecifiedField; 

        /// <summary>
        /// The amount of time since the most recent Lost Time Accident.
        /// </summary>
		[Description("The amount of time since the most recent Lost Time Accident.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("sinceLostTime")]
        public TimeMeasure SinceLostTime {
            get {
                return sinceLostTimeField;
            } 
            set {
                sinceLostTimeField = value;
                NotifyPropertyChanged("SinceLostTime");
            }
        }

        private TimeMeasure sinceLostTimeField; 

        /// <summary>
        /// The amount of time since the most recent accident prevention exercise.
        /// </summary>
		[Description("The amount of time since the most recent accident prevention exercise.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("sincePreventionExercise")]
        public TimeMeasure SincePreventionExercise {
            get {
                return sincePreventionExerciseField;
            } 
            set {
                sincePreventionExerciseField = value;
                NotifyPropertyChanged("SincePreventionExercise");
            }
        }

        private TimeMeasure sincePreventionExerciseField; 

        /// <summary>
        /// The amount of time since the most recent defined hazard and accident situation (Norwegian DFU). 
        /// </summary>
		[Description("The amount of time since the most recent defined hazard and accident situation (Norwegian DFU).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("sinceDefinedSituation")]
        public TimeMeasure SinceDefinedSituation {
            get {
                return sinceDefinedSituationField;
            } 
            set {
                sinceDefinedSituationField = value;
                NotifyPropertyChanged("SinceDefinedSituation");
            }
        }

        private TimeMeasure sinceDefinedSituationField; 

        /// <summary>
        /// The number of medical treatments that have occurred.
        /// </summary>
		[Description("The number of medical treatments that have occurred.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("medicalTreatmentCount")]
        public short? MedicalTreatmentCount {
            get {
                return medicalTreatmentCountField;
            } 
            set {
                medicalTreatmentCountField = value;
                 this.MedicalTreatmentCountSpecified = true;
                NotifyPropertyChanged("MedicalTreatmentCount");
            }
        }

        private short? medicalTreatmentCountField; 

        /// <summary>
        /// medicalTreatmentCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MedicalTreatmentCountSpecified {
            get {
                return medicalTreatmentCountSpecifiedField;
            } 
            set {
                medicalTreatmentCountSpecifiedField = value;
                NotifyPropertyChanged("MedicalTreatmentCountSpecified");
            }
        }

        private bool medicalTreatmentCountSpecifiedField; 

        /// <summary>
        /// The number of system alarms that have occurred.
        /// </summary>
		[Description("The number of system alarms that have occurred.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("alarmCount")]
        public short? AlarmCount {
            get {
                return alarmCountField;
            } 
            set {
                alarmCountField = value;
                 this.AlarmCountSpecified = true;
                NotifyPropertyChanged("AlarmCount");
            }
        }

        private short? alarmCountField; 

        /// <summary>
        /// alarmCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AlarmCountSpecified {
            get {
                return alarmCountSpecifiedField;
            } 
            set {
                alarmCountSpecifiedField = value;
                NotifyPropertyChanged("AlarmCountSpecified");
            }
        }

        private bool alarmCountSpecifiedField; 

        /// <summary>
        /// The number of personnel safety introductions that have occurred.
        /// </summary>
		[Description("The number of personnel safety introductions that have occurred.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("safetyIntroCount")]
        public short? SafetyIntroCount {
            get {
                return safetyIntroCountField;
            } 
            set {
                safetyIntroCountField = value;
                 this.SafetyIntroCountSpecified = true;
                NotifyPropertyChanged("SafetyIntroCount");
            }
        }

        private short? safetyIntroCountField; 

        /// <summary>
        /// safetyIntroCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SafetyIntroCountSpecified {
            get {
                return safetyIntroCountSpecifiedField;
            } 
            set {
                safetyIntroCountSpecifiedField = value;
                NotifyPropertyChanged("SafetyIntroCountSpecified");
            }
        }

        private bool safetyIntroCountSpecifiedField; 

        /// <summary>
        /// A textual description of safety considerations.
        /// </summary>
		[StringLength(4000)]
        [Description("A textual description of safety considerations.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("safetyDescription")]
        public string SafetyDescription {
            get {
                return safetyDescriptionField;
            } 
            set {
                safetyDescriptionField = value;
                NotifyPropertyChanged("SafetyDescription");
            }
        }

        private string safetyDescriptionField; 

        /// <summary>
        /// Safety information at a specific installatino.
        /// </summary>
		[Description("Safety information at a specific installatino.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationSafety")]
		[XmlElement("safety")]
        public List<ProductionOperationSafety> Safety {
            get {
                return safetyField;
            } 
            set {
                safetyField = value;
                NotifyPropertyChanged("Safety");
            }
        }

         /// <summary>
         /// bool to indicate if Safety has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SafetySpecified
         {
             get {
             if(safetyField!=null)
                 return safetyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationSafety> safetyField; 

        /// <summary>
        /// Information about the weather at a point in time.
        /// </summary>
		[Description("Information about the weather at a point in time.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationWeather")]
		[XmlElement("weather")]
        public List<ProductionOperationWeather> Weather {
            get {
                return weatherField;
            } 
            set {
                weatherField = value;
                NotifyPropertyChanged("Weather");
            }
        }

         /// <summary>
         /// bool to indicate if Weather has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WeatherSpecified
         {
             get {
             if(weatherField!=null)
                 return weatherField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationWeather> weatherField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the crewCount xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="crewCount", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the crewCount xsd type.")]
    public partial class CrewCount : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CrewCount class.
        /// </summary>
        public CrewCount() {}

        /// <summary>
        /// Initializes a new instance of the CrewCount class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public CrewCount(short value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// The type of crew for which a count is being defined.
        /// </summary>
		[Description("The type of crew for which a count is being defined.")]
        [EnergisticsDataTypeAttribute(DataType = "CrewType")]
        [XmlAttribute("type")]
		        public string TypeSurrogate
        {
            get {
                     if(Type==null)  return null;
                     else return Type.Name; }
            set { 

                 if(this.Type== null)
                 Type= new CrewType(value);
                 else
                   Type.Name = value; }
        }
        /// <summary>
        /// The type of crew for which a count is being defined.
        /// </summary>
        [XmlIgnore]

        public CrewType Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                 this.TypeSpecified = true;
                NotifyPropertyChanged("Type");
            }
        }

        private CrewType typeField; 

        /// <summary>
        /// typeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TypeSpecified {
            get {
                return typeSpecifiedField;
            } 
            set {
                typeSpecifiedField = value;
                NotifyPropertyChanged("TypeSpecified");
            }
        }

        private bool typeSpecifiedField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public short Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private short ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML -Installation Report Component Schema
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productionOperationInstallationReport", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML -Installation Report Component Schema")]
    public partial class ProductionOperationInstallationReport : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The installation represented by this report.
        /// </summary>
		[Description("The installation represented by this report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// Total count of beds available on the installation.
        /// </summary>
		[Description("Total count of beds available on the installation.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("bedsAvailable")]
        public short? BedsAvailable {
            get {
                return bedsAvailableField;
            } 
            set {
                bedsAvailableField = value;
                 this.BedsAvailableSpecified = true;
                NotifyPropertyChanged("BedsAvailable");
            }
        }

        private short? bedsAvailableField; 

        /// <summary>
        /// bedsAvailableSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BedsAvailableSpecified {
            get {
                return bedsAvailableSpecifiedField;
            } 
            set {
                bedsAvailableSpecifiedField = value;
                NotifyPropertyChanged("BedsAvailableSpecified");
            }
        }

        private bool bedsAvailableSpecifiedField; 

        /// <summary>
        /// The count of personnel on a type of crew. One of the types is all personnel on board.
        /// </summary>
		[Description("The count of personnel on a type of crew. One of the types is all personnel on board.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "crewCount")]
		[XmlElement("crewCount")]
        public List<CrewCount> CrewCount {
            get {
                return crewCountField;
            } 
            set {
                crewCountField = value;
                NotifyPropertyChanged("CrewCount");
            }
        }

         /// <summary>
         /// bool to indicate if CrewCount has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CrewCountSpecified
         {
             get {
             if(crewCountField!=null)
                 return crewCountField.Count>0?true:false;
             else return false;
             }
         }
        private List<CrewCount> crewCountField; 

        /// <summary>
        /// The total cumulative amount of time worked during the reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.
        /// </summary>
		[Description("The total cumulative amount of time worked during the  reporting period.  Commonly specified in units of hours.  Note that a day unit translates to 24 hours worked.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("work")]
        public TimeMeasure Work {
            get {
                return workField;
            } 
            set {
                workField = value;
                NotifyPropertyChanged("Work");
            }
        }

        private TimeMeasure workField; 

        /// <summary>
        /// The total cumulative amount of time worked from the beginning of the month to the end of reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.
        /// </summary>
		[Description("The total cumulative amount of time worked from the beginning of  the month to the end of reporting period.  Commonly specified in units of hours.  Note that a day unit translates to 24 hours worked.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("workMonthToDate")]
        public TimeMeasure WorkMonthToDate {
            get {
                return workMonthToDateField;
            } 
            set {
                workMonthToDateField = value;
                NotifyPropertyChanged("WorkMonthToDate");
            }
        }

        private TimeMeasure workMonthToDateField; 

        /// <summary>
        /// The total cumulative amount of time worked from the beginning of the year to the end of reporting period. Commonly specified in units of hours. Note that a day unit translates to 24 hours worked.
        /// </summary>
		[Description("The total cumulative amount of time worked from the beginning of  the year to the end of reporting period.  Commonly specified in units of hours.  Note that a day unit translates to 24 hours worked.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("workYearToDate")]
        public TimeMeasure WorkYearToDate {
            get {
                return workYearToDateField;
            } 
            set {
                workYearToDateField = value;
                NotifyPropertyChanged("WorkYearToDate");
            }
        }

        private TimeMeasure workYearToDateField; 

        /// <summary>
        /// Health, Safety and Environmenal information.
        /// </summary>
		[Description("Health, Safety and Environmenal information.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationHSE")]
		[XmlElement("operationalHSE")]
        public List<ProductionOperationHSE> OperationalHSE {
            get {
                return operationalHSEField;
            } 
            set {
                operationalHSEField = value;
                NotifyPropertyChanged("OperationalHSE");
            }
        }

         /// <summary>
         /// bool to indicate if OperationalHSE has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OperationalHSESpecified
         {
             get {
             if(operationalHSEField!=null)
                 return operationalHSEField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationHSE> operationalHSEField; 

        /// <summary>
        /// Production activities.
        /// </summary>
		[Description("Production activities.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationActivity")]
		[XmlElement("productionActivity")]
        public ProductionOperationActivity ProductionActivity {
            get {
                return productionActivityField;
            } 
            set {
                productionActivityField = value;
                NotifyPropertyChanged("ProductionActivity");
            }
        }

        private ProductionOperationActivity productionActivityField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The non-contextual content of a WITSML Production Operation object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_productionOperation", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The non-contextual content of a WITSML Production Operation object.")]
    public partial class ProductionOperation : Object, IProdmlDataObject, ICommonDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the Production Operation Report. 
        /// </summary>
		[Required]
        [Description("Human recognizable context for the Production Operation Report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("name")]
        public NameStruct Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private NameStruct nameField; 

        /// <summary>
        /// The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility which is represented by this report.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(contextFacilityField!=null)
                 return contextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> contextFacilityField; 

        /// <summary>
        /// The type of report.
        /// </summary>
		[StringLength(40)]
        [Description("The type of report.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("kind")]
        public string Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string kindField; 

        /// <summary>
        /// The type of period that is being reported. This value must be consistent with the reporting start and end values.
        /// </summary>
		[Description("The type of period that is being reported. This value must be consistent with the reporting start and end values.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingPeriod")]
		[XmlElement("periodKind")]
        public ReportingPeriod PeriodKind {
            get {
                return periodKindField;
            } 
            set {
                periodKindField = value;
                 this.PeriodKindSpecified = true;
                NotifyPropertyChanged("PeriodKind");
            }
        }

        private ReportingPeriod periodKindField; 

        /// <summary>
        /// periodKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PeriodKindSpecified {
            get {
                return periodKindSpecifiedField;
            } 
            set {
                periodKindSpecifiedField = value;
                NotifyPropertyChanged("PeriodKindSpecified");
            }
        }

        private bool periodKindSpecifiedField; 

        /// <summary>
        /// The beginning date and time that the report represents. If you set this property, you must also set DateTimeEnd.
        /// </summary>
        [XmlElement("dTimStart")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        public DateTime? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property DateTimeStart when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property DateTimeStart when property DateStart is already set");
                dTimStartField = value;
                DateTimeStartSpecified = (value!=null);
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private DateTime? dTimStartField; 
        private bool dateTimeStartSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTimeStart has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeStartSpecified
        {
            get {
                return dateTimeStartSpecified;
            }
            set {
                dateTimeStartSpecified= value;
            }
        }

        /// <summary>
        /// The ending date and time that the report represents. If you set this property, you must also set DateTimeStart.
        /// </summary>
        [XmlElement("dTimEnd")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
        public DateTime? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                if (value != null && DateEndSpecified) throw new Exception("Cannot set property DateTimeEnd when property DateEnd is already set");
                if (value != null && DateStartSpecified) throw new Exception("Cannot set property DateTimeEnd when property DateStart is already set");
                dTimEndField = value;
                DateTimeEndSpecified = (value!=null);
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private DateTime? dTimEndField; 
        private bool dateTimeEndSpecified = false; 

        /// <summary>
        /// bool to indicate if DateTimeEnd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateTimeEndSpecified
        {
            get {
                return dateTimeEndSpecified;
            }
            set {
                dateTimeEndSpecified= value;
            }
        }

        /// <summary>
        /// The beginning date that the report represents. If you set this property, you must also set DateEnd.
        /// </summary>
        [XmlElement("dateStart", DataType="date")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
        public DateTime? DateStart {
            get {
                return dateStartField;
            } 
            set {
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property DateStart when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property DateStart when property DateTimeStart is already set");
                dateStartField = value;
                DateStartSpecified = (value!=null);
                NotifyPropertyChanged("DateStart");
            }
        }

        private DateTime? dateStartField; 
        private bool dateStartSpecified = false; 

        /// <summary>
        /// bool to indicate if DateStart has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateStartSpecified
        {
            get {
                return dateStartSpecified;
            }
            set {
                dateStartSpecified= value;
            }
        }

        /// <summary>
        /// The ending date that the report represents. If you set this property, you must also set DateStart.
        /// </summary>
        [XmlElement("dateEnd", DataType="date")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
        public DateTime? DateEnd {
            get {
                return dateEndField;
            } 
            set {
                if (value != null && DateTimeEndSpecified) throw new Exception("Cannot set property DateEnd when property DateTimeEnd is already set");
                if (value != null && DateTimeStartSpecified) throw new Exception("Cannot set property DateEnd when property DateTimeStart is already set");
                dateEndField = value;
                DateEndSpecified = (value!=null);
                NotifyPropertyChanged("DateEnd");
            }
        }

        private DateTime? dateEndField; 
        private bool dateEndSpecified = false; 

        /// <summary>
        /// bool to indicate if DateEnd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DateEndSpecified
        {
            get {
                return dateEndSpecified;
            }
            set {
                dateEndSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType5> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType5> ItemsElementNameField; 

        /// <summary>
        /// The operator of the facilities in the report.
        /// </summary>
		[Description("The operator of the facilities in the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("operator")]
        public BusinessAssociate Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate operatorField; 

        /// <summary>
        /// The tile of the report if different from the name of the report.
        /// </summary>
		[Description("The tile of the report if different from the name of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("title")]
        public NameStruct Title {
            get {
                return titleField;
            } 
            set {
                titleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private NameStruct titleField; 

        /// <summary>
        /// The geographic context of the report.
        /// </summary>
		[Description("The geographic context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_geographicContext")]
		[XmlElement("geographicContext")]
        public GeographicContext GeographicContext {
            get {
                return geographicContextField;
            } 
            set {
                geographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext geographicContextField; 

        /// <summary>
        /// The date that the report was issued.
        /// </summary>
		[Description("The date that the report was issued.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("issueDate", DataType="date")]
        public DateTime? IssueDate {
            get {
                return issueDateField;
            } 
            set {
                issueDateField = value;
                 this.IssueDateSpecified = true;
                NotifyPropertyChanged("IssueDate");
            }
        }

        private DateTime? issueDateField; 

        /// <summary>
        /// issueDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IssueDateSpecified {
            get {
                return issueDateSpecifiedField;
            } 
            set {
                issueDateSpecifiedField = value;
                NotifyPropertyChanged("IssueDateSpecified");
            }
        }

        private bool issueDateSpecifiedField; 

        /// <summary>
        /// The person or company that issued the report. This may contain the role of the person or company within the context of the report.
        /// </summary>
		[Description("The person or company that issued the report. This may contain the role of the person or company within the context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("issuedBy")]
        public BusinessAssociate IssuedBy {
            get {
                return issuedByField;
            } 
            set {
                issuedByField = value;
                NotifyPropertyChanged("IssuedBy");
            }
        }

        private BusinessAssociate issuedByField; 

        /// <summary>
        /// The date that the report was approved.
        /// </summary>
		[Description("The date that the report was approved.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("approvalDate", DataType="date")]
        public DateTime? ApprovalDate {
            get {
                return approvalDateField;
            } 
            set {
                approvalDateField = value;
                 this.ApprovalDateSpecified = true;
                NotifyPropertyChanged("ApprovalDate");
            }
        }

        private DateTime? approvalDateField; 

        /// <summary>
        /// approvalDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ApprovalDateSpecified {
            get {
                return approvalDateSpecifiedField;
            } 
            set {
                approvalDateSpecifiedField = value;
                NotifyPropertyChanged("ApprovalDateSpecified");
            }
        }

        private bool approvalDateSpecifiedField; 

        /// <summary>
        /// The person or company that approved the report. This may contain the role of the person or company within the context of the report.
        /// </summary>
		[Description("The person or company that approved the report. This may contain the role of the person or company within the context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("approver")]
        public BusinessAssociate Approver {
            get {
                return approverField;
            } 
            set {
                approverField = value;
                NotifyPropertyChanged("Approver");
            }
        }

        private BusinessAssociate approverField; 

        /// <summary>
        /// A report for each installation
        /// </summary>
		[Description("A report for each installation")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productionOperationInstallationReport")]
		[XmlElement("installationReport")]
        public List<ProductionOperationInstallationReport> InstallationReport {
            get {
                return installationReportField;
            } 
            set {
                installationReportField = value;
                NotifyPropertyChanged("InstallationReport");
            }
        }

         /// <summary>
         /// bool to indicate if InstallationReport has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InstallationReportSpecified
         {
             get {
             if(installationReportField!=null)
                 return installationReportField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperationInstallationReport> installationReportField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_productFlowModel", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail.")]
    public partial class ProductFlowModel : Object, IProdmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the Product Flow Model.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the Product Flow Model.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The name of the facility which is represented by this model. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility which is represented by this model.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(contextFacilityField!=null)
                 return contextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> contextFacilityField; 

        /// <summary>
        /// The date and time of the start of validity for this model.
        /// </summary>
		[Description("The date and time of the start of validity for this model.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time of the termination of validity for this model.
        /// </summary>
		[Description("The date and time of the termination of validity for this model.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The time for which "currently existing" data is desired from the network. All connections (and related data) existing at this time (i.e. start and end bracket this value) will will be returned if requested. The existence time is a server query parameter. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The time for which \"currently existing\" data is desired from the network. All connections (and related data) existing at this time (i.e. start and end bracket this value) will will be returned if requested. The existence time is a server query parameter. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("existenceTime")]
        public EndpointQualifiedDateTime ExistenceTime {
            get {
                return existenceTimeField;
            } 
            set {
                existenceTimeField = value;
                NotifyPropertyChanged("ExistenceTime");
            }
        }

        private EndpointQualifiedDateTime existenceTimeField; 

        /// <summary>
        /// The minimum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The minimum time index contained within the report. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return dTimMinField;
            } 
            set {
                dTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime dTimMinField; 

        /// <summary>
        /// The maximum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The maximum time index contained within the report. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return dTimMaxField;
            } 
            set {
                dTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime dTimMaxField; 

        /// <summary>
        /// Defines the external port in another Product Flow Model to which an external port in this model is connected. An external port should be connected to an external port with the opposite direction. The connected external port must be in another Product Flow Model. These connections should always be defined on a one-to-one basis. For example, if a facility may receive input from multiple other facilities then a separate input port should be defined for each of those facilities. This allows any question about mass balancing to be contained within each individual model. The external port name must match the name of an external port on the network that represents this model.
        /// </summary>
		[Description("Defines the external port in another Product Flow Model to which  an external port in this model is connected. An external port should be connected to an external port with the opposite direction. The connected external port must be in another Product Flow Model. These connections should always be defined on a one-to-one basis. For example, if a facility may receive input from multiple other facilities then a separate input port should be defined for each of those facilities. This allows any question about mass balancing to be contained  within each individual model. The external port name must match the name of an external port on the network that represents this model.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowExternalReference")]
		[XmlElement("externalConnect")]
        public List<ProductFlowExternalReference> ExternalConnect {
            get {
                return externalConnectField;
            } 
            set {
                externalConnectField = value;
                NotifyPropertyChanged("ExternalConnect");
            }
        }

         /// <summary>
         /// bool to indicate if ExternalConnect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExternalConnectSpecified
         {
             get {
             if(externalConnectField!=null)
                 return externalConnectField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExternalReference> externalConnectField; 

        /// <summary>
        /// The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail. One of the networks must represent this model.
        /// </summary>
		[Required]
        [Description("The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail. One of the networks must represent this model.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowNetwork")]
		[XmlElement("network")]
        public List<ProductFlowNetwork> Network {
            get {
                return networkField;
            } 
            set {
                networkField = value;
                NotifyPropertyChanged("Network");
            }
        }

         /// <summary>
         /// bool to indicate if Network has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NetworkSpecified
         {
             get {
             if(networkField!=null)
                 return networkField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowNetwork> networkField; 

        /// <summary>
        /// A descriptive remark about the model.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the model.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of an object. This should not be used for child nodes within an object. For an independent object, the value may be globally unique. For a dependent object, the value must be unique (for the same object type) within the context of the parent object. There should be no assumption as to the semantic content of this attribute. The purpose of this type is to facilitate modifying the optionality in derived schemas.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A reference to an external port within a different Product Flow Model. This value represents a foreign key from one element to another.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowExternalReference", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A reference to an external port within a different Product Flow Model. This value represents a foreign key from one element to another.")]
    public partial class ProductFlowExternalReference : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// A pointer to the external port in the network that represents the current Model. This is the port to which a different model is being connected.
        /// </summary>
		[Required]
        [Description("A pointer to the external port in the network  that represents the current Model.  This is the port to which a different model is being connected.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("port")]
        public RefNameString Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

        private RefNameString portField; 

        /// <summary>
        /// A pointer to the external port within the connected Model. This is the port on a different model to which the port on this model is connected.
        /// </summary>
		[Required]
        [Description("A pointer to the external port within the connected Model. This is the port on a different model to which the port on this model is connected.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("connectedPort")]
        public RefNameString ConnectedPort {
            get {
                return connectedPortField;
            } 
            set {
                connectedPortField = value;
                NotifyPropertyChanged("ConnectedPort");
            }
        }

        private RefNameString connectedPortField; 

        /// <summary>
        /// A pointer to the Product Flow Model that contains the connected port.
        /// </summary>
		[Required]
        [Description("A pointer to the Product Flow Model that contains the connected port.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("connectedModel")]
        public RefNameString ConnectedModel {
            get {
                return connectedModelField;
            } 
            set {
                connectedModelField = value;
                NotifyPropertyChanged("ConnectedModel");
            }
        }

        private RefNameString connectedModelField; 

        /// <summary>
        /// The name of the facility that is represented by the connected model. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility that is represented by the connected model.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("connectedInstallation")]
        public FacilityIdentifierStruct ConnectedInstallation {
            get {
                return connectedInstallationField;
            } 
            set {
                connectedInstallationField = value;
                NotifyPropertyChanged("ConnectedInstallation");
            }
        }

        private FacilityIdentifierStruct connectedInstallationField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The non-contextual content of a WITSML Product Flow Network object.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowNetwork", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The non-contextual content of a WITSML Product Flow Network object.")]
    public partial class ProductFlowNetwork : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the Product Flow Network. This must be unique within the context of the overall Product Flow Model.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the Product Flow Network. This must be unique within the context of the overall Product Flow Model.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The name of a network plan. This indicates a planned network. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual network.
        /// </summary>
		[StringLength(64)]
        [Description("The name of a network plan. This indicates a planned network. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual network.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("planName")]
        public string PlanName {
            get {
                return planNameField;
            } 
            set {
                planNameField = value;
                NotifyPropertyChanged("PlanName");
            }
        }

        private string planNameField; 

        /// <summary>
        /// A pointer to the network containing the unit that this network represents. That is, the Unit must exist in a different Network. If a parent network is not specified then the network represents the model. A model should only be represented by one network. The model network represents the overall installation. All other networks represent internal detail and should not be referenced from outside the model. The external ports on the model network represent the external ports to the overall Product Flow Model. A pointer to an external port on the Product Flow Model does not require the name of the model network because it is redundant to knowledge of the model name (i.e., there is a one-to-one correspondence).
        /// </summary>
		[Description("A pointer to the network containing the unit that this network represents. That is, the Unit must exist in a different Network. If a parent network is not specified then the network represents the model. A model should only be represented by one network. The model network represents the overall installation.  All other networks represent internal detail and should not be referenced from  outside the model. The external ports on the model network represent  the external ports to the overall Product Flow Model. A pointer to an external port on the Product Flow Model does not require the name of the model network because it is redundant to knowledge of the model name  (i.e., there is a one-to-one correspondence).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("parentNetwork")]
        public RefNameString ParentNetwork {
            get {
                return parentNetworkField;
            } 
            set {
                parentNetworkField = value;
                NotifyPropertyChanged("ParentNetwork");
            }
        }

        private RefNameString parentNetworkField; 

        /// <summary>
        /// DEPRECATED. Use parentNetwork for all new work. A pointer to the Flow Unit that this network represents. The Unit must exist in a different Network. If a unit is not specified then the network represents the model. A model should only be represented by one network. The model network represents the overall installation. All other networks represent internal detail and should not be referenced from outside this model. The external ports on the model network represent the external ports to the overall Product Flow Model. A pointer to an external port on the Product Flow Model does not require the name of the model network because it is redundant to knowledge of the model name (i.e., there is a one-to-one correspondence). A unit model defines the internal behavior of a Flow Unit.
        /// </summary>
		[Description("DEPRECATED. Use parentNetwork for all new work. A pointer to the Flow Unit that this network represents. The Unit must exist in a different Network. If a unit is not specified then the network represents the model. A model should only be represented by one network. The model network represents the overall installation.  All other networks represent internal detail and should not be referenced from  outside this model. The external ports on the model network represent  the external ports to the overall Product Flow Model. A pointer to an external port on the Product Flow Model does not require the name of the model network because it is redundant to knowledge of the model name  (i.e., there is a one-to-one correspondence). A unit model defines the internal behavior of a Flow Unit.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("representedUnit")]
        public RefNameString RepresentedUnit {
            get {
                return representedUnitField;
            } 
            set {
                representedUnitField = value;
                NotifyPropertyChanged("RepresentedUnit");
            }
        }

        private RefNameString representedUnitField; 

        /// <summary>
        /// A descriptive remark about the network.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the network.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// An external port. This exposes an internal node for the purpose of allowing connections to the internal behavior of the network. Networks that represent a Flow Unit should always have external ports. If this network represents a Unit then the name of the external port must match the name of a port on the Unit (i.e., they are logically the same port).
        /// </summary>
		[Description("An external port. This exposes an internal node for the purpose of allowing connections to the internal behavior of the network. Networks that represent a Flow Unit should always have external ports. If this network represents a Unit then the name of the external port must match the name of a port on the Unit (i.e., they are logically the same port).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowlExternalPort")]
		[XmlElement("port")]
        public List<ProductFlowlExternalPort> Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

         /// <summary>
         /// bool to indicate if Port has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortSpecified
         {
             get {
             if(portField!=null)
                 return portField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowlExternalPort> portField; 

        /// <summary>
        /// A flow behavior for one unit. Within this context, a unit represents a usage of equipment for some purpose. The unit is generally identified by its function rather than the actual equipment used to realize the function. A unit might represent something complex like a field or separator or something simple like a valve or pump.
        /// </summary>
		[Required]
        [Description("A flow behavior for one unit. Within this context, a unit represents a usage of equipment for some purpose. The unit is generally identified by its function rather than the actual equipment used to realize the function. A unit might represent something complex like a field or separator or something simple  like a valve or pump.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowUnit")]
		[XmlElement("unit")]
        public List<ProductFlowUnit> Unit {
            get {
                return unitField;
            } 
            set {
                unitField = value;
                NotifyPropertyChanged("Unit");
            }
        }

         /// <summary>
         /// bool to indicate if Unit has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool UnitSpecified
         {
             get {
             if(unitField!=null)
                 return unitField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowUnit> unitField; 

        /// <summary>
        /// Documents that a change occurred at a particular time.
        /// </summary>
		[Description("Documents that a change occurred at a particular time.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowChangeLog")]
		[XmlElement("changeLog")]
        public List<ProductFlowChangeLog> ChangeLog {
            get {
                return changeLogField;
            } 
            set {
                changeLogField = value;
                NotifyPropertyChanged("ChangeLog");
            }
        }

         /// <summary>
         /// bool to indicate if ChangeLog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChangeLogSpecified
         {
             get {
             if(changeLogField!=null)
                 return changeLogField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowChangeLog> changeLogField; 

        /// <summary>
        /// Defines the existance of a planned network which is a variant of this network beginning at a specified point in time. Any changes to the actual network after that time do not affect the plan.
        /// </summary>
		[Description("Defines the existance of a planned network which is a variant of this network beginning at a specified point in time. Any changes to the actual network after that time do not affect the plan.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowNetworkPlan")]
		[XmlElement("plan")]
        public List<ProductFlowNetworkPlan> Plan {
            get {
                return planField;
            } 
            set {
                planField = value;
                NotifyPropertyChanged("Plan");
            }
        }

         /// <summary>
         /// bool to indicate if Plan has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PlanSpecified
         {
             get {
             if(planField!=null)
                 return planField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowNetworkPlan> planField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Flow Network External Port Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowlExternalPort", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Flow Network External Port Component Schema.")]
    public partial class ProductFlowlExternalPort : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the external port within the context of the current Product Flow Network.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the external port within the context of  the current Product Flow Network.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Defines whether this port is an inlet or outlet. Note that this is a nominal intended direction.
        /// </summary>
		[Required]
        [Description("Defines whether this port is an inlet or outlet. Note that this is a nominal intended direction.")]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowPortType")]
		[XmlElement("direction")]
        public ProductFlowPortType Direction {
            get {
                return directionField;
            } 
            set {
                directionField = value;
                NotifyPropertyChanged("Direction");
            }
        }

        private ProductFlowPortType directionField; 

        /// <summary>
        /// True ("true" or "1") indicates that the port is an exposed internal port and cannot be used in a connection external to the network. False ("false" or "0") or not given indicates a normal port.
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that the port is an exposed internal port and cannot be used in a connection external to the network. False (\"false\" or \"0\") or not given indicates a normal port.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("exposed")]
        public bool? Exposed {
            get {
                return exposedField;
            } 
            set {
                exposedField = value;
                 this.ExposedSpecified = true;
                NotifyPropertyChanged("Exposed");
            }
        }

        private bool? exposedField; 

        /// <summary>
        /// exposedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ExposedSpecified {
            get {
                return exposedSpecifiedField;
            } 
            set {
                exposedSpecifiedField = value;
                NotifyPropertyChanged("ExposedSpecified");
            }
        }

        private bool exposedSpecifiedField; 

        /// <summary>
        /// Defines the internal node to which this external port is connected. All ports (whether internal or external) that are connected to a node with the same name are connected to each other. Node names are unique to each network. The purpose of the external port is to provide input to or output from the internal network except when the port is an "exposed" port. The purpose of an exposed port is to allow the properties of the port to be seen external to the network. For an exposed port, the connection points to the associated port. 
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Defines the internal node to which this external port is connected. All ports (whether internal or external) that are connected to a node with the  same name are connected to each other. Node names are unique to each network. The purpose of the external port is to provide input to or output from the internal network except when the port is an \"exposed\" port. The purpose of an exposed port is to allow the properties of the port to be seen external to the network. For an exposed port, the connection points to the associated port.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("connectedNode")]
        public string ConnectedNode {
            get {
                return connectedNodeField;
            } 
            set {
                connectedNodeField = value;
                NotifyPropertyChanged("ConnectedNode");
            }
        }

        private string connectedNodeField; 

        /// <summary>
        /// A descriptive remark about the port.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the port.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Flow Unit Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowUnit", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Flow Unit Component Schema.")]
    public partial class ProductFlowUnit : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the Product Flow Unit within the context of the Product Flow Network.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the Product Flow Unit within the  context of the Product Flow Network.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The name of a network plan. This indicates a planned unit. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual unit.
        /// </summary>
		[StringLength(64)]
        [Description("The name of a network plan. This indicates a planned unit. All child network components must all be planned and be part of the same plan. The parent network must either contain the plan (i.e., be an actual) or be part of the same plan. Not specified indicates an actual unit.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("planName")]
        public string PlanName {
            get {
                return planNameField;
            } 
            set {
                planNameField = value;
                NotifyPropertyChanged("PlanName");
            }
        }

        private string planNameField; 

        /// <summary>
        /// A pointer to the network representing the internal behavior of this unit. The names of the external ports on the internal network must match the names of the ports on this unit. That is they are logically the same ports.
        /// </summary>
		[Description("A pointer to the network representing the internal behavior of this unit. The names of the external ports on the internal network must match the names of  the ports on this unit. That is they are logically the same ports.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("internalNetwork")]
        public RefNameString InternalNetwork {
            get {
                return internalNetworkField;
            } 
            set {
                internalNetworkField = value;
                NotifyPropertyChanged("InternalNetwork");
            }
        }

        private RefNameString internalNetworkField; 

        /// <summary>
        /// The name of the facility for which this Product Flow Unit describes fluid flow connecton behavior. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility for which this Product Flow Unit describes fluid flow connecton behavior. The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facility")]
        public FacilityIdentifierStruct Facility {
            get {
                return facilityField;
            } 
            set {
                facilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

        private FacilityIdentifierStruct facilityField; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility this named facility. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another  facility, the name of the parent facility this named facility.  The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facilityParent1")]
        public FacilityIdentifierStruct FacilityParent1 {
            get {
                return facilityParent1Field;
            } 
            set {
                facilityParent1Field = value;
                NotifyPropertyChanged("FacilityParent1");
            }
        }

        private FacilityIdentifierStruct facilityParent1Field; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility of facilityParent1. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another  facility, the name of the parent facility of facilityParent1.  The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facilityParent2")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return facilityParent2Field;
            } 
            set {
                facilityParent2Field = value;
                NotifyPropertyChanged("FacilityParent2");
            }
        }

        private FacilityIdentifierStruct facilityParent2Field; 

        /// <summary>
        /// An alternatative name of a facility. This is generally unique within a naming system. The above contextually unique name (that is, within the context of a parent) should also be listed as an alias.
        /// </summary>
		[Description("An alternatative name of a facility. This is generally unique within a naming system. The above contextually unique name (that is, within  the context of a parent) should also be listed as an alias.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("facilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return facilityAliasField;
            } 
            set {
                facilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(facilityAliasField!=null)
                 return facilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> facilityAliasField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented facility.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented facility.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(contextFacilityField!=null)
                 return contextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> contextFacilityField; 

        /// <summary>
        /// Defines an expected property of the facility represented by this unit.
        /// </summary>
		[Description("Defines an expected property of the facility represented by this unit.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowExpectedUnitProperty")]
		[XmlElement("expectedProperty")]
        public List<ProductFlowExpectedUnitProperty> ExpectedProperty {
            get {
                return expectedPropertyField;
            } 
            set {
                expectedPropertyField = value;
                NotifyPropertyChanged("ExpectedProperty");
            }
        }

         /// <summary>
         /// bool to indicate if ExpectedProperty has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExpectedPropertySpecified
         {
             get {
             if(expectedPropertyField!=null)
                 return expectedPropertyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExpectedUnitProperty> expectedPropertyField; 

        /// <summary>
        /// Defines the relative coordinate of the unit on a display screen. This is not intended for detailed diagrams. Rather it is intended to allow different applications to present a user view which has a consistent layout.
        /// </summary>
		[Description("Defines the relative coordinate of the unit on a display screen. This is not intended for detailed diagrams. Rather it is intended to allow different applications to present a user view which has a consistent layout.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_relativeCoordinate")]
		[XmlElement("relativeCoordinate")]
        public RelativeCoordinate RelativeCoordinate {
            get {
                return relativeCoordinateField;
            } 
            set {
                relativeCoordinateField = value;
                NotifyPropertyChanged("RelativeCoordinate");
            }
        }

        private RelativeCoordinate relativeCoordinateField; 

        /// <summary>
        /// An inlet or outlet port associated with this unit. If there is an internal network then the name of this port must match the name of an external port for that network. Any properties (e.g., volume, pressure, temperature) that are assigned to this port are inherently assigned to the corresponding external port on the internal network. That is, the ports are logically the same port. Similar to a node, there is no pressure drop across a port. Also similar to a node, conservation of mass exists across the port and the flow direction across the port can change over time if the relative pressures across connected units change.
        /// </summary>
		[Required]
        [Description("An inlet or outlet port associated with this unit. If there is an internal network then the name of this port must match the name of  an external port for that network. Any properties (e.g., volume, pressure, temperature) that are assigned to this port  are inherently assigned to the corresponding external port on the internal network.  That is, the ports are logically the same port. Similar to a node, there is no pressure drop across a port.   Also similar to a node, conservation of mass exists across the port and the flow direction across the port can change over time if the relative pressures across connected units change.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowPort")]
		[XmlElement("port")]
        public List<ProductFlowPort> Port {
            get {
                return portField;
            } 
            set {
                portField = value;
                NotifyPropertyChanged("Port");
            }
        }

         /// <summary>
         /// bool to indicate if Port has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PortSpecified
         {
             get {
             if(portField!=null)
                 return portField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowPort> portField; 

        /// <summary>
        /// A descriptive remark associated with this unit.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark associated with this unit.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines expected properties of a facility represented by a unit.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowExpectedUnitProperty", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Defines expected properties of a facility represented by a unit.")]
    public partial class ProductFlowExpectedUnitProperty : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The expected kind of facility property. Each property is documented to have values of a particular type.
        /// </summary>
		[Required]
        [Description("The expected kind of facility property. Each property is documented to have values of a particular type.")]
        [EnergisticsDataTypeAttribute(DataType = "FacilityParameter")]
		[XmlElement("property")]
        public FacilityParameter Property {
            get {
                return propertyField;
            } 
            set {
                propertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

        private FacilityParameter propertyField; 

        /// <summary>
        /// The "PRODML Relative Identifier" of a child of the parent facility. The idenfifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property will only be expected to be defined for this child and not for the parent.
        /// </summary>
		[Description("The \"PRODML Relative Identifier\" of a child of the parent facility. The idenfifier path is presumed to begin with the identity of the parent facility. This identifies a sub-facility which is identified within the context of the parent facilityParent2/facilityParent1/name identification hierarchy. The property will only be expected to be defined for this child and not for the parent.")]
        [EnergisticsDataTypeAttribute(DataType = "prodmlRelativeIdentifier")]
		[XmlElement("childFacilityIdentifier", DataType="anyURI")]
        public string ChildFacilityIdentifier {
            get {
                return childFacilityIdentifierField;
            } 
            set {
                childFacilityIdentifierField = value;
                NotifyPropertyChanged("ChildFacilityIdentifier");
            }
        }

        private string childFacilityIdentifierField; 

        /// <summary>
        /// Defines the expected flow and product pairs to be assigned to this unit by a Product Volume report. A set of expected qualifiers can also be defined for each pair. Each unique combination of product, flow and qualifier represents an expected variation of the specified property. This element should only be specified for properties tha represent a flow stream (e.g., volume, pressure).
        /// </summary>
        [ComponentElement]
        [XmlElement("expectedFlowProduct")]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowQualifierExpected")]
        public ProductFlowQualifierExpected[] ExpectedFlowProduct {
            get {
                return expectedFlowProductField;
            } 
            set {
                if (value != null && QualifierSpecified) throw new Exception("Cannot set property ExpectedFlowProduct when property Qualifier is already set");
                expectedFlowProductField = value;
                ExpectedFlowProductSpecified = (value!=null);
                NotifyPropertyChanged("ExpectedFlowProduct");
            }
        }

        private ProductFlowQualifierExpected[] expectedFlowProductField; 
        private bool expectedFlowProductSpecified = false; 

        /// <summary>
        /// bool to indicate if ExpectedFlowProduct has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ExpectedFlowProductSpecified
        {
            get {
                return expectedFlowProductSpecified;
            }
            set {
                expectedFlowProductSpecified= value;
            }
        }

        /// <summary>
        /// The expected kind of qualifier of the property. This element should only be specified for properties that do not represent the fluid stream (e.g., a valve status)
        /// </summary>
        [XmlElement("qualifier")]
        [EnergisticsDataTypeAttribute(DataType = "FlowQualifier")]
        public FlowQualifier[] Qualifier {
            get {
                return qualifierField;
            } 
            set {
                if (value != null && ExpectedFlowProductSpecified) throw new Exception("Cannot set property Qualifier when property ExpectedFlowProduct is already set");
                qualifierField = value;
                QualifierSpecified = (value!=null);
                NotifyPropertyChanged("Qualifier");
            }
        }

        private FlowQualifier[] qualifierField; 
        private bool qualifierSpecified = false; 

        /// <summary>
        /// bool to indicate if Qualifier has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool QualifierSpecified
        {
            get {
                return qualifierSpecified;
            }
            set {
                qualifierSpecified= value;
            }
        }


        /// <summary>
        /// An alternative name for the sensor that will measure the property.
        /// </summary>
		[Description("An alternative name for the sensor that will measure the property.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("tagAlias")]
        public List<NameStruct> TagAlias {
            get {
                return tagAliasField;
            } 
            set {
                tagAliasField = value;
                NotifyPropertyChanged("TagAlias");
            }
        }

         /// <summary>
         /// bool to indicate if TagAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TagAliasSpecified
         {
             get {
             if(tagAliasField!=null)
                 return tagAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> tagAliasField; 

        /// <summary>
        /// Difference between two consecutive readings must exceeds deadband value to be accepted
        /// </summary>
		[Description("Difference between two consecutive readings must exceeds deadband value to be accepted")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "generalMeasureType")]
		[XmlElement("deadband")]
        public GeneralMeasureType Deadband {
            get {
                return deadbandField;
            } 
            set {
                deadbandField = value;
                NotifyPropertyChanged("Deadband");
            }
        }

        private GeneralMeasureType deadbandField; 

        /// <summary>
        /// The maximum time difference from the last sent event before the next event is sent. 
        /// </summary>
		[Description("The maximum time difference from the last sent event before the next event is sent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("maximumFrequency")]
        public TimeMeasure MaximumFrequency {
            get {
                return maximumFrequencyField;
            } 
            set {
                maximumFrequencyField = value;
                NotifyPropertyChanged("MaximumFrequency");
            }
        }

        private TimeMeasure maximumFrequencyField; 

        /// <summary>
        /// A descriptive remark associated with this property.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark associated with this property.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Defines an expected combination of kinds.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowQualifierExpected", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Defines an expected combination of kinds.")]
    public partial class ProductFlowQualifierExpected : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The expected kind of flow.
        /// </summary>
		[Required]
        [Description("The expected kind of flow.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingFlow")]
		[XmlElement("flow")]
        public ReportingFlow Flow {
            get {
                return flowField;
            } 
            set {
                flowField = value;
                NotifyPropertyChanged("Flow");
            }
        }

        private ReportingFlow flowField; 

        /// <summary>
        /// The expected kind of product within the flow.
        /// </summary>
		[Description("The expected kind of product within the flow.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProduct")]
		[XmlElement("product")]
        public ReportingProduct Product {
            get {
                return productField;
            } 
            set {
                productField = value;
                 this.ProductSpecified = true;
                NotifyPropertyChanged("Product");
            }
        }

        private ReportingProduct productField; 

        /// <summary>
        /// productSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ProductSpecified {
            get {
                return productSpecifiedField;
            } 
            set {
                productSpecifiedField = value;
                NotifyPropertyChanged("ProductSpecified");
            }
        }

        private bool productSpecifiedField; 

        /// <summary>
        /// The expected kind of qualifier of the flow.
        /// </summary>
		[Description("The expected kind of qualifier of the flow.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FlowQualifier")]
		[XmlElement("qualifier")]
        public List<FlowQualifier> Qualifier {
            get {
                return qualifierField;
            } 
            set {
                qualifierField = value;
                NotifyPropertyChanged("Qualifier");
            }
        }

         /// <summary>
         /// bool to indicate if Qualifier has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool QualifierSpecified
         {
             get {
             if(qualifierField!=null)
                 return qualifierField.Count>0?true:false;
             else return false;
             }
         }
        private List<FlowQualifier> qualifierField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Flow Connected Node Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_relativeCoordinate", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Flow Connected Node Component Schema.")]
    public partial class RelativeCoordinate : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Defines the relative from-left-to-right location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.
        /// </summary>
		[Description("Defines the relative from-left-to-right location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthPerLengthMeasure")]
		[XmlElement("x")]
        public LengthPerLengthMeasure X {
            get {
                return xField;
            } 
            set {
                xField = value;
                NotifyPropertyChanged("X");
            }
        }

        private LengthPerLengthMeasure xField; 

        /// <summary>
        /// Defines the relative from-top-to-bottom location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.
        /// </summary>
		[Description("Defines the relative from-top-to-bottom location on a display screen. The display origin (0,0) is the upper left-hand corner of the display as viewed by the user.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthPerLengthMeasure")]
		[XmlElement("y")]
        public LengthPerLengthMeasure Y {
            get {
                return yField;
            } 
            set {
                yField = value;
                NotifyPropertyChanged("Y");
            }
        }

        private LengthPerLengthMeasure yField; 

        /// <summary>
        /// Defines the relative from-front-to-back location in a 3D system. The unrotated display origin (0,0) is the upper left-hand corner of the display as viewed by the user. The "3D picture" may be rotated on the 2d display.
        /// </summary>
		[Description("Defines the relative from-front-to-back location in a 3D system. The unrotated display origin (0,0) is the upper left-hand corner of the display as viewed by the user. The \"3D picture\" may be rotated on the 2d display.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthPerLengthMeasure")]
		[XmlElement("z")]
        public LengthPerLengthMeasure Z {
            get {
                return zField;
            } 
            set {
                zField = value;
                NotifyPropertyChanged("Z");
            }
        }

        private LengthPerLengthMeasure zField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Flow Port Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowPort", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Flow Port Component Schema.")]
    public partial class ProductFlowPort : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the port within the context of the Product Flow Unit.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the port within the context of the Product Flow Unit.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The name of a network plan. This indicates a planned port. All child network components must all be planned and be part of the same plan. The parent unit must be part of the same plan or be an actual. Not specified indicates an actual port.
        /// </summary>
		[StringLength(64)]
        [Description("The name of a network plan. This indicates a planned port. All child network components must all be planned and be part of the same plan. The parent unit must be part of the same plan or be an actual. Not specified indicates an actual port.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("planName")]
        public string PlanName {
            get {
                return planNameField;
            } 
            set {
                planNameField = value;
                NotifyPropertyChanged("PlanName");
            }
        }

        private string planNameField; 

        /// <summary>
        /// Defines whether this port is an inlet or outlet. This is a nominal intended direction.
        /// </summary>
		[Required]
        [Description("Defines whether this port is an inlet or outlet. This is a nominal intended direction.")]
        [EnergisticsDataTypeAttribute(DataType = "ProductFlowPortType")]
		[XmlElement("direction")]
        public ProductFlowPortType Direction {
            get {
                return directionField;
            } 
            set {
                directionField = value;
                NotifyPropertyChanged("Direction");
            }
        }

        private ProductFlowPortType directionField; 

        /// <summary>
        /// The name of the facility represented by this Product Flow Port The name can be qualified by a naming system. The facility name is assumed to be unique within the context of the facility represented by the unit. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility represented by this Product Flow Port The name can be qualified by a naming system. The facility name is assumed to be unique within the context of the facility  represented by the unit.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facility")]
        public FacilityIdentifierStruct Facility {
            get {
                return facilityField;
            } 
            set {
                facilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

        private FacilityIdentifierStruct facilityField; 

        /// <summary>
        /// An alternatative name of a facility. This is generally unique within a naming system. The above contextually unique name should also be listed as an alias.
        /// </summary>
		[Description("An alternatative name of a facility. This is generally unique within a naming system. The above contextually unique name  should also be listed as an alias.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("facilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return facilityAliasField;
            } 
            set {
                facilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(facilityAliasField!=null)
                 return facilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> facilityAliasField; 

        /// <summary>
        /// True ("true" or "1") indicates that the port is an exposed internal port and cannot be used in a connection external to the unit. False ("false" or "0") or not given indicates a normal port.
        /// </summary>
		[Description("True (\"true\" or \"1\") indicates that the port is an exposed internal port and cannot be used in a connection external to the unit. False (\"false\" or \"0\") or not given indicates a normal port.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("exposed")]
        public bool? Exposed {
            get {
                return exposedField;
            } 
            set {
                exposedField = value;
                 this.ExposedSpecified = true;
                NotifyPropertyChanged("Exposed");
            }
        }

        private bool? exposedField; 

        /// <summary>
        /// exposedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ExposedSpecified {
            get {
                return exposedSpecifiedField;
            } 
            set {
                exposedSpecifiedField = value;
                NotifyPropertyChanged("ExposedSpecified");
            }
        }

        private bool exposedSpecifiedField; 

        /// <summary>
        /// Defines the node to which this port is connected. A timestamp activates and deactivates the connection. Only one connectedNode should be active at any one point in time. There are no semantics for the node except common connection. All ports that are connected to a node with the the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network. Any node that is internally connected to only one port is presumably a candidate to be connected to an external node. The behavior of ports connected at a common node is as follows: a) There is no pressure drop across the node. All ports connected to the node have the same pressure. That is, there is an assumption of steady state fluid flow. b) Conservation of mass exists across the node. The mass into the node via all connected ports equals the mass out of the node via all connected ports. c) The flow direction of a port connected to the node may be transient. That is, flow direction may change toward any port(s) if the relative internal pressure of the Product Flow Units change and a new steady state is achieved.
        /// </summary>
		[Required]
        [Description("Defines the node to which this port is connected. A timestamp activates and deactivates the connection.  Only one connectedNode should be active at any one point in time. There are no semantics for the node except common connection. All ports that are connected to a node with the the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network.  Any node that is internally connected to only one port is presumably a candidate  to be connected to an external node. The behavior of ports connected at a common node is as follows:  a) There is no pressure drop across the node. All ports connected to the node have   the same pressure. That is, there is an assumption of steady state fluid flow.  b) Conservation of mass exists across the node. The mass into the node via all   connected ports equals the mass out of the node via all connected ports.  c) The flow direction of a port connected to the node may be transient. That is, flow   direction may change toward any port(s) if the relative internal pressure of  the Product Flow Units change and a new steady state is achieved.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_connectedNode")]
		[XmlElement("connectedNode")]
        public List<ConnectedNode> ConnectedNode {
            get {
                return connectedNodeField;
            } 
            set {
                connectedNodeField = value;
                NotifyPropertyChanged("ConnectedNode");
            }
        }

         /// <summary>
         /// bool to indicate if ConnectedNode has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectedNodeSpecified
         {
             get {
             if(connectedNodeField!=null)
                 return connectedNodeField.Count>0?true:false;
             else return false;
             }
         }
        private List<ConnectedNode> connectedNodeField; 

        /// <summary>
        /// Defines the expected flow and product pairs to be assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair.
        /// </summary>
		[Description("Defines the expected flow and product pairs to be  assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowQualifierExpected")]
		[XmlElement("expectedFlowProduct")]
        public List<ProductFlowQualifierExpected> ExpectedFlowProduct {
            get {
                return expectedFlowProductField;
            } 
            set {
                expectedFlowProductField = value;
                NotifyPropertyChanged("ExpectedFlowProduct");
            }
        }

         /// <summary>
         /// bool to indicate if ExpectedFlowProduct has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExpectedFlowProductSpecified
         {
             get {
             if(expectedFlowProductField!=null)
                 return expectedFlowProductField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowQualifierExpected> expectedFlowProductField; 

        /// <summary>
        /// Defines the properties that are expected to be measured at this port. This can also specify the equipment tag(s) of the sensor that will read the value. Only one of each property kind should be active at any point in time.
        /// </summary>
		[Description("Defines the properties that are expected to be measured at this port. This can also specify the equipment tag(s) of the sensor that will read the value. Only one of each property kind should be active at any point in time.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowExpectedPortProperty")]
		[XmlElement("expectedFlowProperty")]
        public List<ProductFlowExpectedPortProperty> ExpectedFlowProperty {
            get {
                return expectedFlowPropertyField;
            } 
            set {
                expectedFlowPropertyField = value;
                NotifyPropertyChanged("ExpectedFlowProperty");
            }
        }

         /// <summary>
         /// bool to indicate if ExpectedFlowProperty has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExpectedFlowPropertySpecified
         {
             get {
             if(expectedFlowPropertyField!=null)
                 return expectedFlowPropertyField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExpectedPortProperty> expectedFlowPropertyField; 

        /// <summary>
        /// A descriptive remark associated with this port.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark associated with this port.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Flow Connected Node Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_connectedNode", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Flow Connected Node Component Schema.")]
    public partial class ConnectedNode : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// Defines the node to which this port is connected. Only two ports should be actively connected to the same node at the same point in time. That is, a port should only be connected to one other port. There are no semantics for the node except common connection. All ports that are connected to a node with the the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network. Any node that is internally connected to only one node is presumably a candidate to be connected to an external node. The behavior of ports connected at a common node is as follows: a) There is no pressure drop across the node. All ports connected to the node have the same pressure. That is, there is an assumption of steady state fluid flow. b) Conservation of mass exists across the node. The mass into the node via all connected ports equals the mass out of the node via all connected ports. c) The flow direction of a port connected to the node may be transient. That is, flow direction may change toward any port if the relative internal pressure of the Product Flow Units change and a new steady state is achieved.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Defines the node to which this port is connected. Only two ports should be actively connected to the same node at the same point in time. That is, a port should only be connected to one other port. There are no semantics for the node except common connection. All ports that are connected to a node with the the same name are inherently connected to each other. The name of the node is only required to be unique within the context of the current Product Flow Network (that is, not the overall model). All ports must be connected to a node and whether or not any other port is connected to the same node depends on the requirements of the network.  Any node that is internally connected to only one node is presumably a candidate  to be connected to an external node. The behavior of ports connected at a common node is as follows:  a) There is no pressure drop across the node. All ports connected to the node have   the same pressure. That is, there is an assumption of steady state fluid flow.  b) Conservation of mass exists across the node. The mass into the node via all   connected ports equals the mass out of the node via all connected ports.  c) The flow direction of a port connected to the node may be transient. That is, flow   direction may change toward any port if the relative internal pressure of  the Product Flow Units change and a new steady state is achieved.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("node")]
        public string Node {
            get {
                return nodeField;
            } 
            set {
                nodeField = value;
                NotifyPropertyChanged("Node");
            }
        }

        private string nodeField; 

        /// <summary>
        /// The name of a network plan. This indicates a planned connection. The connected port must be part of the same plan or be an actual. Not specified indicates an actual connection.
        /// </summary>
		[StringLength(64)]
        [Description("The name of a network plan. This indicates a planned connection. The connected port must be part of the same plan or be an actual. Not specified indicates an actual connection.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("planName")]
        public string PlanName {
            get {
                return planNameField;
            } 
            set {
                planNameField = value;
                NotifyPropertyChanged("PlanName");
            }
        }

        private string planNameField; 

        /// <summary>
        /// The date and time that the connection was activated.
        /// </summary>
		[Description("The date and time that the connection was activated.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time that the connection was terminated.
        /// </summary>
		[Description("The date and time that the connection was terminated.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// A descriptive remark associated with this connection, possibly including a reason for termination.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark associated with this connection, possibly including a reason for termination.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML - Product Flow Expected Property Component Schema.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowExpectedPortProperty", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML - Product Flow Expected Property Component Schema.")]
    public partial class ProductFlowExpectedPortProperty : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The expected kind of property.
        /// </summary>
		[Required]
        [Description("The expected kind of property.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportingProperty")]
		[XmlElement("property")]
        public ReportingProperty Property {
            get {
                return propertyField;
            } 
            set {
                propertyField = value;
                NotifyPropertyChanged("Property");
            }
        }

        private ReportingProperty propertyField; 

        /// <summary>
        /// The date and time that the sensor was activated on the port.
        /// </summary>
		[Description("The date and time that the sensor was activated on the port.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time that the sensor was deactivated on the port.
        /// </summary>
		[Description("The date and time that the sensor was deactivated on the port.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// An alternative name for the sensor that will measure the property.
        /// </summary>
		[Description("An alternative name for the sensor that will measure the property.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("tagAlias")]
        public List<NameStruct> TagAlias {
            get {
                return tagAliasField;
            } 
            set {
                tagAliasField = value;
                NotifyPropertyChanged("TagAlias");
            }
        }

         /// <summary>
         /// bool to indicate if TagAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TagAliasSpecified
         {
             get {
             if(tagAliasField!=null)
                 return tagAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> tagAliasField; 

        /// <summary>
        /// Difference between two consecutive readings must exceeds deadband value to be accepted
        /// </summary>
		[Description("Difference between two consecutive readings must exceeds deadband value to be accepted")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "generalMeasureType")]
		[XmlElement("deadband")]
        public GeneralMeasureType Deadband {
            get {
                return deadbandField;
            } 
            set {
                deadbandField = value;
                NotifyPropertyChanged("Deadband");
            }
        }

        private GeneralMeasureType deadbandField; 

        /// <summary>
        /// The maximum time difference from the last sent event before the next event is sent. 
        /// </summary>
		[Description("The maximum time difference from the last sent event before the next event is sent.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("maximumFrequency")]
        public TimeMeasure MaximumFrequency {
            get {
                return maximumFrequencyField;
            } 
            set {
                maximumFrequencyField = value;
                NotifyPropertyChanged("MaximumFrequency");
            }
        }

        private TimeMeasure maximumFrequencyField; 

        /// <summary>
        /// Defines the expected flow and product pairs to be assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair. The aggregate of expectations on all properties should be a subset of the aggregate of expectations on the port. If no expectations are defined on the port then the port aggregate will be defined by the properties.
        /// </summary>
		[Description("Defines the expected flow and product pairs to be  assigned to this port by a Product Volume report. A set of expected qualifiers can be defined for each pair. The aggregate of expectations on all properties should be a subset of  the aggregate of expectations on the port.  If no expectations are defined on the port then the port aggregate will be defined by the properties.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowQualifierExpected")]
		[XmlElement("expectedFlowProduct")]
        public List<ProductFlowQualifierExpected> ExpectedFlowProduct {
            get {
                return expectedFlowProductField;
            } 
            set {
                expectedFlowProductField = value;
                NotifyPropertyChanged("ExpectedFlowProduct");
            }
        }

         /// <summary>
         /// bool to indicate if ExpectedFlowProduct has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExpectedFlowProductSpecified
         {
             get {
             if(expectedFlowProductField!=null)
                 return expectedFlowProductField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowQualifierExpected> expectedFlowProductField; 

        /// <summary>
        /// A descriptive remark associated with this property.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark associated with this property.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Documents the point in time where changes were made.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowChangeLog", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Documents the point in time where changes were made.")]
    public partial class ProductFlowChangeLog : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// A name assigned to the change.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A name assigned to the change.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The timestamp associated with the change. All changes must use this timestamp.
        /// </summary>
		[Required]
        [Description("The timestamp associated with the change. All changes must use this timestamp.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTim")]
        public Timestamp? DateTime {
            get {
                return dTimField;
            } 
            set {
                dTimField = value;
                NotifyPropertyChanged("DateTime");
            }
        }

        private Timestamp? dTimField; 

        /// <summary>
        /// A textual reason for the change.
        /// </summary>
		[StringLength(4000)]
        [Description("A textual reason for the change.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("reason")]
        public string Reason {
            get {
                return reasonField;
            } 
            set {
                reasonField = value;
                NotifyPropertyChanged("Reason");
            }
        }

        private string reasonField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A plan to extend an actual network.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowNetworkPlan", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A plan to extend an actual network.")]
    public partial class ProductFlowNetworkPlan : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name assigned to the plan.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name assigned to the plan.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The date and time of the start of the plan. This point coincides with the end of the actual configuration. The configuration of the actual at this point in time represents the configuration of the plan at this starting point. All changes to this plan must be in the future from this point in time.
        /// </summary>
		[Required]
        [Description("The date and time of the start of the plan. This point coincides with the end of the actual configuration. The configuration of the actual at this point in time represents the configuration of the plan at this starting point. All changes to this plan must be in the future from this point in time.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// A textual description of the purpose of the plan.
        /// </summary>
		[StringLength(4000)]
        [Description("A textual description of the purpose of the plan.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("purpose")]
        public string Purpose {
            get {
                return purposeField;
            } 
            set {
                purposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private string purposeField; 

        /// <summary>
        /// Documents that a change occurred at a particular time.
        /// </summary>
		[Description("Documents that a change occurred at a particular time.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowChangeLog")]
		[XmlElement("changeLog")]
        public List<ProductFlowChangeLog> ChangeLog {
            get {
                return changeLogField;
            } 
            set {
                changeLogField = value;
                NotifyPropertyChanged("ChangeLog");
            }
        }

         /// <summary>
         /// bool to indicate if ChangeLog has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ChangeLogSpecified
         {
             get {
             if(changeLogField!=null)
                 return changeLogField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowChangeLog> changeLogField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_fluidSample xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_fluidSample", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("This class represents the obj_fluidSample xsd type.")]
    public partial class FluidSample : Object, IProdmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the Fluid Sample.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the Fluid Sample.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(64)]
        [Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("sampleBottle")]
        public string SampleBottle {
            get {
                return sampleBottleField;
            } 
            set {
                sampleBottleField = value;
                NotifyPropertyChanged("SampleBottle");
            }
        }

        private string sampleBottleField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "FluidSampleKind")]
		[XmlElement("sampleType")]
        public FluidSampleKind SampleType {
            get {
                return sampleTypeField;
            } 
            set {
                sampleTypeField = value;
                 this.SampleTypeSpecified = true;
                NotifyPropertyChanged("SampleType");
            }
        }

        private FluidSampleKind sampleTypeField; 

        /// <summary>
        /// sampleTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SampleTypeSpecified {
            get {
                return sampleTypeSpecifiedField;
            } 
            set {
                sampleTypeSpecifiedField = value;
                NotifyPropertyChanged("SampleTypeSpecified");
            }
        }

        private bool sampleTypeSpecifiedField; 

        /// <summary>
        /// The name of the facility from which the sample was acquired. The name can be qualified by a naming system. This also defines the kind of facility. Common facilities are wells, wellbores within a well, completions within a well.
        /// </summary>
		[Description("The name of the facility from which the sample was acquired.  The name can be qualified by a naming system.  This also defines the kind of facility. Common facilities are wells, wellbores within a well, completions within a well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facility")]
        public FacilityIdentifierStruct Facility {
            get {
                return facilityField;
            } 
            set {
                facilityField = value;
                NotifyPropertyChanged("Facility");
            }
        }

        private FacilityIdentifierStruct facilityField; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility. For example, if name represents a completion, then facilityParent1 would represent the name of the well within which name was unique. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another  facility, the name of the parent facility. For example, if name represents a completion, then facilityParent1 would represent the name of the well within which name was unique. The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facilityParent1")]
        public FacilityIdentifierStruct FacilityParent1 {
            get {
                return facilityParent1Field;
            } 
            set {
                facilityParent1Field = value;
                NotifyPropertyChanged("FacilityParent1");
            }
        }

        private FacilityIdentifierStruct facilityParent1Field; 

        /// <summary>
        /// For facilities whose name is unique within the context of another facility, the name of the parent facility of parent1. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("For facilities whose name is unique within the context of another  facility, the name of the parent facility of parent1.  The name can be qualified by a naming system. This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("facilityParent2")]
        public FacilityIdentifierStruct FacilityParent2 {
            get {
                return facilityParent2Field;
            } 
            set {
                facilityParent2Field = value;
                NotifyPropertyChanged("FacilityParent2");
            }
        }

        private FacilityIdentifierStruct facilityParent2Field; 

        /// <summary>
        /// An alternatative name of a facility. This is generally unique within a naming system. The above contextually unique name (that is, within the context of a parent) should also be listed as an alias.
        /// </summary>
		[Description("An alternatative name of a facility. This is generally unique within a naming system. The above contextually unique name (that is, within  the context of a parent) should also be listed as an alias.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("facilityAlias")]
        public List<NameStruct> FacilityAlias {
            get {
                return facilityAliasField;
            } 
            set {
                facilityAliasField = value;
                NotifyPropertyChanged("FacilityAlias");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityAliasSpecified
         {
             get {
             if(facilityAliasField!=null)
                 return facilityAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> facilityAliasField; 

        /// <summary>
        /// The kind of test which acquired the sample.
        /// </summary>
		[Description("The kind of test which acquired the sample.")]
        [EnergisticsDataTypeAttribute(DataType = "FluidSampleTestAcquisition")]
		[XmlElement("testKind")]
        public FluidSampleTestAcquisition TestKind {
            get {
                return testKindField;
            } 
            set {
                testKindField = value;
                 this.TestKindSpecified = true;
                NotifyPropertyChanged("TestKind");
            }
        }

        private FluidSampleTestAcquisition testKindField; 

        /// <summary>
        /// testKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestKindSpecified {
            get {
                return testKindSpecifiedField;
            } 
            set {
                testKindSpecifiedField = value;
                NotifyPropertyChanged("TestKindSpecified");
            }
        }

        private bool testKindSpecifiedField; 

        /// <summary>
        /// The measured depth of the test in a wellbore.
        /// </summary>
		[Description("The measured depth of the test in a wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("testMD")]
        public MeasuredDepthCoord TestMD {
            get {
                return testMDField;
            } 
            set {
                testMDField = value;
                NotifyPropertyChanged("TestMD");
            }
        }

        private MeasuredDepthCoord testMDField; 

        /// <summary>
        /// The test identifier.
        /// </summary>
		[StringLength(40)]
        [Description("The test identifier.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("testId")]
        public string TestId {
            get {
                return testIdField;
            } 
            set {
                testIdField = value;
                NotifyPropertyChanged("TestId");
            }
        }

        private string testIdField; 

        /// <summary>
        /// The test run number (e.g., for an RFT)
        /// </summary>
		[StringLength(40)]
        [Description("The test run number (e.g., for an RFT)")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("testRun")]
        public string TestRun {
            get {
                return testRunField;
            } 
            set {
                testRunField = value;
                NotifyPropertyChanged("TestRun");
            }
        }

        private string testRunField; 

        /// <summary>
        /// The name of the company which ran the test.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the company which ran the test.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("testProvider")]
        public string TestProvider {
            get {
                return testProviderField;
            } 
            set {
                testProviderField = value;
                NotifyPropertyChanged("TestProvider");
            }
        }

        private string testProviderField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "ReservoirFluidKind")]
		[XmlElement("reservoirFluidType")]
        public ReservoirFluidKind ReservoirFluidType {
            get {
                return reservoirFluidTypeField;
            } 
            set {
                reservoirFluidTypeField = value;
                 this.ReservoirFluidTypeSpecified = true;
                NotifyPropertyChanged("ReservoirFluidType");
            }
        }

        private ReservoirFluidKind reservoirFluidTypeField; 

        /// <summary>
        /// reservoirFluidTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReservoirFluidTypeSpecified {
            get {
                return reservoirFluidTypeSpecifiedField;
            } 
            set {
                reservoirFluidTypeSpecifiedField = value;
                NotifyPropertyChanged("ReservoirFluidTypeSpecified");
            }
        }

        private bool reservoirFluidTypeSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("acquisitionDate", DataType="date")]
        public DateTime? AcquisitionDate {
            get {
                return acquisitionDateField;
            } 
            set {
                acquisitionDateField = value;
                 this.AcquisitionDateSpecified = true;
                NotifyPropertyChanged("AcquisitionDate");
            }
        }

        private DateTime? acquisitionDateField; 

        /// <summary>
        /// acquisitionDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AcquisitionDateSpecified {
            get {
                return acquisitionDateSpecifiedField;
            } 
            set {
                acquisitionDateSpecifiedField = value;
                NotifyPropertyChanged("AcquisitionDateSpecified");
            }
        }

        private bool acquisitionDateSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "measuredDepthCoord")]
		[XmlElement("acquisitionMD")]
        public MeasuredDepthCoord AcquisitionMD {
            get {
                return acquisitionMDField;
            } 
            set {
                acquisitionMDField = value;
                NotifyPropertyChanged("AcquisitionMD");
            }
        }

        private MeasuredDepthCoord acquisitionMDField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("acquisitionPressure")]
        public PressureMeasure AcquisitionPressure {
            get {
                return acquisitionPressureField;
            } 
            set {
                acquisitionPressureField = value;
                NotifyPropertyChanged("AcquisitionPressure");
            }
        }

        private PressureMeasure acquisitionPressureField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("acquisitionTemperature")]
        public ThermodynamicTemperatureMeasure AcquisitionTemperature {
            get {
                return acquisitionTemperatureField;
            } 
            set {
                acquisitionTemperatureField = value;
                NotifyPropertyChanged("AcquisitionTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure acquisitionTemperatureField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
		[XmlElement("acquisitionGORStd")]
        public StandardVolumePerStandardVolumeMeasure AcquisitionGORStd {
            get {
                return acquisitionGORStdField;
            } 
            set {
                acquisitionGORStdField = value;
                NotifyPropertyChanged("AcquisitionGORStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure acquisitionGORStdField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(256)]
        [Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("sampleDisposition")]
        public string SampleDisposition {
            get {
                return sampleDispositionField;
            } 
            set {
                sampleDispositionField = value;
                NotifyPropertyChanged("SampleDisposition");
            }
        }

        private string sampleDispositionField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("representative")]
        public bool? Representative {
            get {
                return representativeField;
            } 
            set {
                representativeField = value;
                 this.RepresentativeSpecified = true;
                NotifyPropertyChanged("Representative");
            }
        }

        private bool? representativeField; 

        /// <summary>
        /// representativeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool RepresentativeSpecified {
            get {
                return representativeSpecifiedField;
            } 
            set {
                representativeSpecifiedField = value;
                NotifyPropertyChanged("RepresentativeSpecified");
            }
        }

        private bool representativeSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(4000)]
        [Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultContaminant xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultContaminant", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultContaminant xsd type.")]
    public partial class FluidResultContaminant : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        /// </summary>
		[Required]
        [Description("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "FluidContaminant")]
		[XmlElement("contaminantKind")]
        public FluidContaminant ContaminantKind {
            get {
                return contaminantKindField;
            } 
            set {
                contaminantKindField = value;
                NotifyPropertyChanged("ContaminantKind");
            }
        }

        private FluidContaminant contaminantKindField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("weightPercent")]
        public MassConcentrationMeasurePercent WeightPercent {
            get {
                return weightPercentField;
            } 
            set {
                weightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassConcentrationMeasurePercent weightPercentField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
		[XmlElement("volumePercent")]
        public VolumePerVolumeMeasurePercent VolumePercent {
            get {
                return volumePercentField;
            } 
            set {
                volumePercentField = value;
                NotifyPropertyChanged("VolumePercent");
            }
        }

        private VolumePerVolumeMeasurePercent volumePercentField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(256)]
        [Description("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultSeparatorTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultSeparatorTestStep", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultSeparatorTestStep xsd type.")]
    public partial class FluidResultSeparatorTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stepNumber property
        /// </summary>
		[Description("The stepNumber represents a row in the table.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("stepNumber")]
        public short? StepNumber {
            get {
                return stepNumberField;
            } 
            set {
                stepNumberField = value;
                 this.StepNumberSpecified = true;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private short? stepNumberField; 

        /// <summary>
        /// stepNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StepNumberSpecified {
            get {
                return stepNumberSpecifiedField;
            } 
            set {
                stepNumberSpecifiedField = value;
                NotifyPropertyChanged("StepNumberSpecified");
            }
        }

        private bool stepNumberSpecifiedField; 

        /// <summary>
        /// stepTemperature property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("stepTemperature")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return stepTemperatureField;
            } 
            set {
                stepTemperatureField = value;
                NotifyPropertyChanged("StepTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure stepTemperatureField; 

        /// <summary>
        /// stepPressure property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("stepPressure")]
        public PressureMeasure StepPressure {
            get {
                return stepPressureField;
            } 
            set {
                stepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure stepPressureField; 

        /// <summary>
        /// bubblePointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("bubblePointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return bubblePointPressureField;
            } 
            set {
                if (value != null && RetrogradeDewPointPressureSpecified) throw new Exception("Cannot set property BubblePointPressure when property RetrogradeDewPointPressure is already set");
                bubblePointPressureField = value;
                BubblePointPressureSpecified = (value!=null);
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure bubblePointPressureField; 
        private bool bubblePointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if BubblePointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BubblePointPressureSpecified
        {
            get {
                return bubblePointPressureSpecified;
            }
            set {
                bubblePointPressureSpecified= value;
            }
        }

        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("retrogradeDewPointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure RetrogradeDewPointPressure {
            get {
                return retrogradeDewPointPressureField;
            } 
            set {
                if (value != null && BubblePointPressureSpecified) throw new Exception("Cannot set property RetrogradeDewPointPressure when property BubblePointPressure is already set");
                retrogradeDewPointPressureField = value;
                RetrogradeDewPointPressureSpecified = (value!=null);
                NotifyPropertyChanged("RetrogradeDewPointPressure");
            }
        }

        private PressureMeasure retrogradeDewPointPressureField; 
        private bool retrogradeDewPointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if RetrogradeDewPointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RetrogradeDewPointPressureSpecified
        {
            get {
                return retrogradeDewPointPressureSpecified;
            }
            set {
                retrogradeDewPointPressureSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType7? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType7? ItemElementNameField; 

        /// <summary>
        /// oilAPIGravity property
        /// </summary>
        [ComponentElement]
        [XmlElement("oilAPIGravity")]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
        public DensityMeasure OilAPIGravity {
            get {
                return oilAPIGravityField;
            } 
            set {
                if (value != null && OilSpecificGravitySpecified) throw new Exception("Cannot set property OilAPIGravity when property OilSpecificGravity is already set");
                oilAPIGravityField = value;
                OilAPIGravitySpecified = (value!=null);
                NotifyPropertyChanged("OilAPIGravity");
            }
        }

        private DensityMeasure oilAPIGravityField; 
        private bool oilAPIGravitySpecified = false; 

        /// <summary>
        /// bool to indicate if OilAPIGravity has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OilAPIGravitySpecified
        {
            get {
                return oilAPIGravitySpecified;
            }
            set {
                oilAPIGravitySpecified= value;
            }
        }

        /// <summary>
        /// oilSpecificGravity property
        /// </summary>
        [XmlElement("oilSpecificGravity")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
        public double? OilSpecificGravity {
            get {
                return oilSpecificGravityField;
            } 
            set {
                if (value != null && OilAPIGravitySpecified) throw new Exception("Cannot set property OilSpecificGravity when property OilAPIGravity is already set");
                oilSpecificGravityField = value;
                OilSpecificGravitySpecified = (value!=null);
                NotifyPropertyChanged("OilSpecificGravity");
            }
        }

        private double? oilSpecificGravityField; 
        private bool oilSpecificGravitySpecified = false; 

        /// <summary>
        /// bool to indicate if OilSpecificGravity has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OilSpecificGravitySpecified
        {
            get {
                return oilSpecificGravitySpecified;
            }
            set {
                oilSpecificGravitySpecified= value;
            }
        }


        /// <summary>
        /// oilMassDensity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("oilMassDensity")]
        public DensityMeasure OilMassDensity {
            get {
                return oilMassDensityField;
            } 
            set {
                oilMassDensityField = value;
                NotifyPropertyChanged("OilMassDensity");
            }
        }

        private DensityMeasure oilMassDensityField; 

        /// <summary>
        /// oilFormationVolumeFactorStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerStandardVolumeMeasure")]
		[XmlElement("oilFormationVolumeFactorStd")]
        public VolumePerStandardVolumeMeasure OilFormationVolumeFactorStd {
            get {
                return oilFormationVolumeFactorStdField;
            } 
            set {
                oilFormationVolumeFactorStdField = value;
                NotifyPropertyChanged("OilFormationVolumeFactorStd");
            }
        }

        private VolumePerStandardVolumeMeasure oilFormationVolumeFactorStdField; 

        /// <summary>
        /// oilViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("oilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return oilViscosityField;
            } 
            set {
                oilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure oilViscosityField; 

        /// <summary>
        /// oilVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("oilVolume")]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
        public VolumeMeasure OilVolume {
            get {
                return oilVolumeField;
            } 
            set {
                if (value != null && OilShrinkageFactorSpecified) throw new Exception("Cannot set property OilVolume when property OilShrinkageFactor is already set");
                if (value != null && StageSeparatorGORStdSpecified) throw new Exception("Cannot set property OilVolume when property StageSeparatorGORStd is already set");
                oilVolumeField = value;
                OilVolumeSpecified = (value!=null);
                NotifyPropertyChanged("OilVolume");
            }
        }

        private VolumeMeasure oilVolumeField; 
        private bool oilVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if OilVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OilVolumeSpecified
        {
            get {
                return oilVolumeSpecified;
            }
            set {
                oilVolumeSpecified= value;
            }
        }

        /// <summary>
        /// gasVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("gasVolume")]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumeMeasure")]
        public StandardVolumeMeasure GasVolume {
            get {
                return gasVolumeField;
            } 
            set {
                if (value != null && OilShrinkageFactorSpecified) throw new Exception("Cannot set property GasVolume when property OilShrinkageFactor is already set");
                if (value != null && StageSeparatorGORStdSpecified) throw new Exception("Cannot set property GasVolume when property StageSeparatorGORStd is already set");
                gasVolumeField = value;
                GasVolumeSpecified = (value!=null);
                NotifyPropertyChanged("GasVolume");
            }
        }

        private StandardVolumeMeasure gasVolumeField; 
        private bool gasVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if GasVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool GasVolumeSpecified
        {
            get {
                return gasVolumeSpecified;
            }
            set {
                gasVolumeSpecified= value;
            }
        }

        /// <summary>
        /// oilShrinkageFactor property
        /// </summary>
        [ComponentElement]
        [XmlElement("oilShrinkageFactor")]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilShrinkageFactor {
            get {
                return oilShrinkageFactorField;
            } 
            set {
                if (value != null && GasVolumeSpecified) throw new Exception("Cannot set property OilShrinkageFactor when property GasVolume is already set");
                if (value != null && OilVolumeSpecified) throw new Exception("Cannot set property OilShrinkageFactor when property OilVolume is already set");
                oilShrinkageFactorField = value;
                OilShrinkageFactorSpecified = (value!=null);
                NotifyPropertyChanged("OilShrinkageFactor");
            }
        }

        private VolumePerVolumeMeasure oilShrinkageFactorField; 
        private bool oilShrinkageFactorSpecified = false; 

        /// <summary>
        /// bool to indicate if OilShrinkageFactor has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OilShrinkageFactorSpecified
        {
            get {
                return oilShrinkageFactorSpecified;
            }
            set {
                oilShrinkageFactorSpecified= value;
            }
        }

        /// <summary>
        /// stageSeparatorGORStd property
        /// </summary>
        [ComponentElement]
        [XmlElement("stageSeparatorGORStd")]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerVolumeMeasure")]
        public StandardVolumePerVolumeMeasure StageSeparatorGORStd {
            get {
                return stageSeparatorGORStdField;
            } 
            set {
                if (value != null && GasVolumeSpecified) throw new Exception("Cannot set property StageSeparatorGORStd when property GasVolume is already set");
                if (value != null && OilVolumeSpecified) throw new Exception("Cannot set property StageSeparatorGORStd when property OilVolume is already set");
                stageSeparatorGORStdField = value;
                StageSeparatorGORStdSpecified = (value!=null);
                NotifyPropertyChanged("StageSeparatorGORStd");
            }
        }

        private StandardVolumePerVolumeMeasure stageSeparatorGORStdField; 
        private bool stageSeparatorGORStdSpecified = false; 

        /// <summary>
        /// bool to indicate if StageSeparatorGORStd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StageSeparatorGORStdSpecified
        {
            get {
                return stageSeparatorGORStdSpecified;
            }
            set {
                stageSeparatorGORStdSpecified= value;
            }
        }


        /// <summary>
        /// correctedStageSeparatorGORStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
		[XmlElement("correctedStageSeparatorGORStd")]
        public StandardVolumePerStandardVolumeMeasure CorrectedStageSeparatorGORStd {
            get {
                return correctedStageSeparatorGORStdField;
            } 
            set {
                correctedStageSeparatorGORStdField = value;
                NotifyPropertyChanged("CorrectedStageSeparatorGORStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure correctedStageSeparatorGORStdField; 

        /// <summary>
        /// cumulativeStockTankGORStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
		[XmlElement("cumulativeStockTankGORStd")]
        public StandardVolumePerStandardVolumeMeasure CumulativeStockTankGORStd {
            get {
                return cumulativeStockTankGORStdField;
            } 
            set {
                cumulativeStockTankGORStdField = value;
                NotifyPropertyChanged("CumulativeStockTankGORStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure cumulativeStockTankGORStdField; 

        /// <summary>
        /// solutionGORStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
		[XmlElement("solutionGORStd")]
        public StandardVolumePerStandardVolumeMeasure SolutionGORStd {
            get {
                return solutionGORStdField;
            } 
            set {
                solutionGORStdField = value;
                NotifyPropertyChanged("SolutionGORStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure solutionGORStdField; 

        /// <summary>
        /// gasMolecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasMolecularWeight")]
        public double? GasMolecularWeight {
            get {
                return gasMolecularWeightField;
            } 
            set {
                gasMolecularWeightField = value;
                 this.GasMolecularWeightSpecified = true;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private double? gasMolecularWeightField; 

        /// <summary>
        /// gasMolecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasMolecularWeightSpecified {
            get {
                return gasMolecularWeightSpecifiedField;
            } 
            set {
                gasMolecularWeightSpecifiedField = value;
                NotifyPropertyChanged("GasMolecularWeightSpecified");
            }
        }

        private bool gasMolecularWeightSpecifiedField; 

        /// <summary>
        /// gasGravity property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasGravity")]
        public double? GasGravity {
            get {
                return gasGravityField;
            } 
            set {
                gasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? gasGravityField; 

        /// <summary>
        /// gasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return gasGravitySpecifiedField;
            } 
            set {
                gasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool gasGravitySpecifiedField; 

        /// <summary>
        /// gasMassDensity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("gasMassDensity")]
        public DensityMeasure GasMassDensity {
            get {
                return gasMassDensityField;
            } 
            set {
                gasMassDensityField = value;
                NotifyPropertyChanged("GasMassDensity");
            }
        }

        private DensityMeasure gasMassDensityField; 

        /// <summary>
        /// gasZFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasZFactor")]
        public double? GasZFactor {
            get {
                return gasZFactorField;
            } 
            set {
                gasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? gasZFactorField; 

        /// <summary>
        /// gasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return gasZFactorSpecifiedField;
            } 
            set {
                gasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool gasZFactorSpecifiedField; 

        /// <summary>
        /// gasViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("gasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return gasViscosityField;
            } 
            set {
                gasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure gasViscosityField; 

        /// <summary>
        /// residualAPIGravity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("residualAPIGravity")]
        public DensityMeasure ResidualAPIGravity {
            get {
                return residualAPIGravityField;
            } 
            set {
                residualAPIGravityField = value;
                NotifyPropertyChanged("ResidualAPIGravity");
            }
        }

        private DensityMeasure residualAPIGravityField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// reservoir property
        /// </summary>
        [XmlElement("reservoir")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Reservoir {
            get {
                return reservoirField;
            } 
            set {
                reservoirField = value;
                ReservoirSpecified = (value!=null);
                NotifyPropertyChanged("Reservoir");
            }
        }

        private bool? reservoirField; 
        private bool reservoirSpecified = false; 

        /// <summary>
        /// bool to indicate if Reservoir has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ReservoirSpecified
        {
            get {
                return reservoirSpecified;
            }
            set {
                reservoirSpecified= value;
            }
        }

        /// <summary>
        /// saturated property
        /// </summary>
        [XmlElement("saturated")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Saturated {
            get {
                return saturatedField;
            } 
            set {
                saturatedField = value;
                SaturatedSpecified = (value!=null);
                NotifyPropertyChanged("Saturated");
            }
        }

        private bool? saturatedField; 
        private bool saturatedSpecified = false; 

        /// <summary>
        /// bool to indicate if Saturated has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SaturatedSpecified
        {
            get {
                return saturatedSpecified;
            }
            set {
                saturatedSpecified= value;
            }
        }

        /// <summary>
        /// stockTank property
        /// </summary>
        [ComponentElement]
        [XmlElement("stockTank")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultStockTank")]
        public FluidResultStockTank StockTank {
            get {
                return stockTankField;
            } 
            set {
                stockTankField = value;
                StockTankSpecified = (value!=null);
                NotifyPropertyChanged("StockTank");
            }
        }

        private FluidResultStockTank stockTankField; 
        private bool stockTankSpecified = false; 

        /// <summary>
        /// bool to indicate if StockTank has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StockTankSpecified
        {
            get {
                return stockTankSpecified;
            }
            set {
                stockTankSpecified= value;
            }
        }


        /// <summary>
        /// Items1ElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<Items1ChoiceType1> Items1ElementName {
            get {
                return Items1ElementNameField;
            } 
            set {
                Items1ElementNameField = value;
                NotifyPropertyChanged("Items1ElementName");
            }
        }

         /// <summary>
         /// bool to indicate if Items1ElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool Items1ElementNameSpecified
         {
             get {
             if(Items1ElementNameField!=null)
                 return Items1ElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<Items1ChoiceType1> Items1ElementNameField; 

        /// <summary>
        /// vaporComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("vaporComposition")]
        public List<FluidResultPhaseComposition> VaporComposition {
            get {
                return vaporCompositionField;
            } 
            set {
                vaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(vaporCompositionField!=null)
                 return vaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> vaporCompositionField; 

        /// <summary>
        /// liquidComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("liquidComposition")]
        public List<FluidResultPhaseComposition> LiquidComposition {
            get {
                return liquidCompositionField;
            } 
            set {
                liquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidCompositionSpecified
         {
             get {
             if(liquidCompositionField!=null)
                 return liquidCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> liquidCompositionField; 

        /// <summary>
        /// compositeComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultCompositeComposition")]
		[XmlElement("compositeComposition")]
        public List<FluidResultCompositeComposition> CompositeComposition {
            get {
                return compositeCompositionField;
            } 
            set {
                compositeCompositionField = value;
                NotifyPropertyChanged("CompositeComposition");
            }
        }

         /// <summary>
         /// bool to indicate if CompositeComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CompositeCompositionSpecified
         {
             get {
             if(compositeCompositionField!=null)
                 return compositeCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultCompositeComposition> compositeCompositionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultStockTank xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultStockTank", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultStockTank xsd type.")]
    public partial class FluidResultStockTank : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// temperature property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("temperature")]
        public ThermodynamicTemperatureMeasure Temperature {
            get {
                return temperatureField;
            } 
            set {
                temperatureField = value;
                NotifyPropertyChanged("Temperature");
            }
        }

        private ThermodynamicTemperatureMeasure temperatureField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultPhaseComposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultPhaseComposition", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultPhaseComposition xsd type.")]
    public partial class FluidResultPhaseComposition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// componentName property
        /// </summary>
		[Required]
        [StringLength(40)]
        [Description("xxxxxxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("componentName")]
        public string ComponentName {
            get {
                return componentNameField;
            } 
            set {
                componentNameField = value;
                NotifyPropertyChanged("ComponentName");
            }
        }

        private string componentNameField; 

        /// <summary>
        /// weightPercent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("weightPercent")]
        public MassConcentrationMeasurePercent WeightPercent {
            get {
                return weightPercentField;
            } 
            set {
                weightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassConcentrationMeasurePercent weightPercentField; 

        /// <summary>
        /// molePercent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "molarFractionMeasurePercent")]
		[XmlElement("molePercent")]
        public MolarFractionMeasurePercent MolePercent {
            get {
                return molePercentField;
            } 
            set {
                molePercentField = value;
                NotifyPropertyChanged("MolePercent");
            }
        }

        private MolarFractionMeasurePercent molePercentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultCompositeComposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultCompositeComposition", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultCompositeComposition xsd type.")]
    public partial class FluidResultCompositeComposition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// componentName property
        /// </summary>
		[Required]
        [StringLength(40)]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("componentName")]
        public string ComponentName {
            get {
                return componentNameField;
            } 
            set {
                componentNameField = value;
                NotifyPropertyChanged("ComponentName");
            }
        }

        private string componentNameField; 

        /// <summary>
        /// weightPercent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("weightPercent")]
        public MassConcentrationMeasurePercent WeightPercent {
            get {
                return weightPercentField;
            } 
            set {
                weightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassConcentrationMeasurePercent weightPercentField; 

        /// <summary>
        /// molePercent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "molarFractionMeasurePercent")]
		[XmlElement("molePercent")]
        public MolarFractionMeasurePercent MolePercent {
            get {
                return molePercentField;
            } 
            set {
                molePercentField = value;
                NotifyPropertyChanged("MolePercent");
            }
        }

        private MolarFractionMeasurePercent molePercentField; 

        /// <summary>
        /// kValue property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("kValue")]
        public double? KValue {
            get {
                return kValueField;
            } 
            set {
                kValueField = value;
                 this.KValueSpecified = true;
                NotifyPropertyChanged("KValue");
            }
        }

        private double? kValueField; 

        /// <summary>
        /// kValueSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool KValueSpecified {
            get {
                return kValueSpecifiedField;
            } 
            set {
                kValueSpecifiedField = value;
                NotifyPropertyChanged("KValueSpecified");
            }
        }

        private bool kValueSpecifiedField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultSeparatorTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultSeparatorTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultSeparatorTest xsd type.")]
    public partial class FluidResultSeparatorTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// testNumber property
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("testNumber")]
        public short? TestNumber {
            get {
                return testNumberField;
            } 
            set {
                testNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private short? testNumberField; 

        /// <summary>
        /// testNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return testNumberSpecifiedField;
            } 
            set {
                testNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool testNumberSpecifiedField; 

        /// <summary>
        /// shrinkageReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultVolumeReference")]
		[XmlElement("shrinkageReference")]
        public FluidResultVolumeReference ShrinkageReference {
            get {
                return shrinkageReferenceField;
            } 
            set {
                shrinkageReferenceField = value;
                NotifyPropertyChanged("ShrinkageReference");
            }
        }

        private FluidResultVolumeReference shrinkageReferenceField; 

        /// <summary>
        /// separatorTestStep property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultSeparatorTestStep")]
		[XmlElement("separatorTestStep")]
        public List<FluidResultSeparatorTestStep> SeparatorTestStep {
            get {
                return separatorTestStepField;
            } 
            set {
                separatorTestStepField = value;
                NotifyPropertyChanged("SeparatorTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if SeparatorTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SeparatorTestStepSpecified
         {
             get {
             if(separatorTestStepField!=null)
                 return separatorTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultSeparatorTestStep> separatorTestStepField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultVolumeReference xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultVolumeReference", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultVolumeReference xsd type.")]
    public partial class FluidResultVolumeReference : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// kind property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "VolumeReferenceKind")]
		[XmlElement("kind")]
        public VolumeReferenceKind Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private VolumeReferenceKind kindField; 

        /// <summary>
        /// referenceVolume property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("referenceVolume")]
        public VolumeMeasure ReferenceVolume {
            get {
                return referenceVolumeField;
            } 
            set {
                referenceVolumeField = value;
                NotifyPropertyChanged("ReferenceVolume");
            }
        }

        private VolumeMeasure referenceVolumeField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultTransportTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultTransportTestStep", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultTransportTestStep xsd type.")]
    public partial class FluidResultTransportTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stepNumber property
        /// </summary>
		[Description("The stepNumber represents a row in the table.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("stepNumber")]
        public short? StepNumber {
            get {
                return stepNumberField;
            } 
            set {
                stepNumberField = value;
                 this.StepNumberSpecified = true;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private short? stepNumberField; 

        /// <summary>
        /// stepNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StepNumberSpecified {
            get {
                return stepNumberSpecifiedField;
            } 
            set {
                stepNumberSpecifiedField = value;
                NotifyPropertyChanged("StepNumberSpecified");
            }
        }

        private bool stepNumberSpecifiedField; 

        /// <summary>
        /// stepTemperature property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("stepTemperature")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return stepTemperatureField;
            } 
            set {
                stepTemperatureField = value;
                NotifyPropertyChanged("StepTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure stepTemperatureField; 

        /// <summary>
        /// stepPressure property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("stepPressure")]
        public PressureMeasure StepPressure {
            get {
                return stepPressureField;
            } 
            set {
                stepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure stepPressureField; 

        /// <summary>
        /// bubblePointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("bubblePointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return bubblePointPressureField;
            } 
            set {
                if (value != null && RetrogradeDewPointPressureSpecified) throw new Exception("Cannot set property BubblePointPressure when property RetrogradeDewPointPressure is already set");
                bubblePointPressureField = value;
                BubblePointPressureSpecified = (value!=null);
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure bubblePointPressureField; 
        private bool bubblePointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if BubblePointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BubblePointPressureSpecified
        {
            get {
                return bubblePointPressureSpecified;
            }
            set {
                bubblePointPressureSpecified= value;
            }
        }

        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("retrogradeDewPointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure RetrogradeDewPointPressure {
            get {
                return retrogradeDewPointPressureField;
            } 
            set {
                if (value != null && BubblePointPressureSpecified) throw new Exception("Cannot set property RetrogradeDewPointPressure when property BubblePointPressure is already set");
                retrogradeDewPointPressureField = value;
                RetrogradeDewPointPressureSpecified = (value!=null);
                NotifyPropertyChanged("RetrogradeDewPointPressure");
            }
        }

        private PressureMeasure retrogradeDewPointPressureField; 
        private bool retrogradeDewPointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if RetrogradeDewPointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RetrogradeDewPointPressureSpecified
        {
            get {
                return retrogradeDewPointPressureSpecified;
            }
            set {
                retrogradeDewPointPressureSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType6? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType6? ItemElementNameField; 

        /// <summary>
        /// dewPointPressure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("dewPointPressure")]
        public PressureMeasure DewPointPressure {
            get {
                return dewPointPressureField;
            } 
            set {
                dewPointPressureField = value;
                NotifyPropertyChanged("DewPointPressure");
            }
        }

        private PressureMeasure dewPointPressureField; 

        /// <summary>
        /// cloudPoint property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("cloudPoint")]
        public ThermodynamicTemperatureMeasure CloudPoint {
            get {
                return cloudPointField;
            } 
            set {
                cloudPointField = value;
                NotifyPropertyChanged("CloudPoint");
            }
        }

        private ThermodynamicTemperatureMeasure cloudPointField; 

        /// <summary>
        /// pourPoint property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("pourPoint")]
        public ThermodynamicTemperatureMeasure PourPoint {
            get {
                return pourPointField;
            } 
            set {
                pourPointField = value;
                NotifyPropertyChanged("PourPoint");
            }
        }

        private ThermodynamicTemperatureMeasure pourPointField; 

        /// <summary>
        /// oilMolecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("oilMolecularWeight")]
        public double? OilMolecularWeight {
            get {
                return oilMolecularWeightField;
            } 
            set {
                oilMolecularWeightField = value;
                 this.OilMolecularWeightSpecified = true;
                NotifyPropertyChanged("OilMolecularWeight");
            }
        }

        private double? oilMolecularWeightField; 

        /// <summary>
        /// oilMolecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OilMolecularWeightSpecified {
            get {
                return oilMolecularWeightSpecifiedField;
            } 
            set {
                oilMolecularWeightSpecifiedField = value;
                NotifyPropertyChanged("OilMolecularWeightSpecified");
            }
        }

        private bool oilMolecularWeightSpecifiedField; 

        /// <summary>
        /// oilAPIGravity property
        /// </summary>
        [ComponentElement]
        [XmlElement("oilAPIGravity")]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
        public DensityMeasure OilAPIGravity {
            get {
                return oilAPIGravityField;
            } 
            set {
                if (value != null && OilSpecificGravitySpecified) throw new Exception("Cannot set property OilAPIGravity when property OilSpecificGravity is already set");
                oilAPIGravityField = value;
                OilAPIGravitySpecified = (value!=null);
                NotifyPropertyChanged("OilAPIGravity");
            }
        }

        private DensityMeasure oilAPIGravityField; 
        private bool oilAPIGravitySpecified = false; 

        /// <summary>
        /// bool to indicate if OilAPIGravity has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OilAPIGravitySpecified
        {
            get {
                return oilAPIGravitySpecified;
            }
            set {
                oilAPIGravitySpecified= value;
            }
        }

        /// <summary>
        /// oilSpecificGravity property
        /// </summary>
        [XmlElement("oilSpecificGravity")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
        public double? OilSpecificGravity {
            get {
                return oilSpecificGravityField;
            } 
            set {
                if (value != null && OilAPIGravitySpecified) throw new Exception("Cannot set property OilSpecificGravity when property OilAPIGravity is already set");
                oilSpecificGravityField = value;
                OilSpecificGravitySpecified = (value!=null);
                NotifyPropertyChanged("OilSpecificGravity");
            }
        }

        private double? oilSpecificGravityField; 
        private bool oilSpecificGravitySpecified = false; 

        /// <summary>
        /// bool to indicate if OilSpecificGravity has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OilSpecificGravitySpecified
        {
            get {
                return oilSpecificGravitySpecified;
            }
            set {
                oilSpecificGravitySpecified= value;
            }
        }


        /// <summary>
        /// oilMassDensity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("oilMassDensity")]
        public DensityMeasure OilMassDensity {
            get {
                return oilMassDensityField;
            } 
            set {
                oilMassDensityField = value;
                NotifyPropertyChanged("OilMassDensity");
            }
        }

        private DensityMeasure oilMassDensityField; 

        /// <summary>
        /// oilCompressibility property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "compressibilityMeasure")]
		[XmlElement("oilCompressibility")]
        public CompressibilityMeasure OilCompressibility {
            get {
                return oilCompressibilityField;
            } 
            set {
                oilCompressibilityField = value;
                NotifyPropertyChanged("OilCompressibility");
            }
        }

        private CompressibilityMeasure oilCompressibilityField; 

        /// <summary>
        /// oilViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("oilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return oilViscosityField;
            } 
            set {
                oilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure oilViscosityField; 

        /// <summary>
        /// oilThermalConductivity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermalConductivityMeasure")]
		[XmlElement("oilThermalConductivity")]
        public ThermalConductivityMeasure OilThermalConductivity {
            get {
                return oilThermalConductivityField;
            } 
            set {
                oilThermalConductivityField = value;
                NotifyPropertyChanged("OilThermalConductivity");
            }
        }

        private ThermalConductivityMeasure oilThermalConductivityField; 

        /// <summary>
        /// gasMolecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasMolecularWeight")]
        public double? GasMolecularWeight {
            get {
                return gasMolecularWeightField;
            } 
            set {
                gasMolecularWeightField = value;
                 this.GasMolecularWeightSpecified = true;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private double? gasMolecularWeightField; 

        /// <summary>
        /// gasMolecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasMolecularWeightSpecified {
            get {
                return gasMolecularWeightSpecifiedField;
            } 
            set {
                gasMolecularWeightSpecifiedField = value;
                NotifyPropertyChanged("GasMolecularWeightSpecified");
            }
        }

        private bool gasMolecularWeightSpecifiedField; 

        /// <summary>
        /// gasGravity property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasGravity")]
        public double? GasGravity {
            get {
                return gasGravityField;
            } 
            set {
                gasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? gasGravityField; 

        /// <summary>
        /// gasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return gasGravitySpecifiedField;
            } 
            set {
                gasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool gasGravitySpecifiedField; 

        /// <summary>
        /// gasMassDensity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("gasMassDensity")]
        public DensityMeasure GasMassDensity {
            get {
                return gasMassDensityField;
            } 
            set {
                gasMassDensityField = value;
                NotifyPropertyChanged("GasMassDensity");
            }
        }

        private DensityMeasure gasMassDensityField; 

        /// <summary>
        /// gasZFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasZFactor")]
        public double? GasZFactor {
            get {
                return gasZFactorField;
            } 
            set {
                gasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? gasZFactorField; 

        /// <summary>
        /// gasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return gasZFactorSpecifiedField;
            } 
            set {
                gasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool gasZFactorSpecifiedField; 

        /// <summary>
        /// gasCompressibility property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "compressibilityMeasure")]
		[XmlElement("gasCompressibility")]
        public CompressibilityMeasure GasCompressibility {
            get {
                return gasCompressibilityField;
            } 
            set {
                gasCompressibilityField = value;
                NotifyPropertyChanged("GasCompressibility");
            }
        }

        private CompressibilityMeasure gasCompressibilityField; 

        /// <summary>
        /// gasViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("gasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return gasViscosityField;
            } 
            set {
                gasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure gasViscosityField; 

        /// <summary>
        /// gasThermalConductivity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermalConductivityMeasure")]
		[XmlElement("gasThermalConductivity")]
        public ThermalConductivityMeasure GasThermalConductivity {
            get {
                return gasThermalConductivityField;
            } 
            set {
                gasThermalConductivityField = value;
                NotifyPropertyChanged("GasThermalConductivity");
            }
        }

        private ThermalConductivityMeasure gasThermalConductivityField; 

        /// <summary>
        /// gasHeatingValue property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "modulusOfCompressionMeasure")]
		[XmlElement("gasHeatingValue")]
        public ModulusOfCompressionMeasure GasHeatingValue {
            get {
                return gasHeatingValueField;
            } 
            set {
                gasHeatingValueField = value;
                NotifyPropertyChanged("GasHeatingValue");
            }
        }

        private ModulusOfCompressionMeasure gasHeatingValueField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// reservoir property
        /// </summary>
        [XmlElement("reservoir")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Reservoir {
            get {
                return reservoirField;
            } 
            set {
                reservoirField = value;
                ReservoirSpecified = (value!=null);
                NotifyPropertyChanged("Reservoir");
            }
        }

        private bool? reservoirField; 
        private bool reservoirSpecified = false; 

        /// <summary>
        /// bool to indicate if Reservoir has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ReservoirSpecified
        {
            get {
                return reservoirSpecified;
            }
            set {
                reservoirSpecified= value;
            }
        }

        /// <summary>
        /// saturated property
        /// </summary>
        [XmlElement("saturated")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Saturated {
            get {
                return saturatedField;
            } 
            set {
                saturatedField = value;
                SaturatedSpecified = (value!=null);
                NotifyPropertyChanged("Saturated");
            }
        }

        private bool? saturatedField; 
        private bool saturatedSpecified = false; 

        /// <summary>
        /// bool to indicate if Saturated has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SaturatedSpecified
        {
            get {
                return saturatedSpecified;
            }
            set {
                saturatedSpecified= value;
            }
        }

        /// <summary>
        /// stockTank property
        /// </summary>
        [ComponentElement]
        [XmlElement("stockTank")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultStockTank")]
        public FluidResultStockTank StockTank {
            get {
                return stockTankField;
            } 
            set {
                stockTankField = value;
                StockTankSpecified = (value!=null);
                NotifyPropertyChanged("StockTank");
            }
        }

        private FluidResultStockTank stockTankField; 
        private bool stockTankSpecified = false; 

        /// <summary>
        /// bool to indicate if StockTank has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StockTankSpecified
        {
            get {
                return stockTankSpecified;
            }
            set {
                stockTankSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType4> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType4> ItemsElementNameField; 

        /// <summary>
        /// vaporComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("vaporComposition")]
        public List<FluidResultPhaseComposition> VaporComposition {
            get {
                return vaporCompositionField;
            } 
            set {
                vaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(vaporCompositionField!=null)
                 return vaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> vaporCompositionField; 

        /// <summary>
        /// liquidComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("liquidComposition")]
        public List<FluidResultPhaseComposition> LiquidComposition {
            get {
                return liquidCompositionField;
            } 
            set {
                liquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidCompositionSpecified
         {
             get {
             if(liquidCompositionField!=null)
                 return liquidCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> liquidCompositionField; 

        /// <summary>
        /// compositeComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultCompositeComposition")]
		[XmlElement("compositeComposition")]
        public List<FluidResultCompositeComposition> CompositeComposition {
            get {
                return compositeCompositionField;
            } 
            set {
                compositeCompositionField = value;
                NotifyPropertyChanged("CompositeComposition");
            }
        }

         /// <summary>
         /// bool to indicate if CompositeComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CompositeCompositionSpecified
         {
             get {
             if(compositeCompositionField!=null)
                 return compositeCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultCompositeComposition> compositeCompositionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultTransportPropertiesTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultTransportPropertiesTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultTransportPropertiesTest xsd type.")]
    public partial class FluidResultTransportPropertiesTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// testNumber property
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("testNumber")]
        public short? TestNumber {
            get {
                return testNumberField;
            } 
            set {
                testNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private short? testNumberField; 

        /// <summary>
        /// testNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return testNumberSpecifiedField;
            } 
            set {
                testNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool testNumberSpecifiedField; 

        /// <summary>
        /// transportTestStep property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultTransportTestStep")]
		[XmlElement("transportTestStep")]
        public List<FluidResultTransportTestStep> TransportTestStep {
            get {
                return transportTestStepField;
            } 
            set {
                transportTestStepField = value;
                NotifyPropertyChanged("TransportTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if TransportTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TransportTestStepSpecified
         {
             get {
             if(transportTestStepField!=null)
                 return transportTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultTransportTestStep> transportTestStepField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultJCurveTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultJCurveTestStep", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultJCurveTestStep xsd type.")]
    public partial class FluidResultJCurveTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stepNumber property
        /// </summary>
		[Description("The stepNumber represents a row in the table.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("stepNumber")]
        public short? StepNumber {
            get {
                return stepNumberField;
            } 
            set {
                stepNumberField = value;
                 this.StepNumberSpecified = true;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private short? stepNumberField; 

        /// <summary>
        /// stepNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StepNumberSpecified {
            get {
                return stepNumberSpecifiedField;
            } 
            set {
                stepNumberSpecifiedField = value;
                NotifyPropertyChanged("StepNumberSpecified");
            }
        }

        private bool stepNumberSpecifiedField; 

        /// <summary>
        /// stepPressure property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("stepPressure")]
        public PressureMeasure StepPressure {
            get {
                return stepPressureField;
            } 
            set {
                stepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure stepPressureField; 

        /// <summary>
        /// oilViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("oilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return oilViscosityField;
            } 
            set {
                oilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure oilViscosityField; 

        /// <summary>
        /// liquidVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("liquidVolume")]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
        public VolumeMeasure LiquidVolume {
            get {
                return liquidVolumeField;
            } 
            set {
                if (value != null && LiquidDropoutPercentSpecified) throw new Exception("Cannot set property LiquidVolume when property LiquidDropoutPercent is already set");
                liquidVolumeField = value;
                LiquidVolumeSpecified = (value!=null);
                NotifyPropertyChanged("LiquidVolume");
            }
        }

        private VolumeMeasure liquidVolumeField; 
        private bool liquidVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if LiquidVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LiquidVolumeSpecified
        {
            get {
                return liquidVolumeSpecified;
            }
            set {
                liquidVolumeSpecified= value;
            }
        }

        /// <summary>
        /// liquidDropoutPercent property
        /// </summary>
        [ComponentElement]
        [XmlElement("liquidDropoutPercent")]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
        public VolumePerVolumeMeasurePercent LiquidDropoutPercent {
            get {
                return liquidDropoutPercentField;
            } 
            set {
                if (value != null && LiquidVolumeSpecified) throw new Exception("Cannot set property LiquidDropoutPercent when property LiquidVolume is already set");
                liquidDropoutPercentField = value;
                LiquidDropoutPercentSpecified = (value!=null);
                NotifyPropertyChanged("LiquidDropoutPercent");
            }
        }

        private VolumePerVolumeMeasurePercent liquidDropoutPercentField; 
        private bool liquidDropoutPercentSpecified = false; 

        /// <summary>
        /// bool to indicate if LiquidDropoutPercent has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LiquidDropoutPercentSpecified
        {
            get {
                return liquidDropoutPercentSpecified;
            }
            set {
                liquidDropoutPercentSpecified= value;
            }
        }


        /// <summary>
        /// gasMolecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasMolecularWeight")]
        public double? GasMolecularWeight {
            get {
                return gasMolecularWeightField;
            } 
            set {
                gasMolecularWeightField = value;
                 this.GasMolecularWeightSpecified = true;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private double? gasMolecularWeightField; 

        /// <summary>
        /// gasMolecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasMolecularWeightSpecified {
            get {
                return gasMolecularWeightSpecifiedField;
            } 
            set {
                gasMolecularWeightSpecifiedField = value;
                NotifyPropertyChanged("GasMolecularWeightSpecified");
            }
        }

        private bool gasMolecularWeightSpecifiedField; 

        /// <summary>
        /// gasGravity property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasGravity")]
        public double? GasGravity {
            get {
                return gasGravityField;
            } 
            set {
                gasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? gasGravityField; 

        /// <summary>
        /// gasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return gasGravitySpecifiedField;
            } 
            set {
                gasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool gasGravitySpecifiedField; 

        /// <summary>
        /// gasFormationVolumeFactorStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerStandardVolumeMeasure")]
		[XmlElement("gasFormationVolumeFactorStd")]
        public VolumePerStandardVolumeMeasure GasFormationVolumeFactorStd {
            get {
                return gasFormationVolumeFactorStdField;
            } 
            set {
                gasFormationVolumeFactorStdField = value;
                NotifyPropertyChanged("GasFormationVolumeFactorStd");
            }
        }

        private VolumePerStandardVolumeMeasure gasFormationVolumeFactorStdField; 

        /// <summary>
        /// gasZFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasZFactor")]
        public double? GasZFactor {
            get {
                return gasZFactorField;
            } 
            set {
                gasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? gasZFactorField; 

        /// <summary>
        /// gasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return gasZFactorSpecifiedField;
            } 
            set {
                gasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool gasZFactorSpecifiedField; 

        /// <summary>
        /// gasViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("gasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return gasViscosityField;
            } 
            set {
                gasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure gasViscosityField; 

        /// <summary>
        /// cumulativeGasProducedVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("cumulativeGasProducedVolume")]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumeMeasure")]
        public StandardVolumeMeasure CumulativeGasProducedVolume {
            get {
                return cumulativeGasProducedVolumeField;
            } 
            set {
                if (value != null && CumulativeGasProducedRatioStdSpecified) throw new Exception("Cannot set property CumulativeGasProducedVolume when property CumulativeGasProducedRatioStd is already set");
                cumulativeGasProducedVolumeField = value;
                CumulativeGasProducedVolumeSpecified = (value!=null);
                NotifyPropertyChanged("CumulativeGasProducedVolume");
            }
        }

        private StandardVolumeMeasure cumulativeGasProducedVolumeField; 
        private bool cumulativeGasProducedVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if CumulativeGasProducedVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CumulativeGasProducedVolumeSpecified
        {
            get {
                return cumulativeGasProducedVolumeSpecified;
            }
            set {
                cumulativeGasProducedVolumeSpecified= value;
            }
        }

        /// <summary>
        /// cumulativeGasProducedRatioStd property
        /// </summary>
        [ComponentElement]
        [XmlElement("cumulativeGasProducedRatioStd")]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
        public StandardVolumePerStandardVolumeMeasure CumulativeGasProducedRatioStd {
            get {
                return cumulativeGasProducedRatioStdField;
            } 
            set {
                if (value != null && CumulativeGasProducedVolumeSpecified) throw new Exception("Cannot set property CumulativeGasProducedRatioStd when property CumulativeGasProducedVolume is already set");
                cumulativeGasProducedRatioStdField = value;
                CumulativeGasProducedRatioStdSpecified = (value!=null);
                NotifyPropertyChanged("CumulativeGasProducedRatioStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure cumulativeGasProducedRatioStdField; 
        private bool cumulativeGasProducedRatioStdSpecified = false; 

        /// <summary>
        /// bool to indicate if CumulativeGasProducedRatioStd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CumulativeGasProducedRatioStdSpecified
        {
            get {
                return cumulativeGasProducedRatioStdSpecified;
            }
            set {
                cumulativeGasProducedRatioStdSpecified= value;
            }
        }


        /// <summary>
        /// condensateYieldVolumeRatio1Std property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerStandardVolumeMeasure")]
		[XmlElement("condensateYieldVolumeRatio1Std")]
        public VolumePerStandardVolumeMeasure CondensateYieldVolumeRatio1Std {
            get {
                return condensateYieldVolumeRatio1StdField;
            } 
            set {
                condensateYieldVolumeRatio1StdField = value;
                NotifyPropertyChanged("CondensateYieldVolumeRatio1Std");
            }
        }

        private VolumePerStandardVolumeMeasure condensateYieldVolumeRatio1StdField; 

        /// <summary>
        /// condensateYieldVolumeRatio2Std property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerStandardVolumeMeasure")]
		[XmlElement("condensateYieldVolumeRatio2Std")]
        public VolumePerStandardVolumeMeasure CondensateYieldVolumeRatio2Std {
            get {
                return condensateYieldVolumeRatio2StdField;
            } 
            set {
                condensateYieldVolumeRatio2StdField = value;
                NotifyPropertyChanged("CondensateYieldVolumeRatio2Std");
            }
        }

        private VolumePerStandardVolumeMeasure condensateYieldVolumeRatio2StdField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// reservoir property
        /// </summary>
        [XmlElement("reservoir")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Reservoir {
            get {
                return reservoirField;
            } 
            set {
                reservoirField = value;
                ReservoirSpecified = (value!=null);
                NotifyPropertyChanged("Reservoir");
            }
        }

        private bool? reservoirField; 
        private bool reservoirSpecified = false; 

        /// <summary>
        /// bool to indicate if Reservoir has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ReservoirSpecified
        {
            get {
                return reservoirSpecified;
            }
            set {
                reservoirSpecified= value;
            }
        }

        /// <summary>
        /// saturated property
        /// </summary>
        [XmlElement("saturated")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Saturated {
            get {
                return saturatedField;
            } 
            set {
                saturatedField = value;
                SaturatedSpecified = (value!=null);
                NotifyPropertyChanged("Saturated");
            }
        }

        private bool? saturatedField; 
        private bool saturatedSpecified = false; 

        /// <summary>
        /// bool to indicate if Saturated has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SaturatedSpecified
        {
            get {
                return saturatedSpecified;
            }
            set {
                saturatedSpecified= value;
            }
        }

        /// <summary>
        /// stockTank property
        /// </summary>
        [ComponentElement]
        [XmlElement("stockTank")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultStockTank")]
        public FluidResultStockTank StockTank {
            get {
                return stockTankField;
            } 
            set {
                stockTankField = value;
                StockTankSpecified = (value!=null);
                NotifyPropertyChanged("StockTank");
            }
        }

        private FluidResultStockTank stockTankField; 
        private bool stockTankSpecified = false; 

        /// <summary>
        /// bool to indicate if StockTank has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StockTankSpecified
        {
            get {
                return stockTankSpecified;
            }
            set {
                stockTankSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType3> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType3> ItemsElementNameField; 

        /// <summary>
        /// vaporComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("vaporComposition")]
        public List<FluidResultPhaseComposition> VaporComposition {
            get {
                return vaporCompositionField;
            } 
            set {
                vaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(vaporCompositionField!=null)
                 return vaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> vaporCompositionField; 

        /// <summary>
        /// liquidComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("liquidComposition")]
        public List<FluidResultPhaseComposition> LiquidComposition {
            get {
                return liquidCompositionField;
            } 
            set {
                liquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidCompositionSpecified
         {
             get {
             if(liquidCompositionField!=null)
                 return liquidCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> liquidCompositionField; 

        /// <summary>
        /// compositeComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultCompositeComposition")]
		[XmlElement("compositeComposition")]
        public List<FluidResultCompositeComposition> CompositeComposition {
            get {
                return compositeCompositionField;
            } 
            set {
                compositeCompositionField = value;
                NotifyPropertyChanged("CompositeComposition");
            }
        }

         /// <summary>
         /// bool to indicate if CompositeComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CompositeCompositionSpecified
         {
             get {
             if(compositeCompositionField!=null)
                 return compositeCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultCompositeComposition> compositeCompositionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultJCurveTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultJCurveTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultJCurveTest xsd type.")]
    public partial class FluidResultJCurveTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// testNumber property
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("testNumber")]
        public short? TestNumber {
            get {
                return testNumberField;
            } 
            set {
                testNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private short? testNumberField; 

        /// <summary>
        /// testNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return testNumberSpecifiedField;
            } 
            set {
                testNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool testNumberSpecifiedField; 

        /// <summary>
        /// testTemperature property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("testTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return testTemperatureField;
            } 
            set {
                testTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure testTemperatureField; 

        /// <summary>
        /// bubblePointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("bubblePointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return bubblePointPressureField;
            } 
            set {
                if (value != null && RetrogradeDewPointPressureSpecified) throw new Exception("Cannot set property BubblePointPressure when property RetrogradeDewPointPressure is already set");
                bubblePointPressureField = value;
                BubblePointPressureSpecified = (value!=null);
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure bubblePointPressureField; 
        private bool bubblePointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if BubblePointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BubblePointPressureSpecified
        {
            get {
                return bubblePointPressureSpecified;
            }
            set {
                bubblePointPressureSpecified= value;
            }
        }

        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("retrogradeDewPointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure RetrogradeDewPointPressure {
            get {
                return retrogradeDewPointPressureField;
            } 
            set {
                if (value != null && BubblePointPressureSpecified) throw new Exception("Cannot set property RetrogradeDewPointPressure when property BubblePointPressure is already set");
                retrogradeDewPointPressureField = value;
                RetrogradeDewPointPressureSpecified = (value!=null);
                NotifyPropertyChanged("RetrogradeDewPointPressure");
            }
        }

        private PressureMeasure retrogradeDewPointPressureField; 
        private bool retrogradeDewPointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if RetrogradeDewPointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RetrogradeDewPointPressureSpecified
        {
            get {
                return retrogradeDewPointPressureSpecified;
            }
            set {
                retrogradeDewPointPressureSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType5? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType5? ItemElementNameField; 

        /// <summary>
        /// liquidDropoutReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultVolumeReference")]
		[XmlElement("liquidDropoutReference")]
        public FluidResultVolumeReference LiquidDropoutReference {
            get {
                return liquidDropoutReferenceField;
            } 
            set {
                liquidDropoutReferenceField = value;
                NotifyPropertyChanged("LiquidDropoutReference");
            }
        }

        private FluidResultVolumeReference liquidDropoutReferenceField; 

        /// <summary>
        /// cumulativeGasProducedReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumeMeasure")]
		[XmlElement("cumulativeGasProducedReference")]
        public StandardVolumeMeasure CumulativeGasProducedReference {
            get {
                return cumulativeGasProducedReferenceField;
            } 
            set {
                cumulativeGasProducedReferenceField = value;
                NotifyPropertyChanged("CumulativeGasProducedReference");
            }
        }

        private StandardVolumeMeasure cumulativeGasProducedReferenceField; 

        /// <summary>
        /// condensateYieldPressure1 property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("condensateYieldPressure1")]
        public PressureMeasure CondensateYieldPressure1 {
            get {
                return condensateYieldPressure1Field;
            } 
            set {
                condensateYieldPressure1Field = value;
                NotifyPropertyChanged("CondensateYieldPressure1");
            }
        }

        private PressureMeasure condensateYieldPressure1Field; 

        /// <summary>
        /// condensateYieldTemperature1 property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("condensateYieldTemperature1")]
        public ThermodynamicTemperatureMeasure CondensateYieldTemperature1 {
            get {
                return condensateYieldTemperature1Field;
            } 
            set {
                condensateYieldTemperature1Field = value;
                NotifyPropertyChanged("CondensateYieldTemperature1");
            }
        }

        private ThermodynamicTemperatureMeasure condensateYieldTemperature1Field; 

        /// <summary>
        /// condensateYieldPressure2 property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("condensateYieldPressure2")]
        public PressureMeasure CondensateYieldPressure2 {
            get {
                return condensateYieldPressure2Field;
            } 
            set {
                condensateYieldPressure2Field = value;
                NotifyPropertyChanged("CondensateYieldPressure2");
            }
        }

        private PressureMeasure condensateYieldPressure2Field; 

        /// <summary>
        /// condensateYieldTemperature2 property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("condensateYieldTemperature2")]
        public ThermodynamicTemperatureMeasure CondensateYieldTemperature2 {
            get {
                return condensateYieldTemperature2Field;
            } 
            set {
                condensateYieldTemperature2Field = value;
                NotifyPropertyChanged("CondensateYieldTemperature2");
            }
        }

        private ThermodynamicTemperatureMeasure condensateYieldTemperature2Field; 

        /// <summary>
        /// jcrvTestStep property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultJCurveTestStep")]
		[XmlElement("jcrvTestStep")]
        public List<FluidResultJCurveTestStep> JcrvTestStep {
            get {
                return jcrvTestStepField;
            } 
            set {
                jcrvTestStepField = value;
                NotifyPropertyChanged("JcrvTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if JcrvTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool JcrvTestStepSpecified
         {
             get {
             if(jcrvTestStepField!=null)
                 return jcrvTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultJCurveTestStep> jcrvTestStepField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultDifferentialLiberationTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultDifferentialLiberationTestStep", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultDifferentialLiberationTestStep xsd type.")]
    public partial class FluidResultDifferentialLiberationTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stepNumber property
        /// </summary>
		[Description("The stepNumber represents a row in the table.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("stepNumber")]
        public short? StepNumber {
            get {
                return stepNumberField;
            } 
            set {
                stepNumberField = value;
                 this.StepNumberSpecified = true;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private short? stepNumberField; 

        /// <summary>
        /// stepNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StepNumberSpecified {
            get {
                return stepNumberSpecifiedField;
            } 
            set {
                stepNumberSpecifiedField = value;
                NotifyPropertyChanged("StepNumberSpecified");
            }
        }

        private bool stepNumberSpecifiedField; 

        /// <summary>
        /// stepPressure property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("stepPressure")]
        public PressureMeasure StepPressure {
            get {
                return stepPressureField;
            } 
            set {
                stepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure stepPressureField; 

        /// <summary>
        /// oilMassDensity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("oilMassDensity")]
        public DensityMeasure OilMassDensity {
            get {
                return oilMassDensityField;
            } 
            set {
                oilMassDensityField = value;
                NotifyPropertyChanged("OilMassDensity");
            }
        }

        private DensityMeasure oilMassDensityField; 

        /// <summary>
        /// oilFormationVolumeFactorStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerStandardVolumeMeasure")]
		[XmlElement("oilFormationVolumeFactorStd")]
        public VolumePerStandardVolumeMeasure OilFormationVolumeFactorStd {
            get {
                return oilFormationVolumeFactorStdField;
            } 
            set {
                oilFormationVolumeFactorStdField = value;
                NotifyPropertyChanged("OilFormationVolumeFactorStd");
            }
        }

        private VolumePerStandardVolumeMeasure oilFormationVolumeFactorStdField; 

        /// <summary>
        /// oilCompressibility property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "compressibilityMeasure")]
		[XmlElement("oilCompressibility")]
        public CompressibilityMeasure OilCompressibility {
            get {
                return oilCompressibilityField;
            } 
            set {
                oilCompressibilityField = value;
                NotifyPropertyChanged("OilCompressibility");
            }
        }

        private CompressibilityMeasure oilCompressibilityField; 

        /// <summary>
        /// oilViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("oilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return oilViscosityField;
            } 
            set {
                oilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure oilViscosityField; 

        /// <summary>
        /// oilVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("oilVolume")]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
        public VolumeMeasure OilVolume {
            get {
                return oilVolumeField;
            } 
            set {
                if (value != null && OilShrinkageFactorSpecified) throw new Exception("Cannot set property OilVolume when property OilShrinkageFactor is already set");
                oilVolumeField = value;
                OilVolumeSpecified = (value!=null);
                NotifyPropertyChanged("OilVolume");
            }
        }

        private VolumeMeasure oilVolumeField; 
        private bool oilVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if OilVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OilVolumeSpecified
        {
            get {
                return oilVolumeSpecified;
            }
            set {
                oilVolumeSpecified= value;
            }
        }

        /// <summary>
        /// oilShrinkageFactor property
        /// </summary>
        [ComponentElement]
        [XmlElement("oilShrinkageFactor")]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
        public VolumePerVolumeMeasure OilShrinkageFactor {
            get {
                return oilShrinkageFactorField;
            } 
            set {
                if (value != null && OilVolumeSpecified) throw new Exception("Cannot set property OilShrinkageFactor when property OilVolume is already set");
                oilShrinkageFactorField = value;
                OilShrinkageFactorSpecified = (value!=null);
                NotifyPropertyChanged("OilShrinkageFactor");
            }
        }

        private VolumePerVolumeMeasure oilShrinkageFactorField; 
        private bool oilShrinkageFactorSpecified = false; 

        /// <summary>
        /// bool to indicate if OilShrinkageFactor has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool OilShrinkageFactorSpecified
        {
            get {
                return oilShrinkageFactorSpecified;
            }
            set {
                oilShrinkageFactorSpecified= value;
            }
        }


        /// <summary>
        /// gasMolecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasMolecularWeight")]
        public double? GasMolecularWeight {
            get {
                return gasMolecularWeightField;
            } 
            set {
                gasMolecularWeightField = value;
                 this.GasMolecularWeightSpecified = true;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private double? gasMolecularWeightField; 

        /// <summary>
        /// gasMolecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasMolecularWeightSpecified {
            get {
                return gasMolecularWeightSpecifiedField;
            } 
            set {
                gasMolecularWeightSpecifiedField = value;
                NotifyPropertyChanged("GasMolecularWeightSpecified");
            }
        }

        private bool gasMolecularWeightSpecifiedField; 

        /// <summary>
        /// gasGravity property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasGravity")]
        public double? GasGravity {
            get {
                return gasGravityField;
            } 
            set {
                gasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? gasGravityField; 

        /// <summary>
        /// gasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return gasGravitySpecifiedField;
            } 
            set {
                gasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool gasGravitySpecifiedField; 

        /// <summary>
        /// gasMassDensity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("gasMassDensity")]
        public DensityMeasure GasMassDensity {
            get {
                return gasMassDensityField;
            } 
            set {
                gasMassDensityField = value;
                NotifyPropertyChanged("GasMassDensity");
            }
        }

        private DensityMeasure gasMassDensityField; 

        /// <summary>
        /// gasFormationVolumeFactorStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerStandardVolumeMeasure")]
		[XmlElement("gasFormationVolumeFactorStd")]
        public VolumePerStandardVolumeMeasure GasFormationVolumeFactorStd {
            get {
                return gasFormationVolumeFactorStdField;
            } 
            set {
                gasFormationVolumeFactorStdField = value;
                NotifyPropertyChanged("GasFormationVolumeFactorStd");
            }
        }

        private VolumePerStandardVolumeMeasure gasFormationVolumeFactorStdField; 

        /// <summary>
        /// gasZFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasZFactor")]
        public double? GasZFactor {
            get {
                return gasZFactorField;
            } 
            set {
                gasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? gasZFactorField; 

        /// <summary>
        /// gasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return gasZFactorSpecifiedField;
            } 
            set {
                gasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool gasZFactorSpecifiedField; 

        /// <summary>
        /// gasViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("gasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return gasViscosityField;
            } 
            set {
                gasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure gasViscosityField; 

        /// <summary>
        /// totalFormationVolumeFactorStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerStandardVolumeMeasure")]
		[XmlElement("totalFormationVolumeFactorStd")]
        public VolumePerStandardVolumeMeasure TotalFormationVolumeFactorStd {
            get {
                return totalFormationVolumeFactorStdField;
            } 
            set {
                totalFormationVolumeFactorStdField = value;
                NotifyPropertyChanged("TotalFormationVolumeFactorStd");
            }
        }

        private VolumePerStandardVolumeMeasure totalFormationVolumeFactorStdField; 

        /// <summary>
        /// solutionGORStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
		[XmlElement("solutionGORStd")]
        public StandardVolumePerStandardVolumeMeasure SolutionGORStd {
            get {
                return solutionGORStdField;
            } 
            set {
                solutionGORStdField = value;
                NotifyPropertyChanged("SolutionGORStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure solutionGORStdField; 

        /// <summary>
        /// cumulativeStockTankGORStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
		[XmlElement("cumulativeStockTankGORStd")]
        public StandardVolumePerStandardVolumeMeasure CumulativeStockTankGORStd {
            get {
                return cumulativeStockTankGORStdField;
            } 
            set {
                cumulativeStockTankGORStdField = value;
                NotifyPropertyChanged("CumulativeStockTankGORStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure cumulativeStockTankGORStdField; 

        /// <summary>
        /// cumulativeSaturatedGORStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerVolumeMeasure")]
		[XmlElement("cumulativeSaturatedGORStd")]
        public StandardVolumePerVolumeMeasure CumulativeSaturatedGORStd {
            get {
                return cumulativeSaturatedGORStdField;
            } 
            set {
                cumulativeSaturatedGORStdField = value;
                NotifyPropertyChanged("CumulativeSaturatedGORStd");
            }
        }

        private StandardVolumePerVolumeMeasure cumulativeSaturatedGORStdField; 

        /// <summary>
        /// residualAPIGravity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("residualAPIGravity")]
        public DensityMeasure ResidualAPIGravity {
            get {
                return residualAPIGravityField;
            } 
            set {
                residualAPIGravityField = value;
                NotifyPropertyChanged("ResidualAPIGravity");
            }
        }

        private DensityMeasure residualAPIGravityField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// reservoir property
        /// </summary>
        [XmlElement("reservoir")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Reservoir {
            get {
                return reservoirField;
            } 
            set {
                reservoirField = value;
                ReservoirSpecified = (value!=null);
                NotifyPropertyChanged("Reservoir");
            }
        }

        private bool? reservoirField; 
        private bool reservoirSpecified = false; 

        /// <summary>
        /// bool to indicate if Reservoir has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ReservoirSpecified
        {
            get {
                return reservoirSpecified;
            }
            set {
                reservoirSpecified= value;
            }
        }

        /// <summary>
        /// saturated property
        /// </summary>
        [XmlElement("saturated")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Saturated {
            get {
                return saturatedField;
            } 
            set {
                saturatedField = value;
                SaturatedSpecified = (value!=null);
                NotifyPropertyChanged("Saturated");
            }
        }

        private bool? saturatedField; 
        private bool saturatedSpecified = false; 

        /// <summary>
        /// bool to indicate if Saturated has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SaturatedSpecified
        {
            get {
                return saturatedSpecified;
            }
            set {
                saturatedSpecified= value;
            }
        }

        /// <summary>
        /// stockTank property
        /// </summary>
        [ComponentElement]
        [XmlElement("stockTank")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultStockTank")]
        public FluidResultStockTank StockTank {
            get {
                return stockTankField;
            } 
            set {
                stockTankField = value;
                StockTankSpecified = (value!=null);
                NotifyPropertyChanged("StockTank");
            }
        }

        private FluidResultStockTank stockTankField; 
        private bool stockTankSpecified = false; 

        /// <summary>
        /// bool to indicate if StockTank has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StockTankSpecified
        {
            get {
                return stockTankSpecified;
            }
            set {
                stockTankSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType2> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType2> ItemsElementNameField; 

        /// <summary>
        /// vaporComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("vaporComposition")]
        public List<FluidResultPhaseComposition> VaporComposition {
            get {
                return vaporCompositionField;
            } 
            set {
                vaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(vaporCompositionField!=null)
                 return vaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> vaporCompositionField; 

        /// <summary>
        /// liquidComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("liquidComposition")]
        public List<FluidResultPhaseComposition> LiquidComposition {
            get {
                return liquidCompositionField;
            } 
            set {
                liquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidCompositionSpecified
         {
             get {
             if(liquidCompositionField!=null)
                 return liquidCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> liquidCompositionField; 

        /// <summary>
        /// compositeComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultCompositeComposition")]
		[XmlElement("compositeComposition")]
        public List<FluidResultCompositeComposition> CompositeComposition {
            get {
                return compositeCompositionField;
            } 
            set {
                compositeCompositionField = value;
                NotifyPropertyChanged("CompositeComposition");
            }
        }

         /// <summary>
         /// bool to indicate if CompositeComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CompositeCompositionSpecified
         {
             get {
             if(compositeCompositionField!=null)
                 return compositeCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultCompositeComposition> compositeCompositionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultDifferentialLiberationTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultDifferentialLiberationTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultDifferentialLiberationTest xsd type.")]
    public partial class FluidResultDifferentialLiberationTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// testNumber property
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("testNumber")]
        public short? TestNumber {
            get {
                return testNumberField;
            } 
            set {
                testNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private short? testNumberField; 

        /// <summary>
        /// testNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return testNumberSpecifiedField;
            } 
            set {
                testNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool testNumberSpecifiedField; 

        /// <summary>
        /// testTemperature property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("testTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return testTemperatureField;
            } 
            set {
                testTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure testTemperatureField; 

        /// <summary>
        /// bubblePointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("bubblePointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return bubblePointPressureField;
            } 
            set {
                if (value != null && RetrogradeDewPointPressureSpecified) throw new Exception("Cannot set property BubblePointPressure when property RetrogradeDewPointPressure is already set");
                bubblePointPressureField = value;
                BubblePointPressureSpecified = (value!=null);
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure bubblePointPressureField; 
        private bool bubblePointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if BubblePointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BubblePointPressureSpecified
        {
            get {
                return bubblePointPressureSpecified;
            }
            set {
                bubblePointPressureSpecified= value;
            }
        }

        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("retrogradeDewPointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure RetrogradeDewPointPressure {
            get {
                return retrogradeDewPointPressureField;
            } 
            set {
                if (value != null && BubblePointPressureSpecified) throw new Exception("Cannot set property RetrogradeDewPointPressure when property BubblePointPressure is already set");
                retrogradeDewPointPressureField = value;
                RetrogradeDewPointPressureSpecified = (value!=null);
                NotifyPropertyChanged("RetrogradeDewPointPressure");
            }
        }

        private PressureMeasure retrogradeDewPointPressureField; 
        private bool retrogradeDewPointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if RetrogradeDewPointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RetrogradeDewPointPressureSpecified
        {
            get {
                return retrogradeDewPointPressureSpecified;
            }
            set {
                retrogradeDewPointPressureSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType4? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType4? ItemElementNameField; 

        /// <summary>
        /// shrinkageReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultVolumeReference")]
		[XmlElement("shrinkageReference")]
        public FluidResultVolumeReference ShrinkageReference {
            get {
                return shrinkageReferenceField;
            } 
            set {
                shrinkageReferenceField = value;
                NotifyPropertyChanged("ShrinkageReference");
            }
        }

        private FluidResultVolumeReference shrinkageReferenceField; 

        /// <summary>
        /// dlTestStep property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultDifferentialLiberationTestStep")]
		[XmlElement("dlTestStep")]
        public List<FluidResultDifferentialLiberationTestStep> DLTestStep {
            get {
                return dlTestStepField;
            } 
            set {
                dlTestStepField = value;
                NotifyPropertyChanged("DLTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if DLTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DLTestStepSpecified
         {
             get {
             if(dlTestStepField!=null)
                 return dlTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultDifferentialLiberationTestStep> dlTestStepField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultCvdTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultCvdTestStep", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultCvdTestStep xsd type.")]
    public partial class FluidResultCvdTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stepNumber property
        /// </summary>
		[Description("The stepNumber represents a row in the table.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("stepNumber")]
        public short? StepNumber {
            get {
                return stepNumberField;
            } 
            set {
                stepNumberField = value;
                 this.StepNumberSpecified = true;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private short? stepNumberField; 

        /// <summary>
        /// stepNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StepNumberSpecified {
            get {
                return stepNumberSpecifiedField;
            } 
            set {
                stepNumberSpecifiedField = value;
                NotifyPropertyChanged("StepNumberSpecified");
            }
        }

        private bool stepNumberSpecifiedField; 

        /// <summary>
        /// stepPressure property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("stepPressure")]
        public PressureMeasure StepPressure {
            get {
                return stepPressureField;
            } 
            set {
                stepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure stepPressureField; 

        /// <summary>
        /// oilViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("oilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return oilViscosityField;
            } 
            set {
                oilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure oilViscosityField; 

        /// <summary>
        /// liquidVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("liquidVolume")]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
        public VolumeMeasure LiquidVolume {
            get {
                return liquidVolumeField;
            } 
            set {
                if (value != null && LiquidDropoutPercentSpecified) throw new Exception("Cannot set property LiquidVolume when property LiquidDropoutPercent is already set");
                liquidVolumeField = value;
                LiquidVolumeSpecified = (value!=null);
                NotifyPropertyChanged("LiquidVolume");
            }
        }

        private VolumeMeasure liquidVolumeField; 
        private bool liquidVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if LiquidVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LiquidVolumeSpecified
        {
            get {
                return liquidVolumeSpecified;
            }
            set {
                liquidVolumeSpecified= value;
            }
        }

        /// <summary>
        /// liquidDropoutPercent property
        /// </summary>
        [ComponentElement]
        [XmlElement("liquidDropoutPercent")]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
        public VolumePerVolumeMeasurePercent LiquidDropoutPercent {
            get {
                return liquidDropoutPercentField;
            } 
            set {
                if (value != null && LiquidVolumeSpecified) throw new Exception("Cannot set property LiquidDropoutPercent when property LiquidVolume is already set");
                liquidDropoutPercentField = value;
                LiquidDropoutPercentSpecified = (value!=null);
                NotifyPropertyChanged("LiquidDropoutPercent");
            }
        }

        private VolumePerVolumeMeasurePercent liquidDropoutPercentField; 
        private bool liquidDropoutPercentSpecified = false; 

        /// <summary>
        /// bool to indicate if LiquidDropoutPercent has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LiquidDropoutPercentSpecified
        {
            get {
                return liquidDropoutPercentSpecified;
            }
            set {
                liquidDropoutPercentSpecified= value;
            }
        }


        /// <summary>
        /// gasMolecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasMolecularWeight")]
        public double? GasMolecularWeight {
            get {
                return gasMolecularWeightField;
            } 
            set {
                gasMolecularWeightField = value;
                 this.GasMolecularWeightSpecified = true;
                NotifyPropertyChanged("GasMolecularWeight");
            }
        }

        private double? gasMolecularWeightField; 

        /// <summary>
        /// gasMolecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasMolecularWeightSpecified {
            get {
                return gasMolecularWeightSpecifiedField;
            } 
            set {
                gasMolecularWeightSpecifiedField = value;
                NotifyPropertyChanged("GasMolecularWeightSpecified");
            }
        }

        private bool gasMolecularWeightSpecifiedField; 

        /// <summary>
        /// gasGravity property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasGravity")]
        public double? GasGravity {
            get {
                return gasGravityField;
            } 
            set {
                gasGravityField = value;
                 this.GasGravitySpecified = true;
                NotifyPropertyChanged("GasGravity");
            }
        }

        private double? gasGravityField; 

        /// <summary>
        /// gasGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravitySpecified {
            get {
                return gasGravitySpecifiedField;
            } 
            set {
                gasGravitySpecifiedField = value;
                NotifyPropertyChanged("GasGravitySpecified");
            }
        }

        private bool gasGravitySpecifiedField; 

        /// <summary>
        /// gasFormationVolumeFactorStd property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerStandardVolumeMeasure")]
		[XmlElement("gasFormationVolumeFactorStd")]
        public VolumePerStandardVolumeMeasure GasFormationVolumeFactorStd {
            get {
                return gasFormationVolumeFactorStdField;
            } 
            set {
                gasFormationVolumeFactorStdField = value;
                NotifyPropertyChanged("GasFormationVolumeFactorStd");
            }
        }

        private VolumePerStandardVolumeMeasure gasFormationVolumeFactorStdField; 

        /// <summary>
        /// gasZFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasZFactor")]
        public double? GasZFactor {
            get {
                return gasZFactorField;
            } 
            set {
                gasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? gasZFactorField; 

        /// <summary>
        /// gasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return gasZFactorSpecifiedField;
            } 
            set {
                gasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool gasZFactorSpecifiedField; 

        /// <summary>
        /// gasViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("gasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return gasViscosityField;
            } 
            set {
                gasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure gasViscosityField; 

        /// <summary>
        /// cumulativeGasProducedVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("cumulativeGasProducedVolume")]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumeMeasure")]
        public StandardVolumeMeasure CumulativeGasProducedVolume {
            get {
                return cumulativeGasProducedVolumeField;
            } 
            set {
                if (value != null && CumulativeGasProducedRatioStdSpecified) throw new Exception("Cannot set property CumulativeGasProducedVolume when property CumulativeGasProducedRatioStd is already set");
                cumulativeGasProducedVolumeField = value;
                CumulativeGasProducedVolumeSpecified = (value!=null);
                NotifyPropertyChanged("CumulativeGasProducedVolume");
            }
        }

        private StandardVolumeMeasure cumulativeGasProducedVolumeField; 
        private bool cumulativeGasProducedVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if CumulativeGasProducedVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CumulativeGasProducedVolumeSpecified
        {
            get {
                return cumulativeGasProducedVolumeSpecified;
            }
            set {
                cumulativeGasProducedVolumeSpecified= value;
            }
        }

        /// <summary>
        /// cumulativeGasProducedRatioStd property
        /// </summary>
        [ComponentElement]
        [XmlElement("cumulativeGasProducedRatioStd")]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
        public StandardVolumePerStandardVolumeMeasure CumulativeGasProducedRatioStd {
            get {
                return cumulativeGasProducedRatioStdField;
            } 
            set {
                if (value != null && CumulativeGasProducedVolumeSpecified) throw new Exception("Cannot set property CumulativeGasProducedRatioStd when property CumulativeGasProducedVolume is already set");
                cumulativeGasProducedRatioStdField = value;
                CumulativeGasProducedRatioStdSpecified = (value!=null);
                NotifyPropertyChanged("CumulativeGasProducedRatioStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure cumulativeGasProducedRatioStdField; 
        private bool cumulativeGasProducedRatioStdSpecified = false; 

        /// <summary>
        /// bool to indicate if CumulativeGasProducedRatioStd has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool CumulativeGasProducedRatioStdSpecified
        {
            get {
                return cumulativeGasProducedRatioStdSpecified;
            }
            set {
                cumulativeGasProducedRatioStdSpecified= value;
            }
        }


        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// reservoir property
        /// </summary>
        [XmlElement("reservoir")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Reservoir {
            get {
                return reservoirField;
            } 
            set {
                reservoirField = value;
                ReservoirSpecified = (value!=null);
                NotifyPropertyChanged("Reservoir");
            }
        }

        private bool? reservoirField; 
        private bool reservoirSpecified = false; 

        /// <summary>
        /// bool to indicate if Reservoir has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ReservoirSpecified
        {
            get {
                return reservoirSpecified;
            }
            set {
                reservoirSpecified= value;
            }
        }

        /// <summary>
        /// saturated property
        /// </summary>
        [XmlElement("saturated")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Saturated {
            get {
                return saturatedField;
            } 
            set {
                saturatedField = value;
                SaturatedSpecified = (value!=null);
                NotifyPropertyChanged("Saturated");
            }
        }

        private bool? saturatedField; 
        private bool saturatedSpecified = false; 

        /// <summary>
        /// bool to indicate if Saturated has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SaturatedSpecified
        {
            get {
                return saturatedSpecified;
            }
            set {
                saturatedSpecified= value;
            }
        }

        /// <summary>
        /// stockTank property
        /// </summary>
        [ComponentElement]
        [XmlElement("stockTank")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultStockTank")]
        public FluidResultStockTank StockTank {
            get {
                return stockTankField;
            } 
            set {
                stockTankField = value;
                StockTankSpecified = (value!=null);
                NotifyPropertyChanged("StockTank");
            }
        }

        private FluidResultStockTank stockTankField; 
        private bool stockTankSpecified = false; 

        /// <summary>
        /// bool to indicate if StockTank has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StockTankSpecified
        {
            get {
                return stockTankSpecified;
            }
            set {
                stockTankSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType1> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType1> ItemsElementNameField; 

        /// <summary>
        /// vaporComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("vaporComposition")]
        public List<FluidResultPhaseComposition> VaporComposition {
            get {
                return vaporCompositionField;
            } 
            set {
                vaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(vaporCompositionField!=null)
                 return vaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> vaporCompositionField; 

        /// <summary>
        /// liquidComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("liquidComposition")]
        public List<FluidResultPhaseComposition> LiquidComposition {
            get {
                return liquidCompositionField;
            } 
            set {
                liquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidCompositionSpecified
         {
             get {
             if(liquidCompositionField!=null)
                 return liquidCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> liquidCompositionField; 

        /// <summary>
        /// compositeComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultCompositeComposition")]
		[XmlElement("compositeComposition")]
        public List<FluidResultCompositeComposition> CompositeComposition {
            get {
                return compositeCompositionField;
            } 
            set {
                compositeCompositionField = value;
                NotifyPropertyChanged("CompositeComposition");
            }
        }

         /// <summary>
         /// bool to indicate if CompositeComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CompositeCompositionSpecified
         {
             get {
             if(compositeCompositionField!=null)
                 return compositeCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultCompositeComposition> compositeCompositionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultConstantVolumeDepletionTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultConstantVolumeDepletionTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultConstantVolumeDepletionTest xsd type.")]
    public partial class FluidResultConstantVolumeDepletionTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// testNumber property
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("testNumber")]
        public short? TestNumber {
            get {
                return testNumberField;
            } 
            set {
                testNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private short? testNumberField; 

        /// <summary>
        /// testNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return testNumberSpecifiedField;
            } 
            set {
                testNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool testNumberSpecifiedField; 

        /// <summary>
        /// testTemperature property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("testTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return testTemperatureField;
            } 
            set {
                testTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure testTemperatureField; 

        /// <summary>
        /// bubblePointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("bubblePointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return bubblePointPressureField;
            } 
            set {
                if (value != null && RetrogradeDewPointPressureSpecified) throw new Exception("Cannot set property BubblePointPressure when property RetrogradeDewPointPressure is already set");
                bubblePointPressureField = value;
                BubblePointPressureSpecified = (value!=null);
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure bubblePointPressureField; 
        private bool bubblePointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if BubblePointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BubblePointPressureSpecified
        {
            get {
                return bubblePointPressureSpecified;
            }
            set {
                bubblePointPressureSpecified= value;
            }
        }

        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("retrogradeDewPointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure RetrogradeDewPointPressure {
            get {
                return retrogradeDewPointPressureField;
            } 
            set {
                if (value != null && BubblePointPressureSpecified) throw new Exception("Cannot set property RetrogradeDewPointPressure when property BubblePointPressure is already set");
                retrogradeDewPointPressureField = value;
                RetrogradeDewPointPressureSpecified = (value!=null);
                NotifyPropertyChanged("RetrogradeDewPointPressure");
            }
        }

        private PressureMeasure retrogradeDewPointPressureField; 
        private bool retrogradeDewPointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if RetrogradeDewPointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RetrogradeDewPointPressureSpecified
        {
            get {
                return retrogradeDewPointPressureSpecified;
            }
            set {
                retrogradeDewPointPressureSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType3? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType3? ItemElementNameField; 

        /// <summary>
        /// liquidDropoutReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultVolumeReference")]
		[XmlElement("liquidDropoutReference")]
        public FluidResultVolumeReference LiquidDropoutReference {
            get {
                return liquidDropoutReferenceField;
            } 
            set {
                liquidDropoutReferenceField = value;
                NotifyPropertyChanged("LiquidDropoutReference");
            }
        }

        private FluidResultVolumeReference liquidDropoutReferenceField; 

        /// <summary>
        /// cumulativeGasProducedReferenceStd property
        /// </summary>
		[Description("The volume is corrected to standard conditions of temperature and pressure.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumeMeasure")]
		[XmlElement("cumulativeGasProducedReferenceStd")]
        public StandardVolumeMeasure CumulativeGasProducedReferenceStd {
            get {
                return cumulativeGasProducedReferenceStdField;
            } 
            set {
                cumulativeGasProducedReferenceStdField = value;
                NotifyPropertyChanged("CumulativeGasProducedReferenceStd");
            }
        }

        private StandardVolumeMeasure cumulativeGasProducedReferenceStdField; 

        /// <summary>
        /// cvdTestStep property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultCvdTestStep")]
		[XmlElement("cvdTestStep")]
        public List<FluidResultCvdTestStep> CvdTestStep {
            get {
                return cvdTestStepField;
            } 
            set {
                cvdTestStepField = value;
                NotifyPropertyChanged("CvdTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if CvdTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CvdTestStepSpecified
         {
             get {
             if(cvdTestStepField!=null)
                 return cvdTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultCvdTestStep> cvdTestStepField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultCceTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultCceTestStep", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultCceTestStep xsd type.")]
    public partial class FluidResultCceTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stepNumber property
        /// </summary>
		[Description("The stepNumber represents a row in the table.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("stepNumber")]
        public short? StepNumber {
            get {
                return stepNumberField;
            } 
            set {
                stepNumberField = value;
                 this.StepNumberSpecified = true;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private short? stepNumberField; 

        /// <summary>
        /// stepNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StepNumberSpecified {
            get {
                return stepNumberSpecifiedField;
            } 
            set {
                stepNumberSpecifiedField = value;
                NotifyPropertyChanged("StepNumberSpecified");
            }
        }

        private bool stepNumberSpecifiedField; 

        /// <summary>
        /// stepPressure property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("stepPressure")]
        public PressureMeasure StepPressure {
            get {
                return stepPressureField;
            } 
            set {
                stepPressureField = value;
                NotifyPropertyChanged("StepPressure");
            }
        }

        private PressureMeasure stepPressureField; 

        /// <summary>
        /// oilMassDensity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("oilMassDensity")]
        public DensityMeasure OilMassDensity {
            get {
                return oilMassDensityField;
            } 
            set {
                oilMassDensityField = value;
                NotifyPropertyChanged("OilMassDensity");
            }
        }

        private DensityMeasure oilMassDensityField; 

        /// <summary>
        /// oilCompressibility property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "compressibilityMeasure")]
		[XmlElement("oilCompressibility")]
        public CompressibilityMeasure OilCompressibility {
            get {
                return oilCompressibilityField;
            } 
            set {
                oilCompressibilityField = value;
                NotifyPropertyChanged("OilCompressibility");
            }
        }

        private CompressibilityMeasure oilCompressibilityField; 

        /// <summary>
        /// oilViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("oilViscosity")]
        public DynamicViscosityMeasure OilViscosity {
            get {
                return oilViscosityField;
            } 
            set {
                oilViscosityField = value;
                NotifyPropertyChanged("OilViscosity");
            }
        }

        private DynamicViscosityMeasure oilViscosityField; 

        /// <summary>
        /// totalVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("totalVolume")]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
        public VolumeMeasure TotalVolume {
            get {
                return totalVolumeField;
            } 
            set {
                if (value != null && LiquidDropoutPercentSpecified) throw new Exception("Cannot set property TotalVolume when property LiquidDropoutPercent is already set");
                totalVolumeField = value;
                TotalVolumeSpecified = (value!=null);
                NotifyPropertyChanged("TotalVolume");
            }
        }

        private VolumeMeasure totalVolumeField; 
        private bool totalVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if TotalVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TotalVolumeSpecified
        {
            get {
                return totalVolumeSpecified;
            }
            set {
                totalVolumeSpecified= value;
            }
        }

        /// <summary>
        /// liquidVolume property
        /// </summary>
        [ComponentElement]
        [XmlElement("liquidVolume")]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
        public VolumeMeasure LiquidVolume {
            get {
                return liquidVolumeField;
            } 
            set {
                if (value != null && LiquidDropoutPercentSpecified) throw new Exception("Cannot set property LiquidVolume when property LiquidDropoutPercent is already set");
                liquidVolumeField = value;
                LiquidVolumeSpecified = (value!=null);
                NotifyPropertyChanged("LiquidVolume");
            }
        }

        private VolumeMeasure liquidVolumeField; 
        private bool liquidVolumeSpecified = false; 

        /// <summary>
        /// bool to indicate if LiquidVolume has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LiquidVolumeSpecified
        {
            get {
                return liquidVolumeSpecified;
            }
            set {
                liquidVolumeSpecified= value;
            }
        }

        /// <summary>
        /// liquidDropoutPercent property
        /// </summary>
        [ComponentElement]
        [XmlElement("liquidDropoutPercent")]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasurePercent")]
        public VolumePerVolumeMeasurePercent LiquidDropoutPercent {
            get {
                return liquidDropoutPercentField;
            } 
            set {
                if (value != null && LiquidVolumeSpecified) throw new Exception("Cannot set property LiquidDropoutPercent when property LiquidVolume is already set");
                if (value != null && TotalVolumeSpecified) throw new Exception("Cannot set property LiquidDropoutPercent when property TotalVolume is already set");
                liquidDropoutPercentField = value;
                LiquidDropoutPercentSpecified = (value!=null);
                NotifyPropertyChanged("LiquidDropoutPercent");
            }
        }

        private VolumePerVolumeMeasurePercent liquidDropoutPercentField; 
        private bool liquidDropoutPercentSpecified = false; 

        /// <summary>
        /// bool to indicate if LiquidDropoutPercent has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LiquidDropoutPercentSpecified
        {
            get {
                return liquidDropoutPercentSpecified;
            }
            set {
                liquidDropoutPercentSpecified= value;
            }
        }


        /// <summary>
        /// ItemsElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<ItemsChoiceType> ItemsElementName {
            get {
                return ItemsElementNameField;
            } 
            set {
                ItemsElementNameField = value;
                NotifyPropertyChanged("ItemsElementName");
            }
        }

         /// <summary>
         /// bool to indicate if ItemsElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ItemsElementNameSpecified
         {
             get {
             if(ItemsElementNameField!=null)
                 return ItemsElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<ItemsChoiceType> ItemsElementNameField; 

        /// <summary>
        /// relativeVolumeRatio property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumePerVolumeMeasure")]
		[XmlElement("relativeVolumeRatio")]
        public VolumePerVolumeMeasure RelativeVolumeRatio {
            get {
                return relativeVolumeRatioField;
            } 
            set {
                relativeVolumeRatioField = value;
                NotifyPropertyChanged("RelativeVolumeRatio");
            }
        }

        private VolumePerVolumeMeasure relativeVolumeRatioField; 

        /// <summary>
        /// gasMassDensity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("gasMassDensity")]
        public DensityMeasure GasMassDensity {
            get {
                return gasMassDensityField;
            } 
            set {
                gasMassDensityField = value;
                NotifyPropertyChanged("GasMassDensity");
            }
        }

        private DensityMeasure gasMassDensityField; 

        /// <summary>
        /// gasZFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasZFactor")]
        public double? GasZFactor {
            get {
                return gasZFactorField;
            } 
            set {
                gasZFactorField = value;
                 this.GasZFactorSpecified = true;
                NotifyPropertyChanged("GasZFactor");
            }
        }

        private double? gasZFactorField; 

        /// <summary>
        /// gasZFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasZFactorSpecified {
            get {
                return gasZFactorSpecifiedField;
            } 
            set {
                gasZFactorSpecifiedField = value;
                NotifyPropertyChanged("GasZFactorSpecified");
            }
        }

        private bool gasZFactorSpecifiedField; 

        /// <summary>
        /// gasCompressibility property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "compressibilityMeasure")]
		[XmlElement("gasCompressibility")]
        public CompressibilityMeasure GasCompressibility {
            get {
                return gasCompressibilityField;
            } 
            set {
                gasCompressibilityField = value;
                NotifyPropertyChanged("GasCompressibility");
            }
        }

        private CompressibilityMeasure gasCompressibilityField; 

        /// <summary>
        /// gasViscosity property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dynamicViscosityMeasure")]
		[XmlElement("gasViscosity")]
        public DynamicViscosityMeasure GasViscosity {
            get {
                return gasViscosityField;
            } 
            set {
                gasViscosityField = value;
                NotifyPropertyChanged("GasViscosity");
            }
        }

        private DynamicViscosityMeasure gasViscosityField; 

        /// <summary>
        /// yFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("yFactor")]
        public double? YFactor {
            get {
                return yFactorField;
            } 
            set {
                yFactorField = value;
                 this.YFactorSpecified = true;
                NotifyPropertyChanged("YFactor");
            }
        }

        private double? yFactorField; 

        /// <summary>
        /// yFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool YFactorSpecified {
            get {
                return yFactorSpecifiedField;
            } 
            set {
                yFactorSpecifiedField = value;
                NotifyPropertyChanged("YFactorSpecified");
            }
        }

        private bool yFactorSpecifiedField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// reservoir property
        /// </summary>
        [XmlElement("reservoir")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Reservoir {
            get {
                return reservoirField;
            } 
            set {
                reservoirField = value;
                ReservoirSpecified = (value!=null);
                NotifyPropertyChanged("Reservoir");
            }
        }

        private bool? reservoirField; 
        private bool reservoirSpecified = false; 

        /// <summary>
        /// bool to indicate if Reservoir has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ReservoirSpecified
        {
            get {
                return reservoirSpecified;
            }
            set {
                reservoirSpecified= value;
            }
        }

        /// <summary>
        /// saturated property
        /// </summary>
        [XmlElement("saturated")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
        public bool? Saturated {
            get {
                return saturatedField;
            } 
            set {
                saturatedField = value;
                SaturatedSpecified = (value!=null);
                NotifyPropertyChanged("Saturated");
            }
        }

        private bool? saturatedField; 
        private bool saturatedSpecified = false; 

        /// <summary>
        /// bool to indicate if Saturated has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SaturatedSpecified
        {
            get {
                return saturatedSpecified;
            }
            set {
                saturatedSpecified= value;
            }
        }

        /// <summary>
        /// stockTank property
        /// </summary>
        [ComponentElement]
        [XmlElement("stockTank")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultStockTank")]
        public FluidResultStockTank StockTank {
            get {
                return stockTankField;
            } 
            set {
                stockTankField = value;
                StockTankSpecified = (value!=null);
                NotifyPropertyChanged("StockTank");
            }
        }

        private FluidResultStockTank stockTankField; 
        private bool stockTankSpecified = false; 

        /// <summary>
        /// bool to indicate if StockTank has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool StockTankSpecified
        {
            get {
                return stockTankSpecified;
            }
            set {
                stockTankSpecified= value;
            }
        }


        /// <summary>
        /// Items1ElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public List<Items1ChoiceType> Items1ElementName {
            get {
                return Items1ElementNameField;
            } 
            set {
                Items1ElementNameField = value;
                NotifyPropertyChanged("Items1ElementName");
            }
        }

         /// <summary>
         /// bool to indicate if Items1ElementName has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool Items1ElementNameSpecified
         {
             get {
             if(Items1ElementNameField!=null)
                 return Items1ElementNameField.Count>0?true:false;
             else return false;
             }
         }
        private List<Items1ChoiceType> Items1ElementNameField; 

        /// <summary>
        /// vaporComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("vaporComposition")]
        public List<FluidResultPhaseComposition> VaporComposition {
            get {
                return vaporCompositionField;
            } 
            set {
                vaporCompositionField = value;
                NotifyPropertyChanged("VaporComposition");
            }
        }

         /// <summary>
         /// bool to indicate if VaporComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool VaporCompositionSpecified
         {
             get {
             if(vaporCompositionField!=null)
                 return vaporCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> vaporCompositionField; 

        /// <summary>
        /// liquidComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultPhaseComposition")]
		[XmlElement("liquidComposition")]
        public List<FluidResultPhaseComposition> LiquidComposition {
            get {
                return liquidCompositionField;
            } 
            set {
                liquidCompositionField = value;
                NotifyPropertyChanged("LiquidComposition");
            }
        }

         /// <summary>
         /// bool to indicate if LiquidComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool LiquidCompositionSpecified
         {
             get {
             if(liquidCompositionField!=null)
                 return liquidCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultPhaseComposition> liquidCompositionField; 

        /// <summary>
        /// compositeComposition property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultCompositeComposition")]
		[XmlElement("compositeComposition")]
        public List<FluidResultCompositeComposition> CompositeComposition {
            get {
                return compositeCompositionField;
            } 
            set {
                compositeCompositionField = value;
                NotifyPropertyChanged("CompositeComposition");
            }
        }

         /// <summary>
         /// bool to indicate if CompositeComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CompositeCompositionSpecified
         {
             get {
             if(compositeCompositionField!=null)
                 return compositeCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultCompositeComposition> compositeCompositionField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultConstantCompositionExpansionTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultConstantCompositionExpansionTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultConstantCompositionExpansionTest xsd type.")]
    public partial class FluidResultConstantCompositionExpansionTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// testNumber property
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("testNumber")]
        public short? TestNumber {
            get {
                return testNumberField;
            } 
            set {
                testNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private short? testNumberField; 

        /// <summary>
        /// testNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return testNumberSpecifiedField;
            } 
            set {
                testNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool testNumberSpecifiedField; 

        /// <summary>
        /// testTemperature property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("testTemperature")]
        public ThermodynamicTemperatureMeasure TestTemperature {
            get {
                return testTemperatureField;
            } 
            set {
                testTemperatureField = value;
                NotifyPropertyChanged("TestTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure testTemperatureField; 

        /// <summary>
        /// bubblePointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("bubblePointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return bubblePointPressureField;
            } 
            set {
                if (value != null && RetrogradeDewPointPressureSpecified) throw new Exception("Cannot set property BubblePointPressure when property RetrogradeDewPointPressure is already set");
                bubblePointPressureField = value;
                BubblePointPressureSpecified = (value!=null);
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure bubblePointPressureField; 
        private bool bubblePointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if BubblePointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BubblePointPressureSpecified
        {
            get {
                return bubblePointPressureSpecified;
            }
            set {
                bubblePointPressureSpecified= value;
            }
        }

        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("retrogradeDewPointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure RetrogradeDewPointPressure {
            get {
                return retrogradeDewPointPressureField;
            } 
            set {
                if (value != null && BubblePointPressureSpecified) throw new Exception("Cannot set property RetrogradeDewPointPressure when property BubblePointPressure is already set");
                retrogradeDewPointPressureField = value;
                RetrogradeDewPointPressureSpecified = (value!=null);
                NotifyPropertyChanged("RetrogradeDewPointPressure");
            }
        }

        private PressureMeasure retrogradeDewPointPressureField; 
        private bool retrogradeDewPointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if RetrogradeDewPointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RetrogradeDewPointPressureSpecified
        {
            get {
                return retrogradeDewPointPressureSpecified;
            }
            set {
                retrogradeDewPointPressureSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType2? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType2? ItemElementNameField; 

        /// <summary>
        /// liquidDropoutReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultVolumeReference")]
		[XmlElement("liquidDropoutReference")]
        public FluidResultVolumeReference LiquidDropoutReference {
            get {
                return liquidDropoutReferenceField;
            } 
            set {
                liquidDropoutReferenceField = value;
                NotifyPropertyChanged("LiquidDropoutReference");
            }
        }

        private FluidResultVolumeReference liquidDropoutReferenceField; 

        /// <summary>
        /// relativeVolumeReference property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultVolumeReference")]
		[XmlElement("relativeVolumeReference")]
        public FluidResultVolumeReference RelativeVolumeReference {
            get {
                return relativeVolumeReferenceField;
            } 
            set {
                relativeVolumeReferenceField = value;
                NotifyPropertyChanged("RelativeVolumeReference");
            }
        }

        private FluidResultVolumeReference relativeVolumeReferenceField; 

        /// <summary>
        /// cceTestStep property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultCceTestStep")]
		[XmlElement("cceTestStep")]
        public List<FluidResultCceTestStep> CceTestStep {
            get {
                return cceTestStepField;
            } 
            set {
                cceTestStepField = value;
                NotifyPropertyChanged("CceTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if CceTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CceTestStepSpecified
         {
             get {
             if(cceTestStepField!=null)
                 return cceTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultCceTestStep> cceTestStepField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultSaturationTestStep xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultSaturationTestStep", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultSaturationTestStep xsd type.")]
    public partial class FluidResultSaturationTestStep : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// stepNumber property
        /// </summary>
		[Description("The stepNumber represents a row in the table.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("stepNumber")]
        public short? StepNumber {
            get {
                return stepNumberField;
            } 
            set {
                stepNumberField = value;
                 this.StepNumberSpecified = true;
                NotifyPropertyChanged("StepNumber");
            }
        }

        private short? stepNumberField; 

        /// <summary>
        /// stepNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool StepNumberSpecified {
            get {
                return stepNumberSpecifiedField;
            } 
            set {
                stepNumberSpecifiedField = value;
                NotifyPropertyChanged("StepNumberSpecified");
            }
        }

        private bool stepNumberSpecifiedField; 

        /// <summary>
        /// stepTemperature property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("stepTemperature")]
        public ThermodynamicTemperatureMeasure StepTemperature {
            get {
                return stepTemperatureField;
            } 
            set {
                stepTemperatureField = value;
                NotifyPropertyChanged("StepTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure stepTemperatureField; 

        /// <summary>
        /// bubblePointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("bubblePointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure BubblePointPressure {
            get {
                return bubblePointPressureField;
            } 
            set {
                if (value != null && RetrogradeDewPointPressureSpecified) throw new Exception("Cannot set property BubblePointPressure when property RetrogradeDewPointPressure is already set");
                bubblePointPressureField = value;
                BubblePointPressureSpecified = (value!=null);
                NotifyPropertyChanged("BubblePointPressure");
            }
        }

        private PressureMeasure bubblePointPressureField; 
        private bool bubblePointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if BubblePointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool BubblePointPressureSpecified
        {
            get {
                return bubblePointPressureSpecified;
            }
            set {
                bubblePointPressureSpecified= value;
            }
        }

        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
        [ComponentElement]
        [XmlElement("retrogradeDewPointPressure")]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
        public PressureMeasure RetrogradeDewPointPressure {
            get {
                return retrogradeDewPointPressureField;
            } 
            set {
                if (value != null && BubblePointPressureSpecified) throw new Exception("Cannot set property RetrogradeDewPointPressure when property BubblePointPressure is already set");
                retrogradeDewPointPressureField = value;
                RetrogradeDewPointPressureSpecified = (value!=null);
                NotifyPropertyChanged("RetrogradeDewPointPressure");
            }
        }

        private PressureMeasure retrogradeDewPointPressureField; 
        private bool retrogradeDewPointPressureSpecified = false; 

        /// <summary>
        /// bool to indicate if RetrogradeDewPointPressure has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool RetrogradeDewPointPressureSpecified
        {
            get {
                return retrogradeDewPointPressureSpecified;
            }
            set {
                retrogradeDewPointPressureSpecified= value;
            }
        }


        /// <summary>
        /// ItemElementName property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public ItemChoiceType1? ItemElementName {
            get {
                return ItemElementNameField;
            } 
            set {
                ItemElementNameField = value;
                 this.ItemElementNameSpecified = true;
                NotifyPropertyChanged("ItemElementName");
            }
        }

        
        private bool ItemElementNameSpecifiedField = false;
        
        /// <summary>
        /// ItemElementNameSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ItemElementNameSpecified {
            get {
                return ItemElementNameSpecifiedField;
            } 
            set {
                ItemElementNameSpecifiedField = value;
                NotifyPropertyChanged("ItemElementNameSpecified");
            }
        }
        
        private ItemChoiceType1? ItemElementNameField; 

        /// <summary>
        /// dewPointPressure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("dewPointPressure")]
        public PressureMeasure DewPointPressure {
            get {
                return dewPointPressureField;
            } 
            set {
                dewPointPressureField = value;
                NotifyPropertyChanged("DewPointPressure");
            }
        }

        private PressureMeasure dewPointPressureField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultSaturationTest xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultSaturationTest", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultSaturationTest xsd type.")]
    public partial class FluidResultSaturationTest : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// testNumber property
        /// </summary>
		[Description("xxxxxxxxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("testNumber")]
        public short? TestNumber {
            get {
                return testNumberField;
            } 
            set {
                testNumberField = value;
                 this.TestNumberSpecified = true;
                NotifyPropertyChanged("TestNumber");
            }
        }

        private short? testNumberField; 

        /// <summary>
        /// testNumberSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TestNumberSpecified {
            get {
                return testNumberSpecifiedField;
            } 
            set {
                testNumberSpecifiedField = value;
                NotifyPropertyChanged("TestNumberSpecified");
            }
        }

        private bool testNumberSpecifiedField; 

        /// <summary>
        /// saturationTestStep property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultSaturationTestStep")]
		[XmlElement("saturationTestStep")]
        public List<FluidResultSaturationTestStep> SaturationTestStep {
            get {
                return saturationTestStepField;
            } 
            set {
                saturationTestStepField = value;
                NotifyPropertyChanged("SaturationTestStep");
            }
        }

         /// <summary>
         /// bool to indicate if SaturationTestStep has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SaturationTestStepSpecified
         {
             get {
             if(saturationTestStepField!=null)
                 return saturationTestStepField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultSaturationTestStep> saturationTestStepField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the binaryInteractionCoefficient xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="binaryInteractionCoefficient", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the binaryInteractionCoefficient xsd type.")]
    public partial class BinaryInteractionCoefficient : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the BinaryInteractionCoefficient class.
        /// </summary>
        public BinaryInteractionCoefficient() {}

        /// <summary>
        /// Initializes a new instance of the BinaryInteractionCoefficient class.
        /// </summary>
        /// <param name="value">Initial value</param>
        public BinaryInteractionCoefficient(double value)
        {
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value.ToString();
        }

		/// <summary>
        /// referenceComponent property
        /// </summary>
		[Required]
        [StringLength(40)]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        [XmlAttribute("referenceComponent")]
		
        public string ReferenceComponent {
            get {
                return referenceComponentField;
            } 
            set {
                referenceComponentField = value;
                NotifyPropertyChanged("ReferenceComponent");
            }
        }

        private string referenceComponentField; 

        /// <summary>
        /// Value property
        /// </summary>
        
        [XmlText]
        public double Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private double ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultComposition xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultComposition", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultComposition xsd type.")]
    public partial class FluidResultComposition : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// isPrimary property
        /// </summary>
		[Required]
        [Description("True (\"true\" or \"1\") indicates that the component is the  primary component in the composition.  False (\"false\" or \"0\") or not given indicates that this is not a primary component.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("isPrimary")]
        public bool? IsPrimary {
            get {
                return isPrimaryField;
            } 
            set {
                isPrimaryField = value;
                NotifyPropertyChanged("IsPrimary");
            }
        }

        private bool? isPrimaryField; 

        /// <summary>
        /// componentName property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("componentName")]
        public string ComponentName {
            get {
                return componentNameField;
            } 
            set {
                componentNameField = value;
                NotifyPropertyChanged("ComponentName");
            }
        }

        private string componentNameField; 

        /// <summary>
        /// componentBaseKind property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "FluidComponent")]
		[XmlElement("componentBaseKind")]
        public FluidComponent ComponentBaseKind {
            get {
                return componentBaseKindField;
            } 
            set {
                componentBaseKindField = value;
                 this.ComponentBaseKindSpecified = true;
                NotifyPropertyChanged("ComponentBaseKind");
            }
        }

        private FluidComponent componentBaseKindField; 

        /// <summary>
        /// componentBaseKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ComponentBaseKindSpecified {
            get {
                return componentBaseKindSpecifiedField;
            } 
            set {
                componentBaseKindSpecifiedField = value;
                NotifyPropertyChanged("ComponentBaseKindSpecified");
            }
        }

        private bool componentBaseKindSpecifiedField; 

        /// <summary>
        /// componentKind property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "FluidComponentKind")]
		[XmlElement("componentKind")]
        public FluidComponentKind ComponentKind {
            get {
                return componentKindField;
            } 
            set {
                componentKindField = value;
                 this.ComponentKindSpecified = true;
                NotifyPropertyChanged("ComponentKind");
            }
        }

        private FluidComponentKind componentKindField; 

        /// <summary>
        /// componentKindSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ComponentKindSpecified {
            get {
                return componentKindSpecifiedField;
            } 
            set {
                componentKindSpecifiedField = value;
                NotifyPropertyChanged("ComponentKindSpecified");
            }
        }

        private bool componentKindSpecifiedField; 

        /// <summary>
        /// molecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("molecularWeight")]
        public double? MolecularWeight {
            get {
                return molecularWeightField;
            } 
            set {
                molecularWeightField = value;
                 this.MolecularWeightSpecified = true;
                NotifyPropertyChanged("MolecularWeight");
            }
        }

        private double? molecularWeightField; 

        /// <summary>
        /// molecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MolecularWeightSpecified {
            get {
                return molecularWeightSpecifiedField;
            } 
            set {
                molecularWeightSpecifiedField = value;
                NotifyPropertyChanged("MolecularWeightSpecified");
            }
        }

        private bool molecularWeightSpecifiedField; 

        /// <summary>
        /// weightPercent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("weightPercent")]
        public MassConcentrationMeasurePercent WeightPercent {
            get {
                return weightPercentField;
            } 
            set {
                weightPercentField = value;
                NotifyPropertyChanged("WeightPercent");
            }
        }

        private MassConcentrationMeasurePercent weightPercentField; 

        /// <summary>
        /// molePercent property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "molarFractionMeasurePercent")]
		[XmlElement("molePercent")]
        public MolarFractionMeasurePercent MolePercent {
            get {
                return molePercentField;
            } 
            set {
                molePercentField = value;
                NotifyPropertyChanged("MolePercent");
            }
        }

        private MolarFractionMeasurePercent molePercentField; 

        /// <summary>
        /// specificGravity property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("specificGravity")]
        public double? SpecificGravity {
            get {
                return specificGravityField;
            } 
            set {
                specificGravityField = value;
                 this.SpecificGravitySpecified = true;
                NotifyPropertyChanged("SpecificGravity");
            }
        }

        private double? specificGravityField; 

        /// <summary>
        /// specificGravitySpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SpecificGravitySpecified {
            get {
                return specificGravitySpecifiedField;
            } 
            set {
                specificGravitySpecifiedField = value;
                NotifyPropertyChanged("SpecificGravitySpecified");
            }
        }

        private bool specificGravitySpecifiedField; 

        /// <summary>
        /// boilingPoint property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("boilingPoint")]
        public ThermodynamicTemperatureMeasure BoilingPoint {
            get {
                return boilingPointField;
            } 
            set {
                boilingPointField = value;
                NotifyPropertyChanged("BoilingPoint");
            }
        }

        private ThermodynamicTemperatureMeasure boilingPointField; 

        /// <summary>
        /// criticalPressure property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("criticalPressure")]
        public PressureMeasure CriticalPressure {
            get {
                return criticalPressureField;
            } 
            set {
                criticalPressureField = value;
                NotifyPropertyChanged("CriticalPressure");
            }
        }

        private PressureMeasure criticalPressureField; 

        /// <summary>
        /// criticalTemperature property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("criticalTemperature")]
        public ThermodynamicTemperatureMeasure CriticalTemperature {
            get {
                return criticalTemperatureField;
            } 
            set {
                criticalTemperatureField = value;
                NotifyPropertyChanged("CriticalTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure criticalTemperatureField; 

        /// <summary>
        /// criticalVolume property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "volumeMeasure")]
		[XmlElement("criticalVolume")]
        public VolumeMeasure CriticalVolume {
            get {
                return criticalVolumeField;
            } 
            set {
                criticalVolumeField = value;
                NotifyPropertyChanged("CriticalVolume");
            }
        }

        private VolumeMeasure criticalVolumeField; 

        /// <summary>
        /// acentricFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("acentricFactor")]
        public double? AcentricFactor {
            get {
                return acentricFactorField;
            } 
            set {
                acentricFactorField = value;
                 this.AcentricFactorSpecified = true;
                NotifyPropertyChanged("AcentricFactor");
            }
        }

        private double? acentricFactorField; 

        /// <summary>
        /// acentricFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AcentricFactorSpecified {
            get {
                return acentricFactorSpecifiedField;
            } 
            set {
                acentricFactorSpecifiedField = value;
                NotifyPropertyChanged("AcentricFactorSpecified");
            }
        }

        private bool acentricFactorSpecifiedField; 

        /// <summary>
        /// volumeTranslationFactor property
        /// </summary>
		[ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "molarVolumeMeasure")]
		[XmlElement("volumeTranslationFactor")]
        public MolarVolumeMeasure VolumeTranslationFactor {
            get {
                return volumeTranslationFactorField;
            } 
            set {
                volumeTranslationFactorField = value;
                NotifyPropertyChanged("VolumeTranslationFactor");
            }
        }

        private MolarVolumeMeasure volumeTranslationFactorField; 

        /// <summary>
        /// alphaShapeFactor property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("alphaShapeFactor")]
        public double? AlphaShapeFactor {
            get {
                return alphaShapeFactorField;
            } 
            set {
                alphaShapeFactorField = value;
                 this.AlphaShapeFactorSpecified = true;
                NotifyPropertyChanged("AlphaShapeFactor");
            }
        }

        private double? alphaShapeFactorField; 

        /// <summary>
        /// alphaShapeFactorSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AlphaShapeFactorSpecified {
            get {
                return alphaShapeFactorSpecifiedField;
            } 
            set {
                alphaShapeFactorSpecifiedField = value;
                NotifyPropertyChanged("AlphaShapeFactorSpecified");
            }
        }

        private bool alphaShapeFactorSpecifiedField; 

        /// <summary>
        /// watsonKExponent property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("watsonKExponent")]
        public double? WatsonKExponent {
            get {
                return watsonKExponentField;
            } 
            set {
                watsonKExponentField = value;
                 this.WatsonKExponentSpecified = true;
                NotifyPropertyChanged("WatsonKExponent");
            }
        }

        private double? watsonKExponentField; 

        /// <summary>
        /// watsonKExponentSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool WatsonKExponentSpecified {
            get {
                return watsonKExponentSpecifiedField;
            } 
            set {
                watsonKExponentSpecifiedField = value;
                NotifyPropertyChanged("WatsonKExponentSpecified");
            }
        }

        private bool watsonKExponentSpecifiedField; 

        /// <summary>
        /// splitCount property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "positiveCount")]
		[XmlElement("splitCount")]
        public short? SplitCount {
            get {
                return splitCountField;
            } 
            set {
                splitCountField = value;
                 this.SplitCountSpecified = true;
                NotifyPropertyChanged("SplitCount");
            }
        }

        private short? splitCountField; 

        /// <summary>
        /// splitCountSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SplitCountSpecified {
            get {
                return splitCountSpecifiedField;
            } 
            set {
                splitCountSpecifiedField = value;
                NotifyPropertyChanged("SplitCountSpecified");
            }
        }

        private bool splitCountSpecifiedField; 

        /// <summary>
        /// plusMinimumMolecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("plusMinimumMolecularWeight")]
        public double? PlusMinimumMolecularWeight {
            get {
                return plusMinimumMolecularWeightField;
            } 
            set {
                plusMinimumMolecularWeightField = value;
                 this.PlusMinimumMolecularWeightSpecified = true;
                NotifyPropertyChanged("PlusMinimumMolecularWeight");
            }
        }

        private double? plusMinimumMolecularWeightField; 

        /// <summary>
        /// plusMinimumMolecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PlusMinimumMolecularWeightSpecified {
            get {
                return plusMinimumMolecularWeightSpecifiedField;
            } 
            set {
                plusMinimumMolecularWeightSpecifiedField = value;
                NotifyPropertyChanged("PlusMinimumMolecularWeightSpecified");
            }
        }

        private bool plusMinimumMolecularWeightSpecifiedField; 

        /// <summary>
        /// plusMaximumMolecularWeight property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("plusMaximumMolecularWeight")]
        public double? PlusMaximumMolecularWeight {
            get {
                return plusMaximumMolecularWeightField;
            } 
            set {
                plusMaximumMolecularWeightField = value;
                 this.PlusMaximumMolecularWeightSpecified = true;
                NotifyPropertyChanged("PlusMaximumMolecularWeight");
            }
        }

        private double? plusMaximumMolecularWeightField; 

        /// <summary>
        /// plusMaximumMolecularWeightSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PlusMaximumMolecularWeightSpecified {
            get {
                return plusMaximumMolecularWeightSpecifiedField;
            } 
            set {
                plusMaximumMolecularWeightSpecifiedField = value;
                NotifyPropertyChanged("PlusMaximumMolecularWeightSpecified");
            }
        }

        private bool plusMaximumMolecularWeightSpecifiedField; 

        /// <summary>
        /// rvp property
        /// </summary>
		[Description("Reid vapor pressure of the product. The absolute vapor pressure of volatile crude oil and  volatile petroleum liquids, except liquefied petroleum gases, as  determined in  accordance with American Society for Testing and Materials under the designation ASTM D323-56.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("rvp")]
        public PressureMeasure Rvp {
            get {
                return rvpField;
            } 
            set {
                rvpField = value;
                NotifyPropertyChanged("Rvp");
            }
        }

        private PressureMeasure rvpField; 

        /// <summary>
        /// tvp property
        /// </summary>
		[Description("True vapor pressure of the product. The equilibrium partial pressure exerted by a petroleum liquid  as determined in accordance with standard methods.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("tvp")]
        public PressureMeasure Tvp {
            get {
                return tvpField;
            } 
            set {
                tvpField = value;
                NotifyPropertyChanged("Tvp");
            }
        }

        private PressureMeasure tvpField; 

        /// <summary>
        /// binaryInteractionCoefficient property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "binaryInteractionCoefficient")]
		[XmlElement("binaryInteractionCoefficient")]
        public List<BinaryInteractionCoefficient> BinaryInteractionCoefficient {
            get {
                return binaryInteractionCoefficientField;
            } 
            set {
                binaryInteractionCoefficientField = value;
                NotifyPropertyChanged("BinaryInteractionCoefficient");
            }
        }

         /// <summary>
         /// bool to indicate if BinaryInteractionCoefficient has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool BinaryInteractionCoefficientSpecified
         {
             get {
             if(binaryInteractionCoefficientField!=null)
                 return binaryInteractionCoefficientField.Count>0?true:false;
             else return false;
             }
         }
        private List<BinaryInteractionCoefficient> binaryInteractionCoefficientField; 

        /// <summary>
        /// calculated property
        /// </summary>
		[EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("calculated")]
        public bool? Calculated {
            get {
                return calculatedField;
            } 
            set {
                calculatedField = value;
                 this.CalculatedSpecified = true;
                NotifyPropertyChanged("Calculated");
            }
        }

        private bool? calculatedField; 

        /// <summary>
        /// calculatedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CalculatedSpecified {
            get {
                return calculatedSpecifiedField;
            } 
            set {
                calculatedSpecifiedField = value;
                NotifyPropertyChanged("CalculatedSpecified");
            }
        }

        private bool calculatedSpecifiedField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_fluidResultDataQuality xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fluidResultDataQuality", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_fluidResultDataQuality xsd type.")]
    public partial class FluidResultDataQuality : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// quality property
        /// </summary>
		[Required]
        [EnergisticsDataTypeAttribute(DataType = "DataQuality")]
		[XmlElement("quality")]
        public DataQuality Quality {
            get {
                return qualityField;
            } 
            set {
                qualityField = value;
                NotifyPropertyChanged("Quality");
            }
        }

        private DataQuality qualityField; 

        /// <summary>
        /// source property
        /// </summary>
		[StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("source")]
        public string Source {
            get {
                return sourceField;
            } 
            set {
                sourceField = value;
                NotifyPropertyChanged("Source");
            }
        }

        private string sourceField; 

        /// <summary>
        /// purpose property
        /// </summary>
		[StringLength(256)]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("purpose")]
        public string Purpose {
            get {
                return purposeField;
            } 
            set {
                purposeField = value;
                NotifyPropertyChanged("Purpose");
            }
        }

        private string purposeField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_fluidAnalysisResult xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_fluidAnalysisResult", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("This class represents the obj_fluidAnalysisResult xsd type.")]
    public partial class FluidAnalysisResult : Object, IProdmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Human recognizable context for the fluid sample that was analyzed. 
        /// </summary>
		[StringLength(64)]
        [Description("Human recognizable context for the fluid sample that was analyzed.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameFluidSample")]
        public string NameFluidSample {
            get {
                return nameFluidSampleField;
            } 
            set {
                nameFluidSampleField = value;
                NotifyPropertyChanged("NameFluidSample");
            }
        }

        private string nameFluidSampleField; 

        /// <summary>
        /// Human recognizable context for the fluid analysis that produced this result. 
        /// </summary>
		[StringLength(64)]
        [Description("Human recognizable context for the fluid analysis that produced this result.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameFluidAnalysis")]
        public string NameFluidAnalysis {
            get {
                return nameFluidAnalysisField;
            } 
            set {
                nameFluidAnalysisField = value;
                NotifyPropertyChanged("NameFluidAnalysis");
            }
        }

        private string nameFluidAnalysisField; 

        /// <summary>
        /// The name of the Fluid Analysis Result.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the Fluid Analysis Result.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("transferPressure")]
        public PressureMeasure TransferPressure {
            get {
                return transferPressureField;
            } 
            set {
                transferPressureField = value;
                NotifyPropertyChanged("TransferPressure");
            }
        }

        private PressureMeasure transferPressureField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("transferTemperature")]
        public ThermodynamicTemperatureMeasure TransferTemperature {
            get {
                return transferTemperatureField;
            } 
            set {
                transferTemperatureField = value;
                NotifyPropertyChanged("TransferTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure transferTemperatureField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("reservoirPressure")]
        public PressureMeasure ReservoirPressure {
            get {
                return reservoirPressureField;
            } 
            set {
                reservoirPressureField = value;
                NotifyPropertyChanged("ReservoirPressure");
            }
        }

        private PressureMeasure reservoirPressureField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("reservoirTemperature")]
        public ThermodynamicTemperatureMeasure ReservoirTemperature {
            get {
                return reservoirTemperatureField;
            } 
            set {
                reservoirTemperatureField = value;
                NotifyPropertyChanged("ReservoirTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure reservoirTemperatureField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("saturationPressure")]
        public PressureMeasure SaturationPressure {
            get {
                return saturationPressureField;
            } 
            set {
                saturationPressureField = value;
                NotifyPropertyChanged("SaturationPressure");
            }
        }

        private PressureMeasure saturationPressureField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "standardVolumePerStandardVolumeMeasure")]
		[XmlElement("producingGORStd")]
        public StandardVolumePerStandardVolumeMeasure ProducingGORStd {
            get {
                return producingGORStdField;
            } 
            set {
                producingGORStdField = value;
                NotifyPropertyChanged("ProducingGORStd");
            }
        }

        private StandardVolumePerStandardVolumeMeasure producingGORStdField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("oilAPIGravityMeasured")]
        public DensityMeasure OilAPIGravityMeasured {
            get {
                return oilAPIGravityMeasuredField;
            } 
            set {
                oilAPIGravityMeasuredField = value;
                NotifyPropertyChanged("OilAPIGravityMeasured");
            }
        }

        private DensityMeasure oilAPIGravityMeasuredField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "densityMeasure")]
		[XmlElement("oilAPIGravityCorrected")]
        public DensityMeasure OilAPIGravityCorrected {
            get {
                return oilAPIGravityCorrectedField;
            } 
            set {
                oilAPIGravityCorrectedField = value;
                NotifyPropertyChanged("OilAPIGravityCorrected");
            }
        }

        private DensityMeasure oilAPIGravityCorrectedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasGravityMeasured")]
        public double? GasGravityMeasured {
            get {
                return gasGravityMeasuredField;
            } 
            set {
                gasGravityMeasuredField = value;
                 this.GasGravityMeasuredSpecified = true;
                NotifyPropertyChanged("GasGravityMeasured");
            }
        }

        private double? gasGravityMeasuredField; 

        /// <summary>
        /// gasGravityMeasuredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravityMeasuredSpecified {
            get {
                return gasGravityMeasuredSpecifiedField;
            } 
            set {
                gasGravityMeasuredSpecifiedField = value;
                NotifyPropertyChanged("GasGravityMeasuredSpecified");
            }
        }

        private bool gasGravityMeasuredSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("gasGravityCorrected")]
        public double? GasGravityCorrected {
            get {
                return gasGravityCorrectedField;
            } 
            set {
                gasGravityCorrectedField = value;
                 this.GasGravityCorrectedSpecified = true;
                NotifyPropertyChanged("GasGravityCorrected");
            }
        }

        private double? gasGravityCorrectedField; 

        /// <summary>
        /// gasGravityCorrectedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool GasGravityCorrectedSpecified {
            get {
                return gasGravityCorrectedSpecifiedField;
            } 
            set {
                gasGravityCorrectedSpecifiedField = value;
                NotifyPropertyChanged("GasGravityCorrectedSpecified");
            }
        }

        private bool gasGravityCorrectedSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("h2oGravityMeasured")]
        public double? H2oGravityMeasured {
            get {
                return h2oGravityMeasuredField;
            } 
            set {
                h2oGravityMeasuredField = value;
                 this.H2oGravityMeasuredSpecified = true;
                NotifyPropertyChanged("H2oGravityMeasured");
            }
        }

        private double? h2oGravityMeasuredField; 

        /// <summary>
        /// h2oGravityMeasuredSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool H2oGravityMeasuredSpecified {
            get {
                return h2oGravityMeasuredSpecifiedField;
            } 
            set {
                h2oGravityMeasuredSpecifiedField = value;
                NotifyPropertyChanged("H2oGravityMeasuredSpecified");
            }
        }

        private bool h2oGravityMeasuredSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "unitlessQuantity")]
		[XmlElement("h2oGravityCorrected")]
        public double? H2oGravityCorrected {
            get {
                return h2oGravityCorrectedField;
            } 
            set {
                h2oGravityCorrectedField = value;
                 this.H2oGravityCorrectedSpecified = true;
                NotifyPropertyChanged("H2oGravityCorrected");
            }
        }

        private double? h2oGravityCorrectedField; 

        /// <summary>
        /// h2oGravityCorrectedSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool H2oGravityCorrectedSpecified {
            get {
                return h2oGravityCorrectedSpecifiedField;
            } 
            set {
                h2oGravityCorrectedSpecifiedField = value;
                NotifyPropertyChanged("H2oGravityCorrectedSpecified");
            }
        }

        private bool h2oGravityCorrectedSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasure")]
		[XmlElement("h2oSalinity")]
        public MassConcentrationMeasure H2oSalinity {
            get {
                return h2oSalinityField;
            } 
            set {
                h2oSalinityField = value;
                NotifyPropertyChanged("H2oSalinity");
            }
        }

        private MassConcentrationMeasure h2oSalinityField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("aromaticsWeightPercent")]
        public MassConcentrationMeasurePercent AromaticsWeightPercent {
            get {
                return aromaticsWeightPercentField;
            } 
            set {
                aromaticsWeightPercentField = value;
                NotifyPropertyChanged("AromaticsWeightPercent");
            }
        }

        private MassConcentrationMeasurePercent aromaticsWeightPercentField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("asphaltenesWeightPercent")]
        public MassConcentrationMeasurePercent AsphaltenesWeightPercent {
            get {
                return asphaltenesWeightPercentField;
            } 
            set {
                asphaltenesWeightPercentField = value;
                NotifyPropertyChanged("AsphaltenesWeightPercent");
            }
        }

        private MassConcentrationMeasurePercent asphaltenesWeightPercentField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("napthenesWeightPercent")]
        public MassConcentrationMeasurePercent NapthenesWeightPercent {
            get {
                return napthenesWeightPercentField;
            } 
            set {
                napthenesWeightPercentField = value;
                NotifyPropertyChanged("NapthenesWeightPercent");
            }
        }

        private MassConcentrationMeasurePercent napthenesWeightPercentField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "massConcentrationMeasurePercent")]
		[XmlElement("parafinsWeightPercent")]
        public MassConcentrationMeasurePercent ParafinsWeightPercent {
            get {
                return parafinsWeightPercentField;
            } 
            set {
                parafinsWeightPercentField = value;
                NotifyPropertyChanged("ParafinsWeightPercent");
            }
        }

        private MassConcentrationMeasurePercent parafinsWeightPercentField; 

        /// <summary>
        /// The definition of standard pressure for all elements which end in "Std".
        /// </summary>
		[Description("The definition of standard pressure for all elements which end in \"Std\".")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "pressureMeasure")]
		[XmlElement("standardPressure")]
        public PressureMeasure StandardPressure {
            get {
                return standardPressureField;
            } 
            set {
                standardPressureField = value;
                NotifyPropertyChanged("StandardPressure");
            }
        }

        private PressureMeasure standardPressureField; 

        /// <summary>
        /// The definition of standard temperature for all elements which end in "Std".
        /// </summary>
		[Description("The definition of standard temperature for all elements which end in \"Std\".")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("standardTemperature")]
        public ThermodynamicTemperatureMeasure StandardTemperature {
            get {
                return standardTemperatureField;
            } 
            set {
                standardTemperatureField = value;
                NotifyPropertyChanged("StandardTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure standardTemperatureField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "EosModelKind")]
		[XmlElement("eosMOdel")]
        public EosModelKind EosMOdel {
            get {
                return eosMOdelField;
            } 
            set {
                eosMOdelField = value;
                 this.EosMOdelSpecified = true;
                NotifyPropertyChanged("EosMOdel");
            }
        }

        private EosModelKind eosMOdelField; 

        /// <summary>
        /// eosMOdelSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EosMOdelSpecified {
            get {
                return eosMOdelSpecifiedField;
            } 
            set {
                eosMOdelSpecifiedField = value;
                NotifyPropertyChanged("EosMOdelSpecified");
            }
        }

        private bool eosMOdelSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(256)]
        [Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("analysisDescription")]
        public string AnalysisDescription {
            get {
                return analysisDescriptionField;
            } 
            set {
                analysisDescriptionField = value;
                NotifyPropertyChanged("AnalysisDescription");
            }
        }

        private string analysisDescriptionField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(256)]
        [Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("analysisPurpose")]
        public string AnalysisPurpose {
            get {
                return analysisPurposeField;
            } 
            set {
                analysisPurposeField = value;
                NotifyPropertyChanged("AnalysisPurpose");
            }
        }

        private string analysisPurposeField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultDataQuality")]
		[XmlElement("fluidDataQuality")]
        public FluidResultDataQuality FluidDataQuality {
            get {
                return fluidDataQualityField;
            } 
            set {
                fluidDataQualityField = value;
                NotifyPropertyChanged("FluidDataQuality");
            }
        }

        private FluidResultDataQuality fluidDataQualityField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultComposition")]
		[XmlElement("fluidSampleComposition")]
        public List<FluidResultComposition> FluidSampleComposition {
            get {
                return fluidSampleCompositionField;
            } 
            set {
                fluidSampleCompositionField = value;
                NotifyPropertyChanged("FluidSampleComposition");
            }
        }

         /// <summary>
         /// bool to indicate if FluidSampleComposition has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSampleCompositionSpecified
         {
             get {
             if(fluidSampleCompositionField!=null)
                 return fluidSampleCompositionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultComposition> fluidSampleCompositionField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [ComponentElement]
        [XmlElement("constantCompositionExpansionTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultConstantCompositionExpansionTest")]
        public FluidResultConstantCompositionExpansionTest ConstantCompositionExpansionTest {
            get {
                return constantCompositionExpansionTestField;
            } 
            set {
                constantCompositionExpansionTestField = value;
                ConstantCompositionExpansionTestSpecified = (value!=null);
                NotifyPropertyChanged("ConstantCompositionExpansionTest");
            }
        }

        private FluidResultConstantCompositionExpansionTest constantCompositionExpansionTestField; 
        private bool constantCompositionExpansionTestSpecified = false; 

        /// <summary>
        /// bool to indicate if ConstantCompositionExpansionTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ConstantCompositionExpansionTestSpecified
        {
            get {
                return constantCompositionExpansionTestSpecified;
            }
            set {
                constantCompositionExpansionTestSpecified= value;
            }
        }

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [ComponentElement]
        [XmlElement("constantVolumeDepletionTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultConstantVolumeDepletionTest")]
        public FluidResultConstantVolumeDepletionTest ConstantVolumeDepletionTest {
            get {
                return constantVolumeDepletionTestField;
            } 
            set {
                constantVolumeDepletionTestField = value;
                ConstantVolumeDepletionTestSpecified = (value!=null);
                NotifyPropertyChanged("ConstantVolumeDepletionTest");
            }
        }

        private FluidResultConstantVolumeDepletionTest constantVolumeDepletionTestField; 
        private bool constantVolumeDepletionTestSpecified = false; 

        /// <summary>
        /// bool to indicate if ConstantVolumeDepletionTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool ConstantVolumeDepletionTestSpecified
        {
            get {
                return constantVolumeDepletionTestSpecified;
            }
            set {
                constantVolumeDepletionTestSpecified= value;
            }
        }

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [ComponentElement]
        [XmlElement("differentialLiberationTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultDifferentialLiberationTest")]
        public FluidResultDifferentialLiberationTest DifferentialLiberationTest {
            get {
                return differentialLiberationTestField;
            } 
            set {
                differentialLiberationTestField = value;
                DifferentialLiberationTestSpecified = (value!=null);
                NotifyPropertyChanged("DifferentialLiberationTest");
            }
        }

        private FluidResultDifferentialLiberationTest differentialLiberationTestField; 
        private bool differentialLiberationTestSpecified = false; 

        /// <summary>
        /// bool to indicate if DifferentialLiberationTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool DifferentialLiberationTestSpecified
        {
            get {
                return differentialLiberationTestSpecified;
            }
            set {
                differentialLiberationTestSpecified= value;
            }
        }

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [ComponentElement]
        [XmlElement("jCurveTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultJCurveTest")]
        public FluidResultJCurveTest JCurveTest {
            get {
                return jCurveTestField;
            } 
            set {
                jCurveTestField = value;
                JCurveTestSpecified = (value!=null);
                NotifyPropertyChanged("JCurveTest");
            }
        }

        private FluidResultJCurveTest jCurveTestField; 
        private bool jCurveTestSpecified = false; 

        /// <summary>
        /// bool to indicate if JCurveTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool JCurveTestSpecified
        {
            get {
                return jCurveTestSpecified;
            }
            set {
                jCurveTestSpecified= value;
            }
        }

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [ComponentElement]
        [XmlElement("saturationTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultSaturationTest")]
        public FluidResultSaturationTest SaturationTest {
            get {
                return saturationTestField;
            } 
            set {
                saturationTestField = value;
                SaturationTestSpecified = (value!=null);
                NotifyPropertyChanged("SaturationTest");
            }
        }

        private FluidResultSaturationTest saturationTestField; 
        private bool saturationTestSpecified = false; 

        /// <summary>
        /// bool to indicate if SaturationTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SaturationTestSpecified
        {
            get {
                return saturationTestSpecified;
            }
            set {
                saturationTestSpecified= value;
            }
        }

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [ComponentElement]
        [XmlElement("separatorTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultSeparatorTest")]
        public FluidResultSeparatorTest SeparatorTest {
            get {
                return separatorTestField;
            } 
            set {
                separatorTestField = value;
                SeparatorTestSpecified = (value!=null);
                NotifyPropertyChanged("SeparatorTest");
            }
        }

        private FluidResultSeparatorTest separatorTestField; 
        private bool separatorTestSpecified = false; 

        /// <summary>
        /// bool to indicate if SeparatorTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool SeparatorTestSpecified
        {
            get {
                return separatorTestSpecified;
            }
            set {
                separatorTestSpecified= value;
            }
        }

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [ComponentElement]
        [XmlElement("transportPropertiesTest")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultTransportPropertiesTest")]
        public FluidResultTransportPropertiesTest TransportPropertiesTest {
            get {
                return transportPropertiesTestField;
            } 
            set {
                transportPropertiesTestField = value;
                TransportPropertiesTestSpecified = (value!=null);
                NotifyPropertyChanged("TransportPropertiesTest");
            }
        }

        private FluidResultTransportPropertiesTest transportPropertiesTestField; 
        private bool transportPropertiesTestSpecified = false; 

        /// <summary>
        /// bool to indicate if TransportPropertiesTest has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool TransportPropertiesTestSpecified
        {
            get {
                return transportPropertiesTestSpecified;
            }
            set {
                transportPropertiesTestSpecified= value;
            }
        }


        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fluidResultContaminant")]
		[XmlElement("fluidSampleContaminant")]
        public List<FluidResultContaminant> FluidSampleContaminant {
            get {
                return fluidSampleContaminantField;
            } 
            set {
                fluidSampleContaminantField = value;
                NotifyPropertyChanged("FluidSampleContaminant");
            }
        }

         /// <summary>
         /// bool to indicate if FluidSampleContaminant has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSampleContaminantSpecified
         {
             get {
             if(fluidSampleContaminantField!=null)
                 return fluidSampleContaminantField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidResultContaminant> fluidSampleContaminantField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// Unique identifier for the Fluid Sample that was analyzed.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the Fluid Sample that was analyzed.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidFluidSample")]
		
        public string UidFluidSample {
            get {
                return uidFluidSampleField;
            } 
            set {
                uidFluidSampleField = value;
                NotifyPropertyChanged("UidFluidSample");
            }
        }

        private string uidFluidSampleField; 

		/// <summary>
        /// Unique identifier for the Fluid Analysis that produced this result.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the Fluid Analysis that produced this result.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("uidFluidAnalysis")]
		
        public string UidFluidAnalysis {
            get {
                return uidFluidAnalysisField;
            } 
            set {
                uidFluidAnalysisField = value;
                NotifyPropertyChanged("UidFluidAnalysis");
            }
        }

        private string uidFluidAnalysisField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// This class represents the obj_fluidAnalysis xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_fluidAnalysis", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("This class represents the obj_fluidAnalysis xsd type.")]
    public partial class FluidAnalysis : Object, IProdmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the Fluid Analysis.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the Fluid Analysis.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [XmlElement("userAnalysisKind")]
        [EnergisticsDataTypeAttribute(DataType = "FluidAnalysisKind")]
        public FluidAnalysisKind UserAnalysisKind {
            get {
                return userAnalysisKindField;
            } 
            set {
                if (value != null && LaboratorybAnalysisKindSpecified) throw new Exception("Cannot set property UserAnalysisKind when property LaboratorybAnalysisKind is already set");
                userAnalysisKindField = value;
                UserAnalysisKindSpecified = (value!=null);
                NotifyPropertyChanged("UserAnalysisKind");
            }
        }

        private FluidAnalysisKind userAnalysisKindField; 
        private bool userAnalysisKindSpecified = false; 

        /// <summary>
        /// bool to indicate if UserAnalysisKind has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool UserAnalysisKindSpecified
        {
            get {
                return userAnalysisKindSpecified;
            }
            set {
                userAnalysisKindSpecified= value;
            }
        }

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
        [XmlElement("laboratorybAnalysisKind")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        public string LaboratorybAnalysisKind {
            get {
                return laboratorybAnalysisKindField;
            } 
            set {
                if (value != null && UserAnalysisKindSpecified) throw new Exception("Cannot set property LaboratorybAnalysisKind when property UserAnalysisKind is already set");
                laboratorybAnalysisKindField = value;
                LaboratorybAnalysisKindSpecified = (value!=null);
                NotifyPropertyChanged("LaboratorybAnalysisKind");
            }
        }

        private string laboratorybAnalysisKindField; 
        private bool laboratorybAnalysisKindSpecified = false; 

        /// <summary>
        /// bool to indicate if LaboratorybAnalysisKind has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool LaboratorybAnalysisKindSpecified
        {
            get {
                return laboratorybAnalysisKindSpecified;
            }
            set {
                laboratorybAnalysisKindSpecified= value;
            }
        }


        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("analysisdDate", DataType="date")]
        public DateTime? AnalysisdDate {
            get {
                return analysisdDateField;
            } 
            set {
                analysisdDateField = value;
                 this.AnalysisdDateSpecified = true;
                NotifyPropertyChanged("AnalysisdDate");
            }
        }

        private DateTime? analysisdDateField; 

        /// <summary>
        /// analysisdDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool AnalysisdDateSpecified {
            get {
                return analysisdDateSpecifiedField;
            } 
            set {
                analysisdDateSpecifiedField = value;
                NotifyPropertyChanged("AnalysisdDateSpecified");
            }
        }

        private bool analysisdDateSpecifiedField; 

        /// <summary>
        /// The name of the application that was run by the user.
        /// </summary>
		[StringLength(64)]
        [Description("The name of the application that was run by the user.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("applicationName")]
        public string ApplicationName {
            get {
                return applicationNameField;
            } 
            set {
                applicationNameField = value;
                NotifyPropertyChanged("ApplicationName");
            }
        }

        private string applicationNameField; 

        /// <summary>
        /// The version of the application that was run by the user.
        /// </summary>
		[StringLength(64)]
        [Description("The version of the application that was run by the user.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("applicationVersion")]
        public string ApplicationVersion {
            get {
                return applicationVersionField;
            } 
            set {
                applicationVersionField = value;
                NotifyPropertyChanged("ApplicationVersion");
            }
        }

        private string applicationVersionField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(64)]
        [Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("analysisCompany")]
        public string AnalysisCompany {
            get {
                return analysisCompanyField;
            } 
            set {
                analysisCompanyField = value;
                NotifyPropertyChanged("AnalysisCompany");
            }
        }

        private string analysisCompanyField; 

        /// <summary>
        /// The name of the analyst or user who is responsible for the results. 
        /// </summary>
		[StringLength(64)]
        [Description("The name of the analyst or user who is responsible for the results.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("personName")]
        public string PersonName {
            get {
                return personNameField;
            } 
            set {
                personNameField = value;
                NotifyPropertyChanged("PersonName");
            }
        }

        private string personNameField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(64)]
        [Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("reportIdentifier")]
        public string ReportIdentifier {
            get {
                return reportIdentifierField;
            } 
            set {
                reportIdentifierField = value;
                NotifyPropertyChanged("ReportIdentifier");
            }
        }

        private string reportIdentifierField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("reportDate", DataType="date")]
        public DateTime? ReportDate {
            get {
                return reportDateField;
            } 
            set {
                reportDateField = value;
                 this.ReportDateSpecified = true;
                NotifyPropertyChanged("ReportDate");
            }
        }

        private DateTime? reportDateField; 

        /// <summary>
        /// reportDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReportDateSpecified {
            get {
                return reportDateSpecifiedField;
            } 
            set {
                reportDateSpecifiedField = value;
                NotifyPropertyChanged("ReportDateSpecified");
            }
        }

        private bool reportDateSpecifiedField; 

        /// <summary>
        /// xxxxxxxxxxxxxxxx
        /// </summary>
		[StringLength(256)]
        [Description("xxxxxxxxxxxxxxxx")]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
		[XmlElement("reportLocation")]
        public string ReportLocation {
            get {
                return reportLocationField;
            } 
            set {
                reportLocationField = value;
                NotifyPropertyChanged("ReportLocation");
            }
        }

        private string reportLocationField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data  objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This records the result arrays along with context information for an Optical Time Domain Reflectometry (OTDR) survey. The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber. The actual data values are recorded in a OTDR file and/or image file, which are referenced in subelements.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberOTDR", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This records the result arrays along with context information for an Optical Time Domain Reflectometry (OTDR) survey. The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber. The actual data values are recorded in a OTDR file and/or image file, which are referenced in subelements.")]
    public partial class FiberOTDR : Object, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The name for this OTDR.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name for this OTDR.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The reason the OTDR test was run. The three main reasons are pre-installation' which is before the installation of the fiber; 'post-installation' which is used to validate a successful fiber installation; and 'DTS run' a quality check of the fiber prior to a DTS run. A fourth permitted value is 'other'.
        /// </summary>
		[Description("The reason the OTDR test was run. The three main reasons are pre-installation' which is before the installation of the fiber; 'post-installation'  which is used to validate a successful fiber installation;  and 'DTS run' a quality check of the fiber prior to a DTS run. A fourth permitted value is 'other'.")]
        [EnergisticsDataTypeAttribute(DataType = "OTDRReason")]
		[XmlElement("reasonForRun")]
        public OTDRReason ReasonForRun {
            get {
                return reasonForRunField;
            } 
            set {
                reasonForRunField = value;
                 this.ReasonForRunSpecified = true;
                NotifyPropertyChanged("ReasonForRun");
            }
        }

        private OTDRReason reasonForRunField; 

        /// <summary>
        /// reasonForRunSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReasonForRunSpecified {
            get {
                return reasonForRunSpecifiedField;
            } 
            set {
                reasonForRunSpecifiedField = value;
                NotifyPropertyChanged("ReasonForRunSpecified");
            }
        }

        private bool reasonForRunSpecifiedField; 

        /// <summary>
        /// The dateTime of the run.
        /// </summary>
		[Required]
        [Description("The dateTime of the run.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimRun")]
        public Timestamp? DateTimeRun {
            get {
                return dTimRunField;
            } 
            set {
                dTimRunField = value;
                NotifyPropertyChanged("DateTimeRun");
            }
        }

        private Timestamp? dTimRunField; 

        /// <summary>
        /// A reference to the external file used to record the OTDR data. Note this file will not be in an Energistics format but likely in a special OTDR format.
        /// </summary>
		[Description("A reference to the external file used to record the OTDR data. Note this file will not be in an Energistics format but likely in a special OTDR format.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("dataInOTDRFile")]
        public RefNameString DataInOTDRFile {
            get {
                return dataInOTDRFileField;
            } 
            set {
                dataInOTDRFileField = value;
                NotifyPropertyChanged("DataInOTDRFile");
            }
        }

        private RefNameString dataInOTDRFileField; 

        /// <summary>
        /// A reference to the well log used to record the table of data.
        /// </summary>
		[Description("A reference to the well log used to record the table of data.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("OTDRImageFile")]
        public RefNameString OTDRImageFile {
            get {
                return OTDRImageFileField;
            } 
            set {
                OTDRImageFileField = value;
                NotifyPropertyChanged("OTDRImageFile");
            }
        }

        private RefNameString OTDRImageFileField; 

        /// <summary>
        /// A reference to the instrument box that was used for the OTDR run
        /// </summary>
		[Description("A reference to the instrument box that was used for the OTDR run")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberOTDRInstrumentBox")]
		[XmlElement("OTDRInstrument")]
        public FiberOTDRInstrumentBox OTDRInstrument {
            get {
                return OTDRInstrumentField;
            } 
            set {
                OTDRInstrumentField = value;
                NotifyPropertyChanged("OTDRInstrument");
            }
        }

        private FiberOTDRInstrumentBox OTDRInstrumentField; 

        /// <summary>
        /// The point measured along the optical path at which this OTDR survey starts.
        /// </summary>
		[Required]
        [Description("The point measured along the optical path at which this OTDR survey starts.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("opticalPathDistanceStart")]
        public LengthMeasure OpticalPathDistanceStart {
            get {
                return opticalPathDistanceStartField;
            } 
            set {
                opticalPathDistanceStartField = value;
                NotifyPropertyChanged("OpticalPathDistanceStart");
            }
        }

        private LengthMeasure opticalPathDistanceStartField; 

        /// <summary>
        /// The point measured along the optical path at which this OTDR survey ends.
        /// </summary>
		[Required]
        [Description("The point measured along the optical path at which this OTDR survey ends.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("opticalPathDistanceEnd")]
        public LengthMeasure OpticalPathDistanceEnd {
            get {
                return opticalPathDistanceEndField;
            } 
            set {
                opticalPathDistanceEndField = value;
                NotifyPropertyChanged("OpticalPathDistanceEnd");
            }
        }

        private LengthMeasure opticalPathDistanceEndField; 

        /// <summary>
        /// Enum. The direction of the OTDR survey. "Forward" means "in the same direction as the positive direction along the optical path".
        /// </summary>
		[Required]
        [Description("Enum. The direction of the OTDR survey.  \"Forward\"  means \"in the same direction as the positive direction along the optical path\".")]
        [EnergisticsDataTypeAttribute(DataType = "OTDRDirection")]
		[XmlElement("direction")]
        public OTDRDirection? Direction {
            get {
                return directionField;
            } 
            set {
                directionField = value;
                 this.DirectionSpecified = true;
                NotifyPropertyChanged("Direction");
            }
        }

        
        private bool DirectionSpecifiedField = false;
        
        /// <summary>
        /// DirectionSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DirectionSpecified {
            get {
                return DirectionSpecifiedField;
            } 
            set {
                DirectionSpecifiedField = value;
                NotifyPropertyChanged("DirectionSpecified");
            }
        }
        
        private OTDRDirection? directionField; 

        /// <summary>
        /// The wavelength at which this OTDR survey was carried out.
        /// </summary>
		[Required]
        [Description("The wavelength at which this OTDR survey was carried out.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("wavelength")]
        public LengthMeasure Wavelength {
            get {
                return wavelengthField;
            } 
            set {
                wavelengthField = value;
                NotifyPropertyChanged("Wavelength");
            }
        }

        private LengthMeasure wavelengthField; 

        /// <summary>
        /// Contact for the person who performed the OTDR reading
        /// </summary>
		[Description("Contact for the person who performed the OTDR reading")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("measurementContact")]
        public BusinessAssociate MeasurementContact {
            get {
                return measurementContactField;
            } 
            set {
                measurementContactField = value;
                NotifyPropertyChanged("MeasurementContact");
            }
        }

        private BusinessAssociate measurementContactField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about an OTDR instrument box which is used to perform OTDR surveys on the optical path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberOTDRInstrumentBox", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information about an OTDR instrument box which is used to perform OTDR surveys on the optical path.")]
    public partial class FiberOTDRInstrumentBox : Instrument, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The general class of an instrument, including vendor information, in the installed system.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOTDRInstrumentBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grp_dtsInstrumentBox))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_instrument", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The general class of an instrument, including vendor information, in the installed system.")]
    public partial class Instrument : DtsEquipment, INotifyPropertyChanged
    {

        /// <summary>
        /// Contact information for the person/company that provided the equipment
        /// </summary>
		[Description("Contact information for the person/company that provided the equipment")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("instrumentVendor")]
        public BusinessAssociate InstrumentVendor {
            get {
                return instrumentVendorField;
            } 
            set {
                instrumentVendorField = value;
                NotifyPropertyChanged("InstrumentVendor");
            }
        }

        private BusinessAssociate instrumentVendorField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the cs_dtsEquipment xsd type.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberCommon))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTerminator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberConnection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberSplice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTurnaround))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPathSegment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Instrument))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOTDRInstrumentBox))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Grp_dtsInstrumentBox))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dtsEquipment", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the cs_dtsEquipment xsd type.")]
    public abstract partial class DtsEquipment : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name for the item of equipment.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name for the item of equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The manufacturer for this item of equipment.
        /// </summary>
		[StringLength(64)]
        [Description("The manufacturer for this item of equipment.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("manufacturer")]
        public string Manufacturer {
            get {
                return manufacturerField;
            } 
            set {
                manufacturerField = value;
                NotifyPropertyChanged("Manufacturer");
            }
        }

        private string manufacturerField; 

        /// <summary>
        /// Date when the equipment (e.g. instrument box) was manufactured
        /// </summary>
		[Description("Date when the equipment (e.g. instrument box) was manufactured")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("manufacturingDate", DataType="date")]
        public DateTime? ManufacturingDate {
            get {
                return manufacturingDateField;
            } 
            set {
                manufacturingDateField = value;
                 this.ManufacturingDateSpecified = true;
                NotifyPropertyChanged("ManufacturingDate");
            }
        }

        private DateTime? manufacturingDateField; 

        /// <summary>
        /// manufacturingDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ManufacturingDateSpecified {
            get {
                return manufacturingDateSpecifiedField;
            } 
            set {
                manufacturingDateSpecifiedField = value;
                NotifyPropertyChanged("ManufacturingDateSpecified");
            }
        }

        private bool manufacturingDateSpecifiedField; 

        /// <summary>
        /// The type of equipment. This might include the model type.
        /// </summary>
		[StringLength(40)]
        [Description("The type of equipment. This might include the model type.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("type")]
        public string Type {
            get {
                return typeField;
            } 
            set {
                typeField = value;
                NotifyPropertyChanged("Type");
            }
        }

        private string typeField; 

        /// <summary>
        /// Contact details for the company/person supplying the equipment. 
        /// </summary>
		[Description("Contact details for the company/person supplying the equipment.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("supplier")]
        public BusinessAssociate Supplier {
            get {
                return supplierField;
            } 
            set {
                supplierField = value;
                NotifyPropertyChanged("Supplier");
            }
        }

        private BusinessAssociate supplierField; 

        /// <summary>
        /// The date on which this fiber segment was suppied.
        /// </summary>
		[Description("The date on which this fiber segment was suppied.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("supplyDate", DataType="date")]
        public DateTime? SupplyDate {
            get {
                return supplyDateField;
            } 
            set {
                supplyDateField = value;
                 this.SupplyDateSpecified = true;
                NotifyPropertyChanged("SupplyDate");
            }
        }

        private DateTime? supplyDateField; 

        /// <summary>
        /// supplyDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SupplyDateSpecified {
            get {
                return supplyDateSpecifiedField;
            } 
            set {
                supplyDateSpecifiedField = value;
                NotifyPropertyChanged("SupplyDateSpecified");
            }
        }

        private bool supplyDateSpecifiedField; 

        /// <summary>
        /// The model number (alphanumeric) that is used by the supplier to reference the type of fiber that is supplied to the user.
        /// </summary>
		[StringLength(64)]
        [Description("The model number (alphanumeric) that is used by the supplier to reference the type of fiber that is supplied to the user.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("supplierModelNumber")]
        public string SupplierModelNumber {
            get {
                return supplierModelNumberField;
            } 
            set {
                supplierModelNumberField = value;
                NotifyPropertyChanged("SupplierModelNumber");
            }
        }

        private string supplierModelNumberField; 

        /// <summary>
        /// Latest known version of the software/firmware that is running in the equipment
        /// </summary>
		[StringLength(64)]
        [Description("Latest known version of the software/firmware that is running in the equipment")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("softwareVersion")]
        public string SoftwareVersion {
            get {
                return softwareVersionField;
            } 
            set {
                softwareVersionField = value;
                NotifyPropertyChanged("SoftwareVersion");
            }
        }

        private string softwareVersionField; 

        /// <summary>
        /// A descriptive remark about the equipment (e.g. optical fiber)
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the equipment (e.g. optical fiber)")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A specialization of the equipment class containing information on reflectance, loss and reason for decommissioning, from which all equipment in the optical path inherits.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTerminator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberConnection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberSplice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberTurnaround))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPathSegment))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberCommon", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A specialization of the equipment class containing information on reflectance, loss and reason for decommissioning, from which all equipment in the optical path inherits.")]
    public partial class FiberCommon : DtsEquipment, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The fraction of incident light that is reflected by a fiber path component. Measured in dB.
        /// </summary>
		[Description("The fraction of incident light that is reflected by a fiber path component. Measured in dB.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("reflectance")]
        public DimensionlessMeasure Reflectance {
            get {
                return reflectanceField;
            } 
            set {
                reflectanceField = value;
                NotifyPropertyChanged("Reflectance");
            }
        }

        private DimensionlessMeasure reflectanceField; 

        /// <summary>
        /// The fraction of incident light that is lost by a fiber path component. Measured in dB.
        /// </summary>
		[Description("The fraction of incident light that is lost by a fiber path component. Measured in dB.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "dimensionlessMeasure")]
		[XmlElement("loss")]
        public DimensionlessMeasure Loss {
            get {
                return lossField;
            } 
            set {
                lossField = value;
                NotifyPropertyChanged("Loss");
            }
        }

        private DimensionlessMeasure lossField; 

        /// <summary>
        /// Any remarks that help understand why the optical fiber is no longer in use.
        /// </summary>
		[StringLength(4000)]
        [Description("Any remarks that help understand why the optical fiber is no longer in use.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("reasonForDecommissioning")]
        public string ReasonForDecommissioning {
            get {
                return reasonForDecommissioningField;
            } 
            set {
                reasonForDecommissioningField = value;
                NotifyPropertyChanged("ReasonForDecommissioning");
            }
        }

        private string reasonForDecommissioningField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The terminator of the optical path. This may be a component (in the case of a single ended fiber installation), or it may be a connection back into the instrument box in the case of a double ended fiber installation.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberTerminator", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The terminator of the optical path. This may be a component (in the case of a single ended fiber installation), or it may be a connection back into the instrument box in the case of a double ended fiber installation.")]
    public partial class FiberTerminator : FiberCommon, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the termination used for the fiber
        /// </summary>
		[Required]
        [Description("Information about the termination used for the fiber")]
        [EnergisticsDataTypeAttribute(DataType = "TerminationType")]
		[XmlElement("terminationType")]
        public TerminationType? TerminationType {
            get {
                return terminationTypeField;
            } 
            set {
                terminationTypeField = value;
                 this.TerminationTypeSpecified = true;
                NotifyPropertyChanged("TerminationType");
            }
        }

        
        private bool TerminationTypeSpecifiedField = false;
        
        /// <summary>
        /// TerminationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TerminationTypeSpecified {
            get {
                return TerminationTypeSpecifiedField;
            } 
            set {
                TerminationTypeSpecifiedField = value;
                NotifyPropertyChanged("TerminationTypeSpecified");
            }
        }
        
        private TerminationType? terminationTypeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A connection component within the optical path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberConnection", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A connection component within the optical path.")]
    public partial class FiberConnection : FiberCommon, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Specifies whether this is a dry mate or wet mate
        /// </summary>
		[Required]
        [Description("Specifies whether this is a dry mate or wet mate")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberConnectorTypes")]
		[XmlElement("connectorType")]
        public List<FiberConnectorTypeList> ConnectorType {
            get {
                return connectorTypeField;
            } 
            set {
                connectorTypeField = value;
                NotifyPropertyChanged("ConnectorType");
            }
        }

         /// <summary>
         /// bool to indicate if ConnectorType has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectorTypeSpecified
         {
             get {
             if(connectorTypeField!=null)
                 return connectorTypeField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberConnectorTypeList> connectorTypeField; 

        /// <summary>
        /// Describes whether the fiber end is angle polished or flat polished
        /// </summary>
		[Description("Describes whether the fiber end is angle polished or flat polished")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "FiberEndType")]
		[XmlElement("endType")]
        public List<FiberEndType> EndType {
            get {
                return endTypeField;
            } 
            set {
                endTypeField = value;
                NotifyPropertyChanged("EndType");
            }
        }

         /// <summary>
         /// bool to indicate if EndType has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool EndTypeSpecified
         {
             get {
             if(endTypeField!=null)
                 return endTypeField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberEndType> endTypeField; 

		/// <summary>
        /// The uid of this object.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The uid of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("connectionID")]
		
        public string ConnectionID {
            get {
                return connectionIDField;
            } 
            set {
                connectionIDField = value;
                NotifyPropertyChanged("ConnectionID");
            }
        }

        private string connectionIDField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A splice component within the optical path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberSplice", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A splice component within the optical path.")]
    public partial class FiberSplice : FiberCommon, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// Enum. The type of splice.
        /// </summary>
		[Required]
        [Description("Enum.  The type of splice.")]
        [EnergisticsDataTypeAttribute(DataType = "FiberSpliceTypes")]
		[XmlElement("fiberSpliceType")]
        public FiberSpliceTypeList? FiberSpliceType {
            get {
                return fiberSpliceTypeField;
            } 
            set {
                fiberSpliceTypeField = value;
                 this.FiberSpliceTypeSpecified = true;
                NotifyPropertyChanged("FiberSpliceType");
            }
        }

        
        private bool FiberSpliceTypeSpecifiedField = false;
        
        /// <summary>
        /// FiberSpliceTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool FiberSpliceTypeSpecified {
            get {
                return FiberSpliceTypeSpecifiedField;
            } 
            set {
                FiberSpliceTypeSpecifiedField = value;
                NotifyPropertyChanged("FiberSpliceTypeSpecified");
            }
        }
        
        private FiberSpliceTypeList? fiberSpliceTypeField; 

        /// <summary>
        /// The pressure rating for which the splice is expected to withstand
        /// </summary>
		[Description("The pressure rating for which the splice is expected to withstand")]
        [EnergisticsDataTypeAttribute(DataType = "PressureUom")]
		[XmlElement("pressureRating")]
        public PressureUom? PressureRating {
            get {
                return pressureRatingField;
            } 
            set {
                pressureRatingField = value;
                 this.PressureRatingSpecified = true;
                NotifyPropertyChanged("PressureRating");
            }
        }

        private PressureUom? pressureRatingField; 

        /// <summary>
        /// pressureRatingSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PressureRatingSpecified {
            get {
                return pressureRatingSpecifiedField;
            } 
            set {
                pressureRatingSpecifiedField = value;
                NotifyPropertyChanged("PressureRatingSpecified");
            }
        }

        private bool pressureRatingSpecifiedField; 

        /// <summary>
        /// The measurement of the bend on the splice.
        /// </summary>
		[Description("The measurement of the bend on the splice.")]
        [EnergisticsDataTypeAttribute(DataType = "PlaneAngleUom")]
		[XmlElement("bendAngle")]
        public PlaneAngleUom? BendAngle {
            get {
                return bendAngleField;
            } 
            set {
                bendAngleField = value;
                 this.BendAngleSpecified = true;
                NotifyPropertyChanged("BendAngle");
            }
        }

        private PlaneAngleUom? bendAngleField; 

        /// <summary>
        /// bendAngleSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool BendAngleSpecified {
            get {
                return bendAngleSpecifiedField;
            } 
            set {
                bendAngleSpecifiedField = value;
                NotifyPropertyChanged("BendAngleSpecified");
            }
        }

        private bool bendAngleSpecifiedField; 

        /// <summary>
        /// A useful description of the equipment used to create the splice
        /// </summary>
		[Description("A useful description of the equipment used to create the splice")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("spliceEquipmentUsed")]
        public string SpliceEquipmentUsed {
            get {
                return spliceEquipmentUsedField;
            } 
            set {
                spliceEquipmentUsedField = value;
                NotifyPropertyChanged("SpliceEquipmentUsed");
            }
        }

        private string spliceEquipmentUsedField; 

        /// <summary>
        /// A useful description of the stripping type that was conducted
        /// </summary>
		[Description("A useful description of the stripping type that was conducted")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("strippingType")]
        public string StrippingType {
            get {
                return strippingTypeField;
            } 
            set {
                strippingTypeField = value;
                NotifyPropertyChanged("StrippingType");
            }
        }

        private string strippingTypeField; 

        /// <summary>
        /// A useful description of the type of protector used in the splice.
        /// </summary>
		[Description("A useful description of the type of protector used in the splice.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("protectorType")]
        public string ProtectorType {
            get {
                return protectorTypeField;
            } 
            set {
                protectorTypeField = value;
                NotifyPropertyChanged("ProtectorType");
            }
        }

        private string protectorTypeField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A turnaround component within the optical path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberTurnaround", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A turnaround component within the optical path.")]
    public partial class FiberTurnaround : FiberCommon, IDataObject, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A single segment of the optical fiber used for distributed temperature surveys. Multiple such segments may be connected by other types of component including connectors, splices and fiber turnarounds.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberOpticalPathSegment", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A single segment of the optical fiber used for distributed temperature surveys. Multiple such segments may be connected by other types of component including connectors, splices and fiber turnarounds.")]
    public partial class FiberOpticalPathSegment : FiberCommon, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The length of fiber in this optical path section.
        /// </summary>
		[Required]
        [Description("The length of fiber in this optical path section.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("fiberLength")]
        public LengthMeasure FiberLength {
            get {
                return fiberLengthField;
            } 
            set {
                fiberLengthField = value;
                NotifyPropertyChanged("FiberLength");
            }
        }

        private LengthMeasure fiberLengthField; 

        /// <summary>
        /// For this fiber segment, the amount of "overstuffing", ie the excess length of fiber which was installed compared to the length of the facility which is to be surveyed. Example, if 110m of fiber were to be installed to measure 100m length of pipeline, the overstuffing would be 10m. Overstuffing can be allowed for in the facilityMapping section. The overstuffing is assumed to be linear distributed along the facility being measured.
        /// </summary>
		[Description("For this fiber segment, the amount of \"overstuffing\", ie the excess length of fiber which was installed compared to the length of the facility which is to be surveyed. Example, if 110m of fiber were to be installed to measure 100m length of pipeline, the overstuffing would be 10m.  Overstuffing can be allowed for in the facilityMapping section. The overstuffing is assumed to be linear distributed along the facility being measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("overStuffing")]
        public LengthMeasure OverStuffing {
            get {
                return overStuffingField;
            } 
            set {
                overStuffingField = value;
                NotifyPropertyChanged("OverStuffing");
            }
        }

        private LengthMeasure overStuffingField; 

        /// <summary>
        /// The inner diameter of the core, generally measured in microns (um).
        /// </summary>
		[Description("The inner diameter of the core, generally measured in microns (um).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("coreDiameter")]
        public LengthMeasure CoreDiameter {
            get {
                return coreDiameterField;
            } 
            set {
                coreDiameterField = value;
                NotifyPropertyChanged("CoreDiameter");
            }
        }

        private LengthMeasure coreDiameterField; 

        /// <summary>
        /// The diameter of the core plus the cladding, generally measured in microns (um).
        /// </summary>
		[Description("The diameter of the core plus the cladding, generally measured in microns (um).")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("claddedDiameter")]
        public LengthMeasure CladdedDiameter {
            get {
                return claddedDiameterField;
            } 
            set {
                claddedDiameterField = value;
                NotifyPropertyChanged("CladdedDiameter");
            }
        }

        private LengthMeasure claddedDiameterField; 

        /// <summary>
        /// The diameter of the cable containing the fiber, including all its sheathing layers. 
        /// </summary>
		[Description("The diameter of the cable containing the fiber, including all its sheathing layers.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("outsideDiameter")]
        public LengthMeasure OutsideDiameter {
            get {
                return outsideDiameterField;
            } 
            set {
                outsideDiameterField = value;
                NotifyPropertyChanged("OutsideDiameter");
            }
        }

        private LengthMeasure outsideDiameterField; 

        /// <summary>
        /// The mode of fiber. Enum. Values are single- or multi- mode fiber, or other/unknown.
        /// </summary>
		[Description("The mode of fiber.  Enum. Values are single- or multi- mode fiber, or other/unknown.")]
        [EnergisticsDataTypeAttribute(DataType = "FiberMode")]
		[XmlElement("mode")]
        public FiberMode Mode {
            get {
                return modeField;
            } 
            set {
                modeField = value;
                 this.ModeSpecified = true;
                NotifyPropertyChanged("Mode");
            }
        }

        private FiberMode modeField; 

        /// <summary>
        /// modeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ModeSpecified {
            get {
                return modeSpecifiedField;
            } 
            set {
                modeSpecifiedField = value;
                NotifyPropertyChanged("ModeSpecified");
            }
        }

        private bool modeSpecifiedField; 

        /// <summary>
        /// The type of coating on the fiber.
        /// </summary>
		[StringLength(40)]
        [Description("The type of coating on the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("coating")]
        public string Coating {
            get {
                return coatingField;
            } 
            set {
                coatingField = value;
                NotifyPropertyChanged("Coating");
            }
        }

        private string coatingField; 

        /// <summary>
        /// The type of jacket covering the fiber.
        /// </summary>
		[StringLength(40)]
        [Description("The type of jacket covering the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("jacket")]
        public string Jacket {
            get {
                return jacketField;
            } 
            set {
                jacketField = value;
                NotifyPropertyChanged("Jacket");
            }
        }

        private string jacketField; 

        /// <summary>
        /// Property of the fiber core.
        /// </summary>
		[StringLength(40)]
        [Description("Property of the fiber core.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("coreType")]
        public string CoreType {
            get {
                return coreTypeField;
            } 
            set {
                coreTypeField = value;
                NotifyPropertyChanged("CoreType");
            }
        }

        private string coreTypeField; 

        /// <summary>
        /// Additional parameters to define the fiber as a material.
        /// </summary>
		[Description("Additional parameters to define the fiber as a material.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("parameter")]
        public List<IndexedObject> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> parameterField; 

        /// <summary>
        /// The spool number of the particular spool from which this fiber segement was taken. The spool number may contain alphanumeric characters. 
        /// </summary>
		[StringLength(40)]
        [Description("The spool number of the particular spool from which this fiber segement was taken. The spool number may contain alphanumeric characters.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("spoolNumberTag")]
        public string SpoolNumberTag {
            get {
                return spoolNumberTagField;
            } 
            set {
                spoolNumberTagField = value;
                NotifyPropertyChanged("SpoolNumberTag");
            }
        }

        private string spoolNumberTagField; 

        /// <summary>
        /// The length of the fiber on the spool when purchased.
        /// </summary>
		[Description("The length of the fiber on the spool when purchased.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("spoolLength")]
        public LengthMeasure SpoolLength {
            get {
                return spoolLengthField;
            } 
            set {
                spoolLengthField = value;
                NotifyPropertyChanged("SpoolLength");
            }
        }

        private LengthMeasure spoolLengthField; 

        /// <summary>
        /// The refractive index of a material depends on the frequency (or wavelength) of the light. Hence it is necessary to include both the value (a unitless number) and the frequency (or wavelength) it was measured at. The frequency will be a quantity type with a frequency unit such as Hz. 
        /// </summary>
		[Description("The refractive index of a material depends on the frequency (or wavelength) of the light. Hence it is necessary to include both the value (a unitless number) and the frequency (or wavelength) it was measured at. The frequency will be a quantity type with a frequency unit such as Hz.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberRefractiveIndex")]
		[XmlElement("refractiveIndex")]
        public List<FiberRefractiveIndex> RefractiveIndex {
            get {
                return refractiveIndexField;
            } 
            set {
                refractiveIndexField = value;
                NotifyPropertyChanged("RefractiveIndex");
            }
        }

         /// <summary>
         /// bool to indicate if RefractiveIndex has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool RefractiveIndexSpecified
         {
             get {
             if(refractiveIndexField!=null)
                 return refractiveIndexField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberRefractiveIndex> refractiveIndexField; 

        /// <summary>
        /// The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant. The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1). 
        /// </summary>
		[Description("The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength. The wavelength varies with the refractive index, while the frequency remains constant.  The wavelength given to specify this type is the wavelength in a vacuum (refractive index = 1).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberOneWayAttenuation")]
		[XmlElement("oneWayAttenuation")]
        public List<FiberOneWayAttenuation> OneWayAttenuation {
            get {
                return oneWayAttenuationField;
            } 
            set {
                oneWayAttenuationField = value;
                NotifyPropertyChanged("OneWayAttenuation");
            }
        }

         /// <summary>
         /// bool to indicate if OneWayAttenuation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OneWayAttenuationSpecified
         {
             get {
             if(oneWayAttenuationField!=null)
                 return oneWayAttenuationField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOneWayAttenuation> oneWayAttenuationField; 

        /// <summary>
        /// The means by which this fiber segment is conveyed into the well.
        /// </summary>
		[Description("The means by which this fiber segment is conveyed into the well.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberConveyance")]
		[XmlElement("fiberConveyance")]
        public FiberConveyance FiberConveyance {
            get {
                return fiberConveyanceField;
            } 
            set {
                fiberConveyanceField = value;
                NotifyPropertyChanged("FiberConveyance");
            }
        }

        private FiberConveyance fiberConveyanceField; 

        /// <summary>
        /// ENUM: The type of cable used in this segment. Example: single-fiber-cable 
        /// </summary>
		[Description("ENUM: The type of cable used in this segment.  Example: single-fiber-cable")]
        [EnergisticsDataTypeAttribute(DataType = "CableType")]
		[XmlElement("cableType")]
        public CableType? CableType {
            get {
                return cableTypeField;
            } 
            set {
                cableTypeField = value;
                 this.CableTypeSpecified = true;
                NotifyPropertyChanged("CableType");
            }
        }

        private CableType? cableTypeField; 

        /// <summary>
        /// cableTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CableTypeSpecified {
            get {
                return cableTypeSpecifiedField;
            } 
            set {
                cableTypeSpecifiedField = value;
                NotifyPropertyChanged("CableTypeSpecified");
            }
        }

        private bool cableTypeSpecifiedField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the indexedObject xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="indexedObject", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the indexedObject xsd type.")]
    public partial class IndexedObject : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        public IndexedObject() {}

        /// <summary>
        /// Initializes a new instance of the IndexedObject class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public IndexedObject(string value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// index property
        /// </summary>
		[Required]
        [Description("Indexes things with the same name.  That is the first one, the second one, etc.")]
        [EnergisticsDataTypeAttribute(DataType = "positiveCount")]
        [XmlAttribute("index")]
		
        public short Index {
            get {
                return indexField;
            } 
            set {
                indexField = value;
                NotifyPropertyChanged("Index");
            }
        }

        private short indexField; 

		/// <summary>
        /// name property
        /// </summary>
		[StringLength(40)]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

		/// <summary>
        /// uom property
        /// </summary>
		[StringLength(24)]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

		/// <summary>
        /// description property
        /// </summary>
		[StringLength(256)]
        [EnergisticsDataTypeAttribute(DataType = "descriptionString")]
        [XmlAttribute("description")]
		
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(40)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The refractive index of a material depends on the frequency (or wavelength) of the light. Hence it is necessary to include both the value (a unitless number) and the frequency (or wavelength) it was measured at. The frequency will be a quantity type with a frequency unit such as Hz.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberRefractiveIndex", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The refractive index of a material depends on the frequency (or wavelength) of the light. Hence it is necessary to include both the value (a unitless number) and the frequency (or wavelength) it was measured at. The frequency will be a quantity type with a frequency unit such as Hz.")]
    public partial class FiberRefractiveIndex : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The value of the refractive index.
        /// </summary>
		[Required]
        [Description("The value of the refractive index.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "attenuationMeasure")]
		[XmlElement("value")]
        public AttenuationMeasure Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private AttenuationMeasure valueField; 

        /// <summary>
        /// The frequency (and uom) for which the refractive index is measured.
        /// </summary>
		[Description("The frequency (and uom) for which the refractive index is measured.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "frequencyMeasure")]
		[XmlElement("frequency")]
        public FrequencyMeasure Frequency {
            get {
                return frequencyField;
            } 
            set {
                frequencyField = value;
                NotifyPropertyChanged("Frequency");
            }
        }

        private FrequencyMeasure frequencyField; 

        /// <summary>
        /// The wavelength (and uom) for which the refractive index is measured. The reported wavelength should be the wavelength of the light in a vacuum. 
        /// </summary>
		[Description("The wavelength (and uom) for which the refractive index is measured. The reported wavelength should be the wavelength of the light in a vacuum.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("wavelength")]
        public LengthMeasure Wavelength {
            get {
                return wavelengthField;
            } 
            set {
                wavelengthField = value;
                NotifyPropertyChanged("Wavelength");
            }
        }

        private LengthMeasure wavelengthField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength at which this attenuation was measured. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberOneWayAttenuation", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The power loss for one way travel of a beam of light, usually measured in decibels per unit length. It is necessary to include both the value (and its unit) and the wavelength at which this attenuation was measured. ")]
    public partial class FiberOneWayAttenuation : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The value of the one way loss per unit of length. The usual uom is decibels per kilometre (dB/km) although this might vary depending on the calibration method used.
        /// </summary>
		[Required]
        [Description("The value of the one way loss per unit of length. The usual uom is decibels per kilometre (dB/km) although this might vary depending on the calibration method used.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "attenuationMeasure")]
		[XmlElement("value")]
        public AttenuationMeasure Value {
            get {
                return valueField;
            } 
            set {
                valueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private AttenuationMeasure valueField; 

        /// <summary>
        /// The frequency for which the one way loss is measured. 
        /// </summary>
        [ComponentElement]
        [XmlElement("frequency")]
        [EnergisticsDataTypeAttribute(DataType = "frequencyMeasure")]
        public FrequencyMeasure Frequency {
            get {
                return frequencyField;
            } 
            set {
                if (value != null && WavelengthSpecified) throw new Exception("Cannot set property Frequency when property Wavelength is already set");
                frequencyField = value;
                FrequencySpecified = (value!=null);
                NotifyPropertyChanged("Frequency");
            }
        }

        private FrequencyMeasure frequencyField; 
        private bool frequencySpecified = false; 

        /// <summary>
        /// bool to indicate if Frequency has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool FrequencySpecified
        {
            get {
                return frequencySpecified;
            }
            set {
                frequencySpecified= value;
            }
        }

        /// <summary>
        /// The wavelength for which the one way loss is measured. 
        /// </summary>
        [ComponentElement]
        [XmlElement("wavelength")]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
        public LengthMeasure Wavelength {
            get {
                return wavelengthField;
            } 
            set {
                if (value != null && FrequencySpecified) throw new Exception("Cannot set property Wavelength when property Frequency is already set");
                wavelengthField = value;
                WavelengthSpecified = (value!=null);
                NotifyPropertyChanged("Wavelength");
            }
        }

        private LengthMeasure wavelengthField; 
        private bool wavelengthSpecified = false; 

        /// <summary>
        /// bool to indicate if Wavelength has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool WavelengthSpecified
        {
            get {
                return wavelengthSpecified;
            }
            set {
                wavelengthSpecified= value;
            }
        }


		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The means by which this fiber segment is conveyed into the well. A choice between a permanent, intervention or control line conveyance method.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberConveyance", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The means by which this fiber segment is conveyed into the well. A choice between a permanent, intervention or control line conveyance method.")]
    public partial class FiberConveyance : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Information on type of intervention conveyance used by the optical path. 
        /// </summary>
        [ComponentElement]
        [XmlElement("intervention")]
        [EnergisticsDataTypeAttribute(DataType = "cs_interventionConveyance")]
        public InterventionConveyance Intervention {
            get {
                return interventionField;
            } 
            set {
                if (value != null && FiberControlLineSpecified) throw new Exception("Cannot set property Intervention when property FiberControlLine is already set");
                if (value != null && PermanentSpecified) throw new Exception("Cannot set property Intervention when property Permanent is already set");
                interventionField = value;
                InterventionSpecified = (value!=null);
                NotifyPropertyChanged("Intervention");
            }
        }

        private InterventionConveyance interventionField; 
        private bool interventionSpecified = false; 

        /// <summary>
        /// bool to indicate if Intervention has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool InterventionSpecified
        {
            get {
                return interventionSpecified;
            }
            set {
                interventionSpecified= value;
            }
        }

        /// <summary>
        /// Information on type of permanent conveyance used by the optical path. 
        /// </summary>
        [ComponentElement]
        [XmlElement("permanent")]
        [EnergisticsDataTypeAttribute(DataType = "cs_permanentCable")]
        public PermanentCable Permanent {
            get {
                return permanentField;
            } 
            set {
                if (value != null && FiberControlLineSpecified) throw new Exception("Cannot set property Permanent when property FiberControlLine is already set");
                if (value != null && InterventionSpecified) throw new Exception("Cannot set property Permanent when property Intervention is already set");
                permanentField = value;
                PermanentSpecified = (value!=null);
                NotifyPropertyChanged("Permanent");
            }
        }

        private PermanentCable permanentField; 
        private bool permanentSpecified = false; 

        /// <summary>
        /// bool to indicate if Permanent has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PermanentSpecified
        {
            get {
                return permanentSpecified;
            }
            set {
                permanentSpecified= value;
            }
        }

        /// <summary>
        /// Information regarding the control line into which a fiber cable may be pumped in order to measure a facility. 
        /// </summary>
        [ComponentElement]
        [XmlElement("fiberControlLine")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberControlLine")]
        public FiberControlLine FiberControlLine {
            get {
                return fiberControlLineField;
            } 
            set {
                if (value != null && InterventionSpecified) throw new Exception("Cannot set property FiberControlLine when property Intervention is already set");
                if (value != null && PermanentSpecified) throw new Exception("Cannot set property FiberControlLine when property Permanent is already set");
                fiberControlLineField = value;
                FiberControlLineSpecified = (value!=null);
                NotifyPropertyChanged("FiberControlLine");
            }
        }

        private FiberControlLine fiberControlLineField; 
        private bool fiberControlLineSpecified = false; 

        /// <summary>
        /// bool to indicate if FiberControlLine has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool FiberControlLineSpecified
        {
            get {
                return fiberControlLineSpecified;
            }
            set {
                fiberControlLineSpecified= value;
            }
        }



        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information regarding the control line into which a fiber cable may be pumped in order to measure a facility.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberControlLine", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information regarding the control line into which a fiber cable may be pumped in order to measure a facility.")]
    public partial class FiberControlLine : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Enum of the common sizes of control line. The enum list gives diameters and weight per length values. A fiber may be installed inside the control line.
        /// </summary>
		[Required]
        [Description("Enum of the common sizes of control line. The enum list gives diameters and weight per length values.  A fiber may be installed inside the control line.")]
        [EnergisticsDataTypeAttribute(DataType = "ControlLineSize")]
		[XmlElement("size")]
        public ControlLineSize? Size {
            get {
                return sizeField;
            } 
            set {
                sizeField = value;
                 this.SizeSpecified = true;
                NotifyPropertyChanged("Size");
            }
        }

        
        private bool SizeSpecifiedField = false;
        
        /// <summary>
        /// SizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool SizeSpecified {
            get {
                return SizeSpecifiedField;
            } 
            set {
                SizeSpecifiedField = value;
                NotifyPropertyChanged("SizeSpecified");
            }
        }
        
        private ControlLineSize? sizeField; 

        /// <summary>
        /// Enum of the common materials from which control line may be made. A fiber may be installed inside the control line.
        /// </summary>
		[Required]
        [Description("Enum of the common materials from which control line may be made.  A fiber may be installed inside the control line.")]
        [EnergisticsDataTypeAttribute(DataType = "ControlLineMaterial")]
		[XmlElement("material")]
        public ControlLineMaterial? Material {
            get {
                return materialField;
            } 
            set {
                materialField = value;
                 this.MaterialSpecified = true;
                NotifyPropertyChanged("Material");
            }
        }

        
        private bool MaterialSpecifiedField = false;
        
        /// <summary>
        /// MaterialSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MaterialSpecified {
            get {
                return MaterialSpecifiedField;
            } 
            set {
                MaterialSpecifiedField = value;
                NotifyPropertyChanged("MaterialSpecified");
            }
        }
        
        private ControlLineMaterial? materialField; 

        /// <summary>
        /// Enum of square or round encapsulation for a control line. A fiber may be installed inside the control line.
        /// </summary>
		[Required]
        [Description("Enum of square or round encapsulation  for a control line.   A fiber may be installed inside the control line.")]
        [EnergisticsDataTypeAttribute(DataType = "ControlLineEncapsulationType")]
		[XmlElement("encapsulationType")]
        public ControlLineEncapsulationType? EncapsulationType {
            get {
                return encapsulationTypeField;
            } 
            set {
                encapsulationTypeField = value;
                 this.EncapsulationTypeSpecified = true;
                NotifyPropertyChanged("EncapsulationType");
            }
        }

        
        private bool EncapsulationTypeSpecifiedField = false;
        
        /// <summary>
        /// EncapsulationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EncapsulationTypeSpecified {
            get {
                return EncapsulationTypeSpecifiedField;
            } 
            set {
                EncapsulationTypeSpecifiedField = value;
                NotifyPropertyChanged("EncapsulationTypeSpecified");
            }
        }
        
        private ControlLineEncapsulationType? encapsulationTypeField; 

        /// <summary>
        /// Enum of the size of encapsulation of a fiber within a control line.
        /// </summary>
		[Required]
        [Description("Enum of the size of encapsulation of a fiber within a control line.")]
        [EnergisticsDataTypeAttribute(DataType = "ControlLineEncapsulationSize")]
		[XmlElement("encapsulationSize")]
        public ControlLineEncapsulationSize? EncapsulationSize {
            get {
                return encapsulationSizeField;
            } 
            set {
                encapsulationSizeField = value;
                 this.EncapsulationSizeSpecified = true;
                NotifyPropertyChanged("EncapsulationSize");
            }
        }

        
        private bool EncapsulationSizeSpecifiedField = false;
        
        /// <summary>
        /// EncapsulationSizeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EncapsulationSizeSpecified {
            get {
                return EncapsulationSizeSpecifiedField;
            } 
            set {
                EncapsulationSizeSpecifiedField = value;
                NotifyPropertyChanged("EncapsulationSizeSpecified");
            }
        }
        
        private ControlLineEncapsulationSize? encapsulationSizeField; 

        /// <summary>
        /// A descriptive remark about the fiber control line
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the fiber control line")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// The activity of pumping the fiber downhole into a control line (small diameter tube). 
        /// </summary>
		[Description("The activity of pumping the fiber downhole into a control line (small diameter tube).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberPumpActivity")]
		[XmlElement("pumpActivity")]
        public List<FiberPumpActivity> PumpActivity {
            get {
                return pumpActivityField;
            } 
            set {
                pumpActivityField = value;
                NotifyPropertyChanged("PumpActivity");
            }
        }

         /// <summary>
         /// bool to indicate if PumpActivity has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool PumpActivitySpecified
         {
             get {
             if(pumpActivityField!=null)
                 return pumpActivityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberPumpActivity> pumpActivityField; 

		/// <summary>
        /// A reference to the control line string in a Completion data-object which represents this control line containing a fiber.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the control line string in a Completion data-object which represents this control line containing a fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("downholeControlLineRefUID")]
		
        public string DownholeControlLineRefUID {
            get {
                return downholeControlLineRefUIDField;
            } 
            set {
                downholeControlLineRefUIDField = value;
                NotifyPropertyChanged("DownholeControlLineRefUID");
            }
        }

        private string downholeControlLineRefUIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The activity of pumping the fiber downhole into a control line (small diameter tube).
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberPumpActivity", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The activity of pumping the fiber downhole into a control line (small diameter tube).")]
    public partial class FiberPumpActivity : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A name which can be used to reference the pumping activity. In general a pumping activity does not have a natural name so that this element will not be often used.
        /// </summary>
		[StringLength(64)]
        [Description("A name which can be used to reference the pumping activity. In general a pumping activity does not have a natural name so that this element will not be often used.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// The name of the InstalledFiberInstance that this activity relates to.
        /// </summary>
		[Description("The name of the InstalledFiberInstance that this activity relates to.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("installedFiber")]
        public RefNameString InstalledFiber {
            get {
                return installedFiberField;
            } 
            set {
                installedFiberField = value;
                NotifyPropertyChanged("InstalledFiber");
            }
        }

        private RefNameString installedFiberField; 

        /// <summary>
        /// The date of the pumping activity.
        /// </summary>
		[Description("The date of the pumping activity.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("pumpingDate", DataType="date")]
        public DateTime? PumpingDate {
            get {
                return pumpingDateField;
            } 
            set {
                pumpingDateField = value;
                 this.PumpingDateSpecified = true;
                NotifyPropertyChanged("PumpingDate");
            }
        }

        private DateTime? pumpingDateField; 

        /// <summary>
        /// pumpingDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PumpingDateSpecified {
            get {
                return pumpingDateSpecifiedField;
            } 
            set {
                pumpingDateSpecifiedField = value;
                NotifyPropertyChanged("PumpingDateSpecified");
            }
        }

        private bool pumpingDateSpecifiedField; 

        /// <summary>
        /// The person in charge of the pumping activity.
        /// </summary>
		[StringLength(64)]
        [Description("The person in charge of the pumping activity.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("engineerName")]
        public string EngineerName {
            get {
                return engineerNameField;
            } 
            set {
                engineerNameField = value;
                NotifyPropertyChanged("EngineerName");
            }
        }

        private string engineerNameField; 

        /// <summary>
        /// The company that performed the pumping activity.
        /// </summary>
		[StringLength(64)]
        [Description("The company that performed the pumping activity.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("serviceCompany")]
        public string ServiceCompany {
            get {
                return serviceCompanyField;
            } 
            set {
                serviceCompanyField = value;
                NotifyPropertyChanged("ServiceCompany");
            }
        }

        private string serviceCompanyField; 

        /// <summary>
        /// The type of fluid used in the pump.
        /// </summary>
		[StringLength(40)]
        [Description("The type of fluid used in the pump.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("pumpFluidType")]
        public string PumpFluidType {
            get {
                return pumpFluidTypeField;
            } 
            set {
                pumpFluidTypeField = value;
                NotifyPropertyChanged("PumpFluidType");
            }
        }

        private string pumpFluidTypeField; 

        /// <summary>
        /// The type of fluid used in the control line.
        /// </summary>
		[StringLength(40)]
        [Description("The type of fluid used in the control line.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("controlLineFluid")]
        public string ControlLineFluid {
            get {
                return controlLineFluidField;
            } 
            set {
                controlLineFluidField = value;
                NotifyPropertyChanged("ControlLineFluid");
            }
        }

        private string controlLineFluidField; 

        /// <summary>
        /// The direction of the pumping.
        /// </summary>
		[StringLength(40)]
        [Description("The direction of the pumping.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("pumpDirection")]
        public string PumpDirection {
            get {
                return pumpDirectionField;
            } 
            set {
                pumpDirectionField = value;
                NotifyPropertyChanged("PumpDirection");
            }
        }

        private string pumpDirectionField; 

        /// <summary>
        /// The type of end seal on the fiber.
        /// </summary>
		[StringLength(40)]
        [Description("The type of end seal on the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("fiberEndSeal")]
        public string FiberEndSeal {
            get {
                return fiberEndSealField;
            } 
            set {
                fiberEndSealField = value;
                NotifyPropertyChanged("FiberEndSeal");
            }
        }

        private string fiberEndSealField; 

        /// <summary>
        /// The type of cable meter.
        /// </summary>
		[StringLength(40)]
        [Description("The type of cable meter.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("cableMeterType")]
        public string CableMeterType {
            get {
                return cableMeterTypeField;
            } 
            set {
                cableMeterTypeField = value;
                NotifyPropertyChanged("CableMeterType");
            }
        }

        private string cableMeterTypeField; 

        /// <summary>
        /// The serial number of the cable meter.
        /// </summary>
		[StringLength(64)]
        [Description("The serial number of the cable meter.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("cableMeterSerialNumber")]
        public string CableMeterSerialNumber {
            get {
                return cableMeterSerialNumberField;
            } 
            set {
                cableMeterSerialNumberField = value;
                NotifyPropertyChanged("CableMeterSerialNumber");
            }
        }

        private string cableMeterSerialNumberField; 

        /// <summary>
        /// The date the cable meter was calibrated.
        /// </summary>
		[Description("The date the cable meter was calibrated.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("cableMeterCalibrationDate", DataType="date")]
        public DateTime? CableMeterCalibrationDate {
            get {
                return cableMeterCalibrationDateField;
            } 
            set {
                cableMeterCalibrationDateField = value;
                 this.CableMeterCalibrationDateSpecified = true;
                NotifyPropertyChanged("CableMeterCalibrationDate");
            }
        }

        private DateTime? cableMeterCalibrationDateField; 

        /// <summary>
        /// cableMeterCalibrationDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool CableMeterCalibrationDateSpecified {
            get {
                return cableMeterCalibrationDateSpecifiedField;
            } 
            set {
                cableMeterCalibrationDateSpecifiedField = value;
                NotifyPropertyChanged("CableMeterCalibrationDateSpecified");
            }
        }

        private bool cableMeterCalibrationDateSpecifiedField; 

        /// <summary>
        /// The length of the excess fiber that was removed.
        /// </summary>
		[Description("The length of the excess fiber that was removed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("excessFiberRecovered")]
        public LengthMeasure ExcessFiberRecovered {
            get {
                return excessFiberRecoveredField;
            } 
            set {
                excessFiberRecoveredField = value;
                NotifyPropertyChanged("ExcessFiberRecovered");
            }
        }

        private LengthMeasure excessFiberRecoveredField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// Comment about the pump activity.
        /// </summary>
		[StringLength(4000)]
        [Description("Comment about the pump activity.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on type of intervention conveyance used by the optical path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_interventionConveyance", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information on type of intervention conveyance used by the optical path.")]
    public partial class InterventionConveyance : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Enum. For intervention conveyance option, the type of conveyance. Example: coiled tubing.
        /// </summary>
		[Required]
        [Description("Enum. For intervention conveyance option, the type of conveyance. Example: coiled tubing.")]
        [EnergisticsDataTypeAttribute(DataType = "InterventionConveyanceType")]
		[XmlElement("interventionConveyanceType")]
        public InterventionConveyanceType? InterventionConveyanceType {
            get {
                return interventionConveyanceTypeField;
            } 
            set {
                interventionConveyanceTypeField = value;
                 this.InterventionConveyanceTypeSpecified = true;
                NotifyPropertyChanged("InterventionConveyanceType");
            }
        }

        
        private bool InterventionConveyanceTypeSpecifiedField = false;
        
        /// <summary>
        /// InterventionConveyanceTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InterventionConveyanceTypeSpecified {
            get {
                return InterventionConveyanceTypeSpecifiedField;
            } 
            set {
                InterventionConveyanceTypeSpecifiedField = value;
                NotifyPropertyChanged("InterventionConveyanceTypeSpecified");
            }
        }
        
        private InterventionConveyanceType? interventionConveyanceTypeField; 

        /// <summary>
        /// Comment about the intervention conveyance.
        /// </summary>
		[StringLength(4000)]
        [Description("Comment about the intervention conveyance.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information on type of permanent conveyance used by the optical path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_permanentCable", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information on type of permanent conveyance used by the optical path.")]
    public partial class PermanentCable : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Enum. For permanent conveyance option, the type of conveyance. Example: clamped to tubular
        /// </summary>
		[Required]
        [Description("Enum. For permanent conveyance option, the type of conveyance. Example: clamped to tubular")]
        [EnergisticsDataTypeAttribute(DataType = "PermanentCableInstallationType")]
		[XmlElement("permanentCableInstallationType")]
        public PermanentCableInstallationType? PermanentCableInstallationType {
            get {
                return permanentCableInstallationTypeField;
            } 
            set {
                permanentCableInstallationTypeField = value;
                 this.PermanentCableInstallationTypeSpecified = true;
                NotifyPropertyChanged("PermanentCableInstallationType");
            }
        }

        
        private bool PermanentCableInstallationTypeSpecifiedField = false;
        
        /// <summary>
        /// PermanentCableInstallationTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool PermanentCableInstallationTypeSpecified {
            get {
                return PermanentCableInstallationTypeSpecifiedField;
            } 
            set {
                PermanentCableInstallationTypeSpecifiedField = value;
                NotifyPropertyChanged("PermanentCableInstallationTypeSpecified");
            }
        }
        
        private PermanentCableInstallationType? permanentCableInstallationTypeField; 

        /// <summary>
        /// Comment about the intervention conveyance.
        /// </summary>
		[StringLength(4000)]
        [Description("Comment about the intervention conveyance.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The instrument box used for distributed temperature surveys
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="grp_dtsInstrumentBox", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The instrument box used for distributed temperature surveys")]
    public partial class Grp_dtsInstrumentBox : Instrument, INotifyPropertyChanged
    {

        /// <summary>
        /// serial_number property
        /// </summary>
		[Description("An identification tag for the instrument box. A serial number is a type of identification tag however some tags contain many pieces of information. This structure just identifies the tag and does not describe the contents.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("serial_number")]
        public string Serial_number {
            get {
                return serial_numberField;
            } 
            set {
                serial_numberField = value;
                NotifyPropertyChanged("Serial_number");
            }
        }

        private string serial_numberField; 

        /// <summary>
        /// internalOvenLocationNear property
        /// </summary>
		[Description("Near distance of the oven from the beginning of the fiber.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("internalOvenLocationNear")]
        public LengthMeasure InternalOvenLocationNear {
            get {
                return internalOvenLocationNearField;
            } 
            set {
                internalOvenLocationNearField = value;
                NotifyPropertyChanged("InternalOvenLocationNear");
            }
        }

        private LengthMeasure internalOvenLocationNearField; 

        /// <summary>
        /// internalOvenLocationFar property
        /// </summary>
		[Description("Far distance of the oven from the beginning of the fiber.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("internalOvenLocationFar")]
        public LengthMeasure InternalOvenLocationFar {
            get {
                return internalOvenLocationFarField;
            } 
            set {
                internalOvenLocationFarField = value;
                NotifyPropertyChanged("InternalOvenLocationFar");
            }
        }

        private LengthMeasure internalOvenLocationFarField; 

        /// <summary>
        /// referenceCoilTemperature property
        /// </summary>
		[Description("The temperature of the oven.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "thermodynamicTemperatureMeasure")]
		[XmlElement("referenceCoilTemperature")]
        public ThermodynamicTemperatureMeasure ReferenceCoilTemperature {
            get {
                return referenceCoilTemperatureField;
            } 
            set {
                referenceCoilTemperatureField = value;
                NotifyPropertyChanged("ReferenceCoilTemperature");
            }
        }

        private ThermodynamicTemperatureMeasure referenceCoilTemperatureField; 

        /// <summary>
        /// parameter property
        /// </summary>
		[Description("Additional parameters to define the instrument box as a  piece of equipment. These should not be parameters to define the installation  or use of the box in the wellbore, or other system. This element should be used  only if an appropriate parameter is not available as an element, or in the  calibration operation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "indexedObject")]
		[XmlElement("parameter")]
        public List<IndexedObject> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<IndexedObject> parameterField; 

        /// <summary>
        /// warmupTime property
        /// </summary>
		[Description("The duration of time starting from the initiation of the first temperature measurement until the unit complies with the stated values of the main measurement specifications.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("warmupTime")]
        public TimeMeasure WarmupTime {
            get {
                return warmupTimeField;
            } 
            set {
                warmupTimeField = value;
                NotifyPropertyChanged("WarmupTime");
            }
        }

        private TimeMeasure warmupTimeField; 

        /// <summary>
        /// startupTime property
        /// </summary>
		[Description("The start-up time is the duration of time from the initial powering on the instrument until the first temperature measurement is permitted.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("startupTime")]
        public TimeMeasure StartupTime {
            get {
                return startupTimeField;
            } 
            set {
                startupTimeField = value;
                NotifyPropertyChanged("StartupTime");
            }
        }

        private TimeMeasure startupTimeField; 

        /// <summary>
        /// instrumentCalibration property
        /// </summary>
		[Description("Calibration parameters vary from vendor to vendor, depending  on the calibration method being used. This is a general type that allows a calibration  date, business associate, and many  name/value pairs.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_dtsCalibration")]
		[XmlElement("instrumentCalibration")]
        public List<DtsCalibration> InstrumentCalibration {
            get {
                return instrumentCalibrationField;
            } 
            set {
                instrumentCalibrationField = value;
                NotifyPropertyChanged("InstrumentCalibration");
            }
        }

         /// <summary>
         /// bool to indicate if InstrumentCalibration has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InstrumentCalibrationSpecified
         {
             get {
             if(instrumentCalibrationField!=null)
                 return instrumentCalibrationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsCalibration> instrumentCalibrationField; 

        /// <summary>
        /// extensionNameValue property
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

        /// <summary>
        /// cs_dtsPatchCord property
        /// </summary>
		[Description("Information regarding the patch cord used to connect the instrument box to the start of the optical fiber path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_dtsPatchCord")]
		[XmlElement("cs_dtsPatchCord")]
        public DtsPatchCord Cs_dtsPatchCord {
            get {
                return cs_dtsPatchCordField;
            } 
            set {
                cs_dtsPatchCordField = value;
                NotifyPropertyChanged("Cs_dtsPatchCord");
            }
        }

        private DtsPatchCord cs_dtsPatchCordField; 


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is a general type that allows a calibration date, business associate, and many name/value pairs.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dtsCalibration", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Calibration parameters vary from vendor to vendor, depending on the calibration method being used. This is a general type that allows a calibration date, business associate, and many name/value pairs.")]
    public partial class DtsCalibration : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date of the calibration
        /// </summary>
		[Description("The date of the calibration")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("dTimCalibration", DataType="date")]
        public DateTime? DateTimeCalibration {
            get {
                return dTimCalibrationField;
            } 
            set {
                dTimCalibrationField = value;
                 this.DateTimeCalibrationSpecified = true;
                NotifyPropertyChanged("DateTimeCalibration");
            }
        }

        private DateTime? dTimCalibrationField; 

        /// <summary>
        /// dTimCalibrationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeCalibrationSpecified {
            get {
                return dTimCalibrationSpecifiedField;
            } 
            set {
                dTimCalibrationSpecifiedField = value;
                NotifyPropertyChanged("DateTimeCalibrationSpecified");
            }
        }

        private bool dTimCalibrationSpecifiedField; 

        /// <summary>
        /// The business associate that performed the calibration.
        /// </summary>
		[StringLength(64)]
        [Description("The business associate that performed the calibration.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("calibratedBy")]
        public string CalibratedBy {
            get {
                return calibratedByField;
            } 
            set {
                calibratedByField = value;
                NotifyPropertyChanged("CalibratedBy");
            }
        }

        private string calibratedByField; 

        /// <summary>
        /// This may be a standard protocol, or a software application.
        /// </summary>
		[StringLength(64)]
        [Description("This may be a standard protocol, or a software application.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("calibrationProtocol")]
        public string CalibrationProtocol {
            get {
                return calibrationProtocolField;
            } 
            set {
                calibrationProtocolField = value;
                NotifyPropertyChanged("CalibrationProtocol");
            }
        }

        private string calibrationProtocolField; 

        /// <summary>
        /// Attribute name is the name of the parameter. Optional attribute uom is the unit of measure of the parameter. The value of the element is the value of the parameter. Note that a string value may appear as a parameter.
        /// </summary>
		[Description("Attribute name is the name of the parameter. Optional attribute  uom is the unit of measure of the parameter. The value of the element is the value  of the parameter. Note that a string value may appear as a parameter.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "calibrationParameter")]
		[XmlElement("parameter")]
        public List<CalibrationParameter> Parameter {
            get {
                return parameterField;
            } 
            set {
                parameterField = value;
                NotifyPropertyChanged("Parameter");
            }
        }

         /// <summary>
         /// bool to indicate if Parameter has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ParameterSpecified
         {
             get {
             if(parameterField!=null)
                 return parameterField.Count>0?true:false;
             else return false;
             }
         }
        private List<CalibrationParameter> parameterField; 

        /// <summary>
        /// Any remarks that may be useful, regarding the calibration information.
        /// </summary>
		[StringLength(4000)]
        [Description("Any remarks that may be useful, regarding the calibration information.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("remarks")]
        public string Remarks {
            get {
                return remarksField;
            } 
            set {
                remarksField = value;
                NotifyPropertyChanged("Remarks");
            }
        }

        private string remarksField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// This class represents the calibrationParameter xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="calibrationParameter", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("This class represents the calibrationParameter xsd type.")]
    public partial class CalibrationParameter : Object, INotifyPropertyChanged
    {
        /// <summary>
        /// Initializes a new instance of the CalibrationParameter class.
        /// </summary>
        public CalibrationParameter() {}

        /// <summary>
        /// Initializes a new instance of the CalibrationParameter class.
        /// </summary>
        /// <param name="value">Initial value</param>
        /// <param name="uom">Initial unit of measure</param>
        public CalibrationParameter(string value, string uom)
        {
            this.Uom = uom;
            this.Value = value;
        }

        /// <summary>
        /// Returns a string that represents the current object.
        /// </summary>
        public override string ToString()
        {
            return Value + " " + Uom;
        }

		/// <summary>
        /// The unit of measure of the parameter value.
        /// </summary>
		[StringLength(24)]
        [Description("The unit of measure of the parameter value.")]
        [EnergisticsDataTypeAttribute(DataType = "uomString")]
        [XmlAttribute("uom")]
		
        public string Uom {
            get {
                return uomField;
            } 
            set {
                uomField = value;
                NotifyPropertyChanged("Uom");
            }
        }

        private string uomField; 

		/// <summary>
        /// The name of the parameter.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of the parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
        [XmlAttribute("name")]
		
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Value property
        /// </summary>
        [StringLength(64)]
        [XmlText]
        public string Value {
            get {
                return ValueField;
            } 
            set {
                ValueField = value;
                NotifyPropertyChanged("Value");
            }
        }

        private string ValueField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information regarding the patch cord used to connect the instrument box to the start of the optical fiber path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dtsPatchCord", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information regarding the patch cord used to connect the instrument box to the start of the optical fiber path.")]
    public partial class DtsPatchCord : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Optical distance between the instrument and the end of the patch cord that will be attached to the rest of the optical path from which a measurement will be taken.
        /// </summary>
		[Description("Optical distance between the instrument and the end of the patch cord that will be attached to the rest of the optical path from which a measurement will be taken.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("fiberLength")]
        public LengthMeasure FiberLength {
            get {
                return fiberLengthField;
            } 
            set {
                fiberLengthField = value;
                NotifyPropertyChanged("FiberLength");
            }
        }

        private LengthMeasure fiberLengthField; 

        /// <summary>
        /// A textual description of the patch cord
        /// </summary>
		[StringLength(4000)]
        [Description("A textual description of the patch cord")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("description")]
        public string Description {
            get {
                return descriptionField;
            } 
            set {
                descriptionField = value;
                NotifyPropertyChanged("Description");
            }
        }

        private string descriptionField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// IF facility mapping is to a pipeline, this element shows what optical path distances map to pipeline lengths.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberFacilityPipeline", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("IF facility mapping is to a pipeline, this element shows what optical path distances map to pipeline lengths.")]
    public partial class FiberFacilityPipeline : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of this facilityMapping instance.
        /// </summary>
		[Required]
        [Description("The name of this facilityMapping instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("name")]
        public NameStruct Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private NameStruct nameField; 

        /// <summary>
        /// A description of which "port" ie, connection/end or defined point on a pipeline the facilityLength is indexed from. 
        /// </summary>
		[Description("A description of which \"port\" ie, connection/end or defined point on a pipeline the facilityLength is indexed from.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("datumPortReference")]
        public string DatumPortReference {
            get {
                return datumPortReferenceField;
            } 
            set {
                datumPortReferenceField = value;
                NotifyPropertyChanged("DatumPortReference");
            }
        }

        private string datumPortReferenceField; 

        /// <summary>
        /// The name of the facility which is represented by this facilityMapping 
        /// </summary>
		[Description("The name of the facility which is represented by this facilityMapping")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// The kind of facility mapped to the optical path. Expected to be a pipeline but this element can be used to show other facilities being mapped to fiber length in future.
        /// </summary>
		[StringLength(40)]
        [Description("The kind of facility mapped to the optical path. Expected to be a pipeline but this element can be used to show other facilities being mapped to fiber length in future.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("kind")]
        public string Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string kindField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public FacilityIdentifierStruct ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

        private FacilityIdentifierStruct contextFacilityField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// IF facility mapping is to a wellbore, this element shows what optical path distances map to wellbore measured depths.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberFacilityWell", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("IF facility mapping is to a wellbore, this element shows what optical path distances map to wellbore measured depths.")]
    public partial class FiberFacilityWell : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of this facilityMapping instance.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("The name of this facilityMapping instance.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// Human recognizable context for the well that contains the well.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the well that contains the well.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWell")]
        public string NameWell {
            get {
                return nameWellField;
            } 
            set {
                nameWellField = value;
                NotifyPropertyChanged("NameWell");
            }
        }

        private string nameWellField; 

        /// <summary>
        /// Human recognizable context for the wellbore that contains the optical path being mapped to the wellbore.
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("Human recognizable context for the wellbore that contains the optical path being mapped to the wellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("nameWellbore")]
        public string NameWellbore {
            get {
                return nameWellboreField;
            } 
            set {
                nameWellboreField = value;
                NotifyPropertyChanged("NameWellbore");
            }
        }

        private string nameWellboreField; 

        /// <summary>
        /// A reference to the wellDatum from which the facilityLength (ie, depth in this case of a wellbore being mapped) is measured from.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("A reference to the wellDatum from which the facilityLength (ie, depth in this case of a wellbore being mapped) is measured from.")]
        [EnergisticsDataTypeAttribute(DataType = "refWellDatum")]
		[XmlElement("wellDatum")]
        public string WellDatum {
            get {
                return wellDatumField;
            } 
            set {
                wellDatumField = value;
                NotifyPropertyChanged("WellDatum");
            }
        }

        private string wellDatumField; 

		/// <summary>
        /// Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the well. This uniquely represents the well referenced by the (possibly non-unique) nameWell.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWell")]
		
        public string UidWell {
            get {
                return uidWellField;
            } 
            set {
                uidWellField = value;
                NotifyPropertyChanged("UidWell");
            }
        }

        private string uidWellField; 

		/// <summary>
        /// Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Unique identifier for the wellbore. This uniquely represents the wellbore referenced by the (possibly non-unique) nameWellbore.")]
        [EnergisticsDataTypeAttribute(DataType = "uidParentString")]
        [XmlAttribute("uidWellbore")]
		
        public string UidWellbore {
            get {
                return uidWellboreField;
            } 
            set {
                uidWellboreField = value;
                NotifyPropertyChanged("UidWellbore");
            }
        }

        private string uidWellboreField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberFacilityMappingPart", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).")]
    public partial class FiberFacilityMappingPart : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Distance between the beginning of the optical path to the distance where the mapping with the facility takes place.
        /// </summary>
		[Description("Distance between the beginning of the optical path to the distance where the mapping with the facility takes place.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("opticalPathDistanceStart")]
        public List<LengthMeasure> OpticalPathDistanceStart {
            get {
                return opticalPathDistanceStartField;
            } 
            set {
                opticalPathDistanceStartField = value;
                NotifyPropertyChanged("OpticalPathDistanceStart");
            }
        }

         /// <summary>
         /// bool to indicate if OpticalPathDistanceStart has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpticalPathDistanceStartSpecified
         {
             get {
             if(opticalPathDistanceStartField!=null)
                 return opticalPathDistanceStartField.Count>0?true:false;
             else return false;
             }
         }
        private List<LengthMeasure> opticalPathDistanceStartField; 

        /// <summary>
        /// Distance between the beginning of the optical path to the distance where the mapping with the facility ends.
        /// </summary>
		[Description("Distance between the beginning of the optical path to the distance where the mapping with the facility ends.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("opticalPathDistanceEnd")]
        public List<LengthMeasure> OpticalPathDistanceEnd {
            get {
                return opticalPathDistanceEndField;
            } 
            set {
                opticalPathDistanceEndField = value;
                NotifyPropertyChanged("OpticalPathDistanceEnd");
            }
        }

         /// <summary>
         /// bool to indicate if OpticalPathDistanceEnd has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpticalPathDistanceEndSpecified
         {
             get {
             if(opticalPathDistanceEndField!=null)
                 return opticalPathDistanceEndField.Count>0?true:false;
             else return false;
             }
         }
        private List<LengthMeasure> opticalPathDistanceEndField; 

        /// <summary>
        /// Distance between the facility datum and the distance where the mapping with the optical path takes place
        /// </summary>
		[Description("Distance between the facility datum and the distance where the mapping with the optical path takes place")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("facilityLengthStart")]
        public List<LengthMeasure> FacilityLengthStart {
            get {
                return facilityLengthStartField;
            } 
            set {
                facilityLengthStartField = value;
                NotifyPropertyChanged("FacilityLengthStart");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityLengthStart has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityLengthStartSpecified
         {
             get {
             if(facilityLengthStartField!=null)
                 return facilityLengthStartField.Count>0?true:false;
             else return false;
             }
         }
        private List<LengthMeasure> facilityLengthStartField; 

        /// <summary>
        /// Distance between the facility datum and the distance where the mapping with the optical path ends.
        /// </summary>
		[Description("Distance between the facility datum and the distance where the mapping with the optical path ends.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("facilityLengthEnd")]
        public List<LengthMeasure> FacilityLengthEnd {
            get {
                return facilityLengthEndField;
            } 
            set {
                facilityLengthEndField = value;
                NotifyPropertyChanged("FacilityLengthEnd");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityLengthEnd has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityLengthEndSpecified
         {
             get {
             if(facilityLengthEndField!=null)
                 return facilityLengthEndField.Count>0?true:false;
             else return false;
             }
         }
        private List<LengthMeasure> facilityLengthEndField; 

        /// <summary>
        /// A descriptive remark about the facility mapping
        /// </summary>
		[Description("A descriptive remark about the facility mapping")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public List<string> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> commentField; 

        /// <summary>
        /// Choice where the facility mapping is inside a well.
        /// </summary>
        [ComponentElement]
        [XmlElement("well")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberFacilityWell")]
        public FiberFacilityWell Well {
            get {
                return wellField;
            } 
            set {
                if (value != null && PipelineSpecified) throw new Exception("Cannot set property Well when property Pipeline is already set");
                wellField = value;
                WellSpecified = (value!=null);
                NotifyPropertyChanged("Well");
            }
        }

        private FiberFacilityWell wellField; 
        private bool wellSpecified = false; 

        /// <summary>
        /// bool to indicate if Well has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool WellSpecified
        {
            get {
                return wellSpecified;
            }
            set {
                wellSpecified= value;
            }
        }

        /// <summary>
        /// Choice where the facility mapping is a pipeline.
        /// </summary>
        [ComponentElement]
        [XmlElement("pipeline")]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberFacilityPipeline")]
        public FiberFacilityPipeline Pipeline {
            get {
                return pipelineField;
            } 
            set {
                if (value != null && WellSpecified) throw new Exception("Cannot set property Pipeline when property Well is already set");
                pipelineField = value;
                PipelineSpecified = (value!=null);
                NotifyPropertyChanged("Pipeline");
            }
        }

        private FiberFacilityPipeline pipelineField; 
        private bool pipelineSpecified = false; 

        /// <summary>
        /// bool to indicate if Pipeline has been set. Used for serialization.
        /// </summary>
        [XmlIgnore]
        public bool PipelineSpecified
        {
            get {
                return pipelineSpecified;
            }
            set {
                pipelineSpecified= value;
            }
        }


		/// <summary>
        /// The uid of this facility mapping part.
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The uid of this facility mapping part.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("mappingPartID")]
		
        public string MappingPartID {
            get {
                return mappingPartIDField;
            } 
            set {
                mappingPartIDField = value;
                NotifyPropertyChanged("MappingPartID");
            }
        }

        private string mappingPartIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The facility mapping relates lengths of fiber to corresponding lengths of facilities (probably wellbores or pipelines). The facilityMapping also contains the datum from which the InterpretedData is indexed. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberFacilityMapping", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The facility mapping relates lengths of fiber to corresponding lengths of facilities (probably wellbores or pipelines). The facilityMapping also contains the datum from which the InterpretedData is indexed. ")]
    public partial class FiberFacilityMapping : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Date when the mapping between the facility and the optical path becomes effective
        /// </summary>
		[Required]
        [Description("Date when the mapping between the facility and the optical path becomes effective")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("timeStart")]
        public Timestamp? TimeStart {
            get {
                return timeStartField;
            } 
            set {
                timeStartField = value;
                NotifyPropertyChanged("TimeStart");
            }
        }

        private Timestamp? timeStartField; 

        /// <summary>
        /// Date when the mapping between the facility and the optical path is no longer valid
        /// </summary>
		[Description("Date when the mapping between the facility and the optical path is no longer valid")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("timeEnd")]
        public Timestamp? TimeEnd {
            get {
                return timeEndField;
            } 
            set {
                timeEndField = value;
                 this.TimeEndSpecified = true;
                NotifyPropertyChanged("TimeEnd");
            }
        }

        private Timestamp? timeEndField; 

        /// <summary>
        /// timeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TimeEndSpecified {
            get {
                return timeEndSpecifiedField;
            } 
            set {
                timeEndSpecifiedField = value;
                NotifyPropertyChanged("TimeEndSpecified");
            }
        }

        private bool timeEndSpecifiedField; 

        /// <summary>
        /// Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).
        /// </summary>
		[Required]
        [Description("Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberFacilityMappingPart")]
		[XmlElement("fiberFacilityMappingPart")]
        public List<FiberFacilityMappingPart> FiberFacilityMappingPart {
            get {
                return fiberFacilityMappingPartField;
            } 
            set {
                fiberFacilityMappingPartField = value;
                NotifyPropertyChanged("FiberFacilityMappingPart");
            }
        }

         /// <summary>
         /// bool to indicate if FiberFacilityMappingPart has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FiberFacilityMappingPartSpecified
         {
             get {
             if(fiberFacilityMappingPartField!=null)
                 return fiberFacilityMappingPartField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberFacilityMappingPart> fiberFacilityMappingPartField; 

        /// <summary>
        /// A descriptive remark about the facility mapping
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the facility mapping")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

		/// <summary>
        /// The uid of this facility mapping collection.
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The uid of this facility mapping collection.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("mappingID")]
		
        public string MappingID {
            get {
                return mappingIDField;
            } 
            set {
                mappingIDField = value;
                NotifyPropertyChanged("MappingID");
            }
        }

        private string mappingIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A zone of the fibre which has defective optical properties (e.g., darkening).
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberPathDefect", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A zone of the fibre which has defective optical properties (e.g., darkening).")]
    public partial class FiberPathDefect : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Starting point of the detected defect as distance in the optical path from the lightbox
        /// </summary>
		[Description("Starting point of the detected defect as distance in the optical path from the lightbox")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("opticalPathDistanceStart")]
        public List<LengthMeasure> OpticalPathDistanceStart {
            get {
                return opticalPathDistanceStartField;
            } 
            set {
                opticalPathDistanceStartField = value;
                NotifyPropertyChanged("OpticalPathDistanceStart");
            }
        }

         /// <summary>
         /// bool to indicate if OpticalPathDistanceStart has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpticalPathDistanceStartSpecified
         {
             get {
             if(opticalPathDistanceStartField!=null)
                 return opticalPathDistanceStartField.Count>0?true:false;
             else return false;
             }
         }
        private List<LengthMeasure> opticalPathDistanceStartField; 

        /// <summary>
        /// Ending point of the detected defect as distance in the optical path from the lightbox. Can have the same value as the 'opticalPathDistanceStart' if the defect is found at a specific location rather than a segment.
        /// </summary>
		[Description("Ending point of the detected defect as distance in the optical path from the lightbox.  Can have the same value as the 'opticalPathDistanceStart' if the defect is found at a specific location rather than a segment.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("opticalPathDistanceEnd")]
        public List<LengthMeasure> OpticalPathDistanceEnd {
            get {
                return opticalPathDistanceEndField;
            } 
            set {
                opticalPathDistanceEndField = value;
                NotifyPropertyChanged("OpticalPathDistanceEnd");
            }
        }

         /// <summary>
         /// bool to indicate if OpticalPathDistanceEnd has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpticalPathDistanceEndSpecified
         {
             get {
             if(opticalPathDistanceEndField!=null)
                 return opticalPathDistanceEndField.Count>0?true:false;
             else return false;
             }
         }
        private List<LengthMeasure> opticalPathDistanceEndField; 

        /// <summary>
        /// Enum. The type of defect on the optical path.
        /// </summary>
		[Description("Enum.  The type of defect on the optical path.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "PathDefectTypes")]
		[XmlElement("defectType")]
        public List<PathDefectTypeList> DefectType {
            get {
                return defectTypeField;
            } 
            set {
                defectTypeField = value;
                NotifyPropertyChanged("DefectType");
            }
        }

         /// <summary>
         /// bool to indicate if DefectType has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DefectTypeSpecified
         {
             get {
             if(defectTypeField!=null)
                 return defectTypeField.Count>0?true:false;
             else return false;
             }
         }
        private List<PathDefectTypeList> defectTypeField; 

        /// <summary>
        /// Date when the defect was detected
        /// </summary>
		[Description("Date when the defect was detected")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("timeStart")]
        public List<DateTime> TimeStart {
            get {
                return timeStartField;
            } 
            set {
                timeStartField = value;
                NotifyPropertyChanged("TimeStart");
            }
        }

         /// <summary>
         /// bool to indicate if TimeStart has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeStartSpecified
         {
             get {
             if(timeStartField!=null)
                 return timeStartField.Count>0?true:false;
             else return false;
             }
         }
        private List<DateTime> timeStartField; 

        /// <summary>
        /// Date when the defect was no longer detected (or was corrected)
        /// </summary>
		[Description("Date when the defect was no longer detected (or was corrected)")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("timeEnd")]
        public List<DateTime> TimeEnd {
            get {
                return timeEndField;
            } 
            set {
                timeEndField = value;
                NotifyPropertyChanged("TimeEnd");
            }
        }

         /// <summary>
         /// bool to indicate if TimeEnd has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeEndSpecified
         {
             get {
             if(timeEndField!=null)
                 return timeEndField.Count>0?true:false;
             else return false;
             }
         }
        private List<DateTime> timeEndField; 

        /// <summary>
        /// A descriptive remark about the defect found on this location
        /// </summary>
		[Description("A descriptive remark about the defect found on this location")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public List<string> Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

         /// <summary>
         /// bool to indicate if Comment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool CommentSpecified
         {
             get {
             if(commentField!=null)
                 return commentField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> commentField; 

		/// <summary>
        /// The uid of this object.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The uid of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("defectID")]
		
        public string DefectID {
            get {
                return defectIDField;
            } 
            set {
                defectIDField = value;
                NotifyPropertyChanged("DefectID");
            }
        }

        private string defectIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(FiberOpticalPathNetwork))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_productFlowModel", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail.")]
    public partial class ProductFlowModel : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The name of the facility which is represented by this model. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility which is represented by this model.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(contextFacilityField!=null)
                 return contextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> contextFacilityField; 

        /// <summary>
        /// The date and time of the start of validity for this model.
        /// </summary>
		[Description("The date and time of the start of validity for this model.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimStart")]
        public Timestamp? DateTimeStart {
            get {
                return dTimStartField;
            } 
            set {
                dTimStartField = value;
                 this.DateTimeStartSpecified = true;
                NotifyPropertyChanged("DateTimeStart");
            }
        }

        private Timestamp? dTimStartField; 

        /// <summary>
        /// dTimStartSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeStartSpecified {
            get {
                return dTimStartSpecifiedField;
            } 
            set {
                dTimStartSpecifiedField = value;
                NotifyPropertyChanged("DateTimeStartSpecified");
            }
        }

        private bool dTimStartSpecifiedField; 

        /// <summary>
        /// The date and time of the termination of validity for this model.
        /// </summary>
		[Description("The date and time of the termination of validity for this model.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dTimEnd")]
        public Timestamp? DateTimeEnd {
            get {
                return dTimEndField;
            } 
            set {
                dTimEndField = value;
                 this.DateTimeEndSpecified = true;
                NotifyPropertyChanged("DateTimeEnd");
            }
        }

        private Timestamp? dTimEndField; 

        /// <summary>
        /// dTimEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateTimeEndSpecified {
            get {
                return dTimEndSpecifiedField;
            } 
            set {
                dTimEndSpecifiedField = value;
                NotifyPropertyChanged("DateTimeEndSpecified");
            }
        }

        private bool dTimEndSpecifiedField; 

        /// <summary>
        /// The time for which "currently existing" data is desired from the network. All connections (and related data) existing at this time (i.e. start and end bracket this value) will will be returned if requested. The existence time is a server query parameter. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The time for which \"currently existing\" data is desired from the network. All connections (and related data) existing at this time (i.e. start and end bracket this value) will will be returned if requested. The existence time is a server query parameter. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("existenceTime")]
        public EndpointQualifiedDateTime ExistenceTime {
            get {
                return existenceTimeField;
            } 
            set {
                existenceTimeField = value;
                NotifyPropertyChanged("ExistenceTime");
            }
        }

        private EndpointQualifiedDateTime existenceTimeField; 

        /// <summary>
        /// The minimum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The minimum time index contained within the report. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return dTimMinField;
            } 
            set {
                dTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime dTimMinField; 

        /// <summary>
        /// The maximum time index contained within the report. The minimum and maximum indexes are server query parameters and will be populated with valid values in a "get" result. See the WITSML API Specification appendix on "Special Handling" of growing objects for a description of the behavior related to this parameter.
        /// </summary>
		[Description("The maximum time index contained within the report. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return dTimMaxField;
            } 
            set {
                dTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime dTimMaxField; 

        /// <summary>
        /// Defines the external port in another Product Flow Model to which an external port in this model is connected. An external port should be connected to an external port with the opposite direction. The connected external port must be in another Product Flow Model. These connections should always be defined on a one-to-one basis. For example, if a facility may receive input from multiple other facilities then a separate input port should be defined for each of those facilities. This allows any question about mass balancing to be contained within each individual model. The external port name must match the name of an external port on the network that represents this model.
        /// </summary>
		[Description("Defines the external port in another Product Flow Model to which  an external port in this model is connected. An external port should be connected to an external port with the opposite direction. The connected external port must be in another Product Flow Model. These connections should always be defined on a one-to-one basis. For example, if a facility may receive input from multiple other facilities then a separate input port should be defined for each of those facilities. This allows any question about mass balancing to be contained  within each individual model. The external port name must match the name of an external port on the network that represents this model.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowExternalReference")]
		[XmlElement("externalConnect")]
        public List<ProductFlowExternalReference> ExternalConnect {
            get {
                return externalConnectField;
            } 
            set {
                externalConnectField = value;
                NotifyPropertyChanged("ExternalConnect");
            }
        }

         /// <summary>
         /// bool to indicate if ExternalConnect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExternalConnectSpecified
         {
             get {
             if(externalConnectField!=null)
                 return externalConnectField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowExternalReference> externalConnectField; 

        /// <summary>
        /// The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail. One of the networks must represent this model.
        /// </summary>
		[Required]
        [Description("The description of one named network within this model. Each model is self contained but may reference other newtorks for defining internal detail. One of the networks must represent this model.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productFlowNetwork")]
		[XmlElement("network")]
        public List<ProductFlowNetwork> Network {
            get {
                return networkField;
            } 
            set {
                networkField = value;
                NotifyPropertyChanged("Network");
            }
        }

         /// <summary>
         /// bool to indicate if Network has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool NetworkSpecified
         {
             get {
             if(networkField!=null)
                 return networkField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowNetwork> networkField; 

        /// <summary>
        /// A descriptive remark about the model.
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the model.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The sequence of connected items of equipment along the optical path. Represented by a flow network.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberOpticalPathNetwork", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The sequence of connected items of equipment along the optical path. Represented by a flow network.")]
    public partial class FiberOpticalPathNetwork : ProductFlowModel, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// The list of equipment used in the optical path. (Equipment may be used in the optical path for different periods of time, so this inventory contains all items of equipment which are used at some period of time).
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_fiberOpticalPathInventory", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("The list of equipment used in the optical path. (Equipment may be used in the optical path for different periods of time, so this inventory contains all items of equipment which are used at some period of time).")]
    public partial class FiberOpticalPathInventory : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A single segment of the optical fiber used for distributed temperature surveys. Multiple such segments may be connected by other types of component including connectors, splices and fiber turnarounds. 
        /// </summary>
		[Required]
        [Description("A single segment of the optical fiber used for distributed temperature surveys. Multiple such segments may be connected by other types of component including connectors, splices and fiber turnarounds.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberOpticalPathSegment")]
		[XmlElement("segment")]
        public List<FiberOpticalPathSegment> Segment {
            get {
                return segmentField;
            } 
            set {
                segmentField = value;
                NotifyPropertyChanged("Segment");
            }
        }

         /// <summary>
         /// bool to indicate if Segment has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SegmentSpecified
         {
             get {
             if(segmentField!=null)
                 return segmentField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOpticalPathSegment> segmentField; 

        /// <summary>
        /// A turnaround component within the optical path. 
        /// </summary>
		[Description("A turnaround component within the optical path.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberTurnaround")]
		[XmlElement("turnaround")]
        public List<FiberTurnaround> Turnaround {
            get {
                return turnaroundField;
            } 
            set {
                turnaroundField = value;
                NotifyPropertyChanged("Turnaround");
            }
        }

         /// <summary>
         /// bool to indicate if Turnaround has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TurnaroundSpecified
         {
             get {
             if(turnaroundField!=null)
                 return turnaroundField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberTurnaround> turnaroundField; 

        /// <summary>
        /// A splice component within the optical path. 
        /// </summary>
		[Description("A splice component within the optical path.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberSplice")]
		[XmlElement("splice")]
        public List<FiberSplice> Splice {
            get {
                return spliceField;
            } 
            set {
                spliceField = value;
                NotifyPropertyChanged("Splice");
            }
        }

         /// <summary>
         /// bool to indicate if Splice has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SpliceSpecified
         {
             get {
             if(spliceField!=null)
                 return spliceField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberSplice> spliceField; 

        /// <summary>
        /// A connection component within the optical path. 
        /// </summary>
		[Description("A connection component within the optical path.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberConnection")]
		[XmlElement("connection")]
        public List<FiberConnection> Connection {
            get {
                return connectionField;
            } 
            set {
                connectionField = value;
                NotifyPropertyChanged("Connection");
            }
        }

         /// <summary>
         /// bool to indicate if Connection has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ConnectionSpecified
         {
             get {
             if(connectionField!=null)
                 return connectionField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberConnection> connectionField; 

        /// <summary>
        /// The terminator of the optical path. This may be a component (in the case of a single ended fiber installation), or it may be a connection back into the instrument box in the case of a double ended fiber installation. 
        /// </summary>
		[Required]
        [Description("The terminator of the optical path. This may be a component (in the case of a single ended fiber installation), or it may be a connection back into the instrument box in the case of a double ended fiber installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberTerminator")]
		[XmlElement("terminator")]
        public FiberTerminator Terminator {
            get {
                return terminatorField;
            } 
            set {
                terminatorField = value;
                NotifyPropertyChanged("Terminator");
            }
        }

        private FiberTerminator terminatorField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The group of elements corresponding to a fiber optical path.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_fiberOpticalPath", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The group of elements corresponding to a fiber optical path.")]
    public partial class FiberOpticalPath : Object, IProdmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [Description("A human understandable name for the fiber. This is used for  identification of the instance.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// inventory property
        /// </summary>
		[Required]
        [Description("The list of equipment used in the optical path.  Equipment may be used in the optical path for different periods of time, so this inventory contains all items of equipment which are used at some period of time.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberOpticalPathInventory")]
		[XmlElement("inventory")]
        public FiberOpticalPathInventory Inventory {
            get {
                return inventoryField;
            } 
            set {
                inventoryField = value;
                NotifyPropertyChanged("Inventory");
            }
        }

        private FiberOpticalPathInventory inventoryField; 

        /// <summary>
        /// opticalPathNetwork property
        /// </summary>
		[Required]
        [Description("The sequence of connected items of equipment along the optical path. Represented by a flow network.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberOpticalPathNetwork")]
		[XmlElement("opticalPathNetwork")]
        public List<FiberOpticalPathNetwork> OpticalPathNetwork {
            get {
                return opticalPathNetworkField;
            } 
            set {
                opticalPathNetworkField = value;
                NotifyPropertyChanged("OpticalPathNetwork");
            }
        }

         /// <summary>
         /// bool to indicate if OpticalPathNetwork has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OpticalPathNetworkSpecified
         {
             get {
             if(opticalPathNetworkField!=null)
                 return opticalPathNetworkField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOpticalPathNetwork> opticalPathNetworkField; 

        /// <summary>
        /// defect property
        /// </summary>
		[Description("A zone of the fibre which has defective optical properties (e.g., darkening).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberPathDefect")]
		[XmlElement("defect")]
        public List<FiberPathDefect> Defect {
            get {
                return defectField;
            } 
            set {
                defectField = value;
                NotifyPropertyChanged("Defect");
            }
        }

         /// <summary>
         /// bool to indicate if Defect has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DefectSpecified
         {
             get {
             if(defectField!=null)
                 return defectField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberPathDefect> defectField; 

        /// <summary>
        /// facilityMapping property
        /// </summary>
		[Description("Relates distances measured along the optical path to specific lengths along facilities (wellbores or pipelines).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberFacilityMapping")]
		[XmlElement("facilityMapping")]
        public List<FiberFacilityMapping> FacilityMapping {
            get {
                return facilityMappingField;
            } 
            set {
                facilityMappingField = value;
                NotifyPropertyChanged("FacilityMapping");
            }
        }

         /// <summary>
         /// bool to indicate if FacilityMapping has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FacilityMappingSpecified
         {
             get {
             if(facilityMappingField!=null)
                 return facilityMappingField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberFacilityMapping> facilityMappingField; 

        /// <summary>
        /// installingVendor property
        /// </summary>
		[Description("The vendor who performed the physical deployment")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("installingVendor")]
        public BusinessAssociate InstallingVendor {
            get {
                return installingVendorField;
            } 
            set {
                installingVendorField = value;
                NotifyPropertyChanged("InstallingVendor");
            }
        }

        private BusinessAssociate installingVendorField; 

        /// <summary>
        /// otdr property
        /// </summary>
		[Description("This records the result arrays along with context information for an Optical Time Domain Reflectometry (OTDR) survey.  The arrays will define the relative scattered power from the Rayleigh scattering vs distance along the fiber.  The actual data values are recorded in a OTDR file and/or image file, which are referenced in subelements.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_fiberOTDR")]
		[XmlElement("otdr")]
        public List<FiberOTDR> Otdr {
            get {
                return otdrField;
            } 
            set {
                otdrField = value;
                NotifyPropertyChanged("Otdr");
            }
        }

         /// <summary>
         /// bool to indicate if Otdr has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool OtdrSpecified
         {
             get {
             if(otdrField!=null)
                 return otdrField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOTDR> otdrField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Header data for a particular collection of interpretation data
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dtsInterpretationData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Header data for a particular collection of interpretation data")]
    public partial class DtsInterpretationData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// facilityMappingRef property
        /// </summary>
		[Required]
        [Description("A reference to the facilityMapping to which this InterpretationData relates. The facility mapping relates a length of fiber to a corresponding length of a facility (probably a wellbore or pipeline). The facilityMapping also contains the datum from which the InterpretedData is indexed.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("facilityMappingRef")]
        public RefNameString FacilityMappingRef {
            get {
                return facilityMappingRefField;
            } 
            set {
                facilityMappingRefField = value;
                NotifyPropertyChanged("FacilityMappingRef");
            }
        }

        private RefNameString facilityMappingRefField; 

        /// <summary>
        /// samplingInterval property
        /// </summary>
		[Required]
        [Description("The “sampling interval” is the difference in fiber distance between consecutive temperature sample points in a single temperature trace.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("samplingInterval")]
        public LengthMeasure SamplingInterval {
            get {
                return samplingIntervalField;
            } 
            set {
                samplingIntervalField = value;
                NotifyPropertyChanged("SamplingInterval");
            }
        }

        private LengthMeasure samplingIntervalField; 

        /// <summary>
        /// badFlag property
        /// </summary>
		[Required]
        [Description("Indicates whether the interpretation log contains bad data or not.  This allows you to keep bad data around (so at least you know that something was generated/acquired) and filter it out when doing relevant data-wise operations.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("badFlag")]
        public bool? BadFlag {
            get {
                return badFlagField;
            } 
            set {
                badFlagField = value;
                NotifyPropertyChanged("BadFlag");
            }
        }

        private bool? badFlagField; 

        /// <summary>
        /// creationStartTime property
        /// </summary>
		[Required]
        [Description("Time when the interpretation log data was generated.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("creationStartTime")]
        public Timestamp? CreationStartTime {
            get {
                return creationStartTimeField;
            } 
            set {
                creationStartTimeField = value;
                NotifyPropertyChanged("CreationStartTime");
            }
        }

        private Timestamp? creationStartTimeField; 

        /// <summary>
        /// interpretationProcessingType property
        /// </summary>
		[Required]
        [Description("Indicates what type of post-processing technique was used to generate this interpretation log.  Enum list. The meaning is that this process was applied to the InterpretedData referenced by the parentInterpretationID.")]
        [EnergisticsDataTypeAttribute(DataType = "InterpretationProcessingType")]
		[XmlElement("interpretationProcessingType")]
        public InterpretationProcessingType? InterpretationProcessingType {
            get {
                return interpretationProcessingTypeField;
            } 
            set {
                interpretationProcessingTypeField = value;
                 this.InterpretationProcessingTypeSpecified = true;
                NotifyPropertyChanged("InterpretationProcessingType");
            }
        }

        
        private bool InterpretationProcessingTypeSpecifiedField = false;
        
        /// <summary>
        /// InterpretationProcessingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool InterpretationProcessingTypeSpecified {
            get {
                return InterpretationProcessingTypeSpecifiedField;
            } 
            set {
                InterpretationProcessingTypeSpecifiedField = value;
                NotifyPropertyChanged("InterpretationProcessingTypeSpecified");
            }
        }
        
        private InterpretationProcessingType? interpretationProcessingTypeField; 

        /// <summary>
        /// indexMnemonic property
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("This is the mnemonic of the channel in the InterpretedData which represents the index to the data (expected to be a length along the facility (e.g., wellbore, pipeline) being measured.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("indexMnemonic")]
        public string IndexMnemonic {
            get {
                return indexMnemonicField;
            } 
            set {
                indexMnemonicField = value;
                NotifyPropertyChanged("IndexMnemonic");
            }
        }

        private string indexMnemonicField; 

        /// <summary>
        /// pointCount property
        /// </summary>
		[Required]
        [Description("The number of rows in this interpreted data object. Each row or \"point\" represents a measurement along the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("pointCount")]
        public short? PointCount {
            get {
                return pointCountField;
            } 
            set {
                pointCountField = value;
                NotifyPropertyChanged("PointCount");
            }
        }

        private short? pointCountField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the interpretation log")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// logDataInterpretation property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_logDataInterpretation")]
		[XmlElement("logDataInterpretation")]
        public LogDataInterpretation LogDataInterpretation {
            get {
                return logDataInterpretationField;
            } 
            set {
                logDataInterpretationField = value;
                NotifyPropertyChanged("LogDataInterpretation");
            }
        }

        private LogDataInterpretation logDataInterpretationField; 

		/// <summary>
        /// Optional element indicating that the referenced InterpretedData object is the parent from which this InterpretedData is derived. Example, this instance may be derived from a parent by the data having been temperature-shifted to match an external data source. The element InterpretationProcessingType is provided to record which type of operation was peformed on the parent data to obtain this instance of data.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Optional element indicating that the referenced InterpretedData object is the parent from which this InterpretedData is derived. Example, this instance may be derived from a parent by the data having been temperature-shifted to match an external data source. The element InterpretationProcessingType is provided to record which type of operation was peformed on the parent data to obtain this instance of data.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("parentInterpretationID")]
		
        public string ParentInterpretationID {
            get {
                return parentInterpretationIDField;
            } 
            set {
                parentInterpretationIDField = value;
                NotifyPropertyChanged("ParentInterpretationID");
            }
        }

        private string parentInterpretationIDField; 

		/// <summary>
        /// Reference to the interpretation for this set of data.
        /// </summary>
		[Required]
        [RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Reference to the  interpretation for this set of data.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("interpretationID")]
		
        public string InterpretationID {
            get {
                return interpretationIDField;
            } 
            set {
                interpretationIDField = value;
                NotifyPropertyChanged("InterpretationID");
            }
        }

        private string interpretationIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Interpreted data in the form of a log of properties vs length along the facility (wellbore or pipeline).
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logDataInterpretation", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Interpreted data in the form of a log of properties vs length along the facility (wellbore or pipeline).")]
    public partial class LogDataInterpretation : LogData, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// WITSML Log - Curve Information The order of the data should correspond to the 'direction'.
    /// </summary>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LogDataInterpretation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(LogDataTrace))]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logData", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("WITSML Log - Curve Information The order of the data should correspond to the 'direction'.")]
    public partial class LogData : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// A comma delimited list of curve mnemonics. Each mnemonic should only occur once in the list. The order of the mnemonics defines the order of the delimited values in elements "unitList" and "data". If the index curve is specified then it must be first in the list. This is an API "column-identifier" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Required]
        [Description("A comma delimited list of curve mnemonics. Each mnemonic should only occur once in the list. The order of the mnemonics defines the order of the  delimited values in elements \"unitList\" and \"data\".  If the index curve is specified then it must be first in the list. This is an API \"column-identifier\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("mnemonicList")]
        public string MnemonicList {
            get {
                return mnemonicListField;
            } 
            set {
                mnemonicListField = value;
                NotifyPropertyChanged("MnemonicList");
            }
        }

        private string mnemonicListField; 

        /// <summary>
        /// A comma delimited list of unit of measure acronyms that represent the values in "data". The units are in the same order as the mnemonics in element mnemonicList. Each unit value must match the value in the logCurveInfo structure for that curve. A null value (i.e., unitless as opposed to dimensionless) will be defined by adjacent commas.
        /// </summary>
		[Required]
        [Description("A comma delimited list of unit of measure acronyms that represent the values in \"data\". The units are in the same order as the mnemonics in element mnemonicList. Each unit value must match the value in the logCurveInfo structure for that curve. A null value (i.e., unitless as opposed to dimensionless) will be defined by adjacent commas.")]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("unitList")]
        public string UnitList {
            get {
                return unitListField;
            } 
            set {
                unitListField = value;
                NotifyPropertyChanged("UnitList");
            }
        }

        private string unitListField; 

        /// <summary>
        /// The actual data corresponding to the curves defined in the "mnemonicList" element. Normally a comma delimited list of data values (see dataDelimiter) with one value for each curve on the log (e.g., "xxx,yyy, zzz"). For array curves, the value of the array curve will be a space delimited list of values that are contained within the commas that delimit the value for that curve (e.g., "xxx,aa bb cc,zzz"). This essentially represents one row of a table where the curve mnemonics represent the column headings. This is an API "data-node" query parameter for growing objects. See the relevant API specification for the query behavior related to this element.
        /// </summary>
		[Description("The actual data corresponding to the curves defined in  the \"mnemonicList\" element. Normally a comma delimited list of data values (see dataDelimiter) with one  value for each curve on the log (e.g., \"xxx,yyy, zzz\"). For array curves, the value of the array curve will be a space delimited list of values that are contained within the commas that delimit the value for that curve (e.g., \"xxx,aa bb cc,zzz\"). This essentially represents one row of a table where the curve  mnemonics represent the column headings. This is an API \"data-node\" query parameter for growing objects.  See the relevant API specification for the query behavior related to this element.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("data")]
        public List<string> Data {
            get {
                return dataField;
            } 
            set {
                dataField = value;
                NotifyPropertyChanged("Data");
            }
        }

         /// <summary>
         /// bool to indicate if Data has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DataSpecified
         {
             get {
             if(dataField!=null)
                 return dataField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> dataField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Recorded trace data from the installed system.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_logDataTrace", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Recorded trace data from the installed system.")]
    public partial class LogDataTrace : LogData, INotifyPropertyChanged
    {


    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Container of interpreted data which also specifies by reference the measured data on which the interpretation is based. 
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dtsInterpretationLogSet", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Container of interpreted data which also specifies by reference the measured data on which the interpretation is based. ")]
    public partial class DtsInterpretationLogSet : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// preferredInterpretationID property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Where there is a set of dtsInterpretedData logs that are generated from the same measurement (each log having gone through a different post-processing type, for example), if there is one log that is ‘preferred’ for additional business decisions (while the other ones were merely what-if scenarios), then this preferred log in the collection of child dtsInterpretedData can be flagged by referencing its UID with this element.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
		[XmlElement("preferredInterpretationID")]
        public string PreferredInterpretationID {
            get {
                return preferredInterpretationIDField;
            } 
            set {
                preferredInterpretationIDField = value;
                NotifyPropertyChanged("PreferredInterpretationID");
            }
        }

        private string preferredInterpretationIDField; 

        /// <summary>
        /// interpretationData property
        /// </summary>
		[Required]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_dtsInterpretationData")]
		[XmlElement("interpretationData")]
        public List<DtsInterpretationData> InterpretationData {
            get {
                return interpretationDataField;
            } 
            set {
                interpretationDataField = value;
                NotifyPropertyChanged("InterpretationData");
            }
        }

         /// <summary>
         /// bool to indicate if InterpretationData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool InterpretationDataSpecified
         {
             get {
             if(interpretationDataField!=null)
                 return interpretationDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsInterpretationData> interpretationDataField; 

		/// <summary>
        /// Mandatory element indicating that the referenced MeasuredTraceSet object is the raw trace data from which this InterpretedData is derived. This is needed so that any InterpretedData can be related to the raw measurement from which it is derived.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Mandatory element indicating that the referenced MeasuredTraceSet object is the raw trace data from which this InterpretedData is derived. This is needed so that any InterpretedData can be related to the raw measurement from which it is derived.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("measurementID")]
		
        public string MeasurementID {
            get {
                return measurementIDField;
            } 
            set {
                measurementIDField = value;
                NotifyPropertyChanged("MeasurementID");
            }
        }

        private string measurementIDField; 

		/// <summary>
        /// The uid of this object.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The uid of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("interpretationLogID")]
		
        public string InterpretationLogID {
            get {
                return interpretationLogIDField;
            } 
            set {
                interpretationLogIDField = value;
                NotifyPropertyChanged("InterpretationLogID");
            }
        }

        private string interpretationLogIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Header data for raw (measured) traces collections
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_dtsMeasurementTrace", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Header data for raw (measured) traces collections")]
    public partial class DtsMeasurementTrace : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// traceProcessingType property
        /// </summary>
		[Required]
        [Description("Denotes whether the trace was stored as acquired by the measurement device or recalibrated in any way.")]
        [EnergisticsDataTypeAttribute(DataType = "TraceProcessingType")]
		[XmlElement("traceProcessingType")]
        public TraceProcessingType? TraceProcessingType {
            get {
                return traceProcessingTypeField;
            } 
            set {
                traceProcessingTypeField = value;
                 this.TraceProcessingTypeSpecified = true;
                NotifyPropertyChanged("TraceProcessingType");
            }
        }

        
        private bool TraceProcessingTypeSpecifiedField = false;
        
        /// <summary>
        /// TraceProcessingTypeSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TraceProcessingTypeSpecified {
            get {
                return TraceProcessingTypeSpecifiedField;
            } 
            set {
                TraceProcessingTypeSpecifiedField = value;
                NotifyPropertyChanged("TraceProcessingTypeSpecified");
            }
        }
        
        private TraceProcessingType? traceProcessingTypeField; 

        /// <summary>
        /// samplingInterval property
        /// </summary>
		[Required]
        [Description("The sampling interval is the difference in fiber distance between consecutive temperature sample points in a single temperature trace.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("samplingInterval")]
        public LengthMeasure SamplingInterval {
            get {
                return samplingIntervalField;
            } 
            set {
                samplingIntervalField = value;
                NotifyPropertyChanged("SamplingInterval");
            }
        }

        private LengthMeasure samplingIntervalField; 

        /// <summary>
        /// indexMnemonic property
        /// </summary>
		[Required]
        [StringLength(32)]
        [Description("This is the mnemonic of the channel in the MeasuredTraceSet which represents the index to the data (expected to be a length along the facility (e.g., wellbore, pipeline) being measured.")]
        [EnergisticsDataTypeAttribute(DataType = "str32")]
		[XmlElement("indexMnemonic")]
        public string IndexMnemonic {
            get {
                return indexMnemonicField;
            } 
            set {
                indexMnemonicField = value;
                NotifyPropertyChanged("IndexMnemonic");
            }
        }

        private string indexMnemonicField; 

        /// <summary>
        /// pointCount property
        /// </summary>
		[Required]
        [Description("The number of rows in this interpreted data object. Each row or \"point\" represents a measurement along the fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "nonNegativeCount")]
		[XmlElement("pointCount")]
        public short? PointCount {
            get {
                return pointCountField;
            } 
            set {
                pointCountField = value;
                NotifyPropertyChanged("PointCount");
            }
        }

        private short? pointCountField; 

        /// <summary>
        /// frequencyRayleigh1 property
        /// </summary>
		[Description("Frequency reference for Rayleigh 1 measurement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "frequencyMeasure")]
		[XmlElement("frequencyRayleigh1")]
        public FrequencyMeasure FrequencyRayleigh1 {
            get {
                return frequencyRayleigh1Field;
            } 
            set {
                frequencyRayleigh1Field = value;
                NotifyPropertyChanged("FrequencyRayleigh1");
            }
        }

        private FrequencyMeasure frequencyRayleigh1Field; 

        /// <summary>
        /// frequencyRayleigh2 property
        /// </summary>
		[Description("Frequency reference for Rayleigh 2 measurement.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "frequencyMeasure")]
		[XmlElement("frequencyRayleigh2")]
        public FrequencyMeasure FrequencyRayleigh2 {
            get {
                return frequencyRayleigh2Field;
            } 
            set {
                frequencyRayleigh2Field = value;
                NotifyPropertyChanged("FrequencyRayleigh2");
            }
        }

        private FrequencyMeasure frequencyRayleigh2Field; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [Description("A descriptive remark about the measured trace set")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// logDataTrace property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_logDataTrace")]
		[XmlElement("logDataTrace")]
        public LogDataTrace LogDataTrace {
            get {
                return logDataTraceField;
            } 
            set {
                logDataTraceField = value;
                NotifyPropertyChanged("LogDataTrace");
            }
        }

        private LogDataTrace logDataTraceField; 

		/// <summary>
        /// Where this dtsMeasuredTraceSet was derived from a "parent" dtsMeasuredTraceSet (having been recalibrated for example), the parent dtsMeasuredTraceSet can be indicated by referencing its UID with this element.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("Where this dtsMeasuredTraceSet was derived from a \"parent\" dtsMeasuredTraceSet (having been recalibrated for example), the parent dtsMeasuredTraceSet can be indicated by referencing its UID with this element.")]
        [EnergisticsDataTypeAttribute(DataType = "refString")]
        [XmlAttribute("parentMeasurementID")]
		
        public string ParentMeasurementID {
            get {
                return parentMeasurementIDField;
            } 
            set {
                parentMeasurementIDField = value;
                NotifyPropertyChanged("ParentMeasurementID");
            }
        }

        private string parentMeasurementIDField; 

		/// <summary>
        /// The uid of this object.
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The uid of this object.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("measurementID")]
		
        public string MeasurementID {
            get {
                return measurementIDField;
            } 
            set {
                measurementIDField = value;
                NotifyPropertyChanged("MeasurementID");
            }
        }

        private string measurementIDField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// The group of elements corresponding to a DTS measurement.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_dtsMeasurement", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The group of elements corresponding to a DTS measurement.")]
    public partial class DtsMeasurement : Object, IProdmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// badSetFlag property
        /// </summary>
		[Required]
        [Description("Set to 'true' when a measurement is included but is known to be bad (i.e. all the values are null).  Use this flag in situations when you want to keep track of the fact that a measurement was generated/received however the measurement was bad.")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("badSetFlag")]
        public bool? BadSetFlag {
            get {
                return badSetFlagField;
            } 
            set {
                badSetFlagField = value;
                NotifyPropertyChanged("BadSetFlag");
            }
        }

        private bool? badSetFlagField; 

        /// <summary>
        /// emptySetFlag property
        /// </summary>
		[Required]
        [Description("Set to 'true' when the measurement set is empty (only the header is provided).  Use this flag for situations when the instrument box attempts to get a reading but nothing is generated (fiber is disconnected, for example).")]
        [EnergisticsDataTypeAttribute(DataType = "logicalBoolean")]
		[XmlElement("emptySetFlag")]
        public bool? EmptySetFlag {
            get {
                return emptySetFlagField;
            } 
            set {
                emptySetFlagField = value;
                NotifyPropertyChanged("EmptySetFlag");
            }
        }

        private bool? emptySetFlagField; 

        /// <summary>
        /// timeStart property
        /// </summary>
		[Required]
        [Description("Time when the installed system began taking the measurement")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("timeStart")]
        public Timestamp? TimeStart {
            get {
                return timeStartField;
            } 
            set {
                timeStartField = value;
                NotifyPropertyChanged("TimeStart");
            }
        }

        private Timestamp? timeStartField; 

        /// <summary>
        /// timeEnd property
        /// </summary>
		[Description("Time when the installed system finished taking the measurement")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("timeEnd")]
        public Timestamp? TimeEnd {
            get {
                return timeEndField;
            } 
            set {
                timeEndField = value;
                 this.TimeEndSpecified = true;
                NotifyPropertyChanged("TimeEnd");
            }
        }

        private Timestamp? timeEndField; 

        /// <summary>
        /// timeEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool TimeEndSpecified {
            get {
                return timeEndSpecifiedField;
            } 
            set {
                timeEndSpecifiedField = value;
                NotifyPropertyChanged("TimeEndSpecified");
            }
        }

        private bool timeEndSpecifiedField; 

        /// <summary>
        /// timeSinceInstrumentStartup property
        /// </summary>
		[Description("Length of time that the instrument box has been up and running since its last power up.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "timeMeasure")]
		[XmlElement("timeSinceInstrumentStartup")]
        public TimeMeasure TimeSinceInstrumentStartup {
            get {
                return timeSinceInstrumentStartupField;
            } 
            set {
                timeSinceInstrumentStartupField = value;
                NotifyPropertyChanged("TimeSinceInstrumentStartup");
            }
        }

        private TimeMeasure timeSinceInstrumentStartupField; 

        /// <summary>
        /// measurementTags property
        /// </summary>
		[Description("This supports user-defined \"tags\" (in the form of text strings) to be attached to the measurement. Example: to indicate other operations under way at the time (e.g., \"start of injection\").")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "string")]
		[XmlElement("measurementTags")]
        public List<string> MeasurementTags {
            get {
                return measurementTagsField;
            } 
            set {
                measurementTagsField = value;
                NotifyPropertyChanged("MeasurementTags");
            }
        }

         /// <summary>
         /// bool to indicate if MeasurementTags has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MeasurementTagsSpecified
         {
             get {
             if(measurementTagsField!=null)
                 return measurementTagsField.Count>0?true:false;
             else return false;
             }
         }
        private List<string> measurementTagsField; 

        /// <summary>
        /// installedSystemRef property
        /// </summary>
		[Required]
        [Description("Reference to the installed system used to take the measurement (combination of instrument box and optical path)")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("installedSystemRef")]
        public RefNameString InstalledSystemRef {
            get {
                return installedSystemRefField;
            } 
            set {
                installedSystemRefField = value;
                NotifyPropertyChanged("InstalledSystemRef");
            }
        }

        private RefNameString installedSystemRefField; 

        /// <summary>
        /// measurementConfiguration property
        /// </summary>
		[Required]
        [Description("Enum. The configuration of the optical path. This may be varied from measurement to measurement independent of the fiber path network.")]
        [EnergisticsDataTypeAttribute(DataType = "OpticalPathConfiguration")]
		[XmlElement("measurementConfiguration")]
        public OpticalPathConfiguration? MeasurementConfiguration {
            get {
                return measurementConfigurationField;
            } 
            set {
                measurementConfigurationField = value;
                 this.MeasurementConfigurationSpecified = true;
                NotifyPropertyChanged("MeasurementConfiguration");
            }
        }

        
        private bool MeasurementConfigurationSpecifiedField = false;
        
        /// <summary>
        /// MeasurementConfigurationSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool MeasurementConfigurationSpecified {
            get {
                return MeasurementConfigurationSpecifiedField;
            } 
            set {
                MeasurementConfigurationSpecifiedField = value;
                NotifyPropertyChanged("MeasurementConfigurationSpecified");
            }
        }
        
        private OpticalPathConfiguration? measurementConfigurationField; 

        /// <summary>
        /// diagnosticParameters property
        /// </summary>
		[Description("Diagnostic information generated by the instrument box at the time the measurement was taken.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("diagnosticParameters")]
        public List<ExtensionNameValue> DiagnosticParameters {
            get {
                return diagnosticParametersField;
            } 
            set {
                diagnosticParametersField = value;
                NotifyPropertyChanged("DiagnosticParameters");
            }
        }

         /// <summary>
         /// bool to indicate if DiagnosticParameters has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DiagnosticParametersSpecified
         {
             get {
             if(diagnosticParametersField!=null)
                 return diagnosticParametersField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> diagnosticParametersField; 

        /// <summary>
        /// measurementTrace property
        /// </summary>
		[Description("Header data for raw (measured) traces collections")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_dtsMeasurementTrace")]
		[XmlElement("measurementTrace")]
        public List<DtsMeasurementTrace> MeasurementTrace {
            get {
                return measurementTraceField;
            } 
            set {
                measurementTraceField = value;
                NotifyPropertyChanged("MeasurementTrace");
            }
        }

         /// <summary>
         /// bool to indicate if MeasurementTrace has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool MeasurementTraceSpecified
         {
             get {
             if(measurementTraceField!=null)
                 return measurementTraceField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsMeasurementTrace> measurementTraceField; 

        /// <summary>
        /// interpretationLog property
        /// </summary>
		[Description("Container of interpreted data which also specifies by reference the measured data on which the interpretation is based.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_dtsInterpretationLogSet")]
		[XmlElement("interpretationLog")]
        public DtsInterpretationLogSet InterpretationLog {
            get {
                return interpretationLogField;
            } 
            set {
                interpretationLogField = value;
                NotifyPropertyChanged("InterpretationLog");
            }
        }

        private DtsInterpretationLogSet interpretationLogField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The instrument box used for distributed temperature surveys
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_dtsInstrumentBox", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The instrument box used for distributed temperature surveys")]
    public partial class DtsInstrumentBox : Object, IProdmlDataObject, ICommonDataObject, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// grp_dtsInstrumentBox property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "grp_dtsInstrumentBox")]
		[XmlElement("grp_dtsInstrumentBox")]
        public Grp_dtsInstrumentBox Grp_dtsInstrumentBox {
            get {
                return grp_dtsInstrumentBoxField;
            } 
            set {
                grp_dtsInstrumentBoxField = value;
                NotifyPropertyChanged("Grp_dtsInstrumentBox");
            }
        }

        private Grp_dtsInstrumentBox grp_dtsInstrumentBoxField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    /// <summary>
    /// The group of elements corresponding to a DTS installed system.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="obj_dtsInstalledSystem", Namespace="http://www.prodml.org/schemas/1series")]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("The group of elements corresponding to a DTS installed system.")]
    public partial class DtsInstalledSystem : Object, IProdmlDataObject, ICommonDataObject, IDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// name property
        /// </summary>
		[Required]
        [StringLength(64)]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("name")]
        public string Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private string nameField; 

        /// <summary>
        /// dateMin property
        /// </summary>
		[Required]
        [Description("The minimum date index contained within the object. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. That is, all measurements for a well in the specified period defined by the min/max. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dateMin")]
        public Timestamp? DateMin {
            get {
                return dateMinField;
            } 
            set {
                dateMinField = value;
                NotifyPropertyChanged("DateMin");
            }
        }

        private Timestamp? dateMinField; 

        /// <summary>
        /// dateMax property
        /// </summary>
		[Description("The maximum date index contained within the object. The minimum and maximum indexes are server query parameters and will be  populated with valid values in a \"get\" result. See the WITSML API Specification appendix on \"Special Handling\" of growing objects  for a description of the behavior related to this parameter.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("dateMax")]
        public Timestamp? DateMax {
            get {
                return dateMaxField;
            } 
            set {
                dateMaxField = value;
                 this.DateMaxSpecified = true;
                NotifyPropertyChanged("DateMax");
            }
        }

        private Timestamp? dateMaxField; 

        /// <summary>
        /// dateMaxSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateMaxSpecified {
            get {
                return dateMaxSpecifiedField;
            } 
            set {
                dateMaxSpecifiedField = value;
                NotifyPropertyChanged("DateMaxSpecified");
            }
        }

        private bool dateMaxSpecifiedField; 

        /// <summary>
        /// opticalPathLength property
        /// </summary>
		[Description("The length of the fiber installed in the wellbore.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "lengthMeasure")]
		[XmlElement("opticalPathLength")]
        public LengthMeasure OpticalPathLength {
            get {
                return opticalPathLengthField;
            } 
            set {
                opticalPathLengthField = value;
                NotifyPropertyChanged("OpticalPathLength");
            }
        }

        private LengthMeasure opticalPathLengthField; 

        /// <summary>
        /// opticalBudget property
        /// </summary>
		[Description("Total light budget available for the installation. This is  generally measured in decibels, and indicates the total power loss for two-way  travel of the light in the installed fiber.")]
        [EnergisticsDataTypeAttribute(DataType = "double")]
		[XmlElement("opticalBudget")]
        public double? OpticalBudget {
            get {
                return opticalBudgetField;
            } 
            set {
                opticalBudgetField = value;
                 this.OpticalBudgetSpecified = true;
                NotifyPropertyChanged("OpticalBudget");
            }
        }

        private double? opticalBudgetField; 

        /// <summary>
        /// opticalBudgetSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool OpticalBudgetSpecified {
            get {
                return opticalBudgetSpecifiedField;
            } 
            set {
                opticalBudgetSpecifiedField = value;
                NotifyPropertyChanged("OpticalBudgetSpecified");
            }
        }

        private bool opticalBudgetSpecifiedField; 

        /// <summary>
        /// opticalPathRef property
        /// </summary>
		[Required]
        [Description("Reference to optical path.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("opticalPathRef")]
        public RefNameString OpticalPathRef {
            get {
                return opticalPathRefField;
            } 
            set {
                opticalPathRefField = value;
                NotifyPropertyChanged("OpticalPathRef");
            }
        }

        private RefNameString opticalPathRefField; 

        /// <summary>
        /// instrumentBoxRef property
        /// </summary>
		[Required]
        [Description("Reference to instrument box.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "refNameString")]
		[XmlElement("instrumentBoxRef")]
        public RefNameString InstrumentBoxRef {
            get {
                return instrumentBoxRefField;
            } 
            set {
                instrumentBoxRefField = value;
                NotifyPropertyChanged("InstrumentBoxRef");
            }
        }

        private RefNameString instrumentBoxRefField; 

        /// <summary>
        /// comment property
        /// </summary>
		[StringLength(4000)]
        [Description("Comment about this installed system.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// dtsCalibration property
        /// </summary>
		[Description("Calibration parameters vary from vendor to vendor, depending  on the calibration method being used. This is a general type that allows a calibration  date, business associate, and many  name/value pairs.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_dtsCalibration")]
		[XmlElement("dtsCalibration")]
        public List<DtsCalibration> DtsCalibration {
            get {
                return dtsCalibrationField;
            } 
            set {
                dtsCalibrationField = value;
                NotifyPropertyChanged("DtsCalibration");
            }
        }

         /// <summary>
         /// bool to indicate if DtsCalibration has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DtsCalibrationSpecified
         {
             get {
             if(dtsCalibrationField!=null)
                 return dtsCalibrationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsCalibration> dtsCalibrationField; 

        /// <summary>
        /// A container element that contains elements that are common to all data objects. 
        /// </summary>
		[Description("A container element that contains elements that are common to all data objects.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_commonData")]
		[XmlElement("commonData")]
        public CommonData CommonData {
            get {
                return commonDataField;
            } 
            set {
                commonDataField = value;
                NotifyPropertyChanged("CommonData");
            }
        }

        private CommonData commonDataField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 

        
        #region ICommonDataObject Members

        ICommonData ICommonDataObject.CommonData
        {
            get { return CommonData; }
            set { CommonData = value as CommonData; }
        }

        ICustomData ICommonDataObject.CustomData
        {
            get { return CustomData; }
            set { CustomData = value as CustomData; }
        }

        #endregion

        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here

    namespace ComponentSchemas 
    {
    /// <summary>
    /// An element containing details about the facility being surveyed, such as name, geographical data, etc.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_facilityIdentifier", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("An element containing details about the facility being surveyed, such as name, geographical data, etc.")]
    public partial class FacilityIdentifier : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// Name of the facility
        /// </summary>
		[Required]
        [Description("Name of the facility")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("name")]
        public NameStruct Name {
            get {
                return nameField;
            } 
            set {
                nameField = value;
                NotifyPropertyChanged("Name");
            }
        }

        private NameStruct nameField; 

        /// <summary>
        /// The name of the facility which is represented by this facilityMapping 
        /// </summary>
		[Description("The name of the facility which is represented by this facilityMapping")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// Type of facility where the fiber is deployed
        /// </summary>
		[StringLength(40)]
        [Description("Type of facility where the fiber is deployed")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("kind")]
        public string Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string kindField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to the represented installation.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public FacilityIdentifierStruct ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

        private FacilityIdentifierStruct contextFacilityField; 

        /// <summary>
        /// The geographical information about the facility.
        /// </summary>
		[Description("The geographical information about the facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_geographicContext")]
		[XmlElement("geographicContext")]
        public GeographicContext GeographicContext {
            get {
                return geographicContextField;
            } 
            set {
                geographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext geographicContextField; 

        /// <summary>
        /// Identifier of the business unit responsible for the facility.
        /// </summary>
		[Description("Identifier of the business unit responsible for the facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_productVolumeBusinessUnit")]
		[XmlElement("businessUnit")]
        public ProductVolumeBusinessUnit BusinessUnit {
            get {
                return businessUnitField;
            } 
            set {
                businessUnitField = value;
                NotifyPropertyChanged("BusinessUnit");
            }
        }

        private ProductVolumeBusinessUnit businessUnitField; 

        /// <summary>
        /// Contact for the company/person operating the facility
        /// </summary>
		[Description("Contact for the company/person operating the facility")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("operator")]
        public BusinessAssociate Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate operatorField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A structure for WITSML query parameters. The intent is to allow a query for all objects within an index range (whether or not the object is growing). These would typically be something like a daily report.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentInfoQueryParam", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A structure for WITSML query parameters. The intent is to allow a query for all objects within an index range (whether or not the object is growing). These would typically be something like a daily report.")]
    public partial class DocumentInfoQueryParam : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The minimum start time for an object. This only applies to objects with a root level date and/or dateTime element(s). The objects may or not be growing objects but the See the API specification for behavior related to this query parameter.
        /// </summary>
		[Description("The minimum start time for an object. This only applies to objects with a root level date and/or dateTime element(s). The objects may or not be growing objects but the See the API specification for behavior related to this query parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMin")]
        public EndpointQualifiedDateTime DateTimeMin {
            get {
                return dTimMinField;
            } 
            set {
                dTimMinField = value;
                NotifyPropertyChanged("DateTimeMin");
            }
        }

        private EndpointQualifiedDateTime dTimMinField; 

        /// <summary>
        /// The maximum start time for an object. This only applies to objects with a root level date and/or dateTime element(s). See the API specification for behavior related to this query parameter.
        /// </summary>
		[Description("The maximum start time for an object. This only applies to objects with a root level date and/or dateTime element(s). See the API specification for behavior related to this query parameter.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "endpointQualifiedDateTime")]
		[XmlElement("dTimMax")]
        public EndpointQualifiedDateTime DateTimeMax {
            get {
                return dTimMaxField;
            } 
            set {
                dTimMaxField = value;
                NotifyPropertyChanged("DateTimeMax");
            }
        }

        private EndpointQualifiedDateTime dTimMaxField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// An event type captures the basic information about an event that has affected the data.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentEvent", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("An event type captures the basic information about an event that has affected the data.")]
    public partial class DocumentEvent : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The date on which the event took place.
        /// </summary>
		[Required]
        [Description("The date on which the event took place.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("eventDate")]
        public Timestamp? EventDate {
            get {
                return eventDateField;
            } 
            set {
                eventDateField = value;
                NotifyPropertyChanged("EventDate");
            }
        }

        private Timestamp? eventDateField; 

        /// <summary>
        /// The kind of event event.
        /// </summary>
		[StringLength(64)]
        [Description("The kind of event event.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("eventType")]
        public string EventType {
            get {
                return eventTypeField;
            } 
            set {
                eventTypeField = value;
                NotifyPropertyChanged("EventType");
            }
        }

        private string eventTypeField; 

        /// <summary>
        /// The party responsible for the event.
        /// </summary>
		[StringLength(64)]
        [Description("The party responsible for the event.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("responsibleParty")]
        public string ResponsibleParty {
            get {
                return responsiblePartyField;
            } 
            set {
                responsiblePartyField = value;
                NotifyPropertyChanged("ResponsibleParty");
            }
        }

        private string responsiblePartyField; 

        /// <summary>
        /// A free form comment that can further define the event that occurred.
        /// </summary>
		[StringLength(4000)]
        [Description("A free form comment that can further  define the event that occurred.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// Information about the security classification of the document. This is intended as a documentation of the security so that the file will not inadvertently be sent to someone who is not allowed access to the data. This block also carries a date that the security classification expires. For example, a well log is confidential for a period of time, and then becomes open. All security classes are characterized by their classification systems.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentSecurityInfo", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("Information about the security classification of the document. This is intended as a documentation of the security so that the file will not inadvertently be sent to someone who is not allowed access to the data. This block also carries a date that the security classification expires. For example, a well log is confidential for a period of time, and then becomes open. All security classes are characterized by their classification systems.")]
    public partial class DocumentSecurityInfo : Object, IUniqueId, INotifyPropertyChanged
    {

        /// <summary>
        /// The security class in which this document is classified. Examples would be confidential, partner confidential, tight. The meaning of the class is determined by the System in which it is defined.
        /// </summary>
		[StringLength(40)]
        [Description("The security class in which this document is  classified. Examples would be confidential, partner confidential,  tight. The meaning of the class is determined by the System in which  it is defined.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("class")]
        public string Class {
            get {
                return classField;
            } 
            set {
                classField = value;
                NotifyPropertyChanged("Class");
            }
        }

        private string classField; 

        /// <summary>
        /// The security classification system. This gives context to the meaning of the Class value.
        /// </summary>
		[StringLength(40)]
        [Description("The security classification system.  This gives context to the meaning of the Class value.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("securitySystem")]
        public string SecuritySystem {
            get {
                return securitySystemField;
            } 
            set {
                securitySystemField = value;
                NotifyPropertyChanged("SecuritySystem");
            }
        }

        private string securitySystemField; 

        /// <summary>
        /// The date on which this security class is no longer applicable.
        /// </summary>
		[Description("The date on which this security class is no  longer applicable.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("endDate")]
        public Timestamp? EndDate {
            get {
                return endDateField;
            } 
            set {
                endDateField = value;
                 this.EndDateSpecified = true;
                NotifyPropertyChanged("EndDate");
            }
        }

        private Timestamp? endDateField; 

        /// <summary>
        /// endDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool EndDateSpecified {
            get {
                return endDateSpecifiedField;
            } 
            set {
                endDateSpecifiedField = value;
                NotifyPropertyChanged("EndDateSpecified");
            }
        }

        private bool endDateSpecifiedField; 

        /// <summary>
        /// A general comment to further define the security class.
        /// </summary>
		[StringLength(4000)]
        [Description("A general comment to further define the security  class.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// Extensions to the schema based on a name-value construct.
        /// </summary>
		[Description("Extensions to the schema based on a name-value construct.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_extensionNameValue")]
		[XmlElement("extensionNameValue")]
        public List<ExtensionNameValue> ExtensionNameValue {
            get {
                return extensionNameValueField;
            } 
            set {
                extensionNameValueField = value;
                NotifyPropertyChanged("ExtensionNameValue");
            }
        }

         /// <summary>
         /// bool to indicate if ExtensionNameValue has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ExtensionNameValueSpecified
         {
             get {
             if(extensionNameValueField!=null)
                 return extensionNameValueField.Count>0?true:false;
             else return false;
             }
         }
        private List<ExtensionNameValue> extensionNameValueField; 

		/// <summary>
        /// uid property
        /// </summary>
		[RegularExpression("[^ ]*")]
        [StringLength(64)]
        [Description("The unique identifier of a container element. This attribute is generally required within the context of a WITSML server. There should be no assumption as to the semantic content of this attribute. This should only be used with recurring container types (i.e., maxOccurs greater than one). The value is only required to be unique within the context of the nearest recurring parent element.")]
        [EnergisticsDataTypeAttribute(DataType = "uidString")]
        [XmlAttribute("uid")]
		
        public string Uid {
            get {
                return uidField;
            } 
            set {
                uidField = value;
                NotifyPropertyChanged("Uid");
            }
        }

        private string uidField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A block of information about the creation of the XML file. This is different than the creation of the data that is included within the file.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentFileCreation", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A block of information about the creation of the XML file. This is different than the creation of the data that is included within the file.")]
    public partial class DocumentFileCreation : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// The date and time that the file was created.
        /// </summary>
		[Required]
        [Description("The date and time that the file was created.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("fileCreationDate")]
        public Timestamp? FileCreationDate {
            get {
                return fileCreationDateField;
            } 
            set {
                fileCreationDateField = value;
                NotifyPropertyChanged("FileCreationDate");
            }
        }

        private Timestamp? fileCreationDateField; 

        /// <summary>
        /// If appropriate, the software that created the file. This is a free form string, and may include whatever information is deemed relevant.
        /// </summary>
		[StringLength(64)]
        [Description("If appropriate, the software that created the file.  This is a free form string, and may include whatever information  is deemed relevant.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("softwareName")]
        public string SoftwareName {
            get {
                return softwareNameField;
            } 
            set {
                softwareNameField = value;
                NotifyPropertyChanged("SoftwareName");
            }
        }

        private string softwareNameField; 

        /// <summary>
        /// The person or business associate that created the file.
        /// </summary>
		[StringLength(64)]
        [Description("The person or business associate that created  the file.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("fileCreator")]
        public string FileCreator {
            get {
                return fileCreatorField;
            } 
            set {
                fileCreatorField = value;
                NotifyPropertyChanged("FileCreator");
            }
        }

        private string fileCreatorField; 

        /// <summary>
        /// Any comment that would be useful to further explain the creation of this instance document.
        /// </summary>
		[StringLength(4000)]
        [Description("Any comment that would be useful to further  explain the creation of this instance document.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    namespace ComponentSchemas 
    {
    /// <summary>
    /// A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(TypeName="cs_documentInfo", Namespace="http://www.prodml.org/schemas/1series")]
	[Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
    public partial class DocumentInfo : Object, INotifyPropertyChanged
    {

        /// <summary>
        /// An identifier for the document. This is intended to be unique within the context of the NamingSystem.
        /// </summary>
		[Required]
        [Description("An identifier for the document. This is  intended to be unique within the context of the NamingSystem.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("documentName")]
        public NameStruct DocumentName {
            get {
                return documentNameField;
            } 
            set {
                documentNameField = value;
                NotifyPropertyChanged("DocumentName");
            }
        }

        private NameStruct documentNameField; 

        /// <summary>
        /// Zero or more alternate names for the document. These names do not need to be unique within the naming system.
        /// </summary>
		[Description("Zero or more alternate names for the document.  These names do not need to be unique within the naming system.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("documentAlias")]
        public List<NameStruct> DocumentAlias {
            get {
                return documentAliasField;
            } 
            set {
                documentAliasField = value;
                NotifyPropertyChanged("DocumentAlias");
            }
        }

         /// <summary>
         /// bool to indicate if DocumentAlias has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DocumentAliasSpecified
         {
             get {
             if(documentAliasField!=null)
                 return documentAliasField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> documentAliasField; 

        /// <summary>
        /// The date of the creation of the document. This is not the same as the date that the file was created. For this date, the document is considered to be the set of information associated with this document information. For example, the document may be a seismic binset. This represents the date that the binset was created. The FileCreation information would capture the date that the XML file was created to send or exchange the binset.
        /// </summary>
		[Description("The date of the creation of the document.  This is not the same as the date that the file was created.  For this date, the document is considered to be the set of  information associated with this document information.  For example, the document may be a seismic binset.  This represents the date that the binset was created.  The FileCreation information would capture the date that  the XML file was created to send or exchange the binset.")]
        [EnergisticsDataTypeAttribute(DataType = "timestamp")]
		[XmlElement("documentDate")]
        public Timestamp? DocumentDate {
            get {
                return documentDateField;
            } 
            set {
                documentDateField = value;
                 this.DocumentDateSpecified = true;
                NotifyPropertyChanged("DocumentDate");
            }
        }

        private Timestamp? documentDateField; 

        /// <summary>
        /// documentDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DocumentDateSpecified {
            get {
                return documentDateSpecifiedField;
            } 
            set {
                documentDateSpecifiedField = value;
                NotifyPropertyChanged("DocumentDateSpecified");
            }
        }

        private bool documentDateSpecifiedField; 

        /// <summary>
        /// A document class. Examples of classes would be a metadata classification or a set of keywords. 
        /// </summary>
		[Description("A document class. Examples of classes would be a  metadata classification or a set of keywords.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("documentClass")]
        public List<NameStruct> DocumentClass {
            get {
                return documentClassField;
            } 
            set {
                documentClassField = value;
                NotifyPropertyChanged("DocumentClass");
            }
        }

         /// <summary>
         /// bool to indicate if DocumentClass has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DocumentClassSpecified
         {
             get {
             if(documentClassField!=null)
                 return documentClassField.Count>0?true:false;
             else return false;
             }
         }
        private List<NameStruct> documentClassField; 

        /// <summary>
        /// The information about the creation of the exchange file. This is not about the creation of the data within the file, but the creation of the file itself.
        /// </summary>
		[Description("The information about the creation of the  exchange file. This is not about the creation of the data within  the file, but the creation of the file itself.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentFileCreation")]
		[XmlElement("fileCreationInformation")]
        public DocumentFileCreation FileCreationInformation {
            get {
                return fileCreationInformationField;
            } 
            set {
                fileCreationInformationField = value;
                NotifyPropertyChanged("FileCreationInformation");
            }
        }

        private DocumentFileCreation fileCreationInformationField; 

        /// <summary>
        /// Information about the security to be applied to this file. More than one classification can be given.
        /// </summary>
		[Description("Information about the security to be applied to  this file. More than one classification can be given.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentSecurityInfo")]
		[XmlElement("securityInformation")]
        public List<DocumentSecurityInfo> SecurityInformation {
            get {
                return securityInformationField;
            } 
            set {
                securityInformationField = value;
                NotifyPropertyChanged("SecurityInformation");
            }
        }

         /// <summary>
         /// bool to indicate if SecurityInformation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool SecurityInformationSpecified
         {
             get {
             if(securityInformationField!=null)
                 return securityInformationField.Count>0?true:false;
             else return false;
             }
         }
        private List<DocumentSecurityInfo> securityInformationField; 

        /// <summary>
        /// A free-form string that allows a disclaimer to accompany the information.
        /// </summary>
		[StringLength(4000)]
        [Description("A free-form string that allows a disclaimer to  accompany the information.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("disclaimer")]
        public string Disclaimer {
            get {
                return disclaimerField;
            } 
            set {
                disclaimerField = value;
                NotifyPropertyChanged("Disclaimer");
            }
        }

        private string disclaimerField; 

        /// <summary>
        /// A collection of events that can document the history of the data.
        /// </summary>
		[Description("A collection of events that can document the  history of the data.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentAudit")]
		[XmlArrayItem("event")]
        [XmlArray("auditTrail")]
        public List<DocumentEvent> AuditTrail {
            get {
                return auditTrailField;
            } 
            set {
                auditTrailField = value;
                NotifyPropertyChanged("AuditTrail");
            }
        }

         /// <summary>
         /// bool to indicate if AuditTrail has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool AuditTrailSpecified
         {
             get {
             if(auditTrailField!=null)
                 return auditTrailField.Count>0?true:false;
             else return false;
             }
         }
        private List<DocumentEvent> auditTrailField; 

        /// <summary>
        /// The owner of the data.
        /// </summary>
		[StringLength(64)]
        [Description("The owner of the data.")]
        [EnergisticsDataTypeAttribute(DataType = "nameString")]
		[XmlElement("owner")]
        public string Owner {
            get {
                return ownerField;
            } 
            set {
                ownerField = value;
                NotifyPropertyChanged("Owner");
            }
        }

        private string ownerField; 

        /// <summary>
        /// WITSML query parameters.
        /// </summary>
		[Description("WITSML query parameters.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfoQueryParam")]
		[XmlElement("queryParam")]
        public DocumentInfoQueryParam QueryParam {
            get {
                return queryParamField;
            } 
            set {
                queryParamField = value;
                NotifyPropertyChanged("QueryParam");
            }
        }

        private DocumentInfoQueryParam queryParamField; 

        /// <summary>
        /// An optional comment about the document.
        /// </summary>
		[StringLength(4000)]
        [Description("An optional comment about the document.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 


        
		#region INotifyPropertyChanged Members
		/// <summary>
        /// Occurs when a property value changes. 
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
        /// Triggers PropertyChanged Event
        /// </summary>
        /// <param name="info">Name of property changed</param>
        protected void NotifyPropertyChanged(String info)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged(this, new PropertyChangedEventArgs(info));
            }
        }
        #endregion INotifyPropertyChanged Members
    } //here
    }

    /// <summary>
    /// This class represents the obj_wftRuns xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wftRuns", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wftRuns xsd type.")]
    public partial class WftRunList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single Wireline Formation Test (WFT).
        /// </summary>
		[Description("Information about a single Wireline Formation Test (WFT).")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_wftRun")]
		[XmlElement("wftRun")]
        public List<WftRun> WftRun {
            get {
                return wftRunField;
            } 
            set {
                wftRunField = value;
                NotifyPropertyChanged("WftRun");
            }
        }

         /// <summary>
         /// bool to indicate if WftRun has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WftRunSpecified
         {
             get {
             if(wftRunField!=null)
                 return wftRunField.Count>0?true:false;
             else return false;
             }
         }
        private List<WftRun> wftRunField; 

        /// <summary>
        /// Information about a single Wireline Formation Test (WFT).
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WftRun;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_wellTests xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("wellTests", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_wellTests xsd type.")]
    public partial class WellTestList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single well test.
        /// </summary>
		[Description("Information about a single well test.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_wellTest")]
		[XmlElement("wellTest")]
        public List<WellTest> WellTest {
            get {
                return wellTestField;
            } 
            set {
                wellTestField = value;
                NotifyPropertyChanged("WellTest");
            }
        }

         /// <summary>
         /// bool to indicate if WellTest has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool WellTestSpecified
         {
             get {
             if(wellTestField!=null)
                 return wellTestField.Count>0?true:false;
             else return false;
             }
         }
        private List<WellTest> wellTestField; 

        /// <summary>
        /// Information about a single well test.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return WellTest;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_timeSeriesStatistics xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("timeSeriesStatistics", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_timeSeriesStatistics xsd type.")]
    public partial class TimeSeriesStatisticList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance.
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Statistics about a single range of time. This is a VIEW of the time series data and represents derived information about that series. As such, it is not persisted and cannot be added, updated or deleted from a persistent server. The statistics view uses the same identity (including uid) as the time series data object.
        /// </summary>
		[Description("Statistics about a single range of time. This is a VIEW of the time series data and represents derived information about that series. As such, it is not persisted and cannot be added, updated or deleted from a persistent server. The statistics view uses the same identity (including uid) as the time series data object.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_timeSeriesStatistic")]
		[XmlElement("timeSeriesStatistic")]
        public List<TimeSeriesStatistic> TimeSeriesStatistic {
            get {
                return timeSeriesStatisticField;
            } 
            set {
                timeSeriesStatisticField = value;
                NotifyPropertyChanged("TimeSeriesStatistic");
            }
        }

         /// <summary>
         /// bool to indicate if TimeSeriesStatistic has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeSeriesStatisticSpecified
         {
             get {
             if(timeSeriesStatisticField!=null)
                 return timeSeriesStatisticField.Count>0?true:false;
             else return false;
             }
         }
        private List<TimeSeriesStatistic> timeSeriesStatisticField; 

        /// <summary>
        /// Statistics about a single range of time. This is a VIEW of the time series data and represents derived information about that series. As such, it is not persisted and cannot be added, updated or deleted from a persistent server. The statistics view uses the same identity (including uid) as the time series data object.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return TimeSeriesStatistic;
			}
        }
		/// <summary>
        /// Data object schema version.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_timeSeriesDatas xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("timeSeriesDatas", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_timeSeriesDatas xsd type.")]
    public partial class TimeSeriesDataList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about a single time series.
        /// </summary>
		[Description("Information about a single time series.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_timeSeriesData")]
		[XmlElement("timeSeriesData")]
        public List<TimeSeriesData> TimeSeriesData {
            get {
                return timeSeriesDataField;
            } 
            set {
                timeSeriesDataField = value;
                NotifyPropertyChanged("TimeSeriesData");
            }
        }

         /// <summary>
         /// bool to indicate if TimeSeriesData has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool TimeSeriesDataSpecified
         {
             get {
             if(timeSeriesDataField!=null)
                 return timeSeriesDataField.Count>0?true:false;
             else return false;
             }
         }
        private List<TimeSeriesData> timeSeriesDataField; 

        /// <summary>
        /// Information about a single time series.
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return TimeSeriesData;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_report xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("report", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[EnergisticsDataObjectAttribute(StandardFamily.PRODML, "1.3.1.1")]
    [Description("This class represents the obj_report xsd type.")]
    public partial class Report : AbstractObject, IProdmlDataObject, INotifyPropertyChanged
    {

        /// <summary>
        /// The type of report. This should define and constrain the expected content of the report.
        /// </summary>
		[StringLength(40)]
        [Description("The type of report.  This should define and constrain the expected content of the report.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("kind")]
        public string Kind {
            get {
                return kindField;
            } 
            set {
                kindField = value;
                NotifyPropertyChanged("Kind");
            }
        }

        private string kindField; 

        /// <summary>
        /// The tile of the report if different from the name of the report.
        /// </summary>
		[Description("The tile of the report if different from the name of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "nameStruct")]
		[XmlElement("title")]
        public NameStruct Title {
            get {
                return titleField;
            } 
            set {
                titleField = value;
                NotifyPropertyChanged("Title");
            }
        }

        private NameStruct titleField; 

        /// <summary>
        /// The date that the report represents (i.e., not a year or month). Only one of date, month or year should be specified.
        /// </summary>
		[Description("The date that the report represents (i.e., not a year or month). Only one of date, month or year should be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("date", DataType="date")]
        public DateTime? Date {
            get {
                return dateField;
            } 
            set {
                dateField = value;
                 this.DateSpecified = true;
                NotifyPropertyChanged("Date");
            }
        }

        private DateTime? dateField; 

        /// <summary>
        /// dateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateSpecified {
            get {
                return dateSpecifiedField;
            } 
            set {
                dateSpecifiedField = value;
                NotifyPropertyChanged("DateSpecified");
            }
        }

        private bool dateSpecifiedField; 

        /// <summary>
        /// The ending date that the report represents if it represents an interval.
        /// </summary>
		[Description("The ending date that the report represents if it represents an interval.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("dateEnd", DataType="date")]
        public DateTime? DateEnd {
            get {
                return dateEndField;
            } 
            set {
                dateEndField = value;
                 this.DateEndSpecified = true;
                NotifyPropertyChanged("DateEnd");
            }
        }

        private DateTime? dateEndField; 

        /// <summary>
        /// dateEndSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool DateEndSpecified {
            get {
                return dateEndSpecifiedField;
            } 
            set {
                dateEndSpecifiedField = value;
                NotifyPropertyChanged("DateEndSpecified");
            }
        }

        private bool dateEndSpecifiedField; 

        /// <summary>
        /// The month that the report represents (i.e., not a year, date or date range). Only one of date, month or year should be specified.
        /// </summary>
		[RegularExpression("([1-9][0-9][0-9][0-9])-(([0][0-9])|([1][0-2]))")]
        [Description("The month that the report represents (i.e., not a year, date or date range). Only one of date, month or year should be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "calendarMonth")]
		[XmlElement("month")]
        public string Month {
            get {
                return monthField;
            } 
            set {
                monthField = value;
                NotifyPropertyChanged("Month");
            }
        }

        private string monthField; 

        /// <summary>
        /// The year that the report represents (i.e., not a month, date or date range). Only one of date, month or year should be specified.
        /// </summary>
		[Range(1000, 9999)]
        [Description("The year that the report represents (i.e., not a month, date or date range). Only one of date, month or year should be specified.")]
        [EnergisticsDataTypeAttribute(DataType = "calendarYear")]
		[XmlElement("year")]
        public int? Year {
            get {
                return yearField;
            } 
            set {
                yearField = value;
                 this.YearSpecified = true;
                NotifyPropertyChanged("Year");
            }
        }

        private int? yearField; 

        /// <summary>
        /// yearSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool YearSpecified {
            get {
                return yearSpecifiedField;
            } 
            set {
                yearSpecifiedField = value;
                NotifyPropertyChanged("YearSpecified");
            }
        }

        private bool yearSpecifiedField; 

        /// <summary>
        /// A textual comment about the report.
        /// </summary>
		[StringLength(4000)]
        [Description("A textual comment about the report.")]
        [EnergisticsDataTypeAttribute(DataType = "commentString")]
		[XmlElement("comment")]
        public string Comment {
            get {
                return commentField;
            } 
            set {
                commentField = value;
                NotifyPropertyChanged("Comment");
            }
        }

        private string commentField; 

        /// <summary>
        /// The current report version.
        /// </summary>
		[StringLength(40)]
        [Description("The current report version.")]
        [EnergisticsDataTypeAttribute(DataType = "kindString")]
		[XmlElement("reportVersion")]
        public string ReportVersion {
            get {
                return reportVersionField;
            } 
            set {
                reportVersionField = value;
                NotifyPropertyChanged("ReportVersion");
            }
        }

        private string reportVersionField; 

        /// <summary>
        /// The current document version status.
        /// </summary>
		[Description("The current document version status.")]
        [EnergisticsDataTypeAttribute(DataType = "ReportVersionStatus")]
		[XmlElement("reportStatus")]
        public ReportVersionStatus ReportStatus {
            get {
                return reportStatusField;
            } 
            set {
                reportStatusField = value;
                 this.ReportStatusSpecified = true;
                NotifyPropertyChanged("ReportStatus");
            }
        }

        private ReportVersionStatus reportStatusField; 

        /// <summary>
        /// reportStatusSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ReportStatusSpecified {
            get {
                return reportStatusSpecifiedField;
            } 
            set {
                reportStatusSpecifiedField = value;
                NotifyPropertyChanged("ReportStatusSpecified");
            }
        }

        private bool reportStatusSpecifiedField; 

        /// <summary>
        /// The name of the facility which is represented by this report. The name can be qualified by a naming system. This also defines the kind of facility.
        /// </summary>
		[Description("The name of the facility which is represented by this report.  The name can be qualified by a naming system.  This also defines the kind of facility.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("installation")]
        public FacilityIdentifierStruct Installation {
            get {
                return installationField;
            } 
            set {
                installationField = value;
                NotifyPropertyChanged("Installation");
            }
        }

        private FacilityIdentifierStruct installationField; 

        /// <summary>
        /// The name and type of a facility whose context is relevant to the represented installation.
        /// </summary>
		[Description("The name and type of a facility whose context is relevant to  the represented installation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "facilityIdentifierStruct")]
		[XmlElement("contextFacility")]
        public List<FacilityIdentifierStruct> ContextFacility {
            get {
                return contextFacilityField;
            } 
            set {
                contextFacilityField = value;
                NotifyPropertyChanged("ContextFacility");
            }
        }

         /// <summary>
         /// bool to indicate if ContextFacility has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ContextFacilitySpecified
         {
             get {
             if(contextFacilityField!=null)
                 return contextFacilityField.Count>0?true:false;
             else return false;
             }
         }
        private List<FacilityIdentifierStruct> contextFacilityField; 

        /// <summary>
        /// The operator of the facilities in the report.
        /// </summary>
		[Description("The operator of the facilities in the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("operator")]
        public BusinessAssociate Operator {
            get {
                return operatorField;
            } 
            set {
                operatorField = value;
                NotifyPropertyChanged("Operator");
            }
        }

        private BusinessAssociate operatorField; 

        /// <summary>
        /// The geographic context of the report.
        /// </summary>
		[Description("The geographic context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_geographicContext")]
		[XmlElement("geographicContext")]
        public GeographicContext GeographicContext {
            get {
                return geographicContextField;
            } 
            set {
                geographicContextField = value;
                NotifyPropertyChanged("GeographicContext");
            }
        }

        private GeographicContext geographicContextField; 

        /// <summary>
        /// The date that the report was issued.
        /// </summary>
		[Description("The date that the report was issued.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("issueDate", DataType="date")]
        public DateTime? IssueDate {
            get {
                return issueDateField;
            } 
            set {
                issueDateField = value;
                 this.IssueDateSpecified = true;
                NotifyPropertyChanged("IssueDate");
            }
        }

        private DateTime? issueDateField; 

        /// <summary>
        /// issueDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool IssueDateSpecified {
            get {
                return issueDateSpecifiedField;
            } 
            set {
                issueDateSpecifiedField = value;
                NotifyPropertyChanged("IssueDateSpecified");
            }
        }

        private bool issueDateSpecifiedField; 

        /// <summary>
        /// The person or company that issued the report. This may contain the role of the person or company within the context of the report.
        /// </summary>
		[Description("The person or company that issued the report. This may contain the role of the person or company within the context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("issuedBy")]
        public BusinessAssociate IssuedBy {
            get {
                return issuedByField;
            } 
            set {
                issuedByField = value;
                NotifyPropertyChanged("IssuedBy");
            }
        }

        private BusinessAssociate issuedByField; 

        /// <summary>
        /// The date that the report was approved.
        /// </summary>
		[Description("The date that the report was approved.")]
        [EnergisticsDataTypeAttribute(DataType = "date")]
		[XmlElement("approvalDate", DataType="date")]
        public DateTime? ApprovalDate {
            get {
                return approvalDateField;
            } 
            set {
                approvalDateField = value;
                 this.ApprovalDateSpecified = true;
                NotifyPropertyChanged("ApprovalDate");
            }
        }

        private DateTime? approvalDateField; 

        /// <summary>
        /// approvalDateSpecified property
        /// </summary>
        [XmlIgnore]
        [Browsable(false)]
        public bool ApprovalDateSpecified {
            get {
                return approvalDateSpecifiedField;
            } 
            set {
                approvalDateSpecifiedField = value;
                NotifyPropertyChanged("ApprovalDateSpecified");
            }
        }

        private bool approvalDateSpecifiedField; 

        /// <summary>
        /// The person or company that approved the report. This may contain the role of the person or company within the context of the report.
        /// </summary>
		[Description("The person or company that approved the report. This may contain the role of the person or company within the context of the report.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_businessAssociate")]
		[XmlElement("approver")]
        public BusinessAssociate Approver {
            get {
                return approverField;
            } 
            set {
                approverField = value;
                NotifyPropertyChanged("Approver");
            }
        }

        private BusinessAssociate approverField; 

        /// <summary>
        /// A container element that can contain custom or user defined data elements.
        /// </summary>
		[Description("A container element that can contain custom or user defined  data elements.")]
        [EnergisticsDataTypeAttribute(DataType = "cs_customData")]
		[XmlElement("customData")]
        public CustomData CustomData {
            get {
                return customDataField;
            } 
            set {
                customDataField = value;
                NotifyPropertyChanged("CustomData");
            }
        }

        private CustomData customDataField; 


    } //here

    /// <summary>
    /// This class represents the obj_productVolumes xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("productVolumes", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_productVolumes xsd type.")]
    public partial class ProductVolumeList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single productVolume. 
        /// </summary>
		[Description("Information about a single productVolume.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_productVolume")]
		[XmlElement("productVolume")]
        public List<ProductVolume> ProductVolume {
            get {
                return productVolumeField;
            } 
            set {
                productVolumeField = value;
                NotifyPropertyChanged("ProductVolume");
            }
        }

         /// <summary>
         /// bool to indicate if ProductVolume has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductVolumeSpecified
         {
             get {
             if(productVolumeField!=null)
                 return productVolumeField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductVolume> productVolumeField; 

        /// <summary>
        /// Information about a single productVolume. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ProductVolume;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_productionOperations xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("productionOperations", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_productionOperations xsd type.")]
    public partial class ProductionOperationList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single productionOperation. 
        /// </summary>
		[Required]
        [Description("Information about a single productionOperation.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_productionOperation")]
		[XmlElement("productionOperation")]
        public List<ProductionOperation> ProductionOperation {
            get {
                return productionOperationField;
            } 
            set {
                productionOperationField = value;
                NotifyPropertyChanged("ProductionOperation");
            }
        }

         /// <summary>
         /// bool to indicate if ProductionOperation has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductionOperationSpecified
         {
             get {
             if(productionOperationField!=null)
                 return productionOperationField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductionOperation> productionOperationField; 

        /// <summary>
        /// Information about a single productionOperation. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ProductionOperation;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_productFlowModels xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("productFlowModels", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_productFlowModels xsd type.")]
    public partial class ProductFlowModelList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single Product Flow Model. 
        /// </summary>
		[Description("Information about a single Product Flow Model.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_productFlowModel")]
		[XmlElement("productFlowModel")]
        public List<ProductFlowModel> ProductFlowModel {
            get {
                return productFlowModelField;
            } 
            set {
                productFlowModelField = value;
                NotifyPropertyChanged("ProductFlowModel");
            }
        }

         /// <summary>
         /// bool to indicate if ProductFlowModel has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool ProductFlowModelSpecified
         {
             get {
             if(productFlowModelField!=null)
                 return productFlowModelField.Count>0?true:false;
             else return false;
             }
         }
        private List<ProductFlowModel> productFlowModelField; 

        /// <summary>
        /// Information about a single Product Flow Model. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return ProductFlowModel;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the documenti nstance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the documenti nstance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_fluidSamples xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("fluidSamples", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_fluidSamples xsd type.")]
    public partial class FluidSampleList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single Fluid Sample. 
        /// </summary>
		[Description("Information about a single Fluid Sample.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_fluidSample")]
		[XmlElement("fluidSample")]
        public List<FluidSample> FluidSample {
            get {
                return fluidSampleField;
            } 
            set {
                fluidSampleField = value;
                NotifyPropertyChanged("FluidSample");
            }
        }

         /// <summary>
         /// bool to indicate if FluidSample has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidSampleSpecified
         {
             get {
             if(fluidSampleField!=null)
                 return fluidSampleField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidSample> fluidSampleField; 

        /// <summary>
        /// Information about a single Fluid Sample. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FluidSample;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the documenti nstance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the documenti nstance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_fluidAnalysisResults xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("fluidAnalysisResults", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_fluidAnalysisResults xsd type.")]
    public partial class FluidAnalysisResultList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single Fluid Analysis Result. 
        /// </summary>
		[Description("Information about a single Fluid Analysis Result.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_fluidAnalysisResult")]
		[XmlElement("fluidAnalysisResult")]
        public List<FluidAnalysisResult> FluidAnalysisResult {
            get {
                return fluidAnalysisResultField;
            } 
            set {
                fluidAnalysisResultField = value;
                NotifyPropertyChanged("FluidAnalysisResult");
            }
        }

         /// <summary>
         /// bool to indicate if FluidAnalysisResult has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidAnalysisResultSpecified
         {
             get {
             if(fluidAnalysisResultField!=null)
                 return fluidAnalysisResultField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidAnalysisResult> fluidAnalysisResultField; 

        /// <summary>
        /// Information about a single Fluid Analysis Result. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FluidAnalysisResult;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the documenti nstance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the documenti nstance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// This class represents the obj_fluidAnalysiss xsd type.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("fluidAnalysiss", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("This class represents the obj_fluidAnalysiss xsd type.")]
    public partial class FluidAnalysisList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// Information about the XML message instance. 
        /// </summary>
		[Description("Information about the XML message instance.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// Information about a single Fluid Analysis. 
        /// </summary>
		[Description("Information about a single Fluid Analysis.")]
        [RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_fluidAnalysis")]
		[XmlElement("fluidAnalysis")]
        public List<FluidAnalysis> FluidAnalysis {
            get {
                return fluidAnalysisField;
            } 
            set {
                fluidAnalysisField = value;
                NotifyPropertyChanged("FluidAnalysis");
            }
        }

         /// <summary>
         /// bool to indicate if FluidAnalysis has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FluidAnalysisSpecified
         {
             get {
             if(fluidAnalysisField!=null)
                 return fluidAnalysisField.Count>0?true:false;
             else return false;
             }
         }
        private List<FluidAnalysis> fluidAnalysisField; 

        /// <summary>
        /// Information about a single Fluid Analysis. 
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FluidAnalysis;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the documenti nstance.
        /// </summary>
		[Required]
        [RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the documenti nstance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// The plural root element which allows data concerning multiple optical paths to be transferred.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("fiberOpticalPaths", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("The plural root element which allows data concerning multiple optical paths to be transferred.")]
    public partial class FiberOpticalPathList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// facilityIdentifier property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_facilityIdentifier")]
		[XmlElement("facilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return facilityIdentifierField;
            } 
            set {
                facilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier facilityIdentifierField; 

        /// <summary>
        /// fiberOpticalPath property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_fiberOpticalPath")]
		[XmlElement("fiberOpticalPath")]
        public List<FiberOpticalPath> FiberOpticalPath {
            get {
                return fiberOpticalPathField;
            } 
            set {
                fiberOpticalPathField = value;
                NotifyPropertyChanged("FiberOpticalPath");
            }
        }

         /// <summary>
         /// bool to indicate if FiberOpticalPath has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FiberOpticalPathSpecified
         {
             get {
             if(fiberOpticalPathField!=null)
                 return fiberOpticalPathField.Count>0?true:false;
             else return false;
             }
         }
        private List<FiberOpticalPath> fiberOpticalPathField; 

        /// <summary>
        /// fiberOpticalPath property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FiberOpticalPath;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// The plural root element which allows data concerning multiple measurements to be transferred.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("dtsMeasurements", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("The plural root element which allows data concerning multiple measurements to be transferred.")]
    public partial class DtsMeasurementList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// facilityIdentifier property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_facilityIdentifier")]
		[XmlElement("facilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return facilityIdentifierField;
            } 
            set {
                facilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier facilityIdentifierField; 

        /// <summary>
        /// dtsMeasurement property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_dtsMeasurement")]
		[XmlElement("dtsMeasurement")]
        public List<DtsMeasurement> DtsMeasurement {
            get {
                return dtsMeasurementField;
            } 
            set {
                dtsMeasurementField = value;
                NotifyPropertyChanged("DtsMeasurement");
            }
        }

         /// <summary>
         /// bool to indicate if DtsMeasurement has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DtsMeasurementSpecified
         {
             get {
             if(dtsMeasurementField!=null)
                 return dtsMeasurementField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsMeasurement> dtsMeasurementField; 

        /// <summary>
        /// dtsMeasurement property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DtsMeasurement;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// The plural root element which allows data concrning multiple instrument boxes to be transferred.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("dtsInstrumentBoxes", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("The plural root element which allows data concrning multiple instrument boxes to be transferred.")]
    public partial class DtsInstrumentBoxeList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// facilityIdentifier property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_facilityIdentifier")]
		[XmlElement("facilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return facilityIdentifierField;
            } 
            set {
                facilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier facilityIdentifierField; 

        /// <summary>
        /// fiberInstrumentBox property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_dtsInstrumentBox")]
		[XmlElement("fiberInstrumentBox")]
        public List<DtsInstrumentBox> FiberInstrumentBox {
            get {
                return fiberInstrumentBoxField;
            } 
            set {
                fiberInstrumentBoxField = value;
                NotifyPropertyChanged("FiberInstrumentBox");
            }
        }

         /// <summary>
         /// bool to indicate if FiberInstrumentBox has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool FiberInstrumentBoxSpecified
         {
             get {
             if(fiberInstrumentBoxField!=null)
                 return fiberInstrumentBoxField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsInstrumentBox> fiberInstrumentBoxField; 

        /// <summary>
        /// fiberInstrumentBox property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return FiberInstrumentBox;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    /// <summary>
    /// The plural root element which allows data concerning multiple installed systems to be transferred.
    /// </summary>
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
    [System.Xml.Serialization.XmlRootAttribute("dtsInstalledSystems", Namespace="http://www.prodml.org/schemas/1series", IsNullable=false)]
	[Description("The plural root element which allows data concerning multiple installed systems to be transferred.")]
    public partial class DtsInstalledSystemList : AbstractObject, IEnergisticsCollection, INotifyPropertyChanged
    {

        /// <summary>
        /// documentInfo property
        /// </summary>
		[Description("A schema to capture a set of data that is relevant for many exchange documents. It includes information about the file that was created, and high-level information about the data that is being exchanged within the file.")]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_documentInfo")]
		[XmlElement("documentInfo")]
        public DocumentInfo DocumentInfo {
            get {
                return documentInfoField;
            } 
            set {
                documentInfoField = value;
                NotifyPropertyChanged("DocumentInfo");
            }
        }

        private DocumentInfo documentInfoField; 

        /// <summary>
        /// facilityIdentifier property
        /// </summary>
		[Required]
        [ComponentElement]
        [EnergisticsDataTypeAttribute(DataType = "cs_facilityIdentifier")]
		[XmlElement("facilityIdentifier")]
        public FacilityIdentifier FacilityIdentifier {
            get {
                return facilityIdentifierField;
            } 
            set {
                facilityIdentifierField = value;
                NotifyPropertyChanged("FacilityIdentifier");
            }
        }

        private FacilityIdentifier facilityIdentifierField; 

        /// <summary>
        /// dtsinstalledSystem property
        /// </summary>
		[RecurringElement]
        [EnergisticsDataTypeAttribute(DataType = "obj_dtsInstalledSystem")]
		[XmlElement("dtsinstalledSystem")]
        public List<DtsInstalledSystem> DtsinstalledSystem {
            get {
                return dtsinstalledSystemField;
            } 
            set {
                dtsinstalledSystemField = value;
                NotifyPropertyChanged("DtsinstalledSystem");
            }
        }

         /// <summary>
         /// bool to indicate if DtsinstalledSystem has been set. Used for serialization.
         /// </summary>
         [XmlIgnore]
         public bool DtsinstalledSystemSpecified
         {
             get {
             if(dtsinstalledSystemField!=null)
                 return dtsinstalledSystemField.Count>0?true:false;
             else return false;
             }
         }
        private List<DtsInstalledSystem> dtsinstalledSystemField; 

        /// <summary>
        /// dtsinstalledSystem property
        /// </summary>
        [XmlIgnore]		
        public IList Items
        {
		    get
			{
			    return DtsinstalledSystem;
			}
        }
		/// <summary>
        /// Data object schema version. The fourth level must match the version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.
        /// </summary>
		[RegularExpression("1\\.2\\.[0-9]\\.[1-9]?[0-9]\\(PRODML\\)")]
        [StringLength(16)]
        [Description("Data object schema version.  The fourth level must match the  version of the schema constraints (enumerations and XML loader files) that are assumed by the document instance.")]
        [EnergisticsDataTypeAttribute(DataType = "schemaVersionStringProdml")]
        [XmlAttribute("version")]
		
        public string Version {
            get {
                return versionField;
            } 
            set {
                versionField = value;
                NotifyPropertyChanged("Version");
            }
        }

        private string versionField = "1.3.1.1(PRODML)"; 


    } //here

    #endregion

    #region Enumerations
    namespace ReferenceData {
        /// <summary>
        /// This class represents the VolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the VolumeUom xsd enumeration.")]
        public enum VolumeUom 
        {
        /// <summary>
        /// m3 property
        /// </summary>
          m3,
        /// <summary>
        /// acreft property
        /// </summary>
          [XmlEnum("acre.ft")]
          acreft,
        /// <summary>
        /// bbl property
        /// </summary>
          bbl,
        /// <summary>
        /// bcf property
        /// </summary>
          bcf,
        /// <summary>
        /// cm3 property
        /// </summary>
          cm3,
        /// <summary>
        /// dm3 property
        /// </summary>
          dm3,
        /// <summary>
        /// flozUK property
        /// </summary>
          flozUK,
        /// <summary>
        /// flozUS property
        /// </summary>
          flozUS,
        /// <summary>
        /// ft3 property
        /// </summary>
          ft3,
        /// <summary>
        /// galUK property
        /// </summary>
          galUK,
        /// <summary>
        /// galUS property
        /// </summary>
          galUS,
        /// <summary>
        /// ham property
        /// </summary>
          [XmlEnum("ha.m")]
          ham,
        /// <summary>
        /// hL property
        /// </summary>
          hL,
        /// <summary>
        /// in3 property
        /// </summary>
          in3,
        /// <summary>
        /// Item1000ft3 property
        /// </summary>
          [XmlEnum("1000ft3")]
          Item1000ft3,
        /// <summary>
        /// km3 property
        /// </summary>
          km3,
        /// <summary>
        /// L property
        /// </summary>
          L,
        /// <summary>
        /// Mbbl property
        /// </summary>
          Mbbl,
        /// <summary>
        /// Mcf property
        /// </summary>
          Mcf,
        /// <summary>
        /// Mft3 property
        /// </summary>
          [XmlEnum("M(ft3)")]
          Mft3,
        /// <summary>
        /// mi3 property
        /// </summary>
          mi3,
        /// <summary>
        /// mL property
        /// </summary>
          mL,
        /// <summary>
        /// Mm3 property
        /// </summary>
          [XmlEnum("M(m3)")]
          Mm3,
        /// <summary>
        /// mm3 property
        /// </summary>
          mm3,
        /// <summary>
        /// MMbbl property
        /// </summary>
          MMbbl,
        /// <summary>
        /// ptUK property
        /// </summary>
          ptUK,
        /// <summary>
        /// ptUS property
        /// </summary>
          ptUS,
        /// <summary>
        /// qtUK property
        /// </summary>
          qtUK,
        /// <summary>
        /// qtUS property
        /// </summary>
          qtUS,
        /// <summary>
        /// tcf property
        /// </summary>
          tcf,
        /// <summary>
        /// um2m property
        /// </summary>
          [XmlEnum("um2.m")]
          um2m,
        /// <summary>
        /// yd3 property
        /// </summary>
          yd3
        }
        /// <summary>
        /// This class represents the VolumeFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the VolumeFlowRateUom xsd enumeration.")]
        public enum VolumeFlowRateUom 
        {
        /// <summary>
        /// m3s property
        /// </summary>
          [XmlEnum("m3/s")]
          m3s,
        /// <summary>
        /// bbld property
        /// </summary>
          [XmlEnum("bbl/d")]
          bbld,
        /// <summary>
        /// bblhr property
        /// </summary>
          [XmlEnum("bbl/hr")]
          bblhr,
        /// <summary>
        /// bblmin property
        /// </summary>
          [XmlEnum("bbl/min")]
          bblmin,
        /// <summary>
        /// cm330min property
        /// </summary>
          [XmlEnum("cm3/30min")]
          cm330min,
        /// <summary>
        /// cm3h property
        /// </summary>
          [XmlEnum("cm3/h")]
          cm3h,
        /// <summary>
        /// cm3min property
        /// </summary>
          [XmlEnum("cm3/min")]
          cm3min,
        /// <summary>
        /// cm3s property
        /// </summary>
          [XmlEnum("cm3/s")]
          cm3s,
        /// <summary>
        /// dm3s property
        /// </summary>
          [XmlEnum("dm3/s")]
          dm3s,
        /// <summary>
        /// ft3d property
        /// </summary>
          [XmlEnum("ft3/d")]
          ft3d,
        /// <summary>
        /// ft3h property
        /// </summary>
          [XmlEnum("ft3/h")]
          ft3h,
        /// <summary>
        /// ft3min property
        /// </summary>
          [XmlEnum("ft3/min")]
          ft3min,
        /// <summary>
        /// ft3s property
        /// </summary>
          [XmlEnum("ft3/s")]
          ft3s,
        /// <summary>
        /// galUKd property
        /// </summary>
          [XmlEnum("galUK/d")]
          galUKd,
        /// <summary>
        /// galUKhr property
        /// </summary>
          [XmlEnum("galUK/hr")]
          galUKhr,
        /// <summary>
        /// galUKmin property
        /// </summary>
          [XmlEnum("galUK/min")]
          galUKmin,
        /// <summary>
        /// galUSd property
        /// </summary>
          [XmlEnum("galUS/d")]
          galUSd,
        /// <summary>
        /// galUShr property
        /// </summary>
          [XmlEnum("galUS/hr")]
          galUShr,
        /// <summary>
        /// galUSmin property
        /// </summary>
          [XmlEnum("galUS/min")]
          galUSmin,
        /// <summary>
        /// kbbld property
        /// </summary>
          [XmlEnum("kbbl/d")]
          kbbld,
        /// <summary>
        /// Item1000ft3d property
        /// </summary>
          [XmlEnum("1000ft3/d")]
          Item1000ft3d,
        /// <summary>
        /// Item1000m3d property
        /// </summary>
          [XmlEnum("1000m3/d")]
          Item1000m3d,
        /// <summary>
        /// Item1000m3h property
        /// </summary>
          [XmlEnum("1000m3/h")]
          Item1000m3h,
        /// <summary>
        /// Lh property
        /// </summary>
          [XmlEnum("L/h")]
          Lh,
        /// <summary>
        /// Lmin property
        /// </summary>
          [XmlEnum("L/min")]
          Lmin,
        /// <summary>
        /// Ls property
        /// </summary>
          [XmlEnum("L/s")]
          Ls,
        /// <summary>
        /// m3d property
        /// </summary>
          [XmlEnum("m3/d")]
          m3d,
        /// <summary>
        /// m3h property
        /// </summary>
          [XmlEnum("m3/h")]
          m3h,
        /// <summary>
        /// m3min property
        /// </summary>
          [XmlEnum("m3/min")]
          m3min,
        /// <summary>
        /// Mbbld property
        /// </summary>
          [XmlEnum("Mbbl/d")]
          Mbbld,
        /// <summary>
        /// Mft3d property
        /// </summary>
          [XmlEnum("M(ft3)/d")]
          Mft3d,
        /// <summary>
        /// Mm3d property
        /// </summary>
          [XmlEnum("M(m3)/d")]
          Mm3d
        }
        /// <summary>
        /// This class represents the WellVerticalCoordinateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the WellVerticalCoordinateUom xsd enumeration.")]
        public enum WellVerticalCoordinateUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65
        }
        /// <summary>
        /// This class represents the MeasuredDepthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the MeasuredDepthUom xsd enumeration.")]
        public enum MeasuredDepthUom 
        {
        /// <summary>
        /// meter
        /// </summary>
          m,
        /// <summary>
        /// International Foot
        /// </summary>
          ft,
        /// <summary>
        /// US Survey Foot
        /// </summary>
          ftUS
        }
        /// <summary>
        /// This class represents the PercentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the PercentUom xsd enumeration.")]
        public enum PercentUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item
        }
        /// <summary>
        /// This class represents the VolumePerVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the VolumePerVolumeUom xsd enumeration.")]
        public enum VolumePerVolumeUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// permil property
        /// </summary>
          permil,
        /// <summary>
        /// ppdk property
        /// </summary>
          ppdk,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm,
        /// <summary>
        /// bblacreft property
        /// </summary>
          [XmlEnum("bbl/acre.ft")]
          bblacreft,
        /// <summary>
        /// bblbbl property
        /// </summary>
          [XmlEnum("bbl/bbl")]
          bblbbl,
        /// <summary>
        /// bblft3 property
        /// </summary>
          [XmlEnum("bbl/ft3")]
          bblft3,
        /// <summary>
        /// bbl100bbl property
        /// </summary>
          [XmlEnum("bbl/100bbl")]
          bbl100bbl,
        /// <summary>
        /// bblkft3 property
        /// </summary>
          [XmlEnum("bbl/k(ft3)")]
          bblkft3,
        /// <summary>
        /// bblMft3 property
        /// </summary>
          [XmlEnum("bbl/M(ft3)")]
          bblMft3,
        /// <summary>
        /// cm3cm3 property
        /// </summary>
          [XmlEnum("cm3/cm3")]
          cm3cm3,
        /// <summary>
        /// cm3m3 property
        /// </summary>
          [XmlEnum("cm3/m3")]
          cm3m3,
        /// <summary>
        /// dm3m3 property
        /// </summary>
          [XmlEnum("dm3/m3")]
          dm3m3,
        /// <summary>
        /// ft3bbl property
        /// </summary>
          [XmlEnum("ft3/bbl")]
          ft3bbl,
        /// <summary>
        /// ft3ft3 property
        /// </summary>
          [XmlEnum("ft3/ft3")]
          ft3ft3,
        /// <summary>
        /// galUSkgalUS property
        /// </summary>
          [XmlEnum("galUS/kgalUS")]
          galUSkgalUS,
        /// <summary>
        /// galUKkgalUK property
        /// </summary>
          [XmlEnum("galUK/kgalUK")]
          galUKkgalUK,
        /// <summary>
        /// galUKft3 property
        /// </summary>
          [XmlEnum("galUK/ft3")]
          galUKft3,
        /// <summary>
        /// galUKMbbl property
        /// </summary>
          [XmlEnum("galUK/Mbbl")]
          galUKMbbl,
        /// <summary>
        /// galUSbbl property
        /// </summary>
          [XmlEnum("galUS/bbl")]
          galUSbbl,
        /// <summary>
        /// galUS10bbl property
        /// </summary>
          [XmlEnum("galUS/10bbl")]
          galUS10bbl,
        /// <summary>
        /// galUSft3 property
        /// </summary>
          [XmlEnum("galUS/ft3")]
          galUSft3,
        /// <summary>
        /// galUSMbbl property
        /// </summary>
          [XmlEnum("galUS/Mbbl")]
          galUSMbbl,
        /// <summary>
        /// Item1000ft3bbl property
        /// </summary>
          [XmlEnum("1000ft3/bbl")]
          Item1000ft3bbl,
        /// <summary>
        /// ksm3sm3 property
        /// </summary>
          [XmlEnum("ksm3/sm3")]
          ksm3sm3,
        /// <summary>
        /// L10bbl property
        /// </summary>
          [XmlEnum("L/10bbl")]
          L10bbl,
        /// <summary>
        /// Lm3 property
        /// </summary>
          [XmlEnum("L/m3")]
          Lm3,
        /// <summary>
        /// m3ham property
        /// </summary>
          [XmlEnum("m3/ha.m")]
          m3ham,
        /// <summary>
        /// m3m3 property
        /// </summary>
          [XmlEnum("m3/m3")]
          m3m3,
        /// <summary>
        /// Mft3acreft property
        /// </summary>
          [XmlEnum("M(ft3)/acre.ft")]
          Mft3acreft,
        /// <summary>
        /// mLgalUK property
        /// </summary>
          [XmlEnum("mL/galUK")]
          mLgalUK,
        /// <summary>
        /// mLgalUS property
        /// </summary>
          [XmlEnum("mL/galUS")]
          mLgalUS,
        /// <summary>
        /// mLmL property
        /// </summary>
          [XmlEnum("mL/mL")]
          mLmL,
        /// <summary>
        /// MMbblacreft property
        /// </summary>
          [XmlEnum("MMbbl/acre.ft")]
          MMbblacreft,
        /// <summary>
        /// MMscf60stb60 property
        /// </summary>
          [XmlEnum("MMscf60/stb60")]
          MMscf60stb60,
        /// <summary>
        /// Mscf60stb60 property
        /// </summary>
          [XmlEnum("Mscf60/stb60")]
          Mscf60stb60,
        /// <summary>
        /// ptUKMbbl property
        /// </summary>
          [XmlEnum("ptUK/Mbbl")]
          ptUKMbbl,
        /// <summary>
        /// ptUS10bbl property
        /// </summary>
          [XmlEnum("ptUS/10bbl")]
          ptUS10bbl,
        /// <summary>
        /// pu property
        /// </summary>
          pu,
        /// <summary>
        /// scm15stb60 property
        /// </summary>
          [XmlEnum("scm15/stb60")]
          scm15stb60,
        /// <summary>
        /// sm3ksm3 property
        /// </summary>
          [XmlEnum("sm3/ksm3")]
          sm3ksm3,
        /// <summary>
        /// sm3sm3 property
        /// </summary>
          [XmlEnum("sm3/sm3")]
          sm3sm3,
        /// <summary>
        /// stb60MMscf60 property
        /// </summary>
          [XmlEnum("stb60/MMscf60")]
          stb60MMscf60,
        /// <summary>
        /// stb60MMscm15 property
        /// </summary>
          [XmlEnum("stb60/MMscm15")]
          stb60MMscm15,
        /// <summary>
        /// stb60Mscf60 property
        /// </summary>
          [XmlEnum("stb60/Mscf60")]
          stb60Mscf60,
        /// <summary>
        /// stb60Mscm15 property
        /// </summary>
          [XmlEnum("stb60/Mscm15")]
          stb60Mscm15,
        /// <summary>
        /// stb60scm15 property
        /// </summary>
          [XmlEnum("stb60/scm15")]
          stb60scm15
        }
        /// <summary>
        /// This class represents the VelocityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the VelocityUom xsd enumeration.")]
        public enum VelocityUom 
        {
        /// <summary>
        /// ms property
        /// </summary>
          [XmlEnum("m/s")]
          ms,
        /// <summary>
        /// cma property
        /// </summary>
          [XmlEnum("cm/a")]
          cma,
        /// <summary>
        /// cms property
        /// </summary>
          [XmlEnum("cm/s")]
          cms,
        /// <summary>
        /// dms property
        /// </summary>
          [XmlEnum("dm/s")]
          dms,
        /// <summary>
        /// ftd property
        /// </summary>
          [XmlEnum("ft/d")]
          ftd,
        /// <summary>
        /// fth property
        /// </summary>
          [XmlEnum("ft/h")]
          fth,
        /// <summary>
        /// ftmin property
        /// </summary>
          [XmlEnum("ft/min")]
          ftmin,
        /// <summary>
        /// ftms property
        /// </summary>
          [XmlEnum("ft/ms")]
          ftms,
        /// <summary>
        /// fts property
        /// </summary>
          [XmlEnum("ft/s")]
          fts,
        /// <summary>
        /// ftus property
        /// </summary>
          [XmlEnum("ft/us")]
          ftus,
        /// <summary>
        /// ina property
        /// </summary>
          [XmlEnum("in/a")]
          ina,
        /// <summary>
        /// inmin property
        /// </summary>
          [XmlEnum("in/min")]
          inmin,
        /// <summary>
        /// ins property
        /// </summary>
          [XmlEnum("in/s")]
          ins,
        /// <summary>
        /// kfth property
        /// </summary>
          [XmlEnum("kft/h")]
          kfth,
        /// <summary>
        /// kfts property
        /// </summary>
          [XmlEnum("kft/s")]
          kfts,
        /// <summary>
        /// kmh property
        /// </summary>
          [XmlEnum("km/h")]
          kmh,
        /// <summary>
        /// kms property
        /// </summary>
          [XmlEnum("km/s")]
          kms,
        /// <summary>
        /// knot property
        /// </summary>
          knot,
        /// <summary>
        /// md property
        /// </summary>
          [XmlEnum("m/d")]
          md,
        /// <summary>
        /// mh property
        /// </summary>
          [XmlEnum("m/h")]
          mh,
        /// <summary>
        /// mmin property
        /// </summary>
          [XmlEnum("m/min")]
          mmin,
        /// <summary>
        /// mms property
        /// </summary>
          [XmlEnum("m/ms")]
          mms,
        /// <summary>
        /// mih property
        /// </summary>
          [XmlEnum("mi/h")]
          mih,
        /// <summary>
        /// milyr property
        /// </summary>
          [XmlEnum("mil/yr")]
          milyr,
        /// <summary>
        /// mma property
        /// </summary>
          [XmlEnum("mm/a")]
          mma,
        /// <summary>
        /// mms1 property
        /// </summary>
          [XmlEnum("mm/s")]
          mms1,
        /// <summary>
        /// nms property
        /// </summary>
          [XmlEnum("nm/s")]
          nms,
        /// <summary>
        /// ums property
        /// </summary>
          [XmlEnum("um/s")]
          ums
        }
        /// <summary>
        /// This class represents the TimeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the TimeUom xsd enumeration.")]
        public enum TimeUom 
        {
        /// <summary>
        /// s property
        /// </summary>
          s,
        /// <summary>
        /// a property
        /// </summary>
          a,
        /// <summary>
        /// cs property
        /// </summary>
          cs,
        /// <summary>
        /// d property
        /// </summary>
          d,
        /// <summary>
        /// Ga property
        /// </summary>
          Ga,
        /// <summary>
        /// h property
        /// </summary>
          h,
        /// <summary>
        /// Item100s property
        /// </summary>
          [XmlEnum("100s")]
          Item100s,
        /// <summary>
        /// Ma property
        /// </summary>
          Ma,
        /// <summary>
        /// min property
        /// </summary>
          min,
        /// <summary>
        /// ms property
        /// </summary>
          ms,
        /// <summary>
        /// ms2 property
        /// </summary>
          [XmlEnum("ms/2")]
          ms2,
        /// <summary>
        /// ns property
        /// </summary>
          ns,
        /// <summary>
        /// ps property
        /// </summary>
          ps,
        /// <summary>
        /// us property
        /// </summary>
          us,
        /// <summary>
        /// wk property
        /// </summary>
          wk,
        /// <summary>
        /// Item100ka property
        /// </summary>
          [XmlEnum("100ka")]
          Item100ka
        }
        /// <summary>
        /// This class represents the ThermodynamicTemperatureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ThermodynamicTemperatureUom xsd enumeration.")]
        public enum ThermodynamicTemperatureUom 
        {
        /// <summary>
        /// K property
        /// </summary>
          K,
        /// <summary>
        /// degC property
        /// </summary>
          degC,
        /// <summary>
        /// degF property
        /// </summary>
          degF,
        /// <summary>
        /// degR property
        /// </summary>
          degR
        }
        /// <summary>
        /// This class represents the PressureUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the PressureUom xsd enumeration.")]
        public enum PressureUom 
        {
        /// <summary>
        /// Pa property
        /// </summary>
          Pa,
        /// <summary>
        /// at property
        /// </summary>
          at,
        /// <summary>
        /// atm property
        /// </summary>
          atm,
        /// <summary>
        /// bar property
        /// </summary>
          bar,
        /// <summary>
        /// cmH2O4degC property
        /// </summary>
          [XmlEnum("cmH2O(4degC)")]
          cmH2O4degC,
        /// <summary>
        /// dynecm2 property
        /// </summary>
          [XmlEnum("dyne/cm2")]
          dynecm2,
        /// <summary>
        /// GPa property
        /// </summary>
          GPa,
        /// <summary>
        /// hbar property
        /// </summary>
          hbar,
        /// <summary>
        /// inH2O392F property
        /// </summary>
          [XmlEnum("inH2O(39.2F)")]
          inH2O392F,
        /// <summary>
        /// inH2O60F property
        /// </summary>
          [XmlEnum("inH2O(60F)")]
          inH2O60F,
        /// <summary>
        /// inHg32F property
        /// </summary>
          [XmlEnum("inHg(32F)")]
          inHg32F,
        /// <summary>
        /// inHg60F property
        /// </summary>
          [XmlEnum("inHg(60F)")]
          inHg60F,
        /// <summary>
        /// kgfcm2 property
        /// </summary>
          [XmlEnum("kgf/cm2")]
          kgfcm2,
        /// <summary>
        /// kgfmm2 property
        /// </summary>
          [XmlEnum("kgf/mm2")]
          kgfmm2,
        /// <summary>
        /// kNm2 property
        /// </summary>
          [XmlEnum("kN/m2")]
          kNm2,
        /// <summary>
        /// kPa property
        /// </summary>
          kPa,
        /// <summary>
        /// kpsi property
        /// </summary>
          kpsi,
        /// <summary>
        /// lbfft2 property
        /// </summary>
          [XmlEnum("lbf/ft2")]
          lbfft2,
        /// <summary>
        /// lbf100ft2 property
        /// </summary>
          [XmlEnum("lbf/100ft2")]
          lbf100ft2,
        /// <summary>
        /// lbfin2 property
        /// </summary>
          [XmlEnum("lbf/in2")]
          lbfin2,
        /// <summary>
        /// mbar property
        /// </summary>
          mbar,
        /// <summary>
        /// mmHg0C property
        /// </summary>
          [XmlEnum("mmHg(0C)")]
          mmHg0C,
        /// <summary>
        /// mPa property
        /// </summary>
          mPa,
        /// <summary>
        /// MPa property
        /// </summary>
          MPa,
        /// <summary>
        /// Mpsi property
        /// </summary>
          Mpsi,
        /// <summary>
        /// Nm2 property
        /// </summary>
          [XmlEnum("N/m2")]
          Nm2,
        /// <summary>
        /// Nmm2 property
        /// </summary>
          [XmlEnum("N/mm2")]
          Nmm2,
        /// <summary>
        /// Pag property
        /// </summary>
          [XmlEnum("Pa(g)")]
          Pag,
        /// <summary>
        /// pPa property
        /// </summary>
          pPa,
        /// <summary>
        /// psi property
        /// </summary>
          psi,
        /// <summary>
        /// tonfUSft2 property
        /// </summary>
          [XmlEnum("tonfUS/ft2")]
          tonfUSft2,
        /// <summary>
        /// tonfUSin2 property
        /// </summary>
          [XmlEnum("tonfUS/in2")]
          tonfUSin2,
        /// <summary>
        /// torr property
        /// </summary>
          torr,
        /// <summary>
        /// ubar property
        /// </summary>
          ubar,
        /// <summary>
        /// umHg0C property
        /// </summary>
          [XmlEnum("umHg(0C)")]
          umHg0C,
        /// <summary>
        /// uPa property
        /// </summary>
          uPa,
        /// <summary>
        /// upsi property
        /// </summary>
          upsi
        }
        /// <summary>
        /// This class represents the PlaneAngleUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the PlaneAngleUom xsd enumeration.")]
        public enum PlaneAngleUom 
        {
        /// <summary>
        /// rad property
        /// </summary>
          rad,
        /// <summary>
        /// c property
        /// </summary>
          c,
        /// <summary>
        /// ccgr property
        /// </summary>
          ccgr,
        /// <summary>
        /// cgr property
        /// </summary>
          cgr,
        /// <summary>
        /// dega property
        /// </summary>
          dega,
        /// <summary>
        /// gon property
        /// </summary>
          gon,
        /// <summary>
        /// gr property
        /// </summary>
          gr,
        /// <summary>
        /// Grad property
        /// </summary>
          Grad,
        /// <summary>
        /// krad property
        /// </summary>
          krad,
        /// <summary>
        /// mila property
        /// </summary>
          mila,
        /// <summary>
        /// mina property
        /// </summary>
          mina,
        /// <summary>
        /// mrad property
        /// </summary>
          mrad,
        /// <summary>
        /// Mrad property
        /// </summary>
          Mrad,
        /// <summary>
        /// mseca property
        /// </summary>
          mseca,
        /// <summary>
        /// seca property
        /// </summary>
          seca,
        /// <summary>
        /// urad property
        /// </summary>
          urad
        }
        /// <summary>
        /// This class represents the MassUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the MassUom xsd enumeration.")]
        public enum MassUom 
        {
        /// <summary>
        /// kg property
        /// </summary>
          kg,
        /// <summary>
        /// ag property
        /// </summary>
          ag,
        /// <summary>
        /// ct property
        /// </summary>
          ct,
        /// <summary>
        /// cwtUK property
        /// </summary>
          cwtUK,
        /// <summary>
        /// cwtUS property
        /// </summary>
          cwtUS,
        /// <summary>
        /// g property
        /// </summary>
          g,
        /// <summary>
        /// grain property
        /// </summary>
          grain,
        /// <summary>
        /// klbm property
        /// </summary>
          klbm,
        /// <summary>
        /// lbm property
        /// </summary>
          lbm,
        /// <summary>
        /// Mg property
        /// </summary>
          Mg,
        /// <summary>
        /// mg property
        /// </summary>
          mg,
        /// <summary>
        /// ozav property
        /// </summary>
          [XmlEnum("oz(av)")]
          ozav,
        /// <summary>
        /// oztroy property
        /// </summary>
          [XmlEnum("oz(troy)")]
          oztroy,
        /// <summary>
        /// ozm property
        /// </summary>
          ozm,
        /// <summary>
        /// sack94 property
        /// </summary>
          sack94,
        /// <summary>
        /// t property
        /// </summary>
          t,
        /// <summary>
        /// tonUK property
        /// </summary>
          tonUK,
        /// <summary>
        /// tonUS property
        /// </summary>
          tonUS,
        /// <summary>
        /// ug property
        /// </summary>
          ug
        }
        /// <summary>
        /// This class represents the MassConcentrationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the MassConcentrationUom xsd enumeration.")]
        public enum MassConcentrationUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// gkg property
        /// </summary>
          [XmlEnum("g/kg")]
          gkg,
        /// <summary>
        /// kgkg property
        /// </summary>
          [XmlEnum("kg/kg")]
          kgkg,
        /// <summary>
        /// kgsack94 property
        /// </summary>
          [XmlEnum("kg/sack94")]
          kgsack94,
        /// <summary>
        /// mgkg property
        /// </summary>
          [XmlEnum("mg/kg")]
          mgkg,
        /// <summary>
        /// permil property
        /// </summary>
          permil,
        /// <summary>
        /// ppdk property
        /// </summary>
          ppdk,
        /// <summary>
        /// ppk property
        /// </summary>
          ppk,
        /// <summary>
        /// ppm property
        /// </summary>
          ppm
        }
        /// <summary>
        /// This class represents the LengthPerLengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the LengthPerLengthUom xsd enumeration.")]
        public enum LengthPerLengthUom 
        {
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// ft100ft property
        /// </summary>
          [XmlEnum("ft/100ft")]
          ft100ft,
        /// <summary>
        /// ftft property
        /// </summary>
          [XmlEnum("ft/ft")]
          ftft,
        /// <summary>
        /// ftin property
        /// </summary>
          [XmlEnum("ft/in")]
          ftin,
        /// <summary>
        /// ftm property
        /// </summary>
          [XmlEnum("ft/m")]
          ftm,
        /// <summary>
        /// ftmi property
        /// </summary>
          [XmlEnum("ft/mi")]
          ftmi,
        /// <summary>
        /// kmcm property
        /// </summary>
          [XmlEnum("km/cm")]
          kmcm,
        /// <summary>
        /// m30m property
        /// </summary>
          [XmlEnum("m/30m")]
          m30m,
        /// <summary>
        /// mcm property
        /// </summary>
          [XmlEnum("m/cm")]
          mcm,
        /// <summary>
        /// mkm property
        /// </summary>
          [XmlEnum("m/km")]
          mkm,
        /// <summary>
        /// mm property
        /// </summary>
          [XmlEnum("m/m")]
          mm,
        /// <summary>
        /// miin property
        /// </summary>
          [XmlEnum("mi/in")]
          miin
        }
        /// <summary>
        /// This class represents the LengthUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the LengthUom xsd enumeration.")]
        public enum LengthUom 
        {
        /// <summary>
        /// m property
        /// </summary>
          m,
        /// <summary>
        /// angstrom property
        /// </summary>
          angstrom,
        /// <summary>
        /// chBnA property
        /// </summary>
          chBnA,
        /// <summary>
        /// chBnB property
        /// </summary>
          chBnB,
        /// <summary>
        /// chCla property
        /// </summary>
          chCla,
        /// <summary>
        /// chSe property
        /// </summary>
          chSe,
        /// <summary>
        /// chUS property
        /// </summary>
          chUS,
        /// <summary>
        /// cm property
        /// </summary>
          cm,
        /// <summary>
        /// dm property
        /// </summary>
          dm,
        /// <summary>
        /// fathom property
        /// </summary>
          fathom,
        /// <summary>
        /// fm property
        /// </summary>
          fm,
        /// <summary>
        /// ft property
        /// </summary>
          ft,
        /// <summary>
        /// ftBnA property
        /// </summary>
          ftBnA,
        /// <summary>
        /// ftBnB property
        /// </summary>
          ftBnB,
        /// <summary>
        /// ftBr65 property
        /// </summary>
          [XmlEnum("ftBr(65)")]
          ftBr65,
        /// <summary>
        /// ftCla property
        /// </summary>
          ftCla,
        /// <summary>
        /// ftGC property
        /// </summary>
          ftGC,
        /// <summary>
        /// ftInd property
        /// </summary>
          ftInd,
        /// <summary>
        /// ftInd37 property
        /// </summary>
          [XmlEnum("ftInd(37)")]
          ftInd37,
        /// <summary>
        /// ftInd62 property
        /// </summary>
          [XmlEnum("ftInd(62)")]
          ftInd62,
        /// <summary>
        /// ftInd75 property
        /// </summary>
          [XmlEnum("ftInd(75)")]
          ftInd75,
        /// <summary>
        /// ftMA property
        /// </summary>
          ftMA,
        /// <summary>
        /// ftSe property
        /// </summary>
          ftSe,
        /// <summary>
        /// ftUS property
        /// </summary>
          ftUS,
        /// <summary>
        /// in property
        /// </summary>
          @in,
        /// <summary>
        /// in10 property
        /// </summary>
          [XmlEnum("in/10")]
          in10,
        /// <summary>
        /// in16 property
        /// </summary>
          [XmlEnum("in/16")]
          in16,
        /// <summary>
        /// in32 property
        /// </summary>
          [XmlEnum("in/32")]
          in32,
        /// <summary>
        /// in64 property
        /// </summary>
          [XmlEnum("in/64")]
          in64,
        /// <summary>
        /// inUS property
        /// </summary>
          inUS,
        /// <summary>
        /// km property
        /// </summary>
          km,
        /// <summary>
        /// lkBnA property
        /// </summary>
          lkBnA,
        /// <summary>
        /// lkBnB property
        /// </summary>
          lkBnB,
        /// <summary>
        /// lkCla property
        /// </summary>
          lkCla,
        /// <summary>
        /// lkSe property
        /// </summary>
          lkSe,
        /// <summary>
        /// lkUS property
        /// </summary>
          lkUS,
        /// <summary>
        /// mGer property
        /// </summary>
          mGer,
        /// <summary>
        /// mi property
        /// </summary>
          mi,
        /// <summary>
        /// mil property
        /// </summary>
          mil,
        /// <summary>
        /// miUS property
        /// </summary>
          miUS,
        /// <summary>
        /// mm property
        /// </summary>
          mm,
        /// <summary>
        /// Mm property
        /// </summary>
          Mm,
        /// <summary>
        /// nautmi property
        /// </summary>
          nautmi,
        /// <summary>
        /// nm property
        /// </summary>
          nm,
        /// <summary>
        /// pm property
        /// </summary>
          pm,
        /// <summary>
        /// um property
        /// </summary>
          um,
        /// <summary>
        /// yd property
        /// </summary>
          yd,
        /// <summary>
        /// ydBnA property
        /// </summary>
          ydBnA,
        /// <summary>
        /// ydBnB property
        /// </summary>
          ydBnB,
        /// <summary>
        /// ydCla property
        /// </summary>
          ydCla,
        /// <summary>
        /// ydIm property
        /// </summary>
          ydIm,
        /// <summary>
        /// ydInd property
        /// </summary>
          ydInd,
        /// <summary>
        /// ydInd37 property
        /// </summary>
          [XmlEnum("ydInd(37)")]
          ydInd37,
        /// <summary>
        /// ydInd62 property
        /// </summary>
          [XmlEnum("ydInd(62)")]
          ydInd62,
        /// <summary>
        /// ydInd75 property
        /// </summary>
          [XmlEnum("ydInd(75)")]
          ydInd75,
        /// <summary>
        /// ydSe property
        /// </summary>
          ydSe
        }
        /// <summary>
        /// This class represents the ElectricCurrentUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ElectricCurrentUom xsd enumeration.")]
        public enum ElectricCurrentUom 
        {
        /// <summary>
        /// A property
        /// </summary>
          A,
        /// <summary>
        /// MA property
        /// </summary>
          MA,
        /// <summary>
        /// kA property
        /// </summary>
          kA,
        /// <summary>
        /// mA property
        /// </summary>
          mA,
        /// <summary>
        /// nA property
        /// </summary>
          nA,
        /// <summary>
        /// pA property
        /// </summary>
          pA,
        /// <summary>
        /// uA property
        /// </summary>
          uA
        }
        /// <summary>
        /// This class represents the DynamicViscosityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the DynamicViscosityUom xsd enumeration.")]
        public enum DynamicViscosityUom 
        {
        /// <summary>
        /// Pas property
        /// </summary>
          [XmlEnum("Pa.s")]
          Pas,
        /// <summary>
        /// cP property
        /// </summary>
          cP,
        /// <summary>
        /// P property
        /// </summary>
          P,
        /// <summary>
        /// psis property
        /// </summary>
          [XmlEnum("psi.s")]
          psis,
        /// <summary>
        /// dynescm2 property
        /// </summary>
          [XmlEnum("dyne.s/cm2")]
          dynescm2,
        /// <summary>
        /// kgfsm2 property
        /// </summary>
          [XmlEnum("kgf.s/m2")]
          kgfsm2,
        /// <summary>
        /// lbfsft2 property
        /// </summary>
          [XmlEnum("lbf.s/ft2")]
          lbfsft2,
        /// <summary>
        /// lbfsin2 property
        /// </summary>
          [XmlEnum("lbf.s/in2")]
          lbfsin2,
        /// <summary>
        /// mPas property
        /// </summary>
          [XmlEnum("mPa.s")]
          mPas,
        /// <summary>
        /// Nsm2 property
        /// </summary>
          [XmlEnum("N.s/m2")]
          Nsm2
        }
        /// <summary>
        /// This class represents the DimensionlessUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the DimensionlessUom xsd enumeration.")]
        public enum DimensionlessUom 
        {
        /// <summary>
        /// Euc property
        /// </summary>
          Euc,
        /// <summary>
        /// Item property
        /// </summary>
          [XmlEnum("%")]
          Item,
        /// <summary>
        /// cEuc property
        /// </summary>
          cEuc,
        /// <summary>
        /// mEuc property
        /// </summary>
          mEuc,
        /// <summary>
        /// nEuc property
        /// </summary>
          nEuc,
        /// <summary>
        /// uEuc property
        /// </summary>
          uEuc
        }
        /// <summary>
        /// This class represents the DensityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the DensityUom xsd enumeration.")]
        public enum DensityUom 
        {
        /// <summary>
        /// kgm3 property
        /// </summary>
          [XmlEnum("kg/m3")]
          kgm3,
        /// <summary>
        /// Item10Mgm3 property
        /// </summary>
          [XmlEnum("10Mg/m3")]
          Item10Mgm3,
        /// <summary>
        /// dAPI property
        /// </summary>
          dAPI,
        /// <summary>
        /// gcm3 property
        /// </summary>
          [XmlEnum("g/cm3")]
          gcm3,
        /// <summary>
        /// gdm3 property
        /// </summary>
          [XmlEnum("g/dm3")]
          gdm3,
        /// <summary>
        /// ggalUK property
        /// </summary>
          [XmlEnum("g/galUK")]
          ggalUK,
        /// <summary>
        /// ggalUS property
        /// </summary>
          [XmlEnum("g/galUS")]
          ggalUS,
        /// <summary>
        /// gL property
        /// </summary>
          [XmlEnum("g/L")]
          gL,
        /// <summary>
        /// gm3 property
        /// </summary>
          [XmlEnum("g/m3")]
          gm3,
        /// <summary>
        /// grainft3 property
        /// </summary>
          [XmlEnum("grain/ft3")]
          grainft3,
        /// <summary>
        /// graingalUS property
        /// </summary>
          [XmlEnum("grain/galUS")]
          graingalUS,
        /// <summary>
        /// grain100ft3 property
        /// </summary>
          [XmlEnum("grain/100ft3")]
          grain100ft3,
        /// <summary>
        /// kgdm3 property
        /// </summary>
          [XmlEnum("kg/dm3")]
          kgdm3,
        /// <summary>
        /// kgL property
        /// </summary>
          [XmlEnum("kg/L")]
          kgL,
        /// <summary>
        /// Mgm3 property
        /// </summary>
          [XmlEnum("Mg/m3")]
          Mgm3,
        /// <summary>
        /// lbm10bbl property
        /// </summary>
          [XmlEnum("lbm/10bbl")]
          lbm10bbl,
        /// <summary>
        /// lbmbbl property
        /// </summary>
          [XmlEnum("lbm/bbl")]
          lbmbbl,
        /// <summary>
        /// lbmft3 property
        /// </summary>
          [XmlEnum("lbm/ft3")]
          lbmft3,
        /// <summary>
        /// lbmgalUK property
        /// </summary>
          [XmlEnum("lbm/galUK")]
          lbmgalUK,
        /// <summary>
        /// lbm1000galUK property
        /// </summary>
          [XmlEnum("lbm/1000galUK")]
          lbm1000galUK,
        /// <summary>
        /// lbmgalUS property
        /// </summary>
          [XmlEnum("lbm/galUS")]
          lbmgalUS,
        /// <summary>
        /// lbm1000galUS property
        /// </summary>
          [XmlEnum("lbm/1000galUS")]
          lbm1000galUS,
        /// <summary>
        /// lbmin3 property
        /// </summary>
          [XmlEnum("lbm/in3")]
          lbmin3,
        /// <summary>
        /// lbmMbbl property
        /// </summary>
          [XmlEnum("lbm/Mbbl")]
          lbmMbbl,
        /// <summary>
        /// mgdm3 property
        /// </summary>
          [XmlEnum("mg/dm3")]
          mgdm3,
        /// <summary>
        /// mggalUS property
        /// </summary>
          [XmlEnum("mg/galUS")]
          mggalUS,
        /// <summary>
        /// mgL property
        /// </summary>
          [XmlEnum("mg/L")]
          mgL,
        /// <summary>
        /// mgm3 property
        /// </summary>
          [XmlEnum("mg/m3")]
          mgm3,
        /// <summary>
        /// ugcm3 property
        /// </summary>
          [XmlEnum("ug/cm3")]
          ugcm3
        }
        /// <summary>
        /// This class represents the AttenuationUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the AttenuationUom xsd enumeration.")]
        public enum AttenuationUom 
        {
        /// <summary>
        /// dBkm property
        /// </summary>
          [XmlEnum("dB/km")]
          dBkm
        }
        /// <summary>
        /// This class represents the WorkUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the WorkUom xsd enumeration.")]
        public enum WorkUom 
        {
        /// <summary>
        /// J property
        /// </summary>
          J,
        /// <summary>
        /// aJ property
        /// </summary>
          aJ,
        /// <summary>
        /// Btu property
        /// </summary>
          Btu,
        /// <summary>
        /// cal property
        /// </summary>
          cal,
        /// <summary>
        /// chh property
        /// </summary>
          [XmlEnum("ch.h")]
          chh,
        /// <summary>
        /// Chu property
        /// </summary>
          Chu,
        /// <summary>
        /// CVh property
        /// </summary>
          [XmlEnum("CV.h")]
          CVh,
        /// <summary>
        /// EJ property
        /// </summary>
          EJ,
        /// <summary>
        /// erg property
        /// </summary>
          erg,
        /// <summary>
        /// eV property
        /// </summary>
          eV,
        /// <summary>
        /// GeV property
        /// </summary>
          GeV,
        /// <summary>
        /// GJ property
        /// </summary>
          GJ,
        /// <summary>
        /// GWh property
        /// </summary>
          [XmlEnum("GW.h")]
          GWh,
        /// <summary>
        /// hphr property
        /// </summary>
          [XmlEnum("hp.hr")]
          hphr,
        /// <summary>
        /// kcal property
        /// </summary>
          kcal,
        /// <summary>
        /// keV property
        /// </summary>
          keV,
        /// <summary>
        /// kJ property
        /// </summary>
          kJ,
        /// <summary>
        /// kWh property
        /// </summary>
          [XmlEnum("kW.h")]
          kWh,
        /// <summary>
        /// MeV property
        /// </summary>
          MeV,
        /// <summary>
        /// mJ property
        /// </summary>
          mJ,
        /// <summary>
        /// MJ property
        /// </summary>
          MJ,
        /// <summary>
        /// MWh property
        /// </summary>
          [XmlEnum("MW.h")]
          MWh,
        /// <summary>
        /// nJ property
        /// </summary>
          nJ,
        /// <summary>
        /// quad property
        /// </summary>
          quad,
        /// <summary>
        /// TeV property
        /// </summary>
          TeV,
        /// <summary>
        /// therm property
        /// </summary>
          therm,
        /// <summary>
        /// TJ property
        /// </summary>
          TJ,
        /// <summary>
        /// TWh property
        /// </summary>
          [XmlEnum("TW.h")]
          TWh,
        /// <summary>
        /// uJ property
        /// </summary>
          uJ
        }
        /// <summary>
        /// This class represents the ThermalConductivityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ThermalConductivityUom xsd enumeration.")]
        public enum ThermalConductivityUom 
        {
        /// <summary>
        /// WmK property
        /// </summary>
          [XmlEnum("W/m.K")]
          WmK,
        /// <summary>
        /// BtuhrftdegF property
        /// </summary>
          [XmlEnum("Btu/hr.ft.degF")]
          BtuhrftdegF,
        /// <summary>
        /// calhcmdegC property
        /// </summary>
          [XmlEnum("cal/h.cm.degC")]
          calhcmdegC,
        /// <summary>
        /// calscmdegC property
        /// </summary>
          [XmlEnum("cal/s.cm.degC")]
          calscmdegC,
        /// <summary>
        /// kcalhmdegC property
        /// </summary>
          [XmlEnum("kcal/h.m.degC")]
          kcalhmdegC
        }
        /// <summary>
        /// This class represents the ProductivityIndexUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ProductivityIndexUom xsd enumeration.")]
        public enum ProductivityIndexUom 
        {
        /// <summary>
        /// Item1000ft3psid property
        /// </summary>
          [XmlEnum("1000ft3/psi.d")]
          Item1000ft3psid,
        /// <summary>
        /// Lbarmin property
        /// </summary>
          [XmlEnum("L/bar.min")]
          Lbarmin,
        /// <summary>
        /// bblkPad property
        /// </summary>
          [XmlEnum("bbl/kPa.d")]
          bblkPad,
        /// <summary>
        /// bblpsid property
        /// </summary>
          [XmlEnum("bbl/psi.d")]
          bblpsid,
        /// <summary>
        /// m3Pas property
        /// </summary>
          [XmlEnum("m3/Pa.s")]
          m3Pas,
        /// <summary>
        /// m3Pas1 property
        /// </summary>
          [XmlEnum("m3/Pa/s")]
          m3Pas1,
        /// <summary>
        /// m3bard property
        /// </summary>
          [XmlEnum("m3/bar.d")]
          m3bard,
        /// <summary>
        /// m3barh property
        /// </summary>
          [XmlEnum("m3/bar.h")]
          m3barh,
        /// <summary>
        /// m3barmin property
        /// </summary>
          [XmlEnum("m3/bar.min")]
          m3barmin,
        /// <summary>
        /// m3kPad property
        /// </summary>
          [XmlEnum("m3/kPa.d")]
          m3kPad,
        /// <summary>
        /// m3kPah property
        /// </summary>
          [XmlEnum("m3/kPa.h")]
          m3kPah,
        /// <summary>
        /// m3psid property
        /// </summary>
          [XmlEnum("m3/psi.d")]
          m3psid
        }
        /// <summary>
        /// This class represents the MolarVolumeUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the MolarVolumeUom xsd enumeration.")]
        public enum MolarVolumeUom 
        {
        /// <summary>
        /// m3mol property
        /// </summary>
          [XmlEnum("m3/mol")]
          m3mol,
        /// <summary>
        /// dm3molkg property
        /// </summary>
          [XmlEnum("dm3/mol(kg)")]
          dm3molkg,
        /// <summary>
        /// ft3mollbm property
        /// </summary>
          [XmlEnum("ft3/mol(lbm)")]
          ft3mollbm,
        /// <summary>
        /// Lmolg property
        /// </summary>
          [XmlEnum("L/mol(g)")]
          Lmolg,
        /// <summary>
        /// Lmolkg property
        /// </summary>
          [XmlEnum("L/mol(kg)")]
          Lmolkg,
        /// <summary>
        /// m3molkg property
        /// </summary>
          [XmlEnum("m3/mol(kg)")]
          m3molkg
        }
        /// <summary>
        /// This class represents the ModulusOfCompressionUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ModulusOfCompressionUom xsd enumeration.")]
        public enum ModulusOfCompressionUom 
        {
        /// <summary>
        /// Jm3 property
        /// </summary>
          [XmlEnum("J/m3")]
          Jm3,
        /// <summary>
        /// Btubbl property
        /// </summary>
          [XmlEnum("Btu/bbl")]
          Btubbl,
        /// <summary>
        /// Btuft3 property
        /// </summary>
          [XmlEnum("Btu/ft3")]
          Btuft3,
        /// <summary>
        /// BtugalUK property
        /// </summary>
          [XmlEnum("Btu/galUK")]
          BtugalUK,
        /// <summary>
        /// BtugalUS property
        /// </summary>
          [XmlEnum("Btu/galUS")]
          BtugalUS,
        /// <summary>
        /// calcm3 property
        /// </summary>
          [XmlEnum("cal/cm3")]
          calcm3,
        /// <summary>
        /// calmL property
        /// </summary>
          [XmlEnum("cal/mL")]
          calmL,
        /// <summary>
        /// calmm3 property
        /// </summary>
          [XmlEnum("cal/mm3")]
          calmm3,
        /// <summary>
        /// ergcm3 property
        /// </summary>
          [XmlEnum("erg/cm3")]
          ergcm3,
        /// <summary>
        /// ergm3 property
        /// </summary>
          [XmlEnum("erg/m3")]
          ergm3,
        /// <summary>
        /// ftlbfbbl property
        /// </summary>
          [XmlEnum("ft.lbf/bbl")]
          ftlbfbbl,
        /// <summary>
        /// ftlbfgalUS property
        /// </summary>
          [XmlEnum("ft.lbf/galUS")]
          ftlbfgalUS,
        /// <summary>
        /// hphrbbl property
        /// </summary>
          [XmlEnum("hp.hr/bbl")]
          hphrbbl,
        /// <summary>
        /// Jdm3 property
        /// </summary>
          [XmlEnum("J/dm3")]
          Jdm3,
        /// <summary>
        /// kcalcm3 property
        /// </summary>
          [XmlEnum("kcal/cm3")]
          kcalcm3,
        /// <summary>
        /// kcalm3 property
        /// </summary>
          [XmlEnum("kcal/m3")]
          kcalm3,
        /// <summary>
        /// kJdm3 property
        /// </summary>
          [XmlEnum("kJ/dm3")]
          kJdm3,
        /// <summary>
        /// kJm3 property
        /// </summary>
          [XmlEnum("kJ/m3")]
          kJm3,
        /// <summary>
        /// kWhdm3 property
        /// </summary>
          [XmlEnum("kW.h/dm3")]
          kWhdm3,
        /// <summary>
        /// kWhm3 property
        /// </summary>
          [XmlEnum("kW.h/m3")]
          kWhm3,
        /// <summary>
        /// lbfftbbl property
        /// </summary>
          [XmlEnum("lbf.ft/bbl")]
          lbfftbbl,
        /// <summary>
        /// MJm3 property
        /// </summary>
          [XmlEnum("MJ/m3")]
          MJm3,
        /// <summary>
        /// MWhm3 property
        /// </summary>
          [XmlEnum("MW.h/m3")]
          MWhm3,
        /// <summary>
        /// thermft3 property
        /// </summary>
          [XmlEnum("therm/ft3")]
          thermft3,
        /// <summary>
        /// thermgalUK property
        /// </summary>
          [XmlEnum("therm/galUK")]
          thermgalUK,
        /// <summary>
        /// tonfUSmibbl property
        /// </summary>
          [XmlEnum("tonfUS.mi/bbl")]
          tonfUSmibbl
        }
        /// <summary>
        /// This class represents the MassFlowRateUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the MassFlowRateUom xsd enumeration.")]
        public enum MassFlowRateUom 
        {
        /// <summary>
        /// Mga property
        /// </summary>
          [XmlEnum("Mg/a")]
          Mga,
        /// <summary>
        /// Mgd property
        /// </summary>
          [XmlEnum("Mg/d")]
          Mgd,
        /// <summary>
        /// Mgh property
        /// </summary>
          [XmlEnum("Mg/h")]
          Mgh,
        /// <summary>
        /// Mlbmyr property
        /// </summary>
          [XmlEnum("Mlbm/yr")]
          Mlbmyr,
        /// <summary>
        /// gs property
        /// </summary>
          [XmlEnum("g/s")]
          gs,
        /// <summary>
        /// kgd property
        /// </summary>
          [XmlEnum("kg/d")]
          kgd,
        /// <summary>
        /// kgh property
        /// </summary>
          [XmlEnum("kg/h")]
          kgh,
        /// <summary>
        /// kgmin property
        /// </summary>
          [XmlEnum("kg/min")]
          kgmin,
        /// <summary>
        /// kgs property
        /// </summary>
          [XmlEnum("kg/s")]
          kgs,
        /// <summary>
        /// lbmd property
        /// </summary>
          [XmlEnum("lbm/d")]
          lbmd,
        /// <summary>
        /// lbmh property
        /// </summary>
          [XmlEnum("lbm/h")]
          lbmh,
        /// <summary>
        /// lbmmin property
        /// </summary>
          [XmlEnum("lbm/min")]
          lbmmin,
        /// <summary>
        /// lbms property
        /// </summary>
          [XmlEnum("lbm/s")]
          lbms,
        /// <summary>
        /// ta property
        /// </summary>
          [XmlEnum("t/a")]
          ta,
        /// <summary>
        /// td property
        /// </summary>
          [XmlEnum("t/d")]
          td,
        /// <summary>
        /// th property
        /// </summary>
          [XmlEnum("t/h")]
          th,
        /// <summary>
        /// tmin property
        /// </summary>
          [XmlEnum("t/min")]
          tmin,
        /// <summary>
        /// tonUKa property
        /// </summary>
          [XmlEnum("tonUK/a")]
          tonUKa,
        /// <summary>
        /// tonUKd property
        /// </summary>
          [XmlEnum("tonUK/d")]
          tonUKd,
        /// <summary>
        /// tonUKh property
        /// </summary>
          [XmlEnum("tonUK/h")]
          tonUKh,
        /// <summary>
        /// tonUKmin property
        /// </summary>
          [XmlEnum("tonUK/min")]
          tonUKmin,
        /// <summary>
        /// tonUSa property
        /// </summary>
          [XmlEnum("tonUS/a")]
          tonUSa,
        /// <summary>
        /// tonUSd property
        /// </summary>
          [XmlEnum("tonUS/d")]
          tonUSd,
        /// <summary>
        /// tonUSh property
        /// </summary>
          [XmlEnum("tonUS/h")]
          tonUSh,
        /// <summary>
        /// tonUSmin property
        /// </summary>
          [XmlEnum("tonUS/min")]
          tonUSmin
        }
        /// <summary>
        /// This class represents the FrequencyUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the FrequencyUom xsd enumeration.")]
        public enum FrequencyUom 
        {
        /// <summary>
        /// Hz property
        /// </summary>
          Hz,
        /// <summary>
        /// cs property
        /// </summary>
          [XmlEnum("c/s")]
          cs,
        /// <summary>
        /// GHz property
        /// </summary>
          GHz,
        /// <summary>
        /// kHz property
        /// </summary>
          kHz,
        /// <summary>
        /// mHz property
        /// </summary>
          mHz,
        /// <summary>
        /// MHz property
        /// </summary>
          MHz,
        /// <summary>
        /// uHz property
        /// </summary>
          uHz,
        /// <summary>
        /// Item1s property
        /// </summary>
          [XmlEnum("1/s")]
          Item1s,
        /// <summary>
        /// Item1a property
        /// </summary>
          [XmlEnum("1/a")]
          Item1a,
        /// <summary>
        /// Item1d property
        /// </summary>
          [XmlEnum("1/d")]
          Item1d,
        /// <summary>
        /// Item1h property
        /// </summary>
          [XmlEnum("1/h")]
          Item1h,
        /// <summary>
        /// Item1min property
        /// </summary>
          [XmlEnum("1/min")]
          Item1min,
        /// <summary>
        /// Item1wk property
        /// </summary>
          [XmlEnum("1/wk")]
          Item1wk,
        /// <summary>
        /// kEucs property
        /// </summary>
          [XmlEnum("kEuc/s")]
          kEucs
        }
        /// <summary>
        /// This class represents the CompressibilityUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the CompressibilityUom xsd enumeration.")]
        public enum CompressibilityUom 
        {
        /// <summary>
        /// Item1Pa property
        /// </summary>
          [XmlEnum("1/Pa")]
          Item1Pa,
        /// <summary>
        /// Item1bar property
        /// </summary>
          [XmlEnum("1/bar")]
          Item1bar,
        /// <summary>
        /// Item1kPa property
        /// </summary>
          [XmlEnum("1/kPa")]
          Item1kPa,
        /// <summary>
        /// Item1pPa property
        /// </summary>
          [XmlEnum("1/pPa")]
          Item1pPa,
        /// <summary>
        /// Item1psi property
        /// </summary>
          [XmlEnum("1/psi")]
          Item1psi,
        /// <summary>
        /// Item1upsi property
        /// </summary>
          [XmlEnum("1/upsi")]
          Item1upsi
        }
        /// <summary>
        /// This class represents the AmountOfSubstanceUom xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the AmountOfSubstanceUom xsd enumeration.")]
        public enum AmountOfSubstanceUom 
        {
        /// <summary>
        /// kmol property
        /// </summary>
          kmol,
        /// <summary>
        /// mmol property
        /// </summary>
          mmol,
        /// <summary>
        /// mol property
        /// </summary>
          mol,
        /// <summary>
        /// kmol1 property
        /// </summary>
          [XmlEnum("kmol")]
          kmol1,
        /// <summary>
        /// lbmole property
        /// </summary>
          lbmole,
        /// <summary>
        /// umol property
        /// </summary>
          umol
        }
        /// <summary>
        /// This class represents the PrimitiveType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the PrimitiveType xsd enumeration.")]
        public enum PrimitiveType 
        {
        /// <summary>
        /// string property
        /// </summary>
          @string,
        /// <summary>
        /// boolean property
        /// </summary>
          boolean,
        /// <summary>
        /// float property
        /// </summary>
          @float,
        /// <summary>
        /// double property
        /// </summary>
          @double,
        /// <summary>
        /// duration property
        /// </summary>
          duration,
        /// <summary>
        /// dateTime property
        /// </summary>
          dateTime,
        /// <summary>
        /// time property
        /// </summary>
          time,
        /// <summary>
        /// date property
        /// </summary>
          date,
        /// <summary>
        /// gYearMonth property
        /// </summary>
          gYearMonth,
        /// <summary>
        /// gYear property
        /// </summary>
          gYear,
        /// <summary>
        /// gMonthDay property
        /// </summary>
          gMonthDay,
        /// <summary>
        /// gDay property
        /// </summary>
          gDay,
        /// <summary>
        /// gMonth property
        /// </summary>
          gMonth,
        /// <summary>
        /// base64Binary property
        /// </summary>
          base64Binary,
        /// <summary>
        /// anyURI property
        /// </summary>
          anyURI,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemState xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemState xsd enumeration.")]
        public enum ItemState 
        {
        /// <summary>
        /// Actual data measured or entered at the well site.
        /// </summary>
          actual,
        /// <summary>
        /// Model data used for "what if" calculations.
        /// </summary>
          model,
        /// <summary>
        /// A planned object. That is, one which is expected to be executed in the future.
        /// </summary>
          plan,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemsChoiceType8 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType8 xsd enumeration.")]
        public enum ItemsChoiceType8 
        {
        /// <summary>
        /// easting property
        /// </summary>
          easting,
        /// <summary>
        /// latitude property
        /// </summary>
          latitude,
        /// <summary>
        /// localX property
        /// </summary>
          localX,
        /// <summary>
        /// localY property
        /// </summary>
          localY,
        /// <summary>
        /// longitude property
        /// </summary>
          longitude,
        /// <summary>
        /// northing property
        /// </summary>
          northing,
        /// <summary>
        /// projectedX property
        /// </summary>
          projectedX,
        /// <summary>
        /// projectedY property
        /// </summary>
          projectedY,
        /// <summary>
        /// southing property
        /// </summary>
          southing,
        /// <summary>
        /// westing property
        /// </summary>
          westing
        }
        /// <summary>
        /// This class represents the ElevCodeEnum xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ElevCodeEnum xsd enumeration.")]
        public enum ElevCodeEnum 
        {
        /// <summary>
        /// casing flange: A flange affixed to the top of the casing string used to attach production equipment.
        /// </summary>
          CF,
        /// <summary>
        /// crown valve
        /// </summary>
          CV,
        /// <summary>
        /// derrick floor
        /// </summary>
          DF,
        /// <summary>
        /// ground level
        /// </summary>
          GL,
        /// <summary>
        /// kelly bushing
        /// </summary>
          KB,
        /// <summary>
        /// rotary bushing
        /// </summary>
          RB,
        /// <summary>
        /// rotary table
        /// </summary>
          RT,
        /// <summary>
        /// sea floor
        /// </summary>
          SF,
        /// <summary>
        /// Lowest Astronomical Tide. The lowest tide level over the duration of the National Tidal Datum Epoch (19 years).
        /// </summary>
          LAT,
        /// <summary>
        /// Mean Sea Level - A tidal datum. The arithmetic mean of hourly heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          SL,
        /// <summary>
        /// Mean Higher High Water - A tidal datum. The average of the higher high water height of each tidal day observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHHW,
        /// <summary>
        /// Mean High Water - A tidal datum. The average of all the high water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MHW,
        /// <summary>
        /// Mean Lower Low Water - A tidal datum. The average of the lower low water height of each tidal day observed over the National Tidal Datum Epoch (19 years ).
        /// </summary>
          MLLW,
        /// <summary>
        /// Mean Low Water - A tidal datum. The average of all the low water heights observed over the National Tidal Datum Epoch (19 years).
        /// </summary>
          MLW,
        /// <summary>
        /// Mean Tide Level - A tidal datum. The arithmetic mean of mean high water and mean low water. Same as half-tide level.
        /// </summary>
          MTL,
        /// <summary>
        /// kickoff point
        /// </summary>
          KO,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellFluid xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the WellFluid xsd enumeration.")]
        public enum WellFluid 
        {
        /// <summary>
        /// This is generally an injected fluid.
        /// </summary>
          air,
        /// <summary>
        /// Liquid hydrocarbons produced with natural gas that are separated from the gas by cooling and various other means. Condensate generally has an API gravity of 50 degrees to 120 degrees and is water white, straw, or bluish in color. It is the liquid recovery from a well classified as a gas well. It is generally dissolved in the gaseous state under reservoir conditions but separates as a liquid either in passing up the hole or at the surface. These hydrocarbons, from associated and nonassociated gas well gas, normally are recovered from lease separators or field facilities by mechanical separation.
        /// </summary>
          condensate,
        /// <summary>
        /// The well facility is classified as a dry well. It has not been, nor will it be used to produce or inject any fluids.
        /// </summary>
          dry,
        /// <summary>
        /// The well is classified as a gas well, producing or injecting a hydrocarbon gas. The gas is generally methane, but may have a mixture of other gases also.
        /// </summary>
          gas,
        /// <summary>
        /// gaswater property
        /// </summary>
          [XmlEnum("gas-water")]
          gaswater,
        /// <summary>
        /// nonHCgas property
        /// </summary>
          [XmlEnum("non HC gas")]
          nonHCgas,
        /// <summary>
        /// nonHCgasCO2 property
        /// </summary>
          [XmlEnum("non HC gas -- CO2")]
          nonHCgasCO2,
        /// <summary>
        /// The liquid hydrocarbon, generally referred to as crude oil.
        /// </summary>
          oil,
        /// <summary>
        /// oilgas property
        /// </summary>
          [XmlEnum("oil-gas")]
          oilgas,
        /// <summary>
        /// oilwater property
        /// </summary>
          [XmlEnum("oil-water")]
          oilwater,
        /// <summary>
        /// The gaseous state of water. This is generally an injected fluid, but it is possible that some hydrothermal wells produce steam.
        /// </summary>
          steam,
        /// <summary>
        /// The well is classified as a water well without distinguishing between brine or fresh water.
        /// </summary>
          water,
        /// <summary>
        /// waterbrine property
        /// </summary>
          [XmlEnum("water -- brine")]
          waterbrine,
        /// <summary>
        /// waterfreshwater property
        /// </summary>
          [XmlEnum("water -- fresh water")]
          waterfreshwater,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the WellDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the WellDirection xsd enumeration.")]
        public enum WellDirection 
        {
        /// <summary>
        /// huffnpuff property
        /// </summary>
          [XmlEnum("huff-n-puff")]
          huffnpuff,
        /// <summary>
        /// The well facility is injecting fluids into the subsurface.
        /// </summary>
          injector,
        /// <summary>
        /// The well facility is producing fluids from the subsurface.
        /// </summary>
          producer,
        /// <summary>
        /// The flow direction of the fluids is variable, but not on a regular basis as is the case with the huff-n-puff flow.
        /// </summary>
          uncertain,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemsChoiceType7 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType7 xsd enumeration.")]
        public enum ItemsChoiceType7 
        {
        /// <summary>
        /// dTim property
        /// </summary>
          dTim,
        /// <summary>
        /// dTimEnd property
        /// </summary>
          dTimEnd,
        /// <summary>
        /// dTimStart property
        /// </summary>
          dTimStart,
        /// <summary>
        /// date property
        /// </summary>
          date,
        /// <summary>
        /// dateEnd property
        /// </summary>
          dateEnd,
        /// <summary>
        /// dateStart property
        /// </summary>
          dateStart
        }
        /// <summary>
        /// This class represents the WellStatus xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the WellStatus xsd enumeration.")]
        public enum WellStatus 
        {
        /// <summary>
        /// The status of a facility in which drilling, completion, and production operations have been permanently terminated.
        /// </summary>
          abandoned,
        /// <summary>
        /// For a well to be active, at least one of its wellbores must be active. For a wellbore to be active, at least one of its completions must be actively producing or injecting fluids.
        /// </summary>
          active,
        /// <summary>
        /// activeinjecting property
        /// </summary>
          [XmlEnum("active -- injecting")]
          activeinjecting,
        /// <summary>
        /// activeproducing property
        /// </summary>
          [XmlEnum("active -- producing")]
          activeproducing,
        /// <summary>
        /// The completion has been installed, but the facility is not yet active. This status is appropriate only before the initial producing or injecting activity.
        /// </summary>
          completed,
        /// <summary>
        /// The status of a well or wellbore in which drilling operations have begun, but are not yet completed. The status ends when another status becomes appropriate.
        /// </summary>
          drilling,
        /// <summary>
        /// partiallyplugged property
        /// </summary>
          [XmlEnum("partially plugged")]
          partiallyplugged,
        /// <summary>
        /// The facility has received regulatory approvel, but drilling has not yet commenced. For a well, it has been spudded. For a subsequent wellbore, the whipstock or similar device has not yet been set.
        /// </summary>
          permitted,
        /// <summary>
        /// pluggedandabandoned property
        /// </summary>
          [XmlEnum("plugged and abandoned")]
          pluggedandabandoned,
        /// <summary>
        /// The status of a well or wellbore from conception to either regulatory approval or commencement of drilling.
        /// </summary>
          proposed,
        /// <summary>
        /// The facility has been sold, so it is no longer appropriate to keep a close internal status value. Status values may be added at later times without changing the sold status.
        /// </summary>
          sold,
        /// <summary>
        /// Production or injection has been temporarily suspended in a manner that will allow immediate resumption of activities.
        /// </summary>
          suspended,
        /// <summary>
        /// temporarilyabandoned property
        /// </summary>
          [XmlEnum("temporarily abandoned")]
          temporarilyabandoned,
        /// <summary>
        /// The facility operations are suspended while tests are being conducted to determine formation and/or reservoir properties. For example, a drillstem test. This status also includes extended testing.
        /// </summary>
          testing,
        /// <summary>
        /// Information about the status of the well is confidential. This is more explicit than unknown, since it gives the reason that the status value is unknown.
        /// </summary>
          tight,
        /// <summary>
        /// workingover property
        /// </summary>
          [XmlEnum("working over")]
          workingover,
        /// <summary>
        /// The value is not known. This value should not be used in normal situations. All reasonable attempts should be made to determine the appropriate value. Use of this value may result in rejection in some situations.
        /// </summary>
          unknown
        }
        /// <summary>
        /// This class represents the ItemsChoiceType6 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType6 xsd enumeration.")]
        public enum ItemsChoiceType6 
        {
        /// <summary>
        /// dTimEnd property
        /// </summary>
          dTimEnd,
        /// <summary>
        /// dTimStart property
        /// </summary>
          dTimStart,
        /// <summary>
        /// dateEnd property
        /// </summary>
          dateEnd,
        /// <summary>
        /// dateStart property
        /// </summary>
          dateStart,
        /// <summary>
        /// month property
        /// </summary>
          month
        }
        /// <summary>
        /// This class represents the ItemChoiceType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType xsd enumeration.")]
        public enum ItemChoiceType 
        {
        /// <summary>
        /// county property
        /// </summary>
          county,
        /// <summary>
        /// province property
        /// </summary>
          province,
        /// <summary>
        /// state property
        /// </summary>
          state
        }
        /// <summary>
        /// This class represents the ItemsChoiceType5 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType5 xsd enumeration.")]
        public enum ItemsChoiceType5 
        {
        /// <summary>
        /// dTimEnd property
        /// </summary>
          dTimEnd,
        /// <summary>
        /// dTimStart property
        /// </summary>
          dTimStart,
        /// <summary>
        /// dateEnd property
        /// </summary>
          dateEnd,
        /// <summary>
        /// dateStart property
        /// </summary>
          dateStart
        }
        /// <summary>
        /// This class represents the ItemChoiceType7 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType7 xsd enumeration.")]
        public enum ItemChoiceType7 
        {
        /// <summary>
        /// bubblePointPressure property
        /// </summary>
          bubblePointPressure,
        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
          retrogradeDewPointPressure
        }
        /// <summary>
        /// This class represents the Items1ChoiceType1 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the Items1ChoiceType1 xsd enumeration.")]
        public enum Items1ChoiceType1 
        {
        /// <summary>
        /// reservoir property
        /// </summary>
          reservoir,
        /// <summary>
        /// saturated property
        /// </summary>
          saturated,
        /// <summary>
        /// stockTank property
        /// </summary>
          stockTank
        }
        /// <summary>
        /// This class represents the ItemChoiceType6 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType6 xsd enumeration.")]
        public enum ItemChoiceType6 
        {
        /// <summary>
        /// bubblePointPressure property
        /// </summary>
          bubblePointPressure,
        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
          retrogradeDewPointPressure
        }
        /// <summary>
        /// This class represents the ItemsChoiceType4 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType4 xsd enumeration.")]
        public enum ItemsChoiceType4 
        {
        /// <summary>
        /// reservoir property
        /// </summary>
          reservoir,
        /// <summary>
        /// saturated property
        /// </summary>
          saturated,
        /// <summary>
        /// stockTank property
        /// </summary>
          stockTank
        }
        /// <summary>
        /// This class represents the ItemsChoiceType3 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType3 xsd enumeration.")]
        public enum ItemsChoiceType3 
        {
        /// <summary>
        /// reservoir property
        /// </summary>
          reservoir,
        /// <summary>
        /// saturated property
        /// </summary>
          saturated,
        /// <summary>
        /// stockTank property
        /// </summary>
          stockTank
        }
        /// <summary>
        /// This class represents the ItemChoiceType5 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType5 xsd enumeration.")]
        public enum ItemChoiceType5 
        {
        /// <summary>
        /// bubblePointPressure property
        /// </summary>
          bubblePointPressure,
        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
          retrogradeDewPointPressure
        }
        /// <summary>
        /// This class represents the ItemsChoiceType2 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType2 xsd enumeration.")]
        public enum ItemsChoiceType2 
        {
        /// <summary>
        /// reservoir property
        /// </summary>
          reservoir,
        /// <summary>
        /// saturated property
        /// </summary>
          saturated,
        /// <summary>
        /// stockTank property
        /// </summary>
          stockTank
        }
        /// <summary>
        /// This class represents the ItemChoiceType4 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType4 xsd enumeration.")]
        public enum ItemChoiceType4 
        {
        /// <summary>
        /// bubblePointPressure property
        /// </summary>
          bubblePointPressure,
        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
          retrogradeDewPointPressure
        }
        /// <summary>
        /// This class represents the ItemsChoiceType1 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType1 xsd enumeration.")]
        public enum ItemsChoiceType1 
        {
        /// <summary>
        /// reservoir property
        /// </summary>
          reservoir,
        /// <summary>
        /// saturated property
        /// </summary>
          saturated,
        /// <summary>
        /// stockTank property
        /// </summary>
          stockTank
        }
        /// <summary>
        /// This class represents the ItemChoiceType3 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType3 xsd enumeration.")]
        public enum ItemChoiceType3 
        {
        /// <summary>
        /// bubblePointPressure property
        /// </summary>
          bubblePointPressure,
        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
          retrogradeDewPointPressure
        }
        /// <summary>
        /// This class represents the ItemsChoiceType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemsChoiceType xsd enumeration.")]
        public enum ItemsChoiceType 
        {
        /// <summary>
        /// liquidDropoutPercent property
        /// </summary>
          liquidDropoutPercent,
        /// <summary>
        /// liquidVolume property
        /// </summary>
          liquidVolume,
        /// <summary>
        /// totalVolume property
        /// </summary>
          totalVolume
        }
        /// <summary>
        /// This class represents the Items1ChoiceType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the Items1ChoiceType xsd enumeration.")]
        public enum Items1ChoiceType 
        {
        /// <summary>
        /// reservoir property
        /// </summary>
          reservoir,
        /// <summary>
        /// saturated property
        /// </summary>
          saturated,
        /// <summary>
        /// stockTank property
        /// </summary>
          stockTank
        }
        /// <summary>
        /// This class represents the ItemChoiceType2 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType2 xsd enumeration.")]
        public enum ItemChoiceType2 
        {
        /// <summary>
        /// bubblePointPressure property
        /// </summary>
          bubblePointPressure,
        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
          retrogradeDewPointPressure
        }
        /// <summary>
        /// This class represents the ItemChoiceType1 xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ItemChoiceType1 xsd enumeration.")]
        public enum ItemChoiceType1 
        {
        /// <summary>
        /// bubblePointPressure property
        /// </summary>
          bubblePointPressure,
        /// <summary>
        /// retrogradeDewPointPressure property
        /// </summary>
          retrogradeDewPointPressure
        }
        /// <summary>
        /// This class represents the TerminationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the TerminationType xsd enumeration.")]
        public enum TerminationType 
        {
        /// <summary>
        /// loopedbacktoinstrumentbox property
        /// </summary>
          [XmlEnum("looped back to instrument box")]
          loopedbacktoinstrumentbox,
        /// <summary>
        /// terminationatcable property
        /// </summary>
          [XmlEnum("termination at cable")]
          terminationatcable
        }
        /// <summary>
        /// This class represents the FiberConnectorTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the FiberConnectorTypes xsd enumeration.")]
        public enum FiberConnectorTypeList 
        {
        /// <summary>
        /// drymate property
        /// </summary>
          [XmlEnum("dry mate")]
          drymate,
        /// <summary>
        /// wetmate property
        /// </summary>
          [XmlEnum("wet mate")]
          wetmate
        }
        /// <summary>
        /// This class represents the FiberEndType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the FiberEndType xsd enumeration.")]
        public enum FiberEndType 
        {
        /// <summary>
        /// anglepolished property
        /// </summary>
          [XmlEnum("angle polished")]
          anglepolished,
        /// <summary>
        /// flatpolished property
        /// </summary>
          [XmlEnum("flat polished")]
          flatpolished
        }
        /// <summary>
        /// This class represents the FiberSpliceTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the FiberSpliceTypes xsd enumeration.")]
        public enum FiberSpliceTypeList 
        {
        /// <summary>
        /// cablesplice property
        /// </summary>
          [XmlEnum("cable splice")]
          cablesplice,
        /// <summary>
        /// hsplice property
        /// </summary>
          [XmlEnum("h splice")]
          hsplice,
        /// <summary>
        /// usercustom property
        /// </summary>
          [XmlEnum("user-custom")]
          usercustom
        }
        /// <summary>
        /// This class represents the ControlLineSize xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ControlLineSize xsd enumeration.")]
        public enum ControlLineSize 
        {
        /// <summary>
        /// diameter025inweight0028lbft property
        /// </summary>
          [XmlEnum("diameter 0.25 in weight 0.028 lb/ft")]
          diameter025inweight0028lbft,
        /// <summary>
        /// diameter025inweight0035lbft property
        /// </summary>
          [XmlEnum("diameter 0.25 in weight 0.035 lb/ft")]
          diameter025inweight0035lbft,
        /// <summary>
        /// diameter0375inweight0048lbft property
        /// </summary>
          [XmlEnum("diameter 0.375 in weight 0.048 lb/ft")]
          diameter0375inweight0048lbft
        }
        /// <summary>
        /// This class represents the ControlLineMaterial xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ControlLineMaterial xsd enumeration.")]
        public enum ControlLineMaterial 
        {
        /// <summary>
        /// inc825 property
        /// </summary>
          [XmlEnum("inc 825")]
          inc825,
        /// <summary>
        /// ss316 property
        /// </summary>
          [XmlEnum("ss 316")]
          ss316
        }
        /// <summary>
        /// This class represents the ControlLineEncapsulationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ControlLineEncapsulationType xsd enumeration.")]
        public enum ControlLineEncapsulationType 
        {
        /// <summary>
        /// round property
        /// </summary>
          round,
        /// <summary>
        /// square property
        /// </summary>
          square
        }
        /// <summary>
        /// This class represents the ControlLineEncapsulationSize xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the ControlLineEncapsulationSize xsd enumeration.")]
        public enum ControlLineEncapsulationSize 
        {
        /// <summary>
        /// Item11x11 property
        /// </summary>
          [XmlEnum("11x11")]
          Item11x11,
        /// <summary>
        /// Item23x11 property
        /// </summary>
          [XmlEnum("23x11")]
          Item23x11
        }
        /// <summary>
        /// This class represents the InterventionConveyanceType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the InterventionConveyanceType xsd enumeration.")]
        public enum InterventionConveyanceType 
        {
        /// <summary>
        /// coiledtubing property
        /// </summary>
          [XmlEnum("coiled tubing")]
          coiledtubing,
        /// <summary>
        /// rod property
        /// </summary>
          rod,
        /// <summary>
        /// slickline property
        /// </summary>
          slickline,
        /// <summary>
        /// wireline property
        /// </summary>
          wireline
        }
        /// <summary>
        /// This class represents the PermanentCableInstallationType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the PermanentCableInstallationType xsd enumeration.")]
        public enum PermanentCableInstallationType 
        {
        /// <summary>
        /// buriedparalleltotubular property
        /// </summary>
          [XmlEnum("buried parallel to tubular")]
          buriedparalleltotubular,
        /// <summary>
        /// clampedtotubular property
        /// </summary>
          [XmlEnum("clamped to tubular")]
          clampedtotubular,
        /// <summary>
        /// wrappedaroundtubular property
        /// </summary>
          [XmlEnum("wrapped around tubular")]
          wrappedaroundtubular
        }
        /// <summary>
        /// This class represents the CableType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the CableType xsd enumeration.")]
        public enum CableType 
        {
        /// <summary>
        /// electricalfibercable property
        /// </summary>
          [XmlEnum("electrical-fiber-cable")]
          electricalfibercable,
        /// <summary>
        /// multifibercable property
        /// </summary>
          [XmlEnum("multi-fiber-cable")]
          multifibercable,
        /// <summary>
        /// singlefibercable property
        /// </summary>
          [XmlEnum("single-fiber-cable")]
          singlefibercable
        }
        /// <summary>
        /// This class represents the OTDRDirection xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the OTDRDirection xsd enumeration.")]
        public enum OTDRDirection 
        {
        /// <summary>
        /// backward property
        /// </summary>
          backward,
        /// <summary>
        /// forward property
        /// </summary>
          forward
        }
        /// <summary>
        /// This class represents the PathDefectTypes xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the PathDefectTypes xsd enumeration.")]
        public enum PathDefectTypeList 
        {
        /// <summary>
        /// darkenedfiber property
        /// </summary>
          [XmlEnum("darkened fiber")]
          darkenedfiber,
        /// <summary>
        /// other property
        /// </summary>
          other
        }
        /// <summary>
        /// This class represents the InterpretationProcessingType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the InterpretationProcessingType xsd enumeration.")]
        public enum InterpretationProcessingType 
        {
        /// <summary>
        /// averaged property
        /// </summary>
          averaged,
        /// <summary>
        /// denormalized property
        /// </summary>
          denormalized,
        /// <summary>
        /// depthcorrected property
        /// </summary>
          [XmlEnum("depth-corrected")]
          depthcorrected,
        /// <summary>
        /// manufacturergenerated property
        /// </summary>
          [XmlEnum("manufacturer-generated")]
          manufacturergenerated,
        /// <summary>
        /// temperatureshifted property
        /// </summary>
          [XmlEnum("temperature-shifted")]
          temperatureshifted,
        /// <summary>
        /// usercustom property
        /// </summary>
          [XmlEnum("user-custom")]
          usercustom
        }
        /// <summary>
        /// This class represents the TraceProcessingType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the TraceProcessingType xsd enumeration.")]
        public enum TraceProcessingType 
        {
        /// <summary>
        /// asacquired property
        /// </summary>
          [XmlEnum("as acquired")]
          asacquired,
        /// <summary>
        /// recalibrated property
        /// </summary>
          recalibrated
        }
        /// <summary>
        /// This class represents the OpticalPathConfiguration xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the OpticalPathConfiguration xsd enumeration.")]
        public enum OpticalPathConfiguration 
        {
        /// <summary>
        /// accuratesingleendedduallaser property
        /// </summary>
          [XmlEnum("accurate single-ended/dual laser")]
          accuratesingleendedduallaser,
        /// <summary>
        /// differentiallosscalibrated property
        /// </summary>
          [XmlEnum("differential loss calibrated")]
          differentiallosscalibrated,
        /// <summary>
        /// doubleended property
        /// </summary>
          [XmlEnum("double-ended")]
          doubleended,
        /// <summary>
        /// singleended property
        /// </summary>
          [XmlEnum("single-ended")]
          singleended
        }
        /// <summary>
        /// This class represents the InterpretationMnemonicType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the InterpretationMnemonicType xsd enumeration.")]
        public enum InterpretationMnemonicType 
        {
        /// <summary>
        /// facilityDistanceadjustedTemperature property
        /// </summary>
          [XmlEnum("facilityDistance,adjustedTemperature")]
          facilityDistanceadjustedTemperature
        }
        /// <summary>
        /// This class represents the InterpretationUnitType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the InterpretationUnitType xsd enumeration.")]
        public enum InterpretationUnitType 
        {
        /// <summary>
        /// mdegC property
        /// </summary>
          [XmlEnum("m,degC")]
          mdegC,
        /// <summary>
        /// ftdegF property
        /// </summary>
          [XmlEnum("ft,degF")]
          ftdegF
        }
        /// <summary>
        /// This class represents the MeasurementMnemonicType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the MeasurementMnemonicType xsd enumeration.")]
        public enum MeasurementMnemonicType 
        {
        /// <summary>
        /// fiberDistanceantistokesstokesreverseAntiStokesreverseStokesrayleigh1rayleigh2brillouinfrequencylosslossRatiocumulativeExcessLossfrequencyQualityMeasuremeasurementUncertaintybrillouinAmplitudeopticalPathTemperatureuncalibratedTemperature1uncalibratedTemperature2 property
        /// </summary>
          [XmlEnum("fiberDistance,antistokes,stokes,reverseAntiStokes,reverseStokes,rayleigh1,rayleigh2,brillouinfrequency,loss,lossRatio,cumulativeExcessLoss,frequencyQualityMeasure,measurementUncertainty,brillouinAmplitude,opticalPathTemperature,uncalibratedTemperature1,uncalibratedTemperature2,")]
          fiberDistanceantistokesstokesreverseAntiStokesreverseStokesrayleigh1rayleigh2brillouinfrequencylosslossRatiocumulativeExcessLossfrequencyQualityMeasuremeasurementUncertaintybrillouinAmplitudeopticalPathTemperatureuncalibratedTemperature1uncalibratedTemperature2
        }
        /// <summary>
        /// This class represents the MeasurementUnitType xsd enumeration.
        /// </summary>
        [System.SerializableAttribute()]
        [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.prodml.org/schemas/1series")]
        [Description("This class represents the MeasurementUnitType xsd enumeration.")]
        public enum MeasurementUnitType 
        {
        /// <summary>
        /// mmWmWmWmWmWmWGHzdBKmdBKmdBdimensionlessdegCmWdegCdegCdegC property
        /// </summary>
          [XmlEnum("m,mW,mW,mW,mW,mW,mW,GHz,dB/Km,dB/Km,dB,dimensionless,degC,mW,degC,degC,degC,")]
          mmWmWmWmWmWmWGHzdBKmdBKmdBdimensionlessdegCmWdegCdegCdegC,
        /// <summary>
        /// ftmWmWmWmWmWmWGHzdBKmdBKmdBdimensionlessdegFmWdegFdegFdegF property
        /// </summary>
          [XmlEnum("ft,mW,mW,mW,mW,mW,mW,GHz,dB/Km,dB/Km,dB,dimensionless,degF,mW,degF,degF,degF,")]
          ftmWmWmWmWmWmWGHzdBKmdBKmdBdimensionlessdegFmWdegFdegFdegF
        }
    }
    #endregion
}